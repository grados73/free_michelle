
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011fac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013c90  08012150  08012150  00022150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025de0  08025de0  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08025de0  08025de0  00035de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025de8  08025de8  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025de8  08025de8  00035de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025dec  08025dec  00035dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08025df0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20000214  08026004  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  08026004  000407fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e51  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a12  00000000  00000000  00062095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  00066aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000758c  00000000  00000000  000682d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000243af  00000000  00000000  0006f85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00097c7a  00000000  00000000  00093c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0012b885  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001680  00000000  00000000  0012b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000783c  00000000  00000000  0012cf58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012134 	.word	0x08012134

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	08012134 	.word	0x08012134

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000288 	.word	0x20000288

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	20000288 	.word	0x20000288

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	20000288 	.word	0x20000288

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	20000288 	.word	0x20000288

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	20000288 	.word	0x20000288

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000288 	.word	0x20000288

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f005 f8ac 	bl	8006d8c <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	2000028c 	.word	0x2000028c

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f005 ffdd 	bl	8007c6c <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f005 ffd7 	bl	8007c6c <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f005 ffcc 	bl	8007c6c <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f005 ffb9 	bl	8007c6c <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f005 ffb3 	bl	8007c6c <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f005 ffa7 	bl	8007c6c <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f005 ff9d 	bl	8007c6c <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f005 fea2 	bl	8007c6c <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f005 fe9c 	bl	8007c6c <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f005 fe65 	bl	8007c6c <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	2000028c 	.word	0x2000028c

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f005 fe45 	bl	8007c6c <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f005 fe3c 	bl	8007c6c <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000028c 	.word	0x2000028c
 8002054:	080151bc 	.word	0x080151bc
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f005 fdff 	bl	8007c6c <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f009 fc16 	bl	800b8ae <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f005 fdef 	bl	8007c6c <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000290 	.word	0x20000290
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002b9 	.word	0x200002b9

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f004 fd4c 	bl	8006d74 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f005 fc83 	bl	8007c3c <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f004 fd17 	bl	8006d74 <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f004 fd11 	bl	8006d74 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f005 fc45 	bl	8007c3c <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f004 fcd9 	bl	8006d74 <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 fe86 	bl	80070f8 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 fe71 	bl	80070da <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f004 fe40 	bl	800708a <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002b9 	.word	0x200002b9
 8002420:	200002bc 	.word	0x200002bc
 8002424:	200002b8 	.word	0x200002b8
 8002428:	20000290 	.word	0x20000290
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f004 fe30 	bl	80070a6 <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002b9 	.word	0x200002b9

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f005 fbf7 	bl	8007c6c <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f004 fc79 	bl	8006d8c <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002b9 	.word	0x200002b9
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_DMA_Init+0x6c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <MX_DMA_Init+0x6c>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_DMA_Init+0x6c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	200b      	movs	r0, #11
 800251c:	f004 fd99 	bl	8007052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002520:	200b      	movs	r0, #11
 8002522:	f004 fdb2 	bl	800708a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	200c      	movs	r0, #12
 800252c:	f004 fd91 	bl	8007052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002530:	200c      	movs	r0, #12
 8002532:	f004 fdaa 	bl	800708a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2010      	movs	r0, #16
 800253c:	f004 fd89 	bl	8007052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002540:	2010      	movs	r0, #16
 8002542:	f004 fda2 	bl	800708a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2011      	movs	r0, #17
 800254c:	f004 fd81 	bl	8007052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002550:	2011      	movs	r0, #17
 8002552:	f004 fd9a 	bl	800708a <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <DS3231_Init+0x30>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f8ca 	bl	800270c <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 f88e 	bl	800269a <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800257e:	f000 f8e7 	bl	8002750 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002582:	f000 f8ad 	bl	80026e0 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f846 	bl	8002618 <DS3231_SetInterruptMode>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200002c0 	.word	0x200002c0

08002598 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	733b      	strb	r3, [r7, #12]
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <DS3231_SetRegByte+0x38>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2302      	movs	r3, #2
 80025c0:	21d0      	movs	r1, #208	; 0xd0
 80025c2:	f005 fce3 	bl	8007f8c <HAL_I2C_Master_Transmit>
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002c0 	.word	0x200002c0

080025d4 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2301      	movs	r3, #1
 80025ec:	21d0      	movs	r1, #208	; 0xd0
 80025ee:	f005 fccd 	bl	8007f8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	f107 020f 	add.w	r2, r7, #15
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	21d0      	movs	r1, #208	; 0xd0
 8002604:	f005 fdc0 	bl	8008188 <HAL_I2C_Master_Receive>
	return val;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200002c0 	.word	0x200002c0

08002618 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002622:	200e      	movs	r0, #14
 8002624:	f7ff ffd6 	bl	80025d4 <DS3231_GetRegByte>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	b25a      	sxtb	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b25b      	sxtb	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	200e      	movs	r0, #14
 800264c:	f7ff ffa4 	bl	8002598 <DS3231_SetRegByte>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002662:	200e      	movs	r0, #14
 8002664:	f7ff ffb6 	bl	80025d4 <DS3231_GetRegByte>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	b25b      	sxtb	r3, r3
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d102      	bne.n	8002682 <DS3231_EnableOscillator+0x2a>
 800267c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002680:	e000      	b.n	8002684 <DS3231_EnableOscillator+0x2c>
 8002682:	2200      	movs	r2, #0
 8002684:	4313      	orrs	r3, r2
 8002686:	b25b      	sxtb	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	200e      	movs	r0, #14
 800268e:	f7ff ff83 	bl	8002598 <DS3231_SetRegByte>
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80026a4:	200e      	movs	r0, #14
 80026a6:	f7ff ff95 	bl	80025d4 <DS3231_GetRegByte>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	200e      	movs	r0, #14
 80026ce:	f7ff ff63 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff ffa0 	bl	8002618 <DS3231_SetInterruptMode>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80026e6:	200f      	movs	r0, #15
 80026e8:	f7ff ff74 	bl	80025d4 <DS3231_GetRegByte>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	200f      	movs	r0, #15
 8002700:	f7ff ff4a 	bl	8002598 <DS3231_SetRegByte>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002716:	200e      	movs	r0, #14
 8002718:	f7ff ff5c 	bl	80025d4 <DS3231_GetRegByte>
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	b25a      	sxtb	r2, r3
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b25b      	sxtb	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b25b      	sxtb	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4619      	mov	r1, r3
 800273c:	200e      	movs	r0, #14
 800273e:	f7ff ff2b 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff ff68 	bl	8002618 <DS3231_SetInterruptMode>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002756:	200f      	movs	r0, #15
 8002758:	f7ff ff3c 	bl	80025d4 <DS3231_GetRegByte>
 800275c:	4603      	mov	r3, r0
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	200f      	movs	r0, #15
 8002770:	f7ff ff12 	bl	8002598 <DS3231_SetRegByte>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002780:	2002      	movs	r0, #2
 8002782:	f7ff ff27 	bl	80025d4 <DS3231_GetRegByte>
 8002786:	4603      	mov	r3, r0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f848 	bl	800281e <DS3231_DecodeBCD>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002798:	2001      	movs	r0, #1
 800279a:	f7ff ff1b 	bl	80025d4 <DS3231_GetRegByte>
 800279e:	4603      	mov	r3, r0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f83c 	bl	800281e <DS3231_DecodeBCD>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f846 	bl	8002850 <DS3231_EncodeBCD>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4619      	mov	r1, r3
 80027c8:	2002      	movs	r0, #2
 80027ca:	f7ff fee5 	bl	8002598 <DS3231_SetRegByte>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f834 	bl	8002850 <DS3231_EncodeBCD>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4619      	mov	r1, r3
 80027ec:	2001      	movs	r0, #1
 80027ee:	f7ff fed3 	bl	8002598 <DS3231_SetRegByte>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f822 	bl	8002850 <DS3231_EncodeBCD>
 800280c:	4603      	mov	r3, r0
 800280e:	4619      	mov	r1, r3
 8002810:	2000      	movs	r0, #0
 8002812:	f7ff fec1 	bl	8002598 <DS3231_SetRegByte>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	b2db      	uxtb	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	0092      	lsls	r2, r2, #2
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	b2da      	uxtb	r2, r3
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4413      	add	r3, r2
 8002842:	b2db      	uxtb	r3, r3
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 800285a:	79fa      	ldrb	r2, [r7, #7]
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <DS3231_EncodeBCD+0x40>)
 800285e:	fba3 1302 	umull	r1, r3, r3, r2
 8002862:	08d9      	lsrs	r1, r3, #3
 8002864:	460b      	mov	r3, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	b2da      	uxtb	r2, r3
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	4907      	ldr	r1, [pc, #28]	; (8002890 <DS3231_EncodeBCD+0x40>)
 8002874:	fba1 1303 	umull	r1, r3, r1, r3
 8002878:	08db      	lsrs	r3, r3, #3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4413      	add	r3, r2
 8002882:	b2db      	uxtb	r3, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	cccccccd 	.word	0xcccccccd

08002894 <eeprom_wait>:
#define WRITE_TIMEOUT   6

static uint32_t last_write;

void eeprom_wait(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 8002898:	bf00      	nop
 800289a:	f004 fa6b 	bl	8006d74 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <eeprom_wait+0x1c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d9f7      	bls.n	800289a <eeprom_wait+0x6>
    {
    }
}
 80028aa:	bf00      	nop
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000248 	.word	0x20000248

080028b4 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af04      	add	r7, sp, #16
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80028c0:	f7ff ffe8 	bl	8002894 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295
 80028d0:	9102      	str	r1, [sp, #8]
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	2301      	movs	r3, #1
 80028da:	21a0      	movs	r1, #160	; 0xa0
 80028dc:	4803      	ldr	r0, [pc, #12]	; (80028ec <eeprom_read+0x38>)
 80028de:	f005 ff73 	bl	80087c8 <HAL_I2C_Mem_Read>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	200002e4 	.word	0x200002e4

080028f0 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 80028fc:	f7ff ffca 	bl	8002894 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	9102      	str	r1, [sp, #8]
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	21a0      	movs	r1, #160	; 0xa0
 8002918:	4807      	ldr	r0, [pc, #28]	; (8002938 <eeprom_write+0x48>)
 800291a:	f005 fe5b 	bl	80085d4 <HAL_I2C_Mem_Write>
 800291e:	4603      	mov	r3, r0
 8002920:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8002922:	f004 fa27 	bl	8006d74 <HAL_GetTick>
 8002926:	4603      	mov	r3, r0
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <eeprom_write+0x4c>)
 800292a:	6013      	str	r3, [r2, #0]

    return rc;
 800292c:	7dfb      	ldrb	r3, [r7, #23]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200002e4 	.word	0x200002e4
 800293c:	20000248 	.word	0x20000248

08002940 <EEPROM_RelayStateUpdate>:

void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	460a      	mov	r2, r1
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	4613      	mov	r3, r2
 800294e:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002950:	79bb      	ldrb	r3, [r7, #6]
 8002952:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d107      	bne.n	800296a <EEPROM_RelayStateUpdate+0x2a>
 800295a:	f107 030f 	add.w	r3, r7, #15
 800295e:	2201      	movs	r2, #1
 8002960:	4619      	mov	r1, r3
 8002962:	202e      	movs	r0, #46	; 0x2e
 8002964:	f7ff ffc4 	bl	80028f0 <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 8002968:	e01f      	b.n	80029aa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d107      	bne.n	8002980 <EEPROM_RelayStateUpdate+0x40>
 8002970:	f107 030f 	add.w	r3, r7, #15
 8002974:	2201      	movs	r2, #1
 8002976:	4619      	mov	r1, r3
 8002978:	202f      	movs	r0, #47	; 0x2f
 800297a:	f7ff ffb9 	bl	80028f0 <eeprom_write>
}
 800297e:	e014      	b.n	80029aa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d107      	bne.n	8002996 <EEPROM_RelayStateUpdate+0x56>
 8002986:	f107 030f 	add.w	r3, r7, #15
 800298a:	2201      	movs	r2, #1
 800298c:	4619      	mov	r1, r3
 800298e:	2030      	movs	r0, #48	; 0x30
 8002990:	f7ff ffae 	bl	80028f0 <eeprom_write>
}
 8002994:	e009      	b.n	80029aa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	2b04      	cmp	r3, #4
 800299a:	d106      	bne.n	80029aa <EEPROM_RelayStateUpdate+0x6a>
 800299c:	f107 030f 	add.w	r3, r7, #15
 80029a0:	2201      	movs	r2, #1
 80029a2:	4619      	mov	r1, r3
 80029a4:	2031      	movs	r0, #49	; 0x31
 80029a6:	f7ff ffa3 	bl	80028f0 <eeprom_write>
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <EEPROM_RelayStateRead>:
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d107      	bne.n	80029d6 <EEPROM_RelayStateRead+0x24>
 80029c6:	f107 030f 	add.w	r3, r7, #15
 80029ca:	2201      	movs	r2, #1
 80029cc:	4619      	mov	r1, r3
 80029ce:	202e      	movs	r0, #46	; 0x2e
 80029d0:	f7ff ff70 	bl	80028b4 <eeprom_read>
 80029d4:	e01f      	b.n	8002a16 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d107      	bne.n	80029ec <EEPROM_RelayStateRead+0x3a>
 80029dc:	f107 030f 	add.w	r3, r7, #15
 80029e0:	2201      	movs	r2, #1
 80029e2:	4619      	mov	r1, r3
 80029e4:	202f      	movs	r0, #47	; 0x2f
 80029e6:	f7ff ff65 	bl	80028b4 <eeprom_read>
 80029ea:	e014      	b.n	8002a16 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d107      	bne.n	8002a02 <EEPROM_RelayStateRead+0x50>
 80029f2:	f107 030f 	add.w	r3, r7, #15
 80029f6:	2201      	movs	r2, #1
 80029f8:	4619      	mov	r1, r3
 80029fa:	2030      	movs	r0, #48	; 0x30
 80029fc:	f7ff ff5a 	bl	80028b4 <eeprom_read>
 8002a00:	e009      	b.n	8002a16 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d106      	bne.n	8002a16 <EEPROM_RelayStateRead+0x64>
 8002a08:	f107 030f 	add.w	r3, r7, #15
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4619      	mov	r1, r3
 8002a10:	2031      	movs	r0, #49	; 0x31
 8002a12:	f7ff ff4f 	bl	80028b4 <eeprom_read>

	return AktualnyStan;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002a26:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002a2a:	f7ff fa65 	bl	8001ef8 <ILI9341_ClearDisplay>
	  ILI9341_DrawImage(40, 50, logo, 240, 140);
 8002a2e:	238c      	movs	r3, #140	; 0x8c
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	23f0      	movs	r3, #240	; 0xf0
 8002a34:	4a71      	ldr	r2, [pc, #452]	; (8002bfc <system_init+0x1dc>)
 8002a36:	2132      	movs	r1, #50	; 0x32
 8002a38:	2028      	movs	r0, #40	; 0x28
 8002a3a:	f7ff fa32 	bl	8001ea2 <ILI9341_DrawImage>
//	  GFX_Image(40, 50, logo, 240, 140); //usunieta wolniejsza wersja rysowania

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002a3e:	4870      	ldr	r0, [pc, #448]	; (8002c00 <system_init+0x1e0>)
 8002a40:	f7fe fe56 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 8002a44:	496f      	ldr	r1, [pc, #444]	; (8002c04 <system_init+0x1e4>)
 8002a46:	4870      	ldr	r0, [pc, #448]	; (8002c08 <system_init+0x1e8>)
 8002a48:	f00b fd5c 	bl	800e504 <siprintf>
	  EF_PutString(Msg, 60, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	2300      	movs	r3, #0
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2300      	movs	r3, #0
 8002a56:	2214      	movs	r2, #20
 8002a58:	213c      	movs	r1, #60	; 0x3c
 8002a5a:	486b      	ldr	r0, [pc, #428]	; (8002c08 <system_init+0x1e8>)
 8002a5c:	f7ff f862 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  GFX_DrawRoundRectangle(60, 200, 20, 20, 5, ILI9341_RED);
 8002a60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a64:	9301      	str	r3, [sp, #4]
 8002a66:	2305      	movs	r3, #5
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	2314      	movs	r3, #20
 8002a6c:	2214      	movs	r2, #20
 8002a6e:	21c8      	movs	r1, #200	; 0xc8
 8002a70:	203c      	movs	r0, #60	; 0x3c
 8002a72:	f7fe fd6f 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 200, 20, 20, 5, ILI9341_RED);
 8002a76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	2305      	movs	r3, #5
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	2314      	movs	r3, #20
 8002a82:	2214      	movs	r2, #20
 8002a84:	21c8      	movs	r1, #200	; 0xc8
 8002a86:	205a      	movs	r0, #90	; 0x5a
 8002a88:	f7fe fd64 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 200, 20, 20, 5, ILI9341_RED);
 8002a8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	2305      	movs	r3, #5
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2314      	movs	r3, #20
 8002a98:	2214      	movs	r2, #20
 8002a9a:	21c8      	movs	r1, #200	; 0xc8
 8002a9c:	2078      	movs	r0, #120	; 0x78
 8002a9e:	f7fe fd59 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 200, 20, 20, 5, ILI9341_RED);
 8002aa2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	2305      	movs	r3, #5
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	2314      	movs	r3, #20
 8002aae:	2214      	movs	r2, #20
 8002ab0:	21c8      	movs	r1, #200	; 0xc8
 8002ab2:	2096      	movs	r0, #150	; 0x96
 8002ab4:	f7fe fd4e 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 200, 20, 20, 5, ILI9341_RED);
 8002ab8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	2305      	movs	r3, #5
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2314      	movs	r3, #20
 8002ac4:	2214      	movs	r2, #20
 8002ac6:	21c8      	movs	r1, #200	; 0xc8
 8002ac8:	20b4      	movs	r0, #180	; 0xb4
 8002aca:	f7fe fd43 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 200, 20, 20, 5, ILI9341_RED);
 8002ace:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	2305      	movs	r3, #5
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2314      	movs	r3, #20
 8002ada:	2214      	movs	r2, #20
 8002adc:	21c8      	movs	r1, #200	; 0xc8
 8002ade:	20d2      	movs	r0, #210	; 0xd2
 8002ae0:	f7fe fd38 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 200, 20, 20, 5, ILI9341_RED);
 8002ae4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	2305      	movs	r3, #5
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2314      	movs	r3, #20
 8002af0:	2214      	movs	r2, #20
 8002af2:	21c8      	movs	r1, #200	; 0xc8
 8002af4:	20f0      	movs	r0, #240	; 0xf0
 8002af6:	f7fe fd2d 	bl	8001554 <GFX_DrawRoundRectangle>
	  	  HAL_Delay(200);
 8002afa:	20c8      	movs	r0, #200	; 0xc8
 8002afc:	f004 f946 	bl	8006d8c <HAL_Delay>

	  GFX_DrawFillRoundRectangle(60, 200, 20, 20, 5, ILI9341_GREEN);
 8002b00:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	2305      	movs	r3, #5
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2314      	movs	r3, #20
 8002b0c:	2214      	movs	r2, #20
 8002b0e:	21c8      	movs	r1, #200	; 0xc8
 8002b10:	203c      	movs	r0, #60	; 0x3c
 8002b12:	f7fe fd9c 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(100);
 8002b16:	2064      	movs	r0, #100	; 0x64
 8002b18:	f004 f938 	bl	8006d8c <HAL_Delay>
	  	  while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8002b1c:	bf00      	nop
 8002b1e:	2201      	movs	r2, #1
 8002b20:	493a      	ldr	r1, [pc, #232]	; (8002c0c <system_init+0x1ec>)
 8002b22:	2001      	movs	r0, #1
 8002b24:	f7ff fec6 	bl	80028b4 <eeprom_read>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f7      	bne.n	8002b1e <system_init+0xfe>
	  GFX_DrawFillRoundRectangle(90, 200, 20, 20, 5, ILI9341_GREEN);
 8002b2e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	2305      	movs	r3, #5
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	2314      	movs	r3, #20
 8002b3a:	2214      	movs	r2, #20
 8002b3c:	21c8      	movs	r1, #200	; 0xc8
 8002b3e:	205a      	movs	r0, #90	; 0x5a
 8002b40:	f7fe fd85 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_TEMP_1);	// ASK for current temperature
 8002b44:	2003      	movs	r0, #3
 8002b46:	f003 f905 	bl	8005d54 <SendComand>
	  	  HAL_Delay(100);
 8002b4a:	2064      	movs	r0, #100	; 0x64
 8002b4c:	f004 f91e 	bl	8006d8c <HAL_Delay>
	  GFX_DrawFillRoundRectangle(120, 200, 20, 20, 5, ILI9341_GREEN);
 8002b50:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	2305      	movs	r3, #5
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2314      	movs	r3, #20
 8002b5c:	2214      	movs	r2, #20
 8002b5e:	21c8      	movs	r1, #200	; 0xc8
 8002b60:	2078      	movs	r0, #120	; 0x78
 8002b62:	f7fe fd74 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 8002b66:	2004      	movs	r0, #4
 8002b68:	f003 f8f4 	bl	8005d54 <SendComand>
	  	  HAL_Delay(100);
 8002b6c:	2064      	movs	r0, #100	; 0x64
 8002b6e:	f004 f90d 	bl	8006d8c <HAL_Delay>
	  GFX_DrawFillRoundRectangle(150, 200, 20, 20, 5, ILI9341_GREEN);
 8002b72:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	2305      	movs	r3, #5
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2314      	movs	r3, #20
 8002b7e:	2214      	movs	r2, #20
 8002b80:	21c8      	movs	r1, #200	; 0xc8
 8002b82:	2096      	movs	r0, #150	; 0x96
 8002b84:	f7fe fd63 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8002b88:	2015      	movs	r0, #21
 8002b8a:	f003 f8e3 	bl	8005d54 <SendComand>
	  	  HAL_Delay(100);
 8002b8e:	2064      	movs	r0, #100	; 0x64
 8002b90:	f004 f8fc 	bl	8006d8c <HAL_Delay>
	  GFX_DrawFillRoundRectangle(180, 200, 20, 20, 5, ILI9341_GREEN);
 8002b94:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b98:	9301      	str	r3, [sp, #4]
 8002b9a:	2305      	movs	r3, #5
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	2314      	movs	r3, #20
 8002ba0:	2214      	movs	r2, #20
 8002ba2:	21c8      	movs	r1, #200	; 0xc8
 8002ba4:	20b4      	movs	r0, #180	; 0xb4
 8002ba6:	f7fe fd52 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8002baa:	2016      	movs	r0, #22
 8002bac:	f003 f8d2 	bl	8005d54 <SendComand>
	  	  HAL_Delay(100);
 8002bb0:	2064      	movs	r0, #100	; 0x64
 8002bb2:	f004 f8eb 	bl	8006d8c <HAL_Delay>
	  GFX_DrawFillRoundRectangle(210, 200, 20, 20, 5, ILI9341_GREEN);
 8002bb6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	2305      	movs	r3, #5
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2314      	movs	r3, #20
 8002bc2:	2214      	movs	r2, #20
 8002bc4:	21c8      	movs	r1, #200	; 0xc8
 8002bc6:	20d2      	movs	r0, #210	; 0xd2
 8002bc8:	f7fe fd41 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);
 8002bcc:	201b      	movs	r0, #27
 8002bce:	f003 f8c1 	bl	8005d54 <SendComand>
	  	  HAL_Delay(100);
 8002bd2:	2064      	movs	r0, #100	; 0x64
 8002bd4:	f004 f8da 	bl	8006d8c <HAL_Delay>
	  GFX_DrawFillRoundRectangle(240, 200, 20, 20, 5, ILI9341_GREEN);
 8002bd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002bdc:	9301      	str	r3, [sp, #4]
 8002bde:	2305      	movs	r3, #5
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	2314      	movs	r3, #20
 8002be4:	2214      	movs	r2, #20
 8002be6:	21c8      	movs	r1, #200	; 0xc8
 8002be8:	20f0      	movs	r0, #240	; 0xf0
 8002bea:	f7fe fd30 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(200);
 8002bee:	20c8      	movs	r0, #200	; 0xc8
 8002bf0:	f004 f8cc 	bl	8006d8c <HAL_Delay>

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8002bf4:	2301      	movs	r3, #1
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	0801522c 	.word	0x0801522c
 8002c00:	080151b0 	.word	0x080151b0
 8002c04:	08012150 	.word	0x08012150
 8002c08:	200002c4 	.word	0x200002c4
 8002c0c:	20000032 	.word	0x20000032

08002c10 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	ed87 0a05 	vstr	s0, [r7, #20]
 8002c1a:	edc7 0a04 	vstr	s1, [r7, #16]
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	460b      	mov	r3, r1
 8002c22:	ed87 1a01 	vstr	s2, [r7, #4]
 8002c26:	72fb      	strb	r3, [r7, #11]
	  SendComand(UCMD_TEMP_1);
 8002c28:	2003      	movs	r0, #3
 8002c2a:	f003 f893 	bl	8005d54 <SendComand>
	  SendComand(UCMD_PRES_1);
 8002c2e:	2004      	movs	r0, #4
 8002c30:	f003 f890 	bl	8005d54 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8002c34:	201b      	movs	r0, #27
 8002c36:	f003 f88d 	bl	8005d54 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8002c3a:	f7ff fd9f 	bl	800277c <DS3231_GetHour>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8002c42:	f7ff fda7 	bl	8002794 <DS3231_GetMinute>
 8002c46:	4603      	mov	r3, r0
 8002c48:	77bb      	strb	r3, [r7, #30]

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002c4a:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002c4e:	f7ff f953 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002c52:	4881      	ldr	r0, [pc, #516]	; (8002e58 <showCurrentParameters+0x248>)
 8002c54:	f7fe fd4c 	bl	80016f0 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8002c58:	4980      	ldr	r1, [pc, #512]	; (8002e5c <showCurrentParameters+0x24c>)
 8002c5a:	4881      	ldr	r0, [pc, #516]	; (8002e60 <showCurrentParameters+0x250>)
 8002c5c:	f00b fc52 	bl	800e504 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002c60:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	2300      	movs	r3, #0
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002c6e:	220a      	movs	r2, #10
 8002c70:	212f      	movs	r1, #47	; 0x2f
 8002c72:	487b      	ldr	r0, [pc, #492]	; (8002e60 <showCurrentParameters+0x250>)
 8002c74:	f7fe ff56 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002c78:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	2329      	movs	r3, #41	; 0x29
 8002c80:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c84:	2129      	movs	r1, #41	; 0x29
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7fe fa82 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002c8c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	232b      	movs	r3, #43	; 0x2b
 8002c94:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c98:	212b      	movs	r1, #43	; 0x2b
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fe fa78 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8002ca0:	7ffb      	ldrb	r3, [r7, #31]
 8002ca2:	2b09      	cmp	r3, #9
 8002ca4:	d809      	bhi.n	8002cba <showCurrentParameters+0xaa>
 8002ca6:	7fbb      	ldrb	r3, [r7, #30]
 8002ca8:	2b09      	cmp	r3, #9
 8002caa:	d806      	bhi.n	8002cba <showCurrentParameters+0xaa>
 8002cac:	7ffa      	ldrb	r2, [r7, #31]
 8002cae:	7fbb      	ldrb	r3, [r7, #30]
 8002cb0:	496c      	ldr	r1, [pc, #432]	; (8002e64 <showCurrentParameters+0x254>)
 8002cb2:	486b      	ldr	r0, [pc, #428]	; (8002e60 <showCurrentParameters+0x250>)
 8002cb4:	f00b fc26 	bl	800e504 <siprintf>
 8002cb8:	e019      	b.n	8002cee <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 8002cba:	7ffb      	ldrb	r3, [r7, #31]
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	d806      	bhi.n	8002cce <showCurrentParameters+0xbe>
 8002cc0:	7ffa      	ldrb	r2, [r7, #31]
 8002cc2:	7fbb      	ldrb	r3, [r7, #30]
 8002cc4:	4968      	ldr	r1, [pc, #416]	; (8002e68 <showCurrentParameters+0x258>)
 8002cc6:	4866      	ldr	r0, [pc, #408]	; (8002e60 <showCurrentParameters+0x250>)
 8002cc8:	f00b fc1c 	bl	800e504 <siprintf>
 8002ccc:	e00f      	b.n	8002cee <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 8002cce:	7fbb      	ldrb	r3, [r7, #30]
 8002cd0:	2b09      	cmp	r3, #9
 8002cd2:	d806      	bhi.n	8002ce2 <showCurrentParameters+0xd2>
 8002cd4:	7ffa      	ldrb	r2, [r7, #31]
 8002cd6:	7fbb      	ldrb	r3, [r7, #30]
 8002cd8:	4964      	ldr	r1, [pc, #400]	; (8002e6c <showCurrentParameters+0x25c>)
 8002cda:	4861      	ldr	r0, [pc, #388]	; (8002e60 <showCurrentParameters+0x250>)
 8002cdc:	f00b fc12 	bl	800e504 <siprintf>
 8002ce0:	e005      	b.n	8002cee <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 8002ce2:	7ffa      	ldrb	r2, [r7, #31]
 8002ce4:	7fbb      	ldrb	r3, [r7, #30]
 8002ce6:	4962      	ldr	r1, [pc, #392]	; (8002e70 <showCurrentParameters+0x260>)
 8002ce8:	485d      	ldr	r0, [pc, #372]	; (8002e60 <showCurrentParameters+0x250>)
 8002cea:	f00b fc0b 	bl	800e504 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002cee:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2232      	movs	r2, #50	; 0x32
 8002cfc:	2114      	movs	r1, #20
 8002cfe:	4858      	ldr	r0, [pc, #352]	; (8002e60 <showCurrentParameters+0x250>)
 8002d00:	f7fe ff10 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 8002d04:	4b5b      	ldr	r3, [pc, #364]	; (8002e74 <showCurrentParameters+0x264>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fc35 	bl	8000578 <__aeabi_f2d>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4959      	ldr	r1, [pc, #356]	; (8002e78 <showCurrentParameters+0x268>)
 8002d14:	4852      	ldr	r0, [pc, #328]	; (8002e60 <showCurrentParameters+0x250>)
 8002d16:	f00b fbf5 	bl	800e504 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002d1a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	2301      	movs	r3, #1
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	2300      	movs	r3, #0
 8002d26:	2250      	movs	r2, #80	; 0x50
 8002d28:	2114      	movs	r1, #20
 8002d2a:	484d      	ldr	r0, [pc, #308]	; (8002e60 <showCurrentParameters+0x250>)
 8002d2c:	f7fe fefa 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8002d30:	4b52      	ldr	r3, [pc, #328]	; (8002e7c <showCurrentParameters+0x26c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fc1f 	bl	8000578 <__aeabi_f2d>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4950      	ldr	r1, [pc, #320]	; (8002e80 <showCurrentParameters+0x270>)
 8002d40:	4847      	ldr	r0, [pc, #284]	; (8002e60 <showCurrentParameters+0x250>)
 8002d42:	f00b fbdf 	bl	800e504 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002d46:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	2300      	movs	r3, #0
 8002d52:	226e      	movs	r2, #110	; 0x6e
 8002d54:	2114      	movs	r1, #20
 8002d56:	4842      	ldr	r0, [pc, #264]	; (8002e60 <showCurrentParameters+0x250>)
 8002d58:	f7fe fee4 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: %d", CWaterLvl);
 8002d5c:	4b49      	ldr	r3, [pc, #292]	; (8002e84 <showCurrentParameters+0x274>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4949      	ldr	r1, [pc, #292]	; (8002e88 <showCurrentParameters+0x278>)
 8002d64:	483e      	ldr	r0, [pc, #248]	; (8002e60 <showCurrentParameters+0x250>)
 8002d66:	f00b fbcd 	bl	800e504 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002d6a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	2300      	movs	r3, #0
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2300      	movs	r3, #0
 8002d76:	228c      	movs	r2, #140	; 0x8c
 8002d78:	2114      	movs	r1, #20
 8002d7a:	4839      	ldr	r0, [pc, #228]	; (8002e60 <showCurrentParameters+0x250>)
 8002d7c:	f7fe fed2 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8002d80:	4b42      	ldr	r3, [pc, #264]	; (8002e8c <showCurrentParameters+0x27c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fd fbf7 	bl	8000578 <__aeabi_f2d>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4940      	ldr	r1, [pc, #256]	; (8002e90 <showCurrentParameters+0x280>)
 8002d90:	4833      	ldr	r0, [pc, #204]	; (8002e60 <showCurrentParameters+0x250>)
 8002d92:	f00b fbb7 	bl	800e504 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002d96:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d9a:	9301      	str	r3, [sp, #4]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2300      	movs	r3, #0
 8002da2:	22aa      	movs	r2, #170	; 0xaa
 8002da4:	2114      	movs	r1, #20
 8002da6:	482e      	ldr	r0, [pc, #184]	; (8002e60 <showCurrentParameters+0x250>)
 8002da8:	f7fe febc 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8002dac:	4839      	ldr	r0, [pc, #228]	; (8002e94 <showCurrentParameters+0x284>)
 8002dae:	f7fe fc9f 	bl	80016f0 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002db2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	2305      	movs	r3, #5
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2314      	movs	r3, #20
 8002dbe:	225f      	movs	r2, #95	; 0x5f
 8002dc0:	21d8      	movs	r1, #216	; 0xd8
 8002dc2:	20dc      	movs	r0, #220	; 0xdc
 8002dc4:	f7fe fc43 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 8002dc8:	4933      	ldr	r1, [pc, #204]	; (8002e98 <showCurrentParameters+0x288>)
 8002dca:	4825      	ldr	r0, [pc, #148]	; (8002e60 <showCurrentParameters+0x250>)
 8002dcc:	f00b fb9a 	bl	800e504 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002dd0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	22da      	movs	r2, #218	; 0xda
 8002dde:	21df      	movs	r1, #223	; 0xdf
 8002de0:	481f      	ldr	r0, [pc, #124]	; (8002e60 <showCurrentParameters+0x250>)
 8002de2:	f7fe fe9f 	bl	8001b24 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002de6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	2305      	movs	r3, #5
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2314      	movs	r3, #20
 8002df2:	2264      	movs	r2, #100	; 0x64
 8002df4:	21d8      	movs	r1, #216	; 0xd8
 8002df6:	200a      	movs	r0, #10
 8002df8:	f7fe fc29 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 8002dfc:	4927      	ldr	r1, [pc, #156]	; (8002e9c <showCurrentParameters+0x28c>)
 8002dfe:	4818      	ldr	r0, [pc, #96]	; (8002e60 <showCurrentParameters+0x250>)
 8002e00:	f00b fb80 	bl	800e504 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002e04:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	22da      	movs	r2, #218	; 0xda
 8002e12:	2114      	movs	r1, #20
 8002e14:	4812      	ldr	r0, [pc, #72]	; (8002e60 <showCurrentParameters+0x250>)
 8002e16:	f7fe fe85 	bl	8001b24 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8002e1a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	2305      	movs	r3, #5
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	2314      	movs	r3, #20
 8002e26:	225a      	movs	r2, #90	; 0x5a
 8002e28:	21d8      	movs	r1, #216	; 0xd8
 8002e2a:	2078      	movs	r0, #120	; 0x78
 8002e2c:	f7fe fc0f 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8002e30:	491b      	ldr	r1, [pc, #108]	; (8002ea0 <showCurrentParameters+0x290>)
 8002e32:	480b      	ldr	r0, [pc, #44]	; (8002e60 <showCurrentParameters+0x250>)
 8002e34:	f00b fb66 	bl	800e504 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002e38:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2300      	movs	r3, #0
 8002e44:	22da      	movs	r2, #218	; 0xda
 8002e46:	2184      	movs	r1, #132	; 0x84
 8002e48:	4805      	ldr	r0, [pc, #20]	; (8002e60 <showCurrentParameters+0x250>)
 8002e4a:	f7fe fe6b 	bl	8001b24 <EF_PutString>
}
 8002e4e:	bf00      	nop
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	080151b0 	.word	0x080151b0
 8002e5c:	08012164 	.word	0x08012164
 8002e60:	200002c4 	.word	0x200002c4
 8002e64:	08012174 	.word	0x08012174
 8002e68:	08012184 	.word	0x08012184
 8002e6c:	08012194 	.word	0x08012194
 8002e70:	080121a4 	.word	0x080121a4
 8002e74:	2000025c 	.word	0x2000025c
 8002e78:	080121b4 	.word	0x080121b4
 8002e7c:	20000268 	.word	0x20000268
 8002e80:	080121c8 	.word	0x080121c8
 8002e84:	2000026c 	.word	0x2000026c
 8002e88:	080121dc 	.word	0x080121dc
 8002e8c:	20000264 	.word	0x20000264
 8002e90:	080121ec 	.word	0x080121ec
 8002e94:	08013238 	.word	0x08013238
 8002e98:	08012204 	.word	0x08012204
 8002e9c:	08012210 	.word	0x08012210
 8002ea0:	0801221c 	.word	0x0801221c

08002ea4 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8002eaa:	2015      	movs	r0, #21
 8002eac:	f002 ff52 	bl	8005d54 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002eb0:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002eb4:	f7ff f820 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002eb8:	485c      	ldr	r0, [pc, #368]	; (800302c <showControlPanel+0x188>)
 8002eba:	f7fe fc19 	bl	80016f0 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 8002ebe:	495c      	ldr	r1, [pc, #368]	; (8003030 <showControlPanel+0x18c>)
 8002ec0:	485c      	ldr	r0, [pc, #368]	; (8003034 <showControlPanel+0x190>)
 8002ec2:	f00b fb1f 	bl	800e504 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002ec6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	231f      	movs	r3, #31
 8002ed2:	220a      	movs	r2, #10
 8002ed4:	2123      	movs	r1, #35	; 0x23
 8002ed6:	4857      	ldr	r0, [pc, #348]	; (8003034 <showControlPanel+0x190>)
 8002ed8:	f7fe fe24 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002edc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	2329      	movs	r3, #41	; 0x29
 8002ee4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ee8:	2129      	movs	r1, #41	; 0x29
 8002eea:	2000      	movs	r0, #0
 8002eec:	f7fe f950 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002ef0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	232b      	movs	r3, #43	; 0x2b
 8002ef8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002efc:	212b      	movs	r1, #43	; 0x2b
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fe f946 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 8002f04:	494c      	ldr	r1, [pc, #304]	; (8003038 <showControlPanel+0x194>)
 8002f06:	484b      	ldr	r0, [pc, #300]	; (8003034 <showControlPanel+0x190>)
 8002f08:	f00b fafc 	bl	800e504 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f0c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	2300      	movs	r3, #0
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	2300      	movs	r3, #0
 8002f18:	223c      	movs	r2, #60	; 0x3c
 8002f1a:	2114      	movs	r1, #20
 8002f1c:	4845      	ldr	r0, [pc, #276]	; (8003034 <showControlPanel+0x190>)
 8002f1e:	f7fe fe01 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 8002f22:	4946      	ldr	r1, [pc, #280]	; (800303c <showControlPanel+0x198>)
 8002f24:	4843      	ldr	r0, [pc, #268]	; (8003034 <showControlPanel+0x190>)
 8002f26:	f00b faed 	bl	800e504 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002f2a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	2301      	movs	r3, #1
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	225a      	movs	r2, #90	; 0x5a
 8002f38:	2114      	movs	r1, #20
 8002f3a:	483e      	ldr	r0, [pc, #248]	; (8003034 <showControlPanel+0x190>)
 8002f3c:	f7fe fdf2 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8002f40:	493f      	ldr	r1, [pc, #252]	; (8003040 <showControlPanel+0x19c>)
 8002f42:	483c      	ldr	r0, [pc, #240]	; (8003034 <showControlPanel+0x190>)
 8002f44:	f00b fade 	bl	800e504 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f48:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	2300      	movs	r3, #0
 8002f54:	2278      	movs	r2, #120	; 0x78
 8002f56:	2114      	movs	r1, #20
 8002f58:	4836      	ldr	r0, [pc, #216]	; (8003034 <showControlPanel+0x190>)
 8002f5a:	f7fe fde3 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8002f5e:	4939      	ldr	r1, [pc, #228]	; (8003044 <showControlPanel+0x1a0>)
 8002f60:	4834      	ldr	r0, [pc, #208]	; (8003034 <showControlPanel+0x190>)
 8002f62:	f00b facf 	bl	800e504 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f66:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2300      	movs	r3, #0
 8002f72:	2296      	movs	r2, #150	; 0x96
 8002f74:	2114      	movs	r1, #20
 8002f76:	482f      	ldr	r0, [pc, #188]	; (8003034 <showControlPanel+0x190>)
 8002f78:	f7fe fdd4 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8002f7c:	4832      	ldr	r0, [pc, #200]	; (8003048 <showControlPanel+0x1a4>)
 8002f7e:	f7fe fbb7 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002f82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	2305      	movs	r3, #5
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2314      	movs	r3, #20
 8002f8e:	225f      	movs	r2, #95	; 0x5f
 8002f90:	21d8      	movs	r1, #216	; 0xd8
 8002f92:	20dc      	movs	r0, #220	; 0xdc
 8002f94:	f7fe fb5b 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8002f98:	492c      	ldr	r1, [pc, #176]	; (800304c <showControlPanel+0x1a8>)
 8002f9a:	4826      	ldr	r0, [pc, #152]	; (8003034 <showControlPanel+0x190>)
 8002f9c:	f00b fab2 	bl	800e504 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002fa0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	2300      	movs	r3, #0
 8002fac:	22da      	movs	r2, #218	; 0xda
 8002fae:	21df      	movs	r1, #223	; 0xdf
 8002fb0:	4820      	ldr	r0, [pc, #128]	; (8003034 <showControlPanel+0x190>)
 8002fb2:	f7fe fdb7 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002fb6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	2305      	movs	r3, #5
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	2314      	movs	r3, #20
 8002fc2:	2264      	movs	r2, #100	; 0x64
 8002fc4:	21d8      	movs	r1, #216	; 0xd8
 8002fc6:	200a      	movs	r0, #10
 8002fc8:	f7fe fb41 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 8002fcc:	4920      	ldr	r1, [pc, #128]	; (8003050 <showControlPanel+0x1ac>)
 8002fce:	4819      	ldr	r0, [pc, #100]	; (8003034 <showControlPanel+0x190>)
 8002fd0:	f00b fa98 	bl	800e504 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002fd4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	22da      	movs	r2, #218	; 0xda
 8002fe2:	2114      	movs	r1, #20
 8002fe4:	4813      	ldr	r0, [pc, #76]	; (8003034 <showControlPanel+0x190>)
 8002fe6:	f7fe fd9d 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8002fea:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	2305      	movs	r3, #5
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2314      	movs	r3, #20
 8002ff6:	225a      	movs	r2, #90	; 0x5a
 8002ff8:	21d8      	movs	r1, #216	; 0xd8
 8002ffa:	2078      	movs	r0, #120	; 0x78
 8002ffc:	f7fe fb27 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 8003000:	4914      	ldr	r1, [pc, #80]	; (8003054 <showControlPanel+0x1b0>)
 8003002:	480c      	ldr	r0, [pc, #48]	; (8003034 <showControlPanel+0x190>)
 8003004:	f00b fa7e 	bl	800e504 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003008:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	2300      	movs	r3, #0
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	2300      	movs	r3, #0
 8003014:	22da      	movs	r2, #218	; 0xda
 8003016:	217e      	movs	r1, #126	; 0x7e
 8003018:	4806      	ldr	r0, [pc, #24]	; (8003034 <showControlPanel+0x190>)
 800301a:	f7fe fd83 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 800301e:	4803      	ldr	r0, [pc, #12]	; (800302c <showControlPanel+0x188>)
 8003020:	f7fe fb66 	bl	80016f0 <EF_SetFont>


}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	080151b0 	.word	0x080151b0
 8003030:	08012224 	.word	0x08012224
 8003034:	200002c4 	.word	0x200002c4
 8003038:	08012238 	.word	0x08012238
 800303c:	0801224c 	.word	0x0801224c
 8003040:	08012260 	.word	0x08012260
 8003044:	08012274 	.word	0x08012274
 8003048:	08013238 	.word	0x08013238
 800304c:	08012288 	.word	0x08012288
 8003050:	08012294 	.word	0x08012294
 8003054:	0801229c 	.word	0x0801229c

08003058 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 800305e:	2016      	movs	r0, #22
 8003060:	f002 fe78 	bl	8005d54 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003064:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003068:	f7fe ff46 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 800306c:	485b      	ldr	r0, [pc, #364]	; (80031dc <showLightsControlPanel+0x184>)
 800306e:	f7fe fb3f 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8003072:	495b      	ldr	r1, [pc, #364]	; (80031e0 <showLightsControlPanel+0x188>)
 8003074:	485b      	ldr	r0, [pc, #364]	; (80031e4 <showLightsControlPanel+0x18c>)
 8003076:	f00b fa45 	bl	800e504 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800307a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	2300      	movs	r3, #0
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003088:	220a      	movs	r2, #10
 800308a:	2146      	movs	r1, #70	; 0x46
 800308c:	4855      	ldr	r0, [pc, #340]	; (80031e4 <showLightsControlPanel+0x18c>)
 800308e:	f7fe fd49 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003092:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2329      	movs	r3, #41	; 0x29
 800309a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800309e:	2129      	movs	r1, #41	; 0x29
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7fe f875 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80030a6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	232b      	movs	r3, #43	; 0x2b
 80030ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030b2:	212b      	movs	r1, #43	; 0x2b
 80030b4:	2000      	movs	r0, #0
 80030b6:	f7fe f86b 	bl	8001190 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 80030ba:	494b      	ldr	r1, [pc, #300]	; (80031e8 <showLightsControlPanel+0x190>)
 80030bc:	4849      	ldr	r0, [pc, #292]	; (80031e4 <showLightsControlPanel+0x18c>)
 80030be:	f00b fa21 	bl	800e504 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80030c2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	2300      	movs	r3, #0
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2300      	movs	r3, #0
 80030ce:	223c      	movs	r2, #60	; 0x3c
 80030d0:	2114      	movs	r1, #20
 80030d2:	4844      	ldr	r0, [pc, #272]	; (80031e4 <showLightsControlPanel+0x18c>)
 80030d4:	f7fe fd26 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 80030d8:	4944      	ldr	r1, [pc, #272]	; (80031ec <showLightsControlPanel+0x194>)
 80030da:	4842      	ldr	r0, [pc, #264]	; (80031e4 <showLightsControlPanel+0x18c>)
 80030dc:	f00b fa12 	bl	800e504 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80030e0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	2301      	movs	r3, #1
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2300      	movs	r3, #0
 80030ec:	225a      	movs	r2, #90	; 0x5a
 80030ee:	2114      	movs	r1, #20
 80030f0:	483c      	ldr	r0, [pc, #240]	; (80031e4 <showLightsControlPanel+0x18c>)
 80030f2:	f7fe fd17 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 80030f6:	493e      	ldr	r1, [pc, #248]	; (80031f0 <showLightsControlPanel+0x198>)
 80030f8:	483a      	ldr	r0, [pc, #232]	; (80031e4 <showLightsControlPanel+0x18c>)
 80030fa:	f00b fa03 	bl	800e504 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80030fe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	2300      	movs	r3, #0
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	2300      	movs	r3, #0
 800310a:	2278      	movs	r2, #120	; 0x78
 800310c:	2114      	movs	r1, #20
 800310e:	4835      	ldr	r0, [pc, #212]	; (80031e4 <showLightsControlPanel+0x18c>)
 8003110:	f7fe fd08 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 8003114:	4937      	ldr	r1, [pc, #220]	; (80031f4 <showLightsControlPanel+0x19c>)
 8003116:	4833      	ldr	r0, [pc, #204]	; (80031e4 <showLightsControlPanel+0x18c>)
 8003118:	f00b f9f4 	bl	800e504 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800311c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	2300      	movs	r3, #0
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	2300      	movs	r3, #0
 8003128:	2296      	movs	r2, #150	; 0x96
 800312a:	2114      	movs	r1, #20
 800312c:	482d      	ldr	r0, [pc, #180]	; (80031e4 <showLightsControlPanel+0x18c>)
 800312e:	f7fe fcf9 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003132:	4831      	ldr	r0, [pc, #196]	; (80031f8 <showLightsControlPanel+0x1a0>)
 8003134:	f7fe fadc 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003138:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	2305      	movs	r3, #5
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2314      	movs	r3, #20
 8003144:	225f      	movs	r2, #95	; 0x5f
 8003146:	21d8      	movs	r1, #216	; 0xd8
 8003148:	20dc      	movs	r0, #220	; 0xdc
 800314a:	f7fe fa80 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 800314e:	492b      	ldr	r1, [pc, #172]	; (80031fc <showLightsControlPanel+0x1a4>)
 8003150:	4824      	ldr	r0, [pc, #144]	; (80031e4 <showLightsControlPanel+0x18c>)
 8003152:	f00b f9d7 	bl	800e504 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003156:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	2300      	movs	r3, #0
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2300      	movs	r3, #0
 8003162:	22da      	movs	r2, #218	; 0xda
 8003164:	21e6      	movs	r1, #230	; 0xe6
 8003166:	481f      	ldr	r0, [pc, #124]	; (80031e4 <showLightsControlPanel+0x18c>)
 8003168:	f7fe fcdc 	bl	8001b24 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 800316c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2305      	movs	r3, #5
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	2314      	movs	r3, #20
 8003178:	225a      	movs	r2, #90	; 0x5a
 800317a:	21d8      	movs	r1, #216	; 0xd8
 800317c:	2078      	movs	r0, #120	; 0x78
 800317e:	f7fe fa66 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8003182:	491f      	ldr	r1, [pc, #124]	; (8003200 <showLightsControlPanel+0x1a8>)
 8003184:	4817      	ldr	r0, [pc, #92]	; (80031e4 <showLightsControlPanel+0x18c>)
 8003186:	f00b f9bd 	bl	800e504 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800318a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	2300      	movs	r3, #0
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	2300      	movs	r3, #0
 8003196:	22da      	movs	r2, #218	; 0xda
 8003198:	217e      	movs	r1, #126	; 0x7e
 800319a:	4812      	ldr	r0, [pc, #72]	; (80031e4 <showLightsControlPanel+0x18c>)
 800319c:	f7fe fcc2 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80031a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80031a4:	9301      	str	r3, [sp, #4]
 80031a6:	2305      	movs	r3, #5
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	2314      	movs	r3, #20
 80031ac:	2264      	movs	r2, #100	; 0x64
 80031ae:	21d8      	movs	r1, #216	; 0xd8
 80031b0:	200a      	movs	r0, #10
 80031b2:	f7fe fa4c 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 80031b6:	4913      	ldr	r1, [pc, #76]	; (8003204 <showLightsControlPanel+0x1ac>)
 80031b8:	480a      	ldr	r0, [pc, #40]	; (80031e4 <showLightsControlPanel+0x18c>)
 80031ba:	f00b f9a3 	bl	800e504 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80031be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	2300      	movs	r3, #0
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2300      	movs	r3, #0
 80031ca:	22da      	movs	r2, #218	; 0xda
 80031cc:	210d      	movs	r1, #13
 80031ce:	4805      	ldr	r0, [pc, #20]	; (80031e4 <showLightsControlPanel+0x18c>)
 80031d0:	f7fe fca8 	bl	8001b24 <EF_PutString>


}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	080151b0 	.word	0x080151b0
 80031e0:	080122a8 	.word	0x080122a8
 80031e4:	200002c4 	.word	0x200002c4
 80031e8:	080122b8 	.word	0x080122b8
 80031ec:	080122c8 	.word	0x080122c8
 80031f0:	080122d8 	.word	0x080122d8
 80031f4:	080122e8 	.word	0x080122e8
 80031f8:	08013238 	.word	0x08013238
 80031fc:	080122f8 	.word	0x080122f8
 8003200:	08012300 	.word	0x08012300
 8003204:	0801230c 	.word	0x0801230c

08003208 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800320e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003212:	f7fe fe71 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003216:	487d      	ldr	r0, [pc, #500]	; (800340c <showClockSetPanel+0x204>)
 8003218:	f7fe fa6a 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 800321c:	f7ff faae 	bl	800277c <DS3231_GetHour>
 8003220:	4603      	mov	r3, r0
 8003222:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003224:	f7ff fab6 	bl	8002794 <DS3231_GetMinute>
 8003228:	4603      	mov	r3, r0
 800322a:	71bb      	strb	r3, [r7, #6]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 800322c:	4978      	ldr	r1, [pc, #480]	; (8003410 <showClockSetPanel+0x208>)
 800322e:	4879      	ldr	r0, [pc, #484]	; (8003414 <showClockSetPanel+0x20c>)
 8003230:	f00b f968 	bl	800e504 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003234:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	2300      	movs	r3, #0
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003242:	220a      	movs	r2, #10
 8003244:	212f      	movs	r1, #47	; 0x2f
 8003246:	4873      	ldr	r0, [pc, #460]	; (8003414 <showClockSetPanel+0x20c>)
 8003248:	f7fe fc6c 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800324c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	2329      	movs	r3, #41	; 0x29
 8003254:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003258:	2129      	movs	r1, #41	; 0x29
 800325a:	2000      	movs	r0, #0
 800325c:	f7fd ff98 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003260:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	232b      	movs	r3, #43	; 0x2b
 8003268:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800326c:	212b      	movs	r1, #43	; 0x2b
 800326e:	2000      	movs	r0, #0
 8003270:	f7fd ff8e 	bl	8001190 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	461a      	mov	r2, r3
 8003278:	4967      	ldr	r1, [pc, #412]	; (8003418 <showClockSetPanel+0x210>)
 800327a:	4866      	ldr	r0, [pc, #408]	; (8003414 <showClockSetPanel+0x20c>)
 800327c:	f00b f942 	bl	800e504 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003280:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	2300      	movs	r3, #0
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	2300      	movs	r3, #0
 800328c:	2246      	movs	r2, #70	; 0x46
 800328e:	2114      	movs	r1, #20
 8003290:	4860      	ldr	r0, [pc, #384]	; (8003414 <showClockSetPanel+0x20c>)
 8003292:	f7fe fc47 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003296:	79bb      	ldrb	r3, [r7, #6]
 8003298:	461a      	mov	r2, r3
 800329a:	4960      	ldr	r1, [pc, #384]	; (800341c <showClockSetPanel+0x214>)
 800329c:	485d      	ldr	r0, [pc, #372]	; (8003414 <showClockSetPanel+0x20c>)
 800329e:	f00b f931 	bl	800e504 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80032a2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	2301      	movs	r3, #1
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2300      	movs	r3, #0
 80032ae:	226e      	movs	r2, #110	; 0x6e
 80032b0:	2114      	movs	r1, #20
 80032b2:	4858      	ldr	r0, [pc, #352]	; (8003414 <showClockSetPanel+0x20c>)
 80032b4:	f7fe fc36 	bl	8001b24 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 80032b8:	4859      	ldr	r0, [pc, #356]	; (8003420 <showClockSetPanel+0x218>)
 80032ba:	f7fe fa19 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80032be:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80032c2:	9301      	str	r3, [sp, #4]
 80032c4:	2305      	movs	r3, #5
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2315      	movs	r3, #21
 80032ca:	221e      	movs	r2, #30
 80032cc:	214b      	movs	r1, #75	; 0x4b
 80032ce:	20f0      	movs	r0, #240	; 0xf0
 80032d0:	f7fe f9bd 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80032d4:	4953      	ldr	r1, [pc, #332]	; (8003424 <showClockSetPanel+0x21c>)
 80032d6:	484f      	ldr	r0, [pc, #316]	; (8003414 <showClockSetPanel+0x20c>)
 80032d8:	f00b f914 	bl	800e504 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80032dc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	2300      	movs	r3, #0
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	2300      	movs	r3, #0
 80032e8:	224d      	movs	r2, #77	; 0x4d
 80032ea:	21f3      	movs	r1, #243	; 0xf3
 80032ec:	4849      	ldr	r0, [pc, #292]	; (8003414 <showClockSetPanel+0x20c>)
 80032ee:	f7fe fc19 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80032f2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	2305      	movs	r3, #5
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	2315      	movs	r3, #21
 80032fe:	221e      	movs	r2, #30
 8003300:	214b      	movs	r1, #75	; 0x4b
 8003302:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003306:	f7fe f9a2 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 800330a:	4947      	ldr	r1, [pc, #284]	; (8003428 <showClockSetPanel+0x220>)
 800330c:	4841      	ldr	r0, [pc, #260]	; (8003414 <showClockSetPanel+0x20c>)
 800330e:	f00b f8f9 	bl	800e504 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003312:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	2300      	movs	r3, #0
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2300      	movs	r3, #0
 800331e:	224d      	movs	r2, #77	; 0x4d
 8003320:	f240 111d 	movw	r1, #285	; 0x11d
 8003324:	483b      	ldr	r0, [pc, #236]	; (8003414 <showClockSetPanel+0x20c>)
 8003326:	f7fe fbfd 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 800332a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	2305      	movs	r3, #5
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2315      	movs	r3, #21
 8003336:	221e      	movs	r2, #30
 8003338:	2173      	movs	r1, #115	; 0x73
 800333a:	20f0      	movs	r0, #240	; 0xf0
 800333c:	f7fe f987 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003340:	4938      	ldr	r1, [pc, #224]	; (8003424 <showClockSetPanel+0x21c>)
 8003342:	4834      	ldr	r0, [pc, #208]	; (8003414 <showClockSetPanel+0x20c>)
 8003344:	f00b f8de 	bl	800e504 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003348:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	2300      	movs	r3, #0
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	2300      	movs	r3, #0
 8003354:	2275      	movs	r2, #117	; 0x75
 8003356:	21f5      	movs	r1, #245	; 0xf5
 8003358:	482e      	ldr	r0, [pc, #184]	; (8003414 <showClockSetPanel+0x20c>)
 800335a:	f7fe fbe3 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 800335e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	2305      	movs	r3, #5
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2315      	movs	r3, #21
 800336a:	221e      	movs	r2, #30
 800336c:	2173      	movs	r1, #115	; 0x73
 800336e:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003372:	f7fe f96c 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003376:	492d      	ldr	r1, [pc, #180]	; (800342c <showClockSetPanel+0x224>)
 8003378:	4826      	ldr	r0, [pc, #152]	; (8003414 <showClockSetPanel+0x20c>)
 800337a:	f00b f8c3 	bl	800e504 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 800337e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	2300      	movs	r3, #0
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2300      	movs	r3, #0
 800338a:	2275      	movs	r2, #117	; 0x75
 800338c:	f240 111b 	movw	r1, #283	; 0x11b
 8003390:	4820      	ldr	r0, [pc, #128]	; (8003414 <showClockSetPanel+0x20c>)
 8003392:	f7fe fbc7 	bl	8001b24 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003396:	4822      	ldr	r0, [pc, #136]	; (8003420 <showClockSetPanel+0x218>)
 8003398:	f7fe f9aa 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800339c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	2305      	movs	r3, #5
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	2314      	movs	r3, #20
 80033a8:	225f      	movs	r2, #95	; 0x5f
 80033aa:	21d8      	movs	r1, #216	; 0xd8
 80033ac:	20dc      	movs	r0, #220	; 0xdc
 80033ae:	f7fe f94e 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 80033b2:	491f      	ldr	r1, [pc, #124]	; (8003430 <showClockSetPanel+0x228>)
 80033b4:	4817      	ldr	r0, [pc, #92]	; (8003414 <showClockSetPanel+0x20c>)
 80033b6:	f00b f8a5 	bl	800e504 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80033ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	2300      	movs	r3, #0
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2300      	movs	r3, #0
 80033c6:	22da      	movs	r2, #218	; 0xda
 80033c8:	21e6      	movs	r1, #230	; 0xe6
 80033ca:	4812      	ldr	r0, [pc, #72]	; (8003414 <showClockSetPanel+0x20c>)
 80033cc:	f7fe fbaa 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80033d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033d4:	9301      	str	r3, [sp, #4]
 80033d6:	2305      	movs	r3, #5
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	2314      	movs	r3, #20
 80033dc:	2264      	movs	r2, #100	; 0x64
 80033de:	21d8      	movs	r1, #216	; 0xd8
 80033e0:	200a      	movs	r0, #10
 80033e2:	f7fe f934 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80033e6:	4913      	ldr	r1, [pc, #76]	; (8003434 <showClockSetPanel+0x22c>)
 80033e8:	480a      	ldr	r0, [pc, #40]	; (8003414 <showClockSetPanel+0x20c>)
 80033ea:	f00b f88b 	bl	800e504 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80033ee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	2300      	movs	r3, #0
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	22da      	movs	r2, #218	; 0xda
 80033fc:	210d      	movs	r1, #13
 80033fe:	4805      	ldr	r0, [pc, #20]	; (8003414 <showClockSetPanel+0x20c>)
 8003400:	f7fe fb90 	bl	8001b24 <EF_PutString>
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	080151b0 	.word	0x080151b0
 8003410:	08012318 	.word	0x08012318
 8003414:	200002c4 	.word	0x200002c4
 8003418:	08012328 	.word	0x08012328
 800341c:	08012334 	.word	0x08012334
 8003420:	08013238 	.word	0x08013238
 8003424:	08012344 	.word	0x08012344
 8003428:	08012348 	.word	0x08012348
 800342c:	0801234c 	.word	0x0801234c
 8003430:	08012350 	.word	0x08012350
 8003434:	08012358 	.word	0x08012358

08003438 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800343e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003442:	f7fe fd59 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003446:	487a      	ldr	r0, [pc, #488]	; (8003630 <showPreparedActivitiesPanel+0x1f8>)
 8003448:	f7fe f952 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 800344c:	4979      	ldr	r1, [pc, #484]	; (8003634 <showPreparedActivitiesPanel+0x1fc>)
 800344e:	487a      	ldr	r0, [pc, #488]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 8003450:	f00b f858 	bl	800e504 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003454:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	2300      	movs	r3, #0
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	231f      	movs	r3, #31
 8003460:	220a      	movs	r2, #10
 8003462:	212f      	movs	r1, #47	; 0x2f
 8003464:	4874      	ldr	r0, [pc, #464]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 8003466:	f7fe fb5d 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800346a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2329      	movs	r3, #41	; 0x29
 8003472:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003476:	2129      	movs	r1, #41	; 0x29
 8003478:	2000      	movs	r0, #0
 800347a:	f7fd fe89 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800347e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	232b      	movs	r3, #43	; 0x2b
 8003486:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800348a:	212b      	movs	r1, #43	; 0x2b
 800348c:	2000      	movs	r0, #0
 800348e:	f7fd fe7f 	bl	8001190 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003492:	486a      	ldr	r0, [pc, #424]	; (800363c <showPreparedActivitiesPanel+0x204>)
 8003494:	f7fe f92c 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003498:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	2305      	movs	r3, #5
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	2314      	movs	r3, #20
 80034a4:	2264      	movs	r2, #100	; 0x64
 80034a6:	21d8      	movs	r1, #216	; 0xd8
 80034a8:	200a      	movs	r0, #10
 80034aa:	f7fe f8d0 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80034ae:	4964      	ldr	r1, [pc, #400]	; (8003640 <showPreparedActivitiesPanel+0x208>)
 80034b0:	4861      	ldr	r0, [pc, #388]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 80034b2:	f00b f827 	bl	800e504 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80034b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2300      	movs	r3, #0
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	22da      	movs	r2, #218	; 0xda
 80034c4:	210d      	movs	r1, #13
 80034c6:	485c      	ldr	r0, [pc, #368]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 80034c8:	f7fe fb2c 	bl	8001b24 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 80034cc:	4b5d      	ldr	r3, [pc, #372]	; (8003644 <showPreparedActivitiesPanel+0x20c>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d029      	beq.n	8003528 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80034d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	230a      	movs	r3, #10
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2328      	movs	r3, #40	; 0x28
 80034e0:	2278      	movs	r2, #120	; 0x78
 80034e2:	213c      	movs	r1, #60	; 0x3c
 80034e4:	2064      	movs	r0, #100	; 0x64
 80034e6:	f7fe f8b2 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 80034ea:	4957      	ldr	r1, [pc, #348]	; (8003648 <showPreparedActivitiesPanel+0x210>)
 80034ec:	4852      	ldr	r0, [pc, #328]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 80034ee:	f00b f809 	bl	800e504 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80034f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	2300      	movs	r3, #0
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2300      	movs	r3, #0
 80034fe:	223e      	movs	r2, #62	; 0x3e
 8003500:	2177      	movs	r1, #119	; 0x77
 8003502:	484d      	ldr	r0, [pc, #308]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 8003504:	f7fe fb0e 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003508:	4950      	ldr	r1, [pc, #320]	; (800364c <showPreparedActivitiesPanel+0x214>)
 800350a:	484b      	ldr	r0, [pc, #300]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 800350c:	f00a fffa 	bl	800e504 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003510:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	2300      	movs	r3, #0
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	2300      	movs	r3, #0
 800351c:	2250      	movs	r2, #80	; 0x50
 800351e:	2193      	movs	r1, #147	; 0x93
 8003520:	4845      	ldr	r0, [pc, #276]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 8003522:	f7fe faff 	bl	8001b24 <EF_PutString>
 8003526:	e028      	b.n	800357a <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003528:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	230a      	movs	r3, #10
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2328      	movs	r3, #40	; 0x28
 8003534:	2278      	movs	r2, #120	; 0x78
 8003536:	213c      	movs	r1, #60	; 0x3c
 8003538:	2064      	movs	r0, #100	; 0x64
 800353a:	f7fe f888 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 800353e:	4942      	ldr	r1, [pc, #264]	; (8003648 <showPreparedActivitiesPanel+0x210>)
 8003540:	483d      	ldr	r0, [pc, #244]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 8003542:	f00a ffdf 	bl	800e504 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003546:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	2300      	movs	r3, #0
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2300      	movs	r3, #0
 8003552:	223e      	movs	r2, #62	; 0x3e
 8003554:	2177      	movs	r1, #119	; 0x77
 8003556:	4838      	ldr	r0, [pc, #224]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 8003558:	f7fe fae4 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 800355c:	493c      	ldr	r1, [pc, #240]	; (8003650 <showPreparedActivitiesPanel+0x218>)
 800355e:	4836      	ldr	r0, [pc, #216]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 8003560:	f00a ffd0 	bl	800e504 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003564:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	2300      	movs	r3, #0
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	2300      	movs	r3, #0
 8003570:	2250      	movs	r2, #80	; 0x50
 8003572:	2193      	movs	r1, #147	; 0x93
 8003574:	4830      	ldr	r0, [pc, #192]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 8003576:	f7fe fad5 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 800357a:	4b32      	ldr	r3, [pc, #200]	; (8003644 <showPreparedActivitiesPanel+0x20c>)
 800357c:	785b      	ldrb	r3, [r3, #1]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d029      	beq.n	80035d6 <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003582:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	230a      	movs	r3, #10
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2328      	movs	r3, #40	; 0x28
 800358e:	2278      	movs	r2, #120	; 0x78
 8003590:	2178      	movs	r1, #120	; 0x78
 8003592:	2064      	movs	r0, #100	; 0x64
 8003594:	f7fe f85b 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003598:	492e      	ldr	r1, [pc, #184]	; (8003654 <showPreparedActivitiesPanel+0x21c>)
 800359a:	4827      	ldr	r0, [pc, #156]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 800359c:	f00a ffb2 	bl	800e504 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80035a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	2300      	movs	r3, #0
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2300      	movs	r3, #0
 80035ac:	227a      	movs	r2, #122	; 0x7a
 80035ae:	2169      	movs	r1, #105	; 0x69
 80035b0:	4821      	ldr	r0, [pc, #132]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 80035b2:	f7fe fab7 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 80035b6:	4925      	ldr	r1, [pc, #148]	; (800364c <showPreparedActivitiesPanel+0x214>)
 80035b8:	481f      	ldr	r0, [pc, #124]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 80035ba:	f00a ffa3 	bl	800e504 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80035be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	2300      	movs	r3, #0
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	2300      	movs	r3, #0
 80035ca:	228c      	movs	r2, #140	; 0x8c
 80035cc:	2193      	movs	r1, #147	; 0x93
 80035ce:	481a      	ldr	r0, [pc, #104]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 80035d0:	f7fe faa8 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 80035d4:	e028      	b.n	8003628 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80035d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	230a      	movs	r3, #10
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	2328      	movs	r3, #40	; 0x28
 80035e2:	2278      	movs	r2, #120	; 0x78
 80035e4:	2178      	movs	r1, #120	; 0x78
 80035e6:	2064      	movs	r0, #100	; 0x64
 80035e8:	f7fe f831 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 80035ec:	4919      	ldr	r1, [pc, #100]	; (8003654 <showPreparedActivitiesPanel+0x21c>)
 80035ee:	4812      	ldr	r0, [pc, #72]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 80035f0:	f00a ff88 	bl	800e504 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80035f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	2300      	movs	r3, #0
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	2300      	movs	r3, #0
 8003600:	227a      	movs	r2, #122	; 0x7a
 8003602:	2169      	movs	r1, #105	; 0x69
 8003604:	480c      	ldr	r0, [pc, #48]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 8003606:	f7fe fa8d 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 800360a:	4911      	ldr	r1, [pc, #68]	; (8003650 <showPreparedActivitiesPanel+0x218>)
 800360c:	480a      	ldr	r0, [pc, #40]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 800360e:	f00a ff79 	bl	800e504 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003612:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	2300      	movs	r3, #0
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	2300      	movs	r3, #0
 800361e:	228c      	movs	r2, #140	; 0x8c
 8003620:	2193      	movs	r1, #147	; 0x93
 8003622:	4805      	ldr	r0, [pc, #20]	; (8003638 <showPreparedActivitiesPanel+0x200>)
 8003624:	f7fe fa7e 	bl	8001b24 <EF_PutString>
}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	080151b0 	.word	0x080151b0
 8003634:	08012360 	.word	0x08012360
 8003638:	200002c4 	.word	0x200002c4
 800363c:	08013238 	.word	0x08013238
 8003640:	08012358 	.word	0x08012358
 8003644:	20000278 	.word	0x20000278
 8003648:	08012370 	.word	0x08012370
 800364c:	0801237c 	.word	0x0801237c
 8003650:	08012380 	.word	0x08012380
 8003654:	08012384 	.word	0x08012384

08003658 <showWSLedPanel>:
//
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showWSLedPanel()
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800365e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003662:	f7fe fc49 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003666:	48c7      	ldr	r0, [pc, #796]	; (8003984 <showWSLedPanel+0x32c>)
 8003668:	f7fe f842 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 800366c:	49c6      	ldr	r1, [pc, #792]	; (8003988 <showWSLedPanel+0x330>)
 800366e:	48c7      	ldr	r0, [pc, #796]	; (800398c <showWSLedPanel+0x334>)
 8003670:	f00a ff48 	bl	800e504 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003674:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	2300      	movs	r3, #0
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	231f      	movs	r3, #31
 8003680:	220a      	movs	r2, #10
 8003682:	2146      	movs	r1, #70	; 0x46
 8003684:	48c1      	ldr	r0, [pc, #772]	; (800398c <showWSLedPanel+0x334>)
 8003686:	f7fe fa4d 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800368a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	2329      	movs	r3, #41	; 0x29
 8003692:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003696:	2129      	movs	r1, #41	; 0x29
 8003698:	2000      	movs	r0, #0
 800369a:	f7fd fd79 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800369e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	232b      	movs	r3, #43	; 0x2b
 80036a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036aa:	212b      	movs	r1, #43	; 0x2b
 80036ac:	2000      	movs	r0, #0
 80036ae:	f7fd fd6f 	bl	8001190 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 80036b2:	4bb7      	ldr	r3, [pc, #732]	; (8003990 <showWSLedPanel+0x338>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	49b6      	ldr	r1, [pc, #728]	; (8003994 <showWSLedPanel+0x33c>)
 80036ba:	48b4      	ldr	r0, [pc, #720]	; (800398c <showWSLedPanel+0x334>)
 80036bc:	f00a ff22 	bl	800e504 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80036c0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	2300      	movs	r3, #0
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	2300      	movs	r3, #0
 80036cc:	223c      	movs	r2, #60	; 0x3c
 80036ce:	2114      	movs	r1, #20
 80036d0:	48ae      	ldr	r0, [pc, #696]	; (800398c <showWSLedPanel+0x334>)
 80036d2:	f7fe fa27 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 80036d6:	49b0      	ldr	r1, [pc, #704]	; (8003998 <showWSLedPanel+0x340>)
 80036d8:	48ac      	ldr	r0, [pc, #688]	; (800398c <showWSLedPanel+0x334>)
 80036da:	f00a ff13 	bl	800e504 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80036de:	f24c 6318 	movw	r3, #50712	; 0xc618
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	2300      	movs	r3, #0
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	2300      	movs	r3, #0
 80036ea:	225a      	movs	r2, #90	; 0x5a
 80036ec:	2114      	movs	r1, #20
 80036ee:	48a7      	ldr	r0, [pc, #668]	; (800398c <showWSLedPanel+0x334>)
 80036f0:	f7fe fa18 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 80036f4:	49a9      	ldr	r1, [pc, #676]	; (800399c <showWSLedPanel+0x344>)
 80036f6:	48a5      	ldr	r0, [pc, #660]	; (800398c <showWSLedPanel+0x334>)
 80036f8:	f00a ff04 	bl	800e504 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80036fc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	2300      	movs	r3, #0
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	2300      	movs	r3, #0
 8003708:	2278      	movs	r2, #120	; 0x78
 800370a:	2114      	movs	r1, #20
 800370c:	489f      	ldr	r0, [pc, #636]	; (800398c <showWSLedPanel+0x334>)
 800370e:	f7fe fa09 	bl	8001b24 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 8003712:	48a3      	ldr	r0, [pc, #652]	; (80039a0 <showWSLedPanel+0x348>)
 8003714:	f7fd ffec 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003718:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	2305      	movs	r3, #5
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	2315      	movs	r3, #21
 8003724:	221e      	movs	r2, #30
 8003726:	2141      	movs	r1, #65	; 0x41
 8003728:	20d9      	movs	r0, #217	; 0xd9
 800372a:	f7fd ff90 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 800372e:	499d      	ldr	r1, [pc, #628]	; (80039a4 <showWSLedPanel+0x34c>)
 8003730:	4896      	ldr	r0, [pc, #600]	; (800398c <showWSLedPanel+0x334>)
 8003732:	f00a fee7 	bl	800e504 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003736:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	2300      	movs	r3, #0
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2300      	movs	r3, #0
 8003742:	2243      	movs	r2, #67	; 0x43
 8003744:	21df      	movs	r1, #223	; 0xdf
 8003746:	4891      	ldr	r0, [pc, #580]	; (800398c <showWSLedPanel+0x334>)
 8003748:	f7fe f9ec 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 800374c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	2305      	movs	r3, #5
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	2315      	movs	r3, #21
 8003758:	221e      	movs	r2, #30
 800375a:	2141      	movs	r1, #65	; 0x41
 800375c:	20fc      	movs	r0, #252	; 0xfc
 800375e:	f7fd ff76 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003762:	4991      	ldr	r1, [pc, #580]	; (80039a8 <showWSLedPanel+0x350>)
 8003764:	4889      	ldr	r0, [pc, #548]	; (800398c <showWSLedPanel+0x334>)
 8003766:	f00a fecd 	bl	800e504 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 800376a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	2300      	movs	r3, #0
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	2300      	movs	r3, #0
 8003776:	2243      	movs	r2, #67	; 0x43
 8003778:	f240 1101 	movw	r1, #257	; 0x101
 800377c:	4883      	ldr	r0, [pc, #524]	; (800398c <showWSLedPanel+0x334>)
 800377e:	f7fe f9d1 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003782:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003786:	9301      	str	r3, [sp, #4]
 8003788:	2305      	movs	r3, #5
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	2315      	movs	r3, #21
 800378e:	221e      	movs	r2, #30
 8003790:	2141      	movs	r1, #65	; 0x41
 8003792:	f240 101f 	movw	r0, #287	; 0x11f
 8003796:	f7fd ff5a 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 800379a:	4984      	ldr	r1, [pc, #528]	; (80039ac <showWSLedPanel+0x354>)
 800379c:	487b      	ldr	r0, [pc, #492]	; (800398c <showWSLedPanel+0x334>)
 800379e:	f00a feb1 	bl	800e504 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80037a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	2300      	movs	r3, #0
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2300      	movs	r3, #0
 80037ae:	2243      	movs	r2, #67	; 0x43
 80037b0:	f44f 7192 	mov.w	r1, #292	; 0x124
 80037b4:	4875      	ldr	r0, [pc, #468]	; (800398c <showWSLedPanel+0x334>)
 80037b6:	f7fe f9b5 	bl	8001b24 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 80037ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	2305      	movs	r3, #5
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	2315      	movs	r3, #21
 80037c6:	2228      	movs	r2, #40	; 0x28
 80037c8:	215f      	movs	r1, #95	; 0x5f
 80037ca:	2096      	movs	r0, #150	; 0x96
 80037cc:	f7fd ff3f 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 80037d0:	4977      	ldr	r1, [pc, #476]	; (80039b0 <showWSLedPanel+0x358>)
 80037d2:	486e      	ldr	r0, [pc, #440]	; (800398c <showWSLedPanel+0x334>)
 80037d4:	f00a fe96 	bl	800e504 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80037d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	2300      	movs	r3, #0
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	2300      	movs	r3, #0
 80037e4:	2261      	movs	r2, #97	; 0x61
 80037e6:	219b      	movs	r1, #155	; 0x9b
 80037e8:	4868      	ldr	r0, [pc, #416]	; (800398c <showWSLedPanel+0x334>)
 80037ea:	f7fe f99b 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 80037ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	2305      	movs	r3, #5
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2315      	movs	r3, #21
 80037fa:	2228      	movs	r2, #40	; 0x28
 80037fc:	215f      	movs	r1, #95	; 0x5f
 80037fe:	20ca      	movs	r0, #202	; 0xca
 8003800:	f7fd ff25 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8003804:	496b      	ldr	r1, [pc, #428]	; (80039b4 <showWSLedPanel+0x35c>)
 8003806:	4861      	ldr	r0, [pc, #388]	; (800398c <showWSLedPanel+0x334>)
 8003808:	f00a fe7c 	bl	800e504 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 800380c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	2300      	movs	r3, #0
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2300      	movs	r3, #0
 8003818:	2261      	movs	r2, #97	; 0x61
 800381a:	21d2      	movs	r1, #210	; 0xd2
 800381c:	485b      	ldr	r0, [pc, #364]	; (800398c <showWSLedPanel+0x334>)
 800381e:	f7fe f981 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8003822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	2305      	movs	r3, #5
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2315      	movs	r3, #21
 800382e:	2228      	movs	r2, #40	; 0x28
 8003830:	215f      	movs	r1, #95	; 0x5f
 8003832:	20fe      	movs	r0, #254	; 0xfe
 8003834:	f7fd ff0b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8003838:	495f      	ldr	r1, [pc, #380]	; (80039b8 <showWSLedPanel+0x360>)
 800383a:	4854      	ldr	r0, [pc, #336]	; (800398c <showWSLedPanel+0x334>)
 800383c:	f00a fe62 	bl	800e504 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8003840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	2300      	movs	r3, #0
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2300      	movs	r3, #0
 800384c:	2261      	movs	r2, #97	; 0x61
 800384e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003852:	484e      	ldr	r0, [pc, #312]	; (800398c <showWSLedPanel+0x334>)
 8003854:	f7fe f966 	bl	8001b24 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003858:	231f      	movs	r3, #31
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	2305      	movs	r3, #5
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2315      	movs	r3, #21
 8003862:	2228      	movs	r2, #40	; 0x28
 8003864:	217d      	movs	r1, #125	; 0x7d
 8003866:	2096      	movs	r0, #150	; 0x96
 8003868:	f7fd fef1 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 800386c:	4950      	ldr	r1, [pc, #320]	; (80039b0 <showWSLedPanel+0x358>)
 800386e:	4847      	ldr	r0, [pc, #284]	; (800398c <showWSLedPanel+0x334>)
 8003870:	f00a fe48 	bl	800e504 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8003874:	231f      	movs	r3, #31
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	2300      	movs	r3, #0
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2300      	movs	r3, #0
 800387e:	227f      	movs	r2, #127	; 0x7f
 8003880:	219b      	movs	r1, #155	; 0x9b
 8003882:	4842      	ldr	r0, [pc, #264]	; (800398c <showWSLedPanel+0x334>)
 8003884:	f7fe f94e 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003888:	231f      	movs	r3, #31
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	2305      	movs	r3, #5
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	2315      	movs	r3, #21
 8003892:	2228      	movs	r2, #40	; 0x28
 8003894:	217d      	movs	r1, #125	; 0x7d
 8003896:	20ca      	movs	r0, #202	; 0xca
 8003898:	f7fd fed9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 800389c:	4945      	ldr	r1, [pc, #276]	; (80039b4 <showWSLedPanel+0x35c>)
 800389e:	483b      	ldr	r0, [pc, #236]	; (800398c <showWSLedPanel+0x334>)
 80038a0:	f00a fe30 	bl	800e504 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80038a4:	231f      	movs	r3, #31
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	2300      	movs	r3, #0
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2300      	movs	r3, #0
 80038ae:	227f      	movs	r2, #127	; 0x7f
 80038b0:	21d2      	movs	r1, #210	; 0xd2
 80038b2:	4836      	ldr	r0, [pc, #216]	; (800398c <showWSLedPanel+0x334>)
 80038b4:	f7fe f936 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80038b8:	231f      	movs	r3, #31
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	2305      	movs	r3, #5
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2315      	movs	r3, #21
 80038c2:	2228      	movs	r2, #40	; 0x28
 80038c4:	217d      	movs	r1, #125	; 0x7d
 80038c6:	20fe      	movs	r0, #254	; 0xfe
 80038c8:	f7fd fec1 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 80038cc:	493a      	ldr	r1, [pc, #232]	; (80039b8 <showWSLedPanel+0x360>)
 80038ce:	482f      	ldr	r0, [pc, #188]	; (800398c <showWSLedPanel+0x334>)
 80038d0:	f00a fe18 	bl	800e504 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80038d4:	231f      	movs	r3, #31
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	2300      	movs	r3, #0
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	2300      	movs	r3, #0
 80038de:	227f      	movs	r2, #127	; 0x7f
 80038e0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80038e4:	4829      	ldr	r0, [pc, #164]	; (800398c <showWSLedPanel+0x334>)
 80038e6:	f7fe f91d 	bl	8001b24 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 80038ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	2305      	movs	r3, #5
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	2315      	movs	r3, #21
 80038f6:	2250      	movs	r2, #80	; 0x50
 80038f8:	219c      	movs	r1, #156	; 0x9c
 80038fa:	2014      	movs	r0, #20
 80038fc:	f7fd fea7 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 8003900:	492e      	ldr	r1, [pc, #184]	; (80039bc <showWSLedPanel+0x364>)
 8003902:	4822      	ldr	r0, [pc, #136]	; (800398c <showWSLedPanel+0x334>)
 8003904:	f00a fdfe 	bl	800e504 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 8003908:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800390c:	9301      	str	r3, [sp, #4]
 800390e:	2300      	movs	r3, #0
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	2300      	movs	r3, #0
 8003914:	229e      	movs	r2, #158	; 0x9e
 8003916:	211c      	movs	r1, #28
 8003918:	481c      	ldr	r0, [pc, #112]	; (800398c <showWSLedPanel+0x334>)
 800391a:	f7fe f903 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800391e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	2305      	movs	r3, #5
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	2315      	movs	r3, #21
 800392a:	2250      	movs	r2, #80	; 0x50
 800392c:	219c      	movs	r1, #156	; 0x9c
 800392e:	2078      	movs	r0, #120	; 0x78
 8003930:	f7fd fe8d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 8003934:	4922      	ldr	r1, [pc, #136]	; (80039c0 <showWSLedPanel+0x368>)
 8003936:	4815      	ldr	r0, [pc, #84]	; (800398c <showWSLedPanel+0x334>)
 8003938:	f00a fde4 	bl	800e504 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800393c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	2300      	movs	r3, #0
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	2300      	movs	r3, #0
 8003948:	229e      	movs	r2, #158	; 0x9e
 800394a:	2187      	movs	r1, #135	; 0x87
 800394c:	480f      	ldr	r0, [pc, #60]	; (800398c <showWSLedPanel+0x334>)
 800394e:	f7fe f8e9 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 8003952:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	2305      	movs	r3, #5
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	2315      	movs	r3, #21
 800395e:	2250      	movs	r2, #80	; 0x50
 8003960:	219c      	movs	r1, #156	; 0x9c
 8003962:	20dc      	movs	r0, #220	; 0xdc
 8003964:	f7fd fe73 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 8003968:	4916      	ldr	r1, [pc, #88]	; (80039c4 <showWSLedPanel+0x36c>)
 800396a:	4808      	ldr	r0, [pc, #32]	; (800398c <showWSLedPanel+0x334>)
 800396c:	f00a fdca 	bl	800e504 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 8003970:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	2300      	movs	r3, #0
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	2300      	movs	r3, #0
 800397c:	229e      	movs	r2, #158	; 0x9e
 800397e:	21e9      	movs	r1, #233	; 0xe9
 8003980:	e022      	b.n	80039c8 <showWSLedPanel+0x370>
 8003982:	bf00      	nop
 8003984:	080151b0 	.word	0x080151b0
 8003988:	08012390 	.word	0x08012390
 800398c:	200002c4 	.word	0x200002c4
 8003990:	20000032 	.word	0x20000032
 8003994:	0801239c 	.word	0x0801239c
 8003998:	080123ac 	.word	0x080123ac
 800399c:	080123b4 	.word	0x080123b4
 80039a0:	08013238 	.word	0x08013238
 80039a4:	08012344 	.word	0x08012344
 80039a8:	0801234c 	.word	0x0801234c
 80039ac:	080123bc 	.word	0x080123bc
 80039b0:	080123c0 	.word	0x080123c0
 80039b4:	080123c4 	.word	0x080123c4
 80039b8:	080123c8 	.word	0x080123c8
 80039bc:	080123cc 	.word	0x080123cc
 80039c0:	08012380 	.word	0x08012380
 80039c4:	080123d4 	.word	0x080123d4
 80039c8:	482b      	ldr	r0, [pc, #172]	; (8003a78 <showWSLedPanel+0x420>)
 80039ca:	f7fe f8ab 	bl	8001b24 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 80039ce:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	2305      	movs	r3, #5
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	2315      	movs	r3, #21
 80039da:	2250      	movs	r2, #80	; 0x50
 80039dc:	21bb      	movs	r1, #187	; 0xbb
 80039de:	2046      	movs	r0, #70	; 0x46
 80039e0:	f7fd fe35 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 80039e4:	4925      	ldr	r1, [pc, #148]	; (8003a7c <showWSLedPanel+0x424>)
 80039e6:	4824      	ldr	r0, [pc, #144]	; (8003a78 <showWSLedPanel+0x420>)
 80039e8:	f00a fd8c 	bl	800e504 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 80039ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	2300      	movs	r3, #0
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	2300      	movs	r3, #0
 80039f8:	22bd      	movs	r2, #189	; 0xbd
 80039fa:	214e      	movs	r1, #78	; 0x4e
 80039fc:	481e      	ldr	r0, [pc, #120]	; (8003a78 <showWSLedPanel+0x420>)
 80039fe:	f7fe f891 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8003a02:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	2305      	movs	r3, #5
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2315      	movs	r3, #21
 8003a0e:	2250      	movs	r2, #80	; 0x50
 8003a10:	21bb      	movs	r1, #187	; 0xbb
 8003a12:	20aa      	movs	r0, #170	; 0xaa
 8003a14:	f7fd fe1b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 8003a18:	4919      	ldr	r1, [pc, #100]	; (8003a80 <showWSLedPanel+0x428>)
 8003a1a:	4817      	ldr	r0, [pc, #92]	; (8003a78 <showWSLedPanel+0x420>)
 8003a1c:	f00a fd72 	bl	800e504 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8003a20:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	22bd      	movs	r2, #189	; 0xbd
 8003a2e:	21b5      	movs	r1, #181	; 0xb5
 8003a30:	4811      	ldr	r0, [pc, #68]	; (8003a78 <showWSLedPanel+0x420>)
 8003a32:	f7fe f877 	bl	8001b24 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003a36:	4813      	ldr	r0, [pc, #76]	; (8003a84 <showWSLedPanel+0x42c>)
 8003a38:	f7fd fe5a 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003a3c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	2305      	movs	r3, #5
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2314      	movs	r3, #20
 8003a48:	2264      	movs	r2, #100	; 0x64
 8003a4a:	21d8      	movs	r1, #216	; 0xd8
 8003a4c:	200a      	movs	r0, #10
 8003a4e:	f7fd fdfe 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003a52:	490d      	ldr	r1, [pc, #52]	; (8003a88 <showWSLedPanel+0x430>)
 8003a54:	4808      	ldr	r0, [pc, #32]	; (8003a78 <showWSLedPanel+0x420>)
 8003a56:	f00a fd55 	bl	800e504 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003a5a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a5e:	9301      	str	r3, [sp, #4]
 8003a60:	2300      	movs	r3, #0
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	2300      	movs	r3, #0
 8003a66:	22da      	movs	r2, #218	; 0xda
 8003a68:	210d      	movs	r1, #13
 8003a6a:	4803      	ldr	r0, [pc, #12]	; (8003a78 <showWSLedPanel+0x420>)
 8003a6c:	f7fe f85a 	bl	8001b24 <EF_PutString>


}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200002c4 	.word	0x200002c4
 8003a7c:	080123dc 	.word	0x080123dc
 8003a80:	080123e4 	.word	0x080123e4
 8003a84:	08013238 	.word	0x08013238
 8003a88:	08012358 	.word	0x08012358

08003a8c <ChangeHourOnScreen>:
//
// Change displayed time, if is other than current time
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ChangeHourOnScreen()
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8003a92:	f7fe fe73 	bl	800277c <DS3231_GetHour>
 8003a96:	4603      	mov	r3, r0
 8003a98:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8003a9a:	f7fe fe7b 	bl	8002794 <DS3231_GetMinute>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003aa2:	482a      	ldr	r0, [pc, #168]	; (8003b4c <ChangeHourOnScreen+0xc0>)
 8003aa4:	f7fd fe24 	bl	80016f0 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8003aa8:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <ChangeHourOnScreen+0xc4>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	79fa      	ldrb	r2, [r7, #7]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d021      	beq.n	8003af6 <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8003ab2:	4b28      	ldr	r3, [pc, #160]	; (8003b54 <ChangeHourOnScreen+0xc8>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d11d      	bne.n	8003af6 <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	2b09      	cmp	r3, #9
 8003abe:	d806      	bhi.n	8003ace <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	4924      	ldr	r1, [pc, #144]	; (8003b58 <ChangeHourOnScreen+0xcc>)
 8003ac6:	4825      	ldr	r0, [pc, #148]	; (8003b5c <ChangeHourOnScreen+0xd0>)
 8003ac8:	f00a fd1c 	bl	800e504 <siprintf>
 8003acc:	e005      	b.n	8003ada <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4923      	ldr	r1, [pc, #140]	; (8003b60 <ChangeHourOnScreen+0xd4>)
 8003ad4:	4821      	ldr	r0, [pc, #132]	; (8003b5c <ChangeHourOnScreen+0xd0>)
 8003ad6:	f00a fd15 	bl	800e504 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003ada:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	2232      	movs	r2, #50	; 0x32
 8003ae8:	2161      	movs	r1, #97	; 0x61
 8003aea:	481c      	ldr	r0, [pc, #112]	; (8003b5c <ChangeHourOnScreen+0xd0>)
 8003aec:	f7fe f81a 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 8003af0:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <ChangeHourOnScreen+0xc4>)
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8003af6:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <ChangeHourOnScreen+0xd8>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	79ba      	ldrb	r2, [r7, #6]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d021      	beq.n	8003b44 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8003b00:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <ChangeHourOnScreen+0xc8>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d11d      	bne.n	8003b44 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 8003b08:	79bb      	ldrb	r3, [r7, #6]
 8003b0a:	2b09      	cmp	r3, #9
 8003b0c:	d806      	bhi.n	8003b1c <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8003b0e:	79bb      	ldrb	r3, [r7, #6]
 8003b10:	461a      	mov	r2, r3
 8003b12:	4915      	ldr	r1, [pc, #84]	; (8003b68 <ChangeHourOnScreen+0xdc>)
 8003b14:	4811      	ldr	r0, [pc, #68]	; (8003b5c <ChangeHourOnScreen+0xd0>)
 8003b16:	f00a fcf5 	bl	800e504 <siprintf>
 8003b1a:	e005      	b.n	8003b28 <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8003b1c:	79bb      	ldrb	r3, [r7, #6]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4912      	ldr	r1, [pc, #72]	; (8003b6c <ChangeHourOnScreen+0xe0>)
 8003b22:	480e      	ldr	r0, [pc, #56]	; (8003b5c <ChangeHourOnScreen+0xd0>)
 8003b24:	f00a fcee 	bl	800e504 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003b28:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	2301      	movs	r3, #1
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	2232      	movs	r2, #50	; 0x32
 8003b36:	2196      	movs	r1, #150	; 0x96
 8003b38:	4808      	ldr	r0, [pc, #32]	; (8003b5c <ChangeHourOnScreen+0xd0>)
 8003b3a:	f7fd fff3 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 8003b3e:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <ChangeHourOnScreen+0xd8>)
 8003b40:	79bb      	ldrb	r3, [r7, #6]
 8003b42:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	080151b0 	.word	0x080151b0
 8003b50:	2000024c 	.word	0x2000024c
 8003b54:	20000258 	.word	0x20000258
 8003b58:	080123ec 	.word	0x080123ec
 8003b5c:	200002c4 	.word	0x200002c4
 8003b60:	080123f4 	.word	0x080123f4
 8003b64:	2000024d 	.word	0x2000024d
 8003b68:	080123f8 	.word	0x080123f8
 8003b6c:	08012400 	.word	0x08012400

08003b70 <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d124      	bne.n	8003bce <predefinedActivityCzyszczenie+0x5e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8003b84:	2001      	movs	r0, #1
 8003b86:	f7fe ff14 	bl	80029b2 <EEPROM_RelayStateRead>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <predefinedActivityCzyszczenie+0x26>
 8003b90:	2005      	movs	r0, #5
 8003b92:	f002 f8df 	bl	8005d54 <SendComand>
		if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8003b96:	2002      	movs	r0, #2
 8003b98:	f7fe ff0b 	bl	80029b2 <EEPROM_RelayStateRead>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <predefinedActivityCzyszczenie+0x38>
 8003ba2:	2007      	movs	r0, #7
 8003ba4:	f002 f8d6 	bl	8005d54 <SendComand>
		if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8003ba8:	2003      	movs	r0, #3
 8003baa:	f7fe ff02 	bl	80029b2 <EEPROM_RelayStateRead>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <predefinedActivityCzyszczenie+0x4a>
 8003bb4:	2009      	movs	r0, #9
 8003bb6:	f002 f8cd 	bl	8005d54 <SendComand>
		if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8003bba:	2004      	movs	r0, #4
 8003bbc:	f7fe fef9 	bl	80029b2 <EEPROM_RelayStateRead>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <predefinedActivityCzyszczenie+0x6a>
 8003bc6:	200b      	movs	r0, #11
 8003bc8:	f002 f8c4 	bl	8005d54 <SendComand>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8003bcc:	e005      	b.n	8003bda <predefinedActivityCzyszczenie+0x6a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8003bce:	2018      	movs	r0, #24
 8003bd0:	f002 f8c0 	bl	8005d54 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8003bd4:	2019      	movs	r0, #25
 8003bd6:	f002 f8bd 	bl	8005d54 <SendComand>
}
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d124      	bne.n	8003c42 <predefinedActivityKarmienie+0x5e>
	{
		if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	f7fe feda 	bl	80029b2 <EEPROM_RelayStateRead>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <predefinedActivityKarmienie+0x26>
 8003c04:	2005      	movs	r0, #5
 8003c06:	f002 f8a5 	bl	8005d54 <SendComand>
		if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8003c0a:	2002      	movs	r0, #2
 8003c0c:	f7fe fed1 	bl	80029b2 <EEPROM_RelayStateRead>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <predefinedActivityKarmienie+0x38>
 8003c16:	2007      	movs	r0, #7
 8003c18:	f002 f89c 	bl	8005d54 <SendComand>
		if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8003c1c:	2003      	movs	r0, #3
 8003c1e:	f7fe fec8 	bl	80029b2 <EEPROM_RelayStateRead>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <predefinedActivityKarmienie+0x4a>
 8003c28:	2009      	movs	r0, #9
 8003c2a:	f002 f893 	bl	8005d54 <SendComand>
		if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8003c2e:	2004      	movs	r0, #4
 8003c30:	f7fe febf 	bl	80029b2 <EEPROM_RelayStateRead>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <predefinedActivityKarmienie+0x6a>
 8003c3a:	200b      	movs	r0, #11
 8003c3c:	f002 f88a 	bl	8005d54 <SendComand>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8003c40:	e005      	b.n	8003c4e <predefinedActivityKarmienie+0x6a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8003c42:	2018      	movs	r0, #24
 8003c44:	f002 f886 	bl	8005d54 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8003c48:	4803      	ldr	r0, [pc, #12]	; (8003c58 <predefinedActivityKarmienie+0x74>)
 8003c4a:	f008 fa0b 	bl	800c064 <HAL_TIM_Base_Start_IT>
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000654 	.word	0x20000654

08003c5c <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8003c62:	487d      	ldr	r0, [pc, #500]	; (8003e58 <drawCurrentStateOfSwitches+0x1fc>)
 8003c64:	f7fd fd44 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8003c68:	4b7c      	ldr	r3, [pc, #496]	; (8003e5c <drawCurrentStateOfSwitches+0x200>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01c      	beq.n	8003caa <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003c70:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	2305      	movs	r3, #5
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2315      	movs	r3, #21
 8003c7c:	2221      	movs	r2, #33	; 0x21
 8003c7e:	2141      	movs	r1, #65	; 0x41
 8003c80:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003c84:	f7fd fce3 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003c88:	4975      	ldr	r1, [pc, #468]	; (8003e60 <drawCurrentStateOfSwitches+0x204>)
 8003c8a:	4876      	ldr	r0, [pc, #472]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003c8c:	f00a fc3a 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003c90:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	2300      	movs	r3, #0
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2243      	movs	r2, #67	; 0x43
 8003c9e:	f240 1111 	movw	r1, #273	; 0x111
 8003ca2:	4870      	ldr	r0, [pc, #448]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003ca4:	f7fd ff3e 	bl	8001b24 <EF_PutString>
 8003ca8:	e01b      	b.n	8003ce2 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003caa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	2305      	movs	r3, #5
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	2315      	movs	r3, #21
 8003cb6:	2221      	movs	r2, #33	; 0x21
 8003cb8:	2141      	movs	r1, #65	; 0x41
 8003cba:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003cbe:	f7fd fcc6 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003cc2:	4969      	ldr	r1, [pc, #420]	; (8003e68 <drawCurrentStateOfSwitches+0x20c>)
 8003cc4:	4867      	ldr	r0, [pc, #412]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003cc6:	f00a fc1d 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003cca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cce:	9301      	str	r3, [sp, #4]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	2243      	movs	r2, #67	; 0x43
 8003cd8:	f240 1111 	movw	r1, #273	; 0x111
 8003cdc:	4861      	ldr	r0, [pc, #388]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003cde:	f7fd ff21 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8003ce2:	4b5e      	ldr	r3, [pc, #376]	; (8003e5c <drawCurrentStateOfSwitches+0x200>)
 8003ce4:	785b      	ldrb	r3, [r3, #1]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01c      	beq.n	8003d24 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003cea:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003cee:	9301      	str	r3, [sp, #4]
 8003cf0:	2305      	movs	r3, #5
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2315      	movs	r3, #21
 8003cf6:	2221      	movs	r2, #33	; 0x21
 8003cf8:	215f      	movs	r1, #95	; 0x5f
 8003cfa:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003cfe:	f7fd fca6 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003d02:	4957      	ldr	r1, [pc, #348]	; (8003e60 <drawCurrentStateOfSwitches+0x204>)
 8003d04:	4857      	ldr	r0, [pc, #348]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003d06:	f00a fbfd 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003d0a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	2300      	movs	r3, #0
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2300      	movs	r3, #0
 8003d16:	2261      	movs	r2, #97	; 0x61
 8003d18:	f240 1111 	movw	r1, #273	; 0x111
 8003d1c:	4851      	ldr	r0, [pc, #324]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003d1e:	f7fd ff01 	bl	8001b24 <EF_PutString>
 8003d22:	e01b      	b.n	8003d5c <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003d24:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	2305      	movs	r3, #5
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	2315      	movs	r3, #21
 8003d30:	2221      	movs	r2, #33	; 0x21
 8003d32:	215f      	movs	r1, #95	; 0x5f
 8003d34:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003d38:	f7fd fc89 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003d3c:	494a      	ldr	r1, [pc, #296]	; (8003e68 <drawCurrentStateOfSwitches+0x20c>)
 8003d3e:	4849      	ldr	r0, [pc, #292]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003d40:	f00a fbe0 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003d44:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2261      	movs	r2, #97	; 0x61
 8003d52:	f240 1111 	movw	r1, #273	; 0x111
 8003d56:	4843      	ldr	r0, [pc, #268]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003d58:	f7fd fee4 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8003d5c:	4b3f      	ldr	r3, [pc, #252]	; (8003e5c <drawCurrentStateOfSwitches+0x200>)
 8003d5e:	789b      	ldrb	r3, [r3, #2]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01c      	beq.n	8003d9e <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003d64:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	2305      	movs	r3, #5
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	2315      	movs	r3, #21
 8003d70:	2221      	movs	r2, #33	; 0x21
 8003d72:	217d      	movs	r1, #125	; 0x7d
 8003d74:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003d78:	f7fd fc69 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003d7c:	4938      	ldr	r1, [pc, #224]	; (8003e60 <drawCurrentStateOfSwitches+0x204>)
 8003d7e:	4839      	ldr	r0, [pc, #228]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003d80:	f00a fbc0 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003d84:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003d88:	9301      	str	r3, [sp, #4]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	227f      	movs	r2, #127	; 0x7f
 8003d92:	f240 1111 	movw	r1, #273	; 0x111
 8003d96:	4833      	ldr	r0, [pc, #204]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003d98:	f7fd fec4 	bl	8001b24 <EF_PutString>
 8003d9c:	e01b      	b.n	8003dd6 <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003d9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	2305      	movs	r3, #5
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	2315      	movs	r3, #21
 8003daa:	2221      	movs	r2, #33	; 0x21
 8003dac:	217d      	movs	r1, #125	; 0x7d
 8003dae:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003db2:	f7fd fc4c 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003db6:	492c      	ldr	r1, [pc, #176]	; (8003e68 <drawCurrentStateOfSwitches+0x20c>)
 8003db8:	482a      	ldr	r0, [pc, #168]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003dba:	f00a fba3 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003dbe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	227f      	movs	r2, #127	; 0x7f
 8003dcc:	f240 1111 	movw	r1, #273	; 0x111
 8003dd0:	4824      	ldr	r0, [pc, #144]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003dd2:	f7fd fea7 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8003dd6:	4b21      	ldr	r3, [pc, #132]	; (8003e5c <drawCurrentStateOfSwitches+0x200>)
 8003dd8:	78db      	ldrb	r3, [r3, #3]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d01c      	beq.n	8003e18 <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003dde:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	2305      	movs	r3, #5
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2315      	movs	r3, #21
 8003dea:	2221      	movs	r2, #33	; 0x21
 8003dec:	219b      	movs	r1, #155	; 0x9b
 8003dee:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003df2:	f7fd fc2c 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003df6:	491a      	ldr	r1, [pc, #104]	; (8003e60 <drawCurrentStateOfSwitches+0x204>)
 8003df8:	481a      	ldr	r0, [pc, #104]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003dfa:	f00a fb83 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003dfe:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003e02:	9301      	str	r3, [sp, #4]
 8003e04:	2300      	movs	r3, #0
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	229d      	movs	r2, #157	; 0x9d
 8003e0c:	f240 1111 	movw	r1, #273	; 0x111
 8003e10:	4814      	ldr	r0, [pc, #80]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003e12:	f7fd fe87 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8003e16:	e01b      	b.n	8003e50 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003e18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	2305      	movs	r3, #5
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	2315      	movs	r3, #21
 8003e24:	2221      	movs	r2, #33	; 0x21
 8003e26:	219b      	movs	r1, #155	; 0x9b
 8003e28:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003e2c:	f7fd fc0f 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003e30:	490d      	ldr	r1, [pc, #52]	; (8003e68 <drawCurrentStateOfSwitches+0x20c>)
 8003e32:	480c      	ldr	r0, [pc, #48]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003e34:	f00a fb66 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2300      	movs	r3, #0
 8003e44:	229d      	movs	r2, #157	; 0x9d
 8003e46:	f240 1111 	movw	r1, #273	; 0x111
 8003e4a:	4806      	ldr	r0, [pc, #24]	; (8003e64 <drawCurrentStateOfSwitches+0x208>)
 8003e4c:	f7fd fe6a 	bl	8001b24 <EF_PutString>
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	08013238 	.word	0x08013238
 8003e5c:	20000270 	.word	0x20000270
 8003e60:	0801237c 	.word	0x0801237c
 8003e64:	200002c4 	.word	0x200002c4
 8003e68:	08012380 	.word	0x08012380

08003e6c <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8003e72:	4875      	ldr	r0, [pc, #468]	; (8004048 <drawCurrentStateOfLights+0x1dc>)
 8003e74:	f7fd fc3c 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8003e78:	4b74      	ldr	r3, [pc, #464]	; (800404c <drawCurrentStateOfLights+0x1e0>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01a      	beq.n	8003eb6 <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003e80:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	2305      	movs	r3, #5
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	2315      	movs	r3, #21
 8003e8c:	2221      	movs	r2, #33	; 0x21
 8003e8e:	2141      	movs	r1, #65	; 0x41
 8003e90:	20c8      	movs	r0, #200	; 0xc8
 8003e92:	f7fd fbdc 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003e96:	496e      	ldr	r1, [pc, #440]	; (8004050 <drawCurrentStateOfLights+0x1e4>)
 8003e98:	486e      	ldr	r0, [pc, #440]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8003e9a:	f00a fb33 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	2243      	movs	r2, #67	; 0x43
 8003eac:	21cb      	movs	r1, #203	; 0xcb
 8003eae:	4869      	ldr	r0, [pc, #420]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8003eb0:	f7fd fe38 	bl	8001b24 <EF_PutString>
 8003eb4:	e019      	b.n	8003eea <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003eb6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	2305      	movs	r3, #5
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	2315      	movs	r3, #21
 8003ec2:	2221      	movs	r2, #33	; 0x21
 8003ec4:	2141      	movs	r1, #65	; 0x41
 8003ec6:	20c8      	movs	r0, #200	; 0xc8
 8003ec8:	f7fd fbc1 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003ecc:	4962      	ldr	r1, [pc, #392]	; (8004058 <drawCurrentStateOfLights+0x1ec>)
 8003ece:	4861      	ldr	r0, [pc, #388]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8003ed0:	f00a fb18 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003ed4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ed8:	9301      	str	r3, [sp, #4]
 8003eda:	2300      	movs	r3, #0
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2243      	movs	r2, #67	; 0x43
 8003ee2:	21cb      	movs	r1, #203	; 0xcb
 8003ee4:	485b      	ldr	r0, [pc, #364]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8003ee6:	f7fd fe1d 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 8003eea:	4b58      	ldr	r3, [pc, #352]	; (800404c <drawCurrentStateOfLights+0x1e0>)
 8003eec:	785b      	ldrb	r3, [r3, #1]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01a      	beq.n	8003f28 <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003ef2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	2305      	movs	r3, #5
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	2315      	movs	r3, #21
 8003efe:	2221      	movs	r2, #33	; 0x21
 8003f00:	215f      	movs	r1, #95	; 0x5f
 8003f02:	20c8      	movs	r0, #200	; 0xc8
 8003f04:	f7fd fba3 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003f08:	4951      	ldr	r1, [pc, #324]	; (8004050 <drawCurrentStateOfLights+0x1e4>)
 8003f0a:	4852      	ldr	r0, [pc, #328]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8003f0c:	f00a fafa 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003f10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	2300      	movs	r3, #0
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2261      	movs	r2, #97	; 0x61
 8003f1e:	21cb      	movs	r1, #203	; 0xcb
 8003f20:	484c      	ldr	r0, [pc, #304]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8003f22:	f7fd fdff 	bl	8001b24 <EF_PutString>
 8003f26:	e019      	b.n	8003f5c <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003f28:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	2305      	movs	r3, #5
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	2315      	movs	r3, #21
 8003f34:	2221      	movs	r2, #33	; 0x21
 8003f36:	215f      	movs	r1, #95	; 0x5f
 8003f38:	20c8      	movs	r0, #200	; 0xc8
 8003f3a:	f7fd fb88 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003f3e:	4946      	ldr	r1, [pc, #280]	; (8004058 <drawCurrentStateOfLights+0x1ec>)
 8003f40:	4844      	ldr	r0, [pc, #272]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8003f42:	f00a fadf 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003f46:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2300      	movs	r3, #0
 8003f52:	2261      	movs	r2, #97	; 0x61
 8003f54:	21cb      	movs	r1, #203	; 0xcb
 8003f56:	483f      	ldr	r0, [pc, #252]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8003f58:	f7fd fde4 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 8003f5c:	4b3b      	ldr	r3, [pc, #236]	; (800404c <drawCurrentStateOfLights+0x1e0>)
 8003f5e:	789b      	ldrb	r3, [r3, #2]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01a      	beq.n	8003f9a <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003f64:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003f68:	9301      	str	r3, [sp, #4]
 8003f6a:	2305      	movs	r3, #5
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	2315      	movs	r3, #21
 8003f70:	2221      	movs	r2, #33	; 0x21
 8003f72:	217d      	movs	r1, #125	; 0x7d
 8003f74:	20c8      	movs	r0, #200	; 0xc8
 8003f76:	f7fd fb6a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003f7a:	4935      	ldr	r1, [pc, #212]	; (8004050 <drawCurrentStateOfLights+0x1e4>)
 8003f7c:	4835      	ldr	r0, [pc, #212]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8003f7e:	f00a fac1 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003f82:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f86:	9301      	str	r3, [sp, #4]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	227f      	movs	r2, #127	; 0x7f
 8003f90:	21cb      	movs	r1, #203	; 0xcb
 8003f92:	4830      	ldr	r0, [pc, #192]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8003f94:	f7fd fdc6 	bl	8001b24 <EF_PutString>
 8003f98:	e019      	b.n	8003fce <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003f9a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	2305      	movs	r3, #5
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2315      	movs	r3, #21
 8003fa6:	2221      	movs	r2, #33	; 0x21
 8003fa8:	217d      	movs	r1, #125	; 0x7d
 8003faa:	20c8      	movs	r0, #200	; 0xc8
 8003fac:	f7fd fb4f 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003fb0:	4929      	ldr	r1, [pc, #164]	; (8004058 <drawCurrentStateOfLights+0x1ec>)
 8003fb2:	4828      	ldr	r0, [pc, #160]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8003fb4:	f00a faa6 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003fb8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	227f      	movs	r2, #127	; 0x7f
 8003fc6:	21cb      	movs	r1, #203	; 0xcb
 8003fc8:	4822      	ldr	r0, [pc, #136]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8003fca:	f7fd fdab 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8003fce:	4b1f      	ldr	r3, [pc, #124]	; (800404c <drawCurrentStateOfLights+0x1e0>)
 8003fd0:	78db      	ldrb	r3, [r3, #3]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01a      	beq.n	800400c <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003fd6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	2305      	movs	r3, #5
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	2315      	movs	r3, #21
 8003fe2:	2221      	movs	r2, #33	; 0x21
 8003fe4:	219b      	movs	r1, #155	; 0x9b
 8003fe6:	20c8      	movs	r0, #200	; 0xc8
 8003fe8:	f7fd fb31 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003fec:	4918      	ldr	r1, [pc, #96]	; (8004050 <drawCurrentStateOfLights+0x1e4>)
 8003fee:	4819      	ldr	r0, [pc, #100]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8003ff0:	f00a fa88 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003ff4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	2300      	movs	r3, #0
 8004000:	229d      	movs	r2, #157	; 0x9d
 8004002:	21cb      	movs	r1, #203	; 0xcb
 8004004:	4813      	ldr	r0, [pc, #76]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8004006:	f7fd fd8d 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 800400a:	e019      	b.n	8004040 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800400c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	2305      	movs	r3, #5
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2315      	movs	r3, #21
 8004018:	2221      	movs	r2, #33	; 0x21
 800401a:	219b      	movs	r1, #155	; 0x9b
 800401c:	20c8      	movs	r0, #200	; 0xc8
 800401e:	f7fd fb16 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004022:	490d      	ldr	r1, [pc, #52]	; (8004058 <drawCurrentStateOfLights+0x1ec>)
 8004024:	480b      	ldr	r0, [pc, #44]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 8004026:	f00a fa6d 	bl	800e504 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800402a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	2300      	movs	r3, #0
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	2300      	movs	r3, #0
 8004036:	229d      	movs	r2, #157	; 0x9d
 8004038:	21cb      	movs	r1, #203	; 0xcb
 800403a:	4806      	ldr	r0, [pc, #24]	; (8004054 <drawCurrentStateOfLights+0x1e8>)
 800403c:	f7fd fd72 	bl	8001b24 <EF_PutString>
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	08013238 	.word	0x08013238
 800404c:	20000274 	.word	0x20000274
 8004050:	0801237c 	.word	0x0801237c
 8004054:	200002c4 	.word	0x200002c4
 8004058:	08012380 	.word	0x08012380

0800405c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004062:	f107 0314 	add.w	r3, r7, #20
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	609a      	str	r2, [r3, #8]
 800406e:	60da      	str	r2, [r3, #12]
 8004070:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	4b3f      	ldr	r3, [pc, #252]	; (8004174 <MX_GPIO_Init+0x118>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	4a3e      	ldr	r2, [pc, #248]	; (8004174 <MX_GPIO_Init+0x118>)
 800407c:	f043 0304 	orr.w	r3, r3, #4
 8004080:	6313      	str	r3, [r2, #48]	; 0x30
 8004082:	4b3c      	ldr	r3, [pc, #240]	; (8004174 <MX_GPIO_Init+0x118>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	4b38      	ldr	r3, [pc, #224]	; (8004174 <MX_GPIO_Init+0x118>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	4a37      	ldr	r2, [pc, #220]	; (8004174 <MX_GPIO_Init+0x118>)
 8004098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409c:	6313      	str	r3, [r2, #48]	; 0x30
 800409e:	4b35      	ldr	r3, [pc, #212]	; (8004174 <MX_GPIO_Init+0x118>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	4b31      	ldr	r3, [pc, #196]	; (8004174 <MX_GPIO_Init+0x118>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	4a30      	ldr	r2, [pc, #192]	; (8004174 <MX_GPIO_Init+0x118>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ba:	4b2e      	ldr	r3, [pc, #184]	; (8004174 <MX_GPIO_Init+0x118>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <MX_GPIO_Init+0x118>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	4a29      	ldr	r2, [pc, #164]	; (8004174 <MX_GPIO_Init+0x118>)
 80040d0:	f043 0302 	orr.w	r3, r3, #2
 80040d4:	6313      	str	r3, [r2, #48]	; 0x30
 80040d6:	4b27      	ldr	r3, [pc, #156]	; (8004174 <MX_GPIO_Init+0x118>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	607b      	str	r3, [r7, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 80040e2:	2200      	movs	r2, #0
 80040e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040e8:	4823      	ldr	r0, [pc, #140]	; (8004178 <MX_GPIO_Init+0x11c>)
 80040ea:	f003 fdbf 	bl	8007c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 80040ee:	2200      	movs	r2, #0
 80040f0:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 80040f4:	4821      	ldr	r0, [pc, #132]	; (800417c <MX_GPIO_Init+0x120>)
 80040f6:	f003 fdb9 	bl	8007c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 80040fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004100:	2301      	movs	r3, #1
 8004102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004104:	2300      	movs	r3, #0
 8004106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004108:	2300      	movs	r3, #0
 800410a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 800410c:	f107 0314 	add.w	r3, r7, #20
 8004110:	4619      	mov	r1, r3
 8004112:	4819      	ldr	r0, [pc, #100]	; (8004178 <MX_GPIO_Init+0x11c>)
 8004114:	f003 fc0e 	bl	8007934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTC_IRQ_Pin;
 8004118:	2310      	movs	r3, #16
 800411a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800411c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004122:	2301      	movs	r3, #1
 8004124:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004126:	f107 0314 	add.w	r3, r7, #20
 800412a:	4619      	mov	r1, r3
 800412c:	4814      	ldr	r0, [pc, #80]	; (8004180 <MX_GPIO_Init+0x124>)
 800412e:	f003 fc01 	bl	8007934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8004132:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004138:	2301      	movs	r3, #1
 800413a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004140:	2300      	movs	r3, #0
 8004142:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004144:	f107 0314 	add.w	r3, r7, #20
 8004148:	4619      	mov	r1, r3
 800414a:	480c      	ldr	r0, [pc, #48]	; (800417c <MX_GPIO_Init+0x120>)
 800414c:	f003 fbf2 	bl	8007934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8004150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004156:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800415a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415c:	2300      	movs	r3, #0
 800415e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004160:	f107 0314 	add.w	r3, r7, #20
 8004164:	4619      	mov	r1, r3
 8004166:	4806      	ldr	r0, [pc, #24]	; (8004180 <MX_GPIO_Init+0x124>)
 8004168:	f003 fbe4 	bl	8007934 <HAL_GPIO_Init>

}
 800416c:	bf00      	nop
 800416e:	3728      	adds	r7, #40	; 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40023800 	.word	0x40023800
 8004178:	40020800 	.word	0x40020800
 800417c:	40020400 	.word	0x40020400
 8004180:	40020000 	.word	0x40020000

08004184 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004188:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <MX_I2C1_Init+0x50>)
 800418a:	4a13      	ldr	r2, [pc, #76]	; (80041d8 <MX_I2C1_Init+0x54>)
 800418c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800418e:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <MX_I2C1_Init+0x50>)
 8004190:	4a12      	ldr	r2, [pc, #72]	; (80041dc <MX_I2C1_Init+0x58>)
 8004192:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004194:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <MX_I2C1_Init+0x50>)
 8004196:	2200      	movs	r2, #0
 8004198:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800419a:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <MX_I2C1_Init+0x50>)
 800419c:	2200      	movs	r2, #0
 800419e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <MX_I2C1_Init+0x50>)
 80041a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <MX_I2C1_Init+0x50>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <MX_I2C1_Init+0x50>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041b4:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <MX_I2C1_Init+0x50>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <MX_I2C1_Init+0x50>)
 80041bc:	2200      	movs	r2, #0
 80041be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041c0:	4804      	ldr	r0, [pc, #16]	; (80041d4 <MX_I2C1_Init+0x50>)
 80041c2:	f003 fd9f 	bl	8007d04 <HAL_I2C_Init>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80041cc:	f000 fa7c 	bl	80046c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80041d0:	bf00      	nop
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20000398 	.word	0x20000398
 80041d8:	40005400 	.word	0x40005400
 80041dc:	00061a80 	.word	0x00061a80

080041e0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <MX_I2C3_Init+0x50>)
 80041e6:	4a13      	ldr	r2, [pc, #76]	; (8004234 <MX_I2C3_Init+0x54>)
 80041e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <MX_I2C3_Init+0x50>)
 80041ec:	4a12      	ldr	r2, [pc, #72]	; (8004238 <MX_I2C3_Init+0x58>)
 80041ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <MX_I2C3_Init+0x50>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80041f6:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <MX_I2C3_Init+0x50>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <MX_I2C3_Init+0x50>)
 80041fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004202:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <MX_I2C3_Init+0x50>)
 8004206:	2200      	movs	r2, #0
 8004208:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800420a:	4b09      	ldr	r3, [pc, #36]	; (8004230 <MX_I2C3_Init+0x50>)
 800420c:	2200      	movs	r2, #0
 800420e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004210:	4b07      	ldr	r3, [pc, #28]	; (8004230 <MX_I2C3_Init+0x50>)
 8004212:	2200      	movs	r2, #0
 8004214:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004216:	4b06      	ldr	r3, [pc, #24]	; (8004230 <MX_I2C3_Init+0x50>)
 8004218:	2200      	movs	r2, #0
 800421a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800421c:	4804      	ldr	r0, [pc, #16]	; (8004230 <MX_I2C3_Init+0x50>)
 800421e:	f003 fd71 	bl	8007d04 <HAL_I2C_Init>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004228:	f000 fa4e 	bl	80046c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800422c:	bf00      	nop
 800422e:	bd80      	pop	{r7, pc}
 8004230:	200002e4 	.word	0x200002e4
 8004234:	40005c00 	.word	0x40005c00
 8004238:	000186a0 	.word	0x000186a0

0800423c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08c      	sub	sp, #48	; 0x30
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004244:	f107 031c 	add.w	r3, r7, #28
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a74      	ldr	r2, [pc, #464]	; (800442c <HAL_I2C_MspInit+0x1f0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	f040 8090 	bne.w	8004380 <HAL_I2C_MspInit+0x144>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004260:	2300      	movs	r3, #0
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	4b72      	ldr	r3, [pc, #456]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	4a71      	ldr	r2, [pc, #452]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 800426a:	f043 0302 	orr.w	r3, r3, #2
 800426e:	6313      	str	r3, [r2, #48]	; 0x30
 8004270:	4b6f      	ldr	r3, [pc, #444]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800427c:	23c0      	movs	r3, #192	; 0xc0
 800427e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004280:	2312      	movs	r3, #18
 8004282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004284:	2300      	movs	r3, #0
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004288:	2303      	movs	r3, #3
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800428c:	2304      	movs	r3, #4
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004290:	f107 031c 	add.w	r3, r7, #28
 8004294:	4619      	mov	r1, r3
 8004296:	4867      	ldr	r0, [pc, #412]	; (8004434 <HAL_I2C_MspInit+0x1f8>)
 8004298:	f003 fb4c 	bl	8007934 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	4b63      	ldr	r3, [pc, #396]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	4a62      	ldr	r2, [pc, #392]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 80042a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042aa:	6413      	str	r3, [r2, #64]	; 0x40
 80042ac:	4b60      	ldr	r3, [pc, #384]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80042b8:	4b5f      	ldr	r3, [pc, #380]	; (8004438 <HAL_I2C_MspInit+0x1fc>)
 80042ba:	4a60      	ldr	r2, [pc, #384]	; (800443c <HAL_I2C_MspInit+0x200>)
 80042bc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80042be:	4b5e      	ldr	r3, [pc, #376]	; (8004438 <HAL_I2C_MspInit+0x1fc>)
 80042c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042c4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042c6:	4b5c      	ldr	r3, [pc, #368]	; (8004438 <HAL_I2C_MspInit+0x1fc>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042cc:	4b5a      	ldr	r3, [pc, #360]	; (8004438 <HAL_I2C_MspInit+0x1fc>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042d2:	4b59      	ldr	r3, [pc, #356]	; (8004438 <HAL_I2C_MspInit+0x1fc>)
 80042d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042d8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042da:	4b57      	ldr	r3, [pc, #348]	; (8004438 <HAL_I2C_MspInit+0x1fc>)
 80042dc:	2200      	movs	r2, #0
 80042de:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042e0:	4b55      	ldr	r3, [pc, #340]	; (8004438 <HAL_I2C_MspInit+0x1fc>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80042e6:	4b54      	ldr	r3, [pc, #336]	; (8004438 <HAL_I2C_MspInit+0x1fc>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80042ec:	4b52      	ldr	r3, [pc, #328]	; (8004438 <HAL_I2C_MspInit+0x1fc>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042f2:	4b51      	ldr	r3, [pc, #324]	; (8004438 <HAL_I2C_MspInit+0x1fc>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80042f8:	484f      	ldr	r0, [pc, #316]	; (8004438 <HAL_I2C_MspInit+0x1fc>)
 80042fa:	f002 ff0b 	bl	8007114 <HAL_DMA_Init>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8004304:	f000 f9e0 	bl	80046c8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a4b      	ldr	r2, [pc, #300]	; (8004438 <HAL_I2C_MspInit+0x1fc>)
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
 800430e:	4a4a      	ldr	r2, [pc, #296]	; (8004438 <HAL_I2C_MspInit+0x1fc>)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8004314:	4b4a      	ldr	r3, [pc, #296]	; (8004440 <HAL_I2C_MspInit+0x204>)
 8004316:	4a4b      	ldr	r2, [pc, #300]	; (8004444 <HAL_I2C_MspInit+0x208>)
 8004318:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800431a:	4b49      	ldr	r3, [pc, #292]	; (8004440 <HAL_I2C_MspInit+0x204>)
 800431c:	2200      	movs	r2, #0
 800431e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004320:	4b47      	ldr	r3, [pc, #284]	; (8004440 <HAL_I2C_MspInit+0x204>)
 8004322:	2240      	movs	r2, #64	; 0x40
 8004324:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004326:	4b46      	ldr	r3, [pc, #280]	; (8004440 <HAL_I2C_MspInit+0x204>)
 8004328:	2200      	movs	r2, #0
 800432a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800432c:	4b44      	ldr	r3, [pc, #272]	; (8004440 <HAL_I2C_MspInit+0x204>)
 800432e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004332:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004334:	4b42      	ldr	r3, [pc, #264]	; (8004440 <HAL_I2C_MspInit+0x204>)
 8004336:	2200      	movs	r2, #0
 8004338:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800433a:	4b41      	ldr	r3, [pc, #260]	; (8004440 <HAL_I2C_MspInit+0x204>)
 800433c:	2200      	movs	r2, #0
 800433e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004340:	4b3f      	ldr	r3, [pc, #252]	; (8004440 <HAL_I2C_MspInit+0x204>)
 8004342:	2200      	movs	r2, #0
 8004344:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004346:	4b3e      	ldr	r3, [pc, #248]	; (8004440 <HAL_I2C_MspInit+0x204>)
 8004348:	2200      	movs	r2, #0
 800434a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800434c:	4b3c      	ldr	r3, [pc, #240]	; (8004440 <HAL_I2C_MspInit+0x204>)
 800434e:	2200      	movs	r2, #0
 8004350:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004352:	483b      	ldr	r0, [pc, #236]	; (8004440 <HAL_I2C_MspInit+0x204>)
 8004354:	f002 fede 	bl	8007114 <HAL_DMA_Init>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 800435e:	f000 f9b3 	bl	80046c8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a36      	ldr	r2, [pc, #216]	; (8004440 <HAL_I2C_MspInit+0x204>)
 8004366:	635a      	str	r2, [r3, #52]	; 0x34
 8004368:	4a35      	ldr	r2, [pc, #212]	; (8004440 <HAL_I2C_MspInit+0x204>)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800436e:	2200      	movs	r2, #0
 8004370:	2100      	movs	r1, #0
 8004372:	2020      	movs	r0, #32
 8004374:	f002 fe6d 	bl	8007052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004378:	2020      	movs	r0, #32
 800437a:	f002 fe86 	bl	800708a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800437e:	e050      	b.n	8004422 <HAL_I2C_MspInit+0x1e6>
  else if(i2cHandle->Instance==I2C3)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a30      	ldr	r2, [pc, #192]	; (8004448 <HAL_I2C_MspInit+0x20c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d14b      	bne.n	8004422 <HAL_I2C_MspInit+0x1e6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	4b28      	ldr	r3, [pc, #160]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	4a27      	ldr	r2, [pc, #156]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	6313      	str	r3, [r2, #48]	; 0x30
 800439a:	4b25      	ldr	r3, [pc, #148]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	4b21      	ldr	r3, [pc, #132]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	4a20      	ldr	r2, [pc, #128]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 80043b0:	f043 0302 	orr.w	r3, r3, #2
 80043b4:	6313      	str	r3, [r2, #48]	; 0x30
 80043b6:	4b1e      	ldr	r3, [pc, #120]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80043c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043c8:	2312      	movs	r3, #18
 80043ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d0:	2303      	movs	r3, #3
 80043d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80043d4:	2304      	movs	r3, #4
 80043d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043d8:	f107 031c 	add.w	r3, r7, #28
 80043dc:	4619      	mov	r1, r3
 80043de:	481b      	ldr	r0, [pc, #108]	; (800444c <HAL_I2C_MspInit+0x210>)
 80043e0:	f003 faa8 	bl	8007934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80043e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043ea:	2312      	movs	r3, #18
 80043ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f2:	2303      	movs	r3, #3
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80043f6:	2309      	movs	r3, #9
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043fa:	f107 031c 	add.w	r3, r7, #28
 80043fe:	4619      	mov	r1, r3
 8004400:	480c      	ldr	r0, [pc, #48]	; (8004434 <HAL_I2C_MspInit+0x1f8>)
 8004402:	f003 fa97 	bl	8007934 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	4b09      	ldr	r3, [pc, #36]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	4a08      	ldr	r2, [pc, #32]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 8004410:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004414:	6413      	str	r3, [r2, #64]	; 0x40
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_I2C_MspInit+0x1f4>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
}
 8004422:	bf00      	nop
 8004424:	3730      	adds	r7, #48	; 0x30
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40005400 	.word	0x40005400
 8004430:	40023800 	.word	0x40023800
 8004434:	40020400 	.word	0x40020400
 8004438:	200003ec 	.word	0x200003ec
 800443c:	40026010 	.word	0x40026010
 8004440:	20000338 	.word	0x20000338
 8004444:	40026028 	.word	0x40026028
 8004448:	40005c00 	.word	0x40005c00
 800444c:	40020000 	.word	0x40020000

08004450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004456:	f002 fc27 	bl	8006ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800445a:	f000 f857 	bl	800450c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800445e:	f7ff fdfd 	bl	800405c <MX_GPIO_Init>
  MX_SPI1_Init();
 8004462:	f001 fe65 	bl	8006130 <MX_SPI1_Init>
  MX_DMA_Init();
 8004466:	f7fe f845 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800446a:	f002 fb1d 	bl	8006aa8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800446e:	f001 fe95 	bl	800619c <MX_SPI3_Init>
  MX_I2C1_Init();
 8004472:	f7ff fe87 	bl	8004184 <MX_I2C1_Init>
  MX_TIM11_Init();
 8004476:	f002 f90b 	bl	8006690 <MX_TIM11_Init>
  MX_TIM10_Init();
 800447a:	f002 f8e5 	bl	8006648 <MX_TIM10_Init>
  MX_I2C3_Init();
 800447e:	f7ff feaf 	bl	80041e0 <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8004482:	f000 f8ab 	bl	80045dc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 8004486:	481b      	ldr	r0, [pc, #108]	; (80044f4 <main+0xa4>)
 8004488:	f007 fdec 	bl	800c064 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 800448c:	481a      	ldr	r0, [pc, #104]	; (80044f8 <main+0xa8>)
 800448e:	f7fd fd91 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8004492:	491a      	ldr	r1, [pc, #104]	; (80044fc <main+0xac>)
 8004494:	481a      	ldr	r0, [pc, #104]	; (8004500 <main+0xb0>)
 8004496:	f002 fab8 	bl	8006a0a <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 800449a:	2117      	movs	r1, #23
 800449c:	4819      	ldr	r0, [pc, #100]	; (8004504 <main+0xb4>)
 800449e:	f7fd ffd9 	bl	8002454 <XPT2046_Init>
  // RTC Initialization
  DS3231_Init(&hi2c1);
 80044a2:	4819      	ldr	r0, [pc, #100]	; (8004508 <main+0xb8>)
 80044a4:	f7fe f85e 	bl	8002564 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80044a8:	2001      	movs	r0, #1
 80044aa:	f7fe f8b5 	bl	8002618 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 80044ae:	2001      	movs	r0, #1
 80044b0:	f7fe f8d2 	bl	8002658 <DS3231_EnableOscillator>


  uint8_t result = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	71fb      	strb	r3, [r7, #7]
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 80044b8:	e001      	b.n	80044be <main+0x6e>
  Error_Handler();
 80044ba:	f000 f905 	bl	80046c8 <Error_Handler>
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 80044be:	1dfb      	adds	r3, r7, #7
 80044c0:	2201      	movs	r2, #1
 80044c2:	4619      	mov	r1, r3
 80044c4:	2001      	movs	r0, #1
 80044c6:	f7fe f9f5 	bl	80028b4 <eeprom_read>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f4      	bne.n	80044ba <main+0x6a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80044d0:	480b      	ldr	r0, [pc, #44]	; (8004500 <main+0xb0>)
 80044d2:	f002 fa4e 	bl	8006972 <UARTDMA_IsDataReceivedReady>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <main+0x92>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 80044dc:	4808      	ldr	r0, [pc, #32]	; (8004500 <main+0xb0>)
 80044de:	f001 f9a5 	bl	800582c <UART_ParseLine>
	  }

	  //
	  // TRANSMIT
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 80044e2:	4807      	ldr	r0, [pc, #28]	; (8004500 <main+0xb0>)
 80044e4:	f002 fa57 	bl	8006996 <UARTDMA_TransmitEvent>

	  //
	  // TOUCH
	  //
	  XPT2046_Task();
 80044e8:	f7fd fee2 	bl	80022b0 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  MenuTFT();
 80044ec:	f000 f8f2 	bl	80046d4 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80044f0:	e7ee      	b.n	80044d0 <main+0x80>
 80044f2:	bf00      	nop
 80044f4:	2000069c 	.word	0x2000069c
 80044f8:	200005fc 	.word	0x200005fc
 80044fc:	200007a4 	.word	0x200007a4
 8004500:	2000044c 	.word	0x2000044c
 8004504:	200005a4 	.word	0x200005a4
 8004508:	20000398 	.word	0x20000398

0800450c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b094      	sub	sp, #80	; 0x50
 8004510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004512:	f107 0320 	add.w	r3, r7, #32
 8004516:	2230      	movs	r2, #48	; 0x30
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f009 f96a 	bl	800d7f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004520:	f107 030c 	add.w	r3, r7, #12
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	60da      	str	r2, [r3, #12]
 800452e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004530:	2300      	movs	r3, #0
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <SystemClock_Config+0xc8>)
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	4a26      	ldr	r2, [pc, #152]	; (80045d4 <SystemClock_Config+0xc8>)
 800453a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453e:	6413      	str	r3, [r2, #64]	; 0x40
 8004540:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <SystemClock_Config+0xc8>)
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800454c:	2300      	movs	r3, #0
 800454e:	607b      	str	r3, [r7, #4]
 8004550:	4b21      	ldr	r3, [pc, #132]	; (80045d8 <SystemClock_Config+0xcc>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a20      	ldr	r2, [pc, #128]	; (80045d8 <SystemClock_Config+0xcc>)
 8004556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <SystemClock_Config+0xcc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004564:	607b      	str	r3, [r7, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004568:	2301      	movs	r3, #1
 800456a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800456c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004572:	2302      	movs	r3, #2
 8004574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800457c:	230c      	movs	r3, #12
 800457e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8004580:	2360      	movs	r3, #96	; 0x60
 8004582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004584:	2302      	movs	r3, #2
 8004586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004588:	2304      	movs	r3, #4
 800458a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800458c:	f107 0320 	add.w	r3, r7, #32
 8004590:	4618      	mov	r0, r3
 8004592:	f006 fcbb 	bl	800af0c <HAL_RCC_OscConfig>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800459c:	f000 f894 	bl	80046c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045a0:	230f      	movs	r3, #15
 80045a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045a4:	2302      	movs	r3, #2
 80045a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80045b6:	f107 030c 	add.w	r3, r7, #12
 80045ba:	2103      	movs	r1, #3
 80045bc:	4618      	mov	r0, r3
 80045be:	f006 ff1d 	bl	800b3fc <HAL_RCC_ClockConfig>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80045c8:	f000 f87e 	bl	80046c8 <Error_Handler>
  }
}
 80045cc:	bf00      	nop
 80045ce:	3750      	adds	r7, #80	; 0x50
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40007000 	.word	0x40007000

080045dc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80045e0:	2200      	movs	r2, #0
 80045e2:	2100      	movs	r1, #0
 80045e4:	200a      	movs	r0, #10
 80045e6:	f002 fd34 	bl	8007052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80045ea:	200a      	movs	r0, #10
 80045ec:	f002 fd4d 	bl	800708a <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80045f0:	2200      	movs	r2, #0
 80045f2:	2100      	movs	r1, #0
 80045f4:	2017      	movs	r0, #23
 80045f6:	f002 fd2c 	bl	8007052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80045fa:	2017      	movs	r0, #23
 80045fc:	f002 fd45 	bl	800708a <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004600:	2200      	movs	r2, #0
 8004602:	2100      	movs	r1, #0
 8004604:	201f      	movs	r0, #31
 8004606:	f002 fd24 	bl	8007052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800460a:	201f      	movs	r0, #31
 800460c:	f002 fd3d 	bl	800708a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004610:	2200      	movs	r2, #0
 8004612:	2100      	movs	r1, #0
 8004614:	2026      	movs	r0, #38	; 0x26
 8004616:	f002 fd1c 	bl	8007052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800461a:	2026      	movs	r0, #38	; 0x26
 800461c:	f002 fd35 	bl	800708a <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004620:	2200      	movs	r2, #0
 8004622:	2100      	movs	r1, #0
 8004624:	2033      	movs	r0, #51	; 0x33
 8004626:	f002 fd14 	bl	8007052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800462a:	2033      	movs	r0, #51	; 0x33
 800462c:	f002 fd2d 	bl	800708a <HAL_NVIC_EnableIRQ>
}
 8004630:	bf00      	nop
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a12      	ldr	r2, [pc, #72]	; (800468c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen();
 8004646:	f7ff fa21 	bl	8003a8c <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a10      	ldr	r2, [pc, #64]	; (8004690 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d117      	bne.n	8004684 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S)
 8004654:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b04      	cmp	r3, #4
 800465a:	d90d      	bls.n	8004678 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin);
 800465c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004660:	480d      	ldr	r0, [pc, #52]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8004662:	f003 fb1c 	bl	8007c9e <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8004666:	2000      	movs	r0, #0
 8004668:	f7ff fabc 	bl	8003be4 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8004672:	480a      	ldr	r0, [pc, #40]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004674:	f007 fd58 	bl	800c128 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	3301      	adds	r3, #1
 800467e:	b2da      	uxtb	r2, r3
 8004680:	4b04      	ldr	r3, [pc, #16]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8004682:	701a      	strb	r2, [r3, #0]
	}
}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40014800 	.word	0x40014800
 8004690:	40014400 	.word	0x40014400
 8004694:	2000024e 	.word	0x2000024e
 8004698:	40020800 	.word	0x40020800
 800469c:	20000654 	.word	0x20000654

080046a0 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin)
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b0:	d101      	bne.n	80046b6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 80046b2:	f7fd fec3 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == RTC_IRQ_Pin) // Interrupt from RTC - alarm one per minute
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d101      	bne.n	80046c0 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 80046bc:	f7fe f810 	bl	80026e0 <DS3231_ClearAlarm2Flag>

	}
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046cc:	b672      	cpsid	i
}
 80046ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046d0:	e7fe      	b.n	80046d0 <Error_Handler+0x8>
	...

080046d4 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
	switch(State)
 80046d8:	4b3e      	ldr	r3, [pc, #248]	; (80047d4 <MenuTFT+0x100>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b06      	cmp	r3, #6
 80046de:	d876      	bhi.n	80047ce <MenuTFT+0xfa>
 80046e0:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <MenuTFT+0x14>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	08004705 	.word	0x08004705
 80046ec:	08004717 	.word	0x08004717
 80046f0:	0800474b 	.word	0x0800474b
 80046f4:	0800477b 	.word	0x0800477b
 80046f8:	08004799 	.word	0x08004799
 80046fc:	08004763 	.word	0x08004763
 8004700:	080047b1 	.word	0x080047b1
	{
	case MENUTFT_INIT:
		system_init();
 8004704:	f7fe f98c 	bl	8002a20 <system_init>
		State = MENUTFT_PARAMETERS;
 8004708:	4b32      	ldr	r3, [pc, #200]	; (80047d4 <MenuTFT+0x100>)
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 800470e:	4b32      	ldr	r3, [pc, #200]	; (80047d8 <MenuTFT+0x104>)
 8004710:	2201      	movs	r2, #1
 8004712:	701a      	strb	r2, [r3, #0]
		break;
 8004714:	e05b      	b.n	80047ce <MenuTFT+0xfa>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8004716:	4b30      	ldr	r3, [pc, #192]	; (80047d8 <MenuTFT+0x104>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d112      	bne.n	8004744 <MenuTFT+0x70>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 800471e:	4b2f      	ldr	r3, [pc, #188]	; (80047dc <MenuTFT+0x108>)
 8004720:	edd3 7a00 	vldr	s15, [r3]
 8004724:	4b2e      	ldr	r3, [pc, #184]	; (80047e0 <MenuTFT+0x10c>)
 8004726:	ed93 7a00 	vldr	s14, [r3]
 800472a:	eeb0 1a47 	vmov.f32	s2, s14
 800472e:	2100      	movs	r1, #0
 8004730:	2000      	movs	r0, #0
 8004732:	eddf 0a2c 	vldr	s1, [pc, #176]	; 80047e4 <MenuTFT+0x110>
 8004736:	eeb0 0a67 	vmov.f32	s0, s15
 800473a:	f7fe fa69 	bl	8002c10 <showCurrentParameters>
			StateChangeFlag = 0;
 800473e:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <MenuTFT+0x104>)
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8004744:	f000 f854 	bl	80047f0 <TouchParametersActivity>
		break;
 8004748:	e041      	b.n	80047ce <MenuTFT+0xfa>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 800474a:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <MenuTFT+0x104>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d104      	bne.n	800475c <MenuTFT+0x88>
		{
			showControlPanel();
 8004752:	f7fe fba7 	bl	8002ea4 <showControlPanel>
			StateChangeFlag = 0;
 8004756:	4b20      	ldr	r3, [pc, #128]	; (80047d8 <MenuTFT+0x104>)
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 800475c:	f000 f8a8 	bl	80048b0 <TouchSwitchActivity>
		break;
 8004760:	e035      	b.n	80047ce <MenuTFT+0xfa>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <MenuTFT+0x104>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d104      	bne.n	8004774 <MenuTFT+0xa0>
		{
			showLightsControlPanel();
 800476a:	f7fe fc75 	bl	8003058 <showLightsControlPanel>
			StateChangeFlag = 0;
 800476e:	4b1a      	ldr	r3, [pc, #104]	; (80047d8 <MenuTFT+0x104>)
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 8004774:	f000 fa84 	bl	8004c80 <TouchLightsActivity>
		break;
 8004778:	e029      	b.n	80047ce <MenuTFT+0xfa>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 800477a:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <MenuTFT+0x104>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d107      	bne.n	8004792 <MenuTFT+0xbe>
		{
			showClockSetPanel();
 8004782:	f7fe fd41 	bl	8003208 <showClockSetPanel>
			ClockChangeFlag = 1;
 8004786:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <MenuTFT+0x114>)
 8004788:	2201      	movs	r2, #1
 800478a:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 800478c:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <MenuTFT+0x104>)
 800478e:	2200      	movs	r2, #0
 8004790:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8004792:	f000 fc29 	bl	8004fe8 <TouchClockActivity>
		break;
 8004796:	e01a      	b.n	80047ce <MenuTFT+0xfa>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <MenuTFT+0x104>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d104      	bne.n	80047aa <MenuTFT+0xd6>
		{
			showPreparedActivitiesPanel();
 80047a0:	f7fe fe4a 	bl	8003438 <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 80047a4:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <MenuTFT+0x104>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 80047aa:	f000 fd6b 	bl	8005284 <TouchPredefinedActivityActivity>
		break;
 80047ae:	e00e      	b.n	80047ce <MenuTFT+0xfa>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 80047b0:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <MenuTFT+0x104>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d107      	bne.n	80047c8 <MenuTFT+0xf4>
		{
			showWSLedPanel();
 80047b8:	f7fe ff4e 	bl	8003658 <showWSLedPanel>
			WSLedChangeFlag = 1;
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <MenuTFT+0x118>)
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80047c2:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <MenuTFT+0x104>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 80047c8:	f000 fe84 	bl	80054d4 <TouchWSLedActivity>
		break;
 80047cc:	bf00      	nop
	}
}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000258 	.word	0x20000258
 80047d8:	2000024f 	.word	0x2000024f
 80047dc:	2000025c 	.word	0x2000025c
 80047e0:	20000264 	.word	0x20000264
 80047e4:	00000000 	.word	0x00000000
 80047e8:	20000250 	.word	0x20000250
 80047ec:	20000251 	.word	0x20000251

080047f0 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80047f6:	f7fd fd49 	bl	800228c <XPT2046_IsTouched>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d04c      	beq.n	800489a <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004800:	f002 fab8 	bl	8006d74 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	4b27      	ldr	r3, [pc, #156]	; (80048a4 <TouchParametersActivity+0xb4>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004810:	d343      	bcc.n	800489a <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004812:	1d3a      	adds	r2, r7, #4
 8004814:	1dbb      	adds	r3, r7, #6
 8004816:	4611      	mov	r1, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f7fd fcf9 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	2b09      	cmp	r3, #9
 8004822:	d90f      	bls.n	8004844 <TouchParametersActivity+0x54>
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	2b6e      	cmp	r3, #110	; 0x6e
 8004828:	d80c      	bhi.n	8004844 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800482a:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800482c:	2bd7      	cmp	r3, #215	; 0xd7
 800482e:	d909      	bls.n	8004844 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004830:	88bb      	ldrh	r3, [r7, #4]
 8004832:	2bec      	cmp	r3, #236	; 0xec
 8004834:	d806      	bhi.n	8004844 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 8004836:	4b1c      	ldr	r3, [pc, #112]	; (80048a8 <TouchParametersActivity+0xb8>)
 8004838:	2205      	movs	r2, #5
 800483a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800483c:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <TouchParametersActivity+0xbc>)
 800483e:	2201      	movs	r2, #1
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	e025      	b.n	8004890 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	2bdb      	cmp	r3, #219	; 0xdb
 8004848:	d910      	bls.n	800486c <TouchParametersActivity+0x7c>
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004850:	d20c      	bcs.n	800486c <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004852:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004854:	2bd7      	cmp	r3, #215	; 0xd7
 8004856:	d909      	bls.n	800486c <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004858:	88bb      	ldrh	r3, [r7, #4]
 800485a:	2bec      	cmp	r3, #236	; 0xec
 800485c:	d806      	bhi.n	800486c <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <TouchParametersActivity+0xb8>)
 8004860:	2202      	movs	r2, #2
 8004862:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004864:	4b11      	ldr	r3, [pc, #68]	; (80048ac <TouchParametersActivity+0xbc>)
 8004866:	2201      	movs	r2, #1
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	e011      	b.n	8004890 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	2b77      	cmp	r3, #119	; 0x77
 8004870:	d90e      	bls.n	8004890 <TouchParametersActivity+0xa0>
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	2bd2      	cmp	r3, #210	; 0xd2
 8004876:	d80b      	bhi.n	8004890 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004878:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800487a:	2bd7      	cmp	r3, #215	; 0xd7
 800487c:	d908      	bls.n	8004890 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800487e:	88bb      	ldrh	r3, [r7, #4]
 8004880:	2bec      	cmp	r3, #236	; 0xec
 8004882:	d805      	bhi.n	8004890 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8004884:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <TouchParametersActivity+0xb8>)
 8004886:	2203      	movs	r2, #3
 8004888:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800488a:	4b08      	ldr	r3, [pc, #32]	; (80048ac <TouchParametersActivity+0xbc>)
 800488c:	2201      	movs	r2, #1
 800488e:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8004890:	f002 fa70 	bl	8006d74 <HAL_GetTick>
 8004894:	4603      	mov	r3, r0
 8004896:	4a03      	ldr	r2, [pc, #12]	; (80048a4 <TouchParametersActivity+0xb4>)
 8004898:	6013      	str	r3, [r2, #0]
		}
	}
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000254 	.word	0x20000254
 80048a8:	20000258 	.word	0x20000258
 80048ac:	2000024f 	.word	0x2000024f

080048b0 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80048b6:	f7fd fce9 	bl	800228c <XPT2046_IsTouched>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 81ce 	beq.w	8004c5e <TouchSwitchActivity+0x3ae>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80048c2:	f002 fa57 	bl	8006d74 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	4bad      	ldr	r3, [pc, #692]	; (8004b80 <TouchSwitchActivity+0x2d0>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048d2:	f0c0 81c4 	bcc.w	8004c5e <TouchSwitchActivity+0x3ae>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80048d6:	1d3a      	adds	r2, r7, #4
 80048d8:	1dbb      	adds	r3, r7, #6
 80048da:	4611      	mov	r1, r2
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fd fc97 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	2b09      	cmp	r3, #9
 80048e6:	d90f      	bls.n	8004908 <TouchSwitchActivity+0x58>
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	2b6e      	cmp	r3, #110	; 0x6e
 80048ec:	d80c      	bhi.n	8004908 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80048ee:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80048f0:	2bd7      	cmp	r3, #215	; 0xd7
 80048f2:	d909      	bls.n	8004908 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80048f4:	88bb      	ldrh	r3, [r7, #4]
 80048f6:	2bec      	cmp	r3, #236	; 0xec
 80048f8:	d806      	bhi.n	8004908 <TouchSwitchActivity+0x58>
			{
				State = MENUTFT_PARAMETERS;
 80048fa:	4ba2      	ldr	r3, [pc, #648]	; (8004b84 <TouchSwitchActivity+0x2d4>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004900:	4ba1      	ldr	r3, [pc, #644]	; (8004b88 <TouchSwitchActivity+0x2d8>)
 8004902:	2201      	movs	r2, #1
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	e1a5      	b.n	8004c54 <TouchSwitchActivity+0x3a4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	2bdb      	cmp	r3, #219	; 0xdb
 800490c:	d910      	bls.n	8004930 <TouchSwitchActivity+0x80>
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004914:	d20c      	bcs.n	8004930 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004916:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004918:	2bd7      	cmp	r3, #215	; 0xd7
 800491a:	d909      	bls.n	8004930 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800491c:	88bb      	ldrh	r3, [r7, #4]
 800491e:	2bec      	cmp	r3, #236	; 0xec
 8004920:	d806      	bhi.n	8004930 <TouchSwitchActivity+0x80>
			{
				State = MENUTFT_LIGHTS;
 8004922:	4b98      	ldr	r3, [pc, #608]	; (8004b84 <TouchSwitchActivity+0x2d4>)
 8004924:	2205      	movs	r2, #5
 8004926:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004928:	4b97      	ldr	r3, [pc, #604]	; (8004b88 <TouchSwitchActivity+0x2d8>)
 800492a:	2201      	movs	r2, #1
 800492c:	701a      	strb	r2, [r3, #0]
 800492e:	e191      	b.n	8004c54 <TouchSwitchActivity+0x3a4>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b77      	cmp	r3, #119	; 0x77
 8004934:	d90f      	bls.n	8004956 <TouchSwitchActivity+0xa6>
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	2bd2      	cmp	r3, #210	; 0xd2
 800493a:	d80c      	bhi.n	8004956 <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800493c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800493e:	2bd7      	cmp	r3, #215	; 0xd7
 8004940:	d909      	bls.n	8004956 <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004942:	88bb      	ldrh	r3, [r7, #4]
 8004944:	2bec      	cmp	r3, #236	; 0xec
 8004946:	d806      	bhi.n	8004956 <TouchSwitchActivity+0xa6>
			{
				State = MENUTFT_ACTIVITIES;
 8004948:	4b8e      	ldr	r3, [pc, #568]	; (8004b84 <TouchSwitchActivity+0x2d4>)
 800494a:	2204      	movs	r2, #4
 800494c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800494e:	4b8e      	ldr	r3, [pc, #568]	; (8004b88 <TouchSwitchActivity+0x2d8>)
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
 8004954:	e17e      	b.n	8004c54 <TouchSwitchActivity+0x3a4>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800495c:	f0c0 817a 	bcc.w	8004c54 <TouchSwitchActivity+0x3a4>
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8004966:	f080 8175 	bcs.w	8004c54 <TouchSwitchActivity+0x3a4>
			{
				EF_SetFont(&arial_11ptFontInfo);
 800496a:	4888      	ldr	r0, [pc, #544]	; (8004b8c <TouchSwitchActivity+0x2dc>)
 800496c:	f7fc fec0 	bl	80016f0 <EF_SetFont>
				//
				// FIRST SWITCH
				if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8004970:	88bb      	ldrh	r3, [r7, #4]
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d954      	bls.n	8004a20 <TouchSwitchActivity+0x170>
 8004976:	88bb      	ldrh	r3, [r7, #4]
 8004978:	2b56      	cmp	r3, #86	; 0x56
 800497a:	d851      	bhi.n	8004a20 <TouchSwitchActivity+0x170>
				{
					if(SwitchesButtonState[0] >= 1) // if is ON
 800497c:	4b84      	ldr	r3, [pc, #528]	; (8004b90 <TouchSwitchActivity+0x2e0>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d026      	beq.n	80049d2 <TouchSwitchActivity+0x122>
					{
						SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8004984:	2006      	movs	r0, #6
 8004986:	f001 f9e5 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800498a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	2305      	movs	r3, #5
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	2315      	movs	r3, #21
 8004996:	2221      	movs	r2, #33	; 0x21
 8004998:	2141      	movs	r1, #65	; 0x41
 800499a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800499e:	f7fc fe56 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 80049a2:	497c      	ldr	r1, [pc, #496]	; (8004b94 <TouchSwitchActivity+0x2e4>)
 80049a4:	487c      	ldr	r0, [pc, #496]	; (8004b98 <TouchSwitchActivity+0x2e8>)
 80049a6:	f009 fdad 	bl	800e504 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80049aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80049ae:	9301      	str	r3, [sp, #4]
 80049b0:	2300      	movs	r3, #0
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	2300      	movs	r3, #0
 80049b6:	2243      	movs	r2, #67	; 0x43
 80049b8:	f240 1111 	movw	r1, #273	; 0x111
 80049bc:	4876      	ldr	r0, [pc, #472]	; (8004b98 <TouchSwitchActivity+0x2e8>)
 80049be:	f7fd f8b1 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 0;
 80049c2:	4b73      	ldr	r3, [pc, #460]	; (8004b90 <TouchSwitchActivity+0x2e0>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
						EEPROM_RelayStateUpdate(1, 0);
 80049c8:	2100      	movs	r1, #0
 80049ca:	2001      	movs	r0, #1
 80049cc:	f7fd ffb8 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[0] >= 1) // if is ON
 80049d0:	e13d      	b.n	8004c4e <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 80049d2:	2005      	movs	r0, #5
 80049d4:	f001 f9be 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80049d8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	2305      	movs	r3, #5
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	2315      	movs	r3, #21
 80049e4:	2221      	movs	r2, #33	; 0x21
 80049e6:	2141      	movs	r1, #65	; 0x41
 80049e8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80049ec:	f7fc fe2f 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 80049f0:	496a      	ldr	r1, [pc, #424]	; (8004b9c <TouchSwitchActivity+0x2ec>)
 80049f2:	4869      	ldr	r0, [pc, #420]	; (8004b98 <TouchSwitchActivity+0x2e8>)
 80049f4:	f009 fd86 	bl	800e504 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80049f8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	2300      	movs	r3, #0
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	2243      	movs	r2, #67	; 0x43
 8004a06:	f240 1111 	movw	r1, #273	; 0x111
 8004a0a:	4863      	ldr	r0, [pc, #396]	; (8004b98 <TouchSwitchActivity+0x2e8>)
 8004a0c:	f7fd f88a 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 1;
 8004a10:	4b5f      	ldr	r3, [pc, #380]	; (8004b90 <TouchSwitchActivity+0x2e0>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]
						EEPROM_RelayStateUpdate(1, 1);
 8004a16:	2101      	movs	r1, #1
 8004a18:	2001      	movs	r0, #1
 8004a1a:	f7fd ff91 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[0] >= 1) // if is ON
 8004a1e:	e116      	b.n	8004c4e <TouchSwitchActivity+0x39e>
					}

				}
				//
				// SECOND SWITCH
				else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8004a20:	88bb      	ldrh	r3, [r7, #4]
 8004a22:	2b5e      	cmp	r3, #94	; 0x5e
 8004a24:	d954      	bls.n	8004ad0 <TouchSwitchActivity+0x220>
 8004a26:	88bb      	ldrh	r3, [r7, #4]
 8004a28:	2b74      	cmp	r3, #116	; 0x74
 8004a2a:	d851      	bhi.n	8004ad0 <TouchSwitchActivity+0x220>
				{
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004a2c:	4b58      	ldr	r3, [pc, #352]	; (8004b90 <TouchSwitchActivity+0x2e0>)
 8004a2e:	785b      	ldrb	r3, [r3, #1]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d026      	beq.n	8004a82 <TouchSwitchActivity+0x1d2>
					{
						SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8004a34:	2008      	movs	r0, #8
 8004a36:	f001 f98d 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004a3a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	2305      	movs	r3, #5
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	2315      	movs	r3, #21
 8004a46:	2221      	movs	r2, #33	; 0x21
 8004a48:	215f      	movs	r1, #95	; 0x5f
 8004a4a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004a4e:	f7fc fdfe 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004a52:	4950      	ldr	r1, [pc, #320]	; (8004b94 <TouchSwitchActivity+0x2e4>)
 8004a54:	4850      	ldr	r0, [pc, #320]	; (8004b98 <TouchSwitchActivity+0x2e8>)
 8004a56:	f009 fd55 	bl	800e504 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004a5a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	2300      	movs	r3, #0
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	2300      	movs	r3, #0
 8004a66:	2261      	movs	r2, #97	; 0x61
 8004a68:	f240 1111 	movw	r1, #273	; 0x111
 8004a6c:	484a      	ldr	r0, [pc, #296]	; (8004b98 <TouchSwitchActivity+0x2e8>)
 8004a6e:	f7fd f859 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 0;
 8004a72:	4b47      	ldr	r3, [pc, #284]	; (8004b90 <TouchSwitchActivity+0x2e0>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	705a      	strb	r2, [r3, #1]
						EEPROM_RelayStateUpdate(2, 0);
 8004a78:	2100      	movs	r1, #0
 8004a7a:	2002      	movs	r0, #2
 8004a7c:	f7fd ff60 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004a80:	e0e5      	b.n	8004c4e <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8004a82:	2007      	movs	r0, #7
 8004a84:	f001 f966 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004a88:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	2305      	movs	r3, #5
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	2315      	movs	r3, #21
 8004a94:	2221      	movs	r2, #33	; 0x21
 8004a96:	215f      	movs	r1, #95	; 0x5f
 8004a98:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004a9c:	f7fc fdd7 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004aa0:	493e      	ldr	r1, [pc, #248]	; (8004b9c <TouchSwitchActivity+0x2ec>)
 8004aa2:	483d      	ldr	r0, [pc, #244]	; (8004b98 <TouchSwitchActivity+0x2e8>)
 8004aa4:	f009 fd2e 	bl	800e504 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004aa8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	2261      	movs	r2, #97	; 0x61
 8004ab6:	f240 1111 	movw	r1, #273	; 0x111
 8004aba:	4837      	ldr	r0, [pc, #220]	; (8004b98 <TouchSwitchActivity+0x2e8>)
 8004abc:	f7fd f832 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 1;
 8004ac0:	4b33      	ldr	r3, [pc, #204]	; (8004b90 <TouchSwitchActivity+0x2e0>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	705a      	strb	r2, [r3, #1]
						EEPROM_RelayStateUpdate(2, 1);
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	2002      	movs	r0, #2
 8004aca:	f7fd ff39 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004ace:	e0be      	b.n	8004c4e <TouchSwitchActivity+0x39e>
					}
				}
				//
				// THIRD SWITCH
				else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8004ad0:	88bb      	ldrh	r3, [r7, #4]
 8004ad2:	2b7c      	cmp	r3, #124	; 0x7c
 8004ad4:	d964      	bls.n	8004ba0 <TouchSwitchActivity+0x2f0>
 8004ad6:	88bb      	ldrh	r3, [r7, #4]
 8004ad8:	2b92      	cmp	r3, #146	; 0x92
 8004ada:	d861      	bhi.n	8004ba0 <TouchSwitchActivity+0x2f0>
				{
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004adc:	4b2c      	ldr	r3, [pc, #176]	; (8004b90 <TouchSwitchActivity+0x2e0>)
 8004ade:	789b      	ldrb	r3, [r3, #2]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d026      	beq.n	8004b32 <TouchSwitchActivity+0x282>
					{
						SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8004ae4:	200a      	movs	r0, #10
 8004ae6:	f001 f935 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004aea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	2305      	movs	r3, #5
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	2315      	movs	r3, #21
 8004af6:	2221      	movs	r2, #33	; 0x21
 8004af8:	217d      	movs	r1, #125	; 0x7d
 8004afa:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004afe:	f7fc fda6 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004b02:	4924      	ldr	r1, [pc, #144]	; (8004b94 <TouchSwitchActivity+0x2e4>)
 8004b04:	4824      	ldr	r0, [pc, #144]	; (8004b98 <TouchSwitchActivity+0x2e8>)
 8004b06:	f009 fcfd 	bl	800e504 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004b0a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	2300      	movs	r3, #0
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	2300      	movs	r3, #0
 8004b16:	227f      	movs	r2, #127	; 0x7f
 8004b18:	f240 1111 	movw	r1, #273	; 0x111
 8004b1c:	481e      	ldr	r0, [pc, #120]	; (8004b98 <TouchSwitchActivity+0x2e8>)
 8004b1e:	f7fd f801 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 0;
 8004b22:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <TouchSwitchActivity+0x2e0>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	709a      	strb	r2, [r3, #2]
						EEPROM_RelayStateUpdate(3, 0);
 8004b28:	2100      	movs	r1, #0
 8004b2a:	2003      	movs	r0, #3
 8004b2c:	f7fd ff08 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004b30:	e08d      	b.n	8004c4e <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8004b32:	2009      	movs	r0, #9
 8004b34:	f001 f90e 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004b38:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	2305      	movs	r3, #5
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	2315      	movs	r3, #21
 8004b44:	2221      	movs	r2, #33	; 0x21
 8004b46:	217d      	movs	r1, #125	; 0x7d
 8004b48:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004b4c:	f7fc fd7f 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004b50:	4912      	ldr	r1, [pc, #72]	; (8004b9c <TouchSwitchActivity+0x2ec>)
 8004b52:	4811      	ldr	r0, [pc, #68]	; (8004b98 <TouchSwitchActivity+0x2e8>)
 8004b54:	f009 fcd6 	bl	800e504 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004b58:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	2300      	movs	r3, #0
 8004b64:	227f      	movs	r2, #127	; 0x7f
 8004b66:	f240 1111 	movw	r1, #273	; 0x111
 8004b6a:	480b      	ldr	r0, [pc, #44]	; (8004b98 <TouchSwitchActivity+0x2e8>)
 8004b6c:	f7fc ffda 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 1;
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <TouchSwitchActivity+0x2e0>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	709a      	strb	r2, [r3, #2]
						EEPROM_RelayStateUpdate(3, 1);
 8004b76:	2101      	movs	r1, #1
 8004b78:	2003      	movs	r0, #3
 8004b7a:	f7fd fee1 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004b7e:	e066      	b.n	8004c4e <TouchSwitchActivity+0x39e>
 8004b80:	20000254 	.word	0x20000254
 8004b84:	20000258 	.word	0x20000258
 8004b88:	2000024f 	.word	0x2000024f
 8004b8c:	08013238 	.word	0x08013238
 8004b90:	20000270 	.word	0x20000270
 8004b94:	08012408 	.word	0x08012408
 8004b98:	200002c4 	.word	0x200002c4
 8004b9c:	0801240c 	.word	0x0801240c
					}
				}
				//
				// FOURTH SWITCH
				else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8004ba0:	88bb      	ldrh	r3, [r7, #4]
 8004ba2:	2b9a      	cmp	r3, #154	; 0x9a
 8004ba4:	d953      	bls.n	8004c4e <TouchSwitchActivity+0x39e>
 8004ba6:	88bb      	ldrh	r3, [r7, #4]
 8004ba8:	2bb0      	cmp	r3, #176	; 0xb0
 8004baa:	d850      	bhi.n	8004c4e <TouchSwitchActivity+0x39e>
				{
					if(SwitchesButtonState[3] >= 1) // if is ON
 8004bac:	4b2e      	ldr	r3, [pc, #184]	; (8004c68 <TouchSwitchActivity+0x3b8>)
 8004bae:	78db      	ldrb	r3, [r3, #3]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d026      	beq.n	8004c02 <TouchSwitchActivity+0x352>
					{
						SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8004bb4:	200c      	movs	r0, #12
 8004bb6:	f001 f8cd 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004bba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	2305      	movs	r3, #5
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2315      	movs	r3, #21
 8004bc6:	2221      	movs	r2, #33	; 0x21
 8004bc8:	219b      	movs	r1, #155	; 0x9b
 8004bca:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004bce:	f7fc fd3e 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004bd2:	4926      	ldr	r1, [pc, #152]	; (8004c6c <TouchSwitchActivity+0x3bc>)
 8004bd4:	4826      	ldr	r0, [pc, #152]	; (8004c70 <TouchSwitchActivity+0x3c0>)
 8004bd6:	f009 fc95 	bl	800e504 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004bda:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	2300      	movs	r3, #0
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	2300      	movs	r3, #0
 8004be6:	229d      	movs	r2, #157	; 0x9d
 8004be8:	f240 1111 	movw	r1, #273	; 0x111
 8004bec:	4820      	ldr	r0, [pc, #128]	; (8004c70 <TouchSwitchActivity+0x3c0>)
 8004bee:	f7fc ff99 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 0;
 8004bf2:	4b1d      	ldr	r3, [pc, #116]	; (8004c68 <TouchSwitchActivity+0x3b8>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	70da      	strb	r2, [r3, #3]
						EEPROM_RelayStateUpdate(4, 0);
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	2004      	movs	r0, #4
 8004bfc:	f7fd fea0 	bl	8002940 <EEPROM_RelayStateUpdate>
 8004c00:	e025      	b.n	8004c4e <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8004c02:	200b      	movs	r0, #11
 8004c04:	f001 f8a6 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004c08:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	2305      	movs	r3, #5
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	2315      	movs	r3, #21
 8004c14:	2221      	movs	r2, #33	; 0x21
 8004c16:	219b      	movs	r1, #155	; 0x9b
 8004c18:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004c1c:	f7fc fd17 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004c20:	4914      	ldr	r1, [pc, #80]	; (8004c74 <TouchSwitchActivity+0x3c4>)
 8004c22:	4813      	ldr	r0, [pc, #76]	; (8004c70 <TouchSwitchActivity+0x3c0>)
 8004c24:	f009 fc6e 	bl	800e504 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004c28:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	2300      	movs	r3, #0
 8004c34:	229d      	movs	r2, #157	; 0x9d
 8004c36:	f240 1111 	movw	r1, #273	; 0x111
 8004c3a:	480d      	ldr	r0, [pc, #52]	; (8004c70 <TouchSwitchActivity+0x3c0>)
 8004c3c:	f7fc ff72 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 1;
 8004c40:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <TouchSwitchActivity+0x3b8>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	70da      	strb	r2, [r3, #3]
						EEPROM_RelayStateUpdate(4, 1);
 8004c46:	2101      	movs	r1, #1
 8004c48:	2004      	movs	r0, #4
 8004c4a:	f7fd fe79 	bl	8002940 <EEPROM_RelayStateUpdate>
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 8004c4e:	480a      	ldr	r0, [pc, #40]	; (8004c78 <TouchSwitchActivity+0x3c8>)
 8004c50:	f7fc fd4e 	bl	80016f0 <EF_SetFont>
			}
			TimerTouch = HAL_GetTick();
 8004c54:	f002 f88e 	bl	8006d74 <HAL_GetTick>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <TouchSwitchActivity+0x3cc>)
 8004c5c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000270 	.word	0x20000270
 8004c6c:	08012408 	.word	0x08012408
 8004c70:	200002c4 	.word	0x200002c4
 8004c74:	0801240c 	.word	0x0801240c
 8004c78:	080151b0 	.word	0x080151b0
 8004c7c:	20000254 	.word	0x20000254

08004c80 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8004c86:	f7fd fb01 	bl	800228c <XPT2046_IsTouched>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 819d 	beq.w	8004fcc <TouchLightsActivity+0x34c>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004c92:	f002 f86f 	bl	8006d74 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	4bb0      	ldr	r3, [pc, #704]	; (8004f5c <TouchLightsActivity+0x2dc>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ca2:	f0c0 8193 	bcc.w	8004fcc <TouchLightsActivity+0x34c>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004ca6:	1d3a      	adds	r2, r7, #4
 8004ca8:	1dbb      	adds	r3, r7, #6
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fd faaf 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	2b09      	cmp	r3, #9
 8004cb6:	d90f      	bls.n	8004cd8 <TouchLightsActivity+0x58>
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	2b6e      	cmp	r3, #110	; 0x6e
 8004cbc:	d80c      	bhi.n	8004cd8 <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004cbe:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004cc0:	2bd7      	cmp	r3, #215	; 0xd7
 8004cc2:	d909      	bls.n	8004cd8 <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004cc4:	88bb      	ldrh	r3, [r7, #4]
 8004cc6:	2bec      	cmp	r3, #236	; 0xec
 8004cc8:	d806      	bhi.n	8004cd8 <TouchLightsActivity+0x58>
			{
				State = MENUTFT_SWITCH;
 8004cca:	4ba5      	ldr	r3, [pc, #660]	; (8004f60 <TouchLightsActivity+0x2e0>)
 8004ccc:	2202      	movs	r2, #2
 8004cce:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004cd0:	4ba4      	ldr	r3, [pc, #656]	; (8004f64 <TouchLightsActivity+0x2e4>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
 8004cd6:	e174      	b.n	8004fc2 <TouchLightsActivity+0x342>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004cd8:	88fb      	ldrh	r3, [r7, #6]
 8004cda:	2bdb      	cmp	r3, #219	; 0xdb
 8004cdc:	d910      	bls.n	8004d00 <TouchLightsActivity+0x80>
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004ce4:	d20c      	bcs.n	8004d00 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004ce6:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004ce8:	2bd7      	cmp	r3, #215	; 0xd7
 8004cea:	d909      	bls.n	8004d00 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004cec:	88bb      	ldrh	r3, [r7, #4]
 8004cee:	2bec      	cmp	r3, #236	; 0xec
 8004cf0:	d806      	bhi.n	8004d00 <TouchLightsActivity+0x80>
			{
				State = MENUTFT_PARAMETERS;
 8004cf2:	4b9b      	ldr	r3, [pc, #620]	; (8004f60 <TouchLightsActivity+0x2e0>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004cf8:	4b9a      	ldr	r3, [pc, #616]	; (8004f64 <TouchLightsActivity+0x2e4>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	e160      	b.n	8004fc2 <TouchLightsActivity+0x342>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004d00:	88fb      	ldrh	r3, [r7, #6]
 8004d02:	2b77      	cmp	r3, #119	; 0x77
 8004d04:	d90f      	bls.n	8004d26 <TouchLightsActivity+0xa6>
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	2bd2      	cmp	r3, #210	; 0xd2
 8004d0a:	d80c      	bhi.n	8004d26 <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004d0c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004d0e:	2bd7      	cmp	r3, #215	; 0xd7
 8004d10:	d909      	bls.n	8004d26 <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004d12:	88bb      	ldrh	r3, [r7, #4]
 8004d14:	2bec      	cmp	r3, #236	; 0xec
 8004d16:	d806      	bhi.n	8004d26 <TouchLightsActivity+0xa6>
			{
				State = MENUTFT_WS_LED;
 8004d18:	4b91      	ldr	r3, [pc, #580]	; (8004f60 <TouchLightsActivity+0x2e0>)
 8004d1a:	2206      	movs	r2, #6
 8004d1c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004d1e:	4b91      	ldr	r3, [pc, #580]	; (8004f64 <TouchLightsActivity+0x2e4>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	e14d      	b.n	8004fc2 <TouchLightsActivity+0x342>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	2bc7      	cmp	r3, #199	; 0xc7
 8004d2a:	f240 814a 	bls.w	8004fc2 <TouchLightsActivity+0x342>
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	2be9      	cmp	r3, #233	; 0xe9
 8004d32:	f200 8146 	bhi.w	8004fc2 <TouchLightsActivity+0x342>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8004d36:	488c      	ldr	r0, [pc, #560]	; (8004f68 <TouchLightsActivity+0x2e8>)
 8004d38:	f7fc fcda 	bl	80016f0 <EF_SetFont>

				//
				// FIRST LIGHT
				if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8004d3c:	88bb      	ldrh	r3, [r7, #4]
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d948      	bls.n	8004dd4 <TouchLightsActivity+0x154>
 8004d42:	88bb      	ldrh	r3, [r7, #4]
 8004d44:	2b56      	cmp	r3, #86	; 0x56
 8004d46:	d845      	bhi.n	8004dd4 <TouchLightsActivity+0x154>
				{
					if(LightsButtonState[0] >= 1) // if is ON
 8004d48:	4b88      	ldr	r3, [pc, #544]	; (8004f6c <TouchLightsActivity+0x2ec>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d020      	beq.n	8004d92 <TouchLightsActivity+0x112>
					{
						SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8004d50:	200e      	movs	r0, #14
 8004d52:	f000 ffff 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004d56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	2305      	movs	r3, #5
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	2315      	movs	r3, #21
 8004d62:	2221      	movs	r2, #33	; 0x21
 8004d64:	2141      	movs	r1, #65	; 0x41
 8004d66:	20c8      	movs	r0, #200	; 0xc8
 8004d68:	f7fc fc71 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004d6c:	4980      	ldr	r1, [pc, #512]	; (8004f70 <TouchLightsActivity+0x2f0>)
 8004d6e:	4881      	ldr	r0, [pc, #516]	; (8004f74 <TouchLightsActivity+0x2f4>)
 8004d70:	f009 fbc8 	bl	800e504 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004d74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2243      	movs	r2, #67	; 0x43
 8004d82:	21cb      	movs	r1, #203	; 0xcb
 8004d84:	487b      	ldr	r0, [pc, #492]	; (8004f74 <TouchLightsActivity+0x2f4>)
 8004d86:	f7fc fecd 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 0;
 8004d8a:	4b78      	ldr	r3, [pc, #480]	; (8004f6c <TouchLightsActivity+0x2ec>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
					if(LightsButtonState[0] >= 1) // if is ON
 8004d90:	e114      	b.n	8004fbc <TouchLightsActivity+0x33c>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8004d92:	200d      	movs	r0, #13
 8004d94:	f000 ffde 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004d98:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	2305      	movs	r3, #5
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	2315      	movs	r3, #21
 8004da4:	2221      	movs	r2, #33	; 0x21
 8004da6:	2141      	movs	r1, #65	; 0x41
 8004da8:	20c8      	movs	r0, #200	; 0xc8
 8004daa:	f7fc fc50 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004dae:	4972      	ldr	r1, [pc, #456]	; (8004f78 <TouchLightsActivity+0x2f8>)
 8004db0:	4870      	ldr	r0, [pc, #448]	; (8004f74 <TouchLightsActivity+0x2f4>)
 8004db2:	f009 fba7 	bl	800e504 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004db6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	2243      	movs	r2, #67	; 0x43
 8004dc4:	21cb      	movs	r1, #203	; 0xcb
 8004dc6:	486b      	ldr	r0, [pc, #428]	; (8004f74 <TouchLightsActivity+0x2f4>)
 8004dc8:	f7fc feac 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 1;
 8004dcc:	4b67      	ldr	r3, [pc, #412]	; (8004f6c <TouchLightsActivity+0x2ec>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
					if(LightsButtonState[0] >= 1) // if is ON
 8004dd2:	e0f3      	b.n	8004fbc <TouchLightsActivity+0x33c>
					}
				}
				//
				// SECOND LIGHT
				else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8004dd4:	88bb      	ldrh	r3, [r7, #4]
 8004dd6:	2b5e      	cmp	r3, #94	; 0x5e
 8004dd8:	d948      	bls.n	8004e6c <TouchLightsActivity+0x1ec>
 8004dda:	88bb      	ldrh	r3, [r7, #4]
 8004ddc:	2b74      	cmp	r3, #116	; 0x74
 8004dde:	d845      	bhi.n	8004e6c <TouchLightsActivity+0x1ec>
				{
					if(LightsButtonState[1] >= 1) // if is ON
 8004de0:	4b62      	ldr	r3, [pc, #392]	; (8004f6c <TouchLightsActivity+0x2ec>)
 8004de2:	785b      	ldrb	r3, [r3, #1]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d020      	beq.n	8004e2a <TouchLightsActivity+0x1aa>
					{
						SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8004de8:	2010      	movs	r0, #16
 8004dea:	f000 ffb3 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004dee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	2305      	movs	r3, #5
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	2315      	movs	r3, #21
 8004dfa:	2221      	movs	r2, #33	; 0x21
 8004dfc:	215f      	movs	r1, #95	; 0x5f
 8004dfe:	20c8      	movs	r0, #200	; 0xc8
 8004e00:	f7fc fc25 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004e04:	495a      	ldr	r1, [pc, #360]	; (8004f70 <TouchLightsActivity+0x2f0>)
 8004e06:	485b      	ldr	r0, [pc, #364]	; (8004f74 <TouchLightsActivity+0x2f4>)
 8004e08:	f009 fb7c 	bl	800e504 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e0c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	2300      	movs	r3, #0
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	2300      	movs	r3, #0
 8004e18:	2261      	movs	r2, #97	; 0x61
 8004e1a:	21cb      	movs	r1, #203	; 0xcb
 8004e1c:	4855      	ldr	r0, [pc, #340]	; (8004f74 <TouchLightsActivity+0x2f4>)
 8004e1e:	f7fc fe81 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 0;
 8004e22:	4b52      	ldr	r3, [pc, #328]	; (8004f6c <TouchLightsActivity+0x2ec>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	705a      	strb	r2, [r3, #1]
					if(LightsButtonState[1] >= 1) // if is ON
 8004e28:	e0c8      	b.n	8004fbc <TouchLightsActivity+0x33c>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8004e2a:	200f      	movs	r0, #15
 8004e2c:	f000 ff92 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004e30:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e34:	9301      	str	r3, [sp, #4]
 8004e36:	2305      	movs	r3, #5
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	2315      	movs	r3, #21
 8004e3c:	2221      	movs	r2, #33	; 0x21
 8004e3e:	215f      	movs	r1, #95	; 0x5f
 8004e40:	20c8      	movs	r0, #200	; 0xc8
 8004e42:	f7fc fc04 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004e46:	494c      	ldr	r1, [pc, #304]	; (8004f78 <TouchLightsActivity+0x2f8>)
 8004e48:	484a      	ldr	r0, [pc, #296]	; (8004f74 <TouchLightsActivity+0x2f4>)
 8004e4a:	f009 fb5b 	bl	800e504 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e4e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	2300      	movs	r3, #0
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	2261      	movs	r2, #97	; 0x61
 8004e5c:	21cb      	movs	r1, #203	; 0xcb
 8004e5e:	4845      	ldr	r0, [pc, #276]	; (8004f74 <TouchLightsActivity+0x2f4>)
 8004e60:	f7fc fe60 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 1;
 8004e64:	4b41      	ldr	r3, [pc, #260]	; (8004f6c <TouchLightsActivity+0x2ec>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	705a      	strb	r2, [r3, #1]
					if(LightsButtonState[1] >= 1) // if is ON
 8004e6a:	e0a7      	b.n	8004fbc <TouchLightsActivity+0x33c>
					}
				}

				//
				// THIRD LIGHT
				else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8004e6c:	88bb      	ldrh	r3, [r7, #4]
 8004e6e:	2b7c      	cmp	r3, #124	; 0x7c
 8004e70:	d948      	bls.n	8004f04 <TouchLightsActivity+0x284>
 8004e72:	88bb      	ldrh	r3, [r7, #4]
 8004e74:	2b92      	cmp	r3, #146	; 0x92
 8004e76:	d845      	bhi.n	8004f04 <TouchLightsActivity+0x284>
				{
					if(LightsButtonState[2] >= 1) // if is ON
 8004e78:	4b3c      	ldr	r3, [pc, #240]	; (8004f6c <TouchLightsActivity+0x2ec>)
 8004e7a:	789b      	ldrb	r3, [r3, #2]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d020      	beq.n	8004ec2 <TouchLightsActivity+0x242>
					{
						SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8004e80:	2012      	movs	r0, #18
 8004e82:	f000 ff67 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004e86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e8a:	9301      	str	r3, [sp, #4]
 8004e8c:	2305      	movs	r3, #5
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	2315      	movs	r3, #21
 8004e92:	2221      	movs	r2, #33	; 0x21
 8004e94:	217d      	movs	r1, #125	; 0x7d
 8004e96:	20c8      	movs	r0, #200	; 0xc8
 8004e98:	f7fc fbd9 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004e9c:	4934      	ldr	r1, [pc, #208]	; (8004f70 <TouchLightsActivity+0x2f0>)
 8004e9e:	4835      	ldr	r0, [pc, #212]	; (8004f74 <TouchLightsActivity+0x2f4>)
 8004ea0:	f009 fb30 	bl	800e504 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004ea4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	227f      	movs	r2, #127	; 0x7f
 8004eb2:	21cb      	movs	r1, #203	; 0xcb
 8004eb4:	482f      	ldr	r0, [pc, #188]	; (8004f74 <TouchLightsActivity+0x2f4>)
 8004eb6:	f7fc fe35 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 0;
 8004eba:	4b2c      	ldr	r3, [pc, #176]	; (8004f6c <TouchLightsActivity+0x2ec>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	709a      	strb	r2, [r3, #2]
					if(LightsButtonState[2] >= 1) // if is ON
 8004ec0:	e07c      	b.n	8004fbc <TouchLightsActivity+0x33c>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8004ec2:	2011      	movs	r0, #17
 8004ec4:	f000 ff46 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004ec8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ecc:	9301      	str	r3, [sp, #4]
 8004ece:	2305      	movs	r3, #5
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	2315      	movs	r3, #21
 8004ed4:	2221      	movs	r2, #33	; 0x21
 8004ed6:	217d      	movs	r1, #125	; 0x7d
 8004ed8:	20c8      	movs	r0, #200	; 0xc8
 8004eda:	f7fc fbb8 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004ede:	4926      	ldr	r1, [pc, #152]	; (8004f78 <TouchLightsActivity+0x2f8>)
 8004ee0:	4824      	ldr	r0, [pc, #144]	; (8004f74 <TouchLightsActivity+0x2f4>)
 8004ee2:	f009 fb0f 	bl	800e504 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004ee6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	2300      	movs	r3, #0
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	227f      	movs	r2, #127	; 0x7f
 8004ef4:	21cb      	movs	r1, #203	; 0xcb
 8004ef6:	481f      	ldr	r0, [pc, #124]	; (8004f74 <TouchLightsActivity+0x2f4>)
 8004ef8:	f7fc fe14 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 1;
 8004efc:	4b1b      	ldr	r3, [pc, #108]	; (8004f6c <TouchLightsActivity+0x2ec>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	709a      	strb	r2, [r3, #2]
					if(LightsButtonState[2] >= 1) // if is ON
 8004f02:	e05b      	b.n	8004fbc <TouchLightsActivity+0x33c>
					}
				}

				//
				// FOURTH LIGHT
				else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 8004f04:	88bb      	ldrh	r3, [r7, #4]
 8004f06:	2b9a      	cmp	r3, #154	; 0x9a
 8004f08:	d958      	bls.n	8004fbc <TouchLightsActivity+0x33c>
 8004f0a:	88bb      	ldrh	r3, [r7, #4]
 8004f0c:	2bb0      	cmp	r3, #176	; 0xb0
 8004f0e:	d855      	bhi.n	8004fbc <TouchLightsActivity+0x33c>
				{
					if(LightsButtonState[3] >= 1) // if is ON
 8004f10:	4b16      	ldr	r3, [pc, #88]	; (8004f6c <TouchLightsActivity+0x2ec>)
 8004f12:	78db      	ldrb	r3, [r3, #3]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d031      	beq.n	8004f7c <TouchLightsActivity+0x2fc>
					{
						SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8004f18:	2014      	movs	r0, #20
 8004f1a:	f000 ff1b 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f1e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	2305      	movs	r3, #5
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	2315      	movs	r3, #21
 8004f2a:	2221      	movs	r2, #33	; 0x21
 8004f2c:	219b      	movs	r1, #155	; 0x9b
 8004f2e:	20c8      	movs	r0, #200	; 0xc8
 8004f30:	f7fc fb8d 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004f34:	490e      	ldr	r1, [pc, #56]	; (8004f70 <TouchLightsActivity+0x2f0>)
 8004f36:	480f      	ldr	r0, [pc, #60]	; (8004f74 <TouchLightsActivity+0x2f4>)
 8004f38:	f009 fae4 	bl	800e504 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	2300      	movs	r3, #0
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	2300      	movs	r3, #0
 8004f48:	229d      	movs	r2, #157	; 0x9d
 8004f4a:	21cb      	movs	r1, #203	; 0xcb
 8004f4c:	4809      	ldr	r0, [pc, #36]	; (8004f74 <TouchLightsActivity+0x2f4>)
 8004f4e:	f7fc fde9 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 0;
 8004f52:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <TouchLightsActivity+0x2ec>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	70da      	strb	r2, [r3, #3]
 8004f58:	e030      	b.n	8004fbc <TouchLightsActivity+0x33c>
 8004f5a:	bf00      	nop
 8004f5c:	20000254 	.word	0x20000254
 8004f60:	20000258 	.word	0x20000258
 8004f64:	2000024f 	.word	0x2000024f
 8004f68:	08013238 	.word	0x08013238
 8004f6c:	20000274 	.word	0x20000274
 8004f70:	08012408 	.word	0x08012408
 8004f74:	200002c4 	.word	0x200002c4
 8004f78:	0801240c 	.word	0x0801240c
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8004f7c:	2013      	movs	r0, #19
 8004f7e:	f000 fee9 	bl	8005d54 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f82:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	2305      	movs	r3, #5
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	2315      	movs	r3, #21
 8004f8e:	2221      	movs	r2, #33	; 0x21
 8004f90:	219b      	movs	r1, #155	; 0x9b
 8004f92:	20c8      	movs	r0, #200	; 0xc8
 8004f94:	f7fc fb5b 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004f98:	490e      	ldr	r1, [pc, #56]	; (8004fd4 <TouchLightsActivity+0x354>)
 8004f9a:	480f      	ldr	r0, [pc, #60]	; (8004fd8 <TouchLightsActivity+0x358>)
 8004f9c:	f009 fab2 	bl	800e504 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004fa0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fa4:	9301      	str	r3, [sp, #4]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	2300      	movs	r3, #0
 8004fac:	229d      	movs	r2, #157	; 0x9d
 8004fae:	21cb      	movs	r1, #203	; 0xcb
 8004fb0:	4809      	ldr	r0, [pc, #36]	; (8004fd8 <TouchLightsActivity+0x358>)
 8004fb2:	f7fc fdb7 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 1;
 8004fb6:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <TouchLightsActivity+0x35c>)
 8004fb8:	2201      	movs	r2, #1
 8004fba:	70da      	strb	r2, [r3, #3]
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 8004fbc:	4808      	ldr	r0, [pc, #32]	; (8004fe0 <TouchLightsActivity+0x360>)
 8004fbe:	f7fc fb97 	bl	80016f0 <EF_SetFont>
			}

			TimerTouch = HAL_GetTick();
 8004fc2:	f001 fed7 	bl	8006d74 <HAL_GetTick>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4a06      	ldr	r2, [pc, #24]	; (8004fe4 <TouchLightsActivity+0x364>)
 8004fca:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004fcc:	bf00      	nop
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	0801240c 	.word	0x0801240c
 8004fd8:	200002c4 	.word	0x200002c4
 8004fdc:	20000274 	.word	0x20000274
 8004fe0:	080151b0 	.word	0x080151b0
 8004fe4:	20000254 	.word	0x20000254

08004fe8 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 8004fee:	f7fd f94d 	bl	800228c <XPT2046_IsTouched>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 812a 	beq.w	800524e <TouchClockActivity+0x266>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8004ffa:	4897      	ldr	r0, [pc, #604]	; (8005258 <TouchClockActivity+0x270>)
 8004ffc:	f7fc fb78 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005000:	f001 feb8 	bl	8006d74 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	4b95      	ldr	r3, [pc, #596]	; (800525c <TouchClockActivity+0x274>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005010:	f0c0 811d 	bcc.w	800524e <TouchClockActivity+0x266>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005014:	1d3a      	adds	r2, r7, #4
 8005016:	1dbb      	adds	r3, r7, #6
 8005018:	4611      	mov	r1, r2
 800501a:	4618      	mov	r0, r3
 800501c:	f7fd f8f8 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8005020:	4b8f      	ldr	r3, [pc, #572]	; (8005260 <TouchClockActivity+0x278>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d10e      	bne.n	8005046 <TouchClockActivity+0x5e>
				{
					Hours = DS3231_GetHour();
 8005028:	f7fd fba8 	bl	800277c <DS3231_GetHour>
 800502c:	4603      	mov	r3, r0
 800502e:	461a      	mov	r2, r3
 8005030:	4b8c      	ldr	r3, [pc, #560]	; (8005264 <TouchClockActivity+0x27c>)
 8005032:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8005034:	f7fd fbae 	bl	8002794 <DS3231_GetMinute>
 8005038:	4603      	mov	r3, r0
 800503a:	461a      	mov	r2, r3
 800503c:	4b8a      	ldr	r3, [pc, #552]	; (8005268 <TouchClockActivity+0x280>)
 800503e:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8005040:	4b87      	ldr	r3, [pc, #540]	; (8005260 <TouchClockActivity+0x278>)
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	2b09      	cmp	r3, #9
 800504a:	d90f      	bls.n	800506c <TouchClockActivity+0x84>
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	2b6e      	cmp	r3, #110	; 0x6e
 8005050:	d80c      	bhi.n	800506c <TouchClockActivity+0x84>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005052:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005054:	2bd7      	cmp	r3, #215	; 0xd7
 8005056:	d909      	bls.n	800506c <TouchClockActivity+0x84>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005058:	88bb      	ldrh	r3, [r7, #4]
 800505a:	2bec      	cmp	r3, #236	; 0xec
 800505c:	d806      	bhi.n	800506c <TouchClockActivity+0x84>
				{
					State = MENUTFT_PARAMETERS;
 800505e:	4b83      	ldr	r3, [pc, #524]	; (800526c <TouchClockActivity+0x284>)
 8005060:	2201      	movs	r2, #1
 8005062:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8005064:	4b82      	ldr	r3, [pc, #520]	; (8005270 <TouchClockActivity+0x288>)
 8005066:	2201      	movs	r2, #1
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	e0eb      	b.n	8005244 <TouchClockActivity+0x25c>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	2bdb      	cmp	r3, #219	; 0xdb
 8005070:	d927      	bls.n	80050c2 <TouchClockActivity+0xda>
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005078:	d223      	bcs.n	80050c2 <TouchClockActivity+0xda>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800507a:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800507c:	2bd7      	cmp	r3, #215	; 0xd7
 800507e:	d920      	bls.n	80050c2 <TouchClockActivity+0xda>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005080:	88bb      	ldrh	r3, [r7, #4]
 8005082:	2bec      	cmp	r3, #236	; 0xec
 8005084:	d81d      	bhi.n	80050c2 <TouchClockActivity+0xda>
				{
					DS3231_SetHour(Hours);
 8005086:	4b77      	ldr	r3, [pc, #476]	; (8005264 <TouchClockActivity+0x27c>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7fd fb8e 	bl	80027ac <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8005090:	4b75      	ldr	r3, [pc, #468]	; (8005268 <TouchClockActivity+0x280>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f7fd fb9e 	bl	80027d6 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 800509a:	2032      	movs	r0, #50	; 0x32
 800509c:	f7fd fbad 	bl	80027fa <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 80050a0:	4974      	ldr	r1, [pc, #464]	; (8005274 <TouchClockActivity+0x28c>)
 80050a2:	4875      	ldr	r0, [pc, #468]	; (8005278 <TouchClockActivity+0x290>)
 80050a4:	f009 fa2e 	bl	800e504 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 80050a8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	2301      	movs	r3, #1
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80050b6:	220a      	movs	r2, #10
 80050b8:	212f      	movs	r1, #47	; 0x2f
 80050ba:	486f      	ldr	r0, [pc, #444]	; (8005278 <TouchClockActivity+0x290>)
 80050bc:	f7fc fd32 	bl	8001b24 <EF_PutString>
 80050c0:	e0c0      	b.n	8005244 <TouchClockActivity+0x25c>
				}

				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	2bef      	cmp	r3, #239	; 0xef
 80050c6:	d953      	bls.n	8005170 <TouchClockActivity+0x188>
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80050ce:	d84f      	bhi.n	8005170 <TouchClockActivity+0x188>
				{

					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 80050d0:	88bb      	ldrh	r3, [r7, #4]
 80050d2:	2b4a      	cmp	r3, #74	; 0x4a
 80050d4:	d923      	bls.n	800511e <TouchClockActivity+0x136>
 80050d6:	88bb      	ldrh	r3, [r7, #4]
 80050d8:	2b60      	cmp	r3, #96	; 0x60
 80050da:	d820      	bhi.n	800511e <TouchClockActivity+0x136>
					{
						if(Hours < 24)
 80050dc:	4b61      	ldr	r3, [pc, #388]	; (8005264 <TouchClockActivity+0x27c>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b17      	cmp	r3, #23
 80050e2:	d806      	bhi.n	80050f2 <TouchClockActivity+0x10a>
						{
							Hours++;
 80050e4:	4b5f      	ldr	r3, [pc, #380]	; (8005264 <TouchClockActivity+0x27c>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	3301      	adds	r3, #1
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	4b5d      	ldr	r3, [pc, #372]	; (8005264 <TouchClockActivity+0x27c>)
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	e002      	b.n	80050f8 <TouchClockActivity+0x110>
						}
						else
						{
							Hours = 1;
 80050f2:	4b5c      	ldr	r3, [pc, #368]	; (8005264 <TouchClockActivity+0x27c>)
 80050f4:	2201      	movs	r2, #1
 80050f6:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 80050f8:	4b5a      	ldr	r3, [pc, #360]	; (8005264 <TouchClockActivity+0x27c>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	495f      	ldr	r1, [pc, #380]	; (800527c <TouchClockActivity+0x294>)
 8005100:	485d      	ldr	r0, [pc, #372]	; (8005278 <TouchClockActivity+0x290>)
 8005102:	f009 f9ff 	bl	800e504 <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005106:	f24c 6318 	movw	r3, #50712	; 0xc618
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	2301      	movs	r3, #1
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2300      	movs	r3, #0
 8005112:	2246      	movs	r2, #70	; 0x46
 8005114:	21a0      	movs	r1, #160	; 0xa0
 8005116:	4858      	ldr	r0, [pc, #352]	; (8005278 <TouchClockActivity+0x290>)
 8005118:	f7fc fd04 	bl	8001b24 <EF_PutString>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 800511c:	e091      	b.n	8005242 <TouchClockActivity+0x25a>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 800511e:	88bb      	ldrh	r3, [r7, #4]
 8005120:	2b72      	cmp	r3, #114	; 0x72
 8005122:	f240 808e 	bls.w	8005242 <TouchClockActivity+0x25a>
 8005126:	88bb      	ldrh	r3, [r7, #4]
 8005128:	2b88      	cmp	r3, #136	; 0x88
 800512a:	f200 808a 	bhi.w	8005242 <TouchClockActivity+0x25a>
					{
						if(Minutes < 59)
 800512e:	4b4e      	ldr	r3, [pc, #312]	; (8005268 <TouchClockActivity+0x280>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b3a      	cmp	r3, #58	; 0x3a
 8005134:	d806      	bhi.n	8005144 <TouchClockActivity+0x15c>
						{
							Minutes++;
 8005136:	4b4c      	ldr	r3, [pc, #304]	; (8005268 <TouchClockActivity+0x280>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	3301      	adds	r3, #1
 800513c:	b2da      	uxtb	r2, r3
 800513e:	4b4a      	ldr	r3, [pc, #296]	; (8005268 <TouchClockActivity+0x280>)
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	e002      	b.n	800514a <TouchClockActivity+0x162>
						}
						else
						{
							Minutes = 0;
 8005144:	4b48      	ldr	r3, [pc, #288]	; (8005268 <TouchClockActivity+0x280>)
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 800514a:	4b47      	ldr	r3, [pc, #284]	; (8005268 <TouchClockActivity+0x280>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	494a      	ldr	r1, [pc, #296]	; (800527c <TouchClockActivity+0x294>)
 8005152:	4849      	ldr	r0, [pc, #292]	; (8005278 <TouchClockActivity+0x290>)
 8005154:	f009 f9d6 	bl	800e504 <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005158:	f24c 6318 	movw	r3, #50712	; 0xc618
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	2301      	movs	r3, #1
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	2300      	movs	r3, #0
 8005164:	226e      	movs	r2, #110	; 0x6e
 8005166:	21a0      	movs	r1, #160	; 0xa0
 8005168:	4843      	ldr	r0, [pc, #268]	; (8005278 <TouchClockActivity+0x290>)
 800516a:	f7fc fcdb 	bl	8001b24 <EF_PutString>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 800516e:	e068      	b.n	8005242 <TouchClockActivity+0x25a>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8005176:	d365      	bcc.n	8005244 <TouchClockActivity+0x25c>
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800517e:	d861      	bhi.n	8005244 <TouchClockActivity+0x25c>
				{
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8005180:	88bb      	ldrh	r3, [r7, #4]
 8005182:	2b4a      	cmp	r3, #74	; 0x4a
 8005184:	d923      	bls.n	80051ce <TouchClockActivity+0x1e6>
 8005186:	88bb      	ldrh	r3, [r7, #4]
 8005188:	2b60      	cmp	r3, #96	; 0x60
 800518a:	d820      	bhi.n	80051ce <TouchClockActivity+0x1e6>
					{

						if(Hours < 19)
 800518c:	4b35      	ldr	r3, [pc, #212]	; (8005264 <TouchClockActivity+0x27c>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b12      	cmp	r3, #18
 8005192:	d806      	bhi.n	80051a2 <TouchClockActivity+0x1ba>
						{
							Hours = Hours + 6;
 8005194:	4b33      	ldr	r3, [pc, #204]	; (8005264 <TouchClockActivity+0x27c>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	3306      	adds	r3, #6
 800519a:	b2da      	uxtb	r2, r3
 800519c:	4b31      	ldr	r3, [pc, #196]	; (8005264 <TouchClockActivity+0x27c>)
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	e002      	b.n	80051a8 <TouchClockActivity+0x1c0>
						}
						else
						{
							Hours = 1;
 80051a2:	4b30      	ldr	r3, [pc, #192]	; (8005264 <TouchClockActivity+0x27c>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 80051a8:	4b2e      	ldr	r3, [pc, #184]	; (8005264 <TouchClockActivity+0x27c>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	4933      	ldr	r1, [pc, #204]	; (800527c <TouchClockActivity+0x294>)
 80051b0:	4831      	ldr	r0, [pc, #196]	; (8005278 <TouchClockActivity+0x290>)
 80051b2:	f009 f9a7 	bl	800e504 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80051b6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	2301      	movs	r3, #1
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	2300      	movs	r3, #0
 80051c2:	2246      	movs	r2, #70	; 0x46
 80051c4:	219d      	movs	r1, #157	; 0x9d
 80051c6:	482c      	ldr	r0, [pc, #176]	; (8005278 <TouchClockActivity+0x290>)
 80051c8:	f7fc fcac 	bl	8001b24 <EF_PutString>
 80051cc:	e035      	b.n	800523a <TouchClockActivity+0x252>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 80051ce:	88bb      	ldrh	r3, [r7, #4]
 80051d0:	2b72      	cmp	r3, #114	; 0x72
 80051d2:	d932      	bls.n	800523a <TouchClockActivity+0x252>
 80051d4:	88bb      	ldrh	r3, [r7, #4]
 80051d6:	2b88      	cmp	r3, #136	; 0x88
 80051d8:	d82f      	bhi.n	800523a <TouchClockActivity+0x252>
					{
						if(Minutes < 49)
 80051da:	4b23      	ldr	r3, [pc, #140]	; (8005268 <TouchClockActivity+0x280>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b30      	cmp	r3, #48	; 0x30
 80051e0:	d806      	bhi.n	80051f0 <TouchClockActivity+0x208>
						{
							Minutes = Minutes +10;
 80051e2:	4b21      	ldr	r3, [pc, #132]	; (8005268 <TouchClockActivity+0x280>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	330a      	adds	r3, #10
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	4b1f      	ldr	r3, [pc, #124]	; (8005268 <TouchClockActivity+0x280>)
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	e012      	b.n	8005216 <TouchClockActivity+0x22e>
						}
						else
						{
							Minutes = (Minutes + 10) % 60;
 80051f0:	4b1d      	ldr	r3, [pc, #116]	; (8005268 <TouchClockActivity+0x280>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	f103 020a 	add.w	r2, r3, #10
 80051f8:	4b21      	ldr	r3, [pc, #132]	; (8005280 <TouchClockActivity+0x298>)
 80051fa:	fb83 1302 	smull	r1, r3, r3, r2
 80051fe:	4413      	add	r3, r2
 8005200:	1159      	asrs	r1, r3, #5
 8005202:	17d3      	asrs	r3, r2, #31
 8005204:	1ac9      	subs	r1, r1, r3
 8005206:	460b      	mov	r3, r1
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	1a5b      	subs	r3, r3, r1
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	1ad1      	subs	r1, r2, r3
 8005210:	b2ca      	uxtb	r2, r1
 8005212:	4b15      	ldr	r3, [pc, #84]	; (8005268 <TouchClockActivity+0x280>)
 8005214:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 8005216:	4b14      	ldr	r3, [pc, #80]	; (8005268 <TouchClockActivity+0x280>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	4917      	ldr	r1, [pc, #92]	; (800527c <TouchClockActivity+0x294>)
 800521e:	4816      	ldr	r0, [pc, #88]	; (8005278 <TouchClockActivity+0x290>)
 8005220:	f009 f970 	bl	800e504 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005224:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005228:	9301      	str	r3, [sp, #4]
 800522a:	2301      	movs	r3, #1
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	2300      	movs	r3, #0
 8005230:	226e      	movs	r2, #110	; 0x6e
 8005232:	219c      	movs	r1, #156	; 0x9c
 8005234:	4810      	ldr	r0, [pc, #64]	; (8005278 <TouchClockActivity+0x290>)
 8005236:	f7fc fc75 	bl	8001b24 <EF_PutString>

					}
					EF_SetFont(&arialBlack_20ptFontInfo);
 800523a:	4807      	ldr	r0, [pc, #28]	; (8005258 <TouchClockActivity+0x270>)
 800523c:	f7fc fa58 	bl	80016f0 <EF_SetFont>
 8005240:	e000      	b.n	8005244 <TouchClockActivity+0x25c>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8005242:	bf00      	nop
				}
				TimerTouch = HAL_GetTick();
 8005244:	f001 fd96 	bl	8006d74 <HAL_GetTick>
 8005248:	4603      	mov	r3, r0
 800524a:	4a04      	ldr	r2, [pc, #16]	; (800525c <TouchClockActivity+0x274>)
 800524c:	6013      	str	r3, [r2, #0]
			}
		}
}
 800524e:	bf00      	nop
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	080151b0 	.word	0x080151b0
 800525c:	20000254 	.word	0x20000254
 8005260:	20000250 	.word	0x20000250
 8005264:	20000030 	.word	0x20000030
 8005268:	20000031 	.word	0x20000031
 800526c:	20000258 	.word	0x20000258
 8005270:	2000024f 	.word	0x2000024f
 8005274:	08012410 	.word	0x08012410
 8005278:	200002c4 	.word	0x200002c4
 800527c:	08012420 	.word	0x08012420
 8005280:	88888889 	.word	0x88888889

08005284 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 800528a:	f7fc ffff 	bl	800228c <XPT2046_IsTouched>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8106 	beq.w	80054a2 <TouchPredefinedActivityActivity+0x21e>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005296:	f001 fd6d 	bl	8006d74 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	4b83      	ldr	r3, [pc, #524]	; (80054ac <TouchPredefinedActivityActivity+0x228>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052a6:	f0c0 80fc 	bcc.w	80054a2 <TouchPredefinedActivityActivity+0x21e>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80052aa:	1d3a      	adds	r2, r7, #4
 80052ac:	1dbb      	adds	r3, r7, #6
 80052ae:	4611      	mov	r1, r2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fc ffad 	bl	8002210 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 80052b6:	487e      	ldr	r0, [pc, #504]	; (80054b0 <TouchPredefinedActivityActivity+0x22c>)
 80052b8:	f7fc fa1a 	bl	80016f0 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80052bc:	88fb      	ldrh	r3, [r7, #6]
 80052be:	2b09      	cmp	r3, #9
 80052c0:	d90f      	bls.n	80052e2 <TouchPredefinedActivityActivity+0x5e>
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	2b6e      	cmp	r3, #110	; 0x6e
 80052c6:	d80c      	bhi.n	80052e2 <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80052c8:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80052ca:	2bd7      	cmp	r3, #215	; 0xd7
 80052cc:	d909      	bls.n	80052e2 <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80052ce:	88bb      	ldrh	r3, [r7, #4]
 80052d0:	2bec      	cmp	r3, #236	; 0xec
 80052d2:	d806      	bhi.n	80052e2 <TouchPredefinedActivityActivity+0x5e>
			{
				State = MENUTFT_SWITCH;
 80052d4:	4b77      	ldr	r3, [pc, #476]	; (80054b4 <TouchPredefinedActivityActivity+0x230>)
 80052d6:	2202      	movs	r2, #2
 80052d8:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80052da:	4b77      	ldr	r3, [pc, #476]	; (80054b8 <TouchPredefinedActivityActivity+0x234>)
 80052dc:	2201      	movs	r2, #1
 80052de:	701a      	strb	r2, [r3, #0]
 80052e0:	e0da      	b.n	8005498 <TouchPredefinedActivityActivity+0x214>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	2b63      	cmp	r3, #99	; 0x63
 80052e6:	f240 80d7 	bls.w	8005498 <TouchPredefinedActivityActivity+0x214>
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	2bdc      	cmp	r3, #220	; 0xdc
 80052ee:	f200 80d3 	bhi.w	8005498 <TouchPredefinedActivityActivity+0x214>
			{
				if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 80052f2:	88bb      	ldrh	r3, [r7, #4]
 80052f4:	2b3b      	cmp	r3, #59	; 0x3b
 80052f6:	d966      	bls.n	80053c6 <TouchPredefinedActivityActivity+0x142>
 80052f8:	88bb      	ldrh	r3, [r7, #4]
 80052fa:	2b64      	cmp	r3, #100	; 0x64
 80052fc:	d863      	bhi.n	80053c6 <TouchPredefinedActivityActivity+0x142>
				{
					if(ActivityButtonState[0] >= 1) // if is ON
 80052fe:	4b6f      	ldr	r3, [pc, #444]	; (80054bc <TouchPredefinedActivityActivity+0x238>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02f      	beq.n	8005366 <TouchPredefinedActivityActivity+0xe2>
					{
						ActivityButtonState[0] = 0;
 8005306:	4b6d      	ldr	r3, [pc, #436]	; (80054bc <TouchPredefinedActivityActivity+0x238>)
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800530c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	230a      	movs	r3, #10
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	2328      	movs	r3, #40	; 0x28
 8005318:	2278      	movs	r2, #120	; 0x78
 800531a:	213c      	movs	r1, #60	; 0x3c
 800531c:	2064      	movs	r0, #100	; 0x64
 800531e:	f7fc f996 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 8005322:	4967      	ldr	r1, [pc, #412]	; (80054c0 <TouchPredefinedActivityActivity+0x23c>)
 8005324:	4867      	ldr	r0, [pc, #412]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 8005326:	f009 f8ed 	bl	800e504 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800532a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800532e:	9301      	str	r3, [sp, #4]
 8005330:	2300      	movs	r3, #0
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	223e      	movs	r2, #62	; 0x3e
 8005338:	2177      	movs	r1, #119	; 0x77
 800533a:	4862      	ldr	r0, [pc, #392]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 800533c:	f7fc fbf2 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 8005340:	4961      	ldr	r1, [pc, #388]	; (80054c8 <TouchPredefinedActivityActivity+0x244>)
 8005342:	4860      	ldr	r0, [pc, #384]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 8005344:	f009 f8de 	bl	800e504 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005348:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	2300      	movs	r3, #0
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	2300      	movs	r3, #0
 8005354:	2250      	movs	r2, #80	; 0x50
 8005356:	2193      	movs	r1, #147	; 0x93
 8005358:	485a      	ldr	r0, [pc, #360]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 800535a:	f7fc fbe3 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(0); // Turn Activity OFF
 800535e:	2000      	movs	r0, #0
 8005360:	f7fe fc40 	bl	8003be4 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8005364:	e098      	b.n	8005498 <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[0] = 1;
 8005366:	4b55      	ldr	r3, [pc, #340]	; (80054bc <TouchPredefinedActivityActivity+0x238>)
 8005368:	2201      	movs	r2, #1
 800536a:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800536c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005370:	9301      	str	r3, [sp, #4]
 8005372:	230a      	movs	r3, #10
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	2328      	movs	r3, #40	; 0x28
 8005378:	2278      	movs	r2, #120	; 0x78
 800537a:	213c      	movs	r1, #60	; 0x3c
 800537c:	2064      	movs	r0, #100	; 0x64
 800537e:	f7fc f966 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 8005382:	494f      	ldr	r1, [pc, #316]	; (80054c0 <TouchPredefinedActivityActivity+0x23c>)
 8005384:	484f      	ldr	r0, [pc, #316]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 8005386:	f009 f8bd 	bl	800e504 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800538a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800538e:	9301      	str	r3, [sp, #4]
 8005390:	2300      	movs	r3, #0
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	2300      	movs	r3, #0
 8005396:	223e      	movs	r2, #62	; 0x3e
 8005398:	2177      	movs	r1, #119	; 0x77
 800539a:	484a      	ldr	r0, [pc, #296]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 800539c:	f7fc fbc2 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 80053a0:	494a      	ldr	r1, [pc, #296]	; (80054cc <TouchPredefinedActivityActivity+0x248>)
 80053a2:	4848      	ldr	r0, [pc, #288]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 80053a4:	f009 f8ae 	bl	800e504 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80053a8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	2300      	movs	r3, #0
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	2300      	movs	r3, #0
 80053b4:	2250      	movs	r2, #80	; 0x50
 80053b6:	2193      	movs	r1, #147	; 0x93
 80053b8:	4842      	ldr	r0, [pc, #264]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 80053ba:	f7fc fbb3 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(1);
 80053be:	2001      	movs	r0, #1
 80053c0:	f7fe fc10 	bl	8003be4 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 80053c4:	e068      	b.n	8005498 <TouchPredefinedActivityActivity+0x214>
					}

				}

				else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 80053c6:	88bb      	ldrh	r3, [r7, #4]
 80053c8:	2b77      	cmp	r3, #119	; 0x77
 80053ca:	d965      	bls.n	8005498 <TouchPredefinedActivityActivity+0x214>
 80053cc:	88bb      	ldrh	r3, [r7, #4]
 80053ce:	2ba0      	cmp	r3, #160	; 0xa0
 80053d0:	d862      	bhi.n	8005498 <TouchPredefinedActivityActivity+0x214>
				{
					if(ActivityButtonState[1] >= 1) // if is ON
 80053d2:	4b3a      	ldr	r3, [pc, #232]	; (80054bc <TouchPredefinedActivityActivity+0x238>)
 80053d4:	785b      	ldrb	r3, [r3, #1]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d02f      	beq.n	800543a <TouchPredefinedActivityActivity+0x1b6>
					{
						ActivityButtonState[1] = 0;
 80053da:	4b38      	ldr	r3, [pc, #224]	; (80054bc <TouchPredefinedActivityActivity+0x238>)
 80053dc:	2200      	movs	r2, #0
 80053de:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80053e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	230a      	movs	r3, #10
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	2328      	movs	r3, #40	; 0x28
 80053ec:	2278      	movs	r2, #120	; 0x78
 80053ee:	2178      	movs	r1, #120	; 0x78
 80053f0:	2064      	movs	r0, #100	; 0x64
 80053f2:	f7fc f92c 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 80053f6:	4936      	ldr	r1, [pc, #216]	; (80054d0 <TouchPredefinedActivityActivity+0x24c>)
 80053f8:	4832      	ldr	r0, [pc, #200]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 80053fa:	f009 f883 	bl	800e504 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80053fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005402:	9301      	str	r3, [sp, #4]
 8005404:	2300      	movs	r3, #0
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	2300      	movs	r3, #0
 800540a:	227a      	movs	r2, #122	; 0x7a
 800540c:	2169      	movs	r1, #105	; 0x69
 800540e:	482d      	ldr	r0, [pc, #180]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 8005410:	f7fc fb88 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 8005414:	492c      	ldr	r1, [pc, #176]	; (80054c8 <TouchPredefinedActivityActivity+0x244>)
 8005416:	482b      	ldr	r0, [pc, #172]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 8005418:	f009 f874 	bl	800e504 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800541c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	2300      	movs	r3, #0
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	2300      	movs	r3, #0
 8005428:	228c      	movs	r2, #140	; 0x8c
 800542a:	2193      	movs	r1, #147	; 0x93
 800542c:	4825      	ldr	r0, [pc, #148]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 800542e:	f7fc fb79 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(0);
 8005432:	2000      	movs	r0, #0
 8005434:	f7fe fb9c 	bl	8003b70 <predefinedActivityCzyszczenie>
 8005438:	e02e      	b.n	8005498 <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[1] = 1;
 800543a:	4b20      	ldr	r3, [pc, #128]	; (80054bc <TouchPredefinedActivityActivity+0x238>)
 800543c:	2201      	movs	r2, #1
 800543e:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8005440:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	230a      	movs	r3, #10
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	2328      	movs	r3, #40	; 0x28
 800544c:	2278      	movs	r2, #120	; 0x78
 800544e:	2178      	movs	r1, #120	; 0x78
 8005450:	2064      	movs	r0, #100	; 0x64
 8005452:	f7fc f8fc 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 8005456:	491e      	ldr	r1, [pc, #120]	; (80054d0 <TouchPredefinedActivityActivity+0x24c>)
 8005458:	481a      	ldr	r0, [pc, #104]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 800545a:	f009 f853 	bl	800e504 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800545e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	2300      	movs	r3, #0
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	2300      	movs	r3, #0
 800546a:	227a      	movs	r2, #122	; 0x7a
 800546c:	2169      	movs	r1, #105	; 0x69
 800546e:	4815      	ldr	r0, [pc, #84]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 8005470:	f7fc fb58 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 8005474:	4915      	ldr	r1, [pc, #84]	; (80054cc <TouchPredefinedActivityActivity+0x248>)
 8005476:	4813      	ldr	r0, [pc, #76]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 8005478:	f009 f844 	bl	800e504 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800547c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	2300      	movs	r3, #0
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2300      	movs	r3, #0
 8005488:	228c      	movs	r2, #140	; 0x8c
 800548a:	2193      	movs	r1, #147	; 0x93
 800548c:	480d      	ldr	r0, [pc, #52]	; (80054c4 <TouchPredefinedActivityActivity+0x240>)
 800548e:	f7fc fb49 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(1);
 8005492:	2001      	movs	r0, #1
 8005494:	f7fe fb6c 	bl	8003b70 <predefinedActivityCzyszczenie>
					}
				}
			}
			TimerTouch = HAL_GetTick();
 8005498:	f001 fc6c 	bl	8006d74 <HAL_GetTick>
 800549c:	4603      	mov	r3, r0
 800549e:	4a03      	ldr	r2, [pc, #12]	; (80054ac <TouchPredefinedActivityActivity+0x228>)
 80054a0:	6013      	str	r3, [r2, #0]
		}
	}
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000254 	.word	0x20000254
 80054b0:	08013238 	.word	0x08013238
 80054b4:	20000258 	.word	0x20000258
 80054b8:	2000024f 	.word	0x2000024f
 80054bc:	20000278 	.word	0x20000278
 80054c0:	08012428 	.word	0x08012428
 80054c4:	200002c4 	.word	0x200002c4
 80054c8:	08012408 	.word	0x08012408
 80054cc:	0801240c 	.word	0x0801240c
 80054d0:	08012434 	.word	0x08012434

080054d4 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 80054da:	f7fc fed7 	bl	800228c <XPT2046_IsTouched>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 819d 	beq.w	8005820 <TouchWSLedActivity+0x34c>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80054e6:	48ae      	ldr	r0, [pc, #696]	; (80057a0 <TouchWSLedActivity+0x2cc>)
 80054e8:	f7fc f902 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80054ec:	f001 fc42 	bl	8006d74 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	4bac      	ldr	r3, [pc, #688]	; (80057a4 <TouchWSLedActivity+0x2d0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054fc:	f0c0 8190 	bcc.w	8005820 <TouchWSLedActivity+0x34c>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005500:	1d3a      	adds	r2, r7, #4
 8005502:	1dbb      	adds	r3, r7, #6
 8005504:	4611      	mov	r1, r2
 8005506:	4618      	mov	r0, r3
 8005508:	f7fc fe82 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 800550c:	4ba6      	ldr	r3, [pc, #664]	; (80057a8 <TouchWSLedActivity+0x2d4>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d10b      	bne.n	800552c <TouchWSLedActivity+0x58>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8005514:	bf00      	nop
 8005516:	2201      	movs	r2, #1
 8005518:	49a4      	ldr	r1, [pc, #656]	; (80057ac <TouchWSLedActivity+0x2d8>)
 800551a:	2001      	movs	r0, #1
 800551c:	f7fd f9ca 	bl	80028b4 <eeprom_read>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f7      	bne.n	8005516 <TouchWSLedActivity+0x42>
					WSLedChangeFlag = 0;
 8005526:	4ba2      	ldr	r3, [pc, #648]	; (80057b0 <TouchWSLedActivity+0x2dc>)
 8005528:	2200      	movs	r2, #0
 800552a:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	2b09      	cmp	r3, #9
 8005530:	d90f      	bls.n	8005552 <TouchWSLedActivity+0x7e>
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	2b6e      	cmp	r3, #110	; 0x6e
 8005536:	d80c      	bhi.n	8005552 <TouchWSLedActivity+0x7e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005538:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800553a:	2bd7      	cmp	r3, #215	; 0xd7
 800553c:	d909      	bls.n	8005552 <TouchWSLedActivity+0x7e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800553e:	88bb      	ldrh	r3, [r7, #4]
 8005540:	2bec      	cmp	r3, #236	; 0xec
 8005542:	d806      	bhi.n	8005552 <TouchWSLedActivity+0x7e>
				{
					State = MENUTFT_LIGHTS;
 8005544:	4b9b      	ldr	r3, [pc, #620]	; (80057b4 <TouchWSLedActivity+0x2e0>)
 8005546:	2205      	movs	r2, #5
 8005548:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800554a:	4b9b      	ldr	r3, [pc, #620]	; (80057b8 <TouchWSLedActivity+0x2e4>)
 800554c:	2201      	movs	r2, #1
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	e161      	b.n	8005816 <TouchWSLedActivity+0x342>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 8005552:	88bb      	ldrh	r3, [r7, #4]
 8005554:	2b40      	cmp	r3, #64	; 0x40
 8005556:	f240 80af 	bls.w	80056b8 <TouchWSLedActivity+0x1e4>
 800555a:	88bb      	ldrh	r3, [r7, #4]
 800555c:	2b56      	cmp	r3, #86	; 0x56
 800555e:	f200 80ab 	bhi.w	80056b8 <TouchWSLedActivity+0x1e4>
				{

					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	2bd8      	cmp	r3, #216	; 0xd8
 8005566:	d92f      	bls.n	80055c8 <TouchWSLedActivity+0xf4>
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	2bf7      	cmp	r3, #247	; 0xf7
 800556c:	d82c      	bhi.n	80055c8 <TouchWSLedActivity+0xf4>
					{
						if(NrOfLeds < 98)
 800556e:	4b8f      	ldr	r3, [pc, #572]	; (80057ac <TouchWSLedActivity+0x2d8>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b61      	cmp	r3, #97	; 0x61
 8005574:	d806      	bhi.n	8005584 <TouchWSLedActivity+0xb0>
						{
							NrOfLeds++;
 8005576:	4b8d      	ldr	r3, [pc, #564]	; (80057ac <TouchWSLedActivity+0x2d8>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	3301      	adds	r3, #1
 800557c:	b2da      	uxtb	r2, r3
 800557e:	4b8b      	ldr	r3, [pc, #556]	; (80057ac <TouchWSLedActivity+0x2d8>)
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	e002      	b.n	800558a <TouchWSLedActivity+0xb6>
						}
						else
						{
							NrOfLeds = 1;
 8005584:	4b89      	ldr	r3, [pc, #548]	; (80057ac <TouchWSLedActivity+0x2d8>)
 8005586:	2201      	movs	r2, #1
 8005588:	701a      	strb	r2, [r3, #0]
						}
						if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 800558a:	4b88      	ldr	r3, [pc, #544]	; (80057ac <TouchWSLedActivity+0x2d8>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b09      	cmp	r3, #9
 8005590:	d807      	bhi.n	80055a2 <TouchWSLedActivity+0xce>
 8005592:	4b86      	ldr	r3, [pc, #536]	; (80057ac <TouchWSLedActivity+0x2d8>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	4988      	ldr	r1, [pc, #544]	; (80057bc <TouchWSLedActivity+0x2e8>)
 800559a:	4889      	ldr	r0, [pc, #548]	; (80057c0 <TouchWSLedActivity+0x2ec>)
 800559c:	f008 ffb2 	bl	800e504 <siprintf>
 80055a0:	e006      	b.n	80055b0 <TouchWSLedActivity+0xdc>
						else sprintf((char*)Msg, " %d", NrOfLeds);
 80055a2:	4b82      	ldr	r3, [pc, #520]	; (80057ac <TouchWSLedActivity+0x2d8>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	4986      	ldr	r1, [pc, #536]	; (80057c4 <TouchWSLedActivity+0x2f0>)
 80055aa:	4885      	ldr	r0, [pc, #532]	; (80057c0 <TouchWSLedActivity+0x2ec>)
 80055ac:	f008 ffaa 	bl	800e504 <siprintf>
						EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80055b0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	2301      	movs	r3, #1
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	2300      	movs	r3, #0
 80055bc:	223c      	movs	r2, #60	; 0x3c
 80055be:	21ac      	movs	r1, #172	; 0xac
 80055c0:	487f      	ldr	r0, [pc, #508]	; (80057c0 <TouchWSLedActivity+0x2ec>)
 80055c2:	f7fc faaf 	bl	8001b24 <EF_PutString>
 80055c6:	e076      	b.n	80056b6 <TouchWSLedActivity+0x1e2>
					}
					else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	2bfb      	cmp	r3, #251	; 0xfb
 80055cc:	d941      	bls.n	8005652 <TouchWSLedActivity+0x17e>
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 80055d4:	d83d      	bhi.n	8005652 <TouchWSLedActivity+0x17e>
					{
						if(NrOfLeds < 90)
 80055d6:	4b75      	ldr	r3, [pc, #468]	; (80057ac <TouchWSLedActivity+0x2d8>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b59      	cmp	r3, #89	; 0x59
 80055dc:	d806      	bhi.n	80055ec <TouchWSLedActivity+0x118>
						{
							NrOfLeds = NrOfLeds + 10;
 80055de:	4b73      	ldr	r3, [pc, #460]	; (80057ac <TouchWSLedActivity+0x2d8>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	330a      	adds	r3, #10
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	4b71      	ldr	r3, [pc, #452]	; (80057ac <TouchWSLedActivity+0x2d8>)
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	e013      	b.n	8005614 <TouchWSLedActivity+0x140>
						}
						else
						{
							NrOfLeds = (NrOfLeds + 10) % 99;
 80055ec:	4b6f      	ldr	r3, [pc, #444]	; (80057ac <TouchWSLedActivity+0x2d8>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	f103 020a 	add.w	r2, r3, #10
 80055f4:	4b74      	ldr	r3, [pc, #464]	; (80057c8 <TouchWSLedActivity+0x2f4>)
 80055f6:	fb83 1302 	smull	r1, r3, r3, r2
 80055fa:	4413      	add	r3, r2
 80055fc:	1199      	asrs	r1, r3, #6
 80055fe:	17d3      	asrs	r3, r2, #31
 8005600:	1ac9      	subs	r1, r1, r3
 8005602:	460b      	mov	r3, r1
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	440b      	add	r3, r1
 8005608:	0159      	lsls	r1, r3, #5
 800560a:	440b      	add	r3, r1
 800560c:	1ad1      	subs	r1, r2, r3
 800560e:	b2ca      	uxtb	r2, r1
 8005610:	4b66      	ldr	r3, [pc, #408]	; (80057ac <TouchWSLedActivity+0x2d8>)
 8005612:	701a      	strb	r2, [r3, #0]
						}
					// Display String
					if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8005614:	4b65      	ldr	r3, [pc, #404]	; (80057ac <TouchWSLedActivity+0x2d8>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b09      	cmp	r3, #9
 800561a:	d807      	bhi.n	800562c <TouchWSLedActivity+0x158>
 800561c:	4b63      	ldr	r3, [pc, #396]	; (80057ac <TouchWSLedActivity+0x2d8>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	4966      	ldr	r1, [pc, #408]	; (80057bc <TouchWSLedActivity+0x2e8>)
 8005624:	4866      	ldr	r0, [pc, #408]	; (80057c0 <TouchWSLedActivity+0x2ec>)
 8005626:	f008 ff6d 	bl	800e504 <siprintf>
 800562a:	e006      	b.n	800563a <TouchWSLedActivity+0x166>
					else sprintf((char*)Msg, " %d", NrOfLeds);
 800562c:	4b5f      	ldr	r3, [pc, #380]	; (80057ac <TouchWSLedActivity+0x2d8>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	4964      	ldr	r1, [pc, #400]	; (80057c4 <TouchWSLedActivity+0x2f0>)
 8005634:	4862      	ldr	r0, [pc, #392]	; (80057c0 <TouchWSLedActivity+0x2ec>)
 8005636:	f008 ff65 	bl	800e504 <siprintf>
					EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800563a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	2301      	movs	r3, #1
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	223c      	movs	r2, #60	; 0x3c
 8005648:	21ac      	movs	r1, #172	; 0xac
 800564a:	485d      	ldr	r0, [pc, #372]	; (80057c0 <TouchWSLedActivity+0x2ec>)
 800564c:	f7fc fa6a 	bl	8001b24 <EF_PutString>
 8005650:	e031      	b.n	80056b6 <TouchWSLedActivity+0x1e2>
					}


					else if((x >= WS_LED_BUTTON_3_X)&&(x <= (WS_LED_BUTTON_3_X + WS_LED_BUTTON_W))) // OK - confirm and send number of LEDs
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8005658:	f240 80d6 	bls.w	8005808 <TouchWSLedActivity+0x334>
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8005662:	f080 80d1 	bcs.w	8005808 <TouchWSLedActivity+0x334>
					{
						SendComand(UCMD_WS_NUMBER_LED);
 8005666:	2025      	movs	r0, #37	; 0x25
 8005668:	f000 fb74 	bl	8005d54 <SendComand>
						EF_SetFont(&arial_11ptFontInfo);
 800566c:	4857      	ldr	r0, [pc, #348]	; (80057cc <TouchWSLedActivity+0x2f8>)
 800566e:	f7fc f83f 	bl	80016f0 <EF_SetFont>
						GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005672:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	2305      	movs	r3, #5
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	2315      	movs	r3, #21
 800567e:	221e      	movs	r2, #30
 8005680:	2141      	movs	r1, #65	; 0x41
 8005682:	f240 101f 	movw	r0, #287	; 0x11f
 8005686:	f7fb ffe2 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OK");
 800568a:	4951      	ldr	r1, [pc, #324]	; (80057d0 <TouchWSLedActivity+0x2fc>)
 800568c:	484c      	ldr	r0, [pc, #304]	; (80057c0 <TouchWSLedActivity+0x2ec>)
 800568e:	f008 ff39 	bl	800e504 <siprintf>
						EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005692:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005696:	9301      	str	r3, [sp, #4]
 8005698:	2300      	movs	r3, #0
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	2300      	movs	r3, #0
 800569e:	2243      	movs	r2, #67	; 0x43
 80056a0:	f240 1123 	movw	r1, #291	; 0x123
 80056a4:	4846      	ldr	r0, [pc, #280]	; (80057c0 <TouchWSLedActivity+0x2ec>)
 80056a6:	f7fc fa3d 	bl	8001b24 <EF_PutString>
						// Write chosen number of LEDs to EEPROM memory
						eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
 80056aa:	2201      	movs	r2, #1
 80056ac:	493f      	ldr	r1, [pc, #252]	; (80057ac <TouchWSLedActivity+0x2d8>)
 80056ae:	2001      	movs	r0, #1
 80056b0:	f7fd f91e 	bl	80028f0 <eeprom_write>
					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 80056b4:	e0a8      	b.n	8005808 <TouchWSLedActivity+0x334>
 80056b6:	e0a7      	b.n	8005808 <TouchWSLedActivity+0x334>
				}

				//
				// Check if it is second line button to change LEDs to WHITE
				//
				else if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 80056b8:	88bb      	ldrh	r3, [r7, #4]
 80056ba:	2b5e      	cmp	r3, #94	; 0x5e
 80056bc:	d924      	bls.n	8005708 <TouchWSLedActivity+0x234>
 80056be:	88bb      	ldrh	r3, [r7, #4]
 80056c0:	2b74      	cmp	r3, #116	; 0x74
 80056c2:	d821      	bhi.n	8005708 <TouchWSLedActivity+0x234>
				{
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80056c4:	88fb      	ldrh	r3, [r7, #6]
 80056c6:	2b95      	cmp	r3, #149	; 0x95
 80056c8:	d906      	bls.n	80056d8 <TouchWSLedActivity+0x204>
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	2bbe      	cmp	r3, #190	; 0xbe
 80056ce:	d803      	bhi.n	80056d8 <TouchWSLedActivity+0x204>
					{
						SendComand(UCMD_WS_LED_WHITE_MAX);
 80056d0:	201d      	movs	r0, #29
 80056d2:	f000 fb3f 	bl	8005d54 <SendComand>
 80056d6:	e016      	b.n	8005706 <TouchWSLedActivity+0x232>
					}
					else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 80056d8:	88fb      	ldrh	r3, [r7, #6]
 80056da:	2bc9      	cmp	r3, #201	; 0xc9
 80056dc:	d906      	bls.n	80056ec <TouchWSLedActivity+0x218>
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	2bf2      	cmp	r3, #242	; 0xf2
 80056e2:	d803      	bhi.n	80056ec <TouchWSLedActivity+0x218>
					{
						SendComand(UCMD_WS_LED_WHITE_MID);
 80056e4:	201e      	movs	r0, #30
 80056e6:	f000 fb35 	bl	8005d54 <SendComand>
 80056ea:	e00c      	b.n	8005706 <TouchWSLedActivity+0x232>
					}
					else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80056ec:	88fb      	ldrh	r3, [r7, #6]
 80056ee:	2bfd      	cmp	r3, #253	; 0xfd
 80056f0:	f240 808c 	bls.w	800580c <TouchWSLedActivity+0x338>
 80056f4:	88fb      	ldrh	r3, [r7, #6]
 80056f6:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80056fa:	f200 8087 	bhi.w	800580c <TouchWSLedActivity+0x338>
					{
						SendComand(UCMD_WS_LED_WHITE_MIN);
 80056fe:	201f      	movs	r0, #31
 8005700:	f000 fb28 	bl	8005d54 <SendComand>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005704:	e082      	b.n	800580c <TouchWSLedActivity+0x338>
 8005706:	e081      	b.n	800580c <TouchWSLedActivity+0x338>
				}

				//
				// Check if it is third line button to change LEDs to BLUE
				//
				else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 8005708:	88bb      	ldrh	r3, [r7, #4]
 800570a:	2b7c      	cmp	r3, #124	; 0x7c
 800570c:	d922      	bls.n	8005754 <TouchWSLedActivity+0x280>
 800570e:	88bb      	ldrh	r3, [r7, #4]
 8005710:	2b92      	cmp	r3, #146	; 0x92
 8005712:	d81f      	bhi.n	8005754 <TouchWSLedActivity+0x280>
				{
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	2b95      	cmp	r3, #149	; 0x95
 8005718:	d906      	bls.n	8005728 <TouchWSLedActivity+0x254>
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	2bbe      	cmp	r3, #190	; 0xbe
 800571e:	d803      	bhi.n	8005728 <TouchWSLedActivity+0x254>
					{
						SendComand(UCMD_WS_LED_BLUE_MAX);
 8005720:	2020      	movs	r0, #32
 8005722:	f000 fb17 	bl	8005d54 <SendComand>
 8005726:	e014      	b.n	8005752 <TouchWSLedActivity+0x27e>
					}
					else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	2bc9      	cmp	r3, #201	; 0xc9
 800572c:	d906      	bls.n	800573c <TouchWSLedActivity+0x268>
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	2bf2      	cmp	r3, #242	; 0xf2
 8005732:	d803      	bhi.n	800573c <TouchWSLedActivity+0x268>
					{
						SendComand(UCMD_WS_LED_BLUE_MID);
 8005734:	2021      	movs	r0, #33	; 0x21
 8005736:	f000 fb0d 	bl	8005d54 <SendComand>
 800573a:	e00a      	b.n	8005752 <TouchWSLedActivity+0x27e>
					}
					else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 800573c:	88fb      	ldrh	r3, [r7, #6]
 800573e:	2bfd      	cmp	r3, #253	; 0xfd
 8005740:	d966      	bls.n	8005810 <TouchWSLedActivity+0x33c>
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8005748:	d862      	bhi.n	8005810 <TouchWSLedActivity+0x33c>
					{
						SendComand(UCMD_WS_LED_BLUE_MIN);
 800574a:	2022      	movs	r0, #34	; 0x22
 800574c:	f000 fb02 	bl	8005d54 <SendComand>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005750:	e05e      	b.n	8005810 <TouchWSLedActivity+0x33c>
 8005752:	e05d      	b.n	8005810 <TouchWSLedActivity+0x33c>
				}

				//
				// Check if it is fourth line button to change LEDs to Predefined
				//
				else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8005754:	88bb      	ldrh	r3, [r7, #4]
 8005756:	2b9b      	cmp	r3, #155	; 0x9b
 8005758:	d93c      	bls.n	80057d4 <TouchWSLedActivity+0x300>
 800575a:	88bb      	ldrh	r3, [r7, #4]
 800575c:	2bb1      	cmp	r3, #177	; 0xb1
 800575e:	d839      	bhi.n	80057d4 <TouchWSLedActivity+0x300>
				{
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8005760:	88fb      	ldrh	r3, [r7, #6]
 8005762:	2b13      	cmp	r3, #19
 8005764:	d906      	bls.n	8005774 <TouchWSLedActivity+0x2a0>
 8005766:	88fb      	ldrh	r3, [r7, #6]
 8005768:	2b64      	cmp	r3, #100	; 0x64
 800576a:	d803      	bhi.n	8005774 <TouchWSLedActivity+0x2a0>
					{
						SendComand(UCMD_WS_LED_DAILY);
 800576c:	2023      	movs	r0, #35	; 0x23
 800576e:	f000 faf1 	bl	8005d54 <SendComand>
 8005772:	e014      	b.n	800579e <TouchWSLedActivity+0x2ca>
					}
					else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8005774:	88fb      	ldrh	r3, [r7, #6]
 8005776:	2b77      	cmp	r3, #119	; 0x77
 8005778:	d906      	bls.n	8005788 <TouchWSLedActivity+0x2b4>
 800577a:	88fb      	ldrh	r3, [r7, #6]
 800577c:	2bc8      	cmp	r3, #200	; 0xc8
 800577e:	d803      	bhi.n	8005788 <TouchWSLedActivity+0x2b4>
					{
						SendComand(UCMD_WS_LED_WHITE_OFF);
 8005780:	201c      	movs	r0, #28
 8005782:	f000 fae7 	bl	8005d54 <SendComand>
 8005786:	e00a      	b.n	800579e <TouchWSLedActivity+0x2ca>
					}
					else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 8005788:	88fb      	ldrh	r3, [r7, #6]
 800578a:	2bdb      	cmp	r3, #219	; 0xdb
 800578c:	d942      	bls.n	8005814 <TouchWSLedActivity+0x340>
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005794:	d83e      	bhi.n	8005814 <TouchWSLedActivity+0x340>
					{
						SendComand(UCMD_WS_LED_NIGHT);
 8005796:	2024      	movs	r0, #36	; 0x24
 8005798:	f000 fadc 	bl	8005d54 <SendComand>
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 800579c:	e03a      	b.n	8005814 <TouchWSLedActivity+0x340>
 800579e:	e039      	b.n	8005814 <TouchWSLedActivity+0x340>
 80057a0:	080151b0 	.word	0x080151b0
 80057a4:	20000254 	.word	0x20000254
 80057a8:	20000250 	.word	0x20000250
 80057ac:	20000032 	.word	0x20000032
 80057b0:	20000251 	.word	0x20000251
 80057b4:	20000258 	.word	0x20000258
 80057b8:	2000024f 	.word	0x2000024f
 80057bc:	08012440 	.word	0x08012440
 80057c0:	200002c4 	.word	0x200002c4
 80057c4:	08012448 	.word	0x08012448
 80057c8:	a57eb503 	.word	0xa57eb503
 80057cc:	08013238 	.word	0x08013238
 80057d0:	0801244c 	.word	0x0801244c
				}

				//
				// Check if it is fifth line button to change LEDs to Predefined animations
				//
				else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 80057d4:	88bb      	ldrh	r3, [r7, #4]
 80057d6:	2bba      	cmp	r3, #186	; 0xba
 80057d8:	d91d      	bls.n	8005816 <TouchWSLedActivity+0x342>
 80057da:	88bb      	ldrh	r3, [r7, #4]
 80057dc:	2bd0      	cmp	r3, #208	; 0xd0
 80057de:	d81a      	bhi.n	8005816 <TouchWSLedActivity+0x342>
				{
					if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80057e0:	88fb      	ldrh	r3, [r7, #6]
 80057e2:	2b45      	cmp	r3, #69	; 0x45
 80057e4:	d906      	bls.n	80057f4 <TouchWSLedActivity+0x320>
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	2b96      	cmp	r3, #150	; 0x96
 80057ea:	d803      	bhi.n	80057f4 <TouchWSLedActivity+0x320>
					{
						SendComand(UCMD_WS_ANIMATION_SUNRISE);
 80057ec:	2026      	movs	r0, #38	; 0x26
 80057ee:	f000 fab1 	bl	8005d54 <SendComand>
 80057f2:	e010      	b.n	8005816 <TouchWSLedActivity+0x342>
					}
					else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 80057f4:	88fb      	ldrh	r3, [r7, #6]
 80057f6:	2ba9      	cmp	r3, #169	; 0xa9
 80057f8:	d90d      	bls.n	8005816 <TouchWSLedActivity+0x342>
 80057fa:	88fb      	ldrh	r3, [r7, #6]
 80057fc:	2bfa      	cmp	r3, #250	; 0xfa
 80057fe:	d80a      	bhi.n	8005816 <TouchWSLedActivity+0x342>
					{
						SendComand(UCMD_WS_ANIMATION_SUNSET);
 8005800:	2027      	movs	r0, #39	; 0x27
 8005802:	f000 faa7 	bl	8005d54 <SendComand>
 8005806:	e006      	b.n	8005816 <TouchWSLedActivity+0x342>
					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8005808:	bf00      	nop
 800580a:	e004      	b.n	8005816 <TouchWSLedActivity+0x342>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 800580c:	bf00      	nop
 800580e:	e002      	b.n	8005816 <TouchWSLedActivity+0x342>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005810:	bf00      	nop
 8005812:	e000      	b.n	8005816 <TouchWSLedActivity+0x342>
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8005814:	bf00      	nop
					}
				}
				TimerTouch = HAL_GetTick();
 8005816:	f001 faad 	bl	8006d74 <HAL_GetTick>
 800581a:	4603      	mov	r3, r0
 800581c:	4a02      	ldr	r2, [pc, #8]	; (8005828 <TouchWSLedActivity+0x354>)
 800581e:	6013      	str	r3, [r2, #0]
			}
		}
}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000254 	.word	0x20000254

0800582c <UART_ParseLine>:
 * 	22	=>	LIGHTSSTATUS=?\n	// Podaj stan wszytskich swiatel
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b094      	sub	sp, #80	; 0x50
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8005834:	f107 0308 	add.w	r3, r7, #8
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f001 f842 	bl	80068c4 <UARTDMA_GetLineFromReceiveBuffer>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d155      	bne.n	80058f2 <UART_ParseLine+0xc6>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8005846:	f107 0308 	add.w	r3, r7, #8
 800584a:	492c      	ldr	r1, [pc, #176]	; (80058fc <UART_ParseLine+0xd0>)
 800584c:	4618      	mov	r0, r3
 800584e:	f009 fcb3 	bl	800f1b8 <strtok>
 8005852:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8005854:	492a      	ldr	r1, [pc, #168]	; (8005900 <UART_ParseLine+0xd4>)
 8005856:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005858:	f7fa fcc2 	bl	80001e0 <strcmp>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8005862:	f000 f85d 	bl	8005920 <UART_ParseLED>
	  {
		  UART_ParseAnswLightsStateStatus();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8005866:	e044      	b.n	80058f2 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8005868:	4926      	ldr	r1, [pc, #152]	; (8005904 <UART_ParseLine+0xd8>)
 800586a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800586c:	f7fa fcb8 	bl	80001e0 <strcmp>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d102      	bne.n	800587c <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8005876:	f000 f8a1 	bl	80059bc <UART_ParseAnswStatus>
}
 800587a:	e03a      	b.n	80058f2 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 800587c:	4922      	ldr	r1, [pc, #136]	; (8005908 <UART_ParseLine+0xdc>)
 800587e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005880:	f7fa fcae 	bl	80001e0 <strcmp>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d102      	bne.n	8005890 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 800588a:	f000 f89f 	bl	80059cc <UART_ParseAnswTemp>
}
 800588e:	e030      	b.n	80058f2 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8005890:	491e      	ldr	r1, [pc, #120]	; (800590c <UART_ParseLine+0xe0>)
 8005892:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005894:	f7fa fca4 	bl	80001e0 <strcmp>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 800589e:	f000 f939 	bl	8005b14 <UART_ParseAnswPres>
}
 80058a2:	e026      	b.n	80058f2 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 80058a4:	491a      	ldr	r1, [pc, #104]	; (8005910 <UART_ParseLine+0xe4>)
 80058a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80058a8:	f7fa fc9a 	bl	80001e0 <strcmp>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 80058b2:	f000 f975 	bl	8005ba0 <UART_ParseAnswChangeRelayState>
}
 80058b6:	e01c      	b.n	80058f2 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 80058b8:	4916      	ldr	r1, [pc, #88]	; (8005914 <UART_ParseLine+0xe8>)
 80058ba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80058bc:	f7fa fc90 	bl	80001e0 <strcmp>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d102      	bne.n	80058cc <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 80058c6:	f000 f972 	bl	8005bae <UART_ParseAnswChangeLightState>
}
 80058ca:	e012      	b.n	80058f2 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 80058cc:	4912      	ldr	r1, [pc, #72]	; (8005918 <UART_ParseLine+0xec>)
 80058ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80058d0:	f7fa fc86 	bl	80001e0 <strcmp>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d102      	bne.n	80058e0 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 80058da:	f000 f96f 	bl	8005bbc <UART_ParseAnswRelayStateStatus>
}
 80058de:	e008      	b.n	80058f2 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 80058e0:	490e      	ldr	r1, [pc, #56]	; (800591c <UART_ParseLine+0xf0>)
 80058e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80058e4:	f7fa fc7c 	bl	80001e0 <strcmp>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <UART_ParseLine+0xc6>
		  UART_ParseAnswLightsStateStatus();
 80058ee:	f000 f9cb 	bl	8005c88 <UART_ParseAnswLightsStateStatus>
}
 80058f2:	bf00      	nop
 80058f4:	3750      	adds	r7, #80	; 0x50
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	08012450 	.word	0x08012450
 8005900:	08012454 	.word	0x08012454
 8005904:	08012458 	.word	0x08012458
 8005908:	08012460 	.word	0x08012460
 800590c:	08012468 	.word	0x08012468
 8005910:	08012470 	.word	0x08012470
 8005914:	0801247c 	.word	0x0801247c
 8005918:	08012488 	.word	0x08012488
 800591c:	08012494 	.word	0x08012494

08005920 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8005926:	491f      	ldr	r1, [pc, #124]	; (80059a4 <UART_ParseLED+0x84>)
 8005928:	2000      	movs	r0, #0
 800592a:	f009 fc45 	bl	800f1b8 <strtok>
 800592e:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d031      	beq.n	800599c <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b2f      	cmp	r3, #47	; 0x2f
 800593e:	d903      	bls.n	8005948 <UART_ParseLED+0x28>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b39      	cmp	r3, #57	; 0x39
 8005946:	d904      	bls.n	8005952 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8005948:	4917      	ldr	r1, [pc, #92]	; (80059a8 <UART_ParseLED+0x88>)
 800594a:	4818      	ldr	r0, [pc, #96]	; (80059ac <UART_ParseLED+0x8c>)
 800594c:	f000 ffeb 	bl	8006926 <UARTDMA_Print>
			return;	// And exit parsing
 8005950:	e024      	b.n	800599c <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f007 ff1f 	bl	800d796 <atoi>
 8005958:	4603      	mov	r3, r0
 800595a:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d10a      	bne.n	8005978 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8005962:	2200      	movs	r2, #0
 8005964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005968:	4811      	ldr	r0, [pc, #68]	; (80059b0 <UART_ParseLED+0x90>)
 800596a:	f002 f97f 	bl	8007c6c <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 800596e:	4911      	ldr	r1, [pc, #68]	; (80059b4 <UART_ParseLED+0x94>)
 8005970:	480e      	ldr	r0, [pc, #56]	; (80059ac <UART_ParseLED+0x8c>)
 8005972:	f000 ffd8 	bl	8006926 <UARTDMA_Print>
 8005976:	e011      	b.n	800599c <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10a      	bne.n	8005994 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 800597e:	2201      	movs	r2, #1
 8005980:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005984:	480a      	ldr	r0, [pc, #40]	; (80059b0 <UART_ParseLED+0x90>)
 8005986:	f002 f971 	bl	8007c6c <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 800598a:	490b      	ldr	r1, [pc, #44]	; (80059b8 <UART_ParseLED+0x98>)
 800598c:	4807      	ldr	r0, [pc, #28]	; (80059ac <UART_ParseLED+0x8c>)
 800598e:	f000 ffca 	bl	8006926 <UARTDMA_Print>
 8005992:	e003      	b.n	800599c <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8005994:	4904      	ldr	r1, [pc, #16]	; (80059a8 <UART_ParseLED+0x88>)
 8005996:	4805      	ldr	r0, [pc, #20]	; (80059ac <UART_ParseLED+0x8c>)
 8005998:	f000 ffc5 	bl	8006926 <UARTDMA_Print>
		}
	}
}
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	080124a0 	.word	0x080124a0
 80059a8:	080124a4 	.word	0x080124a4
 80059ac:	2000044c 	.word	0x2000044c
 80059b0:	40020800 	.word	0x40020800
 80059b4:	080124b4 	.word	0x080124b4
 80059b8:	080124c0 	.word	0x080124c0

080059bc <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 80059c0:	bf00      	nop
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
	...

080059cc <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 80059d6:	4947      	ldr	r1, [pc, #284]	; (8005af4 <UART_ParseAnswTemp+0x128>)
 80059d8:	2000      	movs	r0, #0
 80059da:	f009 fbed 	bl	800f1b8 <strtok>
 80059de:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 8081 	beq.w	8005aec <UART_ParseAnswTemp+0x120>
	{
			NrCzujnika = atoi(ParsePointer);
 80059ea:	68b8      	ldr	r0, [r7, #8]
 80059ec:	f007 fed3 	bl	800d796 <atoi>
 80059f0:	4603      	mov	r3, r0
 80059f2:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d010      	beq.n	8005a1e <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80059fc:	493d      	ldr	r1, [pc, #244]	; (8005af4 <UART_ParseAnswTemp+0x128>)
 80059fe:	2000      	movs	r0, #0
 8005a00:	f009 fbda 	bl	800f1b8 <strtok>
 8005a04:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f007 fec2 	bl	800d790 <atof>
 8005a0c:	ec53 2b10 	vmov	r2, r3, d0
 8005a10:	4610      	mov	r0, r2
 8005a12:	4619      	mov	r1, r3
 8005a14:	f7fb f900 	bl	8000c18 <__aeabi_d2f>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	4a37      	ldr	r2, [pc, #220]	; (8005af8 <UART_ParseAnswTemp+0x12c>)
 8005a1c:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 8005a1e:	4b37      	ldr	r3, [pc, #220]	; (8005afc <UART_ParseAnswTemp+0x130>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d162      	bne.n	8005aec <UART_ParseAnswTemp+0x120>
			{
				if(NrCzujnika == 1)
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d119      	bne.n	8005a60 <UART_ParseAnswTemp+0x94>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 8005a2c:	4834      	ldr	r0, [pc, #208]	; (8005b00 <UART_ParseAnswTemp+0x134>)
 8005a2e:	f7fb fe5f 	bl	80016f0 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 8005a32:	4b31      	ldr	r3, [pc, #196]	; (8005af8 <UART_ParseAnswTemp+0x12c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fa fd9e 	bl	8000578 <__aeabi_f2d>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4930      	ldr	r1, [pc, #192]	; (8005b04 <UART_ParseAnswTemp+0x138>)
 8005a42:	4831      	ldr	r0, [pc, #196]	; (8005b08 <UART_ParseAnswTemp+0x13c>)
 8005a44:	f008 fd5e 	bl	800e504 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005a48:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	2301      	movs	r3, #1
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	2300      	movs	r3, #0
 8005a54:	2250      	movs	r2, #80	; 0x50
 8005a56:	2114      	movs	r1, #20
 8005a58:	482b      	ldr	r0, [pc, #172]	; (8005b08 <UART_ParseAnswTemp+0x13c>)
 8005a5a:	f7fc f863 	bl	8001b24 <EF_PutString>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 8005a5e:	e045      	b.n	8005aec <UART_ParseAnswTemp+0x120>
				else if(NrCzujnika == 2)
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d142      	bne.n	8005aec <UART_ParseAnswTemp+0x120>
						if (CTemp == 0.0) // Error in connection to ds18b20
 8005a66:	4b24      	ldr	r3, [pc, #144]	; (8005af8 <UART_ParseAnswTemp+0x12c>)
 8005a68:	edd3 7a00 	vldr	s15, [r3]
 8005a6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a74:	d11d      	bne.n	8005ab2 <UART_ParseAnswTemp+0xe6>
							CTemp = LCTemp;
 8005a76:	4b25      	ldr	r3, [pc, #148]	; (8005b0c <UART_ParseAnswTemp+0x140>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1f      	ldr	r2, [pc, #124]	; (8005af8 <UART_ParseAnswTemp+0x12c>)
 8005a7c:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 8005a7e:	4820      	ldr	r0, [pc, #128]	; (8005b00 <UART_ParseAnswTemp+0x134>)
 8005a80:	f7fb fe36 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8005a84:	4b1c      	ldr	r3, [pc, #112]	; (8005af8 <UART_ParseAnswTemp+0x12c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fa fd75 	bl	8000578 <__aeabi_f2d>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	491f      	ldr	r1, [pc, #124]	; (8005b10 <UART_ParseAnswTemp+0x144>)
 8005a94:	481c      	ldr	r0, [pc, #112]	; (8005b08 <UART_ParseAnswTemp+0x13c>)
 8005a96:	f008 fd35 	bl	800e504 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005a9a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005a9e:	9301      	str	r3, [sp, #4]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	226e      	movs	r2, #110	; 0x6e
 8005aa8:	2114      	movs	r1, #20
 8005aaa:	4817      	ldr	r0, [pc, #92]	; (8005b08 <UART_ParseAnswTemp+0x13c>)
 8005aac:	f7fc f83a 	bl	8001b24 <EF_PutString>
	}
 8005ab0:	e01c      	b.n	8005aec <UART_ParseAnswTemp+0x120>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8005ab2:	4813      	ldr	r0, [pc, #76]	; (8005b00 <UART_ParseAnswTemp+0x134>)
 8005ab4:	f7fb fe1c 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8005ab8:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <UART_ParseAnswTemp+0x12c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fa fd5b 	bl	8000578 <__aeabi_f2d>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4912      	ldr	r1, [pc, #72]	; (8005b10 <UART_ParseAnswTemp+0x144>)
 8005ac8:	480f      	ldr	r0, [pc, #60]	; (8005b08 <UART_ParseAnswTemp+0x13c>)
 8005aca:	f008 fd1b 	bl	800e504 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005ace:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	226e      	movs	r2, #110	; 0x6e
 8005adc:	2114      	movs	r1, #20
 8005ade:	480a      	ldr	r0, [pc, #40]	; (8005b08 <UART_ParseAnswTemp+0x13c>)
 8005ae0:	f7fc f820 	bl	8001b24 <EF_PutString>
							LCTemp = CTemp;
 8005ae4:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <UART_ParseAnswTemp+0x12c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a08      	ldr	r2, [pc, #32]	; (8005b0c <UART_ParseAnswTemp+0x140>)
 8005aea:	6013      	str	r3, [r2, #0]
	}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	080124a0 	.word	0x080124a0
 8005af8:	2000025c 	.word	0x2000025c
 8005afc:	20000258 	.word	0x20000258
 8005b00:	080151b0 	.word	0x080151b0
 8005b04:	080124cc 	.word	0x080124cc
 8005b08:	200002c4 	.word	0x200002c4
 8005b0c:	20000260 	.word	0x20000260
 8005b10:	080124e0 	.word	0x080124e0

08005b14 <UART_ParseAnswPres>:

//
// Parsing information about current presure
//"APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8005b1a:	491b      	ldr	r1, [pc, #108]	; (8005b88 <UART_ParseAnswPres+0x74>)
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f009 fb4b 	bl	800f1b8 <strtok>
 8005b22:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d028      	beq.n	8005b7e <UART_ParseAnswPres+0x6a>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f007 fe2f 	bl	800d790 <atof>
 8005b32:	ec53 2b10 	vmov	r2, r3, d0
 8005b36:	4610      	mov	r0, r2
 8005b38:	4619      	mov	r1, r3
 8005b3a:	f7fb f86d 	bl	8000c18 <__aeabi_d2f>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <UART_ParseAnswPres+0x78>)
 8005b42:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8005b44:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <UART_ParseAnswPres+0x7c>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d118      	bne.n	8005b7e <UART_ParseAnswPres+0x6a>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8005b4c:	4811      	ldr	r0, [pc, #68]	; (8005b94 <UART_ParseAnswPres+0x80>)
 8005b4e:	f7fb fdcf 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8005b52:	4b0e      	ldr	r3, [pc, #56]	; (8005b8c <UART_ParseAnswPres+0x78>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fa fd0e 	bl	8000578 <__aeabi_f2d>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	490d      	ldr	r1, [pc, #52]	; (8005b98 <UART_ParseAnswPres+0x84>)
 8005b62:	480e      	ldr	r0, [pc, #56]	; (8005b9c <UART_ParseAnswPres+0x88>)
 8005b64:	f008 fcce 	bl	800e504 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005b68:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	2301      	movs	r3, #1
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	2300      	movs	r3, #0
 8005b74:	22aa      	movs	r2, #170	; 0xaa
 8005b76:	2114      	movs	r1, #20
 8005b78:	4808      	ldr	r0, [pc, #32]	; (8005b9c <UART_ParseAnswPres+0x88>)
 8005b7a:	f7fb ffd3 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8005b7e:	bf00      	nop
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	080124a0 	.word	0x080124a0
 8005b8c:	20000264 	.word	0x20000264
 8005b90:	20000258 	.word	0x20000258
 8005b94:	080151b0 	.word	0x080151b0
 8005b98:	080124f4 	.word	0x080124f4
 8005b9c:	200002c4 	.word	0x200002c4

08005ba0 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
	//TODO!
}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8005bae:	b480      	push	{r7}
 8005bb0:	af00      	add	r7, sp, #0
	//TODO!
}
 8005bb2:	bf00      	nop
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	71fb      	strb	r3, [r7, #7]
 8005bc6:	e04a      	b.n	8005c5e <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8005bc8:	4928      	ldr	r1, [pc, #160]	; (8005c6c <UART_ParseAnswRelayStateStatus+0xb0>)
 8005bca:	2000      	movs	r0, #0
 8005bcc:	f009 faf4 	bl	800f1b8 <strtok>
 8005bd0:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d02f      	beq.n	8005c3a <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005bda:	2300      	movs	r3, #0
 8005bdc:	71bb      	strb	r3, [r7, #6]
 8005bde:	e025      	b.n	8005c2c <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8005be0:	79bb      	ldrb	r3, [r7, #6]
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	4413      	add	r3, r2
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b2f      	cmp	r3, #47	; 0x2f
 8005bea:	d905      	bls.n	8005bf8 <UART_ParseAnswRelayStateStatus+0x3c>
 8005bec:	79bb      	ldrb	r3, [r7, #6]
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b39      	cmp	r3, #57	; 0x39
 8005bf6:	d90e      	bls.n	8005c16 <UART_ParseAnswRelayStateStatus+0x5a>
 8005bf8:	79bb      	ldrb	r3, [r7, #6]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b2e      	cmp	r3, #46	; 0x2e
 8005c02:	d008      	beq.n	8005c16 <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8005c04:	491a      	ldr	r1, [pc, #104]	; (8005c70 <UART_ParseAnswRelayStateStatus+0xb4>)
 8005c06:	481b      	ldr	r0, [pc, #108]	; (8005c74 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005c08:	f008 fc7c 	bl	800e504 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8005c0c:	4919      	ldr	r1, [pc, #100]	; (8005c74 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005c0e:	481a      	ldr	r0, [pc, #104]	; (8005c78 <UART_ParseAnswRelayStateStatus+0xbc>)
 8005c10:	f000 fe89 	bl	8006926 <UARTDMA_Print>
					return;	// And exit parsing
 8005c14:	e026      	b.n	8005c64 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8005c16:	6838      	ldr	r0, [r7, #0]
 8005c18:	f007 fdbd 	bl	800d796 <atoi>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	b2d1      	uxtb	r1, r2
 8005c22:	4a16      	ldr	r2, [pc, #88]	; (8005c7c <UART_ParseAnswRelayStateStatus+0xc0>)
 8005c24:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005c26:	79bb      	ldrb	r3, [r7, #6]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	71bb      	strb	r3, [r7, #6]
 8005c2c:	79bb      	ldrb	r3, [r7, #6]
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	4413      	add	r3, r2
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1d3      	bne.n	8005be0 <UART_ParseAnswRelayStateStatus+0x24>
 8005c38:	e008      	b.n	8005c4c <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8005c3a:	4911      	ldr	r1, [pc, #68]	; (8005c80 <UART_ParseAnswRelayStateStatus+0xc4>)
 8005c3c:	480d      	ldr	r0, [pc, #52]	; (8005c74 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005c3e:	f008 fc61 	bl	800e504 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8005c42:	490c      	ldr	r1, [pc, #48]	; (8005c74 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005c44:	480c      	ldr	r0, [pc, #48]	; (8005c78 <UART_ParseAnswRelayStateStatus+0xbc>)
 8005c46:	f000 fe6e 	bl	8006926 <UARTDMA_Print>
			return;	// And exit parsing
 8005c4a:	e00b      	b.n	8005c64 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8005c4c:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <UART_ParseAnswRelayStateStatus+0xc8>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d101      	bne.n	8005c58 <UART_ParseAnswRelayStateStatus+0x9c>
 8005c54:	f7fe f802 	bl	8003c5c <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	71fb      	strb	r3, [r7, #7]
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d9b1      	bls.n	8005bc8 <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	080124a0 	.word	0x080124a0
 8005c70:	0801250c 	.word	0x0801250c
 8005c74:	20000560 	.word	0x20000560
 8005c78:	2000044c 	.word	0x2000044c
 8005c7c:	20000270 	.word	0x20000270
 8005c80:	08012520 	.word	0x08012520
 8005c84:	20000258 	.word	0x20000258

08005c88 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8005c8e:	2300      	movs	r3, #0
 8005c90:	71fb      	strb	r3, [r7, #7]
 8005c92:	e04a      	b.n	8005d2a <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8005c94:	4928      	ldr	r1, [pc, #160]	; (8005d38 <UART_ParseAnswLightsStateStatus+0xb0>)
 8005c96:	2000      	movs	r0, #0
 8005c98:	f009 fa8e 	bl	800f1b8 <strtok>
 8005c9c:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d02f      	beq.n	8005d06 <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	71bb      	strb	r3, [r7, #6]
 8005caa:	e025      	b.n	8005cf8 <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8005cac:	79bb      	ldrb	r3, [r7, #6]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b2f      	cmp	r3, #47	; 0x2f
 8005cb6:	d905      	bls.n	8005cc4 <UART_ParseAnswLightsStateStatus+0x3c>
 8005cb8:	79bb      	ldrb	r3, [r7, #6]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b39      	cmp	r3, #57	; 0x39
 8005cc2:	d90e      	bls.n	8005ce2 <UART_ParseAnswLightsStateStatus+0x5a>
 8005cc4:	79bb      	ldrb	r3, [r7, #6]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	4413      	add	r3, r2
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8005cce:	d008      	beq.n	8005ce2 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8005cd0:	491a      	ldr	r1, [pc, #104]	; (8005d3c <UART_ParseAnswLightsStateStatus+0xb4>)
 8005cd2:	481b      	ldr	r0, [pc, #108]	; (8005d40 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005cd4:	f008 fc16 	bl	800e504 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8005cd8:	4919      	ldr	r1, [pc, #100]	; (8005d40 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005cda:	481a      	ldr	r0, [pc, #104]	; (8005d44 <UART_ParseAnswLightsStateStatus+0xbc>)
 8005cdc:	f000 fe23 	bl	8006926 <UARTDMA_Print>
					return;	// And exit parsing
 8005ce0:	e026      	b.n	8005d30 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8005ce2:	6838      	ldr	r0, [r7, #0]
 8005ce4:	f007 fd57 	bl	800d796 <atoi>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	b2d1      	uxtb	r1, r2
 8005cee:	4a16      	ldr	r2, [pc, #88]	; (8005d48 <UART_ParseAnswLightsStateStatus+0xc0>)
 8005cf0:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005cf2:	79bb      	ldrb	r3, [r7, #6]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	71bb      	strb	r3, [r7, #6]
 8005cf8:	79bb      	ldrb	r3, [r7, #6]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1d3      	bne.n	8005cac <UART_ParseAnswLightsStateStatus+0x24>
 8005d04:	e008      	b.n	8005d18 <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8005d06:	4911      	ldr	r1, [pc, #68]	; (8005d4c <UART_ParseAnswLightsStateStatus+0xc4>)
 8005d08:	480d      	ldr	r0, [pc, #52]	; (8005d40 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005d0a:	f008 fbfb 	bl	800e504 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8005d0e:	490c      	ldr	r1, [pc, #48]	; (8005d40 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005d10:	480c      	ldr	r0, [pc, #48]	; (8005d44 <UART_ParseAnswLightsStateStatus+0xbc>)
 8005d12:	f000 fe08 	bl	8006926 <UARTDMA_Print>
			return;	// And exit parsing
 8005d16:	e00b      	b.n	8005d30 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 8005d18:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <UART_ParseAnswLightsStateStatus+0xc8>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b05      	cmp	r3, #5
 8005d1e:	d101      	bne.n	8005d24 <UART_ParseAnswLightsStateStatus+0x9c>
 8005d20:	f7fe f8a4 	bl	8003e6c <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	3301      	adds	r3, #1
 8005d28:	71fb      	strb	r3, [r7, #7]
 8005d2a:	79fb      	ldrb	r3, [r7, #7]
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d9b1      	bls.n	8005c94 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	080124a0 	.word	0x080124a0
 8005d3c:	0801250c 	.word	0x0801250c
 8005d40:	20000560 	.word	0x20000560
 8005d44:	2000044c 	.word	0x2000044c
 8005d48:	20000274 	.word	0x20000274
 8005d4c:	08012520 	.word	0x08012520
 8005d50:	20000258 	.word	0x20000258

08005d54 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	2b27      	cmp	r3, #39	; 0x27
 8005d66:	f200 8129 	bhi.w	8005fbc <SendComand+0x268>
 8005d6a:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <SendComand+0x1c>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005e11 	.word	0x08005e11
 8005d74:	08005e1b 	.word	0x08005e1b
 8005d78:	08005e25 	.word	0x08005e25
 8005d7c:	08005e2f 	.word	0x08005e2f
 8005d80:	08005e43 	.word	0x08005e43
 8005d84:	08005e4d 	.word	0x08005e4d
 8005d88:	08005e57 	.word	0x08005e57
 8005d8c:	08005e61 	.word	0x08005e61
 8005d90:	08005e6b 	.word	0x08005e6b
 8005d94:	08005e75 	.word	0x08005e75
 8005d98:	08005e7f 	.word	0x08005e7f
 8005d9c:	08005e89 	.word	0x08005e89
 8005da0:	08005e93 	.word	0x08005e93
 8005da4:	08005ebb 	.word	0x08005ebb
 8005da8:	08005ec5 	.word	0x08005ec5
 8005dac:	08005ecf 	.word	0x08005ecf
 8005db0:	08005ed9 	.word	0x08005ed9
 8005db4:	08005ee3 	.word	0x08005ee3
 8005db8:	08005eed 	.word	0x08005eed
 8005dbc:	08005ef7 	.word	0x08005ef7
 8005dc0:	08005f01 	.word	0x08005f01
 8005dc4:	08005eb1 	.word	0x08005eb1
 8005dc8:	08005f1f 	.word	0x08005f1f
 8005dcc:	08005e9d 	.word	0x08005e9d
 8005dd0:	08005ea7 	.word	0x08005ea7
 8005dd4:	08005f0b 	.word	0x08005f0b
 8005dd8:	08005f15 	.word	0x08005f15
 8005ddc:	08005e39 	.word	0x08005e39
 8005de0:	08005f29 	.word	0x08005f29
 8005de4:	08005f33 	.word	0x08005f33
 8005de8:	08005f3d 	.word	0x08005f3d
 8005dec:	08005f47 	.word	0x08005f47
 8005df0:	08005f51 	.word	0x08005f51
 8005df4:	08005f5b 	.word	0x08005f5b
 8005df8:	08005f65 	.word	0x08005f65
 8005dfc:	08005f6f 	.word	0x08005f6f
 8005e00:	08005f79 	.word	0x08005f79
 8005e04:	08005f83 	.word	0x08005f83
 8005e08:	08005fa9 	.word	0x08005fa9
 8005e0c:	08005fb3 	.word	0x08005fb3
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8005e10:	496d      	ldr	r1, [pc, #436]	; (8005fc8 <SendComand+0x274>)
 8005e12:	486e      	ldr	r0, [pc, #440]	; (8005fcc <SendComand+0x278>)
 8005e14:	f000 fd87 	bl	8006926 <UARTDMA_Print>
			break;
 8005e18:	e0d0      	b.n	8005fbc <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8005e1a:	496d      	ldr	r1, [pc, #436]	; (8005fd0 <SendComand+0x27c>)
 8005e1c:	486b      	ldr	r0, [pc, #428]	; (8005fcc <SendComand+0x278>)
 8005e1e:	f000 fd82 	bl	8006926 <UARTDMA_Print>
			break;
 8005e22:	e0cb      	b.n	8005fbc <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8005e24:	496b      	ldr	r1, [pc, #428]	; (8005fd4 <SendComand+0x280>)
 8005e26:	4869      	ldr	r0, [pc, #420]	; (8005fcc <SendComand+0x278>)
 8005e28:	f000 fd7d 	bl	8006926 <UARTDMA_Print>
			break;
 8005e2c:	e0c6      	b.n	8005fbc <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8005e2e:	496a      	ldr	r1, [pc, #424]	; (8005fd8 <SendComand+0x284>)
 8005e30:	4866      	ldr	r0, [pc, #408]	; (8005fcc <SendComand+0x278>)
 8005e32:	f000 fd78 	bl	8006926 <UARTDMA_Print>
			break;
 8005e36:	e0c1      	b.n	8005fbc <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8005e38:	4968      	ldr	r1, [pc, #416]	; (8005fdc <SendComand+0x288>)
 8005e3a:	4864      	ldr	r0, [pc, #400]	; (8005fcc <SendComand+0x278>)
 8005e3c:	f000 fd73 	bl	8006926 <UARTDMA_Print>
			break;
 8005e40:	e0bc      	b.n	8005fbc <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8005e42:	4967      	ldr	r1, [pc, #412]	; (8005fe0 <SendComand+0x28c>)
 8005e44:	4861      	ldr	r0, [pc, #388]	; (8005fcc <SendComand+0x278>)
 8005e46:	f000 fd6e 	bl	8006926 <UARTDMA_Print>
			break;
 8005e4a:	e0b7      	b.n	8005fbc <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8005e4c:	4965      	ldr	r1, [pc, #404]	; (8005fe4 <SendComand+0x290>)
 8005e4e:	485f      	ldr	r0, [pc, #380]	; (8005fcc <SendComand+0x278>)
 8005e50:	f000 fd69 	bl	8006926 <UARTDMA_Print>
			break;
 8005e54:	e0b2      	b.n	8005fbc <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8005e56:	4964      	ldr	r1, [pc, #400]	; (8005fe8 <SendComand+0x294>)
 8005e58:	485c      	ldr	r0, [pc, #368]	; (8005fcc <SendComand+0x278>)
 8005e5a:	f000 fd64 	bl	8006926 <UARTDMA_Print>
			break;
 8005e5e:	e0ad      	b.n	8005fbc <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8005e60:	4962      	ldr	r1, [pc, #392]	; (8005fec <SendComand+0x298>)
 8005e62:	485a      	ldr	r0, [pc, #360]	; (8005fcc <SendComand+0x278>)
 8005e64:	f000 fd5f 	bl	8006926 <UARTDMA_Print>
			break;
 8005e68:	e0a8      	b.n	8005fbc <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8005e6a:	4961      	ldr	r1, [pc, #388]	; (8005ff0 <SendComand+0x29c>)
 8005e6c:	4857      	ldr	r0, [pc, #348]	; (8005fcc <SendComand+0x278>)
 8005e6e:	f000 fd5a 	bl	8006926 <UARTDMA_Print>
			break;
 8005e72:	e0a3      	b.n	8005fbc <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8005e74:	495f      	ldr	r1, [pc, #380]	; (8005ff4 <SendComand+0x2a0>)
 8005e76:	4855      	ldr	r0, [pc, #340]	; (8005fcc <SendComand+0x278>)
 8005e78:	f000 fd55 	bl	8006926 <UARTDMA_Print>
			break;
 8005e7c:	e09e      	b.n	8005fbc <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8005e7e:	495e      	ldr	r1, [pc, #376]	; (8005ff8 <SendComand+0x2a4>)
 8005e80:	4852      	ldr	r0, [pc, #328]	; (8005fcc <SendComand+0x278>)
 8005e82:	f000 fd50 	bl	8006926 <UARTDMA_Print>
			break;
 8005e86:	e099      	b.n	8005fbc <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8005e88:	495c      	ldr	r1, [pc, #368]	; (8005ffc <SendComand+0x2a8>)
 8005e8a:	4850      	ldr	r0, [pc, #320]	; (8005fcc <SendComand+0x278>)
 8005e8c:	f000 fd4b 	bl	8006926 <UARTDMA_Print>
			break;
 8005e90:	e094      	b.n	8005fbc <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8005e92:	495b      	ldr	r1, [pc, #364]	; (8006000 <SendComand+0x2ac>)
 8005e94:	484d      	ldr	r0, [pc, #308]	; (8005fcc <SendComand+0x278>)
 8005e96:	f000 fd46 	bl	8006926 <UARTDMA_Print>
			break;
 8005e9a:	e08f      	b.n	8005fbc <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8005e9c:	4959      	ldr	r1, [pc, #356]	; (8006004 <SendComand+0x2b0>)
 8005e9e:	484b      	ldr	r0, [pc, #300]	; (8005fcc <SendComand+0x278>)
 8005ea0:	f000 fd41 	bl	8006926 <UARTDMA_Print>
			break;
 8005ea4:	e08a      	b.n	8005fbc <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8005ea6:	4958      	ldr	r1, [pc, #352]	; (8006008 <SendComand+0x2b4>)
 8005ea8:	4848      	ldr	r0, [pc, #288]	; (8005fcc <SendComand+0x278>)
 8005eaa:	f000 fd3c 	bl	8006926 <UARTDMA_Print>
			break;
 8005eae:	e085      	b.n	8005fbc <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8005eb0:	4956      	ldr	r1, [pc, #344]	; (800600c <SendComand+0x2b8>)
 8005eb2:	4846      	ldr	r0, [pc, #280]	; (8005fcc <SendComand+0x278>)
 8005eb4:	f000 fd37 	bl	8006926 <UARTDMA_Print>
			break;
 8005eb8:	e080      	b.n	8005fbc <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8005eba:	4955      	ldr	r1, [pc, #340]	; (8006010 <SendComand+0x2bc>)
 8005ebc:	4843      	ldr	r0, [pc, #268]	; (8005fcc <SendComand+0x278>)
 8005ebe:	f000 fd32 	bl	8006926 <UARTDMA_Print>
			break;
 8005ec2:	e07b      	b.n	8005fbc <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8005ec4:	4953      	ldr	r1, [pc, #332]	; (8006014 <SendComand+0x2c0>)
 8005ec6:	4841      	ldr	r0, [pc, #260]	; (8005fcc <SendComand+0x278>)
 8005ec8:	f000 fd2d 	bl	8006926 <UARTDMA_Print>
			break;
 8005ecc:	e076      	b.n	8005fbc <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8005ece:	4952      	ldr	r1, [pc, #328]	; (8006018 <SendComand+0x2c4>)
 8005ed0:	483e      	ldr	r0, [pc, #248]	; (8005fcc <SendComand+0x278>)
 8005ed2:	f000 fd28 	bl	8006926 <UARTDMA_Print>
			break;
 8005ed6:	e071      	b.n	8005fbc <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8005ed8:	4950      	ldr	r1, [pc, #320]	; (800601c <SendComand+0x2c8>)
 8005eda:	483c      	ldr	r0, [pc, #240]	; (8005fcc <SendComand+0x278>)
 8005edc:	f000 fd23 	bl	8006926 <UARTDMA_Print>
			break;
 8005ee0:	e06c      	b.n	8005fbc <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8005ee2:	494f      	ldr	r1, [pc, #316]	; (8006020 <SendComand+0x2cc>)
 8005ee4:	4839      	ldr	r0, [pc, #228]	; (8005fcc <SendComand+0x278>)
 8005ee6:	f000 fd1e 	bl	8006926 <UARTDMA_Print>
			break;
 8005eea:	e067      	b.n	8005fbc <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8005eec:	494d      	ldr	r1, [pc, #308]	; (8006024 <SendComand+0x2d0>)
 8005eee:	4837      	ldr	r0, [pc, #220]	; (8005fcc <SendComand+0x278>)
 8005ef0:	f000 fd19 	bl	8006926 <UARTDMA_Print>
			break;
 8005ef4:	e062      	b.n	8005fbc <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 8005ef6:	494c      	ldr	r1, [pc, #304]	; (8006028 <SendComand+0x2d4>)
 8005ef8:	4834      	ldr	r0, [pc, #208]	; (8005fcc <SendComand+0x278>)
 8005efa:	f000 fd14 	bl	8006926 <UARTDMA_Print>
			break;
 8005efe:	e05d      	b.n	8005fbc <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8005f00:	494a      	ldr	r1, [pc, #296]	; (800602c <SendComand+0x2d8>)
 8005f02:	4832      	ldr	r0, [pc, #200]	; (8005fcc <SendComand+0x278>)
 8005f04:	f000 fd0f 	bl	8006926 <UARTDMA_Print>
			break;
 8005f08:	e058      	b.n	8005fbc <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 8005f0a:	4949      	ldr	r1, [pc, #292]	; (8006030 <SendComand+0x2dc>)
 8005f0c:	482f      	ldr	r0, [pc, #188]	; (8005fcc <SendComand+0x278>)
 8005f0e:	f000 fd0a 	bl	8006926 <UARTDMA_Print>
			break;
 8005f12:	e053      	b.n	8005fbc <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8005f14:	4947      	ldr	r1, [pc, #284]	; (8006034 <SendComand+0x2e0>)
 8005f16:	482d      	ldr	r0, [pc, #180]	; (8005fcc <SendComand+0x278>)
 8005f18:	f000 fd05 	bl	8006926 <UARTDMA_Print>
			break;
 8005f1c:	e04e      	b.n	8005fbc <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8005f1e:	4946      	ldr	r1, [pc, #280]	; (8006038 <SendComand+0x2e4>)
 8005f20:	482a      	ldr	r0, [pc, #168]	; (8005fcc <SendComand+0x278>)
 8005f22:	f000 fd00 	bl	8006926 <UARTDMA_Print>
			break;
 8005f26:	e049      	b.n	8005fbc <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 8005f28:	4944      	ldr	r1, [pc, #272]	; (800603c <SendComand+0x2e8>)
 8005f2a:	4828      	ldr	r0, [pc, #160]	; (8005fcc <SendComand+0x278>)
 8005f2c:	f000 fcfb 	bl	8006926 <UARTDMA_Print>
			break;
 8005f30:	e044      	b.n	8005fbc <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8005f32:	4943      	ldr	r1, [pc, #268]	; (8006040 <SendComand+0x2ec>)
 8005f34:	4825      	ldr	r0, [pc, #148]	; (8005fcc <SendComand+0x278>)
 8005f36:	f000 fcf6 	bl	8006926 <UARTDMA_Print>
			break;
 8005f3a:	e03f      	b.n	8005fbc <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8005f3c:	4941      	ldr	r1, [pc, #260]	; (8006044 <SendComand+0x2f0>)
 8005f3e:	4823      	ldr	r0, [pc, #140]	; (8005fcc <SendComand+0x278>)
 8005f40:	f000 fcf1 	bl	8006926 <UARTDMA_Print>
			break;
 8005f44:	e03a      	b.n	8005fbc <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8005f46:	4940      	ldr	r1, [pc, #256]	; (8006048 <SendComand+0x2f4>)
 8005f48:	4820      	ldr	r0, [pc, #128]	; (8005fcc <SendComand+0x278>)
 8005f4a:	f000 fcec 	bl	8006926 <UARTDMA_Print>
			break;
 8005f4e:	e035      	b.n	8005fbc <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8005f50:	493e      	ldr	r1, [pc, #248]	; (800604c <SendComand+0x2f8>)
 8005f52:	481e      	ldr	r0, [pc, #120]	; (8005fcc <SendComand+0x278>)
 8005f54:	f000 fce7 	bl	8006926 <UARTDMA_Print>
			break;
 8005f58:	e030      	b.n	8005fbc <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8005f5a:	493d      	ldr	r1, [pc, #244]	; (8006050 <SendComand+0x2fc>)
 8005f5c:	481b      	ldr	r0, [pc, #108]	; (8005fcc <SendComand+0x278>)
 8005f5e:	f000 fce2 	bl	8006926 <UARTDMA_Print>
			break;
 8005f62:	e02b      	b.n	8005fbc <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8005f64:	493b      	ldr	r1, [pc, #236]	; (8006054 <SendComand+0x300>)
 8005f66:	4819      	ldr	r0, [pc, #100]	; (8005fcc <SendComand+0x278>)
 8005f68:	f000 fcdd 	bl	8006926 <UARTDMA_Print>
			break;
 8005f6c:	e026      	b.n	8005fbc <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 8005f6e:	493a      	ldr	r1, [pc, #232]	; (8006058 <SendComand+0x304>)
 8005f70:	4816      	ldr	r0, [pc, #88]	; (8005fcc <SendComand+0x278>)
 8005f72:	f000 fcd8 	bl	8006926 <UARTDMA_Print>
			break;
 8005f76:	e021      	b.n	8005fbc <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8005f78:	4938      	ldr	r1, [pc, #224]	; (800605c <SendComand+0x308>)
 8005f7a:	4814      	ldr	r0, [pc, #80]	; (8005fcc <SendComand+0x278>)
 8005f7c:	f000 fcd3 	bl	8006926 <UARTDMA_Print>
			break;
 8005f80:	e01c      	b.n	8005fbc <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8005f82:	4b37      	ldr	r3, [pc, #220]	; (8006060 <SendComand+0x30c>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d802      	bhi.n	8005f90 <SendComand+0x23c>
 8005f8a:	4b35      	ldr	r3, [pc, #212]	; (8006060 <SendComand+0x30c>)
 8005f8c:	2209      	movs	r2, #9
 8005f8e:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8005f90:	4b33      	ldr	r3, [pc, #204]	; (8006060 <SendComand+0x30c>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	4933      	ldr	r1, [pc, #204]	; (8006064 <SendComand+0x310>)
 8005f98:	4833      	ldr	r0, [pc, #204]	; (8006068 <SendComand+0x314>)
 8005f9a:	f008 fab3 	bl	800e504 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8005f9e:	4932      	ldr	r1, [pc, #200]	; (8006068 <SendComand+0x314>)
 8005fa0:	480a      	ldr	r0, [pc, #40]	; (8005fcc <SendComand+0x278>)
 8005fa2:	f000 fcc0 	bl	8006926 <UARTDMA_Print>
			break;
 8005fa6:	e009      	b.n	8005fbc <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8005fa8:	4930      	ldr	r1, [pc, #192]	; (800606c <SendComand+0x318>)
 8005faa:	4808      	ldr	r0, [pc, #32]	; (8005fcc <SendComand+0x278>)
 8005fac:	f000 fcbb 	bl	8006926 <UARTDMA_Print>
			break;
 8005fb0:	e004      	b.n	8005fbc <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8005fb2:	492f      	ldr	r1, [pc, #188]	; (8006070 <SendComand+0x31c>)
 8005fb4:	4805      	ldr	r0, [pc, #20]	; (8005fcc <SendComand+0x278>)
 8005fb6:	f000 fcb6 	bl	8006926 <UARTDMA_Print>
			break;
 8005fba:	bf00      	nop
		}
	return 1;
 8005fbc:	2301      	movs	r3, #1
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	0801253c 	.word	0x0801253c
 8005fcc:	2000044c 	.word	0x2000044c
 8005fd0:	08012544 	.word	0x08012544
 8005fd4:	0801254c 	.word	0x0801254c
 8005fd8:	08012558 	.word	0x08012558
 8005fdc:	08012560 	.word	0x08012560
 8005fe0:	08012568 	.word	0x08012568
 8005fe4:	08012570 	.word	0x08012570
 8005fe8:	08012580 	.word	0x08012580
 8005fec:	08012590 	.word	0x08012590
 8005ff0:	080125a0 	.word	0x080125a0
 8005ff4:	080125b0 	.word	0x080125b0
 8005ff8:	080125c0 	.word	0x080125c0
 8005ffc:	080125d0 	.word	0x080125d0
 8006000:	080125e0 	.word	0x080125e0
 8006004:	080125f0 	.word	0x080125f0
 8006008:	08012600 	.word	0x08012600
 800600c:	08012610 	.word	0x08012610
 8006010:	08012620 	.word	0x08012620
 8006014:	08012630 	.word	0x08012630
 8006018:	08012640 	.word	0x08012640
 800601c:	08012650 	.word	0x08012650
 8006020:	08012660 	.word	0x08012660
 8006024:	08012670 	.word	0x08012670
 8006028:	08012680 	.word	0x08012680
 800602c:	08012690 	.word	0x08012690
 8006030:	080126a0 	.word	0x080126a0
 8006034:	080126b0 	.word	0x080126b0
 8006038:	080126c0 	.word	0x080126c0
 800603c:	080126d0 	.word	0x080126d0
 8006040:	080126e0 	.word	0x080126e0
 8006044:	080126f0 	.word	0x080126f0
 8006048:	08012700 	.word	0x08012700
 800604c:	08012710 	.word	0x08012710
 8006050:	08012720 	.word	0x08012720
 8006054:	08012730 	.word	0x08012730
 8006058:	08012740 	.word	0x08012740
 800605c:	08012750 	.word	0x08012750
 8006060:	20000032 	.word	0x20000032
 8006064:	08012760 	.word	0x08012760
 8006068:	20000560 	.word	0x20000560
 800606c:	08012770 	.word	0x08012770
 8006070:	08012780 	.word	0x08012780

08006074 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	781a      	ldrb	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	785b      	ldrb	r3, [r3, #1]
 8006086:	429a      	cmp	r2, r3
 8006088:	d101      	bne.n	800608e <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 800608a:	2301      	movs	r3, #1
 800608c:	e018      	b.n	80060c0 <RB_Read+0x4c>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	461a      	mov	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4413      	add	r3, r2
 8006098:	789a      	ldrb	r2, [r3, #2]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	4b09      	ldr	r3, [pc, #36]	; (80060cc <RB_Read+0x58>)
 80060a6:	fb83 1302 	smull	r1, r3, r3, r2
 80060aa:	1159      	asrs	r1, r3, #5
 80060ac:	17d3      	asrs	r3, r2, #31
 80060ae:	1ac9      	subs	r1, r1, r3
 80060b0:	460b      	mov	r3, r1
 80060b2:	019b      	lsls	r3, r3, #6
 80060b4:	440b      	add	r3, r1
 80060b6:	1ad1      	subs	r1, r2, r3
 80060b8:	b2ca      	uxtb	r2, r1
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	7e07e07f 	.word	0x7e07e07f

080060d0 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <RB_Write+0x5c>)
 80060e4:	fb83 1302 	smull	r1, r3, r3, r2
 80060e8:	1159      	asrs	r1, r3, #5
 80060ea:	17d3      	asrs	r3, r2, #31
 80060ec:	1ac9      	subs	r1, r1, r3
 80060ee:	460b      	mov	r3, r1
 80060f0:	019b      	lsls	r3, r3, #6
 80060f2:	440b      	add	r3, r1
 80060f4:	1ad1      	subs	r1, r2, r3
 80060f6:	460b      	mov	r3, r1
 80060f8:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	7bfa      	ldrb	r2, [r7, #15]
 8006100:	429a      	cmp	r2, r3
 8006102:	d101      	bne.n	8006108 <RB_Write+0x38>
	{
		return RB_ERROR; // No free space error
 8006104:	2301      	movs	r3, #1
 8006106:	e00a      	b.n	800611e <RB_Write+0x4e>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4413      	add	r3, r2
 8006112:	78fa      	ldrb	r2, [r7, #3]
 8006114:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	7bfa      	ldrb	r2, [r7, #15]
 800611a:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	7e07e07f 	.word	0x7e07e07f

08006130 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006134:	4b17      	ldr	r3, [pc, #92]	; (8006194 <MX_SPI1_Init+0x64>)
 8006136:	4a18      	ldr	r2, [pc, #96]	; (8006198 <MX_SPI1_Init+0x68>)
 8006138:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800613a:	4b16      	ldr	r3, [pc, #88]	; (8006194 <MX_SPI1_Init+0x64>)
 800613c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006140:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006142:	4b14      	ldr	r3, [pc, #80]	; (8006194 <MX_SPI1_Init+0x64>)
 8006144:	2200      	movs	r2, #0
 8006146:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006148:	4b12      	ldr	r3, [pc, #72]	; (8006194 <MX_SPI1_Init+0x64>)
 800614a:	2200      	movs	r2, #0
 800614c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800614e:	4b11      	ldr	r3, [pc, #68]	; (8006194 <MX_SPI1_Init+0x64>)
 8006150:	2200      	movs	r2, #0
 8006152:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006154:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <MX_SPI1_Init+0x64>)
 8006156:	2200      	movs	r2, #0
 8006158:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800615a:	4b0e      	ldr	r3, [pc, #56]	; (8006194 <MX_SPI1_Init+0x64>)
 800615c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006160:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006162:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <MX_SPI1_Init+0x64>)
 8006164:	2210      	movs	r2, #16
 8006166:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006168:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <MX_SPI1_Init+0x64>)
 800616a:	2200      	movs	r2, #0
 800616c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800616e:	4b09      	ldr	r3, [pc, #36]	; (8006194 <MX_SPI1_Init+0x64>)
 8006170:	2200      	movs	r2, #0
 8006172:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006174:	4b07      	ldr	r3, [pc, #28]	; (8006194 <MX_SPI1_Init+0x64>)
 8006176:	2200      	movs	r2, #0
 8006178:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800617a:	4b06      	ldr	r3, [pc, #24]	; (8006194 <MX_SPI1_Init+0x64>)
 800617c:	220a      	movs	r2, #10
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006180:	4804      	ldr	r0, [pc, #16]	; (8006194 <MX_SPI1_Init+0x64>)
 8006182:	f005 fb0b 	bl	800b79c <HAL_SPI_Init>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800618c:	f7fe fa9c 	bl	80046c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006190:	bf00      	nop
 8006192:	bd80      	pop	{r7, pc}
 8006194:	200005fc 	.word	0x200005fc
 8006198:	40013000 	.word	0x40013000

0800619c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80061a0:	4b17      	ldr	r3, [pc, #92]	; (8006200 <MX_SPI3_Init+0x64>)
 80061a2:	4a18      	ldr	r2, [pc, #96]	; (8006204 <MX_SPI3_Init+0x68>)
 80061a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80061a6:	4b16      	ldr	r3, [pc, #88]	; (8006200 <MX_SPI3_Init+0x64>)
 80061a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80061ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80061ae:	4b14      	ldr	r3, [pc, #80]	; (8006200 <MX_SPI3_Init+0x64>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80061b4:	4b12      	ldr	r3, [pc, #72]	; (8006200 <MX_SPI3_Init+0x64>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80061ba:	4b11      	ldr	r3, [pc, #68]	; (8006200 <MX_SPI3_Init+0x64>)
 80061bc:	2200      	movs	r2, #0
 80061be:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80061c0:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <MX_SPI3_Init+0x64>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80061c6:	4b0e      	ldr	r3, [pc, #56]	; (8006200 <MX_SPI3_Init+0x64>)
 80061c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061cc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80061ce:	4b0c      	ldr	r3, [pc, #48]	; (8006200 <MX_SPI3_Init+0x64>)
 80061d0:	2220      	movs	r2, #32
 80061d2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80061d4:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <MX_SPI3_Init+0x64>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80061da:	4b09      	ldr	r3, [pc, #36]	; (8006200 <MX_SPI3_Init+0x64>)
 80061dc:	2200      	movs	r2, #0
 80061de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <MX_SPI3_Init+0x64>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80061e6:	4b06      	ldr	r3, [pc, #24]	; (8006200 <MX_SPI3_Init+0x64>)
 80061e8:	220a      	movs	r2, #10
 80061ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80061ec:	4804      	ldr	r0, [pc, #16]	; (8006200 <MX_SPI3_Init+0x64>)
 80061ee:	f005 fad5 	bl	800b79c <HAL_SPI_Init>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80061f8:	f7fe fa66 	bl	80046c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80061fc:	bf00      	nop
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	200005a4 	.word	0x200005a4
 8006204:	40003c00 	.word	0x40003c00

08006208 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08c      	sub	sp, #48	; 0x30
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006210:	f107 031c 	add.w	r3, r7, #28
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	605a      	str	r2, [r3, #4]
 800621a:	609a      	str	r2, [r3, #8]
 800621c:	60da      	str	r2, [r3, #12]
 800621e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a32      	ldr	r2, [pc, #200]	; (80062f0 <HAL_SPI_MspInit+0xe8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d12c      	bne.n	8006284 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800622a:	2300      	movs	r3, #0
 800622c:	61bb      	str	r3, [r7, #24]
 800622e:	4b31      	ldr	r3, [pc, #196]	; (80062f4 <HAL_SPI_MspInit+0xec>)
 8006230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006232:	4a30      	ldr	r2, [pc, #192]	; (80062f4 <HAL_SPI_MspInit+0xec>)
 8006234:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006238:	6453      	str	r3, [r2, #68]	; 0x44
 800623a:	4b2e      	ldr	r3, [pc, #184]	; (80062f4 <HAL_SPI_MspInit+0xec>)
 800623c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <HAL_SPI_MspInit+0xec>)
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	4a29      	ldr	r2, [pc, #164]	; (80062f4 <HAL_SPI_MspInit+0xec>)
 8006250:	f043 0301 	orr.w	r3, r3, #1
 8006254:	6313      	str	r3, [r2, #48]	; 0x30
 8006256:	4b27      	ldr	r3, [pc, #156]	; (80062f4 <HAL_SPI_MspInit+0xec>)
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006262:	23e0      	movs	r3, #224	; 0xe0
 8006264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006266:	2302      	movs	r3, #2
 8006268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800626a:	2300      	movs	r3, #0
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800626e:	2303      	movs	r3, #3
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006272:	2305      	movs	r3, #5
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006276:	f107 031c 	add.w	r3, r7, #28
 800627a:	4619      	mov	r1, r3
 800627c:	481e      	ldr	r0, [pc, #120]	; (80062f8 <HAL_SPI_MspInit+0xf0>)
 800627e:	f001 fb59 	bl	8007934 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006282:	e030      	b.n	80062e6 <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1c      	ldr	r2, [pc, #112]	; (80062fc <HAL_SPI_MspInit+0xf4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d12b      	bne.n	80062e6 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	4b18      	ldr	r3, [pc, #96]	; (80062f4 <HAL_SPI_MspInit+0xec>)
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	4a17      	ldr	r2, [pc, #92]	; (80062f4 <HAL_SPI_MspInit+0xec>)
 8006298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629c:	6413      	str	r3, [r2, #64]	; 0x40
 800629e:	4b15      	ldr	r3, [pc, #84]	; (80062f4 <HAL_SPI_MspInit+0xec>)
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	4b11      	ldr	r3, [pc, #68]	; (80062f4 <HAL_SPI_MspInit+0xec>)
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	4a10      	ldr	r2, [pc, #64]	; (80062f4 <HAL_SPI_MspInit+0xec>)
 80062b4:	f043 0302 	orr.w	r3, r3, #2
 80062b8:	6313      	str	r3, [r2, #48]	; 0x30
 80062ba:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <HAL_SPI_MspInit+0xec>)
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80062c6:	2338      	movs	r3, #56	; 0x38
 80062c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ca:	2302      	movs	r3, #2
 80062cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062d2:	2303      	movs	r3, #3
 80062d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80062d6:	2306      	movs	r3, #6
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062da:	f107 031c 	add.w	r3, r7, #28
 80062de:	4619      	mov	r1, r3
 80062e0:	4807      	ldr	r0, [pc, #28]	; (8006300 <HAL_SPI_MspInit+0xf8>)
 80062e2:	f001 fb27 	bl	8007934 <HAL_GPIO_Init>
}
 80062e6:	bf00      	nop
 80062e8:	3730      	adds	r7, #48	; 0x30
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	40013000 	.word	0x40013000
 80062f4:	40023800 	.word	0x40023800
 80062f8:	40020000 	.word	0x40020000
 80062fc:	40003c00 	.word	0x40003c00
 8006300:	40020400 	.word	0x40020400

08006304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800630a:	2300      	movs	r3, #0
 800630c:	607b      	str	r3, [r7, #4]
 800630e:	4b10      	ldr	r3, [pc, #64]	; (8006350 <HAL_MspInit+0x4c>)
 8006310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006312:	4a0f      	ldr	r2, [pc, #60]	; (8006350 <HAL_MspInit+0x4c>)
 8006314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006318:	6453      	str	r3, [r2, #68]	; 0x44
 800631a:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <HAL_MspInit+0x4c>)
 800631c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006322:	607b      	str	r3, [r7, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006326:	2300      	movs	r3, #0
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	4b09      	ldr	r3, [pc, #36]	; (8006350 <HAL_MspInit+0x4c>)
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	4a08      	ldr	r2, [pc, #32]	; (8006350 <HAL_MspInit+0x4c>)
 8006330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006334:	6413      	str	r3, [r2, #64]	; 0x40
 8006336:	4b06      	ldr	r3, [pc, #24]	; (8006350 <HAL_MspInit+0x4c>)
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40023800 	.word	0x40023800

08006354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006358:	e7fe      	b.n	8006358 <NMI_Handler+0x4>

0800635a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800635a:	b480      	push	{r7}
 800635c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800635e:	e7fe      	b.n	800635e <HardFault_Handler+0x4>

08006360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006364:	e7fe      	b.n	8006364 <MemManage_Handler+0x4>

08006366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006366:	b480      	push	{r7}
 8006368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800636a:	e7fe      	b.n	800636a <BusFault_Handler+0x4>

0800636c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006370:	e7fe      	b.n	8006370 <UsageFault_Handler+0x4>

08006372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006372:	b480      	push	{r7}
 8006374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006376:	bf00      	nop
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006384:	bf00      	nop
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800638e:	b480      	push	{r7}
 8006390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006392:	bf00      	nop
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063a0:	f000 fcd4 	bl	8006d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063a4:	bf00      	nop
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IRQ_Pin);
 80063ac:	2010      	movs	r0, #16
 80063ae:	f001 fc91 	bl	8007cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80063b2:	bf00      	nop
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80063bc:	4802      	ldr	r0, [pc, #8]	; (80063c8 <DMA1_Stream0_IRQHandler+0x10>)
 80063be:	f001 f841 	bl	8007444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80063c2:	bf00      	nop
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	200003ec 	.word	0x200003ec

080063cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80063d0:	4802      	ldr	r0, [pc, #8]	; (80063dc <DMA1_Stream1_IRQHandler+0x10>)
 80063d2:	f001 f837 	bl	8007444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80063d6:	bf00      	nop
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000338 	.word	0x20000338

080063e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 80063e4:	4802      	ldr	r0, [pc, #8]	; (80063f0 <DMA1_Stream5_IRQHandler+0x10>)
 80063e6:	f000 f9e9 	bl	80067bc <UARTDMA_DmaReceiveIrqHandler>
	return;
 80063ea:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	2000044c 	.word	0x2000044c

080063f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80063f8:	4802      	ldr	r0, [pc, #8]	; (8006404 <DMA1_Stream6_IRQHandler+0x10>)
 80063fa:	f001 f823 	bl	8007444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80063fe:	bf00      	nop
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000744 	.word	0x20000744

08006408 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 800640c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006410:	f001 fc60 	bl	8007cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006414:	bf00      	nop
 8006416:	bd80      	pop	{r7, pc}

08006418 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800641c:	4802      	ldr	r0, [pc, #8]	; (8006428 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800641e:	f005 feb2 	bl	800c186 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000654 	.word	0x20000654

0800642c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8006430:	4802      	ldr	r0, [pc, #8]	; (800643c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8006432:	f005 fea8 	bl	800c186 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006436:	bf00      	nop
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	2000069c 	.word	0x2000069c

08006440 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006444:	4802      	ldr	r0, [pc, #8]	; (8006450 <I2C1_EV_IRQHandler+0x10>)
 8006446:	f002 fbe5 	bl	8008c14 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800644a:	bf00      	nop
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20000398 	.word	0x20000398

08006454 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006458:	4802      	ldr	r0, [pc, #8]	; (8006464 <I2C1_ER_IRQHandler+0x10>)
 800645a:	f002 fd4c 	bl	8008ef6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000398 	.word	0x20000398

08006468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 800646c:	4803      	ldr	r0, [pc, #12]	; (800647c <USART2_IRQHandler+0x14>)
 800646e:	f000 f97b 	bl	8006768 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006472:	4803      	ldr	r0, [pc, #12]	; (8006480 <USART2_IRQHandler+0x18>)
 8006474:	f006 f948 	bl	800c708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006478:	bf00      	nop
 800647a:	bd80      	pop	{r7, pc}
 800647c:	2000044c 	.word	0x2000044c
 8006480:	200007a4 	.word	0x200007a4

08006484 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8006488:	4802      	ldr	r0, [pc, #8]	; (8006494 <SPI3_IRQHandler+0x10>)
 800648a:	f005 fbb3 	bl	800bbf4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800648e:	bf00      	nop
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	200005a4 	.word	0x200005a4

08006498 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0
	return 1;
 800649c:	2301      	movs	r3, #1
}
 800649e:	4618      	mov	r0, r3
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <_kill>:

int _kill(int pid, int sig)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80064b2:	f007 f975 	bl	800d7a0 <__errno>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2216      	movs	r2, #22
 80064ba:	601a      	str	r2, [r3, #0]
	return -1;
 80064bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <_exit>:

void _exit (int status)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80064d0:	f04f 31ff 	mov.w	r1, #4294967295
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff ffe7 	bl	80064a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80064da:	e7fe      	b.n	80064da <_exit+0x12>

080064dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064e8:	2300      	movs	r3, #0
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	e00a      	b.n	8006504 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80064ee:	f3af 8000 	nop.w
 80064f2:	4601      	mov	r1, r0
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	60ba      	str	r2, [r7, #8]
 80064fa:	b2ca      	uxtb	r2, r1
 80064fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	3301      	adds	r3, #1
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	dbf0      	blt.n	80064ee <_read+0x12>
	}

return len;
 800650c:	687b      	ldr	r3, [r7, #4]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b086      	sub	sp, #24
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006522:	2300      	movs	r3, #0
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e009      	b.n	800653c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	60ba      	str	r2, [r7, #8]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	4618      	mov	r0, r3
 8006532:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	3301      	adds	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	429a      	cmp	r2, r3
 8006542:	dbf1      	blt.n	8006528 <_write+0x12>
	}
	return len;
 8006544:	687b      	ldr	r3, [r7, #4]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <_close>:

int _close(int file)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
	return -1;
 8006556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800655a:	4618      	mov	r0, r3
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006576:	605a      	str	r2, [r3, #4]
	return 0;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <_isatty>:

int _isatty(int file)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
	return 1;
 800658e:	2301      	movs	r3, #1
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
	return 0;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
	...

080065b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80065c0:	4a14      	ldr	r2, [pc, #80]	; (8006614 <_sbrk+0x5c>)
 80065c2:	4b15      	ldr	r3, [pc, #84]	; (8006618 <_sbrk+0x60>)
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065cc:	4b13      	ldr	r3, [pc, #76]	; (800661c <_sbrk+0x64>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d102      	bne.n	80065da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065d4:	4b11      	ldr	r3, [pc, #68]	; (800661c <_sbrk+0x64>)
 80065d6:	4a12      	ldr	r2, [pc, #72]	; (8006620 <_sbrk+0x68>)
 80065d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065da:	4b10      	ldr	r3, [pc, #64]	; (800661c <_sbrk+0x64>)
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4413      	add	r3, r2
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d207      	bcs.n	80065f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80065e8:	f007 f8da 	bl	800d7a0 <__errno>
 80065ec:	4603      	mov	r3, r0
 80065ee:	220c      	movs	r2, #12
 80065f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295
 80065f6:	e009      	b.n	800660c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065f8:	4b08      	ldr	r3, [pc, #32]	; (800661c <_sbrk+0x64>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065fe:	4b07      	ldr	r3, [pc, #28]	; (800661c <_sbrk+0x64>)
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4413      	add	r3, r2
 8006606:	4a05      	ldr	r2, [pc, #20]	; (800661c <_sbrk+0x64>)
 8006608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800660a:	68fb      	ldr	r3, [r7, #12]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20020000 	.word	0x20020000
 8006618:	00000400 	.word	0x00000400
 800661c:	2000027c 	.word	0x2000027c
 8006620:	20000800 	.word	0x20000800

08006624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006628:	4b06      	ldr	r3, [pc, #24]	; (8006644 <SystemInit+0x20>)
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662e:	4a05      	ldr	r2, [pc, #20]	; (8006644 <SystemInit+0x20>)
 8006630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006638:	bf00      	nop
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	e000ed00 	.word	0xe000ed00

08006648 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800664c:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <MX_TIM10_Init+0x40>)
 800664e:	4a0f      	ldr	r2, [pc, #60]	; (800668c <MX_TIM10_Init+0x44>)
 8006650:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8006652:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <MX_TIM10_Init+0x40>)
 8006654:	f242 720f 	movw	r2, #9999	; 0x270f
 8006658:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800665a:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <MX_TIM10_Init+0x40>)
 800665c:	2200      	movs	r2, #0
 800665e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8006660:	4b09      	ldr	r3, [pc, #36]	; (8006688 <MX_TIM10_Init+0x40>)
 8006662:	f242 720f 	movw	r2, #9999	; 0x270f
 8006666:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006668:	4b07      	ldr	r3, [pc, #28]	; (8006688 <MX_TIM10_Init+0x40>)
 800666a:	2200      	movs	r2, #0
 800666c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800666e:	4b06      	ldr	r3, [pc, #24]	; (8006688 <MX_TIM10_Init+0x40>)
 8006670:	2200      	movs	r2, #0
 8006672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006674:	4804      	ldr	r0, [pc, #16]	; (8006688 <MX_TIM10_Init+0x40>)
 8006676:	f005 fca5 	bl	800bfc4 <HAL_TIM_Base_Init>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8006680:	f7fe f822 	bl	80046c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8006684:	bf00      	nop
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20000654 	.word	0x20000654
 800668c:	40014400 	.word	0x40014400

08006690 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006694:	4b0f      	ldr	r3, [pc, #60]	; (80066d4 <MX_TIM11_Init+0x44>)
 8006696:	4a10      	ldr	r2, [pc, #64]	; (80066d8 <MX_TIM11_Init+0x48>)
 8006698:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800669a:	4b0e      	ldr	r3, [pc, #56]	; (80066d4 <MX_TIM11_Init+0x44>)
 800669c:	f643 2297 	movw	r2, #14999	; 0x3a97
 80066a0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066a2:	4b0c      	ldr	r3, [pc, #48]	; (80066d4 <MX_TIM11_Init+0x44>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 80066a8:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <MX_TIM11_Init+0x44>)
 80066aa:	f247 522f 	movw	r2, #29999	; 0x752f
 80066ae:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80066b0:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <MX_TIM11_Init+0x44>)
 80066b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066b6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066b8:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <MX_TIM11_Init+0x44>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80066be:	4805      	ldr	r0, [pc, #20]	; (80066d4 <MX_TIM11_Init+0x44>)
 80066c0:	f005 fc80 	bl	800bfc4 <HAL_TIM_Base_Init>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 80066ca:	f7fd fffd 	bl	80046c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80066ce:	bf00      	nop
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	2000069c 	.word	0x2000069c
 80066d8:	40014800 	.word	0x40014800

080066dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1c      	ldr	r2, [pc, #112]	; (800675c <HAL_TIM_Base_MspInit+0x80>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d116      	bne.n	800671c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	4b1b      	ldr	r3, [pc, #108]	; (8006760 <HAL_TIM_Base_MspInit+0x84>)
 80066f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f6:	4a1a      	ldr	r2, [pc, #104]	; (8006760 <HAL_TIM_Base_MspInit+0x84>)
 80066f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066fc:	6453      	str	r3, [r2, #68]	; 0x44
 80066fe:	4b18      	ldr	r3, [pc, #96]	; (8006760 <HAL_TIM_Base_MspInit+0x84>)
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800670a:	2200      	movs	r2, #0
 800670c:	2100      	movs	r1, #0
 800670e:	2019      	movs	r0, #25
 8006710:	f000 fc9f 	bl	8007052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006714:	2019      	movs	r0, #25
 8006716:	f000 fcb8 	bl	800708a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800671a:	e01a      	b.n	8006752 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a10      	ldr	r2, [pc, #64]	; (8006764 <HAL_TIM_Base_MspInit+0x88>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d115      	bne.n	8006752 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006726:	2300      	movs	r3, #0
 8006728:	60bb      	str	r3, [r7, #8]
 800672a:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <HAL_TIM_Base_MspInit+0x84>)
 800672c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672e:	4a0c      	ldr	r2, [pc, #48]	; (8006760 <HAL_TIM_Base_MspInit+0x84>)
 8006730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006734:	6453      	str	r3, [r2, #68]	; 0x44
 8006736:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <HAL_TIM_Base_MspInit+0x84>)
 8006738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800673e:	60bb      	str	r3, [r7, #8]
 8006740:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006742:	2200      	movs	r2, #0
 8006744:	2100      	movs	r1, #0
 8006746:	201a      	movs	r0, #26
 8006748:	f000 fc83 	bl	8007052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800674c:	201a      	movs	r0, #26
 800674e:	f000 fc9c 	bl	800708a <HAL_NVIC_EnableIRQ>
}
 8006752:	bf00      	nop
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40014400 	.word	0x40014400
 8006760:	40023800 	.word	0x40023800
 8006764:	40014800 	.word	0x40014800

08006768 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b00      	cmp	r3, #0
 800677e:	d017      	beq.n	80067b0 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0201 	bic.w	r2, r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	60fb      	str	r3, [r7, #12]
	}
}
 80067b0:	bf00      	nop
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067cc:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d056      	beq.n	800688e <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e8:	2220      	movs	r2, #32
 80067ea:	409a      	lsls	r2, r3
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8006800:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3304      	adds	r3, #4
 8006806:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8006808:	2300      	movs	r3, #0
 800680a:	82fb      	strh	r3, [r7, #22]
 800680c:	e01a      	b.n	8006844 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f103 0045 	add.w	r0, r3, #69	; 0x45
 8006814:	8afb      	ldrh	r3, [r7, #22]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	4413      	add	r3, r2
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	4619      	mov	r1, r3
 800681e:	f7ff fc57 	bl	80060d0 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8006822:	8afb      	ldrh	r3, [r7, #22]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	4413      	add	r3, r2
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b0a      	cmp	r3, #10
 800682c:	d107      	bne.n	800683e <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006834:	3301      	adds	r3, #1
 8006836:	b2da      	uxtb	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800683e:	8afb      	ldrh	r3, [r7, #22]
 8006840:	3301      	adds	r3, #1
 8006842:	82fb      	strh	r3, [r7, #22]
 8006844:	8afa      	ldrh	r2, [r7, #22]
 8006846:	89fb      	ldrh	r3, [r7, #14]
 8006848:	429a      	cmp	r2, r3
 800684a:	d3e0      	bcc.n	800680e <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006854:	223f      	movs	r2, #63	; 0x3f
 8006856:	409a      	lsls	r2, r3
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	1d1a      	adds	r2, r3, #4
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2241      	movs	r2, #65	; 0x41
 8006874:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f042 0201 	orr.w	r2, r2, #1
 800688c:	601a      	str	r2, [r3, #0]
	}
}
 800688e:	bf00      	nop
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	460b      	mov	r3, r1
 80068a0:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	33ca      	adds	r3, #202	; 0xca
 80068a6:	78fa      	ldrb	r2, [r7, #3]
 80068a8:	4611      	mov	r1, r2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff fc10 	bl	80060d0 <RB_Write>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <UARTDMA_PutCharToTxBuffer+0x24>
	{
		return 1; // Error code
 80068b6:	2301      	movs	r3, #1
 80068b8:	e000      	b.n	80068bc <UARTDMA_PutCharToTxBuffer+0x26>
	}
	return 0; // Success code
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d01f      	beq.n	800691c <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 80068dc:	e013      	b.n	8006906 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2b0a      	cmp	r3, #10
 80068e4:	d10c      	bne.n	8006900 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				return 0; // Exit if end line
 80068fc:	2300      	movs	r3, #0
 80068fe:	e00e      	b.n	800691e <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3301      	adds	r3, #1
 8006904:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3345      	adds	r3, #69	; 0x45
 800690a:	68f9      	ldr	r1, [r7, #12]
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff fbb1 	bl	8006074 <RB_Read>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0e2      	beq.n	80068de <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 8006918:	2300      	movs	r3, #0
 800691a:	e000      	b.n	800691e <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 800691c:	2301      	movs	r3, #1
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8006934:	e012      	b.n	800695c <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8006936:	7afb      	ldrb	r3, [r7, #11]
 8006938:	4619      	mov	r1, r3
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7ff ffab 	bl	8006896 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3301      	adds	r3, #1
 8006944:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8006946:	7afb      	ldrb	r3, [r7, #11]
 8006948:	2b0a      	cmp	r3, #10
 800694a:	d107      	bne.n	800695c <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8006952:	3301      	adds	r3, #1
 8006954:	b2da      	uxtb	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	72fb      	strb	r3, [r7, #11]
 8006962:	7afb      	ldrb	r3, [r7, #11]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e6      	bne.n	8006936 <UARTDMA_Print+0x10>
		}
	}
}
 8006968:	bf00      	nop
 800696a:	bf00      	nop
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 800699e:	2300      	movs	r3, #0
 80069a0:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d027      	beq.n	8006a02 <UARTDMA_TransmitEvent+0x6c>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 80069b2:	e013      	b.n	80069dc <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 80069b4:	7b7b      	ldrb	r3, [r7, #13]
 80069b6:	2b0a      	cmp	r3, #10
 80069b8:	d107      	bne.n	80069ca <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 80069ca:	89fb      	ldrh	r3, [r7, #14]
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	81fa      	strh	r2, [r7, #14]
 80069d0:	4619      	mov	r1, r3
 80069d2:	7b7a      	ldrb	r2, [r7, #13]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	440b      	add	r3, r1
 80069d8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	33ca      	adds	r3, #202	; 0xca
 80069e0:	f107 020d 	add.w	r2, r7, #13
 80069e4:	4611      	mov	r1, r2
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff fb44 	bl	8006074 <RB_Read>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0e0      	beq.n	80069b4 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3389      	adds	r3, #137	; 0x89
 80069fa:	89fa      	ldrh	r2, [r7, #14]
 80069fc:	4619      	mov	r1, r3
 80069fe:	f005 fdd5 	bl	800c5ac <HAL_UART_Transmit_DMA>
	}
}
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0210 	orr.w	r2, r2, #16
 8006a2c:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0210 	orr.w	r2, r2, #16
 8006a44:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0210 	orr.w	r2, r2, #16
 8006a5c:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3304      	adds	r3, #4
 8006a66:	2241      	movs	r2, #65	; 0x41
 8006a68:	4619      	mov	r1, r3
 8006a6a:	f005 fe1d 	bl	800c6a8 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0208 	bic.w	r2, r2, #8
 8006a84:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0208 	bic.w	r2, r2, #8
 8006a9c:	601a      	str	r2, [r3, #0]
}
 8006a9e:	bf00      	nop
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006aac:	4b11      	ldr	r3, [pc, #68]	; (8006af4 <MX_USART2_UART_Init+0x4c>)
 8006aae:	4a12      	ldr	r2, [pc, #72]	; (8006af8 <MX_USART2_UART_Init+0x50>)
 8006ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006ab2:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <MX_USART2_UART_Init+0x4c>)
 8006ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006aba:	4b0e      	ldr	r3, [pc, #56]	; (8006af4 <MX_USART2_UART_Init+0x4c>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006ac0:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <MX_USART2_UART_Init+0x4c>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <MX_USART2_UART_Init+0x4c>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006acc:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <MX_USART2_UART_Init+0x4c>)
 8006ace:	220c      	movs	r2, #12
 8006ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ad2:	4b08      	ldr	r3, [pc, #32]	; (8006af4 <MX_USART2_UART_Init+0x4c>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ad8:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <MX_USART2_UART_Init+0x4c>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006ade:	4805      	ldr	r0, [pc, #20]	; (8006af4 <MX_USART2_UART_Init+0x4c>)
 8006ae0:	f005 fd16 	bl	800c510 <HAL_UART_Init>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006aea:	f7fd fded 	bl	80046c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006aee:	bf00      	nop
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	200007a4 	.word	0x200007a4
 8006af8:	40004400 	.word	0x40004400

08006afc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08a      	sub	sp, #40	; 0x28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b04:	f107 0314 	add.w	r3, r7, #20
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	605a      	str	r2, [r3, #4]
 8006b0e:	609a      	str	r2, [r3, #8]
 8006b10:	60da      	str	r2, [r3, #12]
 8006b12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a47      	ldr	r2, [pc, #284]	; (8006c38 <HAL_UART_MspInit+0x13c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	f040 8088 	bne.w	8006c30 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b20:	2300      	movs	r3, #0
 8006b22:	613b      	str	r3, [r7, #16]
 8006b24:	4b45      	ldr	r3, [pc, #276]	; (8006c3c <HAL_UART_MspInit+0x140>)
 8006b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b28:	4a44      	ldr	r2, [pc, #272]	; (8006c3c <HAL_UART_MspInit+0x140>)
 8006b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8006b30:	4b42      	ldr	r3, [pc, #264]	; (8006c3c <HAL_UART_MspInit+0x140>)
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	4b3e      	ldr	r3, [pc, #248]	; (8006c3c <HAL_UART_MspInit+0x140>)
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	4a3d      	ldr	r2, [pc, #244]	; (8006c3c <HAL_UART_MspInit+0x140>)
 8006b46:	f043 0301 	orr.w	r3, r3, #1
 8006b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8006b4c:	4b3b      	ldr	r3, [pc, #236]	; (8006c3c <HAL_UART_MspInit+0x140>)
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006b58:	230c      	movs	r3, #12
 8006b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b64:	2303      	movs	r3, #3
 8006b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006b68:	2307      	movs	r3, #7
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b6c:	f107 0314 	add.w	r3, r7, #20
 8006b70:	4619      	mov	r1, r3
 8006b72:	4833      	ldr	r0, [pc, #204]	; (8006c40 <HAL_UART_MspInit+0x144>)
 8006b74:	f000 fede 	bl	8007934 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006b78:	4b32      	ldr	r3, [pc, #200]	; (8006c44 <HAL_UART_MspInit+0x148>)
 8006b7a:	4a33      	ldr	r2, [pc, #204]	; (8006c48 <HAL_UART_MspInit+0x14c>)
 8006b7c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006b7e:	4b31      	ldr	r3, [pc, #196]	; (8006c44 <HAL_UART_MspInit+0x148>)
 8006b80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b84:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b86:	4b2f      	ldr	r3, [pc, #188]	; (8006c44 <HAL_UART_MspInit+0x148>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b8c:	4b2d      	ldr	r3, [pc, #180]	; (8006c44 <HAL_UART_MspInit+0x148>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b92:	4b2c      	ldr	r3, [pc, #176]	; (8006c44 <HAL_UART_MspInit+0x148>)
 8006b94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b98:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b9a:	4b2a      	ldr	r3, [pc, #168]	; (8006c44 <HAL_UART_MspInit+0x148>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ba0:	4b28      	ldr	r3, [pc, #160]	; (8006c44 <HAL_UART_MspInit+0x148>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006ba6:	4b27      	ldr	r3, [pc, #156]	; (8006c44 <HAL_UART_MspInit+0x148>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006bac:	4b25      	ldr	r3, [pc, #148]	; (8006c44 <HAL_UART_MspInit+0x148>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006bb2:	4b24      	ldr	r3, [pc, #144]	; (8006c44 <HAL_UART_MspInit+0x148>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006bb8:	4822      	ldr	r0, [pc, #136]	; (8006c44 <HAL_UART_MspInit+0x148>)
 8006bba:	f000 faab 	bl	8007114 <HAL_DMA_Init>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006bc4:	f7fd fd80 	bl	80046c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a1e      	ldr	r2, [pc, #120]	; (8006c44 <HAL_UART_MspInit+0x148>)
 8006bcc:	639a      	str	r2, [r3, #56]	; 0x38
 8006bce:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <HAL_UART_MspInit+0x148>)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006bd4:	4b1d      	ldr	r3, [pc, #116]	; (8006c4c <HAL_UART_MspInit+0x150>)
 8006bd6:	4a1e      	ldr	r2, [pc, #120]	; (8006c50 <HAL_UART_MspInit+0x154>)
 8006bd8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006bda:	4b1c      	ldr	r3, [pc, #112]	; (8006c4c <HAL_UART_MspInit+0x150>)
 8006bdc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006be0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006be2:	4b1a      	ldr	r3, [pc, #104]	; (8006c4c <HAL_UART_MspInit+0x150>)
 8006be4:	2240      	movs	r2, #64	; 0x40
 8006be6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006be8:	4b18      	ldr	r3, [pc, #96]	; (8006c4c <HAL_UART_MspInit+0x150>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006bee:	4b17      	ldr	r3, [pc, #92]	; (8006c4c <HAL_UART_MspInit+0x150>)
 8006bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bf4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006bf6:	4b15      	ldr	r3, [pc, #84]	; (8006c4c <HAL_UART_MspInit+0x150>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006bfc:	4b13      	ldr	r3, [pc, #76]	; (8006c4c <HAL_UART_MspInit+0x150>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006c02:	4b12      	ldr	r3, [pc, #72]	; (8006c4c <HAL_UART_MspInit+0x150>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006c08:	4b10      	ldr	r3, [pc, #64]	; (8006c4c <HAL_UART_MspInit+0x150>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c0e:	4b0f      	ldr	r3, [pc, #60]	; (8006c4c <HAL_UART_MspInit+0x150>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006c14:	480d      	ldr	r0, [pc, #52]	; (8006c4c <HAL_UART_MspInit+0x150>)
 8006c16:	f000 fa7d 	bl	8007114 <HAL_DMA_Init>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8006c20:	f7fd fd52 	bl	80046c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a09      	ldr	r2, [pc, #36]	; (8006c4c <HAL_UART_MspInit+0x150>)
 8006c28:	635a      	str	r2, [r3, #52]	; 0x34
 8006c2a:	4a08      	ldr	r2, [pc, #32]	; (8006c4c <HAL_UART_MspInit+0x150>)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006c30:	bf00      	nop
 8006c32:	3728      	adds	r7, #40	; 0x28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40004400 	.word	0x40004400
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	40020000 	.word	0x40020000
 8006c44:	200006e4 	.word	0x200006e4
 8006c48:	40026088 	.word	0x40026088
 8006c4c:	20000744 	.word	0x20000744
 8006c50:	400260a0 	.word	0x400260a0

08006c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006c58:	480d      	ldr	r0, [pc, #52]	; (8006c90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006c5a:	490e      	ldr	r1, [pc, #56]	; (8006c94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006c5c:	4a0e      	ldr	r2, [pc, #56]	; (8006c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c60:	e002      	b.n	8006c68 <LoopCopyDataInit>

08006c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c66:	3304      	adds	r3, #4

08006c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c6c:	d3f9      	bcc.n	8006c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c6e:	4a0b      	ldr	r2, [pc, #44]	; (8006c9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006c70:	4c0b      	ldr	r4, [pc, #44]	; (8006ca0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c74:	e001      	b.n	8006c7a <LoopFillZerobss>

08006c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c78:	3204      	adds	r2, #4

08006c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c7c:	d3fb      	bcc.n	8006c76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006c7e:	f7ff fcd1 	bl	8006624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c82:	f006 fd93 	bl	800d7ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006c86:	f7fd fbe3 	bl	8004450 <main>
  bx  lr    
 8006c8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006c8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c94:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8006c98:	08025df0 	.word	0x08025df0
  ldr r2, =_sbss
 8006c9c:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8006ca0:	200007fc 	.word	0x200007fc

08006ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ca4:	e7fe      	b.n	8006ca4 <ADC_IRQHandler>
	...

08006ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006cac:	4b0e      	ldr	r3, [pc, #56]	; (8006ce8 <HAL_Init+0x40>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a0d      	ldr	r2, [pc, #52]	; (8006ce8 <HAL_Init+0x40>)
 8006cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006cb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <HAL_Init+0x40>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a0a      	ldr	r2, [pc, #40]	; (8006ce8 <HAL_Init+0x40>)
 8006cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006cc4:	4b08      	ldr	r3, [pc, #32]	; (8006ce8 <HAL_Init+0x40>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a07      	ldr	r2, [pc, #28]	; (8006ce8 <HAL_Init+0x40>)
 8006cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006cd0:	2003      	movs	r0, #3
 8006cd2:	f000 f9b3 	bl	800703c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	f000 f808 	bl	8006cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006cdc:	f7ff fb12 	bl	8006304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	40023c00 	.word	0x40023c00

08006cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006cf4:	4b12      	ldr	r3, [pc, #72]	; (8006d40 <HAL_InitTick+0x54>)
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	4b12      	ldr	r3, [pc, #72]	; (8006d44 <HAL_InitTick+0x58>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f9d9 	bl	80070c2 <HAL_SYSTICK_Config>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e00e      	b.n	8006d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b0f      	cmp	r3, #15
 8006d1e:	d80a      	bhi.n	8006d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d20:	2200      	movs	r2, #0
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	f04f 30ff 	mov.w	r0, #4294967295
 8006d28:	f000 f993 	bl	8007052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d2c:	4a06      	ldr	r2, [pc, #24]	; (8006d48 <HAL_InitTick+0x5c>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e000      	b.n	8006d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000034 	.word	0x20000034
 8006d44:	2000003c 	.word	0x2000003c
 8006d48:	20000038 	.word	0x20000038

08006d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006d50:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <HAL_IncTick+0x20>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	4b06      	ldr	r3, [pc, #24]	; (8006d70 <HAL_IncTick+0x24>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	4a04      	ldr	r2, [pc, #16]	; (8006d70 <HAL_IncTick+0x24>)
 8006d5e:	6013      	str	r3, [r2, #0]
}
 8006d60:	bf00      	nop
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	2000003c 	.word	0x2000003c
 8006d70:	200007e8 	.word	0x200007e8

08006d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
  return uwTick;
 8006d78:	4b03      	ldr	r3, [pc, #12]	; (8006d88 <HAL_GetTick+0x14>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	200007e8 	.word	0x200007e8

08006d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d94:	f7ff ffee 	bl	8006d74 <HAL_GetTick>
 8006d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da4:	d005      	beq.n	8006db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006da6:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <HAL_Delay+0x44>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006db2:	bf00      	nop
 8006db4:	f7ff ffde 	bl	8006d74 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d8f7      	bhi.n	8006db4 <HAL_Delay+0x28>
  {
  }
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	2000003c 	.word	0x2000003c

08006dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006de4:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <__NVIC_SetPriorityGrouping+0x44>)
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006df0:	4013      	ands	r3, r2
 8006df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e06:	4a04      	ldr	r2, [pc, #16]	; (8006e18 <__NVIC_SetPriorityGrouping+0x44>)
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	60d3      	str	r3, [r2, #12]
}
 8006e0c:	bf00      	nop
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	e000ed00 	.word	0xe000ed00

08006e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e20:	4b04      	ldr	r3, [pc, #16]	; (8006e34 <__NVIC_GetPriorityGrouping+0x18>)
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	0a1b      	lsrs	r3, r3, #8
 8006e26:	f003 0307 	and.w	r3, r3, #7
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	e000ed00 	.word	0xe000ed00

08006e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	db0b      	blt.n	8006e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	f003 021f 	and.w	r2, r3, #31
 8006e50:	4907      	ldr	r1, [pc, #28]	; (8006e70 <__NVIC_EnableIRQ+0x38>)
 8006e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e56:	095b      	lsrs	r3, r3, #5
 8006e58:	2001      	movs	r0, #1
 8006e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8006e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	e000e100 	.word	0xe000e100

08006e74 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	db12      	blt.n	8006eac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e86:	79fb      	ldrb	r3, [r7, #7]
 8006e88:	f003 021f 	and.w	r2, r3, #31
 8006e8c:	490a      	ldr	r1, [pc, #40]	; (8006eb8 <__NVIC_DisableIRQ+0x44>)
 8006e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	2001      	movs	r0, #1
 8006e96:	fa00 f202 	lsl.w	r2, r0, r2
 8006e9a:	3320      	adds	r3, #32
 8006e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006ea0:	f3bf 8f4f 	dsb	sy
}
 8006ea4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006ea6:	f3bf 8f6f 	isb	sy
}
 8006eaa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	e000e100 	.word	0xe000e100

08006ebc <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	db0e      	blt.n	8006eec <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006ece:	4a0b      	ldr	r2, [pc, #44]	; (8006efc <__NVIC_GetPendingIRQ+0x40>)
 8006ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ed4:	095b      	lsrs	r3, r3, #5
 8006ed6:	3340      	adds	r3, #64	; 0x40
 8006ed8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	f003 031f 	and.w	r3, r3, #31
 8006ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	e000      	b.n	8006eee <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8006eec:	2300      	movs	r3, #0
  }
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	e000e100 	.word	0xe000e100

08006f00 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	db0c      	blt.n	8006f2c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f12:	79fb      	ldrb	r3, [r7, #7]
 8006f14:	f003 021f 	and.w	r2, r3, #31
 8006f18:	4907      	ldr	r1, [pc, #28]	; (8006f38 <__NVIC_ClearPendingIRQ+0x38>)
 8006f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	2001      	movs	r0, #1
 8006f22:	fa00 f202 	lsl.w	r2, r0, r2
 8006f26:	3360      	adds	r3, #96	; 0x60
 8006f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	e000e100 	.word	0xe000e100

08006f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	6039      	str	r1, [r7, #0]
 8006f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	db0a      	blt.n	8006f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	490c      	ldr	r1, [pc, #48]	; (8006f88 <__NVIC_SetPriority+0x4c>)
 8006f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f5a:	0112      	lsls	r2, r2, #4
 8006f5c:	b2d2      	uxtb	r2, r2
 8006f5e:	440b      	add	r3, r1
 8006f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f64:	e00a      	b.n	8006f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	4908      	ldr	r1, [pc, #32]	; (8006f8c <__NVIC_SetPriority+0x50>)
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	3b04      	subs	r3, #4
 8006f74:	0112      	lsls	r2, r2, #4
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	440b      	add	r3, r1
 8006f7a:	761a      	strb	r2, [r3, #24]
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	e000e100 	.word	0xe000e100
 8006f8c:	e000ed00 	.word	0xe000ed00

08006f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b089      	sub	sp, #36	; 0x24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f1c3 0307 	rsb	r3, r3, #7
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	bf28      	it	cs
 8006fae:	2304      	movcs	r3, #4
 8006fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	2b06      	cmp	r3, #6
 8006fb8:	d902      	bls.n	8006fc0 <NVIC_EncodePriority+0x30>
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	3b03      	subs	r3, #3
 8006fbe:	e000      	b.n	8006fc2 <NVIC_EncodePriority+0x32>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	fa02 f303 	lsl.w	r3, r2, r3
 8006fce:	43da      	mvns	r2, r3
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	401a      	ands	r2, r3
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe2:	43d9      	mvns	r1, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fe8:	4313      	orrs	r3, r2
         );
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3724      	adds	r7, #36	; 0x24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
	...

08006ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	3b01      	subs	r3, #1
 8007004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007008:	d301      	bcc.n	800700e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800700a:	2301      	movs	r3, #1
 800700c:	e00f      	b.n	800702e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800700e:	4a0a      	ldr	r2, [pc, #40]	; (8007038 <SysTick_Config+0x40>)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3b01      	subs	r3, #1
 8007014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007016:	210f      	movs	r1, #15
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	f7ff ff8e 	bl	8006f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <SysTick_Config+0x40>)
 8007022:	2200      	movs	r2, #0
 8007024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007026:	4b04      	ldr	r3, [pc, #16]	; (8007038 <SysTick_Config+0x40>)
 8007028:	2207      	movs	r2, #7
 800702a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	e000e010 	.word	0xe000e010

0800703c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff fec5 	bl	8006dd4 <__NVIC_SetPriorityGrouping>
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007052:	b580      	push	{r7, lr}
 8007054:	b086      	sub	sp, #24
 8007056:	af00      	add	r7, sp, #0
 8007058:	4603      	mov	r3, r0
 800705a:	60b9      	str	r1, [r7, #8]
 800705c:	607a      	str	r2, [r7, #4]
 800705e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007060:	2300      	movs	r3, #0
 8007062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007064:	f7ff feda 	bl	8006e1c <__NVIC_GetPriorityGrouping>
 8007068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	6978      	ldr	r0, [r7, #20]
 8007070:	f7ff ff8e 	bl	8006f90 <NVIC_EncodePriority>
 8007074:	4602      	mov	r2, r0
 8007076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800707a:	4611      	mov	r1, r2
 800707c:	4618      	mov	r0, r3
 800707e:	f7ff ff5d 	bl	8006f3c <__NVIC_SetPriority>
}
 8007082:	bf00      	nop
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b082      	sub	sp, #8
 800708e:	af00      	add	r7, sp, #0
 8007090:	4603      	mov	r3, r0
 8007092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff fecd 	bl	8006e38 <__NVIC_EnableIRQ>
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	4603      	mov	r3, r0
 80070ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80070b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff fedd 	bl	8006e74 <__NVIC_DisableIRQ>
}
 80070ba:	bf00      	nop
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b082      	sub	sp, #8
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff ff94 	bl	8006ff8 <SysTick_Config>
 80070d0:	4603      	mov	r3, r0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	4603      	mov	r3, r0
 80070e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 80070e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7ff fee7 	bl	8006ebc <__NVIC_GetPendingIRQ>
 80070ee:	4603      	mov	r3, r0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	4603      	mov	r3, r0
 8007100:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff fefa 	bl	8006f00 <__NVIC_ClearPendingIRQ>
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007120:	f7ff fe28 	bl	8006d74 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e099      	b.n	8007264 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0201 	bic.w	r2, r2, #1
 800714e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007150:	e00f      	b.n	8007172 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007152:	f7ff fe0f 	bl	8006d74 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b05      	cmp	r3, #5
 800715e:	d908      	bls.n	8007172 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2220      	movs	r2, #32
 8007164:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2203      	movs	r2, #3
 800716a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e078      	b.n	8007264 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e8      	bne.n	8007152 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4b38      	ldr	r3, [pc, #224]	; (800726c <HAL_DMA_Init+0x158>)
 800718c:	4013      	ands	r3, r2
 800718e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800719e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d107      	bne.n	80071dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	4313      	orrs	r3, r2
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f023 0307 	bic.w	r3, r3, #7
 80071f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	2b04      	cmp	r3, #4
 8007204:	d117      	bne.n	8007236 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	4313      	orrs	r3, r2
 800720e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00e      	beq.n	8007236 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fb0f 	bl	800783c <DMA_CheckFifoParam>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d008      	beq.n	8007236 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2240      	movs	r2, #64	; 0x40
 8007228:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007232:	2301      	movs	r3, #1
 8007234:	e016      	b.n	8007264 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fac6 	bl	80077d0 <DMA_CalcBaseAndBitshift>
 8007244:	4603      	mov	r3, r0
 8007246:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800724c:	223f      	movs	r2, #63	; 0x3f
 800724e:	409a      	lsls	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	f010803f 	.word	0xf010803f

08007270 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007286:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800728e:	2b01      	cmp	r3, #1
 8007290:	d101      	bne.n	8007296 <HAL_DMA_Start_IT+0x26>
 8007292:	2302      	movs	r3, #2
 8007294:	e040      	b.n	8007318 <HAL_DMA_Start_IT+0xa8>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d12f      	bne.n	800730a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	68b9      	ldr	r1, [r7, #8]
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fa58 	bl	8007774 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c8:	223f      	movs	r2, #63	; 0x3f
 80072ca:	409a      	lsls	r2, r3
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f042 0216 	orr.w	r2, r2, #22
 80072de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d007      	beq.n	80072f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0208 	orr.w	r2, r2, #8
 80072f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f042 0201 	orr.w	r2, r2, #1
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	e005      	b.n	8007316 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007312:	2302      	movs	r3, #2
 8007314:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007316:	7dfb      	ldrb	r3, [r7, #23]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800732e:	f7ff fd21 	bl	8006d74 <HAL_GetTick>
 8007332:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d008      	beq.n	8007352 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2280      	movs	r2, #128	; 0x80
 8007344:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e052      	b.n	80073f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0216 	bic.w	r2, r2, #22
 8007360:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695a      	ldr	r2, [r3, #20]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007370:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d103      	bne.n	8007382 <HAL_DMA_Abort+0x62>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737e:	2b00      	cmp	r3, #0
 8007380:	d007      	beq.n	8007392 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 0208 	bic.w	r2, r2, #8
 8007390:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0201 	bic.w	r2, r2, #1
 80073a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073a2:	e013      	b.n	80073cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073a4:	f7ff fce6 	bl	8006d74 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	2b05      	cmp	r3, #5
 80073b0:	d90c      	bls.n	80073cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2203      	movs	r2, #3
 80073bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e015      	b.n	80073f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e4      	bne.n	80073a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073de:	223f      	movs	r2, #63	; 0x3f
 80073e0:	409a      	lsls	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d004      	beq.n	800741e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2280      	movs	r2, #128	; 0x80
 8007418:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e00c      	b.n	8007438 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2205      	movs	r2, #5
 8007422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0201 	bic.w	r2, r2, #1
 8007434:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007450:	4b92      	ldr	r3, [pc, #584]	; (800769c <HAL_DMA_IRQHandler+0x258>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a92      	ldr	r2, [pc, #584]	; (80076a0 <HAL_DMA_IRQHandler+0x25c>)
 8007456:	fba2 2303 	umull	r2, r3, r2, r3
 800745a:	0a9b      	lsrs	r3, r3, #10
 800745c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007462:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800746e:	2208      	movs	r2, #8
 8007470:	409a      	lsls	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4013      	ands	r3, r2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d01a      	beq.n	80074b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	2b00      	cmp	r3, #0
 8007486:	d013      	beq.n	80074b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0204 	bic.w	r2, r2, #4
 8007496:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800749c:	2208      	movs	r2, #8
 800749e:	409a      	lsls	r2, r3
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a8:	f043 0201 	orr.w	r2, r3, #1
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b4:	2201      	movs	r2, #1
 80074b6:	409a      	lsls	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4013      	ands	r3, r2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d012      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00b      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d2:	2201      	movs	r2, #1
 80074d4:	409a      	lsls	r2, r3
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074de:	f043 0202 	orr.w	r2, r3, #2
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ea:	2204      	movs	r2, #4
 80074ec:	409a      	lsls	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4013      	ands	r3, r2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d012      	beq.n	800751c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00b      	beq.n	800751c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007508:	2204      	movs	r2, #4
 800750a:	409a      	lsls	r2, r3
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007514:	f043 0204 	orr.w	r2, r3, #4
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007520:	2210      	movs	r2, #16
 8007522:	409a      	lsls	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4013      	ands	r3, r2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d043      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0308 	and.w	r3, r3, #8
 8007536:	2b00      	cmp	r3, #0
 8007538:	d03c      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800753e:	2210      	movs	r2, #16
 8007540:	409a      	lsls	r2, r3
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d018      	beq.n	8007586 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d108      	bne.n	8007574 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	2b00      	cmp	r3, #0
 8007568:	d024      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	4798      	blx	r3
 8007572:	e01f      	b.n	80075b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007578:	2b00      	cmp	r3, #0
 800757a:	d01b      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	4798      	blx	r3
 8007584:	e016      	b.n	80075b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007590:	2b00      	cmp	r3, #0
 8007592:	d107      	bne.n	80075a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0208 	bic.w	r2, r2, #8
 80075a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b8:	2220      	movs	r2, #32
 80075ba:	409a      	lsls	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4013      	ands	r3, r2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 808e 	beq.w	80076e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0310 	and.w	r3, r3, #16
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 8086 	beq.w	80076e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075da:	2220      	movs	r2, #32
 80075dc:	409a      	lsls	r2, r3
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b05      	cmp	r3, #5
 80075ec:	d136      	bne.n	800765c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0216 	bic.w	r2, r2, #22
 80075fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	695a      	ldr	r2, [r3, #20]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800760c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	2b00      	cmp	r3, #0
 8007614:	d103      	bne.n	800761e <HAL_DMA_IRQHandler+0x1da>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800761a:	2b00      	cmp	r3, #0
 800761c:	d007      	beq.n	800762e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f022 0208 	bic.w	r2, r2, #8
 800762c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007632:	223f      	movs	r2, #63	; 0x3f
 8007634:	409a      	lsls	r2, r3
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764e:	2b00      	cmp	r3, #0
 8007650:	d07d      	beq.n	800774e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	4798      	blx	r3
        }
        return;
 800765a:	e078      	b.n	800774e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d01c      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d108      	bne.n	800768a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767c:	2b00      	cmp	r3, #0
 800767e:	d030      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	4798      	blx	r3
 8007688:	e02b      	b.n	80076e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768e:	2b00      	cmp	r3, #0
 8007690:	d027      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
 800769a:	e022      	b.n	80076e2 <HAL_DMA_IRQHandler+0x29e>
 800769c:	20000034 	.word	0x20000034
 80076a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10f      	bne.n	80076d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0210 	bic.w	r2, r2, #16
 80076c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d032      	beq.n	8007750 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d022      	beq.n	800773c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2205      	movs	r2, #5
 80076fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 0201 	bic.w	r2, r2, #1
 800770c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	3301      	adds	r3, #1
 8007712:	60bb      	str	r3, [r7, #8]
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	429a      	cmp	r2, r3
 8007718:	d307      	bcc.n	800772a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1f2      	bne.n	800770e <HAL_DMA_IRQHandler+0x2ca>
 8007728:	e000      	b.n	800772c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800772a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	4798      	blx	r3
 800774c:	e000      	b.n	8007750 <HAL_DMA_IRQHandler+0x30c>
        return;
 800774e:	bf00      	nop
    }
  }
}
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop

08007758 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007766:	b2db      	uxtb	r3, r3
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007790:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2b40      	cmp	r3, #64	; 0x40
 80077a0:	d108      	bne.n	80077b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80077b2:	e007      	b.n	80077c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	60da      	str	r2, [r3, #12]
}
 80077c4:	bf00      	nop
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	3b10      	subs	r3, #16
 80077e0:	4a14      	ldr	r2, [pc, #80]	; (8007834 <DMA_CalcBaseAndBitshift+0x64>)
 80077e2:	fba2 2303 	umull	r2, r3, r2, r3
 80077e6:	091b      	lsrs	r3, r3, #4
 80077e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80077ea:	4a13      	ldr	r2, [pc, #76]	; (8007838 <DMA_CalcBaseAndBitshift+0x68>)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d909      	bls.n	8007812 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	1d1a      	adds	r2, r3, #4
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	659a      	str	r2, [r3, #88]	; 0x58
 8007810:	e007      	b.n	8007822 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800781a:	f023 0303 	bic.w	r3, r3, #3
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	aaaaaaab 	.word	0xaaaaaaab
 8007838:	080258c4 	.word	0x080258c4

0800783c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d11f      	bne.n	8007896 <DMA_CheckFifoParam+0x5a>
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2b03      	cmp	r3, #3
 800785a:	d856      	bhi.n	800790a <DMA_CheckFifoParam+0xce>
 800785c:	a201      	add	r2, pc, #4	; (adr r2, 8007864 <DMA_CheckFifoParam+0x28>)
 800785e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007862:	bf00      	nop
 8007864:	08007875 	.word	0x08007875
 8007868:	08007887 	.word	0x08007887
 800786c:	08007875 	.word	0x08007875
 8007870:	0800790b 	.word	0x0800790b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d046      	beq.n	800790e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007884:	e043      	b.n	800790e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800788e:	d140      	bne.n	8007912 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007894:	e03d      	b.n	8007912 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800789e:	d121      	bne.n	80078e4 <DMA_CheckFifoParam+0xa8>
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d837      	bhi.n	8007916 <DMA_CheckFifoParam+0xda>
 80078a6:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <DMA_CheckFifoParam+0x70>)
 80078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ac:	080078bd 	.word	0x080078bd
 80078b0:	080078c3 	.word	0x080078c3
 80078b4:	080078bd 	.word	0x080078bd
 80078b8:	080078d5 	.word	0x080078d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	73fb      	strb	r3, [r7, #15]
      break;
 80078c0:	e030      	b.n	8007924 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d025      	beq.n	800791a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078d2:	e022      	b.n	800791a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078dc:	d11f      	bne.n	800791e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80078e2:	e01c      	b.n	800791e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d903      	bls.n	80078f2 <DMA_CheckFifoParam+0xb6>
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d003      	beq.n	80078f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80078f0:	e018      	b.n	8007924 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	73fb      	strb	r3, [r7, #15]
      break;
 80078f6:	e015      	b.n	8007924 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00e      	beq.n	8007922 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	73fb      	strb	r3, [r7, #15]
      break;
 8007908:	e00b      	b.n	8007922 <DMA_CheckFifoParam+0xe6>
      break;
 800790a:	bf00      	nop
 800790c:	e00a      	b.n	8007924 <DMA_CheckFifoParam+0xe8>
      break;
 800790e:	bf00      	nop
 8007910:	e008      	b.n	8007924 <DMA_CheckFifoParam+0xe8>
      break;
 8007912:	bf00      	nop
 8007914:	e006      	b.n	8007924 <DMA_CheckFifoParam+0xe8>
      break;
 8007916:	bf00      	nop
 8007918:	e004      	b.n	8007924 <DMA_CheckFifoParam+0xe8>
      break;
 800791a:	bf00      	nop
 800791c:	e002      	b.n	8007924 <DMA_CheckFifoParam+0xe8>
      break;   
 800791e:	bf00      	nop
 8007920:	e000      	b.n	8007924 <DMA_CheckFifoParam+0xe8>
      break;
 8007922:	bf00      	nop
    }
  } 
  
  return status; 
 8007924:	7bfb      	ldrb	r3, [r7, #15]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop

08007934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007934:	b480      	push	{r7}
 8007936:	b089      	sub	sp, #36	; 0x24
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800793e:	2300      	movs	r3, #0
 8007940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007942:	2300      	movs	r3, #0
 8007944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007946:	2300      	movs	r3, #0
 8007948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800794a:	2300      	movs	r3, #0
 800794c:	61fb      	str	r3, [r7, #28]
 800794e:	e159      	b.n	8007c04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007950:	2201      	movs	r2, #1
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	fa02 f303 	lsl.w	r3, r2, r3
 8007958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	4013      	ands	r3, r2
 8007962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	429a      	cmp	r2, r3
 800796a:	f040 8148 	bne.w	8007bfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f003 0303 	and.w	r3, r3, #3
 8007976:	2b01      	cmp	r3, #1
 8007978:	d005      	beq.n	8007986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007982:	2b02      	cmp	r3, #2
 8007984:	d130      	bne.n	80079e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	2203      	movs	r2, #3
 8007992:	fa02 f303 	lsl.w	r3, r2, r3
 8007996:	43db      	mvns	r3, r3
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	4013      	ands	r3, r2
 800799c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	fa02 f303 	lsl.w	r3, r2, r3
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80079bc:	2201      	movs	r2, #1
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	fa02 f303 	lsl.w	r3, r2, r3
 80079c4:	43db      	mvns	r3, r3
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	4013      	ands	r3, r2
 80079ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	091b      	lsrs	r3, r3, #4
 80079d2:	f003 0201 	and.w	r2, r3, #1
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	fa02 f303 	lsl.w	r3, r2, r3
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	4313      	orrs	r3, r2
 80079e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f003 0303 	and.w	r3, r3, #3
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d017      	beq.n	8007a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	2203      	movs	r2, #3
 8007a00:	fa02 f303 	lsl.w	r3, r2, r3
 8007a04:	43db      	mvns	r3, r3
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	689a      	ldr	r2, [r3, #8]
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f003 0303 	and.w	r3, r3, #3
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d123      	bne.n	8007a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	08da      	lsrs	r2, r3, #3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3208      	adds	r2, #8
 8007a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	f003 0307 	and.w	r3, r3, #7
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	220f      	movs	r2, #15
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	4013      	ands	r3, r2
 8007a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	08da      	lsrs	r2, r3, #3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3208      	adds	r2, #8
 8007a72:	69b9      	ldr	r1, [r7, #24]
 8007a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	2203      	movs	r2, #3
 8007a84:	fa02 f303 	lsl.w	r3, r2, r3
 8007a88:	43db      	mvns	r3, r3
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f003 0203 	and.w	r2, r3, #3
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 80a2 	beq.w	8007bfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007aba:	2300      	movs	r3, #0
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	4b57      	ldr	r3, [pc, #348]	; (8007c1c <HAL_GPIO_Init+0x2e8>)
 8007ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac2:	4a56      	ldr	r2, [pc, #344]	; (8007c1c <HAL_GPIO_Init+0x2e8>)
 8007ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8007aca:	4b54      	ldr	r3, [pc, #336]	; (8007c1c <HAL_GPIO_Init+0x2e8>)
 8007acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ad6:	4a52      	ldr	r2, [pc, #328]	; (8007c20 <HAL_GPIO_Init+0x2ec>)
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	089b      	lsrs	r3, r3, #2
 8007adc:	3302      	adds	r3, #2
 8007ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	220f      	movs	r2, #15
 8007aee:	fa02 f303 	lsl.w	r3, r2, r3
 8007af2:	43db      	mvns	r3, r3
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	4013      	ands	r3, r2
 8007af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a49      	ldr	r2, [pc, #292]	; (8007c24 <HAL_GPIO_Init+0x2f0>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d019      	beq.n	8007b36 <HAL_GPIO_Init+0x202>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a48      	ldr	r2, [pc, #288]	; (8007c28 <HAL_GPIO_Init+0x2f4>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d013      	beq.n	8007b32 <HAL_GPIO_Init+0x1fe>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a47      	ldr	r2, [pc, #284]	; (8007c2c <HAL_GPIO_Init+0x2f8>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d00d      	beq.n	8007b2e <HAL_GPIO_Init+0x1fa>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a46      	ldr	r2, [pc, #280]	; (8007c30 <HAL_GPIO_Init+0x2fc>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d007      	beq.n	8007b2a <HAL_GPIO_Init+0x1f6>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a45      	ldr	r2, [pc, #276]	; (8007c34 <HAL_GPIO_Init+0x300>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d101      	bne.n	8007b26 <HAL_GPIO_Init+0x1f2>
 8007b22:	2304      	movs	r3, #4
 8007b24:	e008      	b.n	8007b38 <HAL_GPIO_Init+0x204>
 8007b26:	2307      	movs	r3, #7
 8007b28:	e006      	b.n	8007b38 <HAL_GPIO_Init+0x204>
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e004      	b.n	8007b38 <HAL_GPIO_Init+0x204>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e002      	b.n	8007b38 <HAL_GPIO_Init+0x204>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e000      	b.n	8007b38 <HAL_GPIO_Init+0x204>
 8007b36:	2300      	movs	r3, #0
 8007b38:	69fa      	ldr	r2, [r7, #28]
 8007b3a:	f002 0203 	and.w	r2, r2, #3
 8007b3e:	0092      	lsls	r2, r2, #2
 8007b40:	4093      	lsls	r3, r2
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b48:	4935      	ldr	r1, [pc, #212]	; (8007c20 <HAL_GPIO_Init+0x2ec>)
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	089b      	lsrs	r3, r3, #2
 8007b4e:	3302      	adds	r3, #2
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007b56:	4b38      	ldr	r3, [pc, #224]	; (8007c38 <HAL_GPIO_Init+0x304>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	43db      	mvns	r3, r3
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	4013      	ands	r3, r2
 8007b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007b7a:	4a2f      	ldr	r2, [pc, #188]	; (8007c38 <HAL_GPIO_Init+0x304>)
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007b80:	4b2d      	ldr	r3, [pc, #180]	; (8007c38 <HAL_GPIO_Init+0x304>)
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	43db      	mvns	r3, r3
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007ba4:	4a24      	ldr	r2, [pc, #144]	; (8007c38 <HAL_GPIO_Init+0x304>)
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007baa:	4b23      	ldr	r3, [pc, #140]	; (8007c38 <HAL_GPIO_Init+0x304>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	43db      	mvns	r3, r3
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007bce:	4a1a      	ldr	r2, [pc, #104]	; (8007c38 <HAL_GPIO_Init+0x304>)
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bd4:	4b18      	ldr	r3, [pc, #96]	; (8007c38 <HAL_GPIO_Init+0x304>)
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	43db      	mvns	r3, r3
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	4013      	ands	r3, r2
 8007be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007bf8:	4a0f      	ldr	r2, [pc, #60]	; (8007c38 <HAL_GPIO_Init+0x304>)
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	3301      	adds	r3, #1
 8007c02:	61fb      	str	r3, [r7, #28]
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	2b0f      	cmp	r3, #15
 8007c08:	f67f aea2 	bls.w	8007950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	bf00      	nop
 8007c10:	3724      	adds	r7, #36	; 0x24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	40023800 	.word	0x40023800
 8007c20:	40013800 	.word	0x40013800
 8007c24:	40020000 	.word	0x40020000
 8007c28:	40020400 	.word	0x40020400
 8007c2c:	40020800 	.word	0x40020800
 8007c30:	40020c00 	.word	0x40020c00
 8007c34:	40021000 	.word	0x40021000
 8007c38:	40013c00 	.word	0x40013c00

08007c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691a      	ldr	r2, [r3, #16]
 8007c4c:	887b      	ldrh	r3, [r7, #2]
 8007c4e:	4013      	ands	r3, r2
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c54:	2301      	movs	r3, #1
 8007c56:	73fb      	strb	r3, [r7, #15]
 8007c58:	e001      	b.n	8007c5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	807b      	strh	r3, [r7, #2]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c7c:	787b      	ldrb	r3, [r7, #1]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c82:	887a      	ldrh	r2, [r7, #2]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007c88:	e003      	b.n	8007c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007c8a:	887b      	ldrh	r3, [r7, #2]
 8007c8c:	041a      	lsls	r2, r3, #16
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	619a      	str	r2, [r3, #24]
}
 8007c92:	bf00      	nop
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007cb0:	887a      	ldrh	r2, [r7, #2]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	041a      	lsls	r2, r3, #16
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	43d9      	mvns	r1, r3
 8007cbc:	887b      	ldrh	r3, [r7, #2]
 8007cbe:	400b      	ands	r3, r1
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	619a      	str	r2, [r3, #24]
}
 8007cc6:	bf00      	nop
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007cde:	4b08      	ldr	r3, [pc, #32]	; (8007d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ce0:	695a      	ldr	r2, [r3, #20]
 8007ce2:	88fb      	ldrh	r3, [r7, #6]
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d006      	beq.n	8007cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007cea:	4a05      	ldr	r2, [pc, #20]	; (8007d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007cec:	88fb      	ldrh	r3, [r7, #6]
 8007cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007cf0:	88fb      	ldrh	r3, [r7, #6]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fc fcd4 	bl	80046a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	40013c00 	.word	0x40013c00

08007d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e12b      	b.n	8007f6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d106      	bne.n	8007d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fc fa86 	bl	800423c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2224      	movs	r2, #36	; 0x24
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0201 	bic.w	r2, r2, #1
 8007d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007d68:	f003 fcf0 	bl	800b74c <HAL_RCC_GetPCLK1Freq>
 8007d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	4a81      	ldr	r2, [pc, #516]	; (8007f78 <HAL_I2C_Init+0x274>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d807      	bhi.n	8007d88 <HAL_I2C_Init+0x84>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4a80      	ldr	r2, [pc, #512]	; (8007f7c <HAL_I2C_Init+0x278>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	bf94      	ite	ls
 8007d80:	2301      	movls	r3, #1
 8007d82:	2300      	movhi	r3, #0
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	e006      	b.n	8007d96 <HAL_I2C_Init+0x92>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4a7d      	ldr	r2, [pc, #500]	; (8007f80 <HAL_I2C_Init+0x27c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	bf94      	ite	ls
 8007d90:	2301      	movls	r3, #1
 8007d92:	2300      	movhi	r3, #0
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e0e7      	b.n	8007f6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4a78      	ldr	r2, [pc, #480]	; (8007f84 <HAL_I2C_Init+0x280>)
 8007da2:	fba2 2303 	umull	r2, r3, r2, r3
 8007da6:	0c9b      	lsrs	r3, r3, #18
 8007da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	4a6a      	ldr	r2, [pc, #424]	; (8007f78 <HAL_I2C_Init+0x274>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d802      	bhi.n	8007dd8 <HAL_I2C_Init+0xd4>
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	e009      	b.n	8007dec <HAL_I2C_Init+0xe8>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007dde:	fb02 f303 	mul.w	r3, r2, r3
 8007de2:	4a69      	ldr	r2, [pc, #420]	; (8007f88 <HAL_I2C_Init+0x284>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	099b      	lsrs	r3, r3, #6
 8007dea:	3301      	adds	r3, #1
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	6812      	ldr	r2, [r2, #0]
 8007df0:	430b      	orrs	r3, r1
 8007df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007dfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	495c      	ldr	r1, [pc, #368]	; (8007f78 <HAL_I2C_Init+0x274>)
 8007e08:	428b      	cmp	r3, r1
 8007e0a:	d819      	bhi.n	8007e40 <HAL_I2C_Init+0x13c>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	1e59      	subs	r1, r3, #1
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e1a:	1c59      	adds	r1, r3, #1
 8007e1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e20:	400b      	ands	r3, r1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00a      	beq.n	8007e3c <HAL_I2C_Init+0x138>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	1e59      	subs	r1, r3, #1
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e34:	3301      	adds	r3, #1
 8007e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e3a:	e051      	b.n	8007ee0 <HAL_I2C_Init+0x1dc>
 8007e3c:	2304      	movs	r3, #4
 8007e3e:	e04f      	b.n	8007ee0 <HAL_I2C_Init+0x1dc>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d111      	bne.n	8007e6c <HAL_I2C_Init+0x168>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	1e58      	subs	r0, r3, #1
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6859      	ldr	r1, [r3, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	440b      	add	r3, r1
 8007e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	bf0c      	ite	eq
 8007e64:	2301      	moveq	r3, #1
 8007e66:	2300      	movne	r3, #0
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	e012      	b.n	8007e92 <HAL_I2C_Init+0x18e>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	1e58      	subs	r0, r3, #1
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6859      	ldr	r1, [r3, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	440b      	add	r3, r1
 8007e7a:	0099      	lsls	r1, r3, #2
 8007e7c:	440b      	add	r3, r1
 8007e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e82:	3301      	adds	r3, #1
 8007e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	bf0c      	ite	eq
 8007e8c:	2301      	moveq	r3, #1
 8007e8e:	2300      	movne	r3, #0
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <HAL_I2C_Init+0x196>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e022      	b.n	8007ee0 <HAL_I2C_Init+0x1dc>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10e      	bne.n	8007ec0 <HAL_I2C_Init+0x1bc>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	1e58      	subs	r0, r3, #1
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6859      	ldr	r1, [r3, #4]
 8007eaa:	460b      	mov	r3, r1
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	440b      	add	r3, r1
 8007eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ebe:	e00f      	b.n	8007ee0 <HAL_I2C_Init+0x1dc>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	1e58      	subs	r0, r3, #1
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6859      	ldr	r1, [r3, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	440b      	add	r3, r1
 8007ece:	0099      	lsls	r1, r3, #2
 8007ed0:	440b      	add	r3, r1
 8007ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	6809      	ldr	r1, [r1, #0]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69da      	ldr	r2, [r3, #28]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007f0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	6911      	ldr	r1, [r2, #16]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	68d2      	ldr	r2, [r2, #12]
 8007f1a:	4311      	orrs	r1, r2
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	6812      	ldr	r2, [r2, #0]
 8007f20:	430b      	orrs	r3, r1
 8007f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	695a      	ldr	r2, [r3, #20]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	431a      	orrs	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f042 0201 	orr.w	r2, r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	000186a0 	.word	0x000186a0
 8007f7c:	001e847f 	.word	0x001e847f
 8007f80:	003d08ff 	.word	0x003d08ff
 8007f84:	431bde83 	.word	0x431bde83
 8007f88:	10624dd3 	.word	0x10624dd3

08007f8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	607a      	str	r2, [r7, #4]
 8007f96:	461a      	mov	r2, r3
 8007f98:	460b      	mov	r3, r1
 8007f9a:	817b      	strh	r3, [r7, #10]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fa0:	f7fe fee8 	bl	8006d74 <HAL_GetTick>
 8007fa4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	f040 80e0 	bne.w	8008174 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	2319      	movs	r3, #25
 8007fba:	2201      	movs	r2, #1
 8007fbc:	4970      	ldr	r1, [pc, #448]	; (8008180 <HAL_I2C_Master_Transmit+0x1f4>)
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f002 fd7a 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007fca:	2302      	movs	r3, #2
 8007fcc:	e0d3      	b.n	8008176 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d101      	bne.n	8007fdc <HAL_I2C_Master_Transmit+0x50>
 8007fd8:	2302      	movs	r3, #2
 8007fda:	e0cc      	b.n	8008176 <HAL_I2C_Master_Transmit+0x1ea>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d007      	beq.n	8008002 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f042 0201 	orr.w	r2, r2, #1
 8008000:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008010:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2221      	movs	r2, #33	; 0x21
 8008016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2210      	movs	r2, #16
 800801e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	893a      	ldrh	r2, [r7, #8]
 8008032:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008038:	b29a      	uxth	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4a50      	ldr	r2, [pc, #320]	; (8008184 <HAL_I2C_Master_Transmit+0x1f8>)
 8008042:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008044:	8979      	ldrh	r1, [r7, #10]
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	6a3a      	ldr	r2, [r7, #32]
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f002 f9be 	bl	800a3cc <I2C_MasterRequestWrite>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e08d      	b.n	8008176 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800805a:	2300      	movs	r3, #0
 800805c:	613b      	str	r3, [r7, #16]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	613b      	str	r3, [r7, #16]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	613b      	str	r3, [r7, #16]
 800806e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008070:	e066      	b.n	8008140 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	6a39      	ldr	r1, [r7, #32]
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f002 fdf4 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00d      	beq.n	800809e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	2b04      	cmp	r3, #4
 8008088:	d107      	bne.n	800809a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008098:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e06b      	b.n	8008176 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	781a      	ldrb	r2, [r3, #0]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	3b01      	subs	r3, #1
 80080bc:	b29a      	uxth	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	f003 0304 	and.w	r3, r3, #4
 80080d8:	2b04      	cmp	r3, #4
 80080da:	d11b      	bne.n	8008114 <HAL_I2C_Master_Transmit+0x188>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d017      	beq.n	8008114 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	781a      	ldrb	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080fe:	b29b      	uxth	r3, r3
 8008100:	3b01      	subs	r3, #1
 8008102:	b29a      	uxth	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800810c:	3b01      	subs	r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	6a39      	ldr	r1, [r7, #32]
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f002 fde4 	bl	800ace6 <I2C_WaitOnBTFFlagUntilTimeout>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00d      	beq.n	8008140 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	2b04      	cmp	r3, #4
 800812a:	d107      	bne.n	800813c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800813a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e01a      	b.n	8008176 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008144:	2b00      	cmp	r3, #0
 8008146:	d194      	bne.n	8008072 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2220      	movs	r2, #32
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	e000      	b.n	8008176 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008174:	2302      	movs	r3, #2
  }
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	00100002 	.word	0x00100002
 8008184:	ffff0000 	.word	0xffff0000

08008188 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b08c      	sub	sp, #48	; 0x30
 800818c:	af02      	add	r7, sp, #8
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	607a      	str	r2, [r7, #4]
 8008192:	461a      	mov	r2, r3
 8008194:	460b      	mov	r3, r1
 8008196:	817b      	strh	r3, [r7, #10]
 8008198:	4613      	mov	r3, r2
 800819a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800819c:	f7fe fdea 	bl	8006d74 <HAL_GetTick>
 80081a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b20      	cmp	r3, #32
 80081ac:	f040 820b 	bne.w	80085c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	2319      	movs	r3, #25
 80081b6:	2201      	movs	r2, #1
 80081b8:	497c      	ldr	r1, [pc, #496]	; (80083ac <HAL_I2C_Master_Receive+0x224>)
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f002 fc7c 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80081c6:	2302      	movs	r3, #2
 80081c8:	e1fe      	b.n	80085c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d101      	bne.n	80081d8 <HAL_I2C_Master_Receive+0x50>
 80081d4:	2302      	movs	r3, #2
 80081d6:	e1f7      	b.n	80085c8 <HAL_I2C_Master_Receive+0x440>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d007      	beq.n	80081fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f042 0201 	orr.w	r2, r2, #1
 80081fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800820c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2222      	movs	r2, #34	; 0x22
 8008212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2210      	movs	r2, #16
 800821a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	893a      	ldrh	r2, [r7, #8]
 800822e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008234:	b29a      	uxth	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	4a5c      	ldr	r2, [pc, #368]	; (80083b0 <HAL_I2C_Master_Receive+0x228>)
 800823e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008240:	8979      	ldrh	r1, [r7, #10]
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f002 f942 	bl	800a4d0 <I2C_MasterRequestRead>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e1b8      	b.n	80085c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800825a:	2b00      	cmp	r3, #0
 800825c:	d113      	bne.n	8008286 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800825e:	2300      	movs	r3, #0
 8008260:	623b      	str	r3, [r7, #32]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	623b      	str	r3, [r7, #32]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	623b      	str	r3, [r7, #32]
 8008272:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	e18c      	b.n	80085a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800828a:	2b01      	cmp	r3, #1
 800828c:	d11b      	bne.n	80082c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800829c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800829e:	2300      	movs	r3, #0
 80082a0:	61fb      	str	r3, [r7, #28]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	61fb      	str	r3, [r7, #28]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	61fb      	str	r3, [r7, #28]
 80082b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	e16c      	b.n	80085a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d11b      	bne.n	8008306 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082ee:	2300      	movs	r3, #0
 80082f0:	61bb      	str	r3, [r7, #24]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	61bb      	str	r3, [r7, #24]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	61bb      	str	r3, [r7, #24]
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	e14c      	b.n	80085a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008316:	2300      	movs	r3, #0
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	617b      	str	r3, [r7, #20]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	617b      	str	r3, [r7, #20]
 800832a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800832c:	e138      	b.n	80085a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008332:	2b03      	cmp	r3, #3
 8008334:	f200 80f1 	bhi.w	800851a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800833c:	2b01      	cmp	r3, #1
 800833e:	d123      	bne.n	8008388 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f002 fd41 	bl	800adcc <I2C_WaitOnRXNEFlagUntilTimeout>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e139      	b.n	80085c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691a      	ldr	r2, [r3, #16]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	b2d2      	uxtb	r2, r2
 8008360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008370:	3b01      	subs	r3, #1
 8008372:	b29a      	uxth	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800837c:	b29b      	uxth	r3, r3
 800837e:	3b01      	subs	r3, #1
 8008380:	b29a      	uxth	r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008386:	e10b      	b.n	80085a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838c:	2b02      	cmp	r3, #2
 800838e:	d14e      	bne.n	800842e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	2200      	movs	r2, #0
 8008398:	4906      	ldr	r1, [pc, #24]	; (80083b4 <HAL_I2C_Master_Receive+0x22c>)
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f002 fb8c 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d008      	beq.n	80083b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e10e      	b.n	80085c8 <HAL_I2C_Master_Receive+0x440>
 80083aa:	bf00      	nop
 80083ac:	00100002 	.word	0x00100002
 80083b0:	ffff0000 	.word	0xffff0000
 80083b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	691a      	ldr	r2, [r3, #16]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	b2d2      	uxtb	r2, r2
 80083d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	3b01      	subs	r3, #1
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	691a      	ldr	r2, [r3, #16]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	b2d2      	uxtb	r2, r2
 8008406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008416:	3b01      	subs	r3, #1
 8008418:	b29a      	uxth	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008422:	b29b      	uxth	r3, r3
 8008424:	3b01      	subs	r3, #1
 8008426:	b29a      	uxth	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800842c:	e0b8      	b.n	80085a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	2200      	movs	r2, #0
 8008436:	4966      	ldr	r1, [pc, #408]	; (80085d0 <HAL_I2C_Master_Receive+0x448>)
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f002 fb3d 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e0bf      	b.n	80085c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008456:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	691a      	ldr	r2, [r3, #16]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	b2d2      	uxtb	r2, r2
 8008464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	1c5a      	adds	r2, r3, #1
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008474:	3b01      	subs	r3, #1
 8008476:	b29a      	uxth	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008480:	b29b      	uxth	r3, r3
 8008482:	3b01      	subs	r3, #1
 8008484:	b29a      	uxth	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008490:	2200      	movs	r2, #0
 8008492:	494f      	ldr	r1, [pc, #316]	; (80085d0 <HAL_I2C_Master_Receive+0x448>)
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f002 fb0f 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e091      	b.n	80085c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691a      	ldr	r2, [r3, #16]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d0:	3b01      	subs	r3, #1
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084dc:	b29b      	uxth	r3, r3
 80084de:	3b01      	subs	r3, #1
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	691a      	ldr	r2, [r3, #16]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	b2d2      	uxtb	r2, r2
 80084f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	1c5a      	adds	r2, r3, #1
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008502:	3b01      	subs	r3, #1
 8008504:	b29a      	uxth	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800850e:	b29b      	uxth	r3, r3
 8008510:	3b01      	subs	r3, #1
 8008512:	b29a      	uxth	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008518:	e042      	b.n	80085a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800851a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800851c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f002 fc54 	bl	800adcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e04c      	b.n	80085c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	691a      	ldr	r2, [r3, #16]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	b2d2      	uxtb	r2, r2
 800853a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	1c5a      	adds	r2, r3, #1
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800854a:	3b01      	subs	r3, #1
 800854c:	b29a      	uxth	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008556:	b29b      	uxth	r3, r3
 8008558:	3b01      	subs	r3, #1
 800855a:	b29a      	uxth	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	f003 0304 	and.w	r3, r3, #4
 800856a:	2b04      	cmp	r3, #4
 800856c:	d118      	bne.n	80085a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	691a      	ldr	r2, [r3, #16]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	b2d2      	uxtb	r2, r2
 800857a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800858a:	3b01      	subs	r3, #1
 800858c:	b29a      	uxth	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008596:	b29b      	uxth	r3, r3
 8008598:	3b01      	subs	r3, #1
 800859a:	b29a      	uxth	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f47f aec2 	bne.w	800832e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	e000      	b.n	80085c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80085c6:	2302      	movs	r3, #2
  }
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3728      	adds	r7, #40	; 0x28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	00010004 	.word	0x00010004

080085d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af02      	add	r7, sp, #8
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	4608      	mov	r0, r1
 80085de:	4611      	mov	r1, r2
 80085e0:	461a      	mov	r2, r3
 80085e2:	4603      	mov	r3, r0
 80085e4:	817b      	strh	r3, [r7, #10]
 80085e6:	460b      	mov	r3, r1
 80085e8:	813b      	strh	r3, [r7, #8]
 80085ea:	4613      	mov	r3, r2
 80085ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80085ee:	f7fe fbc1 	bl	8006d74 <HAL_GetTick>
 80085f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b20      	cmp	r3, #32
 80085fe:	f040 80d9 	bne.w	80087b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	2319      	movs	r3, #25
 8008608:	2201      	movs	r2, #1
 800860a:	496d      	ldr	r1, [pc, #436]	; (80087c0 <HAL_I2C_Mem_Write+0x1ec>)
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f002 fa53 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008618:	2302      	movs	r3, #2
 800861a:	e0cc      	b.n	80087b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008622:	2b01      	cmp	r3, #1
 8008624:	d101      	bne.n	800862a <HAL_I2C_Mem_Write+0x56>
 8008626:	2302      	movs	r3, #2
 8008628:	e0c5      	b.n	80087b6 <HAL_I2C_Mem_Write+0x1e2>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	2b01      	cmp	r3, #1
 800863e:	d007      	beq.n	8008650 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f042 0201 	orr.w	r2, r2, #1
 800864e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800865e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2221      	movs	r2, #33	; 0x21
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2240      	movs	r2, #64	; 0x40
 800866c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6a3a      	ldr	r2, [r7, #32]
 800867a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008686:	b29a      	uxth	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4a4d      	ldr	r2, [pc, #308]	; (80087c4 <HAL_I2C_Mem_Write+0x1f0>)
 8008690:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008692:	88f8      	ldrh	r0, [r7, #6]
 8008694:	893a      	ldrh	r2, [r7, #8]
 8008696:	8979      	ldrh	r1, [r7, #10]
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	9301      	str	r3, [sp, #4]
 800869c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	4603      	mov	r3, r0
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f001 ffe2 	bl	800a66c <I2C_RequestMemoryWrite>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d052      	beq.n	8008754 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e081      	b.n	80087b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f002 fad4 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00d      	beq.n	80086de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d107      	bne.n	80086da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e06b      	b.n	80087b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	781a      	ldrb	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f8:	3b01      	subs	r3, #1
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008704:	b29b      	uxth	r3, r3
 8008706:	3b01      	subs	r3, #1
 8008708:	b29a      	uxth	r2, r3
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	f003 0304 	and.w	r3, r3, #4
 8008718:	2b04      	cmp	r3, #4
 800871a:	d11b      	bne.n	8008754 <HAL_I2C_Mem_Write+0x180>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008720:	2b00      	cmp	r3, #0
 8008722:	d017      	beq.n	8008754 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	781a      	ldrb	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800873e:	3b01      	subs	r3, #1
 8008740:	b29a      	uxth	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800874a:	b29b      	uxth	r3, r3
 800874c:	3b01      	subs	r3, #1
 800874e:	b29a      	uxth	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1aa      	bne.n	80086b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f002 fac0 	bl	800ace6 <I2C_WaitOnBTFFlagUntilTimeout>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00d      	beq.n	8008788 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008770:	2b04      	cmp	r3, #4
 8008772:	d107      	bne.n	8008784 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008782:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e016      	b.n	80087b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2220      	movs	r2, #32
 800879c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	e000      	b.n	80087b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80087b4:	2302      	movs	r3, #2
  }
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	00100002 	.word	0x00100002
 80087c4:	ffff0000 	.word	0xffff0000

080087c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08c      	sub	sp, #48	; 0x30
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	4608      	mov	r0, r1
 80087d2:	4611      	mov	r1, r2
 80087d4:	461a      	mov	r2, r3
 80087d6:	4603      	mov	r3, r0
 80087d8:	817b      	strh	r3, [r7, #10]
 80087da:	460b      	mov	r3, r1
 80087dc:	813b      	strh	r3, [r7, #8]
 80087de:	4613      	mov	r3, r2
 80087e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80087e2:	f7fe fac7 	bl	8006d74 <HAL_GetTick>
 80087e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b20      	cmp	r3, #32
 80087f2:	f040 8208 	bne.w	8008c06 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	2319      	movs	r3, #25
 80087fc:	2201      	movs	r2, #1
 80087fe:	497b      	ldr	r1, [pc, #492]	; (80089ec <HAL_I2C_Mem_Read+0x224>)
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f002 f959 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800880c:	2302      	movs	r3, #2
 800880e:	e1fb      	b.n	8008c08 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008816:	2b01      	cmp	r3, #1
 8008818:	d101      	bne.n	800881e <HAL_I2C_Mem_Read+0x56>
 800881a:	2302      	movs	r3, #2
 800881c:	e1f4      	b.n	8008c08 <HAL_I2C_Mem_Read+0x440>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b01      	cmp	r3, #1
 8008832:	d007      	beq.n	8008844 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0201 	orr.w	r2, r2, #1
 8008842:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008852:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2222      	movs	r2, #34	; 0x22
 8008858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2240      	movs	r2, #64	; 0x40
 8008860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800886e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008874:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887a:	b29a      	uxth	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4a5b      	ldr	r2, [pc, #364]	; (80089f0 <HAL_I2C_Mem_Read+0x228>)
 8008884:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008886:	88f8      	ldrh	r0, [r7, #6]
 8008888:	893a      	ldrh	r2, [r7, #8]
 800888a:	8979      	ldrh	r1, [r7, #10]
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	9301      	str	r3, [sp, #4]
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	4603      	mov	r3, r0
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f001 ff7e 	bl	800a798 <I2C_RequestMemoryRead>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e1b0      	b.n	8008c08 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d113      	bne.n	80088d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088ae:	2300      	movs	r3, #0
 80088b0:	623b      	str	r3, [r7, #32]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	623b      	str	r3, [r7, #32]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	623b      	str	r3, [r7, #32]
 80088c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	e184      	b.n	8008be0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d11b      	bne.n	8008916 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088ee:	2300      	movs	r3, #0
 80088f0:	61fb      	str	r3, [r7, #28]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	61fb      	str	r3, [r7, #28]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	61fb      	str	r3, [r7, #28]
 8008902:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	e164      	b.n	8008be0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800891a:	2b02      	cmp	r3, #2
 800891c:	d11b      	bne.n	8008956 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800892c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800893c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800893e:	2300      	movs	r3, #0
 8008940:	61bb      	str	r3, [r7, #24]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	61bb      	str	r3, [r7, #24]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	61bb      	str	r3, [r7, #24]
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	e144      	b.n	8008be0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008956:	2300      	movs	r3, #0
 8008958:	617b      	str	r3, [r7, #20]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	617b      	str	r3, [r7, #20]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	617b      	str	r3, [r7, #20]
 800896a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800896c:	e138      	b.n	8008be0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008972:	2b03      	cmp	r3, #3
 8008974:	f200 80f1 	bhi.w	8008b5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800897c:	2b01      	cmp	r3, #1
 800897e:	d123      	bne.n	80089c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008982:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f002 fa21 	bl	800adcc <I2C_WaitOnRXNEFlagUntilTimeout>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e139      	b.n	8008c08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	691a      	ldr	r2, [r3, #16]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	b2d2      	uxtb	r2, r2
 80089a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	1c5a      	adds	r2, r3, #1
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089b0:	3b01      	subs	r3, #1
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089bc:	b29b      	uxth	r3, r3
 80089be:	3b01      	subs	r3, #1
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80089c6:	e10b      	b.n	8008be0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d14e      	bne.n	8008a6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d6:	2200      	movs	r2, #0
 80089d8:	4906      	ldr	r1, [pc, #24]	; (80089f4 <HAL_I2C_Mem_Read+0x22c>)
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f002 f86c 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d008      	beq.n	80089f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e10e      	b.n	8008c08 <HAL_I2C_Mem_Read+0x440>
 80089ea:	bf00      	nop
 80089ec:	00100002 	.word	0x00100002
 80089f0:	ffff0000 	.word	0xffff0000
 80089f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	691a      	ldr	r2, [r3, #16]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	b2d2      	uxtb	r2, r2
 8008a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	1c5a      	adds	r2, r3, #1
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a24:	3b01      	subs	r3, #1
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	3b01      	subs	r3, #1
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	691a      	ldr	r2, [r3, #16]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	b2d2      	uxtb	r2, r2
 8008a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a56:	3b01      	subs	r3, #1
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	3b01      	subs	r3, #1
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a6c:	e0b8      	b.n	8008be0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	2200      	movs	r2, #0
 8008a76:	4966      	ldr	r1, [pc, #408]	; (8008c10 <HAL_I2C_Mem_Read+0x448>)
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f002 f81d 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e0bf      	b.n	8008c08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	691a      	ldr	r2, [r3, #16]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa2:	b2d2      	uxtb	r2, r2
 8008aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	494f      	ldr	r1, [pc, #316]	; (8008c10 <HAL_I2C_Mem_Read+0x448>)
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f001 ffef 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e091      	b.n	8008c08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691a      	ldr	r2, [r3, #16]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	b2d2      	uxtb	r2, r2
 8008b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b06:	1c5a      	adds	r2, r3, #1
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	691a      	ldr	r2, [r3, #16]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	b2d2      	uxtb	r2, r2
 8008b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	1c5a      	adds	r2, r3, #1
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b42:	3b01      	subs	r3, #1
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	3b01      	subs	r3, #1
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008b58:	e042      	b.n	8008be0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f002 f934 	bl	800adcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e04c      	b.n	8008c08 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	691a      	ldr	r2, [r3, #16]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	b2d2      	uxtb	r2, r2
 8008b7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	1c5a      	adds	r2, r3, #1
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	f003 0304 	and.w	r3, r3, #4
 8008baa:	2b04      	cmp	r3, #4
 8008bac:	d118      	bne.n	8008be0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	691a      	ldr	r2, [r3, #16]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	b2d2      	uxtb	r2, r2
 8008bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	1c5a      	adds	r2, r3, #1
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f47f aec2 	bne.w	800896e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	e000      	b.n	8008c08 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008c06:	2302      	movs	r3, #2
  }
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3728      	adds	r7, #40	; 0x28
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	00010004 	.word	0x00010004

08008c14 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b088      	sub	sp, #32
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c34:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c3c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
 8008c40:	2b10      	cmp	r3, #16
 8008c42:	d003      	beq.n	8008c4c <HAL_I2C_EV_IRQHandler+0x38>
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	2b40      	cmp	r3, #64	; 0x40
 8008c48:	f040 80c1 	bne.w	8008dce <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10d      	bne.n	8008c82 <HAL_I2C_EV_IRQHandler+0x6e>
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008c6c:	d003      	beq.n	8008c76 <HAL_I2C_EV_IRQHandler+0x62>
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008c74:	d101      	bne.n	8008c7a <HAL_I2C_EV_IRQHandler+0x66>
 8008c76:	2301      	movs	r3, #1
 8008c78:	e000      	b.n	8008c7c <HAL_I2C_EV_IRQHandler+0x68>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	f000 8132 	beq.w	8008ee6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00c      	beq.n	8008ca6 <HAL_I2C_EV_IRQHandler+0x92>
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	0a5b      	lsrs	r3, r3, #9
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d006      	beq.n	8008ca6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f002 f91c 	bl	800aed6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fd79 	bl	8009796 <I2C_Master_SB>
 8008ca4:	e092      	b.n	8008dcc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	08db      	lsrs	r3, r3, #3
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d009      	beq.n	8008cc6 <HAL_I2C_EV_IRQHandler+0xb2>
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	0a5b      	lsrs	r3, r3, #9
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fdef 	bl	80098a2 <I2C_Master_ADD10>
 8008cc4:	e082      	b.n	8008dcc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	085b      	lsrs	r3, r3, #1
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d009      	beq.n	8008ce6 <HAL_I2C_EV_IRQHandler+0xd2>
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	0a5b      	lsrs	r3, r3, #9
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fe09 	bl	80098f6 <I2C_Master_ADDR>
 8008ce4:	e072      	b.n	8008dcc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	089b      	lsrs	r3, r3, #2
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d03b      	beq.n	8008d6a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d00:	f000 80f3 	beq.w	8008eea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	09db      	lsrs	r3, r3, #7
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00f      	beq.n	8008d30 <HAL_I2C_EV_IRQHandler+0x11c>
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	0a9b      	lsrs	r3, r3, #10
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d009      	beq.n	8008d30 <HAL_I2C_EV_IRQHandler+0x11c>
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	089b      	lsrs	r3, r3, #2
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d103      	bne.n	8008d30 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f9f3 	bl	8009114 <I2C_MasterTransmit_TXE>
 8008d2e:	e04d      	b.n	8008dcc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	089b      	lsrs	r3, r3, #2
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 80d6 	beq.w	8008eea <HAL_I2C_EV_IRQHandler+0x2d6>
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	0a5b      	lsrs	r3, r3, #9
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 80cf 	beq.w	8008eea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	2b21      	cmp	r3, #33	; 0x21
 8008d50:	d103      	bne.n	8008d5a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fa7a 	bl	800924c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d58:	e0c7      	b.n	8008eea <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	2b40      	cmp	r3, #64	; 0x40
 8008d5e:	f040 80c4 	bne.w	8008eea <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fae8 	bl	8009338 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d68:	e0bf      	b.n	8008eea <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d78:	f000 80b7 	beq.w	8008eea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	099b      	lsrs	r3, r3, #6
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00f      	beq.n	8008da8 <HAL_I2C_EV_IRQHandler+0x194>
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	0a9b      	lsrs	r3, r3, #10
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d009      	beq.n	8008da8 <HAL_I2C_EV_IRQHandler+0x194>
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	089b      	lsrs	r3, r3, #2
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d103      	bne.n	8008da8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fb5d 	bl	8009460 <I2C_MasterReceive_RXNE>
 8008da6:	e011      	b.n	8008dcc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	089b      	lsrs	r3, r3, #2
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 809a 	beq.w	8008eea <HAL_I2C_EV_IRQHandler+0x2d6>
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	0a5b      	lsrs	r3, r3, #9
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 8093 	beq.w	8008eea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fbfc 	bl	80095c2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008dca:	e08e      	b.n	8008eea <HAL_I2C_EV_IRQHandler+0x2d6>
 8008dcc:	e08d      	b.n	8008eea <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d004      	beq.n	8008de0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	61fb      	str	r3, [r7, #28]
 8008dde:	e007      	b.n	8008df0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	085b      	lsrs	r3, r3, #1
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d012      	beq.n	8008e22 <HAL_I2C_EV_IRQHandler+0x20e>
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	0a5b      	lsrs	r3, r3, #9
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00c      	beq.n	8008e22 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008e18:	69b9      	ldr	r1, [r7, #24]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 ffba 	bl	8009d94 <I2C_Slave_ADDR>
 8008e20:	e066      	b.n	8008ef0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	091b      	lsrs	r3, r3, #4
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d009      	beq.n	8008e42 <HAL_I2C_EV_IRQHandler+0x22e>
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	0a5b      	lsrs	r3, r3, #9
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fff4 	bl	8009e28 <I2C_Slave_STOPF>
 8008e40:	e056      	b.n	8008ef0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	2b21      	cmp	r3, #33	; 0x21
 8008e46:	d002      	beq.n	8008e4e <HAL_I2C_EV_IRQHandler+0x23a>
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
 8008e4a:	2b29      	cmp	r3, #41	; 0x29
 8008e4c:	d125      	bne.n	8008e9a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	09db      	lsrs	r3, r3, #7
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00f      	beq.n	8008e7a <HAL_I2C_EV_IRQHandler+0x266>
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	0a9b      	lsrs	r3, r3, #10
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d009      	beq.n	8008e7a <HAL_I2C_EV_IRQHandler+0x266>
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	089b      	lsrs	r3, r3, #2
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d103      	bne.n	8008e7a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fed0 	bl	8009c18 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e78:	e039      	b.n	8008eee <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	089b      	lsrs	r3, r3, #2
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d033      	beq.n	8008eee <HAL_I2C_EV_IRQHandler+0x2da>
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	0a5b      	lsrs	r3, r3, #9
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d02d      	beq.n	8008eee <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fefd 	bl	8009c92 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e98:	e029      	b.n	8008eee <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	099b      	lsrs	r3, r3, #6
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00f      	beq.n	8008ec6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	0a9b      	lsrs	r3, r3, #10
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d009      	beq.n	8008ec6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	089b      	lsrs	r3, r3, #2
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d103      	bne.n	8008ec6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 ff08 	bl	8009cd4 <I2C_SlaveReceive_RXNE>
 8008ec4:	e014      	b.n	8008ef0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	089b      	lsrs	r3, r3, #2
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00e      	beq.n	8008ef0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	0a5b      	lsrs	r3, r3, #9
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d008      	beq.n	8008ef0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 ff36 	bl	8009d50 <I2C_SlaveReceive_BTF>
 8008ee4:	e004      	b.n	8008ef0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008ee6:	bf00      	nop
 8008ee8:	e002      	b.n	8008ef0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008eea:	bf00      	nop
 8008eec:	e000      	b.n	8008ef0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008eee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008ef0:	3720      	adds	r7, #32
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b08a      	sub	sp, #40	; 0x28
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f18:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	0a1b      	lsrs	r3, r3, #8
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00e      	beq.n	8008f44 <HAL_I2C_ER_IRQHandler+0x4e>
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	0a1b      	lsrs	r3, r3, #8
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d008      	beq.n	8008f44 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	f043 0301 	orr.w	r3, r3, #1
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008f42:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	0a5b      	lsrs	r3, r3, #9
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00e      	beq.n	8008f6e <HAL_I2C_ER_IRQHandler+0x78>
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	0a1b      	lsrs	r3, r3, #8
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d008      	beq.n	8008f6e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5e:	f043 0302 	orr.w	r3, r3, #2
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008f6c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	0a9b      	lsrs	r3, r3, #10
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d03f      	beq.n	8008ffa <HAL_I2C_ER_IRQHandler+0x104>
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	0a1b      	lsrs	r3, r3, #8
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d039      	beq.n	8008ffa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008f86:	7efb      	ldrb	r3, [r7, #27]
 8008f88:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f98:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008fa0:	7ebb      	ldrb	r3, [r7, #26]
 8008fa2:	2b20      	cmp	r3, #32
 8008fa4:	d112      	bne.n	8008fcc <HAL_I2C_ER_IRQHandler+0xd6>
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10f      	bne.n	8008fcc <HAL_I2C_ER_IRQHandler+0xd6>
 8008fac:	7cfb      	ldrb	r3, [r7, #19]
 8008fae:	2b21      	cmp	r3, #33	; 0x21
 8008fb0:	d008      	beq.n	8008fc4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008fb2:	7cfb      	ldrb	r3, [r7, #19]
 8008fb4:	2b29      	cmp	r3, #41	; 0x29
 8008fb6:	d005      	beq.n	8008fc4 <HAL_I2C_ER_IRQHandler+0xce>
 8008fb8:	7cfb      	ldrb	r3, [r7, #19]
 8008fba:	2b28      	cmp	r3, #40	; 0x28
 8008fbc:	d106      	bne.n	8008fcc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b21      	cmp	r3, #33	; 0x21
 8008fc2:	d103      	bne.n	8008fcc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f001 f85f 	bl	800a088 <I2C_Slave_AF>
 8008fca:	e016      	b.n	8008ffa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008fd4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	f043 0304 	orr.w	r3, r3, #4
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008fde:	7efb      	ldrb	r3, [r7, #27]
 8008fe0:	2b10      	cmp	r3, #16
 8008fe2:	d002      	beq.n	8008fea <HAL_I2C_ER_IRQHandler+0xf4>
 8008fe4:	7efb      	ldrb	r3, [r7, #27]
 8008fe6:	2b40      	cmp	r3, #64	; 0x40
 8008fe8:	d107      	bne.n	8008ffa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ff8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	0adb      	lsrs	r3, r3, #11
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00e      	beq.n	8009024 <HAL_I2C_ER_IRQHandler+0x12e>
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	0a1b      	lsrs	r3, r3, #8
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	2b00      	cmp	r3, #0
 8009010:	d008      	beq.n	8009024 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	f043 0308 	orr.w	r3, r3, #8
 8009018:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009022:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	2b00      	cmp	r3, #0
 8009028:	d008      	beq.n	800903c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	431a      	orrs	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 f896 	bl	800a168 <I2C_ITError>
  }
}
 800903c:	bf00      	nop
 800903e:	3728      	adds	r7, #40	; 0x28
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	70fb      	strb	r3, [r7, #3]
 80090a0:	4613      	mov	r3, r2
 80090a2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009122:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800912a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009130:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009136:	2b00      	cmp	r3, #0
 8009138:	d150      	bne.n	80091dc <I2C_MasterTransmit_TXE+0xc8>
 800913a:	7bfb      	ldrb	r3, [r7, #15]
 800913c:	2b21      	cmp	r3, #33	; 0x21
 800913e:	d14d      	bne.n	80091dc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2b08      	cmp	r3, #8
 8009144:	d01d      	beq.n	8009182 <I2C_MasterTransmit_TXE+0x6e>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b20      	cmp	r3, #32
 800914a:	d01a      	beq.n	8009182 <I2C_MasterTransmit_TXE+0x6e>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009152:	d016      	beq.n	8009182 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009162:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2211      	movs	r2, #17
 8009168:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2220      	movs	r2, #32
 8009176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff ff62 	bl	8009044 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009180:	e060      	b.n	8009244 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009190:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091a0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2220      	movs	r2, #32
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2b40      	cmp	r3, #64	; 0x40
 80091ba:	d107      	bne.n	80091cc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7ff ff7d 	bl	80090c4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80091ca:	e03b      	b.n	8009244 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f7ff ff35 	bl	8009044 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80091da:	e033      	b.n	8009244 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	2b21      	cmp	r3, #33	; 0x21
 80091e0:	d005      	beq.n	80091ee <I2C_MasterTransmit_TXE+0xda>
 80091e2:	7bbb      	ldrb	r3, [r7, #14]
 80091e4:	2b40      	cmp	r3, #64	; 0x40
 80091e6:	d12d      	bne.n	8009244 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	2b22      	cmp	r3, #34	; 0x22
 80091ec:	d12a      	bne.n	8009244 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d108      	bne.n	800920a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685a      	ldr	r2, [r3, #4]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009206:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009208:	e01c      	b.n	8009244 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b40      	cmp	r3, #64	; 0x40
 8009214:	d103      	bne.n	800921e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f88e 	bl	8009338 <I2C_MemoryTransmit_TXE_BTF>
}
 800921c:	e012      	b.n	8009244 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	781a      	ldrb	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	1c5a      	adds	r2, r3, #1
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009238:	b29b      	uxth	r3, r3
 800923a:	3b01      	subs	r3, #1
 800923c:	b29a      	uxth	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009242:	e7ff      	b.n	8009244 <I2C_MasterTransmit_TXE+0x130>
 8009244:	bf00      	nop
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009258:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2b21      	cmp	r3, #33	; 0x21
 8009264:	d164      	bne.n	8009330 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800926a:	b29b      	uxth	r3, r3
 800926c:	2b00      	cmp	r3, #0
 800926e:	d012      	beq.n	8009296 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009274:	781a      	ldrb	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800928a:	b29b      	uxth	r3, r3
 800928c:	3b01      	subs	r3, #1
 800928e:	b29a      	uxth	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8009294:	e04c      	b.n	8009330 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b08      	cmp	r3, #8
 800929a:	d01d      	beq.n	80092d8 <I2C_MasterTransmit_BTF+0x8c>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2b20      	cmp	r3, #32
 80092a0:	d01a      	beq.n	80092d8 <I2C_MasterTransmit_BTF+0x8c>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80092a8:	d016      	beq.n	80092d8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80092b8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2211      	movs	r2, #17
 80092be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2220      	movs	r2, #32
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7ff feb7 	bl	8009044 <HAL_I2C_MasterTxCpltCallback>
}
 80092d6:	e02b      	b.n	8009330 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80092e6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092f6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2220      	movs	r2, #32
 8009302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b40      	cmp	r3, #64	; 0x40
 8009310:	d107      	bne.n	8009322 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff fed2 	bl	80090c4 <HAL_I2C_MemTxCpltCallback>
}
 8009320:	e006      	b.n	8009330 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7ff fe8a 	bl	8009044 <HAL_I2C_MasterTxCpltCallback>
}
 8009330:	bf00      	nop
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009346:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800934c:	2b00      	cmp	r3, #0
 800934e:	d11d      	bne.n	800938c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009354:	2b01      	cmp	r3, #1
 8009356:	d10b      	bne.n	8009370 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800935c:	b2da      	uxtb	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009368:	1c9a      	adds	r2, r3, #2
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800936e:	e073      	b.n	8009458 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009374:	b29b      	uxth	r3, r3
 8009376:	121b      	asrs	r3, r3, #8
 8009378:	b2da      	uxtb	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009384:	1c5a      	adds	r2, r3, #1
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	651a      	str	r2, [r3, #80]	; 0x50
}
 800938a:	e065      	b.n	8009458 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009390:	2b01      	cmp	r3, #1
 8009392:	d10b      	bne.n	80093ac <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009398:	b2da      	uxtb	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a4:	1c5a      	adds	r2, r3, #1
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80093aa:	e055      	b.n	8009458 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d151      	bne.n	8009458 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
 80093b6:	2b22      	cmp	r3, #34	; 0x22
 80093b8:	d10d      	bne.n	80093d6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093c8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80093d4:	e040      	b.n	8009458 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093da:	b29b      	uxth	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d015      	beq.n	800940c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	2b21      	cmp	r3, #33	; 0x21
 80093e4:	d112      	bne.n	800940c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ea:	781a      	ldrb	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009400:	b29b      	uxth	r3, r3
 8009402:	3b01      	subs	r3, #1
 8009404:	b29a      	uxth	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800940a:	e025      	b.n	8009458 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009410:	b29b      	uxth	r3, r3
 8009412:	2b00      	cmp	r3, #0
 8009414:	d120      	bne.n	8009458 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	2b21      	cmp	r3, #33	; 0x21
 800941a:	d11d      	bne.n	8009458 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685a      	ldr	r2, [r3, #4]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800942a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800943a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2220      	movs	r2, #32
 8009446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff fe36 	bl	80090c4 <HAL_I2C_MemTxCpltCallback>
}
 8009458:	bf00      	nop
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b22      	cmp	r3, #34	; 0x22
 8009472:	f040 80a2 	bne.w	80095ba <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800947a:	b29b      	uxth	r3, r3
 800947c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b03      	cmp	r3, #3
 8009482:	d921      	bls.n	80094c8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	691a      	ldr	r2, [r3, #16]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	b2d2      	uxtb	r2, r2
 8009490:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	3b01      	subs	r3, #1
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	f040 8082 	bne.w	80095ba <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094c4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80094c6:	e078      	b.n	80095ba <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d074      	beq.n	80095ba <I2C_MasterReceive_RXNE+0x15a>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d002      	beq.n	80094dc <I2C_MasterReceive_RXNE+0x7c>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d16e      	bne.n	80095ba <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 fc43 	bl	800ad68 <I2C_WaitOnSTOPRequestThroughIT>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d142      	bne.n	800956e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094f6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009506:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	691a      	ldr	r2, [r3, #16]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009512:	b2d2      	uxtb	r2, r2
 8009514:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951a:	1c5a      	adds	r2, r3, #1
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009524:	b29b      	uxth	r3, r3
 8009526:	3b01      	subs	r3, #1
 8009528:	b29a      	uxth	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2220      	movs	r2, #32
 8009532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b40      	cmp	r3, #64	; 0x40
 8009540:	d10a      	bne.n	8009558 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff fdc1 	bl	80090d8 <HAL_I2C_MemRxCpltCallback>
}
 8009556:	e030      	b.n	80095ba <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2212      	movs	r2, #18
 8009564:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff fd76 	bl	8009058 <HAL_I2C_MasterRxCpltCallback>
}
 800956c:	e025      	b.n	80095ba <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685a      	ldr	r2, [r3, #4]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800957c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	691a      	ldr	r2, [r3, #16]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	b2d2      	uxtb	r2, r2
 800958a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800959a:	b29b      	uxth	r3, r3
 800959c:	3b01      	subs	r3, #1
 800959e:	b29a      	uxth	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7ff fd99 	bl	80090ec <HAL_I2C_ErrorCallback>
}
 80095ba:	bf00      	nop
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b084      	sub	sp, #16
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	d11b      	bne.n	8009612 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095e8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	691a      	ldr	r2, [r3, #16]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f4:	b2d2      	uxtb	r2, r2
 80095f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fc:	1c5a      	adds	r2, r3, #1
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009606:	b29b      	uxth	r3, r3
 8009608:	3b01      	subs	r3, #1
 800960a:	b29a      	uxth	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8009610:	e0bd      	b.n	800978e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009616:	b29b      	uxth	r3, r3
 8009618:	2b03      	cmp	r3, #3
 800961a:	d129      	bne.n	8009670 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800962a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b04      	cmp	r3, #4
 8009630:	d00a      	beq.n	8009648 <I2C_MasterReceive_BTF+0x86>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b02      	cmp	r3, #2
 8009636:	d007      	beq.n	8009648 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009646:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	691a      	ldr	r2, [r3, #16]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009652:	b2d2      	uxtb	r2, r2
 8009654:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009664:	b29b      	uxth	r3, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	b29a      	uxth	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800966e:	e08e      	b.n	800978e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009674:	b29b      	uxth	r3, r3
 8009676:	2b02      	cmp	r3, #2
 8009678:	d176      	bne.n	8009768 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d002      	beq.n	8009686 <I2C_MasterReceive_BTF+0xc4>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2b10      	cmp	r3, #16
 8009684:	d108      	bne.n	8009698 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009694:	601a      	str	r2, [r3, #0]
 8009696:	e019      	b.n	80096cc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b04      	cmp	r3, #4
 800969c:	d002      	beq.n	80096a4 <I2C_MasterReceive_BTF+0xe2>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d108      	bne.n	80096b6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	e00a      	b.n	80096cc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b10      	cmp	r3, #16
 80096ba:	d007      	beq.n	80096cc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	691a      	ldr	r2, [r3, #16]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d6:	b2d2      	uxtb	r2, r2
 80096d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	1c5a      	adds	r2, r3, #1
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	3b01      	subs	r3, #1
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	691a      	ldr	r2, [r3, #16]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	b2d2      	uxtb	r2, r2
 80096fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009704:	1c5a      	adds	r2, r3, #1
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800970e:	b29b      	uxth	r3, r3
 8009710:	3b01      	subs	r3, #1
 8009712:	b29a      	uxth	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009726:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2220      	movs	r2, #32
 800972c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009736:	b2db      	uxtb	r3, r3
 8009738:	2b40      	cmp	r3, #64	; 0x40
 800973a:	d10a      	bne.n	8009752 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff fcc4 	bl	80090d8 <HAL_I2C_MemRxCpltCallback>
}
 8009750:	e01d      	b.n	800978e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2212      	movs	r2, #18
 800975e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff fc79 	bl	8009058 <HAL_I2C_MasterRxCpltCallback>
}
 8009766:	e012      	b.n	800978e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	691a      	ldr	r2, [r3, #16]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	b2d2      	uxtb	r2, r2
 8009774:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009784:	b29b      	uxth	r3, r3
 8009786:	3b01      	subs	r3, #1
 8009788:	b29a      	uxth	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800978e:	bf00      	nop
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009796:	b480      	push	{r7}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b40      	cmp	r3, #64	; 0x40
 80097a8:	d117      	bne.n	80097da <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d109      	bne.n	80097c6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	461a      	mov	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80097c2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80097c4:	e067      	b.n	8009896 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	f043 0301 	orr.w	r3, r3, #1
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	611a      	str	r2, [r3, #16]
}
 80097d8:	e05d      	b.n	8009896 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097e2:	d133      	bne.n	800984c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b21      	cmp	r3, #33	; 0x21
 80097ee:	d109      	bne.n	8009804 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	461a      	mov	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009800:	611a      	str	r2, [r3, #16]
 8009802:	e008      	b.n	8009816 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009808:	b2db      	uxtb	r3, r3
 800980a:	f043 0301 	orr.w	r3, r3, #1
 800980e:	b2da      	uxtb	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981a:	2b00      	cmp	r3, #0
 800981c:	d004      	beq.n	8009828 <I2C_Master_SB+0x92>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009824:	2b00      	cmp	r3, #0
 8009826:	d108      	bne.n	800983a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982c:	2b00      	cmp	r3, #0
 800982e:	d032      	beq.n	8009896 <I2C_Master_SB+0x100>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009836:	2b00      	cmp	r3, #0
 8009838:	d02d      	beq.n	8009896 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009848:	605a      	str	r2, [r3, #4]
}
 800984a:	e024      	b.n	8009896 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10e      	bne.n	8009872 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009858:	b29b      	uxth	r3, r3
 800985a:	11db      	asrs	r3, r3, #7
 800985c:	b2db      	uxtb	r3, r3
 800985e:	f003 0306 	and.w	r3, r3, #6
 8009862:	b2db      	uxtb	r3, r3
 8009864:	f063 030f 	orn	r3, r3, #15
 8009868:	b2da      	uxtb	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	611a      	str	r2, [r3, #16]
}
 8009870:	e011      	b.n	8009896 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009876:	2b01      	cmp	r3, #1
 8009878:	d10d      	bne.n	8009896 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800987e:	b29b      	uxth	r3, r3
 8009880:	11db      	asrs	r3, r3, #7
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 0306 	and.w	r3, r3, #6
 8009888:	b2db      	uxtb	r3, r3
 800988a:	f063 030e 	orn	r3, r3, #14
 800988e:	b2da      	uxtb	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	611a      	str	r2, [r3, #16]
}
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80098a2:	b480      	push	{r7}
 80098a4:	b083      	sub	sp, #12
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d004      	beq.n	80098c8 <I2C_Master_ADD10+0x26>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d108      	bne.n	80098da <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00c      	beq.n	80098ea <I2C_Master_ADD10+0x48>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d007      	beq.n	80098ea <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098e8:	605a      	str	r2, [r3, #4]
  }
}
 80098ea:	bf00      	nop
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr

080098f6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b091      	sub	sp, #68	; 0x44
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009904:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009912:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800991a:	b2db      	uxtb	r3, r3
 800991c:	2b22      	cmp	r3, #34	; 0x22
 800991e:	f040 8169 	bne.w	8009bf4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10f      	bne.n	800994a <I2C_Master_ADDR+0x54>
 800992a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800992e:	2b40      	cmp	r3, #64	; 0x40
 8009930:	d10b      	bne.n	800994a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009932:	2300      	movs	r3, #0
 8009934:	633b      	str	r3, [r7, #48]	; 0x30
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	695b      	ldr	r3, [r3, #20]
 800993c:	633b      	str	r3, [r7, #48]	; 0x30
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	633b      	str	r3, [r7, #48]	; 0x30
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	e160      	b.n	8009c0c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800994e:	2b00      	cmp	r3, #0
 8009950:	d11d      	bne.n	800998e <I2C_Master_ADDR+0x98>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800995a:	d118      	bne.n	800998e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800995c:	2300      	movs	r3, #0
 800995e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009970:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009980:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009986:	1c5a      	adds	r2, r3, #1
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	651a      	str	r2, [r3, #80]	; 0x50
 800998c:	e13e      	b.n	8009c0c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009992:	b29b      	uxth	r3, r3
 8009994:	2b00      	cmp	r3, #0
 8009996:	d113      	bne.n	80099c0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009998:	2300      	movs	r3, #0
 800999a:	62bb      	str	r3, [r7, #40]	; 0x28
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	e115      	b.n	8009bec <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	f040 808a 	bne.w	8009ae0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80099cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099d2:	d137      	bne.n	8009a44 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099e2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099f2:	d113      	bne.n	8009a1c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a02:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a04:	2300      	movs	r3, #0
 8009a06:	627b      	str	r3, [r7, #36]	; 0x24
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	e0e7      	b.n	8009bec <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	623b      	str	r3, [r7, #32]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	623b      	str	r3, [r7, #32]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	623b      	str	r3, [r7, #32]
 8009a30:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	e0d3      	b.n	8009bec <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a46:	2b08      	cmp	r3, #8
 8009a48:	d02e      	beq.n	8009aa8 <I2C_Master_ADDR+0x1b2>
 8009a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4c:	2b20      	cmp	r3, #32
 8009a4e:	d02b      	beq.n	8009aa8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a52:	2b12      	cmp	r3, #18
 8009a54:	d102      	bne.n	8009a5c <I2C_Master_ADDR+0x166>
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d125      	bne.n	8009aa8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d00e      	beq.n	8009a80 <I2C_Master_ADDR+0x18a>
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d00b      	beq.n	8009a80 <I2C_Master_ADDR+0x18a>
 8009a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6a:	2b10      	cmp	r3, #16
 8009a6c:	d008      	beq.n	8009a80 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	e007      	b.n	8009a90 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a8e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a90:	2300      	movs	r3, #0
 8009a92:	61fb      	str	r3, [r7, #28]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	61fb      	str	r3, [r7, #28]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	61fb      	str	r3, [r7, #28]
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	e0a1      	b.n	8009bec <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ab6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ab8:	2300      	movs	r3, #0
 8009aba:	61bb      	str	r3, [r7, #24]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	61bb      	str	r3, [r7, #24]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	61bb      	str	r3, [r7, #24]
 8009acc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	e085      	b.n	8009bec <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d14d      	bne.n	8009b86 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aec:	2b04      	cmp	r3, #4
 8009aee:	d016      	beq.n	8009b1e <I2C_Master_ADDR+0x228>
 8009af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d013      	beq.n	8009b1e <I2C_Master_ADDR+0x228>
 8009af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af8:	2b10      	cmp	r3, #16
 8009afa:	d010      	beq.n	8009b1e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b0a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	e007      	b.n	8009b2e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b2c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b3c:	d117      	bne.n	8009b6e <I2C_Master_ADDR+0x278>
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b44:	d00b      	beq.n	8009b5e <I2C_Master_ADDR+0x268>
 8009b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d008      	beq.n	8009b5e <I2C_Master_ADDR+0x268>
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4e:	2b08      	cmp	r3, #8
 8009b50:	d005      	beq.n	8009b5e <I2C_Master_ADDR+0x268>
 8009b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b54:	2b10      	cmp	r3, #16
 8009b56:	d002      	beq.n	8009b5e <I2C_Master_ADDR+0x268>
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	2b20      	cmp	r3, #32
 8009b5c:	d107      	bne.n	8009b6e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009b6c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b6e:	2300      	movs	r3, #0
 8009b70:	617b      	str	r3, [r7, #20]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	695b      	ldr	r3, [r3, #20]
 8009b78:	617b      	str	r3, [r7, #20]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	617b      	str	r3, [r7, #20]
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	e032      	b.n	8009bec <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b94:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ba4:	d117      	bne.n	8009bd6 <I2C_Master_ADDR+0x2e0>
 8009ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009bac:	d00b      	beq.n	8009bc6 <I2C_Master_ADDR+0x2d0>
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d008      	beq.n	8009bc6 <I2C_Master_ADDR+0x2d0>
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb6:	2b08      	cmp	r3, #8
 8009bb8:	d005      	beq.n	8009bc6 <I2C_Master_ADDR+0x2d0>
 8009bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbc:	2b10      	cmp	r3, #16
 8009bbe:	d002      	beq.n	8009bc6 <I2C_Master_ADDR+0x2d0>
 8009bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc2:	2b20      	cmp	r3, #32
 8009bc4:	d107      	bne.n	8009bd6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	685a      	ldr	r2, [r3, #4]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009bd4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	613b      	str	r3, [r7, #16]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	613b      	str	r3, [r7, #16]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	613b      	str	r3, [r7, #16]
 8009bea:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009bf2:	e00b      	b.n	8009c0c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	68fb      	ldr	r3, [r7, #12]
}
 8009c0a:	e7ff      	b.n	8009c0c <I2C_Master_ADDR+0x316>
 8009c0c:	bf00      	nop
 8009c0e:	3744      	adds	r7, #68	; 0x44
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c26:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d02b      	beq.n	8009c8a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c36:	781a      	ldrb	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d114      	bne.n	8009c8a <I2C_SlaveTransmit_TXE+0x72>
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
 8009c62:	2b29      	cmp	r3, #41	; 0x29
 8009c64:	d111      	bne.n	8009c8a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c74:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2221      	movs	r2, #33	; 0x21
 8009c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2228      	movs	r2, #40	; 0x28
 8009c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff f9f1 	bl	800906c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009c8a:	bf00      	nop
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d011      	beq.n	8009cc8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca8:	781a      	ldrb	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009cc8:	bf00      	nop
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d02c      	beq.n	8009d48 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	691a      	ldr	r2, [r3, #16]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	b2d2      	uxtb	r2, r2
 8009cfa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	1c5a      	adds	r2, r3, #1
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d114      	bne.n	8009d48 <I2C_SlaveReceive_RXNE+0x74>
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	2b2a      	cmp	r3, #42	; 0x2a
 8009d22:	d111      	bne.n	8009d48 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d32:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2222      	movs	r2, #34	; 0x22
 8009d38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2228      	movs	r2, #40	; 0x28
 8009d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7ff f99c 	bl	8009080 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009d48:	bf00      	nop
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d012      	beq.n	8009d88 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	b2d2      	uxtb	r2, r2
 8009d6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	3b01      	subs	r3, #1
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009dae:	2b28      	cmp	r3, #40	; 0x28
 8009db0:	d127      	bne.n	8009e02 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dc0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	089b      	lsrs	r3, r3, #2
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d101      	bne.n	8009dd2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	09db      	lsrs	r3, r3, #7
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d103      	bne.n	8009de6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	81bb      	strh	r3, [r7, #12]
 8009de4:	e002      	b.n	8009dec <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009df4:	89ba      	ldrh	r2, [r7, #12]
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f7ff f94a 	bl	8009094 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009e00:	e00e      	b.n	8009e20 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e02:	2300      	movs	r3, #0
 8009e04:	60bb      	str	r3, [r7, #8]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	695b      	ldr	r3, [r3, #20]
 8009e0c:	60bb      	str	r3, [r7, #8]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	60bb      	str	r3, [r7, #8]
 8009e16:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009e20:	bf00      	nop
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e36:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009e46:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009e48:	2300      	movs	r3, #0
 8009e4a:	60bb      	str	r3, [r7, #8]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	695b      	ldr	r3, [r3, #20]
 8009e52:	60bb      	str	r3, [r7, #8]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f042 0201 	orr.w	r2, r2, #1
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e74:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e84:	d172      	bne.n	8009f6c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
 8009e88:	2b22      	cmp	r3, #34	; 0x22
 8009e8a:	d002      	beq.n	8009e92 <I2C_Slave_STOPF+0x6a>
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
 8009e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e90:	d135      	bne.n	8009efe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d005      	beq.n	8009eb6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eae:	f043 0204 	orr.w	r2, r3, #4
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ec4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fd fc44 	bl	8007758 <HAL_DMA_GetState>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d049      	beq.n	8009f6a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eda:	4a69      	ldr	r2, [pc, #420]	; (800a080 <I2C_Slave_STOPF+0x258>)
 8009edc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fd fa8c 	bl	8007400 <HAL_DMA_Abort_IT>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d03d      	beq.n	8009f6a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009ef8:	4610      	mov	r0, r2
 8009efa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009efc:	e035      	b.n	8009f6a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d005      	beq.n	8009f22 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f1a:	f043 0204 	orr.w	r2, r3, #4
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f30:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fd fc0e 	bl	8007758 <HAL_DMA_GetState>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d014      	beq.n	8009f6c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f46:	4a4e      	ldr	r2, [pc, #312]	; (800a080 <I2C_Slave_STOPF+0x258>)
 8009f48:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fd fa56 	bl	8007400 <HAL_DMA_Abort_IT>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d008      	beq.n	8009f6c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f64:	4610      	mov	r0, r2
 8009f66:	4798      	blx	r3
 8009f68:	e000      	b.n	8009f6c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f6a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d03e      	beq.n	8009ff4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	f003 0304 	and.w	r3, r3, #4
 8009f80:	2b04      	cmp	r3, #4
 8009f82:	d112      	bne.n	8009faa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	691a      	ldr	r2, [r3, #16]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8e:	b2d2      	uxtb	r2, r2
 8009f90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f96:	1c5a      	adds	r2, r3, #1
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb4:	2b40      	cmp	r3, #64	; 0x40
 8009fb6:	d112      	bne.n	8009fde <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	691a      	ldr	r2, [r3, #16]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc2:	b2d2      	uxtb	r2, r2
 8009fc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d005      	beq.n	8009ff4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fec:	f043 0204 	orr.w	r2, r3, #4
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d003      	beq.n	800a004 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f8b3 	bl	800a168 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800a002:	e039      	b.n	800a078 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a004:	7bfb      	ldrb	r3, [r7, #15]
 800a006:	2b2a      	cmp	r3, #42	; 0x2a
 800a008:	d109      	bne.n	800a01e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2228      	movs	r2, #40	; 0x28
 800a014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f7ff f831 	bl	8009080 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b28      	cmp	r3, #40	; 0x28
 800a028:	d111      	bne.n	800a04e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a15      	ldr	r2, [pc, #84]	; (800a084 <I2C_Slave_STOPF+0x25c>)
 800a02e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2220      	movs	r2, #32
 800a03a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7ff f832 	bl	80090b0 <HAL_I2C_ListenCpltCallback>
}
 800a04c:	e014      	b.n	800a078 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a052:	2b22      	cmp	r3, #34	; 0x22
 800a054:	d002      	beq.n	800a05c <I2C_Slave_STOPF+0x234>
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	2b22      	cmp	r3, #34	; 0x22
 800a05a:	d10d      	bne.n	800a078 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2220      	movs	r2, #32
 800a066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7ff f804 	bl	8009080 <HAL_I2C_SlaveRxCpltCallback>
}
 800a078:	bf00      	nop
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	0800a969 	.word	0x0800a969
 800a084:	ffff0000 	.word	0xffff0000

0800a088 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a096:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2b08      	cmp	r3, #8
 800a0a2:	d002      	beq.n	800a0aa <I2C_Slave_AF+0x22>
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2b20      	cmp	r3, #32
 800a0a8:	d129      	bne.n	800a0fe <I2C_Slave_AF+0x76>
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
 800a0ac:	2b28      	cmp	r3, #40	; 0x28
 800a0ae:	d126      	bne.n	800a0fe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a2c      	ldr	r2, [pc, #176]	; (800a164 <I2C_Slave_AF+0xdc>)
 800a0b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a0c4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a0ce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0de:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7fe ffda 	bl	80090b0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800a0fc:	e02e      	b.n	800a15c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a0fe:	7bfb      	ldrb	r3, [r7, #15]
 800a100:	2b21      	cmp	r3, #33	; 0x21
 800a102:	d126      	bne.n	800a152 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a17      	ldr	r2, [pc, #92]	; (800a164 <I2C_Slave_AF+0xdc>)
 800a108:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2221      	movs	r2, #33	; 0x21
 800a10e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2220      	movs	r2, #32
 800a114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a12e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a138:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a148:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7fe ff8e 	bl	800906c <HAL_I2C_SlaveTxCpltCallback>
}
 800a150:	e004      	b.n	800a15c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a15a:	615a      	str	r2, [r3, #20]
}
 800a15c:	bf00      	nop
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	ffff0000 	.word	0xffff0000

0800a168 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a176:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a17e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a180:	7bbb      	ldrb	r3, [r7, #14]
 800a182:	2b10      	cmp	r3, #16
 800a184:	d002      	beq.n	800a18c <I2C_ITError+0x24>
 800a186:	7bbb      	ldrb	r3, [r7, #14]
 800a188:	2b40      	cmp	r3, #64	; 0x40
 800a18a:	d10a      	bne.n	800a1a2 <I2C_ITError+0x3a>
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	2b22      	cmp	r3, #34	; 0x22
 800a190:	d107      	bne.n	800a1a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a1a2:	7bfb      	ldrb	r3, [r7, #15]
 800a1a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a1a8:	2b28      	cmp	r3, #40	; 0x28
 800a1aa:	d107      	bne.n	800a1bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2228      	movs	r2, #40	; 0x28
 800a1b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a1ba:	e015      	b.n	800a1e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1ca:	d00a      	beq.n	800a1e2 <I2C_ITError+0x7a>
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	2b60      	cmp	r3, #96	; 0x60
 800a1d0:	d007      	beq.n	800a1e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2220      	movs	r2, #32
 800a1d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1f6:	d162      	bne.n	800a2be <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a206:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a210:	b2db      	uxtb	r3, r3
 800a212:	2b01      	cmp	r3, #1
 800a214:	d020      	beq.n	800a258 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a21a:	4a6a      	ldr	r2, [pc, #424]	; (800a3c4 <I2C_ITError+0x25c>)
 800a21c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a222:	4618      	mov	r0, r3
 800a224:	f7fd f8ec 	bl	8007400 <HAL_DMA_Abort_IT>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 8089 	beq.w	800a342 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f022 0201 	bic.w	r2, r2, #1
 800a23e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2220      	movs	r2, #32
 800a244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a24c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a252:	4610      	mov	r0, r2
 800a254:	4798      	blx	r3
 800a256:	e074      	b.n	800a342 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25c:	4a59      	ldr	r2, [pc, #356]	; (800a3c4 <I2C_ITError+0x25c>)
 800a25e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a264:	4618      	mov	r0, r3
 800a266:	f7fd f8cb 	bl	8007400 <HAL_DMA_Abort_IT>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d068      	beq.n	800a342 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a27a:	2b40      	cmp	r3, #64	; 0x40
 800a27c:	d10b      	bne.n	800a296 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	691a      	ldr	r2, [r3, #16]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a288:	b2d2      	uxtb	r2, r2
 800a28a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	1c5a      	adds	r2, r3, #1
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f022 0201 	bic.w	r2, r2, #1
 800a2a4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2220      	movs	r2, #32
 800a2aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	4798      	blx	r3
 800a2bc:	e041      	b.n	800a342 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b60      	cmp	r3, #96	; 0x60
 800a2c8:	d125      	bne.n	800a316 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2220      	movs	r2, #32
 800a2ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	695b      	ldr	r3, [r3, #20]
 800a2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e2:	2b40      	cmp	r3, #64	; 0x40
 800a2e4:	d10b      	bne.n	800a2fe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	691a      	ldr	r2, [r3, #16]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f0:	b2d2      	uxtb	r2, r2
 800a2f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f8:	1c5a      	adds	r2, r3, #1
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f022 0201 	bic.w	r2, r2, #1
 800a30c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7fe fef6 	bl	8009100 <HAL_I2C_AbortCpltCallback>
 800a314:	e015      	b.n	800a342 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a320:	2b40      	cmp	r3, #64	; 0x40
 800a322:	d10b      	bne.n	800a33c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	691a      	ldr	r2, [r3, #16]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32e:	b2d2      	uxtb	r2, r2
 800a330:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7fe fed5 	bl	80090ec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a346:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10e      	bne.n	800a370 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d109      	bne.n	800a370 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a362:	2b00      	cmp	r3, #0
 800a364:	d104      	bne.n	800a370 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d007      	beq.n	800a380 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	685a      	ldr	r2, [r3, #4]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a37e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a386:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38c:	f003 0304 	and.w	r3, r3, #4
 800a390:	2b04      	cmp	r3, #4
 800a392:	d113      	bne.n	800a3bc <I2C_ITError+0x254>
 800a394:	7bfb      	ldrb	r3, [r7, #15]
 800a396:	2b28      	cmp	r3, #40	; 0x28
 800a398:	d110      	bne.n	800a3bc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a0a      	ldr	r2, [pc, #40]	; (800a3c8 <I2C_ITError+0x260>)
 800a39e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7fe fe7a 	bl	80090b0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a3bc:	bf00      	nop
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	0800a969 	.word	0x0800a969
 800a3c8:	ffff0000 	.word	0xffff0000

0800a3cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b088      	sub	sp, #32
 800a3d0:	af02      	add	r7, sp, #8
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	607a      	str	r2, [r7, #4]
 800a3d6:	603b      	str	r3, [r7, #0]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	2b08      	cmp	r3, #8
 800a3e6:	d006      	beq.n	800a3f6 <I2C_MasterRequestWrite+0x2a>
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d003      	beq.n	800a3f6 <I2C_MasterRequestWrite+0x2a>
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a3f4:	d108      	bne.n	800a408 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a404:	601a      	str	r2, [r3, #0]
 800a406:	e00b      	b.n	800a420 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40c:	2b12      	cmp	r3, #18
 800a40e:	d107      	bne.n	800a420 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a41e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f000 fb43 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00d      	beq.n	800a454 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a446:	d103      	bne.n	800a450 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a44e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a450:	2303      	movs	r3, #3
 800a452:	e035      	b.n	800a4c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a45c:	d108      	bne.n	800a470 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a45e:	897b      	ldrh	r3, [r7, #10]
 800a460:	b2db      	uxtb	r3, r3
 800a462:	461a      	mov	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a46c:	611a      	str	r2, [r3, #16]
 800a46e:	e01b      	b.n	800a4a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a470:	897b      	ldrh	r3, [r7, #10]
 800a472:	11db      	asrs	r3, r3, #7
 800a474:	b2db      	uxtb	r3, r3
 800a476:	f003 0306 	and.w	r3, r3, #6
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	f063 030f 	orn	r3, r3, #15
 800a480:	b2da      	uxtb	r2, r3
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	490e      	ldr	r1, [pc, #56]	; (800a4c8 <I2C_MasterRequestWrite+0xfc>)
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 fb69 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e010      	b.n	800a4c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a49e:	897b      	ldrh	r3, [r7, #10]
 800a4a0:	b2da      	uxtb	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	4907      	ldr	r1, [pc, #28]	; (800a4cc <I2C_MasterRequestWrite+0x100>)
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f000 fb59 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e000      	b.n	800a4c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3718      	adds	r7, #24
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	00010008 	.word	0x00010008
 800a4cc:	00010002 	.word	0x00010002

0800a4d0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b088      	sub	sp, #32
 800a4d4:	af02      	add	r7, sp, #8
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	607a      	str	r2, [r7, #4]
 800a4da:	603b      	str	r3, [r7, #0]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a4f4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	2b08      	cmp	r3, #8
 800a4fa:	d006      	beq.n	800a50a <I2C_MasterRequestRead+0x3a>
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d003      	beq.n	800a50a <I2C_MasterRequestRead+0x3a>
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a508:	d108      	bne.n	800a51c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a518:	601a      	str	r2, [r3, #0]
 800a51a:	e00b      	b.n	800a534 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a520:	2b11      	cmp	r3, #17
 800a522:	d107      	bne.n	800a534 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a532:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f000 fab9 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00d      	beq.n	800a568 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a55a:	d103      	bne.n	800a564 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a562:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a564:	2303      	movs	r3, #3
 800a566:	e079      	b.n	800a65c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a570:	d108      	bne.n	800a584 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a572:	897b      	ldrh	r3, [r7, #10]
 800a574:	b2db      	uxtb	r3, r3
 800a576:	f043 0301 	orr.w	r3, r3, #1
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	611a      	str	r2, [r3, #16]
 800a582:	e05f      	b.n	800a644 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a584:	897b      	ldrh	r3, [r7, #10]
 800a586:	11db      	asrs	r3, r3, #7
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	f003 0306 	and.w	r3, r3, #6
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	f063 030f 	orn	r3, r3, #15
 800a594:	b2da      	uxtb	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	4930      	ldr	r1, [pc, #192]	; (800a664 <I2C_MasterRequestRead+0x194>)
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	f000 fadf 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e054      	b.n	800a65c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a5b2:	897b      	ldrh	r3, [r7, #10]
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	4929      	ldr	r1, [pc, #164]	; (800a668 <I2C_MasterRequestRead+0x198>)
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f000 facf 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d001      	beq.n	800a5d2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e044      	b.n	800a65c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	613b      	str	r3, [r7, #16]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	613b      	str	r3, [r7, #16]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	613b      	str	r3, [r7, #16]
 800a5e6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a5f6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 fa57 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00d      	beq.n	800a62c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a61e:	d103      	bne.n	800a628 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a626:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a628:	2303      	movs	r3, #3
 800a62a:	e017      	b.n	800a65c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a62c:	897b      	ldrh	r3, [r7, #10]
 800a62e:	11db      	asrs	r3, r3, #7
 800a630:	b2db      	uxtb	r3, r3
 800a632:	f003 0306 	and.w	r3, r3, #6
 800a636:	b2db      	uxtb	r3, r3
 800a638:	f063 030e 	orn	r3, r3, #14
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	4907      	ldr	r1, [pc, #28]	; (800a668 <I2C_MasterRequestRead+0x198>)
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f000 fa8b 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e000      	b.n	800a65c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a65a:	2300      	movs	r3, #0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3718      	adds	r7, #24
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	00010008 	.word	0x00010008
 800a668:	00010002 	.word	0x00010002

0800a66c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b088      	sub	sp, #32
 800a670:	af02      	add	r7, sp, #8
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	4608      	mov	r0, r1
 800a676:	4611      	mov	r1, r2
 800a678:	461a      	mov	r2, r3
 800a67a:	4603      	mov	r3, r0
 800a67c:	817b      	strh	r3, [r7, #10]
 800a67e:	460b      	mov	r3, r1
 800a680:	813b      	strh	r3, [r7, #8]
 800a682:	4613      	mov	r3, r2
 800a684:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a694:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f000 fa08 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00d      	beq.n	800a6ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6bc:	d103      	bne.n	800a6c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e05f      	b.n	800a78a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a6ca:	897b      	ldrh	r3, [r7, #10]
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a6d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6dc:	6a3a      	ldr	r2, [r7, #32]
 800a6de:	492d      	ldr	r1, [pc, #180]	; (800a794 <I2C_RequestMemoryWrite+0x128>)
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f000 fa40 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e04c      	b.n	800a78a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	617b      	str	r3, [r7, #20]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	617b      	str	r3, [r7, #20]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	617b      	str	r3, [r7, #20]
 800a704:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a708:	6a39      	ldr	r1, [r7, #32]
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 faaa 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00d      	beq.n	800a732 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71a:	2b04      	cmp	r3, #4
 800a71c:	d107      	bne.n	800a72e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a72c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	e02b      	b.n	800a78a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a732:	88fb      	ldrh	r3, [r7, #6]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d105      	bne.n	800a744 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a738:	893b      	ldrh	r3, [r7, #8]
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	611a      	str	r2, [r3, #16]
 800a742:	e021      	b.n	800a788 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a744:	893b      	ldrh	r3, [r7, #8]
 800a746:	0a1b      	lsrs	r3, r3, #8
 800a748:	b29b      	uxth	r3, r3
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a754:	6a39      	ldr	r1, [r7, #32]
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 fa84 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00d      	beq.n	800a77e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a766:	2b04      	cmp	r3, #4
 800a768:	d107      	bne.n	800a77a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a778:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e005      	b.n	800a78a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a77e:	893b      	ldrh	r3, [r7, #8]
 800a780:	b2da      	uxtb	r2, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3718      	adds	r7, #24
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	00010002 	.word	0x00010002

0800a798 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af02      	add	r7, sp, #8
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	4608      	mov	r0, r1
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	817b      	strh	r3, [r7, #10]
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	813b      	strh	r3, [r7, #8]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a7c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d4:	9300      	str	r3, [sp, #0]
 800a7d6:	6a3b      	ldr	r3, [r7, #32]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 f96a 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00d      	beq.n	800a806 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7f8:	d103      	bne.n	800a802 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a800:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	e0aa      	b.n	800a95c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a806:	897b      	ldrh	r3, [r7, #10]
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	461a      	mov	r2, r3
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a814:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a818:	6a3a      	ldr	r2, [r7, #32]
 800a81a:	4952      	ldr	r1, [pc, #328]	; (800a964 <I2C_RequestMemoryRead+0x1cc>)
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f000 f9a2 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d001      	beq.n	800a82c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e097      	b.n	800a95c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a82c:	2300      	movs	r3, #0
 800a82e:	617b      	str	r3, [r7, #20]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	617b      	str	r3, [r7, #20]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	699b      	ldr	r3, [r3, #24]
 800a83e:	617b      	str	r3, [r7, #20]
 800a840:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a844:	6a39      	ldr	r1, [r7, #32]
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f000 fa0c 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00d      	beq.n	800a86e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a856:	2b04      	cmp	r3, #4
 800a858:	d107      	bne.n	800a86a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a868:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e076      	b.n	800a95c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a86e:	88fb      	ldrh	r3, [r7, #6]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d105      	bne.n	800a880 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a874:	893b      	ldrh	r3, [r7, #8]
 800a876:	b2da      	uxtb	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	611a      	str	r2, [r3, #16]
 800a87e:	e021      	b.n	800a8c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a880:	893b      	ldrh	r3, [r7, #8]
 800a882:	0a1b      	lsrs	r3, r3, #8
 800a884:	b29b      	uxth	r3, r3
 800a886:	b2da      	uxtb	r2, r3
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a890:	6a39      	ldr	r1, [r7, #32]
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f000 f9e6 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00d      	beq.n	800a8ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	d107      	bne.n	800a8b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e050      	b.n	800a95c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a8ba:	893b      	ldrh	r3, [r7, #8]
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8c6:	6a39      	ldr	r1, [r7, #32]
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 f9cb 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00d      	beq.n	800a8f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d8:	2b04      	cmp	r3, #4
 800a8da:	d107      	bne.n	800a8ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e035      	b.n	800a95c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	6a3b      	ldr	r3, [r7, #32]
 800a906:	2200      	movs	r2, #0
 800a908:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 f8d3 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00d      	beq.n	800a934 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a926:	d103      	bne.n	800a930 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a92e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a930:	2303      	movs	r3, #3
 800a932:	e013      	b.n	800a95c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a934:	897b      	ldrh	r3, [r7, #10]
 800a936:	b2db      	uxtb	r3, r3
 800a938:	f043 0301 	orr.w	r3, r3, #1
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	6a3a      	ldr	r2, [r7, #32]
 800a948:	4906      	ldr	r1, [pc, #24]	; (800a964 <I2C_RequestMemoryRead+0x1cc>)
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 f90b 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d001      	beq.n	800a95a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e000      	b.n	800a95c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	00010002 	.word	0x00010002

0800a968 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a970:	2300      	movs	r3, #0
 800a972:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a978:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a980:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a982:	4b4b      	ldr	r3, [pc, #300]	; (800aab0 <I2C_DMAAbort+0x148>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	08db      	lsrs	r3, r3, #3
 800a988:	4a4a      	ldr	r2, [pc, #296]	; (800aab4 <I2C_DMAAbort+0x14c>)
 800a98a:	fba2 2303 	umull	r2, r3, r2, r3
 800a98e:	0a1a      	lsrs	r2, r3, #8
 800a990:	4613      	mov	r3, r2
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4413      	add	r3, r2
 800a996:	00da      	lsls	r2, r3, #3
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d106      	bne.n	800a9b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a6:	f043 0220 	orr.w	r2, r3, #32
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800a9ae:	e00a      	b.n	800a9c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9c4:	d0ea      	beq.n	800a99c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d003      	beq.n	800aa0c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa08:	2200      	movs	r2, #0
 800aa0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d003      	beq.n	800aa1c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa18:	2200      	movs	r2, #0
 800aa1a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f022 0201 	bic.w	r2, r2, #1
 800aa2a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b60      	cmp	r3, #96	; 0x60
 800aa36:	d10e      	bne.n	800aa56 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800aa4e:	6978      	ldr	r0, [r7, #20]
 800aa50:	f7fe fb56 	bl	8009100 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800aa54:	e027      	b.n	800aaa6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800aa56:	7cfb      	ldrb	r3, [r7, #19]
 800aa58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aa5c:	2b28      	cmp	r3, #40	; 0x28
 800aa5e:	d117      	bne.n	800aa90 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f042 0201 	orr.w	r2, r2, #1
 800aa6e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aa7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	2200      	movs	r2, #0
 800aa84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	2228      	movs	r2, #40	; 0x28
 800aa8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800aa8e:	e007      	b.n	800aaa0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2220      	movs	r2, #32
 800aa94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800aaa0:	6978      	ldr	r0, [r7, #20]
 800aaa2:	f7fe fb23 	bl	80090ec <HAL_I2C_ErrorCallback>
}
 800aaa6:	bf00      	nop
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	20000034 	.word	0x20000034
 800aab4:	14f8b589 	.word	0x14f8b589

0800aab8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	4613      	mov	r3, r2
 800aac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aac8:	e025      	b.n	800ab16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad0:	d021      	beq.n	800ab16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aad2:	f7fc f94f 	bl	8006d74 <HAL_GetTick>
 800aad6:	4602      	mov	r2, r0
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d302      	bcc.n	800aae8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d116      	bne.n	800ab16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2220      	movs	r2, #32
 800aaf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab02:	f043 0220 	orr.w	r2, r3, #32
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e023      	b.n	800ab5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	0c1b      	lsrs	r3, r3, #16
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d10d      	bne.n	800ab3c <I2C_WaitOnFlagUntilTimeout+0x84>
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	43da      	mvns	r2, r3
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	bf0c      	ite	eq
 800ab32:	2301      	moveq	r3, #1
 800ab34:	2300      	movne	r3, #0
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	461a      	mov	r2, r3
 800ab3a:	e00c      	b.n	800ab56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	43da      	mvns	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	4013      	ands	r3, r2
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	bf0c      	ite	eq
 800ab4e:	2301      	moveq	r3, #1
 800ab50:	2300      	movne	r3, #0
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	461a      	mov	r2, r3
 800ab56:	79fb      	ldrb	r3, [r7, #7]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d0b6      	beq.n	800aaca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b084      	sub	sp, #16
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	60f8      	str	r0, [r7, #12]
 800ab6e:	60b9      	str	r1, [r7, #8]
 800ab70:	607a      	str	r2, [r7, #4]
 800ab72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab74:	e051      	b.n	800ac1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab84:	d123      	bne.n	800abce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2220      	movs	r2, #32
 800abaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abba:	f043 0204 	orr.w	r2, r3, #4
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e046      	b.n	800ac5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd4:	d021      	beq.n	800ac1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abd6:	f7fc f8cd 	bl	8006d74 <HAL_GetTick>
 800abda:	4602      	mov	r2, r0
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d302      	bcc.n	800abec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d116      	bne.n	800ac1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2220      	movs	r2, #32
 800abf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac06:	f043 0220 	orr.w	r2, r3, #32
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e020      	b.n	800ac5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	0c1b      	lsrs	r3, r3, #16
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d10c      	bne.n	800ac3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	695b      	ldr	r3, [r3, #20]
 800ac2a:	43da      	mvns	r2, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	4013      	ands	r3, r2
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	bf14      	ite	ne
 800ac36:	2301      	movne	r3, #1
 800ac38:	2300      	moveq	r3, #0
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	e00b      	b.n	800ac56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	699b      	ldr	r3, [r3, #24]
 800ac44:	43da      	mvns	r2, r3
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	4013      	ands	r3, r2
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	bf14      	ite	ne
 800ac50:	2301      	movne	r3, #1
 800ac52:	2300      	moveq	r3, #0
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d18d      	bne.n	800ab76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac70:	e02d      	b.n	800acce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f000 f900 	bl	800ae78 <I2C_IsAcknowledgeFailed>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e02d      	b.n	800acde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac88:	d021      	beq.n	800acce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac8a:	f7fc f873 	bl	8006d74 <HAL_GetTick>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	1ad3      	subs	r3, r2, r3
 800ac94:	68ba      	ldr	r2, [r7, #8]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d302      	bcc.n	800aca0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d116      	bne.n	800acce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2200      	movs	r2, #0
 800aca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2220      	movs	r2, #32
 800acaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acba:	f043 0220 	orr.w	r2, r3, #32
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e007      	b.n	800acde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acd8:	2b80      	cmp	r3, #128	; 0x80
 800acda:	d1ca      	bne.n	800ac72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b084      	sub	sp, #16
 800acea:	af00      	add	r7, sp, #0
 800acec:	60f8      	str	r0, [r7, #12]
 800acee:	60b9      	str	r1, [r7, #8]
 800acf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800acf2:	e02d      	b.n	800ad50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f000 f8bf 	bl	800ae78 <I2C_IsAcknowledgeFailed>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e02d      	b.n	800ad60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0a:	d021      	beq.n	800ad50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad0c:	f7fc f832 	bl	8006d74 <HAL_GetTick>
 800ad10:	4602      	mov	r2, r0
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d302      	bcc.n	800ad22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d116      	bne.n	800ad50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2220      	movs	r2, #32
 800ad2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3c:	f043 0220 	orr.w	r2, r3, #32
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e007      	b.n	800ad60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	f003 0304 	and.w	r3, r3, #4
 800ad5a:	2b04      	cmp	r3, #4
 800ad5c:	d1ca      	bne.n	800acf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad70:	2300      	movs	r3, #0
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800ad74:	4b13      	ldr	r3, [pc, #76]	; (800adc4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	08db      	lsrs	r3, r3, #3
 800ad7a:	4a13      	ldr	r2, [pc, #76]	; (800adc8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800ad7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad80:	0a1a      	lsrs	r2, r3, #8
 800ad82:	4613      	mov	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d107      	bne.n	800ada6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9a:	f043 0220 	orr.w	r2, r3, #32
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e008      	b.n	800adb8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800adb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adb4:	d0e9      	beq.n	800ad8a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3714      	adds	r7, #20
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr
 800adc4:	20000034 	.word	0x20000034
 800adc8:	14f8b589 	.word	0x14f8b589

0800adcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800add8:	e042      	b.n	800ae60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	695b      	ldr	r3, [r3, #20]
 800ade0:	f003 0310 	and.w	r3, r3, #16
 800ade4:	2b10      	cmp	r3, #16
 800ade6:	d119      	bne.n	800ae1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f06f 0210 	mvn.w	r2, #16
 800adf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2220      	movs	r2, #32
 800adfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e029      	b.n	800ae70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae1c:	f7fb ffaa 	bl	8006d74 <HAL_GetTick>
 800ae20:	4602      	mov	r2, r0
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d302      	bcc.n	800ae32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d116      	bne.n	800ae60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2200      	movs	r2, #0
 800ae36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2220      	movs	r2, #32
 800ae3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4c:	f043 0220 	orr.w	r2, r3, #32
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e007      	b.n	800ae70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	695b      	ldr	r3, [r3, #20]
 800ae66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae6a:	2b40      	cmp	r3, #64	; 0x40
 800ae6c:	d1b5      	bne.n	800adda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae8e:	d11b      	bne.n	800aec8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ae98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2220      	movs	r2, #32
 800aea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb4:	f043 0204 	orr.w	r2, r3, #4
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e000      	b.n	800aeca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b083      	sub	sp, #12
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800aee6:	d103      	bne.n	800aef0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800aeee:	e007      	b.n	800af00 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800aef8:	d102      	bne.n	800af00 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2208      	movs	r2, #8
 800aefe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800af00:	bf00      	nop
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d101      	bne.n	800af1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	e264      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0301 	and.w	r3, r3, #1
 800af26:	2b00      	cmp	r3, #0
 800af28:	d075      	beq.n	800b016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800af2a:	4ba3      	ldr	r3, [pc, #652]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f003 030c 	and.w	r3, r3, #12
 800af32:	2b04      	cmp	r3, #4
 800af34:	d00c      	beq.n	800af50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af36:	4ba0      	ldr	r3, [pc, #640]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800af3e:	2b08      	cmp	r3, #8
 800af40:	d112      	bne.n	800af68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af42:	4b9d      	ldr	r3, [pc, #628]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af4e:	d10b      	bne.n	800af68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af50:	4b99      	ldr	r3, [pc, #612]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d05b      	beq.n	800b014 <HAL_RCC_OscConfig+0x108>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d157      	bne.n	800b014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800af64:	2301      	movs	r3, #1
 800af66:	e23f      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af70:	d106      	bne.n	800af80 <HAL_RCC_OscConfig+0x74>
 800af72:	4b91      	ldr	r3, [pc, #580]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a90      	ldr	r2, [pc, #576]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800af78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	e01d      	b.n	800afbc <HAL_RCC_OscConfig+0xb0>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af88:	d10c      	bne.n	800afa4 <HAL_RCC_OscConfig+0x98>
 800af8a:	4b8b      	ldr	r3, [pc, #556]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a8a      	ldr	r2, [pc, #552]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800af90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af94:	6013      	str	r3, [r2, #0]
 800af96:	4b88      	ldr	r3, [pc, #544]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a87      	ldr	r2, [pc, #540]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800af9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afa0:	6013      	str	r3, [r2, #0]
 800afa2:	e00b      	b.n	800afbc <HAL_RCC_OscConfig+0xb0>
 800afa4:	4b84      	ldr	r3, [pc, #528]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a83      	ldr	r2, [pc, #524]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800afaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	4b81      	ldr	r3, [pc, #516]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a80      	ldr	r2, [pc, #512]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800afb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d013      	beq.n	800afec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afc4:	f7fb fed6 	bl	8006d74 <HAL_GetTick>
 800afc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afca:	e008      	b.n	800afde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800afcc:	f7fb fed2 	bl	8006d74 <HAL_GetTick>
 800afd0:	4602      	mov	r2, r0
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	2b64      	cmp	r3, #100	; 0x64
 800afd8:	d901      	bls.n	800afde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800afda:	2303      	movs	r3, #3
 800afdc:	e204      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afde:	4b76      	ldr	r3, [pc, #472]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d0f0      	beq.n	800afcc <HAL_RCC_OscConfig+0xc0>
 800afea:	e014      	b.n	800b016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afec:	f7fb fec2 	bl	8006d74 <HAL_GetTick>
 800aff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aff2:	e008      	b.n	800b006 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aff4:	f7fb febe 	bl	8006d74 <HAL_GetTick>
 800aff8:	4602      	mov	r2, r0
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	2b64      	cmp	r3, #100	; 0x64
 800b000:	d901      	bls.n	800b006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b002:	2303      	movs	r3, #3
 800b004:	e1f0      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b006:	4b6c      	ldr	r3, [pc, #432]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1f0      	bne.n	800aff4 <HAL_RCC_OscConfig+0xe8>
 800b012:	e000      	b.n	800b016 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f003 0302 	and.w	r3, r3, #2
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d063      	beq.n	800b0ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b022:	4b65      	ldr	r3, [pc, #404]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	f003 030c 	and.w	r3, r3, #12
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00b      	beq.n	800b046 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b02e:	4b62      	ldr	r3, [pc, #392]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b036:	2b08      	cmp	r3, #8
 800b038:	d11c      	bne.n	800b074 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b03a:	4b5f      	ldr	r3, [pc, #380]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d116      	bne.n	800b074 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b046:	4b5c      	ldr	r3, [pc, #368]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f003 0302 	and.w	r3, r3, #2
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d005      	beq.n	800b05e <HAL_RCC_OscConfig+0x152>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d001      	beq.n	800b05e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e1c4      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b05e:	4b56      	ldr	r3, [pc, #344]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	00db      	lsls	r3, r3, #3
 800b06c:	4952      	ldr	r1, [pc, #328]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b06e:	4313      	orrs	r3, r2
 800b070:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b072:	e03a      	b.n	800b0ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d020      	beq.n	800b0be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b07c:	4b4f      	ldr	r3, [pc, #316]	; (800b1bc <HAL_RCC_OscConfig+0x2b0>)
 800b07e:	2201      	movs	r2, #1
 800b080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b082:	f7fb fe77 	bl	8006d74 <HAL_GetTick>
 800b086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b088:	e008      	b.n	800b09c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b08a:	f7fb fe73 	bl	8006d74 <HAL_GetTick>
 800b08e:	4602      	mov	r2, r0
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	1ad3      	subs	r3, r2, r3
 800b094:	2b02      	cmp	r3, #2
 800b096:	d901      	bls.n	800b09c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b098:	2303      	movs	r3, #3
 800b09a:	e1a5      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b09c:	4b46      	ldr	r3, [pc, #280]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f003 0302 	and.w	r3, r3, #2
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d0f0      	beq.n	800b08a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0a8:	4b43      	ldr	r3, [pc, #268]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	00db      	lsls	r3, r3, #3
 800b0b6:	4940      	ldr	r1, [pc, #256]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	600b      	str	r3, [r1, #0]
 800b0bc:	e015      	b.n	800b0ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b0be:	4b3f      	ldr	r3, [pc, #252]	; (800b1bc <HAL_RCC_OscConfig+0x2b0>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0c4:	f7fb fe56 	bl	8006d74 <HAL_GetTick>
 800b0c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0ca:	e008      	b.n	800b0de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b0cc:	f7fb fe52 	bl	8006d74 <HAL_GetTick>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d901      	bls.n	800b0de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	e184      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0de:	4b36      	ldr	r3, [pc, #216]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f003 0302 	and.w	r3, r3, #2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1f0      	bne.n	800b0cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 0308 	and.w	r3, r3, #8
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d030      	beq.n	800b158 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d016      	beq.n	800b12c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b0fe:	4b30      	ldr	r3, [pc, #192]	; (800b1c0 <HAL_RCC_OscConfig+0x2b4>)
 800b100:	2201      	movs	r2, #1
 800b102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b104:	f7fb fe36 	bl	8006d74 <HAL_GetTick>
 800b108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b10a:	e008      	b.n	800b11e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b10c:	f7fb fe32 	bl	8006d74 <HAL_GetTick>
 800b110:	4602      	mov	r2, r0
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	1ad3      	subs	r3, r2, r3
 800b116:	2b02      	cmp	r3, #2
 800b118:	d901      	bls.n	800b11e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b11a:	2303      	movs	r3, #3
 800b11c:	e164      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b11e:	4b26      	ldr	r3, [pc, #152]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b122:	f003 0302 	and.w	r3, r3, #2
 800b126:	2b00      	cmp	r3, #0
 800b128:	d0f0      	beq.n	800b10c <HAL_RCC_OscConfig+0x200>
 800b12a:	e015      	b.n	800b158 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b12c:	4b24      	ldr	r3, [pc, #144]	; (800b1c0 <HAL_RCC_OscConfig+0x2b4>)
 800b12e:	2200      	movs	r2, #0
 800b130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b132:	f7fb fe1f 	bl	8006d74 <HAL_GetTick>
 800b136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b138:	e008      	b.n	800b14c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b13a:	f7fb fe1b 	bl	8006d74 <HAL_GetTick>
 800b13e:	4602      	mov	r2, r0
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	1ad3      	subs	r3, r2, r3
 800b144:	2b02      	cmp	r3, #2
 800b146:	d901      	bls.n	800b14c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b148:	2303      	movs	r3, #3
 800b14a:	e14d      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b14c:	4b1a      	ldr	r3, [pc, #104]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b14e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b150:	f003 0302 	and.w	r3, r3, #2
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1f0      	bne.n	800b13a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 0304 	and.w	r3, r3, #4
 800b160:	2b00      	cmp	r3, #0
 800b162:	f000 80a0 	beq.w	800b2a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b166:	2300      	movs	r3, #0
 800b168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b16a:	4b13      	ldr	r3, [pc, #76]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10f      	bne.n	800b196 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b176:	2300      	movs	r3, #0
 800b178:	60bb      	str	r3, [r7, #8]
 800b17a:	4b0f      	ldr	r3, [pc, #60]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17e:	4a0e      	ldr	r2, [pc, #56]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b184:	6413      	str	r3, [r2, #64]	; 0x40
 800b186:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <HAL_RCC_OscConfig+0x2ac>)
 800b188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b18e:	60bb      	str	r3, [r7, #8]
 800b190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b192:	2301      	movs	r3, #1
 800b194:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b196:	4b0b      	ldr	r3, [pc, #44]	; (800b1c4 <HAL_RCC_OscConfig+0x2b8>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d121      	bne.n	800b1e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b1a2:	4b08      	ldr	r3, [pc, #32]	; (800b1c4 <HAL_RCC_OscConfig+0x2b8>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a07      	ldr	r2, [pc, #28]	; (800b1c4 <HAL_RCC_OscConfig+0x2b8>)
 800b1a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1ae:	f7fb fde1 	bl	8006d74 <HAL_GetTick>
 800b1b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1b4:	e011      	b.n	800b1da <HAL_RCC_OscConfig+0x2ce>
 800b1b6:	bf00      	nop
 800b1b8:	40023800 	.word	0x40023800
 800b1bc:	42470000 	.word	0x42470000
 800b1c0:	42470e80 	.word	0x42470e80
 800b1c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1c8:	f7fb fdd4 	bl	8006d74 <HAL_GetTick>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d901      	bls.n	800b1da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b1d6:	2303      	movs	r3, #3
 800b1d8:	e106      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1da:	4b85      	ldr	r3, [pc, #532]	; (800b3f0 <HAL_RCC_OscConfig+0x4e4>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d0f0      	beq.n	800b1c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d106      	bne.n	800b1fc <HAL_RCC_OscConfig+0x2f0>
 800b1ee:	4b81      	ldr	r3, [pc, #516]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b1f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1f2:	4a80      	ldr	r2, [pc, #512]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b1f4:	f043 0301 	orr.w	r3, r3, #1
 800b1f8:	6713      	str	r3, [r2, #112]	; 0x70
 800b1fa:	e01c      	b.n	800b236 <HAL_RCC_OscConfig+0x32a>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	2b05      	cmp	r3, #5
 800b202:	d10c      	bne.n	800b21e <HAL_RCC_OscConfig+0x312>
 800b204:	4b7b      	ldr	r3, [pc, #492]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b208:	4a7a      	ldr	r2, [pc, #488]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b20a:	f043 0304 	orr.w	r3, r3, #4
 800b20e:	6713      	str	r3, [r2, #112]	; 0x70
 800b210:	4b78      	ldr	r3, [pc, #480]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b214:	4a77      	ldr	r2, [pc, #476]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b216:	f043 0301 	orr.w	r3, r3, #1
 800b21a:	6713      	str	r3, [r2, #112]	; 0x70
 800b21c:	e00b      	b.n	800b236 <HAL_RCC_OscConfig+0x32a>
 800b21e:	4b75      	ldr	r3, [pc, #468]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b222:	4a74      	ldr	r2, [pc, #464]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b224:	f023 0301 	bic.w	r3, r3, #1
 800b228:	6713      	str	r3, [r2, #112]	; 0x70
 800b22a:	4b72      	ldr	r3, [pc, #456]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b22e:	4a71      	ldr	r2, [pc, #452]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b230:	f023 0304 	bic.w	r3, r3, #4
 800b234:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d015      	beq.n	800b26a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b23e:	f7fb fd99 	bl	8006d74 <HAL_GetTick>
 800b242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b244:	e00a      	b.n	800b25c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b246:	f7fb fd95 	bl	8006d74 <HAL_GetTick>
 800b24a:	4602      	mov	r2, r0
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	f241 3288 	movw	r2, #5000	; 0x1388
 800b254:	4293      	cmp	r3, r2
 800b256:	d901      	bls.n	800b25c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b258:	2303      	movs	r3, #3
 800b25a:	e0c5      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b25c:	4b65      	ldr	r3, [pc, #404]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b25e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b260:	f003 0302 	and.w	r3, r3, #2
 800b264:	2b00      	cmp	r3, #0
 800b266:	d0ee      	beq.n	800b246 <HAL_RCC_OscConfig+0x33a>
 800b268:	e014      	b.n	800b294 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b26a:	f7fb fd83 	bl	8006d74 <HAL_GetTick>
 800b26e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b270:	e00a      	b.n	800b288 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b272:	f7fb fd7f 	bl	8006d74 <HAL_GetTick>
 800b276:	4602      	mov	r2, r0
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	1ad3      	subs	r3, r2, r3
 800b27c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b280:	4293      	cmp	r3, r2
 800b282:	d901      	bls.n	800b288 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b284:	2303      	movs	r3, #3
 800b286:	e0af      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b288:	4b5a      	ldr	r3, [pc, #360]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b28a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b28c:	f003 0302 	and.w	r3, r3, #2
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1ee      	bne.n	800b272 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b294:	7dfb      	ldrb	r3, [r7, #23]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d105      	bne.n	800b2a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b29a:	4b56      	ldr	r3, [pc, #344]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29e:	4a55      	ldr	r2, [pc, #340]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b2a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f000 809b 	beq.w	800b3e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b2b0:	4b50      	ldr	r3, [pc, #320]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	f003 030c 	and.w	r3, r3, #12
 800b2b8:	2b08      	cmp	r3, #8
 800b2ba:	d05c      	beq.n	800b376 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	699b      	ldr	r3, [r3, #24]
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d141      	bne.n	800b348 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2c4:	4b4c      	ldr	r3, [pc, #304]	; (800b3f8 <HAL_RCC_OscConfig+0x4ec>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2ca:	f7fb fd53 	bl	8006d74 <HAL_GetTick>
 800b2ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2d0:	e008      	b.n	800b2e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b2d2:	f7fb fd4f 	bl	8006d74 <HAL_GetTick>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	1ad3      	subs	r3, r2, r3
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d901      	bls.n	800b2e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	e081      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2e4:	4b43      	ldr	r3, [pc, #268]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d1f0      	bne.n	800b2d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	69da      	ldr	r2, [r3, #28]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6a1b      	ldr	r3, [r3, #32]
 800b2f8:	431a      	orrs	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fe:	019b      	lsls	r3, r3, #6
 800b300:	431a      	orrs	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b306:	085b      	lsrs	r3, r3, #1
 800b308:	3b01      	subs	r3, #1
 800b30a:	041b      	lsls	r3, r3, #16
 800b30c:	431a      	orrs	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b312:	061b      	lsls	r3, r3, #24
 800b314:	4937      	ldr	r1, [pc, #220]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b316:	4313      	orrs	r3, r2
 800b318:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b31a:	4b37      	ldr	r3, [pc, #220]	; (800b3f8 <HAL_RCC_OscConfig+0x4ec>)
 800b31c:	2201      	movs	r2, #1
 800b31e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b320:	f7fb fd28 	bl	8006d74 <HAL_GetTick>
 800b324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b326:	e008      	b.n	800b33a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b328:	f7fb fd24 	bl	8006d74 <HAL_GetTick>
 800b32c:	4602      	mov	r2, r0
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	2b02      	cmp	r3, #2
 800b334:	d901      	bls.n	800b33a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b336:	2303      	movs	r3, #3
 800b338:	e056      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b33a:	4b2e      	ldr	r3, [pc, #184]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0f0      	beq.n	800b328 <HAL_RCC_OscConfig+0x41c>
 800b346:	e04e      	b.n	800b3e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b348:	4b2b      	ldr	r3, [pc, #172]	; (800b3f8 <HAL_RCC_OscConfig+0x4ec>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b34e:	f7fb fd11 	bl	8006d74 <HAL_GetTick>
 800b352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b354:	e008      	b.n	800b368 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b356:	f7fb fd0d 	bl	8006d74 <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	2b02      	cmp	r3, #2
 800b362:	d901      	bls.n	800b368 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b364:	2303      	movs	r3, #3
 800b366:	e03f      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b368:	4b22      	ldr	r3, [pc, #136]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1f0      	bne.n	800b356 <HAL_RCC_OscConfig+0x44a>
 800b374:	e037      	b.n	800b3e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d101      	bne.n	800b382 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	e032      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b382:	4b1c      	ldr	r3, [pc, #112]	; (800b3f4 <HAL_RCC_OscConfig+0x4e8>)
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d028      	beq.n	800b3e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d121      	bne.n	800b3e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d11a      	bne.n	800b3e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b3b2:	4013      	ands	r3, r2
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b3b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d111      	bne.n	800b3e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c8:	085b      	lsrs	r3, r3, #1
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d107      	bne.n	800b3e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d001      	beq.n	800b3e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e000      	b.n	800b3e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3718      	adds	r7, #24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	40007000 	.word	0x40007000
 800b3f4:	40023800 	.word	0x40023800
 800b3f8:	42470060 	.word	0x42470060

0800b3fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e0cc      	b.n	800b5aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b410:	4b68      	ldr	r3, [pc, #416]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0307 	and.w	r3, r3, #7
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d90c      	bls.n	800b438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b41e:	4b65      	ldr	r3, [pc, #404]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b420:	683a      	ldr	r2, [r7, #0]
 800b422:	b2d2      	uxtb	r2, r2
 800b424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b426:	4b63      	ldr	r3, [pc, #396]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 0307 	and.w	r3, r3, #7
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	429a      	cmp	r2, r3
 800b432:	d001      	beq.n	800b438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	e0b8      	b.n	800b5aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f003 0302 	and.w	r3, r3, #2
 800b440:	2b00      	cmp	r3, #0
 800b442:	d020      	beq.n	800b486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d005      	beq.n	800b45c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b450:	4b59      	ldr	r3, [pc, #356]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	4a58      	ldr	r2, [pc, #352]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b45a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f003 0308 	and.w	r3, r3, #8
 800b464:	2b00      	cmp	r3, #0
 800b466:	d005      	beq.n	800b474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b468:	4b53      	ldr	r3, [pc, #332]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	4a52      	ldr	r2, [pc, #328]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b46e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b474:	4b50      	ldr	r3, [pc, #320]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	494d      	ldr	r1, [pc, #308]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b482:	4313      	orrs	r3, r2
 800b484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 0301 	and.w	r3, r3, #1
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d044      	beq.n	800b51c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	2b01      	cmp	r3, #1
 800b498:	d107      	bne.n	800b4aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b49a:	4b47      	ldr	r3, [pc, #284]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d119      	bne.n	800b4da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e07f      	b.n	800b5aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d003      	beq.n	800b4ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b4b6:	2b03      	cmp	r3, #3
 800b4b8:	d107      	bne.n	800b4ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b4ba:	4b3f      	ldr	r3, [pc, #252]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d109      	bne.n	800b4da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e06f      	b.n	800b5aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4ca:	4b3b      	ldr	r3, [pc, #236]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 0302 	and.w	r3, r3, #2
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e067      	b.n	800b5aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b4da:	4b37      	ldr	r3, [pc, #220]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f023 0203 	bic.w	r2, r3, #3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	4934      	ldr	r1, [pc, #208]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b4ec:	f7fb fc42 	bl	8006d74 <HAL_GetTick>
 800b4f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4f2:	e00a      	b.n	800b50a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4f4:	f7fb fc3e 	bl	8006d74 <HAL_GetTick>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	1ad3      	subs	r3, r2, r3
 800b4fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800b502:	4293      	cmp	r3, r2
 800b504:	d901      	bls.n	800b50a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b506:	2303      	movs	r3, #3
 800b508:	e04f      	b.n	800b5aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b50a:	4b2b      	ldr	r3, [pc, #172]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	f003 020c 	and.w	r2, r3, #12
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	429a      	cmp	r2, r3
 800b51a:	d1eb      	bne.n	800b4f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b51c:	4b25      	ldr	r3, [pc, #148]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 0307 	and.w	r3, r3, #7
 800b524:	683a      	ldr	r2, [r7, #0]
 800b526:	429a      	cmp	r2, r3
 800b528:	d20c      	bcs.n	800b544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b52a:	4b22      	ldr	r3, [pc, #136]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b52c:	683a      	ldr	r2, [r7, #0]
 800b52e:	b2d2      	uxtb	r2, r2
 800b530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b532:	4b20      	ldr	r3, [pc, #128]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f003 0307 	and.w	r3, r3, #7
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d001      	beq.n	800b544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	e032      	b.n	800b5aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 0304 	and.w	r3, r3, #4
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d008      	beq.n	800b562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b550:	4b19      	ldr	r3, [pc, #100]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	4916      	ldr	r1, [pc, #88]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b55e:	4313      	orrs	r3, r2
 800b560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 0308 	and.w	r3, r3, #8
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d009      	beq.n	800b582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b56e:	4b12      	ldr	r3, [pc, #72]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	00db      	lsls	r3, r3, #3
 800b57c:	490e      	ldr	r1, [pc, #56]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b57e:	4313      	orrs	r3, r2
 800b580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b582:	f000 f821 	bl	800b5c8 <HAL_RCC_GetSysClockFreq>
 800b586:	4602      	mov	r2, r0
 800b588:	4b0b      	ldr	r3, [pc, #44]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	091b      	lsrs	r3, r3, #4
 800b58e:	f003 030f 	and.w	r3, r3, #15
 800b592:	490a      	ldr	r1, [pc, #40]	; (800b5bc <HAL_RCC_ClockConfig+0x1c0>)
 800b594:	5ccb      	ldrb	r3, [r1, r3]
 800b596:	fa22 f303 	lsr.w	r3, r2, r3
 800b59a:	4a09      	ldr	r2, [pc, #36]	; (800b5c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b59c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b59e:	4b09      	ldr	r3, [pc, #36]	; (800b5c4 <HAL_RCC_ClockConfig+0x1c8>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7fb fba2 	bl	8006cec <HAL_InitTick>

  return HAL_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	40023c00 	.word	0x40023c00
 800b5b8:	40023800 	.word	0x40023800
 800b5bc:	080258ac 	.word	0x080258ac
 800b5c0:	20000034 	.word	0x20000034
 800b5c4:	20000038 	.word	0x20000038

0800b5c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5c8:	b5b0      	push	{r4, r5, r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	6079      	str	r1, [r7, #4]
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	60f9      	str	r1, [r7, #12]
 800b5d6:	2100      	movs	r1, #0
 800b5d8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b5da:	2100      	movs	r1, #0
 800b5dc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b5de:	4952      	ldr	r1, [pc, #328]	; (800b728 <HAL_RCC_GetSysClockFreq+0x160>)
 800b5e0:	6889      	ldr	r1, [r1, #8]
 800b5e2:	f001 010c 	and.w	r1, r1, #12
 800b5e6:	2908      	cmp	r1, #8
 800b5e8:	d00d      	beq.n	800b606 <HAL_RCC_GetSysClockFreq+0x3e>
 800b5ea:	2908      	cmp	r1, #8
 800b5ec:	f200 8094 	bhi.w	800b718 <HAL_RCC_GetSysClockFreq+0x150>
 800b5f0:	2900      	cmp	r1, #0
 800b5f2:	d002      	beq.n	800b5fa <HAL_RCC_GetSysClockFreq+0x32>
 800b5f4:	2904      	cmp	r1, #4
 800b5f6:	d003      	beq.n	800b600 <HAL_RCC_GetSysClockFreq+0x38>
 800b5f8:	e08e      	b.n	800b718 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b5fa:	4b4c      	ldr	r3, [pc, #304]	; (800b72c <HAL_RCC_GetSysClockFreq+0x164>)
 800b5fc:	60bb      	str	r3, [r7, #8]
       break;
 800b5fe:	e08e      	b.n	800b71e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b600:	4b4b      	ldr	r3, [pc, #300]	; (800b730 <HAL_RCC_GetSysClockFreq+0x168>)
 800b602:	60bb      	str	r3, [r7, #8]
      break;
 800b604:	e08b      	b.n	800b71e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b606:	4948      	ldr	r1, [pc, #288]	; (800b728 <HAL_RCC_GetSysClockFreq+0x160>)
 800b608:	6849      	ldr	r1, [r1, #4]
 800b60a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b60e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b610:	4945      	ldr	r1, [pc, #276]	; (800b728 <HAL_RCC_GetSysClockFreq+0x160>)
 800b612:	6849      	ldr	r1, [r1, #4]
 800b614:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800b618:	2900      	cmp	r1, #0
 800b61a:	d024      	beq.n	800b666 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b61c:	4942      	ldr	r1, [pc, #264]	; (800b728 <HAL_RCC_GetSysClockFreq+0x160>)
 800b61e:	6849      	ldr	r1, [r1, #4]
 800b620:	0989      	lsrs	r1, r1, #6
 800b622:	4608      	mov	r0, r1
 800b624:	f04f 0100 	mov.w	r1, #0
 800b628:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b62c:	f04f 0500 	mov.w	r5, #0
 800b630:	ea00 0204 	and.w	r2, r0, r4
 800b634:	ea01 0305 	and.w	r3, r1, r5
 800b638:	493d      	ldr	r1, [pc, #244]	; (800b730 <HAL_RCC_GetSysClockFreq+0x168>)
 800b63a:	fb01 f003 	mul.w	r0, r1, r3
 800b63e:	2100      	movs	r1, #0
 800b640:	fb01 f102 	mul.w	r1, r1, r2
 800b644:	1844      	adds	r4, r0, r1
 800b646:	493a      	ldr	r1, [pc, #232]	; (800b730 <HAL_RCC_GetSysClockFreq+0x168>)
 800b648:	fba2 0101 	umull	r0, r1, r2, r1
 800b64c:	1863      	adds	r3, r4, r1
 800b64e:	4619      	mov	r1, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	461a      	mov	r2, r3
 800b654:	f04f 0300 	mov.w	r3, #0
 800b658:	f7f5 fb2e 	bl	8000cb8 <__aeabi_uldivmod>
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	4613      	mov	r3, r2
 800b662:	60fb      	str	r3, [r7, #12]
 800b664:	e04a      	b.n	800b6fc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b666:	4b30      	ldr	r3, [pc, #192]	; (800b728 <HAL_RCC_GetSysClockFreq+0x160>)
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	099b      	lsrs	r3, r3, #6
 800b66c:	461a      	mov	r2, r3
 800b66e:	f04f 0300 	mov.w	r3, #0
 800b672:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b676:	f04f 0100 	mov.w	r1, #0
 800b67a:	ea02 0400 	and.w	r4, r2, r0
 800b67e:	ea03 0501 	and.w	r5, r3, r1
 800b682:	4620      	mov	r0, r4
 800b684:	4629      	mov	r1, r5
 800b686:	f04f 0200 	mov.w	r2, #0
 800b68a:	f04f 0300 	mov.w	r3, #0
 800b68e:	014b      	lsls	r3, r1, #5
 800b690:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b694:	0142      	lsls	r2, r0, #5
 800b696:	4610      	mov	r0, r2
 800b698:	4619      	mov	r1, r3
 800b69a:	1b00      	subs	r0, r0, r4
 800b69c:	eb61 0105 	sbc.w	r1, r1, r5
 800b6a0:	f04f 0200 	mov.w	r2, #0
 800b6a4:	f04f 0300 	mov.w	r3, #0
 800b6a8:	018b      	lsls	r3, r1, #6
 800b6aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b6ae:	0182      	lsls	r2, r0, #6
 800b6b0:	1a12      	subs	r2, r2, r0
 800b6b2:	eb63 0301 	sbc.w	r3, r3, r1
 800b6b6:	f04f 0000 	mov.w	r0, #0
 800b6ba:	f04f 0100 	mov.w	r1, #0
 800b6be:	00d9      	lsls	r1, r3, #3
 800b6c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b6c4:	00d0      	lsls	r0, r2, #3
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	1912      	adds	r2, r2, r4
 800b6cc:	eb45 0303 	adc.w	r3, r5, r3
 800b6d0:	f04f 0000 	mov.w	r0, #0
 800b6d4:	f04f 0100 	mov.w	r1, #0
 800b6d8:	0299      	lsls	r1, r3, #10
 800b6da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b6de:	0290      	lsls	r0, r2, #10
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	f04f 0300 	mov.w	r3, #0
 800b6f0:	f7f5 fae2 	bl	8000cb8 <__aeabi_uldivmod>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b6fc:	4b0a      	ldr	r3, [pc, #40]	; (800b728 <HAL_RCC_GetSysClockFreq+0x160>)
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	0c1b      	lsrs	r3, r3, #16
 800b702:	f003 0303 	and.w	r3, r3, #3
 800b706:	3301      	adds	r3, #1
 800b708:	005b      	lsls	r3, r3, #1
 800b70a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	fbb2 f3f3 	udiv	r3, r2, r3
 800b714:	60bb      	str	r3, [r7, #8]
      break;
 800b716:	e002      	b.n	800b71e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b718:	4b04      	ldr	r3, [pc, #16]	; (800b72c <HAL_RCC_GetSysClockFreq+0x164>)
 800b71a:	60bb      	str	r3, [r7, #8]
      break;
 800b71c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b71e:	68bb      	ldr	r3, [r7, #8]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bdb0      	pop	{r4, r5, r7, pc}
 800b728:	40023800 	.word	0x40023800
 800b72c:	00f42400 	.word	0x00f42400
 800b730:	017d7840 	.word	0x017d7840

0800b734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b734:	b480      	push	{r7}
 800b736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b738:	4b03      	ldr	r3, [pc, #12]	; (800b748 <HAL_RCC_GetHCLKFreq+0x14>)
 800b73a:	681b      	ldr	r3, [r3, #0]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	20000034 	.word	0x20000034

0800b74c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b750:	f7ff fff0 	bl	800b734 <HAL_RCC_GetHCLKFreq>
 800b754:	4602      	mov	r2, r0
 800b756:	4b05      	ldr	r3, [pc, #20]	; (800b76c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	0a9b      	lsrs	r3, r3, #10
 800b75c:	f003 0307 	and.w	r3, r3, #7
 800b760:	4903      	ldr	r1, [pc, #12]	; (800b770 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b762:	5ccb      	ldrb	r3, [r1, r3]
 800b764:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b768:	4618      	mov	r0, r3
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	40023800 	.word	0x40023800
 800b770:	080258bc 	.word	0x080258bc

0800b774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b778:	f7ff ffdc 	bl	800b734 <HAL_RCC_GetHCLKFreq>
 800b77c:	4602      	mov	r2, r0
 800b77e:	4b05      	ldr	r3, [pc, #20]	; (800b794 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	0b5b      	lsrs	r3, r3, #13
 800b784:	f003 0307 	and.w	r3, r3, #7
 800b788:	4903      	ldr	r1, [pc, #12]	; (800b798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b78a:	5ccb      	ldrb	r3, [r1, r3]
 800b78c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b790:	4618      	mov	r0, r3
 800b792:	bd80      	pop	{r7, pc}
 800b794:	40023800 	.word	0x40023800
 800b798:	080258bc 	.word	0x080258bc

0800b79c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d101      	bne.n	800b7ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e07b      	b.n	800b8a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d108      	bne.n	800b7c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7be:	d009      	beq.n	800b7d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	61da      	str	r2, [r3, #28]
 800b7c6:	e005      	b.n	800b7d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d106      	bne.n	800b7f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7fa fd0a 	bl	8006208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2202      	movs	r2, #2
 800b7f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b80a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b81c:	431a      	orrs	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b826:	431a      	orrs	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	691b      	ldr	r3, [r3, #16]
 800b82c:	f003 0302 	and.w	r3, r3, #2
 800b830:	431a      	orrs	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	695b      	ldr	r3, [r3, #20]
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	431a      	orrs	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	699b      	ldr	r3, [r3, #24]
 800b840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b844:	431a      	orrs	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	69db      	ldr	r3, [r3, #28]
 800b84a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b84e:	431a      	orrs	r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a1b      	ldr	r3, [r3, #32]
 800b854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b858:	ea42 0103 	orr.w	r1, r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b860:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	430a      	orrs	r2, r1
 800b86a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	0c1b      	lsrs	r3, r3, #16
 800b872:	f003 0104 	and.w	r1, r3, #4
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87a:	f003 0210 	and.w	r2, r3, #16
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	430a      	orrs	r2, r1
 800b884:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	69da      	ldr	r2, [r3, #28]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b894:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b08c      	sub	sp, #48	; 0x30
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	60f8      	str	r0, [r7, #12]
 800b8b6:	60b9      	str	r1, [r7, #8]
 800b8b8:	607a      	str	r2, [r7, #4]
 800b8ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d101      	bne.n	800b8d4 <HAL_SPI_TransmitReceive+0x26>
 800b8d0:	2302      	movs	r3, #2
 800b8d2:	e18a      	b.n	800bbea <HAL_SPI_TransmitReceive+0x33c>
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8dc:	f7fb fa4a 	bl	8006d74 <HAL_GetTick>
 800b8e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b8f2:	887b      	ldrh	r3, [r7, #2]
 800b8f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b8f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d00f      	beq.n	800b91e <HAL_SPI_TransmitReceive+0x70>
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b904:	d107      	bne.n	800b916 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d103      	bne.n	800b916 <HAL_SPI_TransmitReceive+0x68>
 800b90e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b912:	2b04      	cmp	r3, #4
 800b914:	d003      	beq.n	800b91e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b916:	2302      	movs	r3, #2
 800b918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b91c:	e15b      	b.n	800bbd6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d005      	beq.n	800b930 <HAL_SPI_TransmitReceive+0x82>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d002      	beq.n	800b930 <HAL_SPI_TransmitReceive+0x82>
 800b92a:	887b      	ldrh	r3, [r7, #2]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d103      	bne.n	800b938 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b936:	e14e      	b.n	800bbd6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	2b04      	cmp	r3, #4
 800b942:	d003      	beq.n	800b94c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2205      	movs	r2, #5
 800b948:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	887a      	ldrh	r2, [r7, #2]
 800b95c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	887a      	ldrh	r2, [r7, #2]
 800b962:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	68ba      	ldr	r2, [r7, #8]
 800b968:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	887a      	ldrh	r2, [r7, #2]
 800b96e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	887a      	ldrh	r2, [r7, #2]
 800b974:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b98c:	2b40      	cmp	r3, #64	; 0x40
 800b98e:	d007      	beq.n	800b9a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b99e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9a8:	d178      	bne.n	800ba9c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <HAL_SPI_TransmitReceive+0x10a>
 800b9b2:	8b7b      	ldrh	r3, [r7, #26]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d166      	bne.n	800ba86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9bc:	881a      	ldrh	r2, [r3, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c8:	1c9a      	adds	r2, r3, #2
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9dc:	e053      	b.n	800ba86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	f003 0302 	and.w	r3, r3, #2
 800b9e8:	2b02      	cmp	r3, #2
 800b9ea:	d11b      	bne.n	800ba24 <HAL_SPI_TransmitReceive+0x176>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d016      	beq.n	800ba24 <HAL_SPI_TransmitReceive+0x176>
 800b9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d113      	bne.n	800ba24 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba00:	881a      	ldrh	r2, [r3, #0]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba0c:	1c9a      	adds	r2, r3, #2
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba20:	2300      	movs	r3, #0
 800ba22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	f003 0301 	and.w	r3, r3, #1
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d119      	bne.n	800ba66 <HAL_SPI_TransmitReceive+0x1b8>
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d014      	beq.n	800ba66 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68da      	ldr	r2, [r3, #12]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba46:	b292      	uxth	r2, r2
 800ba48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4e:	1c9a      	adds	r2, r3, #2
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	b29a      	uxth	r2, r3
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba62:	2301      	movs	r3, #1
 800ba64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ba66:	f7fb f985 	bl	8006d74 <HAL_GetTick>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d807      	bhi.n	800ba86 <HAL_SPI_TransmitReceive+0x1d8>
 800ba76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7c:	d003      	beq.n	800ba86 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ba84:	e0a7      	b.n	800bbd6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d1a6      	bne.n	800b9de <HAL_SPI_TransmitReceive+0x130>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1a1      	bne.n	800b9de <HAL_SPI_TransmitReceive+0x130>
 800ba9a:	e07c      	b.n	800bb96 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d002      	beq.n	800baaa <HAL_SPI_TransmitReceive+0x1fc>
 800baa4:	8b7b      	ldrh	r3, [r7, #26]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d16b      	bne.n	800bb82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	330c      	adds	r3, #12
 800bab4:	7812      	ldrb	r2, [r2, #0]
 800bab6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800babc:	1c5a      	adds	r2, r3, #1
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	3b01      	subs	r3, #1
 800baca:	b29a      	uxth	r2, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bad0:	e057      	b.n	800bb82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f003 0302 	and.w	r3, r3, #2
 800badc:	2b02      	cmp	r3, #2
 800bade:	d11c      	bne.n	800bb1a <HAL_SPI_TransmitReceive+0x26c>
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d017      	beq.n	800bb1a <HAL_SPI_TransmitReceive+0x26c>
 800baea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baec:	2b01      	cmp	r3, #1
 800baee:	d114      	bne.n	800bb1a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	330c      	adds	r3, #12
 800bafa:	7812      	ldrb	r2, [r2, #0]
 800bafc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb02:	1c5a      	adds	r2, r3, #1
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bb16:	2300      	movs	r3, #0
 800bb18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f003 0301 	and.w	r3, r3, #1
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d119      	bne.n	800bb5c <HAL_SPI_TransmitReceive+0x2ae>
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d014      	beq.n	800bb5c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	68da      	ldr	r2, [r3, #12]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3c:	b2d2      	uxtb	r2, r2
 800bb3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	3b01      	subs	r3, #1
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bb5c:	f7fb f90a 	bl	8006d74 <HAL_GetTick>
 800bb60:	4602      	mov	r2, r0
 800bb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d803      	bhi.n	800bb74 <HAL_SPI_TransmitReceive+0x2c6>
 800bb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb72:	d102      	bne.n	800bb7a <HAL_SPI_TransmitReceive+0x2cc>
 800bb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d103      	bne.n	800bb82 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bb80:	e029      	b.n	800bbd6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1a2      	bne.n	800bad2 <HAL_SPI_TransmitReceive+0x224>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d19d      	bne.n	800bad2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f000 f9d0 	bl	800bf40 <SPI_EndRxTxTransaction>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d006      	beq.n	800bbb4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2220      	movs	r2, #32
 800bbb0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bbb2:	e010      	b.n	800bbd6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10b      	bne.n	800bbd4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	617b      	str	r3, [r7, #20]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	617b      	str	r3, [r7, #20]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	617b      	str	r3, [r7, #20]
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	e000      	b.n	800bbd6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bbd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bbe6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3730      	adds	r7, #48	; 0x30
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
	...

0800bbf4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b088      	sub	sp, #32
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	099b      	lsrs	r3, r3, #6
 800bc10:	f003 0301 	and.w	r3, r3, #1
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10f      	bne.n	800bc38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00a      	beq.n	800bc38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	099b      	lsrs	r3, r3, #6
 800bc26:	f003 0301 	and.w	r3, r3, #1
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d004      	beq.n	800bc38 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	4798      	blx	r3
    return;
 800bc36:	e0d7      	b.n	800bde8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bc38:	69bb      	ldr	r3, [r7, #24]
 800bc3a:	085b      	lsrs	r3, r3, #1
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00a      	beq.n	800bc5a <HAL_SPI_IRQHandler+0x66>
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	09db      	lsrs	r3, r3, #7
 800bc48:	f003 0301 	and.w	r3, r3, #1
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d004      	beq.n	800bc5a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	4798      	blx	r3
    return;
 800bc58:	e0c6      	b.n	800bde8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	095b      	lsrs	r3, r3, #5
 800bc5e:	f003 0301 	and.w	r3, r3, #1
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d10c      	bne.n	800bc80 <HAL_SPI_IRQHandler+0x8c>
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	099b      	lsrs	r3, r3, #6
 800bc6a:	f003 0301 	and.w	r3, r3, #1
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d106      	bne.n	800bc80 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	0a1b      	lsrs	r3, r3, #8
 800bc76:	f003 0301 	and.w	r3, r3, #1
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f000 80b4 	beq.w	800bde8 <HAL_SPI_IRQHandler+0x1f4>
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	095b      	lsrs	r3, r3, #5
 800bc84:	f003 0301 	and.w	r3, r3, #1
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 80ad 	beq.w	800bde8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	099b      	lsrs	r3, r3, #6
 800bc92:	f003 0301 	and.w	r3, r3, #1
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d023      	beq.n	800bce2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	d011      	beq.n	800bcca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcaa:	f043 0204 	orr.w	r2, r3, #4
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	617b      	str	r3, [r7, #20]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	617b      	str	r3, [r7, #20]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	617b      	str	r3, [r7, #20]
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	e00b      	b.n	800bce2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bcca:	2300      	movs	r3, #0
 800bccc:	613b      	str	r3, [r7, #16]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	613b      	str	r3, [r7, #16]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	613b      	str	r3, [r7, #16]
 800bcde:	693b      	ldr	r3, [r7, #16]
        return;
 800bce0:	e082      	b.n	800bde8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bce2:	69bb      	ldr	r3, [r7, #24]
 800bce4:	095b      	lsrs	r3, r3, #5
 800bce6:	f003 0301 	and.w	r3, r3, #1
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d014      	beq.n	800bd18 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcf2:	f043 0201 	orr.w	r2, r3, #1
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	60fb      	str	r3, [r7, #12]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	60fb      	str	r3, [r7, #12]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd14:	601a      	str	r2, [r3, #0]
 800bd16:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	0a1b      	lsrs	r3, r3, #8
 800bd1c:	f003 0301 	and.w	r3, r3, #1
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00c      	beq.n	800bd3e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd28:	f043 0208 	orr.w	r2, r3, #8
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bd30:	2300      	movs	r3, #0
 800bd32:	60bb      	str	r3, [r7, #8]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	60bb      	str	r3, [r7, #8]
 800bd3c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d04f      	beq.n	800bde6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bd54:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	f003 0302 	and.w	r3, r3, #2
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d104      	bne.n	800bd72 <HAL_SPI_IRQHandler+0x17e>
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	f003 0301 	and.w	r3, r3, #1
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d034      	beq.n	800bddc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	685a      	ldr	r2, [r3, #4]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f022 0203 	bic.w	r2, r2, #3
 800bd80:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d011      	beq.n	800bdae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd8e:	4a18      	ldr	r2, [pc, #96]	; (800bdf0 <HAL_SPI_IRQHandler+0x1fc>)
 800bd90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fb fb32 	bl	8007400 <HAL_DMA_Abort_IT>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d005      	beq.n	800bdae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bda6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d016      	beq.n	800bde4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdba:	4a0d      	ldr	r2, [pc, #52]	; (800bdf0 <HAL_SPI_IRQHandler+0x1fc>)
 800bdbc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7fb fb1c 	bl	8007400 <HAL_DMA_Abort_IT>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00a      	beq.n	800bde4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bdda:	e003      	b.n	800bde4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 f809 	bl	800bdf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bde2:	e000      	b.n	800bde6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bde4:	bf00      	nop
    return;
 800bde6:	bf00      	nop
  }
}
 800bde8:	3720      	adds	r7, #32
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	0800be09 	.word	0x0800be09

0800bdf4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bdfc:	bf00      	nop
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be14:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800be22:	68f8      	ldr	r0, [r7, #12]
 800be24:	f7ff ffe6 	bl	800bdf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be28:	bf00      	nop
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b088      	sub	sp, #32
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	603b      	str	r3, [r7, #0]
 800be3c:	4613      	mov	r3, r2
 800be3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800be40:	f7fa ff98 	bl	8006d74 <HAL_GetTick>
 800be44:	4602      	mov	r2, r0
 800be46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be48:	1a9b      	subs	r3, r3, r2
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	4413      	add	r3, r2
 800be4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800be50:	f7fa ff90 	bl	8006d74 <HAL_GetTick>
 800be54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800be56:	4b39      	ldr	r3, [pc, #228]	; (800bf3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	015b      	lsls	r3, r3, #5
 800be5c:	0d1b      	lsrs	r3, r3, #20
 800be5e:	69fa      	ldr	r2, [r7, #28]
 800be60:	fb02 f303 	mul.w	r3, r2, r3
 800be64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be66:	e054      	b.n	800bf12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6e:	d050      	beq.n	800bf12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800be70:	f7fa ff80 	bl	8006d74 <HAL_GetTick>
 800be74:	4602      	mov	r2, r0
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	1ad3      	subs	r3, r2, r3
 800be7a:	69fa      	ldr	r2, [r7, #28]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d902      	bls.n	800be86 <SPI_WaitFlagStateUntilTimeout+0x56>
 800be80:	69fb      	ldr	r3, [r7, #28]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d13d      	bne.n	800bf02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	685a      	ldr	r2, [r3, #4]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800be94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be9e:	d111      	bne.n	800bec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bea8:	d004      	beq.n	800beb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800beb2:	d107      	bne.n	800bec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800becc:	d10f      	bne.n	800beee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bedc:	601a      	str	r2, [r3, #0]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800beec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2201      	movs	r2, #1
 800bef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2200      	movs	r2, #0
 800befa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800befe:	2303      	movs	r3, #3
 800bf00:	e017      	b.n	800bf32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d101      	bne.n	800bf0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	689a      	ldr	r2, [r3, #8]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	bf0c      	ite	eq
 800bf22:	2301      	moveq	r3, #1
 800bf24:	2300      	movne	r3, #0
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	461a      	mov	r2, r3
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d19b      	bne.n	800be68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3720      	adds	r7, #32
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	20000034 	.word	0x20000034

0800bf40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b088      	sub	sp, #32
 800bf44:	af02      	add	r7, sp, #8
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bf4c:	4b1b      	ldr	r3, [pc, #108]	; (800bfbc <SPI_EndRxTxTransaction+0x7c>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a1b      	ldr	r2, [pc, #108]	; (800bfc0 <SPI_EndRxTxTransaction+0x80>)
 800bf52:	fba2 2303 	umull	r2, r3, r2, r3
 800bf56:	0d5b      	lsrs	r3, r3, #21
 800bf58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf5c:	fb02 f303 	mul.w	r3, r2, r3
 800bf60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf6a:	d112      	bne.n	800bf92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	2200      	movs	r2, #0
 800bf74:	2180      	movs	r1, #128	; 0x80
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f7ff ff5a 	bl	800be30 <SPI_WaitFlagStateUntilTimeout>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d016      	beq.n	800bfb0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf86:	f043 0220 	orr.w	r2, r3, #32
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bf8e:	2303      	movs	r3, #3
 800bf90:	e00f      	b.n	800bfb2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00a      	beq.n	800bfae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfa8:	2b80      	cmp	r3, #128	; 0x80
 800bfaa:	d0f2      	beq.n	800bf92 <SPI_EndRxTxTransaction+0x52>
 800bfac:	e000      	b.n	800bfb0 <SPI_EndRxTxTransaction+0x70>
        break;
 800bfae:	bf00      	nop
  }

  return HAL_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3718      	adds	r7, #24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	20000034 	.word	0x20000034
 800bfc0:	165e9f81 	.word	0x165e9f81

0800bfc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e041      	b.n	800c05a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d106      	bne.n	800bff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7fa fb76 	bl	80066dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2202      	movs	r2, #2
 800bff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	3304      	adds	r3, #4
 800c000:	4619      	mov	r1, r3
 800c002:	4610      	mov	r0, r2
 800c004:	f000 f9f0 	bl	800c3e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3708      	adds	r7, #8
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
	...

0800c064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c072:	b2db      	uxtb	r3, r3
 800c074:	2b01      	cmp	r3, #1
 800c076:	d001      	beq.n	800c07c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	e044      	b.n	800c106 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2202      	movs	r2, #2
 800c080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	68da      	ldr	r2, [r3, #12]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f042 0201 	orr.w	r2, r2, #1
 800c092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a1e      	ldr	r2, [pc, #120]	; (800c114 <HAL_TIM_Base_Start_IT+0xb0>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d018      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x6c>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0a6:	d013      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a1a      	ldr	r2, [pc, #104]	; (800c118 <HAL_TIM_Base_Start_IT+0xb4>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d00e      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a19      	ldr	r2, [pc, #100]	; (800c11c <HAL_TIM_Base_Start_IT+0xb8>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d009      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a17      	ldr	r2, [pc, #92]	; (800c120 <HAL_TIM_Base_Start_IT+0xbc>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d004      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a16      	ldr	r2, [pc, #88]	; (800c124 <HAL_TIM_Base_Start_IT+0xc0>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d111      	bne.n	800c0f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f003 0307 	and.w	r3, r3, #7
 800c0da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2b06      	cmp	r3, #6
 800c0e0:	d010      	beq.n	800c104 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f042 0201 	orr.w	r2, r2, #1
 800c0f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0f2:	e007      	b.n	800c104 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f042 0201 	orr.w	r2, r2, #1
 800c102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	40010000 	.word	0x40010000
 800c118:	40000400 	.word	0x40000400
 800c11c:	40000800 	.word	0x40000800
 800c120:	40000c00 	.word	0x40000c00
 800c124:	40014000 	.word	0x40014000

0800c128 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	68da      	ldr	r2, [r3, #12]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f022 0201 	bic.w	r2, r2, #1
 800c13e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	6a1a      	ldr	r2, [r3, #32]
 800c146:	f241 1311 	movw	r3, #4369	; 0x1111
 800c14a:	4013      	ands	r3, r2
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10f      	bne.n	800c170 <HAL_TIM_Base_Stop_IT+0x48>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	6a1a      	ldr	r2, [r3, #32]
 800c156:	f240 4344 	movw	r3, #1092	; 0x444
 800c15a:	4013      	ands	r3, r2
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d107      	bne.n	800c170 <HAL_TIM_Base_Stop_IT+0x48>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f022 0201 	bic.w	r2, r2, #1
 800c16e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	370c      	adds	r7, #12
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b082      	sub	sp, #8
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	f003 0302 	and.w	r3, r3, #2
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d122      	bne.n	800c1e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	f003 0302 	and.w	r3, r3, #2
 800c1a6:	2b02      	cmp	r3, #2
 800c1a8:	d11b      	bne.n	800c1e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f06f 0202 	mvn.w	r2, #2
 800c1b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	699b      	ldr	r3, [r3, #24]
 800c1c0:	f003 0303 	and.w	r3, r3, #3
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d003      	beq.n	800c1d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f8ee 	bl	800c3aa <HAL_TIM_IC_CaptureCallback>
 800c1ce:	e005      	b.n	800c1dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 f8e0 	bl	800c396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 f8f1 	bl	800c3be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	691b      	ldr	r3, [r3, #16]
 800c1e8:	f003 0304 	and.w	r3, r3, #4
 800c1ec:	2b04      	cmp	r3, #4
 800c1ee:	d122      	bne.n	800c236 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68db      	ldr	r3, [r3, #12]
 800c1f6:	f003 0304 	and.w	r3, r3, #4
 800c1fa:	2b04      	cmp	r3, #4
 800c1fc:	d11b      	bne.n	800c236 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f06f 0204 	mvn.w	r2, #4
 800c206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2202      	movs	r2, #2
 800c20c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	699b      	ldr	r3, [r3, #24]
 800c214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d003      	beq.n	800c224 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f8c4 	bl	800c3aa <HAL_TIM_IC_CaptureCallback>
 800c222:	e005      	b.n	800c230 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 f8b6 	bl	800c396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 f8c7 	bl	800c3be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	f003 0308 	and.w	r3, r3, #8
 800c240:	2b08      	cmp	r3, #8
 800c242:	d122      	bne.n	800c28a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	f003 0308 	and.w	r3, r3, #8
 800c24e:	2b08      	cmp	r3, #8
 800c250:	d11b      	bne.n	800c28a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f06f 0208 	mvn.w	r2, #8
 800c25a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2204      	movs	r2, #4
 800c260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	69db      	ldr	r3, [r3, #28]
 800c268:	f003 0303 	and.w	r3, r3, #3
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d003      	beq.n	800c278 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 f89a 	bl	800c3aa <HAL_TIM_IC_CaptureCallback>
 800c276:	e005      	b.n	800c284 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f88c 	bl	800c396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f89d 	bl	800c3be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	691b      	ldr	r3, [r3, #16]
 800c290:	f003 0310 	and.w	r3, r3, #16
 800c294:	2b10      	cmp	r3, #16
 800c296:	d122      	bne.n	800c2de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	f003 0310 	and.w	r3, r3, #16
 800c2a2:	2b10      	cmp	r3, #16
 800c2a4:	d11b      	bne.n	800c2de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f06f 0210 	mvn.w	r2, #16
 800c2ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2208      	movs	r2, #8
 800c2b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	69db      	ldr	r3, [r3, #28]
 800c2bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d003      	beq.n	800c2cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 f870 	bl	800c3aa <HAL_TIM_IC_CaptureCallback>
 800c2ca:	e005      	b.n	800c2d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 f862 	bl	800c396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 f873 	bl	800c3be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	f003 0301 	and.w	r3, r3, #1
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d10e      	bne.n	800c30a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	f003 0301 	and.w	r3, r3, #1
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d107      	bne.n	800c30a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f06f 0201 	mvn.w	r2, #1
 800c302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f7f8 f995 	bl	8004634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c314:	2b80      	cmp	r3, #128	; 0x80
 800c316:	d10e      	bne.n	800c336 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c322:	2b80      	cmp	r3, #128	; 0x80
 800c324:	d107      	bne.n	800c336 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c32e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 f8e3 	bl	800c4fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	691b      	ldr	r3, [r3, #16]
 800c33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c340:	2b40      	cmp	r3, #64	; 0x40
 800c342:	d10e      	bne.n	800c362 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c34e:	2b40      	cmp	r3, #64	; 0x40
 800c350:	d107      	bne.n	800c362 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c35a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f838 	bl	800c3d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	f003 0320 	and.w	r3, r3, #32
 800c36c:	2b20      	cmp	r3, #32
 800c36e:	d10e      	bne.n	800c38e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	f003 0320 	and.w	r3, r3, #32
 800c37a:	2b20      	cmp	r3, #32
 800c37c:	d107      	bne.n	800c38e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f06f 0220 	mvn.w	r2, #32
 800c386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 f8ad 	bl	800c4e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c38e:	bf00      	nop
 800c390:	3708      	adds	r7, #8
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c396:	b480      	push	{r7}
 800c398:	b083      	sub	sp, #12
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c39e:	bf00      	nop
 800c3a0:	370c      	adds	r7, #12
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr

0800c3aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c3aa:	b480      	push	{r7}
 800c3ac:	b083      	sub	sp, #12
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c3b2:	bf00      	nop
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr

0800c3be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c3be:	b480      	push	{r7}
 800c3c0:	b083      	sub	sp, #12
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c3c6:	bf00      	nop
 800c3c8:	370c      	adds	r7, #12
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr

0800c3d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c3d2:	b480      	push	{r7}
 800c3d4:	b083      	sub	sp, #12
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c3da:	bf00      	nop
 800c3dc:	370c      	adds	r7, #12
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr
	...

0800c3e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b085      	sub	sp, #20
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	4a34      	ldr	r2, [pc, #208]	; (800c4cc <TIM_Base_SetConfig+0xe4>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d00f      	beq.n	800c420 <TIM_Base_SetConfig+0x38>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c406:	d00b      	beq.n	800c420 <TIM_Base_SetConfig+0x38>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4a31      	ldr	r2, [pc, #196]	; (800c4d0 <TIM_Base_SetConfig+0xe8>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d007      	beq.n	800c420 <TIM_Base_SetConfig+0x38>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4a30      	ldr	r2, [pc, #192]	; (800c4d4 <TIM_Base_SetConfig+0xec>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d003      	beq.n	800c420 <TIM_Base_SetConfig+0x38>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4a2f      	ldr	r2, [pc, #188]	; (800c4d8 <TIM_Base_SetConfig+0xf0>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d108      	bne.n	800c432 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	4313      	orrs	r3, r2
 800c430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4a25      	ldr	r2, [pc, #148]	; (800c4cc <TIM_Base_SetConfig+0xe4>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d01b      	beq.n	800c472 <TIM_Base_SetConfig+0x8a>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c440:	d017      	beq.n	800c472 <TIM_Base_SetConfig+0x8a>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4a22      	ldr	r2, [pc, #136]	; (800c4d0 <TIM_Base_SetConfig+0xe8>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d013      	beq.n	800c472 <TIM_Base_SetConfig+0x8a>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4a21      	ldr	r2, [pc, #132]	; (800c4d4 <TIM_Base_SetConfig+0xec>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d00f      	beq.n	800c472 <TIM_Base_SetConfig+0x8a>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4a20      	ldr	r2, [pc, #128]	; (800c4d8 <TIM_Base_SetConfig+0xf0>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d00b      	beq.n	800c472 <TIM_Base_SetConfig+0x8a>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a1f      	ldr	r2, [pc, #124]	; (800c4dc <TIM_Base_SetConfig+0xf4>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d007      	beq.n	800c472 <TIM_Base_SetConfig+0x8a>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4a1e      	ldr	r2, [pc, #120]	; (800c4e0 <TIM_Base_SetConfig+0xf8>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d003      	beq.n	800c472 <TIM_Base_SetConfig+0x8a>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4a1d      	ldr	r2, [pc, #116]	; (800c4e4 <TIM_Base_SetConfig+0xfc>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d108      	bne.n	800c484 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	4313      	orrs	r3, r2
 800c482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	695b      	ldr	r3, [r3, #20]
 800c48e:	4313      	orrs	r3, r2
 800c490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	689a      	ldr	r2, [r3, #8]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4a08      	ldr	r2, [pc, #32]	; (800c4cc <TIM_Base_SetConfig+0xe4>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d103      	bne.n	800c4b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	691a      	ldr	r2, [r3, #16]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	615a      	str	r2, [r3, #20]
}
 800c4be:	bf00      	nop
 800c4c0:	3714      	adds	r7, #20
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	40010000 	.word	0x40010000
 800c4d0:	40000400 	.word	0x40000400
 800c4d4:	40000800 	.word	0x40000800
 800c4d8:	40000c00 	.word	0x40000c00
 800c4dc:	40014000 	.word	0x40014000
 800c4e0:	40014400 	.word	0x40014400
 800c4e4:	40014800 	.word	0x40014800

0800c4e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	e03f      	b.n	800c5a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d106      	bne.n	800c53c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7fa fae0 	bl	8006afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2224      	movs	r2, #36	; 0x24
 800c540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68da      	ldr	r2, [r3, #12]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 ff53 	bl	800d400 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	691a      	ldr	r2, [r3, #16]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	695a      	ldr	r2, [r3, #20]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68da      	ldr	r2, [r3, #12]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2220      	movs	r2, #32
 800c594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2220      	movs	r2, #32
 800c59c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c5a0:	2300      	movs	r3, #0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
	...

0800c5ac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b08c      	sub	sp, #48	; 0x30
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	2b20      	cmp	r3, #32
 800c5c4:	d165      	bne.n	800c692 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d002      	beq.n	800c5d2 <HAL_UART_Transmit_DMA+0x26>
 800c5cc:	88fb      	ldrh	r3, [r7, #6]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d101      	bne.n	800c5d6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e05e      	b.n	800c694 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d101      	bne.n	800c5e4 <HAL_UART_Transmit_DMA+0x38>
 800c5e0:	2302      	movs	r3, #2
 800c5e2:	e057      	b.n	800c694 <HAL_UART_Transmit_DMA+0xe8>
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	88fa      	ldrh	r2, [r7, #6]
 800c5f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	88fa      	ldrh	r2, [r7, #6]
 800c5fc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2200      	movs	r2, #0
 800c602:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2221      	movs	r2, #33	; 0x21
 800c608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c610:	4a22      	ldr	r2, [pc, #136]	; (800c69c <HAL_UART_Transmit_DMA+0xf0>)
 800c612:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c618:	4a21      	ldr	r2, [pc, #132]	; (800c6a0 <HAL_UART_Transmit_DMA+0xf4>)
 800c61a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c620:	4a20      	ldr	r2, [pc, #128]	; (800c6a4 <HAL_UART_Transmit_DMA+0xf8>)
 800c622:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c628:	2200      	movs	r2, #0
 800c62a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800c62c:	f107 0308 	add.w	r3, r7, #8
 800c630:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c638:	6819      	ldr	r1, [r3, #0]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	3304      	adds	r3, #4
 800c640:	461a      	mov	r2, r3
 800c642:	88fb      	ldrh	r3, [r7, #6]
 800c644:	f7fa fe14 	bl	8007270 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c650:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2200      	movs	r2, #0
 800c656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	3314      	adds	r3, #20
 800c660:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	e853 3f00 	ldrex	r3, [r3]
 800c668:	617b      	str	r3, [r7, #20]
   return(result);
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c670:	62bb      	str	r3, [r7, #40]	; 0x28
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	3314      	adds	r3, #20
 800c678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c67a:	627a      	str	r2, [r7, #36]	; 0x24
 800c67c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c67e:	6a39      	ldr	r1, [r7, #32]
 800c680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c682:	e841 2300 	strex	r3, r2, [r1]
 800c686:	61fb      	str	r3, [r7, #28]
   return(result);
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1e5      	bne.n	800c65a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800c68e:	2300      	movs	r3, #0
 800c690:	e000      	b.n	800c694 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800c692:	2302      	movs	r3, #2
  }
}
 800c694:	4618      	mov	r0, r3
 800c696:	3730      	adds	r7, #48	; 0x30
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	0800cca1 	.word	0x0800cca1
 800c6a0:	0800cd3b 	.word	0x0800cd3b
 800c6a4:	0800ceb3 	.word	0x0800ceb3

0800c6a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	2b20      	cmp	r3, #32
 800c6c0:	d11d      	bne.n	800c6fe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d002      	beq.n	800c6ce <HAL_UART_Receive_DMA+0x26>
 800c6c8:	88fb      	ldrh	r3, [r7, #6]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d101      	bne.n	800c6d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e016      	b.n	800c700 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d101      	bne.n	800c6e0 <HAL_UART_Receive_DMA+0x38>
 800c6dc:	2302      	movs	r3, #2
 800c6de:	e00f      	b.n	800c700 <HAL_UART_Receive_DMA+0x58>
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c6ee:	88fb      	ldrh	r3, [r7, #6]
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	68b9      	ldr	r1, [r7, #8]
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f000 fc27 	bl	800cf48 <UART_Start_Receive_DMA>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	e000      	b.n	800c700 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c6fe:	2302      	movs	r3, #2
  }
}
 800c700:	4618      	mov	r0, r3
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b0ba      	sub	sp, #232	; 0xe8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	695b      	ldr	r3, [r3, #20]
 800c72a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c72e:	2300      	movs	r3, #0
 800c730:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c734:	2300      	movs	r3, #0
 800c736:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c73e:	f003 030f 	and.w	r3, r3, #15
 800c742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10f      	bne.n	800c76e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c74e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c752:	f003 0320 	and.w	r3, r3, #32
 800c756:	2b00      	cmp	r3, #0
 800c758:	d009      	beq.n	800c76e <HAL_UART_IRQHandler+0x66>
 800c75a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c75e:	f003 0320 	and.w	r3, r3, #32
 800c762:	2b00      	cmp	r3, #0
 800c764:	d003      	beq.n	800c76e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 fd8f 	bl	800d28a <UART_Receive_IT>
      return;
 800c76c:	e256      	b.n	800cc1c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c76e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c772:	2b00      	cmp	r3, #0
 800c774:	f000 80de 	beq.w	800c934 <HAL_UART_IRQHandler+0x22c>
 800c778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c77c:	f003 0301 	and.w	r3, r3, #1
 800c780:	2b00      	cmp	r3, #0
 800c782:	d106      	bne.n	800c792 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c788:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	f000 80d1 	beq.w	800c934 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c796:	f003 0301 	and.w	r3, r3, #1
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d00b      	beq.n	800c7b6 <HAL_UART_IRQHandler+0xae>
 800c79e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d005      	beq.n	800c7b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ae:	f043 0201 	orr.w	r2, r3, #1
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c7b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7ba:	f003 0304 	and.w	r3, r3, #4
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00b      	beq.n	800c7da <HAL_UART_IRQHandler+0xd2>
 800c7c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7c6:	f003 0301 	and.w	r3, r3, #1
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d005      	beq.n	800c7da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d2:	f043 0202 	orr.w	r2, r3, #2
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c7da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7de:	f003 0302 	and.w	r3, r3, #2
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00b      	beq.n	800c7fe <HAL_UART_IRQHandler+0xf6>
 800c7e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7ea:	f003 0301 	and.w	r3, r3, #1
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d005      	beq.n	800c7fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7f6:	f043 0204 	orr.w	r2, r3, #4
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c7fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c802:	f003 0308 	and.w	r3, r3, #8
 800c806:	2b00      	cmp	r3, #0
 800c808:	d011      	beq.n	800c82e <HAL_UART_IRQHandler+0x126>
 800c80a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c80e:	f003 0320 	and.w	r3, r3, #32
 800c812:	2b00      	cmp	r3, #0
 800c814:	d105      	bne.n	800c822 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c81a:	f003 0301 	and.w	r3, r3, #1
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d005      	beq.n	800c82e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c826:	f043 0208 	orr.w	r2, r3, #8
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c832:	2b00      	cmp	r3, #0
 800c834:	f000 81ed 	beq.w	800cc12 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c83c:	f003 0320 	and.w	r3, r3, #32
 800c840:	2b00      	cmp	r3, #0
 800c842:	d008      	beq.n	800c856 <HAL_UART_IRQHandler+0x14e>
 800c844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c848:	f003 0320 	and.w	r3, r3, #32
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d002      	beq.n	800c856 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 fd1a 	bl	800d28a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	695b      	ldr	r3, [r3, #20]
 800c85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c860:	2b40      	cmp	r3, #64	; 0x40
 800c862:	bf0c      	ite	eq
 800c864:	2301      	moveq	r3, #1
 800c866:	2300      	movne	r3, #0
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c872:	f003 0308 	and.w	r3, r3, #8
 800c876:	2b00      	cmp	r3, #0
 800c878:	d103      	bne.n	800c882 <HAL_UART_IRQHandler+0x17a>
 800c87a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d04f      	beq.n	800c922 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fc22 	bl	800d0cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c892:	2b40      	cmp	r3, #64	; 0x40
 800c894:	d141      	bne.n	800c91a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	3314      	adds	r3, #20
 800c89c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8a4:	e853 3f00 	ldrex	r3, [r3]
 800c8a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c8ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c8b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	3314      	adds	r3, #20
 800c8be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c8c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c8c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c8ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c8d2:	e841 2300 	strex	r3, r2, [r1]
 800c8d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c8da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1d9      	bne.n	800c896 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d013      	beq.n	800c912 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ee:	4a7d      	ldr	r2, [pc, #500]	; (800cae4 <HAL_UART_IRQHandler+0x3dc>)
 800c8f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fa fd82 	bl	8007400 <HAL_DMA_Abort_IT>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d016      	beq.n	800c930 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c90c:	4610      	mov	r0, r2
 800c90e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c910:	e00e      	b.n	800c930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f9ae 	bl	800cc74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c918:	e00a      	b.n	800c930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f9aa 	bl	800cc74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c920:	e006      	b.n	800c930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 f9a6 	bl	800cc74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c92e:	e170      	b.n	800cc12 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c930:	bf00      	nop
    return;
 800c932:	e16e      	b.n	800cc12 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c938:	2b01      	cmp	r3, #1
 800c93a:	f040 814a 	bne.w	800cbd2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c93e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c942:	f003 0310 	and.w	r3, r3, #16
 800c946:	2b00      	cmp	r3, #0
 800c948:	f000 8143 	beq.w	800cbd2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c94c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c950:	f003 0310 	and.w	r3, r3, #16
 800c954:	2b00      	cmp	r3, #0
 800c956:	f000 813c 	beq.w	800cbd2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c95a:	2300      	movs	r3, #0
 800c95c:	60bb      	str	r3, [r7, #8]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	60bb      	str	r3, [r7, #8]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	60bb      	str	r3, [r7, #8]
 800c96e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	695b      	ldr	r3, [r3, #20]
 800c976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c97a:	2b40      	cmp	r3, #64	; 0x40
 800c97c:	f040 80b4 	bne.w	800cae8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c98c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c990:	2b00      	cmp	r3, #0
 800c992:	f000 8140 	beq.w	800cc16 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c99a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	f080 8139 	bcs.w	800cc16 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c9aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b0:	69db      	ldr	r3, [r3, #28]
 800c9b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9b6:	f000 8088 	beq.w	800caca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	330c      	adds	r3, #12
 800c9c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c9c8:	e853 3f00 	ldrex	r3, [r3]
 800c9cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c9d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c9d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	330c      	adds	r3, #12
 800c9e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c9e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c9ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c9f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c9f6:	e841 2300 	strex	r3, r2, [r1]
 800c9fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c9fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1d9      	bne.n	800c9ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3314      	adds	r3, #20
 800ca0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca10:	e853 3f00 	ldrex	r3, [r3]
 800ca14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ca16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca18:	f023 0301 	bic.w	r3, r3, #1
 800ca1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	3314      	adds	r3, #20
 800ca26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ca2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ca2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ca32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ca36:	e841 2300 	strex	r3, r2, [r1]
 800ca3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ca3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1e1      	bne.n	800ca06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	3314      	adds	r3, #20
 800ca48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca4c:	e853 3f00 	ldrex	r3, [r3]
 800ca50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ca52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	3314      	adds	r3, #20
 800ca62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ca66:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ca68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ca6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca6e:	e841 2300 	strex	r3, r2, [r1]
 800ca72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ca74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1e3      	bne.n	800ca42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2220      	movs	r2, #32
 800ca7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2200      	movs	r2, #0
 800ca86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	330c      	adds	r3, #12
 800ca8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca92:	e853 3f00 	ldrex	r3, [r3]
 800ca96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ca98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca9a:	f023 0310 	bic.w	r3, r3, #16
 800ca9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	330c      	adds	r3, #12
 800caa8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800caac:	65ba      	str	r2, [r7, #88]	; 0x58
 800caae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cab2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cab4:	e841 2300 	strex	r3, r2, [r1]
 800cab8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800caba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1e3      	bne.n	800ca88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fa fc2b 	bl	8007320 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	1ad3      	subs	r3, r2, r3
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	4619      	mov	r1, r3
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 f8d4 	bl	800cc88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cae0:	e099      	b.n	800cc16 <HAL_UART_IRQHandler+0x50e>
 800cae2:	bf00      	nop
 800cae4:	0800d193 	.word	0x0800d193
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f000 808b 	beq.w	800cc1a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800cb04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	f000 8086 	beq.w	800cc1a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	330c      	adds	r3, #12
 800cb14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb18:	e853 3f00 	ldrex	r3, [r3]
 800cb1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	330c      	adds	r3, #12
 800cb2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cb32:	647a      	str	r2, [r7, #68]	; 0x44
 800cb34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb3a:	e841 2300 	strex	r3, r2, [r1]
 800cb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d1e3      	bne.n	800cb0e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	3314      	adds	r3, #20
 800cb4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb50:	e853 3f00 	ldrex	r3, [r3]
 800cb54:	623b      	str	r3, [r7, #32]
   return(result);
 800cb56:	6a3b      	ldr	r3, [r7, #32]
 800cb58:	f023 0301 	bic.w	r3, r3, #1
 800cb5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	3314      	adds	r3, #20
 800cb66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cb6a:	633a      	str	r2, [r7, #48]	; 0x30
 800cb6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb72:	e841 2300 	strex	r3, r2, [r1]
 800cb76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d1e3      	bne.n	800cb46 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2220      	movs	r2, #32
 800cb82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	330c      	adds	r3, #12
 800cb92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	e853 3f00 	ldrex	r3, [r3]
 800cb9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f023 0310 	bic.w	r3, r3, #16
 800cba2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	330c      	adds	r3, #12
 800cbac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cbb0:	61fa      	str	r2, [r7, #28]
 800cbb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb4:	69b9      	ldr	r1, [r7, #24]
 800cbb6:	69fa      	ldr	r2, [r7, #28]
 800cbb8:	e841 2300 	strex	r3, r2, [r1]
 800cbbc:	617b      	str	r3, [r7, #20]
   return(result);
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d1e3      	bne.n	800cb8c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cbc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cbc8:	4619      	mov	r1, r3
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f85c 	bl	800cc88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cbd0:	e023      	b.n	800cc1a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cbd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d009      	beq.n	800cbf2 <HAL_UART_IRQHandler+0x4ea>
 800cbde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 fae5 	bl	800d1ba <UART_Transmit_IT>
    return;
 800cbf0:	e014      	b.n	800cc1c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cbf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00e      	beq.n	800cc1c <HAL_UART_IRQHandler+0x514>
 800cbfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d008      	beq.n	800cc1c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 fb25 	bl	800d25a <UART_EndTransmit_IT>
    return;
 800cc10:	e004      	b.n	800cc1c <HAL_UART_IRQHandler+0x514>
    return;
 800cc12:	bf00      	nop
 800cc14:	e002      	b.n	800cc1c <HAL_UART_IRQHandler+0x514>
      return;
 800cc16:	bf00      	nop
 800cc18:	e000      	b.n	800cc1c <HAL_UART_IRQHandler+0x514>
      return;
 800cc1a:	bf00      	nop
  }
}
 800cc1c:	37e8      	adds	r7, #232	; 0xe8
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop

0800cc24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cc2c:	bf00      	nop
 800cc2e:	370c      	adds	r7, #12
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b083      	sub	sp, #12
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800cc40:	bf00      	nop
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cc54:	bf00      	nop
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cc68:	bf00      	nop
 800cc6a:	370c      	adds	r7, #12
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cc7c:	bf00      	nop
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	460b      	mov	r3, r1
 800cc92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b090      	sub	sp, #64	; 0x40
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccac:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d137      	bne.n	800cd2c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ccbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ccc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	3314      	adds	r3, #20
 800ccc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cccc:	e853 3f00 	ldrex	r3, [r3]
 800ccd0:	623b      	str	r3, [r7, #32]
   return(result);
 800ccd2:	6a3b      	ldr	r3, [r7, #32]
 800ccd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccd8:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	3314      	adds	r3, #20
 800cce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cce2:	633a      	str	r2, [r7, #48]	; 0x30
 800cce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccea:	e841 2300 	strex	r3, r2, [r1]
 800ccee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ccf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1e5      	bne.n	800ccc2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ccf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	330c      	adds	r3, #12
 800ccfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	e853 3f00 	ldrex	r3, [r3]
 800cd04:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd0c:	637b      	str	r3, [r7, #52]	; 0x34
 800cd0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	330c      	adds	r3, #12
 800cd14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd16:	61fa      	str	r2, [r7, #28]
 800cd18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1a:	69b9      	ldr	r1, [r7, #24]
 800cd1c:	69fa      	ldr	r2, [r7, #28]
 800cd1e:	e841 2300 	strex	r3, r2, [r1]
 800cd22:	617b      	str	r3, [r7, #20]
   return(result);
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1e5      	bne.n	800ccf6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd2a:	e002      	b.n	800cd32 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800cd2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cd2e:	f7ff ff79 	bl	800cc24 <HAL_UART_TxCpltCallback>
}
 800cd32:	bf00      	nop
 800cd34:	3740      	adds	r7, #64	; 0x40
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b084      	sub	sp, #16
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f7ff ff75 	bl	800cc38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd4e:	bf00      	nop
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b09c      	sub	sp, #112	; 0x70
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd62:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d172      	bne.n	800ce58 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800cd72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd74:	2200      	movs	r2, #0
 800cd76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	330c      	adds	r3, #12
 800cd7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd82:	e853 3f00 	ldrex	r3, [r3]
 800cd86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cd88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd8e:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	330c      	adds	r3, #12
 800cd96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd98:	65ba      	str	r2, [r7, #88]	; 0x58
 800cd9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cda0:	e841 2300 	strex	r3, r2, [r1]
 800cda4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cda6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d1e5      	bne.n	800cd78 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	3314      	adds	r3, #20
 800cdb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb6:	e853 3f00 	ldrex	r3, [r3]
 800cdba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cdbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdbe:	f023 0301 	bic.w	r3, r3, #1
 800cdc2:	667b      	str	r3, [r7, #100]	; 0x64
 800cdc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	3314      	adds	r3, #20
 800cdca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cdcc:	647a      	str	r2, [r7, #68]	; 0x44
 800cdce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cdd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cdd4:	e841 2300 	strex	r3, r2, [r1]
 800cdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cdda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1e5      	bne.n	800cdac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cde0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	3314      	adds	r3, #20
 800cde6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdea:	e853 3f00 	ldrex	r3, [r3]
 800cdee:	623b      	str	r3, [r7, #32]
   return(result);
 800cdf0:	6a3b      	ldr	r3, [r7, #32]
 800cdf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdf6:	663b      	str	r3, [r7, #96]	; 0x60
 800cdf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	3314      	adds	r3, #20
 800cdfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ce00:	633a      	str	r2, [r7, #48]	; 0x30
 800ce02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce08:	e841 2300 	strex	r3, r2, [r1]
 800ce0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1e5      	bne.n	800cde0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce16:	2220      	movs	r2, #32
 800ce18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d119      	bne.n	800ce58 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	330c      	adds	r3, #12
 800ce2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	e853 3f00 	ldrex	r3, [r3]
 800ce32:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f023 0310 	bic.w	r3, r3, #16
 800ce3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ce3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	330c      	adds	r3, #12
 800ce42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce44:	61fa      	str	r2, [r7, #28]
 800ce46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce48:	69b9      	ldr	r1, [r7, #24]
 800ce4a:	69fa      	ldr	r2, [r7, #28]
 800ce4c:	e841 2300 	strex	r3, r2, [r1]
 800ce50:	617b      	str	r3, [r7, #20]
   return(result);
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d1e5      	bne.n	800ce24 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d106      	bne.n	800ce6e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ce64:	4619      	mov	r1, r3
 800ce66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ce68:	f7ff ff0e 	bl	800cc88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ce6c:	e002      	b.n	800ce74 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ce6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ce70:	f7ff feec 	bl	800cc4c <HAL_UART_RxCpltCallback>
}
 800ce74:	bf00      	nop
 800ce76:	3770      	adds	r7, #112	; 0x70
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce88:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d108      	bne.n	800cea4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ce96:	085b      	lsrs	r3, r3, #1
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	f7ff fef3 	bl	800cc88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cea2:	e002      	b.n	800ceaa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f7ff fedb 	bl	800cc60 <HAL_UART_RxHalfCpltCallback>
}
 800ceaa:	bf00      	nop
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b084      	sub	sp, #16
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ceba:	2300      	movs	r3, #0
 800cebc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	695b      	ldr	r3, [r3, #20]
 800ceca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cece:	2b80      	cmp	r3, #128	; 0x80
 800ced0:	bf0c      	ite	eq
 800ced2:	2301      	moveq	r3, #1
 800ced4:	2300      	movne	r3, #0
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	2b21      	cmp	r3, #33	; 0x21
 800cee4:	d108      	bne.n	800cef8 <UART_DMAError+0x46>
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d005      	beq.n	800cef8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	2200      	movs	r2, #0
 800cef0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800cef2:	68b8      	ldr	r0, [r7, #8]
 800cef4:	f000 f8c2 	bl	800d07c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf02:	2b40      	cmp	r3, #64	; 0x40
 800cf04:	bf0c      	ite	eq
 800cf06:	2301      	moveq	r3, #1
 800cf08:	2300      	movne	r3, #0
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	2b22      	cmp	r3, #34	; 0x22
 800cf18:	d108      	bne.n	800cf2c <UART_DMAError+0x7a>
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d005      	beq.n	800cf2c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	2200      	movs	r2, #0
 800cf24:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800cf26:	68b8      	ldr	r0, [r7, #8]
 800cf28:	f000 f8d0 	bl	800d0cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf30:	f043 0210 	orr.w	r2, r3, #16
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cf38:	68b8      	ldr	r0, [r7, #8]
 800cf3a:	f7ff fe9b 	bl	800cc74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf3e:	bf00      	nop
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
	...

0800cf48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b098      	sub	sp, #96	; 0x60
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	4613      	mov	r3, r2
 800cf54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800cf56:	68ba      	ldr	r2, [r7, #8]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	88fa      	ldrh	r2, [r7, #6]
 800cf60:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2200      	movs	r2, #0
 800cf66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2222      	movs	r2, #34	; 0x22
 800cf6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf74:	4a3e      	ldr	r2, [pc, #248]	; (800d070 <UART_Start_Receive_DMA+0x128>)
 800cf76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7c:	4a3d      	ldr	r2, [pc, #244]	; (800d074 <UART_Start_Receive_DMA+0x12c>)
 800cf7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf84:	4a3c      	ldr	r2, [pc, #240]	; (800d078 <UART_Start_Receive_DMA+0x130>)
 800cf86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800cf90:	f107 0308 	add.w	r3, r7, #8
 800cf94:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	88fb      	ldrh	r3, [r7, #6]
 800cfa8:	f7fa f962 	bl	8007270 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800cfac:	2300      	movs	r3, #0
 800cfae:	613b      	str	r3, [r7, #16]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	613b      	str	r3, [r7, #16]
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	613b      	str	r3, [r7, #16]
 800cfc0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	330c      	adds	r3, #12
 800cfd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfd4:	e853 3f00 	ldrex	r3, [r3]
 800cfd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cfda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfe0:	65bb      	str	r3, [r7, #88]	; 0x58
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	330c      	adds	r3, #12
 800cfe8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cfea:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cfec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cff0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cff2:	e841 2300 	strex	r3, r2, [r1]
 800cff6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1e5      	bne.n	800cfca <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	3314      	adds	r3, #20
 800d004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d008:	e853 3f00 	ldrex	r3, [r3]
 800d00c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d010:	f043 0301 	orr.w	r3, r3, #1
 800d014:	657b      	str	r3, [r7, #84]	; 0x54
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	3314      	adds	r3, #20
 800d01c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d01e:	63ba      	str	r2, [r7, #56]	; 0x38
 800d020:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d022:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d026:	e841 2300 	strex	r3, r2, [r1]
 800d02a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d1e5      	bne.n	800cffe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	3314      	adds	r3, #20
 800d038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	e853 3f00 	ldrex	r3, [r3]
 800d040:	617b      	str	r3, [r7, #20]
   return(result);
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d048:	653b      	str	r3, [r7, #80]	; 0x50
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	3314      	adds	r3, #20
 800d050:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d052:	627a      	str	r2, [r7, #36]	; 0x24
 800d054:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d056:	6a39      	ldr	r1, [r7, #32]
 800d058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d05a:	e841 2300 	strex	r3, r2, [r1]
 800d05e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1e5      	bne.n	800d032 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3760      	adds	r7, #96	; 0x60
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	0800cd57 	.word	0x0800cd57
 800d074:	0800ce7d 	.word	0x0800ce7d
 800d078:	0800ceb3 	.word	0x0800ceb3

0800d07c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b089      	sub	sp, #36	; 0x24
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	330c      	adds	r3, #12
 800d08a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	e853 3f00 	ldrex	r3, [r3]
 800d092:	60bb      	str	r3, [r7, #8]
   return(result);
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d09a:	61fb      	str	r3, [r7, #28]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	330c      	adds	r3, #12
 800d0a2:	69fa      	ldr	r2, [r7, #28]
 800d0a4:	61ba      	str	r2, [r7, #24]
 800d0a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0a8:	6979      	ldr	r1, [r7, #20]
 800d0aa:	69ba      	ldr	r2, [r7, #24]
 800d0ac:	e841 2300 	strex	r3, r2, [r1]
 800d0b0:	613b      	str	r3, [r7, #16]
   return(result);
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1e5      	bne.n	800d084 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2220      	movs	r2, #32
 800d0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800d0c0:	bf00      	nop
 800d0c2:	3724      	adds	r7, #36	; 0x24
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b095      	sub	sp, #84	; 0x54
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	330c      	adds	r3, #12
 800d0da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0de:	e853 3f00 	ldrex	r3, [r3]
 800d0e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d0ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	330c      	adds	r3, #12
 800d0f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d0f4:	643a      	str	r2, [r7, #64]	; 0x40
 800d0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d0fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0fc:	e841 2300 	strex	r3, r2, [r1]
 800d100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d104:	2b00      	cmp	r3, #0
 800d106:	d1e5      	bne.n	800d0d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	3314      	adds	r3, #20
 800d10e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	e853 3f00 	ldrex	r3, [r3]
 800d116:	61fb      	str	r3, [r7, #28]
   return(result);
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	f023 0301 	bic.w	r3, r3, #1
 800d11e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	3314      	adds	r3, #20
 800d126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d12a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d12e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d130:	e841 2300 	strex	r3, r2, [r1]
 800d134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d1e5      	bne.n	800d108 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d140:	2b01      	cmp	r3, #1
 800d142:	d119      	bne.n	800d178 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	330c      	adds	r3, #12
 800d14a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	e853 3f00 	ldrex	r3, [r3]
 800d152:	60bb      	str	r3, [r7, #8]
   return(result);
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	f023 0310 	bic.w	r3, r3, #16
 800d15a:	647b      	str	r3, [r7, #68]	; 0x44
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	330c      	adds	r3, #12
 800d162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d164:	61ba      	str	r2, [r7, #24]
 800d166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d168:	6979      	ldr	r1, [r7, #20]
 800d16a:	69ba      	ldr	r2, [r7, #24]
 800d16c:	e841 2300 	strex	r3, r2, [r1]
 800d170:	613b      	str	r3, [r7, #16]
   return(result);
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d1e5      	bne.n	800d144 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2220      	movs	r2, #32
 800d17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d186:	bf00      	nop
 800d188:	3754      	adds	r7, #84	; 0x54
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr

0800d192 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d192:	b580      	push	{r7, lr}
 800d194:	b084      	sub	sp, #16
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d1ac:	68f8      	ldr	r0, [r7, #12]
 800d1ae:	f7ff fd61 	bl	800cc74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1b2:	bf00      	nop
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b085      	sub	sp, #20
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	2b21      	cmp	r3, #33	; 0x21
 800d1cc:	d13e      	bne.n	800d24c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1d6:	d114      	bne.n	800d202 <UART_Transmit_IT+0x48>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d110      	bne.n	800d202 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a1b      	ldr	r3, [r3, #32]
 800d1e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	881b      	ldrh	r3, [r3, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6a1b      	ldr	r3, [r3, #32]
 800d1fa:	1c9a      	adds	r2, r3, #2
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	621a      	str	r2, [r3, #32]
 800d200:	e008      	b.n	800d214 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6a1b      	ldr	r3, [r3, #32]
 800d206:	1c59      	adds	r1, r3, #1
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	6211      	str	r1, [r2, #32]
 800d20c:	781a      	ldrb	r2, [r3, #0]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d218:	b29b      	uxth	r3, r3
 800d21a:	3b01      	subs	r3, #1
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	4619      	mov	r1, r3
 800d222:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10f      	bne.n	800d248 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	68da      	ldr	r2, [r3, #12]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d236:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	68da      	ldr	r2, [r3, #12]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d246:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d248:	2300      	movs	r3, #0
 800d24a:	e000      	b.n	800d24e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d24c:	2302      	movs	r3, #2
  }
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3714      	adds	r7, #20
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr

0800d25a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b082      	sub	sp, #8
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	68da      	ldr	r2, [r3, #12]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d270:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2220      	movs	r2, #32
 800d276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f7ff fcd2 	bl	800cc24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}

0800d28a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b08c      	sub	sp, #48	; 0x30
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	2b22      	cmp	r3, #34	; 0x22
 800d29c:	f040 80ab 	bne.w	800d3f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2a8:	d117      	bne.n	800d2da <UART_Receive_IT+0x50>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d113      	bne.n	800d2da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2d2:	1c9a      	adds	r2, r3, #2
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	629a      	str	r2, [r3, #40]	; 0x28
 800d2d8:	e026      	b.n	800d328 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2ec:	d007      	beq.n	800d2fe <UART_Receive_IT+0x74>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d10a      	bne.n	800d30c <UART_Receive_IT+0x82>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	691b      	ldr	r3, [r3, #16]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d106      	bne.n	800d30c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	b2da      	uxtb	r2, r3
 800d306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d308:	701a      	strb	r2, [r3, #0]
 800d30a:	e008      	b.n	800d31e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	b2db      	uxtb	r3, r3
 800d314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d322:	1c5a      	adds	r2, r3, #1
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	3b01      	subs	r3, #1
 800d330:	b29b      	uxth	r3, r3
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	4619      	mov	r1, r3
 800d336:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d15a      	bne.n	800d3f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	68da      	ldr	r2, [r3, #12]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f022 0220 	bic.w	r2, r2, #32
 800d34a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	68da      	ldr	r2, [r3, #12]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d35a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	695a      	ldr	r2, [r3, #20]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f022 0201 	bic.w	r2, r2, #1
 800d36a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2220      	movs	r2, #32
 800d370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d135      	bne.n	800d3e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	330c      	adds	r3, #12
 800d388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	e853 3f00 	ldrex	r3, [r3]
 800d390:	613b      	str	r3, [r7, #16]
   return(result);
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	f023 0310 	bic.w	r3, r3, #16
 800d398:	627b      	str	r3, [r7, #36]	; 0x24
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	330c      	adds	r3, #12
 800d3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3a2:	623a      	str	r2, [r7, #32]
 800d3a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a6:	69f9      	ldr	r1, [r7, #28]
 800d3a8:	6a3a      	ldr	r2, [r7, #32]
 800d3aa:	e841 2300 	strex	r3, r2, [r1]
 800d3ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1e5      	bne.n	800d382 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f003 0310 	and.w	r3, r3, #16
 800d3c0:	2b10      	cmp	r3, #16
 800d3c2:	d10a      	bne.n	800d3da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	60fb      	str	r3, [r7, #12]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	60fb      	str	r3, [r7, #12]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	60fb      	str	r3, [r7, #12]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d3de:	4619      	mov	r1, r3
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f7ff fc51 	bl	800cc88 <HAL_UARTEx_RxEventCallback>
 800d3e6:	e002      	b.n	800d3ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f7ff fc2f 	bl	800cc4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	e002      	b.n	800d3f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	e000      	b.n	800d3f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d3f6:	2302      	movs	r3, #2
  }
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3730      	adds	r7, #48	; 0x30
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d404:	b09f      	sub	sp, #124	; 0x7c
 800d406:	af00      	add	r7, sp, #0
 800d408:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d40a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d416:	68d9      	ldr	r1, [r3, #12]
 800d418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	ea40 0301 	orr.w	r3, r0, r1
 800d420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d424:	689a      	ldr	r2, [r3, #8]
 800d426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d428:	691b      	ldr	r3, [r3, #16]
 800d42a:	431a      	orrs	r2, r3
 800d42c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d42e:	695b      	ldr	r3, [r3, #20]
 800d430:	431a      	orrs	r2, r3
 800d432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d434:	69db      	ldr	r3, [r3, #28]
 800d436:	4313      	orrs	r3, r2
 800d438:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800d43a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d444:	f021 010c 	bic.w	r1, r1, #12
 800d448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d44e:	430b      	orrs	r3, r1
 800d450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	695b      	ldr	r3, [r3, #20]
 800d458:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d45c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d45e:	6999      	ldr	r1, [r3, #24]
 800d460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	ea40 0301 	orr.w	r3, r0, r1
 800d468:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d46a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	4bc5      	ldr	r3, [pc, #788]	; (800d784 <UART_SetConfig+0x384>)
 800d470:	429a      	cmp	r2, r3
 800d472:	d004      	beq.n	800d47e <UART_SetConfig+0x7e>
 800d474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	4bc3      	ldr	r3, [pc, #780]	; (800d788 <UART_SetConfig+0x388>)
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d103      	bne.n	800d486 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d47e:	f7fe f979 	bl	800b774 <HAL_RCC_GetPCLK2Freq>
 800d482:	6778      	str	r0, [r7, #116]	; 0x74
 800d484:	e002      	b.n	800d48c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d486:	f7fe f961 	bl	800b74c <HAL_RCC_GetPCLK1Freq>
 800d48a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d48c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d48e:	69db      	ldr	r3, [r3, #28]
 800d490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d494:	f040 80b6 	bne.w	800d604 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d49a:	461c      	mov	r4, r3
 800d49c:	f04f 0500 	mov.w	r5, #0
 800d4a0:	4622      	mov	r2, r4
 800d4a2:	462b      	mov	r3, r5
 800d4a4:	1891      	adds	r1, r2, r2
 800d4a6:	6439      	str	r1, [r7, #64]	; 0x40
 800d4a8:	415b      	adcs	r3, r3
 800d4aa:	647b      	str	r3, [r7, #68]	; 0x44
 800d4ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d4b0:	1912      	adds	r2, r2, r4
 800d4b2:	eb45 0303 	adc.w	r3, r5, r3
 800d4b6:	f04f 0000 	mov.w	r0, #0
 800d4ba:	f04f 0100 	mov.w	r1, #0
 800d4be:	00d9      	lsls	r1, r3, #3
 800d4c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d4c4:	00d0      	lsls	r0, r2, #3
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	1911      	adds	r1, r2, r4
 800d4cc:	6639      	str	r1, [r7, #96]	; 0x60
 800d4ce:	416b      	adcs	r3, r5
 800d4d0:	667b      	str	r3, [r7, #100]	; 0x64
 800d4d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	f04f 0300 	mov.w	r3, #0
 800d4dc:	1891      	adds	r1, r2, r2
 800d4de:	63b9      	str	r1, [r7, #56]	; 0x38
 800d4e0:	415b      	adcs	r3, r3
 800d4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d4e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d4ec:	f7f3 fbe4 	bl	8000cb8 <__aeabi_uldivmod>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	4ba5      	ldr	r3, [pc, #660]	; (800d78c <UART_SetConfig+0x38c>)
 800d4f6:	fba3 2302 	umull	r2, r3, r3, r2
 800d4fa:	095b      	lsrs	r3, r3, #5
 800d4fc:	011e      	lsls	r6, r3, #4
 800d4fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d500:	461c      	mov	r4, r3
 800d502:	f04f 0500 	mov.w	r5, #0
 800d506:	4622      	mov	r2, r4
 800d508:	462b      	mov	r3, r5
 800d50a:	1891      	adds	r1, r2, r2
 800d50c:	6339      	str	r1, [r7, #48]	; 0x30
 800d50e:	415b      	adcs	r3, r3
 800d510:	637b      	str	r3, [r7, #52]	; 0x34
 800d512:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d516:	1912      	adds	r2, r2, r4
 800d518:	eb45 0303 	adc.w	r3, r5, r3
 800d51c:	f04f 0000 	mov.w	r0, #0
 800d520:	f04f 0100 	mov.w	r1, #0
 800d524:	00d9      	lsls	r1, r3, #3
 800d526:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d52a:	00d0      	lsls	r0, r2, #3
 800d52c:	4602      	mov	r2, r0
 800d52e:	460b      	mov	r3, r1
 800d530:	1911      	adds	r1, r2, r4
 800d532:	65b9      	str	r1, [r7, #88]	; 0x58
 800d534:	416b      	adcs	r3, r5
 800d536:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	461a      	mov	r2, r3
 800d53e:	f04f 0300 	mov.w	r3, #0
 800d542:	1891      	adds	r1, r2, r2
 800d544:	62b9      	str	r1, [r7, #40]	; 0x28
 800d546:	415b      	adcs	r3, r3
 800d548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d54a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d54e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d552:	f7f3 fbb1 	bl	8000cb8 <__aeabi_uldivmod>
 800d556:	4602      	mov	r2, r0
 800d558:	460b      	mov	r3, r1
 800d55a:	4b8c      	ldr	r3, [pc, #560]	; (800d78c <UART_SetConfig+0x38c>)
 800d55c:	fba3 1302 	umull	r1, r3, r3, r2
 800d560:	095b      	lsrs	r3, r3, #5
 800d562:	2164      	movs	r1, #100	; 0x64
 800d564:	fb01 f303 	mul.w	r3, r1, r3
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	00db      	lsls	r3, r3, #3
 800d56c:	3332      	adds	r3, #50	; 0x32
 800d56e:	4a87      	ldr	r2, [pc, #540]	; (800d78c <UART_SetConfig+0x38c>)
 800d570:	fba2 2303 	umull	r2, r3, r2, r3
 800d574:	095b      	lsrs	r3, r3, #5
 800d576:	005b      	lsls	r3, r3, #1
 800d578:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d57c:	441e      	add	r6, r3
 800d57e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d580:	4618      	mov	r0, r3
 800d582:	f04f 0100 	mov.w	r1, #0
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	1894      	adds	r4, r2, r2
 800d58c:	623c      	str	r4, [r7, #32]
 800d58e:	415b      	adcs	r3, r3
 800d590:	627b      	str	r3, [r7, #36]	; 0x24
 800d592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d596:	1812      	adds	r2, r2, r0
 800d598:	eb41 0303 	adc.w	r3, r1, r3
 800d59c:	f04f 0400 	mov.w	r4, #0
 800d5a0:	f04f 0500 	mov.w	r5, #0
 800d5a4:	00dd      	lsls	r5, r3, #3
 800d5a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d5aa:	00d4      	lsls	r4, r2, #3
 800d5ac:	4622      	mov	r2, r4
 800d5ae:	462b      	mov	r3, r5
 800d5b0:	1814      	adds	r4, r2, r0
 800d5b2:	653c      	str	r4, [r7, #80]	; 0x50
 800d5b4:	414b      	adcs	r3, r1
 800d5b6:	657b      	str	r3, [r7, #84]	; 0x54
 800d5b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	461a      	mov	r2, r3
 800d5be:	f04f 0300 	mov.w	r3, #0
 800d5c2:	1891      	adds	r1, r2, r2
 800d5c4:	61b9      	str	r1, [r7, #24]
 800d5c6:	415b      	adcs	r3, r3
 800d5c8:	61fb      	str	r3, [r7, #28]
 800d5ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d5ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d5d2:	f7f3 fb71 	bl	8000cb8 <__aeabi_uldivmod>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	460b      	mov	r3, r1
 800d5da:	4b6c      	ldr	r3, [pc, #432]	; (800d78c <UART_SetConfig+0x38c>)
 800d5dc:	fba3 1302 	umull	r1, r3, r3, r2
 800d5e0:	095b      	lsrs	r3, r3, #5
 800d5e2:	2164      	movs	r1, #100	; 0x64
 800d5e4:	fb01 f303 	mul.w	r3, r1, r3
 800d5e8:	1ad3      	subs	r3, r2, r3
 800d5ea:	00db      	lsls	r3, r3, #3
 800d5ec:	3332      	adds	r3, #50	; 0x32
 800d5ee:	4a67      	ldr	r2, [pc, #412]	; (800d78c <UART_SetConfig+0x38c>)
 800d5f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d5f4:	095b      	lsrs	r3, r3, #5
 800d5f6:	f003 0207 	and.w	r2, r3, #7
 800d5fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4432      	add	r2, r6
 800d600:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d602:	e0b9      	b.n	800d778 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d606:	461c      	mov	r4, r3
 800d608:	f04f 0500 	mov.w	r5, #0
 800d60c:	4622      	mov	r2, r4
 800d60e:	462b      	mov	r3, r5
 800d610:	1891      	adds	r1, r2, r2
 800d612:	6139      	str	r1, [r7, #16]
 800d614:	415b      	adcs	r3, r3
 800d616:	617b      	str	r3, [r7, #20]
 800d618:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d61c:	1912      	adds	r2, r2, r4
 800d61e:	eb45 0303 	adc.w	r3, r5, r3
 800d622:	f04f 0000 	mov.w	r0, #0
 800d626:	f04f 0100 	mov.w	r1, #0
 800d62a:	00d9      	lsls	r1, r3, #3
 800d62c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d630:	00d0      	lsls	r0, r2, #3
 800d632:	4602      	mov	r2, r0
 800d634:	460b      	mov	r3, r1
 800d636:	eb12 0804 	adds.w	r8, r2, r4
 800d63a:	eb43 0905 	adc.w	r9, r3, r5
 800d63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	4618      	mov	r0, r3
 800d644:	f04f 0100 	mov.w	r1, #0
 800d648:	f04f 0200 	mov.w	r2, #0
 800d64c:	f04f 0300 	mov.w	r3, #0
 800d650:	008b      	lsls	r3, r1, #2
 800d652:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d656:	0082      	lsls	r2, r0, #2
 800d658:	4640      	mov	r0, r8
 800d65a:	4649      	mov	r1, r9
 800d65c:	f7f3 fb2c 	bl	8000cb8 <__aeabi_uldivmod>
 800d660:	4602      	mov	r2, r0
 800d662:	460b      	mov	r3, r1
 800d664:	4b49      	ldr	r3, [pc, #292]	; (800d78c <UART_SetConfig+0x38c>)
 800d666:	fba3 2302 	umull	r2, r3, r3, r2
 800d66a:	095b      	lsrs	r3, r3, #5
 800d66c:	011e      	lsls	r6, r3, #4
 800d66e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d670:	4618      	mov	r0, r3
 800d672:	f04f 0100 	mov.w	r1, #0
 800d676:	4602      	mov	r2, r0
 800d678:	460b      	mov	r3, r1
 800d67a:	1894      	adds	r4, r2, r2
 800d67c:	60bc      	str	r4, [r7, #8]
 800d67e:	415b      	adcs	r3, r3
 800d680:	60fb      	str	r3, [r7, #12]
 800d682:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d686:	1812      	adds	r2, r2, r0
 800d688:	eb41 0303 	adc.w	r3, r1, r3
 800d68c:	f04f 0400 	mov.w	r4, #0
 800d690:	f04f 0500 	mov.w	r5, #0
 800d694:	00dd      	lsls	r5, r3, #3
 800d696:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d69a:	00d4      	lsls	r4, r2, #3
 800d69c:	4622      	mov	r2, r4
 800d69e:	462b      	mov	r3, r5
 800d6a0:	1814      	adds	r4, r2, r0
 800d6a2:	64bc      	str	r4, [r7, #72]	; 0x48
 800d6a4:	414b      	adcs	r3, r1
 800d6a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d6a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f04f 0100 	mov.w	r1, #0
 800d6b2:	f04f 0200 	mov.w	r2, #0
 800d6b6:	f04f 0300 	mov.w	r3, #0
 800d6ba:	008b      	lsls	r3, r1, #2
 800d6bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d6c0:	0082      	lsls	r2, r0, #2
 800d6c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d6c6:	f7f3 faf7 	bl	8000cb8 <__aeabi_uldivmod>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	4b2f      	ldr	r3, [pc, #188]	; (800d78c <UART_SetConfig+0x38c>)
 800d6d0:	fba3 1302 	umull	r1, r3, r3, r2
 800d6d4:	095b      	lsrs	r3, r3, #5
 800d6d6:	2164      	movs	r1, #100	; 0x64
 800d6d8:	fb01 f303 	mul.w	r3, r1, r3
 800d6dc:	1ad3      	subs	r3, r2, r3
 800d6de:	011b      	lsls	r3, r3, #4
 800d6e0:	3332      	adds	r3, #50	; 0x32
 800d6e2:	4a2a      	ldr	r2, [pc, #168]	; (800d78c <UART_SetConfig+0x38c>)
 800d6e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d6e8:	095b      	lsrs	r3, r3, #5
 800d6ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6ee:	441e      	add	r6, r3
 800d6f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f04f 0100 	mov.w	r1, #0
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	1894      	adds	r4, r2, r2
 800d6fe:	603c      	str	r4, [r7, #0]
 800d700:	415b      	adcs	r3, r3
 800d702:	607b      	str	r3, [r7, #4]
 800d704:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d708:	1812      	adds	r2, r2, r0
 800d70a:	eb41 0303 	adc.w	r3, r1, r3
 800d70e:	f04f 0400 	mov.w	r4, #0
 800d712:	f04f 0500 	mov.w	r5, #0
 800d716:	00dd      	lsls	r5, r3, #3
 800d718:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d71c:	00d4      	lsls	r4, r2, #3
 800d71e:	4622      	mov	r2, r4
 800d720:	462b      	mov	r3, r5
 800d722:	eb12 0a00 	adds.w	sl, r2, r0
 800d726:	eb43 0b01 	adc.w	fp, r3, r1
 800d72a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	4618      	mov	r0, r3
 800d730:	f04f 0100 	mov.w	r1, #0
 800d734:	f04f 0200 	mov.w	r2, #0
 800d738:	f04f 0300 	mov.w	r3, #0
 800d73c:	008b      	lsls	r3, r1, #2
 800d73e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d742:	0082      	lsls	r2, r0, #2
 800d744:	4650      	mov	r0, sl
 800d746:	4659      	mov	r1, fp
 800d748:	f7f3 fab6 	bl	8000cb8 <__aeabi_uldivmod>
 800d74c:	4602      	mov	r2, r0
 800d74e:	460b      	mov	r3, r1
 800d750:	4b0e      	ldr	r3, [pc, #56]	; (800d78c <UART_SetConfig+0x38c>)
 800d752:	fba3 1302 	umull	r1, r3, r3, r2
 800d756:	095b      	lsrs	r3, r3, #5
 800d758:	2164      	movs	r1, #100	; 0x64
 800d75a:	fb01 f303 	mul.w	r3, r1, r3
 800d75e:	1ad3      	subs	r3, r2, r3
 800d760:	011b      	lsls	r3, r3, #4
 800d762:	3332      	adds	r3, #50	; 0x32
 800d764:	4a09      	ldr	r2, [pc, #36]	; (800d78c <UART_SetConfig+0x38c>)
 800d766:	fba2 2303 	umull	r2, r3, r2, r3
 800d76a:	095b      	lsrs	r3, r3, #5
 800d76c:	f003 020f 	and.w	r2, r3, #15
 800d770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4432      	add	r2, r6
 800d776:	609a      	str	r2, [r3, #8]
}
 800d778:	bf00      	nop
 800d77a:	377c      	adds	r7, #124	; 0x7c
 800d77c:	46bd      	mov	sp, r7
 800d77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d782:	bf00      	nop
 800d784:	40011000 	.word	0x40011000
 800d788:	40011400 	.word	0x40011400
 800d78c:	51eb851f 	.word	0x51eb851f

0800d790 <atof>:
 800d790:	2100      	movs	r1, #0
 800d792:	f001 bd05 	b.w	800f1a0 <strtod>

0800d796 <atoi>:
 800d796:	220a      	movs	r2, #10
 800d798:	2100      	movs	r1, #0
 800d79a:	f001 bdef 	b.w	800f37c <strtol>
	...

0800d7a0 <__errno>:
 800d7a0:	4b01      	ldr	r3, [pc, #4]	; (800d7a8 <__errno+0x8>)
 800d7a2:	6818      	ldr	r0, [r3, #0]
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	20000040 	.word	0x20000040

0800d7ac <__libc_init_array>:
 800d7ac:	b570      	push	{r4, r5, r6, lr}
 800d7ae:	4d0d      	ldr	r5, [pc, #52]	; (800d7e4 <__libc_init_array+0x38>)
 800d7b0:	4c0d      	ldr	r4, [pc, #52]	; (800d7e8 <__libc_init_array+0x3c>)
 800d7b2:	1b64      	subs	r4, r4, r5
 800d7b4:	10a4      	asrs	r4, r4, #2
 800d7b6:	2600      	movs	r6, #0
 800d7b8:	42a6      	cmp	r6, r4
 800d7ba:	d109      	bne.n	800d7d0 <__libc_init_array+0x24>
 800d7bc:	4d0b      	ldr	r5, [pc, #44]	; (800d7ec <__libc_init_array+0x40>)
 800d7be:	4c0c      	ldr	r4, [pc, #48]	; (800d7f0 <__libc_init_array+0x44>)
 800d7c0:	f004 fcb8 	bl	8012134 <_init>
 800d7c4:	1b64      	subs	r4, r4, r5
 800d7c6:	10a4      	asrs	r4, r4, #2
 800d7c8:	2600      	movs	r6, #0
 800d7ca:	42a6      	cmp	r6, r4
 800d7cc:	d105      	bne.n	800d7da <__libc_init_array+0x2e>
 800d7ce:	bd70      	pop	{r4, r5, r6, pc}
 800d7d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7d4:	4798      	blx	r3
 800d7d6:	3601      	adds	r6, #1
 800d7d8:	e7ee      	b.n	800d7b8 <__libc_init_array+0xc>
 800d7da:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7de:	4798      	blx	r3
 800d7e0:	3601      	adds	r6, #1
 800d7e2:	e7f2      	b.n	800d7ca <__libc_init_array+0x1e>
 800d7e4:	08025de8 	.word	0x08025de8
 800d7e8:	08025de8 	.word	0x08025de8
 800d7ec:	08025de8 	.word	0x08025de8
 800d7f0:	08025dec 	.word	0x08025dec

0800d7f4 <memset>:
 800d7f4:	4402      	add	r2, r0
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d100      	bne.n	800d7fe <memset+0xa>
 800d7fc:	4770      	bx	lr
 800d7fe:	f803 1b01 	strb.w	r1, [r3], #1
 800d802:	e7f9      	b.n	800d7f8 <memset+0x4>

0800d804 <__cvt>:
 800d804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d808:	ec55 4b10 	vmov	r4, r5, d0
 800d80c:	2d00      	cmp	r5, #0
 800d80e:	460e      	mov	r6, r1
 800d810:	4619      	mov	r1, r3
 800d812:	462b      	mov	r3, r5
 800d814:	bfbb      	ittet	lt
 800d816:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d81a:	461d      	movlt	r5, r3
 800d81c:	2300      	movge	r3, #0
 800d81e:	232d      	movlt	r3, #45	; 0x2d
 800d820:	700b      	strb	r3, [r1, #0]
 800d822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d824:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d828:	4691      	mov	r9, r2
 800d82a:	f023 0820 	bic.w	r8, r3, #32
 800d82e:	bfbc      	itt	lt
 800d830:	4622      	movlt	r2, r4
 800d832:	4614      	movlt	r4, r2
 800d834:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d838:	d005      	beq.n	800d846 <__cvt+0x42>
 800d83a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d83e:	d100      	bne.n	800d842 <__cvt+0x3e>
 800d840:	3601      	adds	r6, #1
 800d842:	2102      	movs	r1, #2
 800d844:	e000      	b.n	800d848 <__cvt+0x44>
 800d846:	2103      	movs	r1, #3
 800d848:	ab03      	add	r3, sp, #12
 800d84a:	9301      	str	r3, [sp, #4]
 800d84c:	ab02      	add	r3, sp, #8
 800d84e:	9300      	str	r3, [sp, #0]
 800d850:	ec45 4b10 	vmov	d0, r4, r5
 800d854:	4653      	mov	r3, sl
 800d856:	4632      	mov	r2, r6
 800d858:	f001 fe46 	bl	800f4e8 <_dtoa_r>
 800d85c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d860:	4607      	mov	r7, r0
 800d862:	d102      	bne.n	800d86a <__cvt+0x66>
 800d864:	f019 0f01 	tst.w	r9, #1
 800d868:	d022      	beq.n	800d8b0 <__cvt+0xac>
 800d86a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d86e:	eb07 0906 	add.w	r9, r7, r6
 800d872:	d110      	bne.n	800d896 <__cvt+0x92>
 800d874:	783b      	ldrb	r3, [r7, #0]
 800d876:	2b30      	cmp	r3, #48	; 0x30
 800d878:	d10a      	bne.n	800d890 <__cvt+0x8c>
 800d87a:	2200      	movs	r2, #0
 800d87c:	2300      	movs	r3, #0
 800d87e:	4620      	mov	r0, r4
 800d880:	4629      	mov	r1, r5
 800d882:	f7f3 f939 	bl	8000af8 <__aeabi_dcmpeq>
 800d886:	b918      	cbnz	r0, 800d890 <__cvt+0x8c>
 800d888:	f1c6 0601 	rsb	r6, r6, #1
 800d88c:	f8ca 6000 	str.w	r6, [sl]
 800d890:	f8da 3000 	ldr.w	r3, [sl]
 800d894:	4499      	add	r9, r3
 800d896:	2200      	movs	r2, #0
 800d898:	2300      	movs	r3, #0
 800d89a:	4620      	mov	r0, r4
 800d89c:	4629      	mov	r1, r5
 800d89e:	f7f3 f92b 	bl	8000af8 <__aeabi_dcmpeq>
 800d8a2:	b108      	cbz	r0, 800d8a8 <__cvt+0xa4>
 800d8a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d8a8:	2230      	movs	r2, #48	; 0x30
 800d8aa:	9b03      	ldr	r3, [sp, #12]
 800d8ac:	454b      	cmp	r3, r9
 800d8ae:	d307      	bcc.n	800d8c0 <__cvt+0xbc>
 800d8b0:	9b03      	ldr	r3, [sp, #12]
 800d8b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8b4:	1bdb      	subs	r3, r3, r7
 800d8b6:	4638      	mov	r0, r7
 800d8b8:	6013      	str	r3, [r2, #0]
 800d8ba:	b004      	add	sp, #16
 800d8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c0:	1c59      	adds	r1, r3, #1
 800d8c2:	9103      	str	r1, [sp, #12]
 800d8c4:	701a      	strb	r2, [r3, #0]
 800d8c6:	e7f0      	b.n	800d8aa <__cvt+0xa6>

0800d8c8 <__exponent>:
 800d8c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2900      	cmp	r1, #0
 800d8ce:	bfb8      	it	lt
 800d8d0:	4249      	neglt	r1, r1
 800d8d2:	f803 2b02 	strb.w	r2, [r3], #2
 800d8d6:	bfb4      	ite	lt
 800d8d8:	222d      	movlt	r2, #45	; 0x2d
 800d8da:	222b      	movge	r2, #43	; 0x2b
 800d8dc:	2909      	cmp	r1, #9
 800d8de:	7042      	strb	r2, [r0, #1]
 800d8e0:	dd2a      	ble.n	800d938 <__exponent+0x70>
 800d8e2:	f10d 0407 	add.w	r4, sp, #7
 800d8e6:	46a4      	mov	ip, r4
 800d8e8:	270a      	movs	r7, #10
 800d8ea:	46a6      	mov	lr, r4
 800d8ec:	460a      	mov	r2, r1
 800d8ee:	fb91 f6f7 	sdiv	r6, r1, r7
 800d8f2:	fb07 1516 	mls	r5, r7, r6, r1
 800d8f6:	3530      	adds	r5, #48	; 0x30
 800d8f8:	2a63      	cmp	r2, #99	; 0x63
 800d8fa:	f104 34ff 	add.w	r4, r4, #4294967295
 800d8fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d902:	4631      	mov	r1, r6
 800d904:	dcf1      	bgt.n	800d8ea <__exponent+0x22>
 800d906:	3130      	adds	r1, #48	; 0x30
 800d908:	f1ae 0502 	sub.w	r5, lr, #2
 800d90c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d910:	1c44      	adds	r4, r0, #1
 800d912:	4629      	mov	r1, r5
 800d914:	4561      	cmp	r1, ip
 800d916:	d30a      	bcc.n	800d92e <__exponent+0x66>
 800d918:	f10d 0209 	add.w	r2, sp, #9
 800d91c:	eba2 020e 	sub.w	r2, r2, lr
 800d920:	4565      	cmp	r5, ip
 800d922:	bf88      	it	hi
 800d924:	2200      	movhi	r2, #0
 800d926:	4413      	add	r3, r2
 800d928:	1a18      	subs	r0, r3, r0
 800d92a:	b003      	add	sp, #12
 800d92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d92e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d932:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d936:	e7ed      	b.n	800d914 <__exponent+0x4c>
 800d938:	2330      	movs	r3, #48	; 0x30
 800d93a:	3130      	adds	r1, #48	; 0x30
 800d93c:	7083      	strb	r3, [r0, #2]
 800d93e:	70c1      	strb	r1, [r0, #3]
 800d940:	1d03      	adds	r3, r0, #4
 800d942:	e7f1      	b.n	800d928 <__exponent+0x60>

0800d944 <_printf_float>:
 800d944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d948:	ed2d 8b02 	vpush	{d8}
 800d94c:	b08d      	sub	sp, #52	; 0x34
 800d94e:	460c      	mov	r4, r1
 800d950:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d954:	4616      	mov	r6, r2
 800d956:	461f      	mov	r7, r3
 800d958:	4605      	mov	r5, r0
 800d95a:	f002 ff33 	bl	80107c4 <_localeconv_r>
 800d95e:	f8d0 a000 	ldr.w	sl, [r0]
 800d962:	4650      	mov	r0, sl
 800d964:	f7f2 fc46 	bl	80001f4 <strlen>
 800d968:	2300      	movs	r3, #0
 800d96a:	930a      	str	r3, [sp, #40]	; 0x28
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	9305      	str	r3, [sp, #20]
 800d970:	f8d8 3000 	ldr.w	r3, [r8]
 800d974:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d978:	3307      	adds	r3, #7
 800d97a:	f023 0307 	bic.w	r3, r3, #7
 800d97e:	f103 0208 	add.w	r2, r3, #8
 800d982:	f8c8 2000 	str.w	r2, [r8]
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d98e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d992:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d996:	9307      	str	r3, [sp, #28]
 800d998:	f8cd 8018 	str.w	r8, [sp, #24]
 800d99c:	ee08 0a10 	vmov	s16, r0
 800d9a0:	4b9f      	ldr	r3, [pc, #636]	; (800dc20 <_printf_float+0x2dc>)
 800d9a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d9aa:	f7f3 f8d7 	bl	8000b5c <__aeabi_dcmpun>
 800d9ae:	bb88      	cbnz	r0, 800da14 <_printf_float+0xd0>
 800d9b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9b4:	4b9a      	ldr	r3, [pc, #616]	; (800dc20 <_printf_float+0x2dc>)
 800d9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ba:	f7f3 f8b1 	bl	8000b20 <__aeabi_dcmple>
 800d9be:	bb48      	cbnz	r0, 800da14 <_printf_float+0xd0>
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	4640      	mov	r0, r8
 800d9c6:	4649      	mov	r1, r9
 800d9c8:	f7f3 f8a0 	bl	8000b0c <__aeabi_dcmplt>
 800d9cc:	b110      	cbz	r0, 800d9d4 <_printf_float+0x90>
 800d9ce:	232d      	movs	r3, #45	; 0x2d
 800d9d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9d4:	4b93      	ldr	r3, [pc, #588]	; (800dc24 <_printf_float+0x2e0>)
 800d9d6:	4894      	ldr	r0, [pc, #592]	; (800dc28 <_printf_float+0x2e4>)
 800d9d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d9dc:	bf94      	ite	ls
 800d9de:	4698      	movls	r8, r3
 800d9e0:	4680      	movhi	r8, r0
 800d9e2:	2303      	movs	r3, #3
 800d9e4:	6123      	str	r3, [r4, #16]
 800d9e6:	9b05      	ldr	r3, [sp, #20]
 800d9e8:	f023 0204 	bic.w	r2, r3, #4
 800d9ec:	6022      	str	r2, [r4, #0]
 800d9ee:	f04f 0900 	mov.w	r9, #0
 800d9f2:	9700      	str	r7, [sp, #0]
 800d9f4:	4633      	mov	r3, r6
 800d9f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	f000 f9d8 	bl	800ddb0 <_printf_common>
 800da00:	3001      	adds	r0, #1
 800da02:	f040 8090 	bne.w	800db26 <_printf_float+0x1e2>
 800da06:	f04f 30ff 	mov.w	r0, #4294967295
 800da0a:	b00d      	add	sp, #52	; 0x34
 800da0c:	ecbd 8b02 	vpop	{d8}
 800da10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da14:	4642      	mov	r2, r8
 800da16:	464b      	mov	r3, r9
 800da18:	4640      	mov	r0, r8
 800da1a:	4649      	mov	r1, r9
 800da1c:	f7f3 f89e 	bl	8000b5c <__aeabi_dcmpun>
 800da20:	b140      	cbz	r0, 800da34 <_printf_float+0xf0>
 800da22:	464b      	mov	r3, r9
 800da24:	2b00      	cmp	r3, #0
 800da26:	bfbc      	itt	lt
 800da28:	232d      	movlt	r3, #45	; 0x2d
 800da2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800da2e:	487f      	ldr	r0, [pc, #508]	; (800dc2c <_printf_float+0x2e8>)
 800da30:	4b7f      	ldr	r3, [pc, #508]	; (800dc30 <_printf_float+0x2ec>)
 800da32:	e7d1      	b.n	800d9d8 <_printf_float+0x94>
 800da34:	6863      	ldr	r3, [r4, #4]
 800da36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800da3a:	9206      	str	r2, [sp, #24]
 800da3c:	1c5a      	adds	r2, r3, #1
 800da3e:	d13f      	bne.n	800dac0 <_printf_float+0x17c>
 800da40:	2306      	movs	r3, #6
 800da42:	6063      	str	r3, [r4, #4]
 800da44:	9b05      	ldr	r3, [sp, #20]
 800da46:	6861      	ldr	r1, [r4, #4]
 800da48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800da4c:	2300      	movs	r3, #0
 800da4e:	9303      	str	r3, [sp, #12]
 800da50:	ab0a      	add	r3, sp, #40	; 0x28
 800da52:	e9cd b301 	strd	fp, r3, [sp, #4]
 800da56:	ab09      	add	r3, sp, #36	; 0x24
 800da58:	ec49 8b10 	vmov	d0, r8, r9
 800da5c:	9300      	str	r3, [sp, #0]
 800da5e:	6022      	str	r2, [r4, #0]
 800da60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800da64:	4628      	mov	r0, r5
 800da66:	f7ff fecd 	bl	800d804 <__cvt>
 800da6a:	9b06      	ldr	r3, [sp, #24]
 800da6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da6e:	2b47      	cmp	r3, #71	; 0x47
 800da70:	4680      	mov	r8, r0
 800da72:	d108      	bne.n	800da86 <_printf_float+0x142>
 800da74:	1cc8      	adds	r0, r1, #3
 800da76:	db02      	blt.n	800da7e <_printf_float+0x13a>
 800da78:	6863      	ldr	r3, [r4, #4]
 800da7a:	4299      	cmp	r1, r3
 800da7c:	dd41      	ble.n	800db02 <_printf_float+0x1be>
 800da7e:	f1ab 0b02 	sub.w	fp, fp, #2
 800da82:	fa5f fb8b 	uxtb.w	fp, fp
 800da86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800da8a:	d820      	bhi.n	800dace <_printf_float+0x18a>
 800da8c:	3901      	subs	r1, #1
 800da8e:	465a      	mov	r2, fp
 800da90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800da94:	9109      	str	r1, [sp, #36]	; 0x24
 800da96:	f7ff ff17 	bl	800d8c8 <__exponent>
 800da9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da9c:	1813      	adds	r3, r2, r0
 800da9e:	2a01      	cmp	r2, #1
 800daa0:	4681      	mov	r9, r0
 800daa2:	6123      	str	r3, [r4, #16]
 800daa4:	dc02      	bgt.n	800daac <_printf_float+0x168>
 800daa6:	6822      	ldr	r2, [r4, #0]
 800daa8:	07d2      	lsls	r2, r2, #31
 800daaa:	d501      	bpl.n	800dab0 <_printf_float+0x16c>
 800daac:	3301      	adds	r3, #1
 800daae:	6123      	str	r3, [r4, #16]
 800dab0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d09c      	beq.n	800d9f2 <_printf_float+0xae>
 800dab8:	232d      	movs	r3, #45	; 0x2d
 800daba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dabe:	e798      	b.n	800d9f2 <_printf_float+0xae>
 800dac0:	9a06      	ldr	r2, [sp, #24]
 800dac2:	2a47      	cmp	r2, #71	; 0x47
 800dac4:	d1be      	bne.n	800da44 <_printf_float+0x100>
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1bc      	bne.n	800da44 <_printf_float+0x100>
 800daca:	2301      	movs	r3, #1
 800dacc:	e7b9      	b.n	800da42 <_printf_float+0xfe>
 800dace:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dad2:	d118      	bne.n	800db06 <_printf_float+0x1c2>
 800dad4:	2900      	cmp	r1, #0
 800dad6:	6863      	ldr	r3, [r4, #4]
 800dad8:	dd0b      	ble.n	800daf2 <_printf_float+0x1ae>
 800dada:	6121      	str	r1, [r4, #16]
 800dadc:	b913      	cbnz	r3, 800dae4 <_printf_float+0x1a0>
 800dade:	6822      	ldr	r2, [r4, #0]
 800dae0:	07d0      	lsls	r0, r2, #31
 800dae2:	d502      	bpl.n	800daea <_printf_float+0x1a6>
 800dae4:	3301      	adds	r3, #1
 800dae6:	440b      	add	r3, r1
 800dae8:	6123      	str	r3, [r4, #16]
 800daea:	65a1      	str	r1, [r4, #88]	; 0x58
 800daec:	f04f 0900 	mov.w	r9, #0
 800daf0:	e7de      	b.n	800dab0 <_printf_float+0x16c>
 800daf2:	b913      	cbnz	r3, 800dafa <_printf_float+0x1b6>
 800daf4:	6822      	ldr	r2, [r4, #0]
 800daf6:	07d2      	lsls	r2, r2, #31
 800daf8:	d501      	bpl.n	800dafe <_printf_float+0x1ba>
 800dafa:	3302      	adds	r3, #2
 800dafc:	e7f4      	b.n	800dae8 <_printf_float+0x1a4>
 800dafe:	2301      	movs	r3, #1
 800db00:	e7f2      	b.n	800dae8 <_printf_float+0x1a4>
 800db02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800db06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db08:	4299      	cmp	r1, r3
 800db0a:	db05      	blt.n	800db18 <_printf_float+0x1d4>
 800db0c:	6823      	ldr	r3, [r4, #0]
 800db0e:	6121      	str	r1, [r4, #16]
 800db10:	07d8      	lsls	r0, r3, #31
 800db12:	d5ea      	bpl.n	800daea <_printf_float+0x1a6>
 800db14:	1c4b      	adds	r3, r1, #1
 800db16:	e7e7      	b.n	800dae8 <_printf_float+0x1a4>
 800db18:	2900      	cmp	r1, #0
 800db1a:	bfd4      	ite	le
 800db1c:	f1c1 0202 	rsble	r2, r1, #2
 800db20:	2201      	movgt	r2, #1
 800db22:	4413      	add	r3, r2
 800db24:	e7e0      	b.n	800dae8 <_printf_float+0x1a4>
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	055a      	lsls	r2, r3, #21
 800db2a:	d407      	bmi.n	800db3c <_printf_float+0x1f8>
 800db2c:	6923      	ldr	r3, [r4, #16]
 800db2e:	4642      	mov	r2, r8
 800db30:	4631      	mov	r1, r6
 800db32:	4628      	mov	r0, r5
 800db34:	47b8      	blx	r7
 800db36:	3001      	adds	r0, #1
 800db38:	d12c      	bne.n	800db94 <_printf_float+0x250>
 800db3a:	e764      	b.n	800da06 <_printf_float+0xc2>
 800db3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800db40:	f240 80e0 	bls.w	800dd04 <_printf_float+0x3c0>
 800db44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db48:	2200      	movs	r2, #0
 800db4a:	2300      	movs	r3, #0
 800db4c:	f7f2 ffd4 	bl	8000af8 <__aeabi_dcmpeq>
 800db50:	2800      	cmp	r0, #0
 800db52:	d034      	beq.n	800dbbe <_printf_float+0x27a>
 800db54:	4a37      	ldr	r2, [pc, #220]	; (800dc34 <_printf_float+0x2f0>)
 800db56:	2301      	movs	r3, #1
 800db58:	4631      	mov	r1, r6
 800db5a:	4628      	mov	r0, r5
 800db5c:	47b8      	blx	r7
 800db5e:	3001      	adds	r0, #1
 800db60:	f43f af51 	beq.w	800da06 <_printf_float+0xc2>
 800db64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db68:	429a      	cmp	r2, r3
 800db6a:	db02      	blt.n	800db72 <_printf_float+0x22e>
 800db6c:	6823      	ldr	r3, [r4, #0]
 800db6e:	07d8      	lsls	r0, r3, #31
 800db70:	d510      	bpl.n	800db94 <_printf_float+0x250>
 800db72:	ee18 3a10 	vmov	r3, s16
 800db76:	4652      	mov	r2, sl
 800db78:	4631      	mov	r1, r6
 800db7a:	4628      	mov	r0, r5
 800db7c:	47b8      	blx	r7
 800db7e:	3001      	adds	r0, #1
 800db80:	f43f af41 	beq.w	800da06 <_printf_float+0xc2>
 800db84:	f04f 0800 	mov.w	r8, #0
 800db88:	f104 091a 	add.w	r9, r4, #26
 800db8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db8e:	3b01      	subs	r3, #1
 800db90:	4543      	cmp	r3, r8
 800db92:	dc09      	bgt.n	800dba8 <_printf_float+0x264>
 800db94:	6823      	ldr	r3, [r4, #0]
 800db96:	079b      	lsls	r3, r3, #30
 800db98:	f100 8105 	bmi.w	800dda6 <_printf_float+0x462>
 800db9c:	68e0      	ldr	r0, [r4, #12]
 800db9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dba0:	4298      	cmp	r0, r3
 800dba2:	bfb8      	it	lt
 800dba4:	4618      	movlt	r0, r3
 800dba6:	e730      	b.n	800da0a <_printf_float+0xc6>
 800dba8:	2301      	movs	r3, #1
 800dbaa:	464a      	mov	r2, r9
 800dbac:	4631      	mov	r1, r6
 800dbae:	4628      	mov	r0, r5
 800dbb0:	47b8      	blx	r7
 800dbb2:	3001      	adds	r0, #1
 800dbb4:	f43f af27 	beq.w	800da06 <_printf_float+0xc2>
 800dbb8:	f108 0801 	add.w	r8, r8, #1
 800dbbc:	e7e6      	b.n	800db8c <_printf_float+0x248>
 800dbbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	dc39      	bgt.n	800dc38 <_printf_float+0x2f4>
 800dbc4:	4a1b      	ldr	r2, [pc, #108]	; (800dc34 <_printf_float+0x2f0>)
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	4631      	mov	r1, r6
 800dbca:	4628      	mov	r0, r5
 800dbcc:	47b8      	blx	r7
 800dbce:	3001      	adds	r0, #1
 800dbd0:	f43f af19 	beq.w	800da06 <_printf_float+0xc2>
 800dbd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	d102      	bne.n	800dbe2 <_printf_float+0x29e>
 800dbdc:	6823      	ldr	r3, [r4, #0]
 800dbde:	07d9      	lsls	r1, r3, #31
 800dbe0:	d5d8      	bpl.n	800db94 <_printf_float+0x250>
 800dbe2:	ee18 3a10 	vmov	r3, s16
 800dbe6:	4652      	mov	r2, sl
 800dbe8:	4631      	mov	r1, r6
 800dbea:	4628      	mov	r0, r5
 800dbec:	47b8      	blx	r7
 800dbee:	3001      	adds	r0, #1
 800dbf0:	f43f af09 	beq.w	800da06 <_printf_float+0xc2>
 800dbf4:	f04f 0900 	mov.w	r9, #0
 800dbf8:	f104 0a1a 	add.w	sl, r4, #26
 800dbfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbfe:	425b      	negs	r3, r3
 800dc00:	454b      	cmp	r3, r9
 800dc02:	dc01      	bgt.n	800dc08 <_printf_float+0x2c4>
 800dc04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc06:	e792      	b.n	800db2e <_printf_float+0x1ea>
 800dc08:	2301      	movs	r3, #1
 800dc0a:	4652      	mov	r2, sl
 800dc0c:	4631      	mov	r1, r6
 800dc0e:	4628      	mov	r0, r5
 800dc10:	47b8      	blx	r7
 800dc12:	3001      	adds	r0, #1
 800dc14:	f43f aef7 	beq.w	800da06 <_printf_float+0xc2>
 800dc18:	f109 0901 	add.w	r9, r9, #1
 800dc1c:	e7ee      	b.n	800dbfc <_printf_float+0x2b8>
 800dc1e:	bf00      	nop
 800dc20:	7fefffff 	.word	0x7fefffff
 800dc24:	080258d0 	.word	0x080258d0
 800dc28:	080258d4 	.word	0x080258d4
 800dc2c:	080258dc 	.word	0x080258dc
 800dc30:	080258d8 	.word	0x080258d8
 800dc34:	080258e0 	.word	0x080258e0
 800dc38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	bfa8      	it	ge
 800dc40:	461a      	movge	r2, r3
 800dc42:	2a00      	cmp	r2, #0
 800dc44:	4691      	mov	r9, r2
 800dc46:	dc37      	bgt.n	800dcb8 <_printf_float+0x374>
 800dc48:	f04f 0b00 	mov.w	fp, #0
 800dc4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc50:	f104 021a 	add.w	r2, r4, #26
 800dc54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc56:	9305      	str	r3, [sp, #20]
 800dc58:	eba3 0309 	sub.w	r3, r3, r9
 800dc5c:	455b      	cmp	r3, fp
 800dc5e:	dc33      	bgt.n	800dcc8 <_printf_float+0x384>
 800dc60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc64:	429a      	cmp	r2, r3
 800dc66:	db3b      	blt.n	800dce0 <_printf_float+0x39c>
 800dc68:	6823      	ldr	r3, [r4, #0]
 800dc6a:	07da      	lsls	r2, r3, #31
 800dc6c:	d438      	bmi.n	800dce0 <_printf_float+0x39c>
 800dc6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc70:	9b05      	ldr	r3, [sp, #20]
 800dc72:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	eba2 0901 	sub.w	r9, r2, r1
 800dc7a:	4599      	cmp	r9, r3
 800dc7c:	bfa8      	it	ge
 800dc7e:	4699      	movge	r9, r3
 800dc80:	f1b9 0f00 	cmp.w	r9, #0
 800dc84:	dc35      	bgt.n	800dcf2 <_printf_float+0x3ae>
 800dc86:	f04f 0800 	mov.w	r8, #0
 800dc8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc8e:	f104 0a1a 	add.w	sl, r4, #26
 800dc92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc96:	1a9b      	subs	r3, r3, r2
 800dc98:	eba3 0309 	sub.w	r3, r3, r9
 800dc9c:	4543      	cmp	r3, r8
 800dc9e:	f77f af79 	ble.w	800db94 <_printf_float+0x250>
 800dca2:	2301      	movs	r3, #1
 800dca4:	4652      	mov	r2, sl
 800dca6:	4631      	mov	r1, r6
 800dca8:	4628      	mov	r0, r5
 800dcaa:	47b8      	blx	r7
 800dcac:	3001      	adds	r0, #1
 800dcae:	f43f aeaa 	beq.w	800da06 <_printf_float+0xc2>
 800dcb2:	f108 0801 	add.w	r8, r8, #1
 800dcb6:	e7ec      	b.n	800dc92 <_printf_float+0x34e>
 800dcb8:	4613      	mov	r3, r2
 800dcba:	4631      	mov	r1, r6
 800dcbc:	4642      	mov	r2, r8
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	47b8      	blx	r7
 800dcc2:	3001      	adds	r0, #1
 800dcc4:	d1c0      	bne.n	800dc48 <_printf_float+0x304>
 800dcc6:	e69e      	b.n	800da06 <_printf_float+0xc2>
 800dcc8:	2301      	movs	r3, #1
 800dcca:	4631      	mov	r1, r6
 800dccc:	4628      	mov	r0, r5
 800dcce:	9205      	str	r2, [sp, #20]
 800dcd0:	47b8      	blx	r7
 800dcd2:	3001      	adds	r0, #1
 800dcd4:	f43f ae97 	beq.w	800da06 <_printf_float+0xc2>
 800dcd8:	9a05      	ldr	r2, [sp, #20]
 800dcda:	f10b 0b01 	add.w	fp, fp, #1
 800dcde:	e7b9      	b.n	800dc54 <_printf_float+0x310>
 800dce0:	ee18 3a10 	vmov	r3, s16
 800dce4:	4652      	mov	r2, sl
 800dce6:	4631      	mov	r1, r6
 800dce8:	4628      	mov	r0, r5
 800dcea:	47b8      	blx	r7
 800dcec:	3001      	adds	r0, #1
 800dcee:	d1be      	bne.n	800dc6e <_printf_float+0x32a>
 800dcf0:	e689      	b.n	800da06 <_printf_float+0xc2>
 800dcf2:	9a05      	ldr	r2, [sp, #20]
 800dcf4:	464b      	mov	r3, r9
 800dcf6:	4442      	add	r2, r8
 800dcf8:	4631      	mov	r1, r6
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	47b8      	blx	r7
 800dcfe:	3001      	adds	r0, #1
 800dd00:	d1c1      	bne.n	800dc86 <_printf_float+0x342>
 800dd02:	e680      	b.n	800da06 <_printf_float+0xc2>
 800dd04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd06:	2a01      	cmp	r2, #1
 800dd08:	dc01      	bgt.n	800dd0e <_printf_float+0x3ca>
 800dd0a:	07db      	lsls	r3, r3, #31
 800dd0c:	d538      	bpl.n	800dd80 <_printf_float+0x43c>
 800dd0e:	2301      	movs	r3, #1
 800dd10:	4642      	mov	r2, r8
 800dd12:	4631      	mov	r1, r6
 800dd14:	4628      	mov	r0, r5
 800dd16:	47b8      	blx	r7
 800dd18:	3001      	adds	r0, #1
 800dd1a:	f43f ae74 	beq.w	800da06 <_printf_float+0xc2>
 800dd1e:	ee18 3a10 	vmov	r3, s16
 800dd22:	4652      	mov	r2, sl
 800dd24:	4631      	mov	r1, r6
 800dd26:	4628      	mov	r0, r5
 800dd28:	47b8      	blx	r7
 800dd2a:	3001      	adds	r0, #1
 800dd2c:	f43f ae6b 	beq.w	800da06 <_printf_float+0xc2>
 800dd30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd34:	2200      	movs	r2, #0
 800dd36:	2300      	movs	r3, #0
 800dd38:	f7f2 fede 	bl	8000af8 <__aeabi_dcmpeq>
 800dd3c:	b9d8      	cbnz	r0, 800dd76 <_printf_float+0x432>
 800dd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd40:	f108 0201 	add.w	r2, r8, #1
 800dd44:	3b01      	subs	r3, #1
 800dd46:	4631      	mov	r1, r6
 800dd48:	4628      	mov	r0, r5
 800dd4a:	47b8      	blx	r7
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	d10e      	bne.n	800dd6e <_printf_float+0x42a>
 800dd50:	e659      	b.n	800da06 <_printf_float+0xc2>
 800dd52:	2301      	movs	r3, #1
 800dd54:	4652      	mov	r2, sl
 800dd56:	4631      	mov	r1, r6
 800dd58:	4628      	mov	r0, r5
 800dd5a:	47b8      	blx	r7
 800dd5c:	3001      	adds	r0, #1
 800dd5e:	f43f ae52 	beq.w	800da06 <_printf_float+0xc2>
 800dd62:	f108 0801 	add.w	r8, r8, #1
 800dd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd68:	3b01      	subs	r3, #1
 800dd6a:	4543      	cmp	r3, r8
 800dd6c:	dcf1      	bgt.n	800dd52 <_printf_float+0x40e>
 800dd6e:	464b      	mov	r3, r9
 800dd70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dd74:	e6dc      	b.n	800db30 <_printf_float+0x1ec>
 800dd76:	f04f 0800 	mov.w	r8, #0
 800dd7a:	f104 0a1a 	add.w	sl, r4, #26
 800dd7e:	e7f2      	b.n	800dd66 <_printf_float+0x422>
 800dd80:	2301      	movs	r3, #1
 800dd82:	4642      	mov	r2, r8
 800dd84:	e7df      	b.n	800dd46 <_printf_float+0x402>
 800dd86:	2301      	movs	r3, #1
 800dd88:	464a      	mov	r2, r9
 800dd8a:	4631      	mov	r1, r6
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	47b8      	blx	r7
 800dd90:	3001      	adds	r0, #1
 800dd92:	f43f ae38 	beq.w	800da06 <_printf_float+0xc2>
 800dd96:	f108 0801 	add.w	r8, r8, #1
 800dd9a:	68e3      	ldr	r3, [r4, #12]
 800dd9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd9e:	1a5b      	subs	r3, r3, r1
 800dda0:	4543      	cmp	r3, r8
 800dda2:	dcf0      	bgt.n	800dd86 <_printf_float+0x442>
 800dda4:	e6fa      	b.n	800db9c <_printf_float+0x258>
 800dda6:	f04f 0800 	mov.w	r8, #0
 800ddaa:	f104 0919 	add.w	r9, r4, #25
 800ddae:	e7f4      	b.n	800dd9a <_printf_float+0x456>

0800ddb0 <_printf_common>:
 800ddb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddb4:	4616      	mov	r6, r2
 800ddb6:	4699      	mov	r9, r3
 800ddb8:	688a      	ldr	r2, [r1, #8]
 800ddba:	690b      	ldr	r3, [r1, #16]
 800ddbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	bfb8      	it	lt
 800ddc4:	4613      	movlt	r3, r2
 800ddc6:	6033      	str	r3, [r6, #0]
 800ddc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ddcc:	4607      	mov	r7, r0
 800ddce:	460c      	mov	r4, r1
 800ddd0:	b10a      	cbz	r2, 800ddd6 <_printf_common+0x26>
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	6033      	str	r3, [r6, #0]
 800ddd6:	6823      	ldr	r3, [r4, #0]
 800ddd8:	0699      	lsls	r1, r3, #26
 800ddda:	bf42      	ittt	mi
 800dddc:	6833      	ldrmi	r3, [r6, #0]
 800ddde:	3302      	addmi	r3, #2
 800dde0:	6033      	strmi	r3, [r6, #0]
 800dde2:	6825      	ldr	r5, [r4, #0]
 800dde4:	f015 0506 	ands.w	r5, r5, #6
 800dde8:	d106      	bne.n	800ddf8 <_printf_common+0x48>
 800ddea:	f104 0a19 	add.w	sl, r4, #25
 800ddee:	68e3      	ldr	r3, [r4, #12]
 800ddf0:	6832      	ldr	r2, [r6, #0]
 800ddf2:	1a9b      	subs	r3, r3, r2
 800ddf4:	42ab      	cmp	r3, r5
 800ddf6:	dc26      	bgt.n	800de46 <_printf_common+0x96>
 800ddf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ddfc:	1e13      	subs	r3, r2, #0
 800ddfe:	6822      	ldr	r2, [r4, #0]
 800de00:	bf18      	it	ne
 800de02:	2301      	movne	r3, #1
 800de04:	0692      	lsls	r2, r2, #26
 800de06:	d42b      	bmi.n	800de60 <_printf_common+0xb0>
 800de08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de0c:	4649      	mov	r1, r9
 800de0e:	4638      	mov	r0, r7
 800de10:	47c0      	blx	r8
 800de12:	3001      	adds	r0, #1
 800de14:	d01e      	beq.n	800de54 <_printf_common+0xa4>
 800de16:	6823      	ldr	r3, [r4, #0]
 800de18:	68e5      	ldr	r5, [r4, #12]
 800de1a:	6832      	ldr	r2, [r6, #0]
 800de1c:	f003 0306 	and.w	r3, r3, #6
 800de20:	2b04      	cmp	r3, #4
 800de22:	bf08      	it	eq
 800de24:	1aad      	subeq	r5, r5, r2
 800de26:	68a3      	ldr	r3, [r4, #8]
 800de28:	6922      	ldr	r2, [r4, #16]
 800de2a:	bf0c      	ite	eq
 800de2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de30:	2500      	movne	r5, #0
 800de32:	4293      	cmp	r3, r2
 800de34:	bfc4      	itt	gt
 800de36:	1a9b      	subgt	r3, r3, r2
 800de38:	18ed      	addgt	r5, r5, r3
 800de3a:	2600      	movs	r6, #0
 800de3c:	341a      	adds	r4, #26
 800de3e:	42b5      	cmp	r5, r6
 800de40:	d11a      	bne.n	800de78 <_printf_common+0xc8>
 800de42:	2000      	movs	r0, #0
 800de44:	e008      	b.n	800de58 <_printf_common+0xa8>
 800de46:	2301      	movs	r3, #1
 800de48:	4652      	mov	r2, sl
 800de4a:	4649      	mov	r1, r9
 800de4c:	4638      	mov	r0, r7
 800de4e:	47c0      	blx	r8
 800de50:	3001      	adds	r0, #1
 800de52:	d103      	bne.n	800de5c <_printf_common+0xac>
 800de54:	f04f 30ff 	mov.w	r0, #4294967295
 800de58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de5c:	3501      	adds	r5, #1
 800de5e:	e7c6      	b.n	800ddee <_printf_common+0x3e>
 800de60:	18e1      	adds	r1, r4, r3
 800de62:	1c5a      	adds	r2, r3, #1
 800de64:	2030      	movs	r0, #48	; 0x30
 800de66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800de6a:	4422      	add	r2, r4
 800de6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800de70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800de74:	3302      	adds	r3, #2
 800de76:	e7c7      	b.n	800de08 <_printf_common+0x58>
 800de78:	2301      	movs	r3, #1
 800de7a:	4622      	mov	r2, r4
 800de7c:	4649      	mov	r1, r9
 800de7e:	4638      	mov	r0, r7
 800de80:	47c0      	blx	r8
 800de82:	3001      	adds	r0, #1
 800de84:	d0e6      	beq.n	800de54 <_printf_common+0xa4>
 800de86:	3601      	adds	r6, #1
 800de88:	e7d9      	b.n	800de3e <_printf_common+0x8e>
	...

0800de8c <_printf_i>:
 800de8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de90:	460c      	mov	r4, r1
 800de92:	4691      	mov	r9, r2
 800de94:	7e27      	ldrb	r7, [r4, #24]
 800de96:	990c      	ldr	r1, [sp, #48]	; 0x30
 800de98:	2f78      	cmp	r7, #120	; 0x78
 800de9a:	4680      	mov	r8, r0
 800de9c:	469a      	mov	sl, r3
 800de9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dea2:	d807      	bhi.n	800deb4 <_printf_i+0x28>
 800dea4:	2f62      	cmp	r7, #98	; 0x62
 800dea6:	d80a      	bhi.n	800debe <_printf_i+0x32>
 800dea8:	2f00      	cmp	r7, #0
 800deaa:	f000 80d8 	beq.w	800e05e <_printf_i+0x1d2>
 800deae:	2f58      	cmp	r7, #88	; 0x58
 800deb0:	f000 80a3 	beq.w	800dffa <_printf_i+0x16e>
 800deb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800deb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800debc:	e03a      	b.n	800df34 <_printf_i+0xa8>
 800debe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dec2:	2b15      	cmp	r3, #21
 800dec4:	d8f6      	bhi.n	800deb4 <_printf_i+0x28>
 800dec6:	a001      	add	r0, pc, #4	; (adr r0, 800decc <_printf_i+0x40>)
 800dec8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800decc:	0800df25 	.word	0x0800df25
 800ded0:	0800df39 	.word	0x0800df39
 800ded4:	0800deb5 	.word	0x0800deb5
 800ded8:	0800deb5 	.word	0x0800deb5
 800dedc:	0800deb5 	.word	0x0800deb5
 800dee0:	0800deb5 	.word	0x0800deb5
 800dee4:	0800df39 	.word	0x0800df39
 800dee8:	0800deb5 	.word	0x0800deb5
 800deec:	0800deb5 	.word	0x0800deb5
 800def0:	0800deb5 	.word	0x0800deb5
 800def4:	0800deb5 	.word	0x0800deb5
 800def8:	0800e045 	.word	0x0800e045
 800defc:	0800df69 	.word	0x0800df69
 800df00:	0800e027 	.word	0x0800e027
 800df04:	0800deb5 	.word	0x0800deb5
 800df08:	0800deb5 	.word	0x0800deb5
 800df0c:	0800e067 	.word	0x0800e067
 800df10:	0800deb5 	.word	0x0800deb5
 800df14:	0800df69 	.word	0x0800df69
 800df18:	0800deb5 	.word	0x0800deb5
 800df1c:	0800deb5 	.word	0x0800deb5
 800df20:	0800e02f 	.word	0x0800e02f
 800df24:	680b      	ldr	r3, [r1, #0]
 800df26:	1d1a      	adds	r2, r3, #4
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	600a      	str	r2, [r1, #0]
 800df2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800df30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df34:	2301      	movs	r3, #1
 800df36:	e0a3      	b.n	800e080 <_printf_i+0x1f4>
 800df38:	6825      	ldr	r5, [r4, #0]
 800df3a:	6808      	ldr	r0, [r1, #0]
 800df3c:	062e      	lsls	r6, r5, #24
 800df3e:	f100 0304 	add.w	r3, r0, #4
 800df42:	d50a      	bpl.n	800df5a <_printf_i+0xce>
 800df44:	6805      	ldr	r5, [r0, #0]
 800df46:	600b      	str	r3, [r1, #0]
 800df48:	2d00      	cmp	r5, #0
 800df4a:	da03      	bge.n	800df54 <_printf_i+0xc8>
 800df4c:	232d      	movs	r3, #45	; 0x2d
 800df4e:	426d      	negs	r5, r5
 800df50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df54:	485e      	ldr	r0, [pc, #376]	; (800e0d0 <_printf_i+0x244>)
 800df56:	230a      	movs	r3, #10
 800df58:	e019      	b.n	800df8e <_printf_i+0x102>
 800df5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800df5e:	6805      	ldr	r5, [r0, #0]
 800df60:	600b      	str	r3, [r1, #0]
 800df62:	bf18      	it	ne
 800df64:	b22d      	sxthne	r5, r5
 800df66:	e7ef      	b.n	800df48 <_printf_i+0xbc>
 800df68:	680b      	ldr	r3, [r1, #0]
 800df6a:	6825      	ldr	r5, [r4, #0]
 800df6c:	1d18      	adds	r0, r3, #4
 800df6e:	6008      	str	r0, [r1, #0]
 800df70:	0628      	lsls	r0, r5, #24
 800df72:	d501      	bpl.n	800df78 <_printf_i+0xec>
 800df74:	681d      	ldr	r5, [r3, #0]
 800df76:	e002      	b.n	800df7e <_printf_i+0xf2>
 800df78:	0669      	lsls	r1, r5, #25
 800df7a:	d5fb      	bpl.n	800df74 <_printf_i+0xe8>
 800df7c:	881d      	ldrh	r5, [r3, #0]
 800df7e:	4854      	ldr	r0, [pc, #336]	; (800e0d0 <_printf_i+0x244>)
 800df80:	2f6f      	cmp	r7, #111	; 0x6f
 800df82:	bf0c      	ite	eq
 800df84:	2308      	moveq	r3, #8
 800df86:	230a      	movne	r3, #10
 800df88:	2100      	movs	r1, #0
 800df8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800df8e:	6866      	ldr	r6, [r4, #4]
 800df90:	60a6      	str	r6, [r4, #8]
 800df92:	2e00      	cmp	r6, #0
 800df94:	bfa2      	ittt	ge
 800df96:	6821      	ldrge	r1, [r4, #0]
 800df98:	f021 0104 	bicge.w	r1, r1, #4
 800df9c:	6021      	strge	r1, [r4, #0]
 800df9e:	b90d      	cbnz	r5, 800dfa4 <_printf_i+0x118>
 800dfa0:	2e00      	cmp	r6, #0
 800dfa2:	d04d      	beq.n	800e040 <_printf_i+0x1b4>
 800dfa4:	4616      	mov	r6, r2
 800dfa6:	fbb5 f1f3 	udiv	r1, r5, r3
 800dfaa:	fb03 5711 	mls	r7, r3, r1, r5
 800dfae:	5dc7      	ldrb	r7, [r0, r7]
 800dfb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dfb4:	462f      	mov	r7, r5
 800dfb6:	42bb      	cmp	r3, r7
 800dfb8:	460d      	mov	r5, r1
 800dfba:	d9f4      	bls.n	800dfa6 <_printf_i+0x11a>
 800dfbc:	2b08      	cmp	r3, #8
 800dfbe:	d10b      	bne.n	800dfd8 <_printf_i+0x14c>
 800dfc0:	6823      	ldr	r3, [r4, #0]
 800dfc2:	07df      	lsls	r7, r3, #31
 800dfc4:	d508      	bpl.n	800dfd8 <_printf_i+0x14c>
 800dfc6:	6923      	ldr	r3, [r4, #16]
 800dfc8:	6861      	ldr	r1, [r4, #4]
 800dfca:	4299      	cmp	r1, r3
 800dfcc:	bfde      	ittt	le
 800dfce:	2330      	movle	r3, #48	; 0x30
 800dfd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dfd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dfd8:	1b92      	subs	r2, r2, r6
 800dfda:	6122      	str	r2, [r4, #16]
 800dfdc:	f8cd a000 	str.w	sl, [sp]
 800dfe0:	464b      	mov	r3, r9
 800dfe2:	aa03      	add	r2, sp, #12
 800dfe4:	4621      	mov	r1, r4
 800dfe6:	4640      	mov	r0, r8
 800dfe8:	f7ff fee2 	bl	800ddb0 <_printf_common>
 800dfec:	3001      	adds	r0, #1
 800dfee:	d14c      	bne.n	800e08a <_printf_i+0x1fe>
 800dff0:	f04f 30ff 	mov.w	r0, #4294967295
 800dff4:	b004      	add	sp, #16
 800dff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dffa:	4835      	ldr	r0, [pc, #212]	; (800e0d0 <_printf_i+0x244>)
 800dffc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e000:	6823      	ldr	r3, [r4, #0]
 800e002:	680e      	ldr	r6, [r1, #0]
 800e004:	061f      	lsls	r7, r3, #24
 800e006:	f856 5b04 	ldr.w	r5, [r6], #4
 800e00a:	600e      	str	r6, [r1, #0]
 800e00c:	d514      	bpl.n	800e038 <_printf_i+0x1ac>
 800e00e:	07d9      	lsls	r1, r3, #31
 800e010:	bf44      	itt	mi
 800e012:	f043 0320 	orrmi.w	r3, r3, #32
 800e016:	6023      	strmi	r3, [r4, #0]
 800e018:	b91d      	cbnz	r5, 800e022 <_printf_i+0x196>
 800e01a:	6823      	ldr	r3, [r4, #0]
 800e01c:	f023 0320 	bic.w	r3, r3, #32
 800e020:	6023      	str	r3, [r4, #0]
 800e022:	2310      	movs	r3, #16
 800e024:	e7b0      	b.n	800df88 <_printf_i+0xfc>
 800e026:	6823      	ldr	r3, [r4, #0]
 800e028:	f043 0320 	orr.w	r3, r3, #32
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	2378      	movs	r3, #120	; 0x78
 800e030:	4828      	ldr	r0, [pc, #160]	; (800e0d4 <_printf_i+0x248>)
 800e032:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e036:	e7e3      	b.n	800e000 <_printf_i+0x174>
 800e038:	065e      	lsls	r6, r3, #25
 800e03a:	bf48      	it	mi
 800e03c:	b2ad      	uxthmi	r5, r5
 800e03e:	e7e6      	b.n	800e00e <_printf_i+0x182>
 800e040:	4616      	mov	r6, r2
 800e042:	e7bb      	b.n	800dfbc <_printf_i+0x130>
 800e044:	680b      	ldr	r3, [r1, #0]
 800e046:	6826      	ldr	r6, [r4, #0]
 800e048:	6960      	ldr	r0, [r4, #20]
 800e04a:	1d1d      	adds	r5, r3, #4
 800e04c:	600d      	str	r5, [r1, #0]
 800e04e:	0635      	lsls	r5, r6, #24
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	d501      	bpl.n	800e058 <_printf_i+0x1cc>
 800e054:	6018      	str	r0, [r3, #0]
 800e056:	e002      	b.n	800e05e <_printf_i+0x1d2>
 800e058:	0671      	lsls	r1, r6, #25
 800e05a:	d5fb      	bpl.n	800e054 <_printf_i+0x1c8>
 800e05c:	8018      	strh	r0, [r3, #0]
 800e05e:	2300      	movs	r3, #0
 800e060:	6123      	str	r3, [r4, #16]
 800e062:	4616      	mov	r6, r2
 800e064:	e7ba      	b.n	800dfdc <_printf_i+0x150>
 800e066:	680b      	ldr	r3, [r1, #0]
 800e068:	1d1a      	adds	r2, r3, #4
 800e06a:	600a      	str	r2, [r1, #0]
 800e06c:	681e      	ldr	r6, [r3, #0]
 800e06e:	6862      	ldr	r2, [r4, #4]
 800e070:	2100      	movs	r1, #0
 800e072:	4630      	mov	r0, r6
 800e074:	f7f2 f8cc 	bl	8000210 <memchr>
 800e078:	b108      	cbz	r0, 800e07e <_printf_i+0x1f2>
 800e07a:	1b80      	subs	r0, r0, r6
 800e07c:	6060      	str	r0, [r4, #4]
 800e07e:	6863      	ldr	r3, [r4, #4]
 800e080:	6123      	str	r3, [r4, #16]
 800e082:	2300      	movs	r3, #0
 800e084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e088:	e7a8      	b.n	800dfdc <_printf_i+0x150>
 800e08a:	6923      	ldr	r3, [r4, #16]
 800e08c:	4632      	mov	r2, r6
 800e08e:	4649      	mov	r1, r9
 800e090:	4640      	mov	r0, r8
 800e092:	47d0      	blx	sl
 800e094:	3001      	adds	r0, #1
 800e096:	d0ab      	beq.n	800dff0 <_printf_i+0x164>
 800e098:	6823      	ldr	r3, [r4, #0]
 800e09a:	079b      	lsls	r3, r3, #30
 800e09c:	d413      	bmi.n	800e0c6 <_printf_i+0x23a>
 800e09e:	68e0      	ldr	r0, [r4, #12]
 800e0a0:	9b03      	ldr	r3, [sp, #12]
 800e0a2:	4298      	cmp	r0, r3
 800e0a4:	bfb8      	it	lt
 800e0a6:	4618      	movlt	r0, r3
 800e0a8:	e7a4      	b.n	800dff4 <_printf_i+0x168>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	4632      	mov	r2, r6
 800e0ae:	4649      	mov	r1, r9
 800e0b0:	4640      	mov	r0, r8
 800e0b2:	47d0      	blx	sl
 800e0b4:	3001      	adds	r0, #1
 800e0b6:	d09b      	beq.n	800dff0 <_printf_i+0x164>
 800e0b8:	3501      	adds	r5, #1
 800e0ba:	68e3      	ldr	r3, [r4, #12]
 800e0bc:	9903      	ldr	r1, [sp, #12]
 800e0be:	1a5b      	subs	r3, r3, r1
 800e0c0:	42ab      	cmp	r3, r5
 800e0c2:	dcf2      	bgt.n	800e0aa <_printf_i+0x21e>
 800e0c4:	e7eb      	b.n	800e09e <_printf_i+0x212>
 800e0c6:	2500      	movs	r5, #0
 800e0c8:	f104 0619 	add.w	r6, r4, #25
 800e0cc:	e7f5      	b.n	800e0ba <_printf_i+0x22e>
 800e0ce:	bf00      	nop
 800e0d0:	080258e2 	.word	0x080258e2
 800e0d4:	080258f3 	.word	0x080258f3

0800e0d8 <_scanf_float>:
 800e0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0dc:	b087      	sub	sp, #28
 800e0de:	4617      	mov	r7, r2
 800e0e0:	9303      	str	r3, [sp, #12]
 800e0e2:	688b      	ldr	r3, [r1, #8]
 800e0e4:	1e5a      	subs	r2, r3, #1
 800e0e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e0ea:	bf83      	ittte	hi
 800e0ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e0f0:	195b      	addhi	r3, r3, r5
 800e0f2:	9302      	strhi	r3, [sp, #8]
 800e0f4:	2300      	movls	r3, #0
 800e0f6:	bf86      	itte	hi
 800e0f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e0fc:	608b      	strhi	r3, [r1, #8]
 800e0fe:	9302      	strls	r3, [sp, #8]
 800e100:	680b      	ldr	r3, [r1, #0]
 800e102:	468b      	mov	fp, r1
 800e104:	2500      	movs	r5, #0
 800e106:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e10a:	f84b 3b1c 	str.w	r3, [fp], #28
 800e10e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e112:	4680      	mov	r8, r0
 800e114:	460c      	mov	r4, r1
 800e116:	465e      	mov	r6, fp
 800e118:	46aa      	mov	sl, r5
 800e11a:	46a9      	mov	r9, r5
 800e11c:	9501      	str	r5, [sp, #4]
 800e11e:	68a2      	ldr	r2, [r4, #8]
 800e120:	b152      	cbz	r2, 800e138 <_scanf_float+0x60>
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	2b4e      	cmp	r3, #78	; 0x4e
 800e128:	d864      	bhi.n	800e1f4 <_scanf_float+0x11c>
 800e12a:	2b40      	cmp	r3, #64	; 0x40
 800e12c:	d83c      	bhi.n	800e1a8 <_scanf_float+0xd0>
 800e12e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e132:	b2c8      	uxtb	r0, r1
 800e134:	280e      	cmp	r0, #14
 800e136:	d93a      	bls.n	800e1ae <_scanf_float+0xd6>
 800e138:	f1b9 0f00 	cmp.w	r9, #0
 800e13c:	d003      	beq.n	800e146 <_scanf_float+0x6e>
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e144:	6023      	str	r3, [r4, #0]
 800e146:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e14a:	f1ba 0f01 	cmp.w	sl, #1
 800e14e:	f200 8113 	bhi.w	800e378 <_scanf_float+0x2a0>
 800e152:	455e      	cmp	r6, fp
 800e154:	f200 8105 	bhi.w	800e362 <_scanf_float+0x28a>
 800e158:	2501      	movs	r5, #1
 800e15a:	4628      	mov	r0, r5
 800e15c:	b007      	add	sp, #28
 800e15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e162:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e166:	2a0d      	cmp	r2, #13
 800e168:	d8e6      	bhi.n	800e138 <_scanf_float+0x60>
 800e16a:	a101      	add	r1, pc, #4	; (adr r1, 800e170 <_scanf_float+0x98>)
 800e16c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e170:	0800e2af 	.word	0x0800e2af
 800e174:	0800e139 	.word	0x0800e139
 800e178:	0800e139 	.word	0x0800e139
 800e17c:	0800e139 	.word	0x0800e139
 800e180:	0800e30f 	.word	0x0800e30f
 800e184:	0800e2e7 	.word	0x0800e2e7
 800e188:	0800e139 	.word	0x0800e139
 800e18c:	0800e139 	.word	0x0800e139
 800e190:	0800e2bd 	.word	0x0800e2bd
 800e194:	0800e139 	.word	0x0800e139
 800e198:	0800e139 	.word	0x0800e139
 800e19c:	0800e139 	.word	0x0800e139
 800e1a0:	0800e139 	.word	0x0800e139
 800e1a4:	0800e275 	.word	0x0800e275
 800e1a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e1ac:	e7db      	b.n	800e166 <_scanf_float+0x8e>
 800e1ae:	290e      	cmp	r1, #14
 800e1b0:	d8c2      	bhi.n	800e138 <_scanf_float+0x60>
 800e1b2:	a001      	add	r0, pc, #4	; (adr r0, 800e1b8 <_scanf_float+0xe0>)
 800e1b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e1b8:	0800e267 	.word	0x0800e267
 800e1bc:	0800e139 	.word	0x0800e139
 800e1c0:	0800e267 	.word	0x0800e267
 800e1c4:	0800e2fb 	.word	0x0800e2fb
 800e1c8:	0800e139 	.word	0x0800e139
 800e1cc:	0800e215 	.word	0x0800e215
 800e1d0:	0800e251 	.word	0x0800e251
 800e1d4:	0800e251 	.word	0x0800e251
 800e1d8:	0800e251 	.word	0x0800e251
 800e1dc:	0800e251 	.word	0x0800e251
 800e1e0:	0800e251 	.word	0x0800e251
 800e1e4:	0800e251 	.word	0x0800e251
 800e1e8:	0800e251 	.word	0x0800e251
 800e1ec:	0800e251 	.word	0x0800e251
 800e1f0:	0800e251 	.word	0x0800e251
 800e1f4:	2b6e      	cmp	r3, #110	; 0x6e
 800e1f6:	d809      	bhi.n	800e20c <_scanf_float+0x134>
 800e1f8:	2b60      	cmp	r3, #96	; 0x60
 800e1fa:	d8b2      	bhi.n	800e162 <_scanf_float+0x8a>
 800e1fc:	2b54      	cmp	r3, #84	; 0x54
 800e1fe:	d077      	beq.n	800e2f0 <_scanf_float+0x218>
 800e200:	2b59      	cmp	r3, #89	; 0x59
 800e202:	d199      	bne.n	800e138 <_scanf_float+0x60>
 800e204:	2d07      	cmp	r5, #7
 800e206:	d197      	bne.n	800e138 <_scanf_float+0x60>
 800e208:	2508      	movs	r5, #8
 800e20a:	e029      	b.n	800e260 <_scanf_float+0x188>
 800e20c:	2b74      	cmp	r3, #116	; 0x74
 800e20e:	d06f      	beq.n	800e2f0 <_scanf_float+0x218>
 800e210:	2b79      	cmp	r3, #121	; 0x79
 800e212:	e7f6      	b.n	800e202 <_scanf_float+0x12a>
 800e214:	6821      	ldr	r1, [r4, #0]
 800e216:	05c8      	lsls	r0, r1, #23
 800e218:	d51a      	bpl.n	800e250 <_scanf_float+0x178>
 800e21a:	9b02      	ldr	r3, [sp, #8]
 800e21c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e220:	6021      	str	r1, [r4, #0]
 800e222:	f109 0901 	add.w	r9, r9, #1
 800e226:	b11b      	cbz	r3, 800e230 <_scanf_float+0x158>
 800e228:	3b01      	subs	r3, #1
 800e22a:	3201      	adds	r2, #1
 800e22c:	9302      	str	r3, [sp, #8]
 800e22e:	60a2      	str	r2, [r4, #8]
 800e230:	68a3      	ldr	r3, [r4, #8]
 800e232:	3b01      	subs	r3, #1
 800e234:	60a3      	str	r3, [r4, #8]
 800e236:	6923      	ldr	r3, [r4, #16]
 800e238:	3301      	adds	r3, #1
 800e23a:	6123      	str	r3, [r4, #16]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	3b01      	subs	r3, #1
 800e240:	2b00      	cmp	r3, #0
 800e242:	607b      	str	r3, [r7, #4]
 800e244:	f340 8084 	ble.w	800e350 <_scanf_float+0x278>
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	3301      	adds	r3, #1
 800e24c:	603b      	str	r3, [r7, #0]
 800e24e:	e766      	b.n	800e11e <_scanf_float+0x46>
 800e250:	eb1a 0f05 	cmn.w	sl, r5
 800e254:	f47f af70 	bne.w	800e138 <_scanf_float+0x60>
 800e258:	6822      	ldr	r2, [r4, #0]
 800e25a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e25e:	6022      	str	r2, [r4, #0]
 800e260:	f806 3b01 	strb.w	r3, [r6], #1
 800e264:	e7e4      	b.n	800e230 <_scanf_float+0x158>
 800e266:	6822      	ldr	r2, [r4, #0]
 800e268:	0610      	lsls	r0, r2, #24
 800e26a:	f57f af65 	bpl.w	800e138 <_scanf_float+0x60>
 800e26e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e272:	e7f4      	b.n	800e25e <_scanf_float+0x186>
 800e274:	f1ba 0f00 	cmp.w	sl, #0
 800e278:	d10e      	bne.n	800e298 <_scanf_float+0x1c0>
 800e27a:	f1b9 0f00 	cmp.w	r9, #0
 800e27e:	d10e      	bne.n	800e29e <_scanf_float+0x1c6>
 800e280:	6822      	ldr	r2, [r4, #0]
 800e282:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e286:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e28a:	d108      	bne.n	800e29e <_scanf_float+0x1c6>
 800e28c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e290:	6022      	str	r2, [r4, #0]
 800e292:	f04f 0a01 	mov.w	sl, #1
 800e296:	e7e3      	b.n	800e260 <_scanf_float+0x188>
 800e298:	f1ba 0f02 	cmp.w	sl, #2
 800e29c:	d055      	beq.n	800e34a <_scanf_float+0x272>
 800e29e:	2d01      	cmp	r5, #1
 800e2a0:	d002      	beq.n	800e2a8 <_scanf_float+0x1d0>
 800e2a2:	2d04      	cmp	r5, #4
 800e2a4:	f47f af48 	bne.w	800e138 <_scanf_float+0x60>
 800e2a8:	3501      	adds	r5, #1
 800e2aa:	b2ed      	uxtb	r5, r5
 800e2ac:	e7d8      	b.n	800e260 <_scanf_float+0x188>
 800e2ae:	f1ba 0f01 	cmp.w	sl, #1
 800e2b2:	f47f af41 	bne.w	800e138 <_scanf_float+0x60>
 800e2b6:	f04f 0a02 	mov.w	sl, #2
 800e2ba:	e7d1      	b.n	800e260 <_scanf_float+0x188>
 800e2bc:	b97d      	cbnz	r5, 800e2de <_scanf_float+0x206>
 800e2be:	f1b9 0f00 	cmp.w	r9, #0
 800e2c2:	f47f af3c 	bne.w	800e13e <_scanf_float+0x66>
 800e2c6:	6822      	ldr	r2, [r4, #0]
 800e2c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e2cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e2d0:	f47f af39 	bne.w	800e146 <_scanf_float+0x6e>
 800e2d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e2d8:	6022      	str	r2, [r4, #0]
 800e2da:	2501      	movs	r5, #1
 800e2dc:	e7c0      	b.n	800e260 <_scanf_float+0x188>
 800e2de:	2d03      	cmp	r5, #3
 800e2e0:	d0e2      	beq.n	800e2a8 <_scanf_float+0x1d0>
 800e2e2:	2d05      	cmp	r5, #5
 800e2e4:	e7de      	b.n	800e2a4 <_scanf_float+0x1cc>
 800e2e6:	2d02      	cmp	r5, #2
 800e2e8:	f47f af26 	bne.w	800e138 <_scanf_float+0x60>
 800e2ec:	2503      	movs	r5, #3
 800e2ee:	e7b7      	b.n	800e260 <_scanf_float+0x188>
 800e2f0:	2d06      	cmp	r5, #6
 800e2f2:	f47f af21 	bne.w	800e138 <_scanf_float+0x60>
 800e2f6:	2507      	movs	r5, #7
 800e2f8:	e7b2      	b.n	800e260 <_scanf_float+0x188>
 800e2fa:	6822      	ldr	r2, [r4, #0]
 800e2fc:	0591      	lsls	r1, r2, #22
 800e2fe:	f57f af1b 	bpl.w	800e138 <_scanf_float+0x60>
 800e302:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e306:	6022      	str	r2, [r4, #0]
 800e308:	f8cd 9004 	str.w	r9, [sp, #4]
 800e30c:	e7a8      	b.n	800e260 <_scanf_float+0x188>
 800e30e:	6822      	ldr	r2, [r4, #0]
 800e310:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e314:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e318:	d006      	beq.n	800e328 <_scanf_float+0x250>
 800e31a:	0550      	lsls	r0, r2, #21
 800e31c:	f57f af0c 	bpl.w	800e138 <_scanf_float+0x60>
 800e320:	f1b9 0f00 	cmp.w	r9, #0
 800e324:	f43f af0f 	beq.w	800e146 <_scanf_float+0x6e>
 800e328:	0591      	lsls	r1, r2, #22
 800e32a:	bf58      	it	pl
 800e32c:	9901      	ldrpl	r1, [sp, #4]
 800e32e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e332:	bf58      	it	pl
 800e334:	eba9 0101 	subpl.w	r1, r9, r1
 800e338:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e33c:	bf58      	it	pl
 800e33e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e342:	6022      	str	r2, [r4, #0]
 800e344:	f04f 0900 	mov.w	r9, #0
 800e348:	e78a      	b.n	800e260 <_scanf_float+0x188>
 800e34a:	f04f 0a03 	mov.w	sl, #3
 800e34e:	e787      	b.n	800e260 <_scanf_float+0x188>
 800e350:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e354:	4639      	mov	r1, r7
 800e356:	4640      	mov	r0, r8
 800e358:	4798      	blx	r3
 800e35a:	2800      	cmp	r0, #0
 800e35c:	f43f aedf 	beq.w	800e11e <_scanf_float+0x46>
 800e360:	e6ea      	b.n	800e138 <_scanf_float+0x60>
 800e362:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e366:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e36a:	463a      	mov	r2, r7
 800e36c:	4640      	mov	r0, r8
 800e36e:	4798      	blx	r3
 800e370:	6923      	ldr	r3, [r4, #16]
 800e372:	3b01      	subs	r3, #1
 800e374:	6123      	str	r3, [r4, #16]
 800e376:	e6ec      	b.n	800e152 <_scanf_float+0x7a>
 800e378:	1e6b      	subs	r3, r5, #1
 800e37a:	2b06      	cmp	r3, #6
 800e37c:	d825      	bhi.n	800e3ca <_scanf_float+0x2f2>
 800e37e:	2d02      	cmp	r5, #2
 800e380:	d836      	bhi.n	800e3f0 <_scanf_float+0x318>
 800e382:	455e      	cmp	r6, fp
 800e384:	f67f aee8 	bls.w	800e158 <_scanf_float+0x80>
 800e388:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e38c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e390:	463a      	mov	r2, r7
 800e392:	4640      	mov	r0, r8
 800e394:	4798      	blx	r3
 800e396:	6923      	ldr	r3, [r4, #16]
 800e398:	3b01      	subs	r3, #1
 800e39a:	6123      	str	r3, [r4, #16]
 800e39c:	e7f1      	b.n	800e382 <_scanf_float+0x2aa>
 800e39e:	9802      	ldr	r0, [sp, #8]
 800e3a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e3a8:	9002      	str	r0, [sp, #8]
 800e3aa:	463a      	mov	r2, r7
 800e3ac:	4640      	mov	r0, r8
 800e3ae:	4798      	blx	r3
 800e3b0:	6923      	ldr	r3, [r4, #16]
 800e3b2:	3b01      	subs	r3, #1
 800e3b4:	6123      	str	r3, [r4, #16]
 800e3b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3ba:	fa5f fa8a 	uxtb.w	sl, sl
 800e3be:	f1ba 0f02 	cmp.w	sl, #2
 800e3c2:	d1ec      	bne.n	800e39e <_scanf_float+0x2c6>
 800e3c4:	3d03      	subs	r5, #3
 800e3c6:	b2ed      	uxtb	r5, r5
 800e3c8:	1b76      	subs	r6, r6, r5
 800e3ca:	6823      	ldr	r3, [r4, #0]
 800e3cc:	05da      	lsls	r2, r3, #23
 800e3ce:	d52f      	bpl.n	800e430 <_scanf_float+0x358>
 800e3d0:	055b      	lsls	r3, r3, #21
 800e3d2:	d510      	bpl.n	800e3f6 <_scanf_float+0x31e>
 800e3d4:	455e      	cmp	r6, fp
 800e3d6:	f67f aebf 	bls.w	800e158 <_scanf_float+0x80>
 800e3da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e3e2:	463a      	mov	r2, r7
 800e3e4:	4640      	mov	r0, r8
 800e3e6:	4798      	blx	r3
 800e3e8:	6923      	ldr	r3, [r4, #16]
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	6123      	str	r3, [r4, #16]
 800e3ee:	e7f1      	b.n	800e3d4 <_scanf_float+0x2fc>
 800e3f0:	46aa      	mov	sl, r5
 800e3f2:	9602      	str	r6, [sp, #8]
 800e3f4:	e7df      	b.n	800e3b6 <_scanf_float+0x2de>
 800e3f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e3fa:	6923      	ldr	r3, [r4, #16]
 800e3fc:	2965      	cmp	r1, #101	; 0x65
 800e3fe:	f103 33ff 	add.w	r3, r3, #4294967295
 800e402:	f106 35ff 	add.w	r5, r6, #4294967295
 800e406:	6123      	str	r3, [r4, #16]
 800e408:	d00c      	beq.n	800e424 <_scanf_float+0x34c>
 800e40a:	2945      	cmp	r1, #69	; 0x45
 800e40c:	d00a      	beq.n	800e424 <_scanf_float+0x34c>
 800e40e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e412:	463a      	mov	r2, r7
 800e414:	4640      	mov	r0, r8
 800e416:	4798      	blx	r3
 800e418:	6923      	ldr	r3, [r4, #16]
 800e41a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e41e:	3b01      	subs	r3, #1
 800e420:	1eb5      	subs	r5, r6, #2
 800e422:	6123      	str	r3, [r4, #16]
 800e424:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e428:	463a      	mov	r2, r7
 800e42a:	4640      	mov	r0, r8
 800e42c:	4798      	blx	r3
 800e42e:	462e      	mov	r6, r5
 800e430:	6825      	ldr	r5, [r4, #0]
 800e432:	f015 0510 	ands.w	r5, r5, #16
 800e436:	d158      	bne.n	800e4ea <_scanf_float+0x412>
 800e438:	7035      	strb	r5, [r6, #0]
 800e43a:	6823      	ldr	r3, [r4, #0]
 800e43c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e444:	d11c      	bne.n	800e480 <_scanf_float+0x3a8>
 800e446:	9b01      	ldr	r3, [sp, #4]
 800e448:	454b      	cmp	r3, r9
 800e44a:	eba3 0209 	sub.w	r2, r3, r9
 800e44e:	d124      	bne.n	800e49a <_scanf_float+0x3c2>
 800e450:	2200      	movs	r2, #0
 800e452:	4659      	mov	r1, fp
 800e454:	4640      	mov	r0, r8
 800e456:	f000 fe9d 	bl	800f194 <_strtod_r>
 800e45a:	9b03      	ldr	r3, [sp, #12]
 800e45c:	6821      	ldr	r1, [r4, #0]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f011 0f02 	tst.w	r1, #2
 800e464:	ec57 6b10 	vmov	r6, r7, d0
 800e468:	f103 0204 	add.w	r2, r3, #4
 800e46c:	d020      	beq.n	800e4b0 <_scanf_float+0x3d8>
 800e46e:	9903      	ldr	r1, [sp, #12]
 800e470:	600a      	str	r2, [r1, #0]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	e9c3 6700 	strd	r6, r7, [r3]
 800e478:	68e3      	ldr	r3, [r4, #12]
 800e47a:	3301      	adds	r3, #1
 800e47c:	60e3      	str	r3, [r4, #12]
 800e47e:	e66c      	b.n	800e15a <_scanf_float+0x82>
 800e480:	9b04      	ldr	r3, [sp, #16]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d0e4      	beq.n	800e450 <_scanf_float+0x378>
 800e486:	9905      	ldr	r1, [sp, #20]
 800e488:	230a      	movs	r3, #10
 800e48a:	462a      	mov	r2, r5
 800e48c:	3101      	adds	r1, #1
 800e48e:	4640      	mov	r0, r8
 800e490:	f000 ff72 	bl	800f378 <_strtol_r>
 800e494:	9b04      	ldr	r3, [sp, #16]
 800e496:	9e05      	ldr	r6, [sp, #20]
 800e498:	1ac2      	subs	r2, r0, r3
 800e49a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e49e:	429e      	cmp	r6, r3
 800e4a0:	bf28      	it	cs
 800e4a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e4a6:	4912      	ldr	r1, [pc, #72]	; (800e4f0 <_scanf_float+0x418>)
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	f000 f82b 	bl	800e504 <siprintf>
 800e4ae:	e7cf      	b.n	800e450 <_scanf_float+0x378>
 800e4b0:	f011 0f04 	tst.w	r1, #4
 800e4b4:	9903      	ldr	r1, [sp, #12]
 800e4b6:	600a      	str	r2, [r1, #0]
 800e4b8:	d1db      	bne.n	800e472 <_scanf_float+0x39a>
 800e4ba:	f8d3 8000 	ldr.w	r8, [r3]
 800e4be:	ee10 2a10 	vmov	r2, s0
 800e4c2:	ee10 0a10 	vmov	r0, s0
 800e4c6:	463b      	mov	r3, r7
 800e4c8:	4639      	mov	r1, r7
 800e4ca:	f7f2 fb47 	bl	8000b5c <__aeabi_dcmpun>
 800e4ce:	b128      	cbz	r0, 800e4dc <_scanf_float+0x404>
 800e4d0:	4808      	ldr	r0, [pc, #32]	; (800e4f4 <_scanf_float+0x41c>)
 800e4d2:	f000 f811 	bl	800e4f8 <nanf>
 800e4d6:	ed88 0a00 	vstr	s0, [r8]
 800e4da:	e7cd      	b.n	800e478 <_scanf_float+0x3a0>
 800e4dc:	4630      	mov	r0, r6
 800e4de:	4639      	mov	r1, r7
 800e4e0:	f7f2 fb9a 	bl	8000c18 <__aeabi_d2f>
 800e4e4:	f8c8 0000 	str.w	r0, [r8]
 800e4e8:	e7c6      	b.n	800e478 <_scanf_float+0x3a0>
 800e4ea:	2500      	movs	r5, #0
 800e4ec:	e635      	b.n	800e15a <_scanf_float+0x82>
 800e4ee:	bf00      	nop
 800e4f0:	08025904 	.word	0x08025904
 800e4f4:	08025a13 	.word	0x08025a13

0800e4f8 <nanf>:
 800e4f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e500 <nanf+0x8>
 800e4fc:	4770      	bx	lr
 800e4fe:	bf00      	nop
 800e500:	7fc00000 	.word	0x7fc00000

0800e504 <siprintf>:
 800e504:	b40e      	push	{r1, r2, r3}
 800e506:	b500      	push	{lr}
 800e508:	b09c      	sub	sp, #112	; 0x70
 800e50a:	ab1d      	add	r3, sp, #116	; 0x74
 800e50c:	9002      	str	r0, [sp, #8]
 800e50e:	9006      	str	r0, [sp, #24]
 800e510:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e514:	4809      	ldr	r0, [pc, #36]	; (800e53c <siprintf+0x38>)
 800e516:	9107      	str	r1, [sp, #28]
 800e518:	9104      	str	r1, [sp, #16]
 800e51a:	4909      	ldr	r1, [pc, #36]	; (800e540 <siprintf+0x3c>)
 800e51c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e520:	9105      	str	r1, [sp, #20]
 800e522:	6800      	ldr	r0, [r0, #0]
 800e524:	9301      	str	r3, [sp, #4]
 800e526:	a902      	add	r1, sp, #8
 800e528:	f002 ff48 	bl	80113bc <_svfiprintf_r>
 800e52c:	9b02      	ldr	r3, [sp, #8]
 800e52e:	2200      	movs	r2, #0
 800e530:	701a      	strb	r2, [r3, #0]
 800e532:	b01c      	add	sp, #112	; 0x70
 800e534:	f85d eb04 	ldr.w	lr, [sp], #4
 800e538:	b003      	add	sp, #12
 800e53a:	4770      	bx	lr
 800e53c:	20000040 	.word	0x20000040
 800e540:	ffff0208 	.word	0xffff0208

0800e544 <sulp>:
 800e544:	b570      	push	{r4, r5, r6, lr}
 800e546:	4604      	mov	r4, r0
 800e548:	460d      	mov	r5, r1
 800e54a:	ec45 4b10 	vmov	d0, r4, r5
 800e54e:	4616      	mov	r6, r2
 800e550:	f002 fcd0 	bl	8010ef4 <__ulp>
 800e554:	ec51 0b10 	vmov	r0, r1, d0
 800e558:	b17e      	cbz	r6, 800e57a <sulp+0x36>
 800e55a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e55e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e562:	2b00      	cmp	r3, #0
 800e564:	dd09      	ble.n	800e57a <sulp+0x36>
 800e566:	051b      	lsls	r3, r3, #20
 800e568:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e56c:	2400      	movs	r4, #0
 800e56e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e572:	4622      	mov	r2, r4
 800e574:	462b      	mov	r3, r5
 800e576:	f7f2 f857 	bl	8000628 <__aeabi_dmul>
 800e57a:	bd70      	pop	{r4, r5, r6, pc}
 800e57c:	0000      	movs	r0, r0
	...

0800e580 <_strtod_l>:
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	b0a3      	sub	sp, #140	; 0x8c
 800e586:	461f      	mov	r7, r3
 800e588:	2300      	movs	r3, #0
 800e58a:	931e      	str	r3, [sp, #120]	; 0x78
 800e58c:	4ba4      	ldr	r3, [pc, #656]	; (800e820 <_strtod_l+0x2a0>)
 800e58e:	9219      	str	r2, [sp, #100]	; 0x64
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	9307      	str	r3, [sp, #28]
 800e594:	4604      	mov	r4, r0
 800e596:	4618      	mov	r0, r3
 800e598:	4688      	mov	r8, r1
 800e59a:	f7f1 fe2b 	bl	80001f4 <strlen>
 800e59e:	f04f 0a00 	mov.w	sl, #0
 800e5a2:	4605      	mov	r5, r0
 800e5a4:	f04f 0b00 	mov.w	fp, #0
 800e5a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e5ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e5ae:	781a      	ldrb	r2, [r3, #0]
 800e5b0:	2a2b      	cmp	r2, #43	; 0x2b
 800e5b2:	d04c      	beq.n	800e64e <_strtod_l+0xce>
 800e5b4:	d839      	bhi.n	800e62a <_strtod_l+0xaa>
 800e5b6:	2a0d      	cmp	r2, #13
 800e5b8:	d832      	bhi.n	800e620 <_strtod_l+0xa0>
 800e5ba:	2a08      	cmp	r2, #8
 800e5bc:	d832      	bhi.n	800e624 <_strtod_l+0xa4>
 800e5be:	2a00      	cmp	r2, #0
 800e5c0:	d03c      	beq.n	800e63c <_strtod_l+0xbc>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	930e      	str	r3, [sp, #56]	; 0x38
 800e5c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e5c8:	7833      	ldrb	r3, [r6, #0]
 800e5ca:	2b30      	cmp	r3, #48	; 0x30
 800e5cc:	f040 80b4 	bne.w	800e738 <_strtod_l+0x1b8>
 800e5d0:	7873      	ldrb	r3, [r6, #1]
 800e5d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e5d6:	2b58      	cmp	r3, #88	; 0x58
 800e5d8:	d16c      	bne.n	800e6b4 <_strtod_l+0x134>
 800e5da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5dc:	9301      	str	r3, [sp, #4]
 800e5de:	ab1e      	add	r3, sp, #120	; 0x78
 800e5e0:	9702      	str	r7, [sp, #8]
 800e5e2:	9300      	str	r3, [sp, #0]
 800e5e4:	4a8f      	ldr	r2, [pc, #572]	; (800e824 <_strtod_l+0x2a4>)
 800e5e6:	ab1f      	add	r3, sp, #124	; 0x7c
 800e5e8:	a91d      	add	r1, sp, #116	; 0x74
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	f001 fde2 	bl	80101b4 <__gethex>
 800e5f0:	f010 0707 	ands.w	r7, r0, #7
 800e5f4:	4605      	mov	r5, r0
 800e5f6:	d005      	beq.n	800e604 <_strtod_l+0x84>
 800e5f8:	2f06      	cmp	r7, #6
 800e5fa:	d12a      	bne.n	800e652 <_strtod_l+0xd2>
 800e5fc:	3601      	adds	r6, #1
 800e5fe:	2300      	movs	r3, #0
 800e600:	961d      	str	r6, [sp, #116]	; 0x74
 800e602:	930e      	str	r3, [sp, #56]	; 0x38
 800e604:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e606:	2b00      	cmp	r3, #0
 800e608:	f040 8596 	bne.w	800f138 <_strtod_l+0xbb8>
 800e60c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e60e:	b1db      	cbz	r3, 800e648 <_strtod_l+0xc8>
 800e610:	4652      	mov	r2, sl
 800e612:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e616:	ec43 2b10 	vmov	d0, r2, r3
 800e61a:	b023      	add	sp, #140	; 0x8c
 800e61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e620:	2a20      	cmp	r2, #32
 800e622:	d1ce      	bne.n	800e5c2 <_strtod_l+0x42>
 800e624:	3301      	adds	r3, #1
 800e626:	931d      	str	r3, [sp, #116]	; 0x74
 800e628:	e7c0      	b.n	800e5ac <_strtod_l+0x2c>
 800e62a:	2a2d      	cmp	r2, #45	; 0x2d
 800e62c:	d1c9      	bne.n	800e5c2 <_strtod_l+0x42>
 800e62e:	2201      	movs	r2, #1
 800e630:	920e      	str	r2, [sp, #56]	; 0x38
 800e632:	1c5a      	adds	r2, r3, #1
 800e634:	921d      	str	r2, [sp, #116]	; 0x74
 800e636:	785b      	ldrb	r3, [r3, #1]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d1c4      	bne.n	800e5c6 <_strtod_l+0x46>
 800e63c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e63e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e642:	2b00      	cmp	r3, #0
 800e644:	f040 8576 	bne.w	800f134 <_strtod_l+0xbb4>
 800e648:	4652      	mov	r2, sl
 800e64a:	465b      	mov	r3, fp
 800e64c:	e7e3      	b.n	800e616 <_strtod_l+0x96>
 800e64e:	2200      	movs	r2, #0
 800e650:	e7ee      	b.n	800e630 <_strtod_l+0xb0>
 800e652:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e654:	b13a      	cbz	r2, 800e666 <_strtod_l+0xe6>
 800e656:	2135      	movs	r1, #53	; 0x35
 800e658:	a820      	add	r0, sp, #128	; 0x80
 800e65a:	f002 fd56 	bl	801110a <__copybits>
 800e65e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e660:	4620      	mov	r0, r4
 800e662:	f002 f91b 	bl	801089c <_Bfree>
 800e666:	3f01      	subs	r7, #1
 800e668:	2f05      	cmp	r7, #5
 800e66a:	d807      	bhi.n	800e67c <_strtod_l+0xfc>
 800e66c:	e8df f007 	tbb	[pc, r7]
 800e670:	1d180b0e 	.word	0x1d180b0e
 800e674:	030e      	.short	0x030e
 800e676:	f04f 0b00 	mov.w	fp, #0
 800e67a:	46da      	mov	sl, fp
 800e67c:	0728      	lsls	r0, r5, #28
 800e67e:	d5c1      	bpl.n	800e604 <_strtod_l+0x84>
 800e680:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e684:	e7be      	b.n	800e604 <_strtod_l+0x84>
 800e686:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e68a:	e7f7      	b.n	800e67c <_strtod_l+0xfc>
 800e68c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e690:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e692:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e696:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e69a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e69e:	e7ed      	b.n	800e67c <_strtod_l+0xfc>
 800e6a0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e828 <_strtod_l+0x2a8>
 800e6a4:	f04f 0a00 	mov.w	sl, #0
 800e6a8:	e7e8      	b.n	800e67c <_strtod_l+0xfc>
 800e6aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e6ae:	f04f 3aff 	mov.w	sl, #4294967295
 800e6b2:	e7e3      	b.n	800e67c <_strtod_l+0xfc>
 800e6b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6b6:	1c5a      	adds	r2, r3, #1
 800e6b8:	921d      	str	r2, [sp, #116]	; 0x74
 800e6ba:	785b      	ldrb	r3, [r3, #1]
 800e6bc:	2b30      	cmp	r3, #48	; 0x30
 800e6be:	d0f9      	beq.n	800e6b4 <_strtod_l+0x134>
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d09f      	beq.n	800e604 <_strtod_l+0x84>
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	f04f 0900 	mov.w	r9, #0
 800e6ca:	9304      	str	r3, [sp, #16]
 800e6cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6ce:	930a      	str	r3, [sp, #40]	; 0x28
 800e6d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e6d4:	464f      	mov	r7, r9
 800e6d6:	220a      	movs	r2, #10
 800e6d8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e6da:	7806      	ldrb	r6, [r0, #0]
 800e6dc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e6e0:	b2d9      	uxtb	r1, r3
 800e6e2:	2909      	cmp	r1, #9
 800e6e4:	d92a      	bls.n	800e73c <_strtod_l+0x1bc>
 800e6e6:	9907      	ldr	r1, [sp, #28]
 800e6e8:	462a      	mov	r2, r5
 800e6ea:	f003 f8d9 	bl	80118a0 <strncmp>
 800e6ee:	b398      	cbz	r0, 800e758 <_strtod_l+0x1d8>
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	4633      	mov	r3, r6
 800e6f4:	463d      	mov	r5, r7
 800e6f6:	9007      	str	r0, [sp, #28]
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	2b65      	cmp	r3, #101	; 0x65
 800e6fc:	d001      	beq.n	800e702 <_strtod_l+0x182>
 800e6fe:	2b45      	cmp	r3, #69	; 0x45
 800e700:	d118      	bne.n	800e734 <_strtod_l+0x1b4>
 800e702:	b91d      	cbnz	r5, 800e70c <_strtod_l+0x18c>
 800e704:	9b04      	ldr	r3, [sp, #16]
 800e706:	4303      	orrs	r3, r0
 800e708:	d098      	beq.n	800e63c <_strtod_l+0xbc>
 800e70a:	2500      	movs	r5, #0
 800e70c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e710:	f108 0301 	add.w	r3, r8, #1
 800e714:	931d      	str	r3, [sp, #116]	; 0x74
 800e716:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e71a:	2b2b      	cmp	r3, #43	; 0x2b
 800e71c:	d075      	beq.n	800e80a <_strtod_l+0x28a>
 800e71e:	2b2d      	cmp	r3, #45	; 0x2d
 800e720:	d07b      	beq.n	800e81a <_strtod_l+0x29a>
 800e722:	f04f 0c00 	mov.w	ip, #0
 800e726:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e72a:	2909      	cmp	r1, #9
 800e72c:	f240 8082 	bls.w	800e834 <_strtod_l+0x2b4>
 800e730:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e734:	2600      	movs	r6, #0
 800e736:	e09d      	b.n	800e874 <_strtod_l+0x2f4>
 800e738:	2300      	movs	r3, #0
 800e73a:	e7c4      	b.n	800e6c6 <_strtod_l+0x146>
 800e73c:	2f08      	cmp	r7, #8
 800e73e:	bfd8      	it	le
 800e740:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e742:	f100 0001 	add.w	r0, r0, #1
 800e746:	bfda      	itte	le
 800e748:	fb02 3301 	mlale	r3, r2, r1, r3
 800e74c:	9309      	strle	r3, [sp, #36]	; 0x24
 800e74e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e752:	3701      	adds	r7, #1
 800e754:	901d      	str	r0, [sp, #116]	; 0x74
 800e756:	e7bf      	b.n	800e6d8 <_strtod_l+0x158>
 800e758:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e75a:	195a      	adds	r2, r3, r5
 800e75c:	921d      	str	r2, [sp, #116]	; 0x74
 800e75e:	5d5b      	ldrb	r3, [r3, r5]
 800e760:	2f00      	cmp	r7, #0
 800e762:	d037      	beq.n	800e7d4 <_strtod_l+0x254>
 800e764:	9007      	str	r0, [sp, #28]
 800e766:	463d      	mov	r5, r7
 800e768:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e76c:	2a09      	cmp	r2, #9
 800e76e:	d912      	bls.n	800e796 <_strtod_l+0x216>
 800e770:	2201      	movs	r2, #1
 800e772:	e7c2      	b.n	800e6fa <_strtod_l+0x17a>
 800e774:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e776:	1c5a      	adds	r2, r3, #1
 800e778:	921d      	str	r2, [sp, #116]	; 0x74
 800e77a:	785b      	ldrb	r3, [r3, #1]
 800e77c:	3001      	adds	r0, #1
 800e77e:	2b30      	cmp	r3, #48	; 0x30
 800e780:	d0f8      	beq.n	800e774 <_strtod_l+0x1f4>
 800e782:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e786:	2a08      	cmp	r2, #8
 800e788:	f200 84db 	bhi.w	800f142 <_strtod_l+0xbc2>
 800e78c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e78e:	9007      	str	r0, [sp, #28]
 800e790:	2000      	movs	r0, #0
 800e792:	920a      	str	r2, [sp, #40]	; 0x28
 800e794:	4605      	mov	r5, r0
 800e796:	3b30      	subs	r3, #48	; 0x30
 800e798:	f100 0201 	add.w	r2, r0, #1
 800e79c:	d014      	beq.n	800e7c8 <_strtod_l+0x248>
 800e79e:	9907      	ldr	r1, [sp, #28]
 800e7a0:	4411      	add	r1, r2
 800e7a2:	9107      	str	r1, [sp, #28]
 800e7a4:	462a      	mov	r2, r5
 800e7a6:	eb00 0e05 	add.w	lr, r0, r5
 800e7aa:	210a      	movs	r1, #10
 800e7ac:	4572      	cmp	r2, lr
 800e7ae:	d113      	bne.n	800e7d8 <_strtod_l+0x258>
 800e7b0:	182a      	adds	r2, r5, r0
 800e7b2:	2a08      	cmp	r2, #8
 800e7b4:	f105 0501 	add.w	r5, r5, #1
 800e7b8:	4405      	add	r5, r0
 800e7ba:	dc1c      	bgt.n	800e7f6 <_strtod_l+0x276>
 800e7bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7be:	220a      	movs	r2, #10
 800e7c0:	fb02 3301 	mla	r3, r2, r1, r3
 800e7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7ca:	1c59      	adds	r1, r3, #1
 800e7cc:	911d      	str	r1, [sp, #116]	; 0x74
 800e7ce:	785b      	ldrb	r3, [r3, #1]
 800e7d0:	4610      	mov	r0, r2
 800e7d2:	e7c9      	b.n	800e768 <_strtod_l+0x1e8>
 800e7d4:	4638      	mov	r0, r7
 800e7d6:	e7d2      	b.n	800e77e <_strtod_l+0x1fe>
 800e7d8:	2a08      	cmp	r2, #8
 800e7da:	dc04      	bgt.n	800e7e6 <_strtod_l+0x266>
 800e7dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e7de:	434e      	muls	r6, r1
 800e7e0:	9609      	str	r6, [sp, #36]	; 0x24
 800e7e2:	3201      	adds	r2, #1
 800e7e4:	e7e2      	b.n	800e7ac <_strtod_l+0x22c>
 800e7e6:	f102 0c01 	add.w	ip, r2, #1
 800e7ea:	f1bc 0f10 	cmp.w	ip, #16
 800e7ee:	bfd8      	it	le
 800e7f0:	fb01 f909 	mulle.w	r9, r1, r9
 800e7f4:	e7f5      	b.n	800e7e2 <_strtod_l+0x262>
 800e7f6:	2d10      	cmp	r5, #16
 800e7f8:	bfdc      	itt	le
 800e7fa:	220a      	movle	r2, #10
 800e7fc:	fb02 3909 	mlale	r9, r2, r9, r3
 800e800:	e7e1      	b.n	800e7c6 <_strtod_l+0x246>
 800e802:	2300      	movs	r3, #0
 800e804:	9307      	str	r3, [sp, #28]
 800e806:	2201      	movs	r2, #1
 800e808:	e77c      	b.n	800e704 <_strtod_l+0x184>
 800e80a:	f04f 0c00 	mov.w	ip, #0
 800e80e:	f108 0302 	add.w	r3, r8, #2
 800e812:	931d      	str	r3, [sp, #116]	; 0x74
 800e814:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e818:	e785      	b.n	800e726 <_strtod_l+0x1a6>
 800e81a:	f04f 0c01 	mov.w	ip, #1
 800e81e:	e7f6      	b.n	800e80e <_strtod_l+0x28e>
 800e820:	08025bfc 	.word	0x08025bfc
 800e824:	0802590c 	.word	0x0802590c
 800e828:	7ff00000 	.word	0x7ff00000
 800e82c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e82e:	1c59      	adds	r1, r3, #1
 800e830:	911d      	str	r1, [sp, #116]	; 0x74
 800e832:	785b      	ldrb	r3, [r3, #1]
 800e834:	2b30      	cmp	r3, #48	; 0x30
 800e836:	d0f9      	beq.n	800e82c <_strtod_l+0x2ac>
 800e838:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e83c:	2908      	cmp	r1, #8
 800e83e:	f63f af79 	bhi.w	800e734 <_strtod_l+0x1b4>
 800e842:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e846:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e848:	9308      	str	r3, [sp, #32]
 800e84a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e84c:	1c59      	adds	r1, r3, #1
 800e84e:	911d      	str	r1, [sp, #116]	; 0x74
 800e850:	785b      	ldrb	r3, [r3, #1]
 800e852:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e856:	2e09      	cmp	r6, #9
 800e858:	d937      	bls.n	800e8ca <_strtod_l+0x34a>
 800e85a:	9e08      	ldr	r6, [sp, #32]
 800e85c:	1b89      	subs	r1, r1, r6
 800e85e:	2908      	cmp	r1, #8
 800e860:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e864:	dc02      	bgt.n	800e86c <_strtod_l+0x2ec>
 800e866:	4576      	cmp	r6, lr
 800e868:	bfa8      	it	ge
 800e86a:	4676      	movge	r6, lr
 800e86c:	f1bc 0f00 	cmp.w	ip, #0
 800e870:	d000      	beq.n	800e874 <_strtod_l+0x2f4>
 800e872:	4276      	negs	r6, r6
 800e874:	2d00      	cmp	r5, #0
 800e876:	d14f      	bne.n	800e918 <_strtod_l+0x398>
 800e878:	9904      	ldr	r1, [sp, #16]
 800e87a:	4301      	orrs	r1, r0
 800e87c:	f47f aec2 	bne.w	800e604 <_strtod_l+0x84>
 800e880:	2a00      	cmp	r2, #0
 800e882:	f47f aedb 	bne.w	800e63c <_strtod_l+0xbc>
 800e886:	2b69      	cmp	r3, #105	; 0x69
 800e888:	d027      	beq.n	800e8da <_strtod_l+0x35a>
 800e88a:	dc24      	bgt.n	800e8d6 <_strtod_l+0x356>
 800e88c:	2b49      	cmp	r3, #73	; 0x49
 800e88e:	d024      	beq.n	800e8da <_strtod_l+0x35a>
 800e890:	2b4e      	cmp	r3, #78	; 0x4e
 800e892:	f47f aed3 	bne.w	800e63c <_strtod_l+0xbc>
 800e896:	499e      	ldr	r1, [pc, #632]	; (800eb10 <_strtod_l+0x590>)
 800e898:	a81d      	add	r0, sp, #116	; 0x74
 800e89a:	f001 fee3 	bl	8010664 <__match>
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	f43f aecc 	beq.w	800e63c <_strtod_l+0xbc>
 800e8a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	2b28      	cmp	r3, #40	; 0x28
 800e8aa:	d12d      	bne.n	800e908 <_strtod_l+0x388>
 800e8ac:	4999      	ldr	r1, [pc, #612]	; (800eb14 <_strtod_l+0x594>)
 800e8ae:	aa20      	add	r2, sp, #128	; 0x80
 800e8b0:	a81d      	add	r0, sp, #116	; 0x74
 800e8b2:	f001 feeb 	bl	801068c <__hexnan>
 800e8b6:	2805      	cmp	r0, #5
 800e8b8:	d126      	bne.n	800e908 <_strtod_l+0x388>
 800e8ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8bc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e8c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e8c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e8c8:	e69c      	b.n	800e604 <_strtod_l+0x84>
 800e8ca:	210a      	movs	r1, #10
 800e8cc:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e8d0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e8d4:	e7b9      	b.n	800e84a <_strtod_l+0x2ca>
 800e8d6:	2b6e      	cmp	r3, #110	; 0x6e
 800e8d8:	e7db      	b.n	800e892 <_strtod_l+0x312>
 800e8da:	498f      	ldr	r1, [pc, #572]	; (800eb18 <_strtod_l+0x598>)
 800e8dc:	a81d      	add	r0, sp, #116	; 0x74
 800e8de:	f001 fec1 	bl	8010664 <__match>
 800e8e2:	2800      	cmp	r0, #0
 800e8e4:	f43f aeaa 	beq.w	800e63c <_strtod_l+0xbc>
 800e8e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8ea:	498c      	ldr	r1, [pc, #560]	; (800eb1c <_strtod_l+0x59c>)
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	a81d      	add	r0, sp, #116	; 0x74
 800e8f0:	931d      	str	r3, [sp, #116]	; 0x74
 800e8f2:	f001 feb7 	bl	8010664 <__match>
 800e8f6:	b910      	cbnz	r0, 800e8fe <_strtod_l+0x37e>
 800e8f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	931d      	str	r3, [sp, #116]	; 0x74
 800e8fe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800eb2c <_strtod_l+0x5ac>
 800e902:	f04f 0a00 	mov.w	sl, #0
 800e906:	e67d      	b.n	800e604 <_strtod_l+0x84>
 800e908:	4885      	ldr	r0, [pc, #532]	; (800eb20 <_strtod_l+0x5a0>)
 800e90a:	f002 ffb1 	bl	8011870 <nan>
 800e90e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e912:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e916:	e675      	b.n	800e604 <_strtod_l+0x84>
 800e918:	9b07      	ldr	r3, [sp, #28]
 800e91a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e91c:	1af3      	subs	r3, r6, r3
 800e91e:	2f00      	cmp	r7, #0
 800e920:	bf08      	it	eq
 800e922:	462f      	moveq	r7, r5
 800e924:	2d10      	cmp	r5, #16
 800e926:	9308      	str	r3, [sp, #32]
 800e928:	46a8      	mov	r8, r5
 800e92a:	bfa8      	it	ge
 800e92c:	f04f 0810 	movge.w	r8, #16
 800e930:	f7f1 fe00 	bl	8000534 <__aeabi_ui2d>
 800e934:	2d09      	cmp	r5, #9
 800e936:	4682      	mov	sl, r0
 800e938:	468b      	mov	fp, r1
 800e93a:	dd13      	ble.n	800e964 <_strtod_l+0x3e4>
 800e93c:	4b79      	ldr	r3, [pc, #484]	; (800eb24 <_strtod_l+0x5a4>)
 800e93e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e942:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e946:	f7f1 fe6f 	bl	8000628 <__aeabi_dmul>
 800e94a:	4682      	mov	sl, r0
 800e94c:	4648      	mov	r0, r9
 800e94e:	468b      	mov	fp, r1
 800e950:	f7f1 fdf0 	bl	8000534 <__aeabi_ui2d>
 800e954:	4602      	mov	r2, r0
 800e956:	460b      	mov	r3, r1
 800e958:	4650      	mov	r0, sl
 800e95a:	4659      	mov	r1, fp
 800e95c:	f7f1 fcae 	bl	80002bc <__adddf3>
 800e960:	4682      	mov	sl, r0
 800e962:	468b      	mov	fp, r1
 800e964:	2d0f      	cmp	r5, #15
 800e966:	dc38      	bgt.n	800e9da <_strtod_l+0x45a>
 800e968:	9b08      	ldr	r3, [sp, #32]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	f43f ae4a 	beq.w	800e604 <_strtod_l+0x84>
 800e970:	dd24      	ble.n	800e9bc <_strtod_l+0x43c>
 800e972:	2b16      	cmp	r3, #22
 800e974:	dc0b      	bgt.n	800e98e <_strtod_l+0x40e>
 800e976:	4d6b      	ldr	r5, [pc, #428]	; (800eb24 <_strtod_l+0x5a4>)
 800e978:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e97c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e980:	4652      	mov	r2, sl
 800e982:	465b      	mov	r3, fp
 800e984:	f7f1 fe50 	bl	8000628 <__aeabi_dmul>
 800e988:	4682      	mov	sl, r0
 800e98a:	468b      	mov	fp, r1
 800e98c:	e63a      	b.n	800e604 <_strtod_l+0x84>
 800e98e:	9a08      	ldr	r2, [sp, #32]
 800e990:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e994:	4293      	cmp	r3, r2
 800e996:	db20      	blt.n	800e9da <_strtod_l+0x45a>
 800e998:	4c62      	ldr	r4, [pc, #392]	; (800eb24 <_strtod_l+0x5a4>)
 800e99a:	f1c5 050f 	rsb	r5, r5, #15
 800e99e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e9a2:	4652      	mov	r2, sl
 800e9a4:	465b      	mov	r3, fp
 800e9a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9aa:	f7f1 fe3d 	bl	8000628 <__aeabi_dmul>
 800e9ae:	9b08      	ldr	r3, [sp, #32]
 800e9b0:	1b5d      	subs	r5, r3, r5
 800e9b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e9b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e9ba:	e7e3      	b.n	800e984 <_strtod_l+0x404>
 800e9bc:	9b08      	ldr	r3, [sp, #32]
 800e9be:	3316      	adds	r3, #22
 800e9c0:	db0b      	blt.n	800e9da <_strtod_l+0x45a>
 800e9c2:	9b07      	ldr	r3, [sp, #28]
 800e9c4:	4a57      	ldr	r2, [pc, #348]	; (800eb24 <_strtod_l+0x5a4>)
 800e9c6:	1b9e      	subs	r6, r3, r6
 800e9c8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e9cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e9d0:	4650      	mov	r0, sl
 800e9d2:	4659      	mov	r1, fp
 800e9d4:	f7f1 ff52 	bl	800087c <__aeabi_ddiv>
 800e9d8:	e7d6      	b.n	800e988 <_strtod_l+0x408>
 800e9da:	9b08      	ldr	r3, [sp, #32]
 800e9dc:	eba5 0808 	sub.w	r8, r5, r8
 800e9e0:	4498      	add	r8, r3
 800e9e2:	f1b8 0f00 	cmp.w	r8, #0
 800e9e6:	dd71      	ble.n	800eacc <_strtod_l+0x54c>
 800e9e8:	f018 030f 	ands.w	r3, r8, #15
 800e9ec:	d00a      	beq.n	800ea04 <_strtod_l+0x484>
 800e9ee:	494d      	ldr	r1, [pc, #308]	; (800eb24 <_strtod_l+0x5a4>)
 800e9f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e9f4:	4652      	mov	r2, sl
 800e9f6:	465b      	mov	r3, fp
 800e9f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9fc:	f7f1 fe14 	bl	8000628 <__aeabi_dmul>
 800ea00:	4682      	mov	sl, r0
 800ea02:	468b      	mov	fp, r1
 800ea04:	f038 080f 	bics.w	r8, r8, #15
 800ea08:	d04d      	beq.n	800eaa6 <_strtod_l+0x526>
 800ea0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ea0e:	dd22      	ble.n	800ea56 <_strtod_l+0x4d6>
 800ea10:	2500      	movs	r5, #0
 800ea12:	462e      	mov	r6, r5
 800ea14:	9509      	str	r5, [sp, #36]	; 0x24
 800ea16:	9507      	str	r5, [sp, #28]
 800ea18:	2322      	movs	r3, #34	; 0x22
 800ea1a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800eb2c <_strtod_l+0x5ac>
 800ea1e:	6023      	str	r3, [r4, #0]
 800ea20:	f04f 0a00 	mov.w	sl, #0
 800ea24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	f43f adec 	beq.w	800e604 <_strtod_l+0x84>
 800ea2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ea2e:	4620      	mov	r0, r4
 800ea30:	f001 ff34 	bl	801089c <_Bfree>
 800ea34:	9907      	ldr	r1, [sp, #28]
 800ea36:	4620      	mov	r0, r4
 800ea38:	f001 ff30 	bl	801089c <_Bfree>
 800ea3c:	4631      	mov	r1, r6
 800ea3e:	4620      	mov	r0, r4
 800ea40:	f001 ff2c 	bl	801089c <_Bfree>
 800ea44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea46:	4620      	mov	r0, r4
 800ea48:	f001 ff28 	bl	801089c <_Bfree>
 800ea4c:	4629      	mov	r1, r5
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f001 ff24 	bl	801089c <_Bfree>
 800ea54:	e5d6      	b.n	800e604 <_strtod_l+0x84>
 800ea56:	2300      	movs	r3, #0
 800ea58:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ea5c:	4650      	mov	r0, sl
 800ea5e:	4659      	mov	r1, fp
 800ea60:	4699      	mov	r9, r3
 800ea62:	f1b8 0f01 	cmp.w	r8, #1
 800ea66:	dc21      	bgt.n	800eaac <_strtod_l+0x52c>
 800ea68:	b10b      	cbz	r3, 800ea6e <_strtod_l+0x4ee>
 800ea6a:	4682      	mov	sl, r0
 800ea6c:	468b      	mov	fp, r1
 800ea6e:	4b2e      	ldr	r3, [pc, #184]	; (800eb28 <_strtod_l+0x5a8>)
 800ea70:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ea74:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ea78:	4652      	mov	r2, sl
 800ea7a:	465b      	mov	r3, fp
 800ea7c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ea80:	f7f1 fdd2 	bl	8000628 <__aeabi_dmul>
 800ea84:	4b29      	ldr	r3, [pc, #164]	; (800eb2c <_strtod_l+0x5ac>)
 800ea86:	460a      	mov	r2, r1
 800ea88:	400b      	ands	r3, r1
 800ea8a:	4929      	ldr	r1, [pc, #164]	; (800eb30 <_strtod_l+0x5b0>)
 800ea8c:	428b      	cmp	r3, r1
 800ea8e:	4682      	mov	sl, r0
 800ea90:	d8be      	bhi.n	800ea10 <_strtod_l+0x490>
 800ea92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ea96:	428b      	cmp	r3, r1
 800ea98:	bf86      	itte	hi
 800ea9a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800eb34 <_strtod_l+0x5b4>
 800ea9e:	f04f 3aff 	movhi.w	sl, #4294967295
 800eaa2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	9304      	str	r3, [sp, #16]
 800eaaa:	e081      	b.n	800ebb0 <_strtod_l+0x630>
 800eaac:	f018 0f01 	tst.w	r8, #1
 800eab0:	d007      	beq.n	800eac2 <_strtod_l+0x542>
 800eab2:	4b1d      	ldr	r3, [pc, #116]	; (800eb28 <_strtod_l+0x5a8>)
 800eab4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800eab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eabc:	f7f1 fdb4 	bl	8000628 <__aeabi_dmul>
 800eac0:	2301      	movs	r3, #1
 800eac2:	f109 0901 	add.w	r9, r9, #1
 800eac6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eaca:	e7ca      	b.n	800ea62 <_strtod_l+0x4e2>
 800eacc:	d0eb      	beq.n	800eaa6 <_strtod_l+0x526>
 800eace:	f1c8 0800 	rsb	r8, r8, #0
 800ead2:	f018 020f 	ands.w	r2, r8, #15
 800ead6:	d00a      	beq.n	800eaee <_strtod_l+0x56e>
 800ead8:	4b12      	ldr	r3, [pc, #72]	; (800eb24 <_strtod_l+0x5a4>)
 800eada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eade:	4650      	mov	r0, sl
 800eae0:	4659      	mov	r1, fp
 800eae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae6:	f7f1 fec9 	bl	800087c <__aeabi_ddiv>
 800eaea:	4682      	mov	sl, r0
 800eaec:	468b      	mov	fp, r1
 800eaee:	ea5f 1828 	movs.w	r8, r8, asr #4
 800eaf2:	d0d8      	beq.n	800eaa6 <_strtod_l+0x526>
 800eaf4:	f1b8 0f1f 	cmp.w	r8, #31
 800eaf8:	dd1e      	ble.n	800eb38 <_strtod_l+0x5b8>
 800eafa:	2500      	movs	r5, #0
 800eafc:	462e      	mov	r6, r5
 800eafe:	9509      	str	r5, [sp, #36]	; 0x24
 800eb00:	9507      	str	r5, [sp, #28]
 800eb02:	2322      	movs	r3, #34	; 0x22
 800eb04:	f04f 0a00 	mov.w	sl, #0
 800eb08:	f04f 0b00 	mov.w	fp, #0
 800eb0c:	6023      	str	r3, [r4, #0]
 800eb0e:	e789      	b.n	800ea24 <_strtod_l+0x4a4>
 800eb10:	080258dd 	.word	0x080258dd
 800eb14:	08025920 	.word	0x08025920
 800eb18:	080258d5 	.word	0x080258d5
 800eb1c:	08025b18 	.word	0x08025b18
 800eb20:	08025a13 	.word	0x08025a13
 800eb24:	08025c98 	.word	0x08025c98
 800eb28:	08025c70 	.word	0x08025c70
 800eb2c:	7ff00000 	.word	0x7ff00000
 800eb30:	7ca00000 	.word	0x7ca00000
 800eb34:	7fefffff 	.word	0x7fefffff
 800eb38:	f018 0310 	ands.w	r3, r8, #16
 800eb3c:	bf18      	it	ne
 800eb3e:	236a      	movne	r3, #106	; 0x6a
 800eb40:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800eef8 <_strtod_l+0x978>
 800eb44:	9304      	str	r3, [sp, #16]
 800eb46:	4650      	mov	r0, sl
 800eb48:	4659      	mov	r1, fp
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	f018 0f01 	tst.w	r8, #1
 800eb50:	d004      	beq.n	800eb5c <_strtod_l+0x5dc>
 800eb52:	e9d9 2300 	ldrd	r2, r3, [r9]
 800eb56:	f7f1 fd67 	bl	8000628 <__aeabi_dmul>
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800eb60:	f109 0908 	add.w	r9, r9, #8
 800eb64:	d1f2      	bne.n	800eb4c <_strtod_l+0x5cc>
 800eb66:	b10b      	cbz	r3, 800eb6c <_strtod_l+0x5ec>
 800eb68:	4682      	mov	sl, r0
 800eb6a:	468b      	mov	fp, r1
 800eb6c:	9b04      	ldr	r3, [sp, #16]
 800eb6e:	b1bb      	cbz	r3, 800eba0 <_strtod_l+0x620>
 800eb70:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800eb74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	4659      	mov	r1, fp
 800eb7c:	dd10      	ble.n	800eba0 <_strtod_l+0x620>
 800eb7e:	2b1f      	cmp	r3, #31
 800eb80:	f340 8128 	ble.w	800edd4 <_strtod_l+0x854>
 800eb84:	2b34      	cmp	r3, #52	; 0x34
 800eb86:	bfde      	ittt	le
 800eb88:	3b20      	suble	r3, #32
 800eb8a:	f04f 32ff 	movle.w	r2, #4294967295
 800eb8e:	fa02 f303 	lslle.w	r3, r2, r3
 800eb92:	f04f 0a00 	mov.w	sl, #0
 800eb96:	bfcc      	ite	gt
 800eb98:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800eb9c:	ea03 0b01 	andle.w	fp, r3, r1
 800eba0:	2200      	movs	r2, #0
 800eba2:	2300      	movs	r3, #0
 800eba4:	4650      	mov	r0, sl
 800eba6:	4659      	mov	r1, fp
 800eba8:	f7f1 ffa6 	bl	8000af8 <__aeabi_dcmpeq>
 800ebac:	2800      	cmp	r0, #0
 800ebae:	d1a4      	bne.n	800eafa <_strtod_l+0x57a>
 800ebb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebb2:	9300      	str	r3, [sp, #0]
 800ebb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ebb6:	462b      	mov	r3, r5
 800ebb8:	463a      	mov	r2, r7
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f001 feda 	bl	8010974 <__s2b>
 800ebc0:	9009      	str	r0, [sp, #36]	; 0x24
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	f43f af24 	beq.w	800ea10 <_strtod_l+0x490>
 800ebc8:	9b07      	ldr	r3, [sp, #28]
 800ebca:	1b9e      	subs	r6, r3, r6
 800ebcc:	9b08      	ldr	r3, [sp, #32]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	bfb4      	ite	lt
 800ebd2:	4633      	movlt	r3, r6
 800ebd4:	2300      	movge	r3, #0
 800ebd6:	9310      	str	r3, [sp, #64]	; 0x40
 800ebd8:	9b08      	ldr	r3, [sp, #32]
 800ebda:	2500      	movs	r5, #0
 800ebdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ebe0:	9318      	str	r3, [sp, #96]	; 0x60
 800ebe2:	462e      	mov	r6, r5
 800ebe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	6859      	ldr	r1, [r3, #4]
 800ebea:	f001 fe17 	bl	801081c <_Balloc>
 800ebee:	9007      	str	r0, [sp, #28]
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	f43f af11 	beq.w	800ea18 <_strtod_l+0x498>
 800ebf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebf8:	691a      	ldr	r2, [r3, #16]
 800ebfa:	3202      	adds	r2, #2
 800ebfc:	f103 010c 	add.w	r1, r3, #12
 800ec00:	0092      	lsls	r2, r2, #2
 800ec02:	300c      	adds	r0, #12
 800ec04:	f001 fdfc 	bl	8010800 <memcpy>
 800ec08:	ec4b ab10 	vmov	d0, sl, fp
 800ec0c:	aa20      	add	r2, sp, #128	; 0x80
 800ec0e:	a91f      	add	r1, sp, #124	; 0x7c
 800ec10:	4620      	mov	r0, r4
 800ec12:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ec16:	f002 f9e9 	bl	8010fec <__d2b>
 800ec1a:	901e      	str	r0, [sp, #120]	; 0x78
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	f43f aefb 	beq.w	800ea18 <_strtod_l+0x498>
 800ec22:	2101      	movs	r1, #1
 800ec24:	4620      	mov	r0, r4
 800ec26:	f001 ff3f 	bl	8010aa8 <__i2b>
 800ec2a:	4606      	mov	r6, r0
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	f43f aef3 	beq.w	800ea18 <_strtod_l+0x498>
 800ec32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ec34:	9904      	ldr	r1, [sp, #16]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	bfab      	itete	ge
 800ec3a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ec3c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ec3e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ec40:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ec44:	bfac      	ite	ge
 800ec46:	eb03 0902 	addge.w	r9, r3, r2
 800ec4a:	1ad7      	sublt	r7, r2, r3
 800ec4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ec4e:	eba3 0801 	sub.w	r8, r3, r1
 800ec52:	4490      	add	r8, r2
 800ec54:	4ba3      	ldr	r3, [pc, #652]	; (800eee4 <_strtod_l+0x964>)
 800ec56:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec5a:	4598      	cmp	r8, r3
 800ec5c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ec60:	f280 80cc 	bge.w	800edfc <_strtod_l+0x87c>
 800ec64:	eba3 0308 	sub.w	r3, r3, r8
 800ec68:	2b1f      	cmp	r3, #31
 800ec6a:	eba2 0203 	sub.w	r2, r2, r3
 800ec6e:	f04f 0101 	mov.w	r1, #1
 800ec72:	f300 80b6 	bgt.w	800ede2 <_strtod_l+0x862>
 800ec76:	fa01 f303 	lsl.w	r3, r1, r3
 800ec7a:	9311      	str	r3, [sp, #68]	; 0x44
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	930c      	str	r3, [sp, #48]	; 0x30
 800ec80:	eb09 0802 	add.w	r8, r9, r2
 800ec84:	9b04      	ldr	r3, [sp, #16]
 800ec86:	45c1      	cmp	r9, r8
 800ec88:	4417      	add	r7, r2
 800ec8a:	441f      	add	r7, r3
 800ec8c:	464b      	mov	r3, r9
 800ec8e:	bfa8      	it	ge
 800ec90:	4643      	movge	r3, r8
 800ec92:	42bb      	cmp	r3, r7
 800ec94:	bfa8      	it	ge
 800ec96:	463b      	movge	r3, r7
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	bfc2      	ittt	gt
 800ec9c:	eba8 0803 	subgt.w	r8, r8, r3
 800eca0:	1aff      	subgt	r7, r7, r3
 800eca2:	eba9 0903 	subgt.w	r9, r9, r3
 800eca6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	dd17      	ble.n	800ecdc <_strtod_l+0x75c>
 800ecac:	4631      	mov	r1, r6
 800ecae:	461a      	mov	r2, r3
 800ecb0:	4620      	mov	r0, r4
 800ecb2:	f001 ffb5 	bl	8010c20 <__pow5mult>
 800ecb6:	4606      	mov	r6, r0
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	f43f aead 	beq.w	800ea18 <_strtod_l+0x498>
 800ecbe:	4601      	mov	r1, r0
 800ecc0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	f001 ff06 	bl	8010ad4 <__multiply>
 800ecc8:	900f      	str	r0, [sp, #60]	; 0x3c
 800ecca:	2800      	cmp	r0, #0
 800eccc:	f43f aea4 	beq.w	800ea18 <_strtod_l+0x498>
 800ecd0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f001 fde2 	bl	801089c <_Bfree>
 800ecd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecda:	931e      	str	r3, [sp, #120]	; 0x78
 800ecdc:	f1b8 0f00 	cmp.w	r8, #0
 800ece0:	f300 8091 	bgt.w	800ee06 <_strtod_l+0x886>
 800ece4:	9b08      	ldr	r3, [sp, #32]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	dd08      	ble.n	800ecfc <_strtod_l+0x77c>
 800ecea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ecec:	9907      	ldr	r1, [sp, #28]
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f001 ff96 	bl	8010c20 <__pow5mult>
 800ecf4:	9007      	str	r0, [sp, #28]
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	f43f ae8e 	beq.w	800ea18 <_strtod_l+0x498>
 800ecfc:	2f00      	cmp	r7, #0
 800ecfe:	dd08      	ble.n	800ed12 <_strtod_l+0x792>
 800ed00:	9907      	ldr	r1, [sp, #28]
 800ed02:	463a      	mov	r2, r7
 800ed04:	4620      	mov	r0, r4
 800ed06:	f001 ffe5 	bl	8010cd4 <__lshift>
 800ed0a:	9007      	str	r0, [sp, #28]
 800ed0c:	2800      	cmp	r0, #0
 800ed0e:	f43f ae83 	beq.w	800ea18 <_strtod_l+0x498>
 800ed12:	f1b9 0f00 	cmp.w	r9, #0
 800ed16:	dd08      	ble.n	800ed2a <_strtod_l+0x7aa>
 800ed18:	4631      	mov	r1, r6
 800ed1a:	464a      	mov	r2, r9
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	f001 ffd9 	bl	8010cd4 <__lshift>
 800ed22:	4606      	mov	r6, r0
 800ed24:	2800      	cmp	r0, #0
 800ed26:	f43f ae77 	beq.w	800ea18 <_strtod_l+0x498>
 800ed2a:	9a07      	ldr	r2, [sp, #28]
 800ed2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f002 f858 	bl	8010de4 <__mdiff>
 800ed34:	4605      	mov	r5, r0
 800ed36:	2800      	cmp	r0, #0
 800ed38:	f43f ae6e 	beq.w	800ea18 <_strtod_l+0x498>
 800ed3c:	68c3      	ldr	r3, [r0, #12]
 800ed3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed40:	2300      	movs	r3, #0
 800ed42:	60c3      	str	r3, [r0, #12]
 800ed44:	4631      	mov	r1, r6
 800ed46:	f002 f831 	bl	8010dac <__mcmp>
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	da65      	bge.n	800ee1a <_strtod_l+0x89a>
 800ed4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed50:	ea53 030a 	orrs.w	r3, r3, sl
 800ed54:	f040 8087 	bne.w	800ee66 <_strtod_l+0x8e6>
 800ed58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f040 8082 	bne.w	800ee66 <_strtod_l+0x8e6>
 800ed62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ed66:	0d1b      	lsrs	r3, r3, #20
 800ed68:	051b      	lsls	r3, r3, #20
 800ed6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ed6e:	d97a      	bls.n	800ee66 <_strtod_l+0x8e6>
 800ed70:	696b      	ldr	r3, [r5, #20]
 800ed72:	b913      	cbnz	r3, 800ed7a <_strtod_l+0x7fa>
 800ed74:	692b      	ldr	r3, [r5, #16]
 800ed76:	2b01      	cmp	r3, #1
 800ed78:	dd75      	ble.n	800ee66 <_strtod_l+0x8e6>
 800ed7a:	4629      	mov	r1, r5
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	4620      	mov	r0, r4
 800ed80:	f001 ffa8 	bl	8010cd4 <__lshift>
 800ed84:	4631      	mov	r1, r6
 800ed86:	4605      	mov	r5, r0
 800ed88:	f002 f810 	bl	8010dac <__mcmp>
 800ed8c:	2800      	cmp	r0, #0
 800ed8e:	dd6a      	ble.n	800ee66 <_strtod_l+0x8e6>
 800ed90:	9904      	ldr	r1, [sp, #16]
 800ed92:	4a55      	ldr	r2, [pc, #340]	; (800eee8 <_strtod_l+0x968>)
 800ed94:	465b      	mov	r3, fp
 800ed96:	2900      	cmp	r1, #0
 800ed98:	f000 8085 	beq.w	800eea6 <_strtod_l+0x926>
 800ed9c:	ea02 010b 	and.w	r1, r2, fp
 800eda0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800eda4:	dc7f      	bgt.n	800eea6 <_strtod_l+0x926>
 800eda6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800edaa:	f77f aeaa 	ble.w	800eb02 <_strtod_l+0x582>
 800edae:	4a4f      	ldr	r2, [pc, #316]	; (800eeec <_strtod_l+0x96c>)
 800edb0:	2300      	movs	r3, #0
 800edb2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800edb6:	4650      	mov	r0, sl
 800edb8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800edbc:	4659      	mov	r1, fp
 800edbe:	f7f1 fc33 	bl	8000628 <__aeabi_dmul>
 800edc2:	460b      	mov	r3, r1
 800edc4:	4303      	orrs	r3, r0
 800edc6:	bf08      	it	eq
 800edc8:	2322      	moveq	r3, #34	; 0x22
 800edca:	4682      	mov	sl, r0
 800edcc:	468b      	mov	fp, r1
 800edce:	bf08      	it	eq
 800edd0:	6023      	streq	r3, [r4, #0]
 800edd2:	e62b      	b.n	800ea2c <_strtod_l+0x4ac>
 800edd4:	f04f 32ff 	mov.w	r2, #4294967295
 800edd8:	fa02 f303 	lsl.w	r3, r2, r3
 800eddc:	ea03 0a0a 	and.w	sl, r3, sl
 800ede0:	e6de      	b.n	800eba0 <_strtod_l+0x620>
 800ede2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ede6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800edea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800edee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800edf2:	fa01 f308 	lsl.w	r3, r1, r8
 800edf6:	930c      	str	r3, [sp, #48]	; 0x30
 800edf8:	9111      	str	r1, [sp, #68]	; 0x44
 800edfa:	e741      	b.n	800ec80 <_strtod_l+0x700>
 800edfc:	2300      	movs	r3, #0
 800edfe:	930c      	str	r3, [sp, #48]	; 0x30
 800ee00:	2301      	movs	r3, #1
 800ee02:	9311      	str	r3, [sp, #68]	; 0x44
 800ee04:	e73c      	b.n	800ec80 <_strtod_l+0x700>
 800ee06:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ee08:	4642      	mov	r2, r8
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f001 ff62 	bl	8010cd4 <__lshift>
 800ee10:	901e      	str	r0, [sp, #120]	; 0x78
 800ee12:	2800      	cmp	r0, #0
 800ee14:	f47f af66 	bne.w	800ece4 <_strtod_l+0x764>
 800ee18:	e5fe      	b.n	800ea18 <_strtod_l+0x498>
 800ee1a:	465f      	mov	r7, fp
 800ee1c:	d16e      	bne.n	800eefc <_strtod_l+0x97c>
 800ee1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee24:	b342      	cbz	r2, 800ee78 <_strtod_l+0x8f8>
 800ee26:	4a32      	ldr	r2, [pc, #200]	; (800eef0 <_strtod_l+0x970>)
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d128      	bne.n	800ee7e <_strtod_l+0x8fe>
 800ee2c:	9b04      	ldr	r3, [sp, #16]
 800ee2e:	4650      	mov	r0, sl
 800ee30:	b1eb      	cbz	r3, 800ee6e <_strtod_l+0x8ee>
 800ee32:	4a2d      	ldr	r2, [pc, #180]	; (800eee8 <_strtod_l+0x968>)
 800ee34:	403a      	ands	r2, r7
 800ee36:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ee3a:	f04f 31ff 	mov.w	r1, #4294967295
 800ee3e:	d819      	bhi.n	800ee74 <_strtod_l+0x8f4>
 800ee40:	0d12      	lsrs	r2, r2, #20
 800ee42:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ee46:	fa01 f303 	lsl.w	r3, r1, r3
 800ee4a:	4298      	cmp	r0, r3
 800ee4c:	d117      	bne.n	800ee7e <_strtod_l+0x8fe>
 800ee4e:	4b29      	ldr	r3, [pc, #164]	; (800eef4 <_strtod_l+0x974>)
 800ee50:	429f      	cmp	r7, r3
 800ee52:	d102      	bne.n	800ee5a <_strtod_l+0x8da>
 800ee54:	3001      	adds	r0, #1
 800ee56:	f43f addf 	beq.w	800ea18 <_strtod_l+0x498>
 800ee5a:	4b23      	ldr	r3, [pc, #140]	; (800eee8 <_strtod_l+0x968>)
 800ee5c:	403b      	ands	r3, r7
 800ee5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ee62:	f04f 0a00 	mov.w	sl, #0
 800ee66:	9b04      	ldr	r3, [sp, #16]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1a0      	bne.n	800edae <_strtod_l+0x82e>
 800ee6c:	e5de      	b.n	800ea2c <_strtod_l+0x4ac>
 800ee6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee72:	e7ea      	b.n	800ee4a <_strtod_l+0x8ca>
 800ee74:	460b      	mov	r3, r1
 800ee76:	e7e8      	b.n	800ee4a <_strtod_l+0x8ca>
 800ee78:	ea53 030a 	orrs.w	r3, r3, sl
 800ee7c:	d088      	beq.n	800ed90 <_strtod_l+0x810>
 800ee7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee80:	b1db      	cbz	r3, 800eeba <_strtod_l+0x93a>
 800ee82:	423b      	tst	r3, r7
 800ee84:	d0ef      	beq.n	800ee66 <_strtod_l+0x8e6>
 800ee86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee88:	9a04      	ldr	r2, [sp, #16]
 800ee8a:	4650      	mov	r0, sl
 800ee8c:	4659      	mov	r1, fp
 800ee8e:	b1c3      	cbz	r3, 800eec2 <_strtod_l+0x942>
 800ee90:	f7ff fb58 	bl	800e544 <sulp>
 800ee94:	4602      	mov	r2, r0
 800ee96:	460b      	mov	r3, r1
 800ee98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee9c:	f7f1 fa0e 	bl	80002bc <__adddf3>
 800eea0:	4682      	mov	sl, r0
 800eea2:	468b      	mov	fp, r1
 800eea4:	e7df      	b.n	800ee66 <_strtod_l+0x8e6>
 800eea6:	4013      	ands	r3, r2
 800eea8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eeac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eeb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eeb4:	f04f 3aff 	mov.w	sl, #4294967295
 800eeb8:	e7d5      	b.n	800ee66 <_strtod_l+0x8e6>
 800eeba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eebc:	ea13 0f0a 	tst.w	r3, sl
 800eec0:	e7e0      	b.n	800ee84 <_strtod_l+0x904>
 800eec2:	f7ff fb3f 	bl	800e544 <sulp>
 800eec6:	4602      	mov	r2, r0
 800eec8:	460b      	mov	r3, r1
 800eeca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eece:	f7f1 f9f3 	bl	80002b8 <__aeabi_dsub>
 800eed2:	2200      	movs	r2, #0
 800eed4:	2300      	movs	r3, #0
 800eed6:	4682      	mov	sl, r0
 800eed8:	468b      	mov	fp, r1
 800eeda:	f7f1 fe0d 	bl	8000af8 <__aeabi_dcmpeq>
 800eede:	2800      	cmp	r0, #0
 800eee0:	d0c1      	beq.n	800ee66 <_strtod_l+0x8e6>
 800eee2:	e60e      	b.n	800eb02 <_strtod_l+0x582>
 800eee4:	fffffc02 	.word	0xfffffc02
 800eee8:	7ff00000 	.word	0x7ff00000
 800eeec:	39500000 	.word	0x39500000
 800eef0:	000fffff 	.word	0x000fffff
 800eef4:	7fefffff 	.word	0x7fefffff
 800eef8:	08025938 	.word	0x08025938
 800eefc:	4631      	mov	r1, r6
 800eefe:	4628      	mov	r0, r5
 800ef00:	f002 f8d0 	bl	80110a4 <__ratio>
 800ef04:	ec59 8b10 	vmov	r8, r9, d0
 800ef08:	ee10 0a10 	vmov	r0, s0
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ef12:	4649      	mov	r1, r9
 800ef14:	f7f1 fe04 	bl	8000b20 <__aeabi_dcmple>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	d07c      	beq.n	800f016 <_strtod_l+0xa96>
 800ef1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d04c      	beq.n	800efbc <_strtod_l+0xa3c>
 800ef22:	4b95      	ldr	r3, [pc, #596]	; (800f178 <_strtod_l+0xbf8>)
 800ef24:	2200      	movs	r2, #0
 800ef26:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ef2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f178 <_strtod_l+0xbf8>
 800ef2e:	f04f 0800 	mov.w	r8, #0
 800ef32:	4b92      	ldr	r3, [pc, #584]	; (800f17c <_strtod_l+0xbfc>)
 800ef34:	403b      	ands	r3, r7
 800ef36:	9311      	str	r3, [sp, #68]	; 0x44
 800ef38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef3a:	4b91      	ldr	r3, [pc, #580]	; (800f180 <_strtod_l+0xc00>)
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	f040 80b2 	bne.w	800f0a6 <_strtod_l+0xb26>
 800ef42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ef46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ef4a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ef4e:	ec4b ab10 	vmov	d0, sl, fp
 800ef52:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800ef56:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ef5a:	f001 ffcb 	bl	8010ef4 <__ulp>
 800ef5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ef62:	ec53 2b10 	vmov	r2, r3, d0
 800ef66:	f7f1 fb5f 	bl	8000628 <__aeabi_dmul>
 800ef6a:	4652      	mov	r2, sl
 800ef6c:	465b      	mov	r3, fp
 800ef6e:	f7f1 f9a5 	bl	80002bc <__adddf3>
 800ef72:	460b      	mov	r3, r1
 800ef74:	4981      	ldr	r1, [pc, #516]	; (800f17c <_strtod_l+0xbfc>)
 800ef76:	4a83      	ldr	r2, [pc, #524]	; (800f184 <_strtod_l+0xc04>)
 800ef78:	4019      	ands	r1, r3
 800ef7a:	4291      	cmp	r1, r2
 800ef7c:	4682      	mov	sl, r0
 800ef7e:	d95e      	bls.n	800f03e <_strtod_l+0xabe>
 800ef80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef82:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d103      	bne.n	800ef92 <_strtod_l+0xa12>
 800ef8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	f43f ad43 	beq.w	800ea18 <_strtod_l+0x498>
 800ef92:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f190 <_strtod_l+0xc10>
 800ef96:	f04f 3aff 	mov.w	sl, #4294967295
 800ef9a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	f001 fc7d 	bl	801089c <_Bfree>
 800efa2:	9907      	ldr	r1, [sp, #28]
 800efa4:	4620      	mov	r0, r4
 800efa6:	f001 fc79 	bl	801089c <_Bfree>
 800efaa:	4631      	mov	r1, r6
 800efac:	4620      	mov	r0, r4
 800efae:	f001 fc75 	bl	801089c <_Bfree>
 800efb2:	4629      	mov	r1, r5
 800efb4:	4620      	mov	r0, r4
 800efb6:	f001 fc71 	bl	801089c <_Bfree>
 800efba:	e613      	b.n	800ebe4 <_strtod_l+0x664>
 800efbc:	f1ba 0f00 	cmp.w	sl, #0
 800efc0:	d11b      	bne.n	800effa <_strtod_l+0xa7a>
 800efc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800efc6:	b9f3      	cbnz	r3, 800f006 <_strtod_l+0xa86>
 800efc8:	4b6b      	ldr	r3, [pc, #428]	; (800f178 <_strtod_l+0xbf8>)
 800efca:	2200      	movs	r2, #0
 800efcc:	4640      	mov	r0, r8
 800efce:	4649      	mov	r1, r9
 800efd0:	f7f1 fd9c 	bl	8000b0c <__aeabi_dcmplt>
 800efd4:	b9d0      	cbnz	r0, 800f00c <_strtod_l+0xa8c>
 800efd6:	4640      	mov	r0, r8
 800efd8:	4649      	mov	r1, r9
 800efda:	4b6b      	ldr	r3, [pc, #428]	; (800f188 <_strtod_l+0xc08>)
 800efdc:	2200      	movs	r2, #0
 800efde:	f7f1 fb23 	bl	8000628 <__aeabi_dmul>
 800efe2:	4680      	mov	r8, r0
 800efe4:	4689      	mov	r9, r1
 800efe6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800efea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800efee:	931b      	str	r3, [sp, #108]	; 0x6c
 800eff0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800eff4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eff8:	e79b      	b.n	800ef32 <_strtod_l+0x9b2>
 800effa:	f1ba 0f01 	cmp.w	sl, #1
 800effe:	d102      	bne.n	800f006 <_strtod_l+0xa86>
 800f000:	2f00      	cmp	r7, #0
 800f002:	f43f ad7e 	beq.w	800eb02 <_strtod_l+0x582>
 800f006:	4b61      	ldr	r3, [pc, #388]	; (800f18c <_strtod_l+0xc0c>)
 800f008:	2200      	movs	r2, #0
 800f00a:	e78c      	b.n	800ef26 <_strtod_l+0x9a6>
 800f00c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f188 <_strtod_l+0xc08>
 800f010:	f04f 0800 	mov.w	r8, #0
 800f014:	e7e7      	b.n	800efe6 <_strtod_l+0xa66>
 800f016:	4b5c      	ldr	r3, [pc, #368]	; (800f188 <_strtod_l+0xc08>)
 800f018:	4640      	mov	r0, r8
 800f01a:	4649      	mov	r1, r9
 800f01c:	2200      	movs	r2, #0
 800f01e:	f7f1 fb03 	bl	8000628 <__aeabi_dmul>
 800f022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f024:	4680      	mov	r8, r0
 800f026:	4689      	mov	r9, r1
 800f028:	b933      	cbnz	r3, 800f038 <_strtod_l+0xab8>
 800f02a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f02e:	9012      	str	r0, [sp, #72]	; 0x48
 800f030:	9313      	str	r3, [sp, #76]	; 0x4c
 800f032:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f036:	e7dd      	b.n	800eff4 <_strtod_l+0xa74>
 800f038:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800f03c:	e7f9      	b.n	800f032 <_strtod_l+0xab2>
 800f03e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f042:	9b04      	ldr	r3, [sp, #16]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d1a8      	bne.n	800ef9a <_strtod_l+0xa1a>
 800f048:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f04c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f04e:	0d1b      	lsrs	r3, r3, #20
 800f050:	051b      	lsls	r3, r3, #20
 800f052:	429a      	cmp	r2, r3
 800f054:	d1a1      	bne.n	800ef9a <_strtod_l+0xa1a>
 800f056:	4640      	mov	r0, r8
 800f058:	4649      	mov	r1, r9
 800f05a:	f7f1 fe45 	bl	8000ce8 <__aeabi_d2lz>
 800f05e:	f7f1 fab5 	bl	80005cc <__aeabi_l2d>
 800f062:	4602      	mov	r2, r0
 800f064:	460b      	mov	r3, r1
 800f066:	4640      	mov	r0, r8
 800f068:	4649      	mov	r1, r9
 800f06a:	f7f1 f925 	bl	80002b8 <__aeabi_dsub>
 800f06e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f070:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f074:	ea43 030a 	orr.w	r3, r3, sl
 800f078:	4313      	orrs	r3, r2
 800f07a:	4680      	mov	r8, r0
 800f07c:	4689      	mov	r9, r1
 800f07e:	d053      	beq.n	800f128 <_strtod_l+0xba8>
 800f080:	a335      	add	r3, pc, #212	; (adr r3, 800f158 <_strtod_l+0xbd8>)
 800f082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f086:	f7f1 fd41 	bl	8000b0c <__aeabi_dcmplt>
 800f08a:	2800      	cmp	r0, #0
 800f08c:	f47f acce 	bne.w	800ea2c <_strtod_l+0x4ac>
 800f090:	a333      	add	r3, pc, #204	; (adr r3, 800f160 <_strtod_l+0xbe0>)
 800f092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f096:	4640      	mov	r0, r8
 800f098:	4649      	mov	r1, r9
 800f09a:	f7f1 fd55 	bl	8000b48 <__aeabi_dcmpgt>
 800f09e:	2800      	cmp	r0, #0
 800f0a0:	f43f af7b 	beq.w	800ef9a <_strtod_l+0xa1a>
 800f0a4:	e4c2      	b.n	800ea2c <_strtod_l+0x4ac>
 800f0a6:	9b04      	ldr	r3, [sp, #16]
 800f0a8:	b333      	cbz	r3, 800f0f8 <_strtod_l+0xb78>
 800f0aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f0b0:	d822      	bhi.n	800f0f8 <_strtod_l+0xb78>
 800f0b2:	a32d      	add	r3, pc, #180	; (adr r3, 800f168 <_strtod_l+0xbe8>)
 800f0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b8:	4640      	mov	r0, r8
 800f0ba:	4649      	mov	r1, r9
 800f0bc:	f7f1 fd30 	bl	8000b20 <__aeabi_dcmple>
 800f0c0:	b1a0      	cbz	r0, 800f0ec <_strtod_l+0xb6c>
 800f0c2:	4649      	mov	r1, r9
 800f0c4:	4640      	mov	r0, r8
 800f0c6:	f7f1 fd87 	bl	8000bd8 <__aeabi_d2uiz>
 800f0ca:	2801      	cmp	r0, #1
 800f0cc:	bf38      	it	cc
 800f0ce:	2001      	movcc	r0, #1
 800f0d0:	f7f1 fa30 	bl	8000534 <__aeabi_ui2d>
 800f0d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0d6:	4680      	mov	r8, r0
 800f0d8:	4689      	mov	r9, r1
 800f0da:	bb13      	cbnz	r3, 800f122 <_strtod_l+0xba2>
 800f0dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0e0:	9014      	str	r0, [sp, #80]	; 0x50
 800f0e2:	9315      	str	r3, [sp, #84]	; 0x54
 800f0e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f0e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f0ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f0ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f0f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f0f4:	1a9b      	subs	r3, r3, r2
 800f0f6:	930d      	str	r3, [sp, #52]	; 0x34
 800f0f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f0fc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f100:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f104:	f001 fef6 	bl	8010ef4 <__ulp>
 800f108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f10c:	ec53 2b10 	vmov	r2, r3, d0
 800f110:	f7f1 fa8a 	bl	8000628 <__aeabi_dmul>
 800f114:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f118:	f7f1 f8d0 	bl	80002bc <__adddf3>
 800f11c:	4682      	mov	sl, r0
 800f11e:	468b      	mov	fp, r1
 800f120:	e78f      	b.n	800f042 <_strtod_l+0xac2>
 800f122:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f126:	e7dd      	b.n	800f0e4 <_strtod_l+0xb64>
 800f128:	a311      	add	r3, pc, #68	; (adr r3, 800f170 <_strtod_l+0xbf0>)
 800f12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12e:	f7f1 fced 	bl	8000b0c <__aeabi_dcmplt>
 800f132:	e7b4      	b.n	800f09e <_strtod_l+0xb1e>
 800f134:	2300      	movs	r3, #0
 800f136:	930e      	str	r3, [sp, #56]	; 0x38
 800f138:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f13a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f13c:	6013      	str	r3, [r2, #0]
 800f13e:	f7ff ba65 	b.w	800e60c <_strtod_l+0x8c>
 800f142:	2b65      	cmp	r3, #101	; 0x65
 800f144:	f43f ab5d 	beq.w	800e802 <_strtod_l+0x282>
 800f148:	2b45      	cmp	r3, #69	; 0x45
 800f14a:	f43f ab5a 	beq.w	800e802 <_strtod_l+0x282>
 800f14e:	2201      	movs	r2, #1
 800f150:	f7ff bb92 	b.w	800e878 <_strtod_l+0x2f8>
 800f154:	f3af 8000 	nop.w
 800f158:	94a03595 	.word	0x94a03595
 800f15c:	3fdfffff 	.word	0x3fdfffff
 800f160:	35afe535 	.word	0x35afe535
 800f164:	3fe00000 	.word	0x3fe00000
 800f168:	ffc00000 	.word	0xffc00000
 800f16c:	41dfffff 	.word	0x41dfffff
 800f170:	94a03595 	.word	0x94a03595
 800f174:	3fcfffff 	.word	0x3fcfffff
 800f178:	3ff00000 	.word	0x3ff00000
 800f17c:	7ff00000 	.word	0x7ff00000
 800f180:	7fe00000 	.word	0x7fe00000
 800f184:	7c9fffff 	.word	0x7c9fffff
 800f188:	3fe00000 	.word	0x3fe00000
 800f18c:	bff00000 	.word	0xbff00000
 800f190:	7fefffff 	.word	0x7fefffff

0800f194 <_strtod_r>:
 800f194:	4b01      	ldr	r3, [pc, #4]	; (800f19c <_strtod_r+0x8>)
 800f196:	f7ff b9f3 	b.w	800e580 <_strtod_l>
 800f19a:	bf00      	nop
 800f19c:	200000a8 	.word	0x200000a8

0800f1a0 <strtod>:
 800f1a0:	460a      	mov	r2, r1
 800f1a2:	4601      	mov	r1, r0
 800f1a4:	4802      	ldr	r0, [pc, #8]	; (800f1b0 <strtod+0x10>)
 800f1a6:	4b03      	ldr	r3, [pc, #12]	; (800f1b4 <strtod+0x14>)
 800f1a8:	6800      	ldr	r0, [r0, #0]
 800f1aa:	f7ff b9e9 	b.w	800e580 <_strtod_l>
 800f1ae:	bf00      	nop
 800f1b0:	20000040 	.word	0x20000040
 800f1b4:	200000a8 	.word	0x200000a8

0800f1b8 <strtok>:
 800f1b8:	4b16      	ldr	r3, [pc, #88]	; (800f214 <strtok+0x5c>)
 800f1ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1bc:	681e      	ldr	r6, [r3, #0]
 800f1be:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800f1c0:	4605      	mov	r5, r0
 800f1c2:	b9fc      	cbnz	r4, 800f204 <strtok+0x4c>
 800f1c4:	2050      	movs	r0, #80	; 0x50
 800f1c6:	9101      	str	r1, [sp, #4]
 800f1c8:	f001 fb00 	bl	80107cc <malloc>
 800f1cc:	9901      	ldr	r1, [sp, #4]
 800f1ce:	65b0      	str	r0, [r6, #88]	; 0x58
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	b920      	cbnz	r0, 800f1de <strtok+0x26>
 800f1d4:	4b10      	ldr	r3, [pc, #64]	; (800f218 <strtok+0x60>)
 800f1d6:	4811      	ldr	r0, [pc, #68]	; (800f21c <strtok+0x64>)
 800f1d8:	2157      	movs	r1, #87	; 0x57
 800f1da:	f000 f8d9 	bl	800f390 <__assert_func>
 800f1de:	e9c0 4400 	strd	r4, r4, [r0]
 800f1e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f1e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f1ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f1ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f1f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f1f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f1fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f1fe:	6184      	str	r4, [r0, #24]
 800f200:	7704      	strb	r4, [r0, #28]
 800f202:	6244      	str	r4, [r0, #36]	; 0x24
 800f204:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800f206:	2301      	movs	r3, #1
 800f208:	4628      	mov	r0, r5
 800f20a:	b002      	add	sp, #8
 800f20c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f210:	f000 b806 	b.w	800f220 <__strtok_r>
 800f214:	20000040 	.word	0x20000040
 800f218:	08025960 	.word	0x08025960
 800f21c:	08025977 	.word	0x08025977

0800f220 <__strtok_r>:
 800f220:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f222:	b908      	cbnz	r0, 800f228 <__strtok_r+0x8>
 800f224:	6810      	ldr	r0, [r2, #0]
 800f226:	b188      	cbz	r0, 800f24c <__strtok_r+0x2c>
 800f228:	4604      	mov	r4, r0
 800f22a:	4620      	mov	r0, r4
 800f22c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f230:	460f      	mov	r7, r1
 800f232:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f236:	b91e      	cbnz	r6, 800f240 <__strtok_r+0x20>
 800f238:	b965      	cbnz	r5, 800f254 <__strtok_r+0x34>
 800f23a:	6015      	str	r5, [r2, #0]
 800f23c:	4628      	mov	r0, r5
 800f23e:	e005      	b.n	800f24c <__strtok_r+0x2c>
 800f240:	42b5      	cmp	r5, r6
 800f242:	d1f6      	bne.n	800f232 <__strtok_r+0x12>
 800f244:	2b00      	cmp	r3, #0
 800f246:	d1f0      	bne.n	800f22a <__strtok_r+0xa>
 800f248:	6014      	str	r4, [r2, #0]
 800f24a:	7003      	strb	r3, [r0, #0]
 800f24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f24e:	461c      	mov	r4, r3
 800f250:	e00c      	b.n	800f26c <__strtok_r+0x4c>
 800f252:	b915      	cbnz	r5, 800f25a <__strtok_r+0x3a>
 800f254:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f258:	460e      	mov	r6, r1
 800f25a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f25e:	42ab      	cmp	r3, r5
 800f260:	d1f7      	bne.n	800f252 <__strtok_r+0x32>
 800f262:	2b00      	cmp	r3, #0
 800f264:	d0f3      	beq.n	800f24e <__strtok_r+0x2e>
 800f266:	2300      	movs	r3, #0
 800f268:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f26c:	6014      	str	r4, [r2, #0]
 800f26e:	e7ed      	b.n	800f24c <__strtok_r+0x2c>

0800f270 <_strtol_l.isra.0>:
 800f270:	2b01      	cmp	r3, #1
 800f272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f276:	d001      	beq.n	800f27c <_strtol_l.isra.0+0xc>
 800f278:	2b24      	cmp	r3, #36	; 0x24
 800f27a:	d906      	bls.n	800f28a <_strtol_l.isra.0+0x1a>
 800f27c:	f7fe fa90 	bl	800d7a0 <__errno>
 800f280:	2316      	movs	r3, #22
 800f282:	6003      	str	r3, [r0, #0]
 800f284:	2000      	movs	r0, #0
 800f286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f28a:	4f3a      	ldr	r7, [pc, #232]	; (800f374 <_strtol_l.isra.0+0x104>)
 800f28c:	468e      	mov	lr, r1
 800f28e:	4676      	mov	r6, lr
 800f290:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f294:	5de5      	ldrb	r5, [r4, r7]
 800f296:	f015 0508 	ands.w	r5, r5, #8
 800f29a:	d1f8      	bne.n	800f28e <_strtol_l.isra.0+0x1e>
 800f29c:	2c2d      	cmp	r4, #45	; 0x2d
 800f29e:	d134      	bne.n	800f30a <_strtol_l.isra.0+0x9a>
 800f2a0:	f89e 4000 	ldrb.w	r4, [lr]
 800f2a4:	f04f 0801 	mov.w	r8, #1
 800f2a8:	f106 0e02 	add.w	lr, r6, #2
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d05c      	beq.n	800f36a <_strtol_l.isra.0+0xfa>
 800f2b0:	2b10      	cmp	r3, #16
 800f2b2:	d10c      	bne.n	800f2ce <_strtol_l.isra.0+0x5e>
 800f2b4:	2c30      	cmp	r4, #48	; 0x30
 800f2b6:	d10a      	bne.n	800f2ce <_strtol_l.isra.0+0x5e>
 800f2b8:	f89e 4000 	ldrb.w	r4, [lr]
 800f2bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f2c0:	2c58      	cmp	r4, #88	; 0x58
 800f2c2:	d14d      	bne.n	800f360 <_strtol_l.isra.0+0xf0>
 800f2c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f2c8:	2310      	movs	r3, #16
 800f2ca:	f10e 0e02 	add.w	lr, lr, #2
 800f2ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f2d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f2d6:	2600      	movs	r6, #0
 800f2d8:	fbbc f9f3 	udiv	r9, ip, r3
 800f2dc:	4635      	mov	r5, r6
 800f2de:	fb03 ca19 	mls	sl, r3, r9, ip
 800f2e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f2e6:	2f09      	cmp	r7, #9
 800f2e8:	d818      	bhi.n	800f31c <_strtol_l.isra.0+0xac>
 800f2ea:	463c      	mov	r4, r7
 800f2ec:	42a3      	cmp	r3, r4
 800f2ee:	dd24      	ble.n	800f33a <_strtol_l.isra.0+0xca>
 800f2f0:	2e00      	cmp	r6, #0
 800f2f2:	db1f      	blt.n	800f334 <_strtol_l.isra.0+0xc4>
 800f2f4:	45a9      	cmp	r9, r5
 800f2f6:	d31d      	bcc.n	800f334 <_strtol_l.isra.0+0xc4>
 800f2f8:	d101      	bne.n	800f2fe <_strtol_l.isra.0+0x8e>
 800f2fa:	45a2      	cmp	sl, r4
 800f2fc:	db1a      	blt.n	800f334 <_strtol_l.isra.0+0xc4>
 800f2fe:	fb05 4503 	mla	r5, r5, r3, r4
 800f302:	2601      	movs	r6, #1
 800f304:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f308:	e7eb      	b.n	800f2e2 <_strtol_l.isra.0+0x72>
 800f30a:	2c2b      	cmp	r4, #43	; 0x2b
 800f30c:	bf08      	it	eq
 800f30e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f312:	46a8      	mov	r8, r5
 800f314:	bf08      	it	eq
 800f316:	f106 0e02 	addeq.w	lr, r6, #2
 800f31a:	e7c7      	b.n	800f2ac <_strtol_l.isra.0+0x3c>
 800f31c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f320:	2f19      	cmp	r7, #25
 800f322:	d801      	bhi.n	800f328 <_strtol_l.isra.0+0xb8>
 800f324:	3c37      	subs	r4, #55	; 0x37
 800f326:	e7e1      	b.n	800f2ec <_strtol_l.isra.0+0x7c>
 800f328:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f32c:	2f19      	cmp	r7, #25
 800f32e:	d804      	bhi.n	800f33a <_strtol_l.isra.0+0xca>
 800f330:	3c57      	subs	r4, #87	; 0x57
 800f332:	e7db      	b.n	800f2ec <_strtol_l.isra.0+0x7c>
 800f334:	f04f 36ff 	mov.w	r6, #4294967295
 800f338:	e7e4      	b.n	800f304 <_strtol_l.isra.0+0x94>
 800f33a:	2e00      	cmp	r6, #0
 800f33c:	da05      	bge.n	800f34a <_strtol_l.isra.0+0xda>
 800f33e:	2322      	movs	r3, #34	; 0x22
 800f340:	6003      	str	r3, [r0, #0]
 800f342:	4665      	mov	r5, ip
 800f344:	b942      	cbnz	r2, 800f358 <_strtol_l.isra.0+0xe8>
 800f346:	4628      	mov	r0, r5
 800f348:	e79d      	b.n	800f286 <_strtol_l.isra.0+0x16>
 800f34a:	f1b8 0f00 	cmp.w	r8, #0
 800f34e:	d000      	beq.n	800f352 <_strtol_l.isra.0+0xe2>
 800f350:	426d      	negs	r5, r5
 800f352:	2a00      	cmp	r2, #0
 800f354:	d0f7      	beq.n	800f346 <_strtol_l.isra.0+0xd6>
 800f356:	b10e      	cbz	r6, 800f35c <_strtol_l.isra.0+0xec>
 800f358:	f10e 31ff 	add.w	r1, lr, #4294967295
 800f35c:	6011      	str	r1, [r2, #0]
 800f35e:	e7f2      	b.n	800f346 <_strtol_l.isra.0+0xd6>
 800f360:	2430      	movs	r4, #48	; 0x30
 800f362:	2b00      	cmp	r3, #0
 800f364:	d1b3      	bne.n	800f2ce <_strtol_l.isra.0+0x5e>
 800f366:	2308      	movs	r3, #8
 800f368:	e7b1      	b.n	800f2ce <_strtol_l.isra.0+0x5e>
 800f36a:	2c30      	cmp	r4, #48	; 0x30
 800f36c:	d0a4      	beq.n	800f2b8 <_strtol_l.isra.0+0x48>
 800f36e:	230a      	movs	r3, #10
 800f370:	e7ad      	b.n	800f2ce <_strtol_l.isra.0+0x5e>
 800f372:	bf00      	nop
 800f374:	08025a15 	.word	0x08025a15

0800f378 <_strtol_r>:
 800f378:	f7ff bf7a 	b.w	800f270 <_strtol_l.isra.0>

0800f37c <strtol>:
 800f37c:	4613      	mov	r3, r2
 800f37e:	460a      	mov	r2, r1
 800f380:	4601      	mov	r1, r0
 800f382:	4802      	ldr	r0, [pc, #8]	; (800f38c <strtol+0x10>)
 800f384:	6800      	ldr	r0, [r0, #0]
 800f386:	f7ff bf73 	b.w	800f270 <_strtol_l.isra.0>
 800f38a:	bf00      	nop
 800f38c:	20000040 	.word	0x20000040

0800f390 <__assert_func>:
 800f390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f392:	4614      	mov	r4, r2
 800f394:	461a      	mov	r2, r3
 800f396:	4b09      	ldr	r3, [pc, #36]	; (800f3bc <__assert_func+0x2c>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	4605      	mov	r5, r0
 800f39c:	68d8      	ldr	r0, [r3, #12]
 800f39e:	b14c      	cbz	r4, 800f3b4 <__assert_func+0x24>
 800f3a0:	4b07      	ldr	r3, [pc, #28]	; (800f3c0 <__assert_func+0x30>)
 800f3a2:	9100      	str	r1, [sp, #0]
 800f3a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f3a8:	4906      	ldr	r1, [pc, #24]	; (800f3c4 <__assert_func+0x34>)
 800f3aa:	462b      	mov	r3, r5
 800f3ac:	f000 fe88 	bl	80100c0 <fiprintf>
 800f3b0:	f002 fb56 	bl	8011a60 <abort>
 800f3b4:	4b04      	ldr	r3, [pc, #16]	; (800f3c8 <__assert_func+0x38>)
 800f3b6:	461c      	mov	r4, r3
 800f3b8:	e7f3      	b.n	800f3a2 <__assert_func+0x12>
 800f3ba:	bf00      	nop
 800f3bc:	20000040 	.word	0x20000040
 800f3c0:	080259d8 	.word	0x080259d8
 800f3c4:	080259e5 	.word	0x080259e5
 800f3c8:	08025a13 	.word	0x08025a13

0800f3cc <quorem>:
 800f3cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d0:	6903      	ldr	r3, [r0, #16]
 800f3d2:	690c      	ldr	r4, [r1, #16]
 800f3d4:	42a3      	cmp	r3, r4
 800f3d6:	4607      	mov	r7, r0
 800f3d8:	f2c0 8081 	blt.w	800f4de <quorem+0x112>
 800f3dc:	3c01      	subs	r4, #1
 800f3de:	f101 0814 	add.w	r8, r1, #20
 800f3e2:	f100 0514 	add.w	r5, r0, #20
 800f3e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f3ea:	9301      	str	r3, [sp, #4]
 800f3ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f3f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f3fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f400:	fbb2 f6f3 	udiv	r6, r2, r3
 800f404:	d331      	bcc.n	800f46a <quorem+0x9e>
 800f406:	f04f 0e00 	mov.w	lr, #0
 800f40a:	4640      	mov	r0, r8
 800f40c:	46ac      	mov	ip, r5
 800f40e:	46f2      	mov	sl, lr
 800f410:	f850 2b04 	ldr.w	r2, [r0], #4
 800f414:	b293      	uxth	r3, r2
 800f416:	fb06 e303 	mla	r3, r6, r3, lr
 800f41a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f41e:	b29b      	uxth	r3, r3
 800f420:	ebaa 0303 	sub.w	r3, sl, r3
 800f424:	0c12      	lsrs	r2, r2, #16
 800f426:	f8dc a000 	ldr.w	sl, [ip]
 800f42a:	fb06 e202 	mla	r2, r6, r2, lr
 800f42e:	fa13 f38a 	uxtah	r3, r3, sl
 800f432:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f436:	fa1f fa82 	uxth.w	sl, r2
 800f43a:	f8dc 2000 	ldr.w	r2, [ip]
 800f43e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f442:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f446:	b29b      	uxth	r3, r3
 800f448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f44c:	4581      	cmp	r9, r0
 800f44e:	f84c 3b04 	str.w	r3, [ip], #4
 800f452:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f456:	d2db      	bcs.n	800f410 <quorem+0x44>
 800f458:	f855 300b 	ldr.w	r3, [r5, fp]
 800f45c:	b92b      	cbnz	r3, 800f46a <quorem+0x9e>
 800f45e:	9b01      	ldr	r3, [sp, #4]
 800f460:	3b04      	subs	r3, #4
 800f462:	429d      	cmp	r5, r3
 800f464:	461a      	mov	r2, r3
 800f466:	d32e      	bcc.n	800f4c6 <quorem+0xfa>
 800f468:	613c      	str	r4, [r7, #16]
 800f46a:	4638      	mov	r0, r7
 800f46c:	f001 fc9e 	bl	8010dac <__mcmp>
 800f470:	2800      	cmp	r0, #0
 800f472:	db24      	blt.n	800f4be <quorem+0xf2>
 800f474:	3601      	adds	r6, #1
 800f476:	4628      	mov	r0, r5
 800f478:	f04f 0c00 	mov.w	ip, #0
 800f47c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f480:	f8d0 e000 	ldr.w	lr, [r0]
 800f484:	b293      	uxth	r3, r2
 800f486:	ebac 0303 	sub.w	r3, ip, r3
 800f48a:	0c12      	lsrs	r2, r2, #16
 800f48c:	fa13 f38e 	uxtah	r3, r3, lr
 800f490:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f494:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f498:	b29b      	uxth	r3, r3
 800f49a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f49e:	45c1      	cmp	r9, r8
 800f4a0:	f840 3b04 	str.w	r3, [r0], #4
 800f4a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f4a8:	d2e8      	bcs.n	800f47c <quorem+0xb0>
 800f4aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4b2:	b922      	cbnz	r2, 800f4be <quorem+0xf2>
 800f4b4:	3b04      	subs	r3, #4
 800f4b6:	429d      	cmp	r5, r3
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	d30a      	bcc.n	800f4d2 <quorem+0x106>
 800f4bc:	613c      	str	r4, [r7, #16]
 800f4be:	4630      	mov	r0, r6
 800f4c0:	b003      	add	sp, #12
 800f4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4c6:	6812      	ldr	r2, [r2, #0]
 800f4c8:	3b04      	subs	r3, #4
 800f4ca:	2a00      	cmp	r2, #0
 800f4cc:	d1cc      	bne.n	800f468 <quorem+0x9c>
 800f4ce:	3c01      	subs	r4, #1
 800f4d0:	e7c7      	b.n	800f462 <quorem+0x96>
 800f4d2:	6812      	ldr	r2, [r2, #0]
 800f4d4:	3b04      	subs	r3, #4
 800f4d6:	2a00      	cmp	r2, #0
 800f4d8:	d1f0      	bne.n	800f4bc <quorem+0xf0>
 800f4da:	3c01      	subs	r4, #1
 800f4dc:	e7eb      	b.n	800f4b6 <quorem+0xea>
 800f4de:	2000      	movs	r0, #0
 800f4e0:	e7ee      	b.n	800f4c0 <quorem+0xf4>
 800f4e2:	0000      	movs	r0, r0
 800f4e4:	0000      	movs	r0, r0
	...

0800f4e8 <_dtoa_r>:
 800f4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ec:	ed2d 8b02 	vpush	{d8}
 800f4f0:	ec57 6b10 	vmov	r6, r7, d0
 800f4f4:	b095      	sub	sp, #84	; 0x54
 800f4f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f4f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f4fc:	9105      	str	r1, [sp, #20]
 800f4fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f502:	4604      	mov	r4, r0
 800f504:	9209      	str	r2, [sp, #36]	; 0x24
 800f506:	930f      	str	r3, [sp, #60]	; 0x3c
 800f508:	b975      	cbnz	r5, 800f528 <_dtoa_r+0x40>
 800f50a:	2010      	movs	r0, #16
 800f50c:	f001 f95e 	bl	80107cc <malloc>
 800f510:	4602      	mov	r2, r0
 800f512:	6260      	str	r0, [r4, #36]	; 0x24
 800f514:	b920      	cbnz	r0, 800f520 <_dtoa_r+0x38>
 800f516:	4bb2      	ldr	r3, [pc, #712]	; (800f7e0 <_dtoa_r+0x2f8>)
 800f518:	21ea      	movs	r1, #234	; 0xea
 800f51a:	48b2      	ldr	r0, [pc, #712]	; (800f7e4 <_dtoa_r+0x2fc>)
 800f51c:	f7ff ff38 	bl	800f390 <__assert_func>
 800f520:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f524:	6005      	str	r5, [r0, #0]
 800f526:	60c5      	str	r5, [r0, #12]
 800f528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f52a:	6819      	ldr	r1, [r3, #0]
 800f52c:	b151      	cbz	r1, 800f544 <_dtoa_r+0x5c>
 800f52e:	685a      	ldr	r2, [r3, #4]
 800f530:	604a      	str	r2, [r1, #4]
 800f532:	2301      	movs	r3, #1
 800f534:	4093      	lsls	r3, r2
 800f536:	608b      	str	r3, [r1, #8]
 800f538:	4620      	mov	r0, r4
 800f53a:	f001 f9af 	bl	801089c <_Bfree>
 800f53e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f540:	2200      	movs	r2, #0
 800f542:	601a      	str	r2, [r3, #0]
 800f544:	1e3b      	subs	r3, r7, #0
 800f546:	bfb9      	ittee	lt
 800f548:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f54c:	9303      	strlt	r3, [sp, #12]
 800f54e:	2300      	movge	r3, #0
 800f550:	f8c8 3000 	strge.w	r3, [r8]
 800f554:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f558:	4ba3      	ldr	r3, [pc, #652]	; (800f7e8 <_dtoa_r+0x300>)
 800f55a:	bfbc      	itt	lt
 800f55c:	2201      	movlt	r2, #1
 800f55e:	f8c8 2000 	strlt.w	r2, [r8]
 800f562:	ea33 0309 	bics.w	r3, r3, r9
 800f566:	d11b      	bne.n	800f5a0 <_dtoa_r+0xb8>
 800f568:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f56a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f56e:	6013      	str	r3, [r2, #0]
 800f570:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f574:	4333      	orrs	r3, r6
 800f576:	f000 857a 	beq.w	801006e <_dtoa_r+0xb86>
 800f57a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f57c:	b963      	cbnz	r3, 800f598 <_dtoa_r+0xb0>
 800f57e:	4b9b      	ldr	r3, [pc, #620]	; (800f7ec <_dtoa_r+0x304>)
 800f580:	e024      	b.n	800f5cc <_dtoa_r+0xe4>
 800f582:	4b9b      	ldr	r3, [pc, #620]	; (800f7f0 <_dtoa_r+0x308>)
 800f584:	9300      	str	r3, [sp, #0]
 800f586:	3308      	adds	r3, #8
 800f588:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f58a:	6013      	str	r3, [r2, #0]
 800f58c:	9800      	ldr	r0, [sp, #0]
 800f58e:	b015      	add	sp, #84	; 0x54
 800f590:	ecbd 8b02 	vpop	{d8}
 800f594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f598:	4b94      	ldr	r3, [pc, #592]	; (800f7ec <_dtoa_r+0x304>)
 800f59a:	9300      	str	r3, [sp, #0]
 800f59c:	3303      	adds	r3, #3
 800f59e:	e7f3      	b.n	800f588 <_dtoa_r+0xa0>
 800f5a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	ec51 0b17 	vmov	r0, r1, d7
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f5b0:	f7f1 faa2 	bl	8000af8 <__aeabi_dcmpeq>
 800f5b4:	4680      	mov	r8, r0
 800f5b6:	b158      	cbz	r0, 800f5d0 <_dtoa_r+0xe8>
 800f5b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	6013      	str	r3, [r2, #0]
 800f5be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	f000 8551 	beq.w	8010068 <_dtoa_r+0xb80>
 800f5c6:	488b      	ldr	r0, [pc, #556]	; (800f7f4 <_dtoa_r+0x30c>)
 800f5c8:	6018      	str	r0, [r3, #0]
 800f5ca:	1e43      	subs	r3, r0, #1
 800f5cc:	9300      	str	r3, [sp, #0]
 800f5ce:	e7dd      	b.n	800f58c <_dtoa_r+0xa4>
 800f5d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f5d4:	aa12      	add	r2, sp, #72	; 0x48
 800f5d6:	a913      	add	r1, sp, #76	; 0x4c
 800f5d8:	4620      	mov	r0, r4
 800f5da:	f001 fd07 	bl	8010fec <__d2b>
 800f5de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f5e2:	4683      	mov	fp, r0
 800f5e4:	2d00      	cmp	r5, #0
 800f5e6:	d07c      	beq.n	800f6e2 <_dtoa_r+0x1fa>
 800f5e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f5ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f5f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f5fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f5fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f602:	4b7d      	ldr	r3, [pc, #500]	; (800f7f8 <_dtoa_r+0x310>)
 800f604:	2200      	movs	r2, #0
 800f606:	4630      	mov	r0, r6
 800f608:	4639      	mov	r1, r7
 800f60a:	f7f0 fe55 	bl	80002b8 <__aeabi_dsub>
 800f60e:	a36e      	add	r3, pc, #440	; (adr r3, 800f7c8 <_dtoa_r+0x2e0>)
 800f610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f614:	f7f1 f808 	bl	8000628 <__aeabi_dmul>
 800f618:	a36d      	add	r3, pc, #436	; (adr r3, 800f7d0 <_dtoa_r+0x2e8>)
 800f61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61e:	f7f0 fe4d 	bl	80002bc <__adddf3>
 800f622:	4606      	mov	r6, r0
 800f624:	4628      	mov	r0, r5
 800f626:	460f      	mov	r7, r1
 800f628:	f7f0 ff94 	bl	8000554 <__aeabi_i2d>
 800f62c:	a36a      	add	r3, pc, #424	; (adr r3, 800f7d8 <_dtoa_r+0x2f0>)
 800f62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f632:	f7f0 fff9 	bl	8000628 <__aeabi_dmul>
 800f636:	4602      	mov	r2, r0
 800f638:	460b      	mov	r3, r1
 800f63a:	4630      	mov	r0, r6
 800f63c:	4639      	mov	r1, r7
 800f63e:	f7f0 fe3d 	bl	80002bc <__adddf3>
 800f642:	4606      	mov	r6, r0
 800f644:	460f      	mov	r7, r1
 800f646:	f7f1 fa9f 	bl	8000b88 <__aeabi_d2iz>
 800f64a:	2200      	movs	r2, #0
 800f64c:	4682      	mov	sl, r0
 800f64e:	2300      	movs	r3, #0
 800f650:	4630      	mov	r0, r6
 800f652:	4639      	mov	r1, r7
 800f654:	f7f1 fa5a 	bl	8000b0c <__aeabi_dcmplt>
 800f658:	b148      	cbz	r0, 800f66e <_dtoa_r+0x186>
 800f65a:	4650      	mov	r0, sl
 800f65c:	f7f0 ff7a 	bl	8000554 <__aeabi_i2d>
 800f660:	4632      	mov	r2, r6
 800f662:	463b      	mov	r3, r7
 800f664:	f7f1 fa48 	bl	8000af8 <__aeabi_dcmpeq>
 800f668:	b908      	cbnz	r0, 800f66e <_dtoa_r+0x186>
 800f66a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f66e:	f1ba 0f16 	cmp.w	sl, #22
 800f672:	d854      	bhi.n	800f71e <_dtoa_r+0x236>
 800f674:	4b61      	ldr	r3, [pc, #388]	; (800f7fc <_dtoa_r+0x314>)
 800f676:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f67e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f682:	f7f1 fa43 	bl	8000b0c <__aeabi_dcmplt>
 800f686:	2800      	cmp	r0, #0
 800f688:	d04b      	beq.n	800f722 <_dtoa_r+0x23a>
 800f68a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f68e:	2300      	movs	r3, #0
 800f690:	930e      	str	r3, [sp, #56]	; 0x38
 800f692:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f694:	1b5d      	subs	r5, r3, r5
 800f696:	1e6b      	subs	r3, r5, #1
 800f698:	9304      	str	r3, [sp, #16]
 800f69a:	bf43      	ittte	mi
 800f69c:	2300      	movmi	r3, #0
 800f69e:	f1c5 0801 	rsbmi	r8, r5, #1
 800f6a2:	9304      	strmi	r3, [sp, #16]
 800f6a4:	f04f 0800 	movpl.w	r8, #0
 800f6a8:	f1ba 0f00 	cmp.w	sl, #0
 800f6ac:	db3b      	blt.n	800f726 <_dtoa_r+0x23e>
 800f6ae:	9b04      	ldr	r3, [sp, #16]
 800f6b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f6b4:	4453      	add	r3, sl
 800f6b6:	9304      	str	r3, [sp, #16]
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	9306      	str	r3, [sp, #24]
 800f6bc:	9b05      	ldr	r3, [sp, #20]
 800f6be:	2b09      	cmp	r3, #9
 800f6c0:	d869      	bhi.n	800f796 <_dtoa_r+0x2ae>
 800f6c2:	2b05      	cmp	r3, #5
 800f6c4:	bfc4      	itt	gt
 800f6c6:	3b04      	subgt	r3, #4
 800f6c8:	9305      	strgt	r3, [sp, #20]
 800f6ca:	9b05      	ldr	r3, [sp, #20]
 800f6cc:	f1a3 0302 	sub.w	r3, r3, #2
 800f6d0:	bfcc      	ite	gt
 800f6d2:	2500      	movgt	r5, #0
 800f6d4:	2501      	movle	r5, #1
 800f6d6:	2b03      	cmp	r3, #3
 800f6d8:	d869      	bhi.n	800f7ae <_dtoa_r+0x2c6>
 800f6da:	e8df f003 	tbb	[pc, r3]
 800f6de:	4e2c      	.short	0x4e2c
 800f6e0:	5a4c      	.short	0x5a4c
 800f6e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f6e6:	441d      	add	r5, r3
 800f6e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f6ec:	2b20      	cmp	r3, #32
 800f6ee:	bfc1      	itttt	gt
 800f6f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f6f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f6f8:	fa09 f303 	lslgt.w	r3, r9, r3
 800f6fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f700:	bfda      	itte	le
 800f702:	f1c3 0320 	rsble	r3, r3, #32
 800f706:	fa06 f003 	lslle.w	r0, r6, r3
 800f70a:	4318      	orrgt	r0, r3
 800f70c:	f7f0 ff12 	bl	8000534 <__aeabi_ui2d>
 800f710:	2301      	movs	r3, #1
 800f712:	4606      	mov	r6, r0
 800f714:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f718:	3d01      	subs	r5, #1
 800f71a:	9310      	str	r3, [sp, #64]	; 0x40
 800f71c:	e771      	b.n	800f602 <_dtoa_r+0x11a>
 800f71e:	2301      	movs	r3, #1
 800f720:	e7b6      	b.n	800f690 <_dtoa_r+0x1a8>
 800f722:	900e      	str	r0, [sp, #56]	; 0x38
 800f724:	e7b5      	b.n	800f692 <_dtoa_r+0x1aa>
 800f726:	f1ca 0300 	rsb	r3, sl, #0
 800f72a:	9306      	str	r3, [sp, #24]
 800f72c:	2300      	movs	r3, #0
 800f72e:	eba8 080a 	sub.w	r8, r8, sl
 800f732:	930d      	str	r3, [sp, #52]	; 0x34
 800f734:	e7c2      	b.n	800f6bc <_dtoa_r+0x1d4>
 800f736:	2300      	movs	r3, #0
 800f738:	9308      	str	r3, [sp, #32]
 800f73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	dc39      	bgt.n	800f7b4 <_dtoa_r+0x2cc>
 800f740:	f04f 0901 	mov.w	r9, #1
 800f744:	f8cd 9004 	str.w	r9, [sp, #4]
 800f748:	464b      	mov	r3, r9
 800f74a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f74e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f750:	2200      	movs	r2, #0
 800f752:	6042      	str	r2, [r0, #4]
 800f754:	2204      	movs	r2, #4
 800f756:	f102 0614 	add.w	r6, r2, #20
 800f75a:	429e      	cmp	r6, r3
 800f75c:	6841      	ldr	r1, [r0, #4]
 800f75e:	d92f      	bls.n	800f7c0 <_dtoa_r+0x2d8>
 800f760:	4620      	mov	r0, r4
 800f762:	f001 f85b 	bl	801081c <_Balloc>
 800f766:	9000      	str	r0, [sp, #0]
 800f768:	2800      	cmp	r0, #0
 800f76a:	d14b      	bne.n	800f804 <_dtoa_r+0x31c>
 800f76c:	4b24      	ldr	r3, [pc, #144]	; (800f800 <_dtoa_r+0x318>)
 800f76e:	4602      	mov	r2, r0
 800f770:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f774:	e6d1      	b.n	800f51a <_dtoa_r+0x32>
 800f776:	2301      	movs	r3, #1
 800f778:	e7de      	b.n	800f738 <_dtoa_r+0x250>
 800f77a:	2300      	movs	r3, #0
 800f77c:	9308      	str	r3, [sp, #32]
 800f77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f780:	eb0a 0903 	add.w	r9, sl, r3
 800f784:	f109 0301 	add.w	r3, r9, #1
 800f788:	2b01      	cmp	r3, #1
 800f78a:	9301      	str	r3, [sp, #4]
 800f78c:	bfb8      	it	lt
 800f78e:	2301      	movlt	r3, #1
 800f790:	e7dd      	b.n	800f74e <_dtoa_r+0x266>
 800f792:	2301      	movs	r3, #1
 800f794:	e7f2      	b.n	800f77c <_dtoa_r+0x294>
 800f796:	2501      	movs	r5, #1
 800f798:	2300      	movs	r3, #0
 800f79a:	9305      	str	r3, [sp, #20]
 800f79c:	9508      	str	r5, [sp, #32]
 800f79e:	f04f 39ff 	mov.w	r9, #4294967295
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800f7a8:	2312      	movs	r3, #18
 800f7aa:	9209      	str	r2, [sp, #36]	; 0x24
 800f7ac:	e7cf      	b.n	800f74e <_dtoa_r+0x266>
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	9308      	str	r3, [sp, #32]
 800f7b2:	e7f4      	b.n	800f79e <_dtoa_r+0x2b6>
 800f7b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f7b8:	f8cd 9004 	str.w	r9, [sp, #4]
 800f7bc:	464b      	mov	r3, r9
 800f7be:	e7c6      	b.n	800f74e <_dtoa_r+0x266>
 800f7c0:	3101      	adds	r1, #1
 800f7c2:	6041      	str	r1, [r0, #4]
 800f7c4:	0052      	lsls	r2, r2, #1
 800f7c6:	e7c6      	b.n	800f756 <_dtoa_r+0x26e>
 800f7c8:	636f4361 	.word	0x636f4361
 800f7cc:	3fd287a7 	.word	0x3fd287a7
 800f7d0:	8b60c8b3 	.word	0x8b60c8b3
 800f7d4:	3fc68a28 	.word	0x3fc68a28
 800f7d8:	509f79fb 	.word	0x509f79fb
 800f7dc:	3fd34413 	.word	0x3fd34413
 800f7e0:	08025960 	.word	0x08025960
 800f7e4:	08025b22 	.word	0x08025b22
 800f7e8:	7ff00000 	.word	0x7ff00000
 800f7ec:	08025b1e 	.word	0x08025b1e
 800f7f0:	08025b15 	.word	0x08025b15
 800f7f4:	080258e1 	.word	0x080258e1
 800f7f8:	3ff80000 	.word	0x3ff80000
 800f7fc:	08025c98 	.word	0x08025c98
 800f800:	08025b81 	.word	0x08025b81
 800f804:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f806:	9a00      	ldr	r2, [sp, #0]
 800f808:	601a      	str	r2, [r3, #0]
 800f80a:	9b01      	ldr	r3, [sp, #4]
 800f80c:	2b0e      	cmp	r3, #14
 800f80e:	f200 80ad 	bhi.w	800f96c <_dtoa_r+0x484>
 800f812:	2d00      	cmp	r5, #0
 800f814:	f000 80aa 	beq.w	800f96c <_dtoa_r+0x484>
 800f818:	f1ba 0f00 	cmp.w	sl, #0
 800f81c:	dd36      	ble.n	800f88c <_dtoa_r+0x3a4>
 800f81e:	4ac3      	ldr	r2, [pc, #780]	; (800fb2c <_dtoa_r+0x644>)
 800f820:	f00a 030f 	and.w	r3, sl, #15
 800f824:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f828:	ed93 7b00 	vldr	d7, [r3]
 800f82c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f830:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f834:	eeb0 8a47 	vmov.f32	s16, s14
 800f838:	eef0 8a67 	vmov.f32	s17, s15
 800f83c:	d016      	beq.n	800f86c <_dtoa_r+0x384>
 800f83e:	4bbc      	ldr	r3, [pc, #752]	; (800fb30 <_dtoa_r+0x648>)
 800f840:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f844:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f848:	f7f1 f818 	bl	800087c <__aeabi_ddiv>
 800f84c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f850:	f007 070f 	and.w	r7, r7, #15
 800f854:	2503      	movs	r5, #3
 800f856:	4eb6      	ldr	r6, [pc, #728]	; (800fb30 <_dtoa_r+0x648>)
 800f858:	b957      	cbnz	r7, 800f870 <_dtoa_r+0x388>
 800f85a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f85e:	ec53 2b18 	vmov	r2, r3, d8
 800f862:	f7f1 f80b 	bl	800087c <__aeabi_ddiv>
 800f866:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f86a:	e029      	b.n	800f8c0 <_dtoa_r+0x3d8>
 800f86c:	2502      	movs	r5, #2
 800f86e:	e7f2      	b.n	800f856 <_dtoa_r+0x36e>
 800f870:	07f9      	lsls	r1, r7, #31
 800f872:	d508      	bpl.n	800f886 <_dtoa_r+0x39e>
 800f874:	ec51 0b18 	vmov	r0, r1, d8
 800f878:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f87c:	f7f0 fed4 	bl	8000628 <__aeabi_dmul>
 800f880:	ec41 0b18 	vmov	d8, r0, r1
 800f884:	3501      	adds	r5, #1
 800f886:	107f      	asrs	r7, r7, #1
 800f888:	3608      	adds	r6, #8
 800f88a:	e7e5      	b.n	800f858 <_dtoa_r+0x370>
 800f88c:	f000 80a6 	beq.w	800f9dc <_dtoa_r+0x4f4>
 800f890:	f1ca 0600 	rsb	r6, sl, #0
 800f894:	4ba5      	ldr	r3, [pc, #660]	; (800fb2c <_dtoa_r+0x644>)
 800f896:	4fa6      	ldr	r7, [pc, #664]	; (800fb30 <_dtoa_r+0x648>)
 800f898:	f006 020f 	and.w	r2, r6, #15
 800f89c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f8a8:	f7f0 febe 	bl	8000628 <__aeabi_dmul>
 800f8ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8b0:	1136      	asrs	r6, r6, #4
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	2502      	movs	r5, #2
 800f8b6:	2e00      	cmp	r6, #0
 800f8b8:	f040 8085 	bne.w	800f9c6 <_dtoa_r+0x4de>
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d1d2      	bne.n	800f866 <_dtoa_r+0x37e>
 800f8c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	f000 808c 	beq.w	800f9e0 <_dtoa_r+0x4f8>
 800f8c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f8cc:	4b99      	ldr	r3, [pc, #612]	; (800fb34 <_dtoa_r+0x64c>)
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	4639      	mov	r1, r7
 800f8d4:	f7f1 f91a 	bl	8000b0c <__aeabi_dcmplt>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	f000 8081 	beq.w	800f9e0 <_dtoa_r+0x4f8>
 800f8de:	9b01      	ldr	r3, [sp, #4]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d07d      	beq.n	800f9e0 <_dtoa_r+0x4f8>
 800f8e4:	f1b9 0f00 	cmp.w	r9, #0
 800f8e8:	dd3c      	ble.n	800f964 <_dtoa_r+0x47c>
 800f8ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f8ee:	9307      	str	r3, [sp, #28]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	4b91      	ldr	r3, [pc, #580]	; (800fb38 <_dtoa_r+0x650>)
 800f8f4:	4630      	mov	r0, r6
 800f8f6:	4639      	mov	r1, r7
 800f8f8:	f7f0 fe96 	bl	8000628 <__aeabi_dmul>
 800f8fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f900:	3501      	adds	r5, #1
 800f902:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f906:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f90a:	4628      	mov	r0, r5
 800f90c:	f7f0 fe22 	bl	8000554 <__aeabi_i2d>
 800f910:	4632      	mov	r2, r6
 800f912:	463b      	mov	r3, r7
 800f914:	f7f0 fe88 	bl	8000628 <__aeabi_dmul>
 800f918:	4b88      	ldr	r3, [pc, #544]	; (800fb3c <_dtoa_r+0x654>)
 800f91a:	2200      	movs	r2, #0
 800f91c:	f7f0 fcce 	bl	80002bc <__adddf3>
 800f920:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f928:	9303      	str	r3, [sp, #12]
 800f92a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d15c      	bne.n	800f9ea <_dtoa_r+0x502>
 800f930:	4b83      	ldr	r3, [pc, #524]	; (800fb40 <_dtoa_r+0x658>)
 800f932:	2200      	movs	r2, #0
 800f934:	4630      	mov	r0, r6
 800f936:	4639      	mov	r1, r7
 800f938:	f7f0 fcbe 	bl	80002b8 <__aeabi_dsub>
 800f93c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f940:	4606      	mov	r6, r0
 800f942:	460f      	mov	r7, r1
 800f944:	f7f1 f900 	bl	8000b48 <__aeabi_dcmpgt>
 800f948:	2800      	cmp	r0, #0
 800f94a:	f040 8296 	bne.w	800fe7a <_dtoa_r+0x992>
 800f94e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f952:	4630      	mov	r0, r6
 800f954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f958:	4639      	mov	r1, r7
 800f95a:	f7f1 f8d7 	bl	8000b0c <__aeabi_dcmplt>
 800f95e:	2800      	cmp	r0, #0
 800f960:	f040 8288 	bne.w	800fe74 <_dtoa_r+0x98c>
 800f964:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f968:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f96c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f96e:	2b00      	cmp	r3, #0
 800f970:	f2c0 8158 	blt.w	800fc24 <_dtoa_r+0x73c>
 800f974:	f1ba 0f0e 	cmp.w	sl, #14
 800f978:	f300 8154 	bgt.w	800fc24 <_dtoa_r+0x73c>
 800f97c:	4b6b      	ldr	r3, [pc, #428]	; (800fb2c <_dtoa_r+0x644>)
 800f97e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f982:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f988:	2b00      	cmp	r3, #0
 800f98a:	f280 80e3 	bge.w	800fb54 <_dtoa_r+0x66c>
 800f98e:	9b01      	ldr	r3, [sp, #4]
 800f990:	2b00      	cmp	r3, #0
 800f992:	f300 80df 	bgt.w	800fb54 <_dtoa_r+0x66c>
 800f996:	f040 826d 	bne.w	800fe74 <_dtoa_r+0x98c>
 800f99a:	4b69      	ldr	r3, [pc, #420]	; (800fb40 <_dtoa_r+0x658>)
 800f99c:	2200      	movs	r2, #0
 800f99e:	4640      	mov	r0, r8
 800f9a0:	4649      	mov	r1, r9
 800f9a2:	f7f0 fe41 	bl	8000628 <__aeabi_dmul>
 800f9a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9aa:	f7f1 f8c3 	bl	8000b34 <__aeabi_dcmpge>
 800f9ae:	9e01      	ldr	r6, [sp, #4]
 800f9b0:	4637      	mov	r7, r6
 800f9b2:	2800      	cmp	r0, #0
 800f9b4:	f040 8243 	bne.w	800fe3e <_dtoa_r+0x956>
 800f9b8:	9d00      	ldr	r5, [sp, #0]
 800f9ba:	2331      	movs	r3, #49	; 0x31
 800f9bc:	f805 3b01 	strb.w	r3, [r5], #1
 800f9c0:	f10a 0a01 	add.w	sl, sl, #1
 800f9c4:	e23f      	b.n	800fe46 <_dtoa_r+0x95e>
 800f9c6:	07f2      	lsls	r2, r6, #31
 800f9c8:	d505      	bpl.n	800f9d6 <_dtoa_r+0x4ee>
 800f9ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9ce:	f7f0 fe2b 	bl	8000628 <__aeabi_dmul>
 800f9d2:	3501      	adds	r5, #1
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	1076      	asrs	r6, r6, #1
 800f9d8:	3708      	adds	r7, #8
 800f9da:	e76c      	b.n	800f8b6 <_dtoa_r+0x3ce>
 800f9dc:	2502      	movs	r5, #2
 800f9de:	e76f      	b.n	800f8c0 <_dtoa_r+0x3d8>
 800f9e0:	9b01      	ldr	r3, [sp, #4]
 800f9e2:	f8cd a01c 	str.w	sl, [sp, #28]
 800f9e6:	930c      	str	r3, [sp, #48]	; 0x30
 800f9e8:	e78d      	b.n	800f906 <_dtoa_r+0x41e>
 800f9ea:	9900      	ldr	r1, [sp, #0]
 800f9ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f9ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f9f0:	4b4e      	ldr	r3, [pc, #312]	; (800fb2c <_dtoa_r+0x644>)
 800f9f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f9f6:	4401      	add	r1, r0
 800f9f8:	9102      	str	r1, [sp, #8]
 800f9fa:	9908      	ldr	r1, [sp, #32]
 800f9fc:	eeb0 8a47 	vmov.f32	s16, s14
 800fa00:	eef0 8a67 	vmov.f32	s17, s15
 800fa04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fa0c:	2900      	cmp	r1, #0
 800fa0e:	d045      	beq.n	800fa9c <_dtoa_r+0x5b4>
 800fa10:	494c      	ldr	r1, [pc, #304]	; (800fb44 <_dtoa_r+0x65c>)
 800fa12:	2000      	movs	r0, #0
 800fa14:	f7f0 ff32 	bl	800087c <__aeabi_ddiv>
 800fa18:	ec53 2b18 	vmov	r2, r3, d8
 800fa1c:	f7f0 fc4c 	bl	80002b8 <__aeabi_dsub>
 800fa20:	9d00      	ldr	r5, [sp, #0]
 800fa22:	ec41 0b18 	vmov	d8, r0, r1
 800fa26:	4639      	mov	r1, r7
 800fa28:	4630      	mov	r0, r6
 800fa2a:	f7f1 f8ad 	bl	8000b88 <__aeabi_d2iz>
 800fa2e:	900c      	str	r0, [sp, #48]	; 0x30
 800fa30:	f7f0 fd90 	bl	8000554 <__aeabi_i2d>
 800fa34:	4602      	mov	r2, r0
 800fa36:	460b      	mov	r3, r1
 800fa38:	4630      	mov	r0, r6
 800fa3a:	4639      	mov	r1, r7
 800fa3c:	f7f0 fc3c 	bl	80002b8 <__aeabi_dsub>
 800fa40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa42:	3330      	adds	r3, #48	; 0x30
 800fa44:	f805 3b01 	strb.w	r3, [r5], #1
 800fa48:	ec53 2b18 	vmov	r2, r3, d8
 800fa4c:	4606      	mov	r6, r0
 800fa4e:	460f      	mov	r7, r1
 800fa50:	f7f1 f85c 	bl	8000b0c <__aeabi_dcmplt>
 800fa54:	2800      	cmp	r0, #0
 800fa56:	d165      	bne.n	800fb24 <_dtoa_r+0x63c>
 800fa58:	4632      	mov	r2, r6
 800fa5a:	463b      	mov	r3, r7
 800fa5c:	4935      	ldr	r1, [pc, #212]	; (800fb34 <_dtoa_r+0x64c>)
 800fa5e:	2000      	movs	r0, #0
 800fa60:	f7f0 fc2a 	bl	80002b8 <__aeabi_dsub>
 800fa64:	ec53 2b18 	vmov	r2, r3, d8
 800fa68:	f7f1 f850 	bl	8000b0c <__aeabi_dcmplt>
 800fa6c:	2800      	cmp	r0, #0
 800fa6e:	f040 80b9 	bne.w	800fbe4 <_dtoa_r+0x6fc>
 800fa72:	9b02      	ldr	r3, [sp, #8]
 800fa74:	429d      	cmp	r5, r3
 800fa76:	f43f af75 	beq.w	800f964 <_dtoa_r+0x47c>
 800fa7a:	4b2f      	ldr	r3, [pc, #188]	; (800fb38 <_dtoa_r+0x650>)
 800fa7c:	ec51 0b18 	vmov	r0, r1, d8
 800fa80:	2200      	movs	r2, #0
 800fa82:	f7f0 fdd1 	bl	8000628 <__aeabi_dmul>
 800fa86:	4b2c      	ldr	r3, [pc, #176]	; (800fb38 <_dtoa_r+0x650>)
 800fa88:	ec41 0b18 	vmov	d8, r0, r1
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	4630      	mov	r0, r6
 800fa90:	4639      	mov	r1, r7
 800fa92:	f7f0 fdc9 	bl	8000628 <__aeabi_dmul>
 800fa96:	4606      	mov	r6, r0
 800fa98:	460f      	mov	r7, r1
 800fa9a:	e7c4      	b.n	800fa26 <_dtoa_r+0x53e>
 800fa9c:	ec51 0b17 	vmov	r0, r1, d7
 800faa0:	f7f0 fdc2 	bl	8000628 <__aeabi_dmul>
 800faa4:	9b02      	ldr	r3, [sp, #8]
 800faa6:	9d00      	ldr	r5, [sp, #0]
 800faa8:	930c      	str	r3, [sp, #48]	; 0x30
 800faaa:	ec41 0b18 	vmov	d8, r0, r1
 800faae:	4639      	mov	r1, r7
 800fab0:	4630      	mov	r0, r6
 800fab2:	f7f1 f869 	bl	8000b88 <__aeabi_d2iz>
 800fab6:	9011      	str	r0, [sp, #68]	; 0x44
 800fab8:	f7f0 fd4c 	bl	8000554 <__aeabi_i2d>
 800fabc:	4602      	mov	r2, r0
 800fabe:	460b      	mov	r3, r1
 800fac0:	4630      	mov	r0, r6
 800fac2:	4639      	mov	r1, r7
 800fac4:	f7f0 fbf8 	bl	80002b8 <__aeabi_dsub>
 800fac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800faca:	3330      	adds	r3, #48	; 0x30
 800facc:	f805 3b01 	strb.w	r3, [r5], #1
 800fad0:	9b02      	ldr	r3, [sp, #8]
 800fad2:	429d      	cmp	r5, r3
 800fad4:	4606      	mov	r6, r0
 800fad6:	460f      	mov	r7, r1
 800fad8:	f04f 0200 	mov.w	r2, #0
 800fadc:	d134      	bne.n	800fb48 <_dtoa_r+0x660>
 800fade:	4b19      	ldr	r3, [pc, #100]	; (800fb44 <_dtoa_r+0x65c>)
 800fae0:	ec51 0b18 	vmov	r0, r1, d8
 800fae4:	f7f0 fbea 	bl	80002bc <__adddf3>
 800fae8:	4602      	mov	r2, r0
 800faea:	460b      	mov	r3, r1
 800faec:	4630      	mov	r0, r6
 800faee:	4639      	mov	r1, r7
 800faf0:	f7f1 f82a 	bl	8000b48 <__aeabi_dcmpgt>
 800faf4:	2800      	cmp	r0, #0
 800faf6:	d175      	bne.n	800fbe4 <_dtoa_r+0x6fc>
 800faf8:	ec53 2b18 	vmov	r2, r3, d8
 800fafc:	4911      	ldr	r1, [pc, #68]	; (800fb44 <_dtoa_r+0x65c>)
 800fafe:	2000      	movs	r0, #0
 800fb00:	f7f0 fbda 	bl	80002b8 <__aeabi_dsub>
 800fb04:	4602      	mov	r2, r0
 800fb06:	460b      	mov	r3, r1
 800fb08:	4630      	mov	r0, r6
 800fb0a:	4639      	mov	r1, r7
 800fb0c:	f7f0 fffe 	bl	8000b0c <__aeabi_dcmplt>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	f43f af27 	beq.w	800f964 <_dtoa_r+0x47c>
 800fb16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fb18:	1e6b      	subs	r3, r5, #1
 800fb1a:	930c      	str	r3, [sp, #48]	; 0x30
 800fb1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fb20:	2b30      	cmp	r3, #48	; 0x30
 800fb22:	d0f8      	beq.n	800fb16 <_dtoa_r+0x62e>
 800fb24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fb28:	e04a      	b.n	800fbc0 <_dtoa_r+0x6d8>
 800fb2a:	bf00      	nop
 800fb2c:	08025c98 	.word	0x08025c98
 800fb30:	08025c70 	.word	0x08025c70
 800fb34:	3ff00000 	.word	0x3ff00000
 800fb38:	40240000 	.word	0x40240000
 800fb3c:	401c0000 	.word	0x401c0000
 800fb40:	40140000 	.word	0x40140000
 800fb44:	3fe00000 	.word	0x3fe00000
 800fb48:	4baf      	ldr	r3, [pc, #700]	; (800fe08 <_dtoa_r+0x920>)
 800fb4a:	f7f0 fd6d 	bl	8000628 <__aeabi_dmul>
 800fb4e:	4606      	mov	r6, r0
 800fb50:	460f      	mov	r7, r1
 800fb52:	e7ac      	b.n	800faae <_dtoa_r+0x5c6>
 800fb54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fb58:	9d00      	ldr	r5, [sp, #0]
 800fb5a:	4642      	mov	r2, r8
 800fb5c:	464b      	mov	r3, r9
 800fb5e:	4630      	mov	r0, r6
 800fb60:	4639      	mov	r1, r7
 800fb62:	f7f0 fe8b 	bl	800087c <__aeabi_ddiv>
 800fb66:	f7f1 f80f 	bl	8000b88 <__aeabi_d2iz>
 800fb6a:	9002      	str	r0, [sp, #8]
 800fb6c:	f7f0 fcf2 	bl	8000554 <__aeabi_i2d>
 800fb70:	4642      	mov	r2, r8
 800fb72:	464b      	mov	r3, r9
 800fb74:	f7f0 fd58 	bl	8000628 <__aeabi_dmul>
 800fb78:	4602      	mov	r2, r0
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	4630      	mov	r0, r6
 800fb7e:	4639      	mov	r1, r7
 800fb80:	f7f0 fb9a 	bl	80002b8 <__aeabi_dsub>
 800fb84:	9e02      	ldr	r6, [sp, #8]
 800fb86:	9f01      	ldr	r7, [sp, #4]
 800fb88:	3630      	adds	r6, #48	; 0x30
 800fb8a:	f805 6b01 	strb.w	r6, [r5], #1
 800fb8e:	9e00      	ldr	r6, [sp, #0]
 800fb90:	1bae      	subs	r6, r5, r6
 800fb92:	42b7      	cmp	r7, r6
 800fb94:	4602      	mov	r2, r0
 800fb96:	460b      	mov	r3, r1
 800fb98:	d137      	bne.n	800fc0a <_dtoa_r+0x722>
 800fb9a:	f7f0 fb8f 	bl	80002bc <__adddf3>
 800fb9e:	4642      	mov	r2, r8
 800fba0:	464b      	mov	r3, r9
 800fba2:	4606      	mov	r6, r0
 800fba4:	460f      	mov	r7, r1
 800fba6:	f7f0 ffcf 	bl	8000b48 <__aeabi_dcmpgt>
 800fbaa:	b9c8      	cbnz	r0, 800fbe0 <_dtoa_r+0x6f8>
 800fbac:	4642      	mov	r2, r8
 800fbae:	464b      	mov	r3, r9
 800fbb0:	4630      	mov	r0, r6
 800fbb2:	4639      	mov	r1, r7
 800fbb4:	f7f0 ffa0 	bl	8000af8 <__aeabi_dcmpeq>
 800fbb8:	b110      	cbz	r0, 800fbc0 <_dtoa_r+0x6d8>
 800fbba:	9b02      	ldr	r3, [sp, #8]
 800fbbc:	07d9      	lsls	r1, r3, #31
 800fbbe:	d40f      	bmi.n	800fbe0 <_dtoa_r+0x6f8>
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	4659      	mov	r1, fp
 800fbc4:	f000 fe6a 	bl	801089c <_Bfree>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	702b      	strb	r3, [r5, #0]
 800fbcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbce:	f10a 0001 	add.w	r0, sl, #1
 800fbd2:	6018      	str	r0, [r3, #0]
 800fbd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	f43f acd8 	beq.w	800f58c <_dtoa_r+0xa4>
 800fbdc:	601d      	str	r5, [r3, #0]
 800fbde:	e4d5      	b.n	800f58c <_dtoa_r+0xa4>
 800fbe0:	f8cd a01c 	str.w	sl, [sp, #28]
 800fbe4:	462b      	mov	r3, r5
 800fbe6:	461d      	mov	r5, r3
 800fbe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbec:	2a39      	cmp	r2, #57	; 0x39
 800fbee:	d108      	bne.n	800fc02 <_dtoa_r+0x71a>
 800fbf0:	9a00      	ldr	r2, [sp, #0]
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d1f7      	bne.n	800fbe6 <_dtoa_r+0x6fe>
 800fbf6:	9a07      	ldr	r2, [sp, #28]
 800fbf8:	9900      	ldr	r1, [sp, #0]
 800fbfa:	3201      	adds	r2, #1
 800fbfc:	9207      	str	r2, [sp, #28]
 800fbfe:	2230      	movs	r2, #48	; 0x30
 800fc00:	700a      	strb	r2, [r1, #0]
 800fc02:	781a      	ldrb	r2, [r3, #0]
 800fc04:	3201      	adds	r2, #1
 800fc06:	701a      	strb	r2, [r3, #0]
 800fc08:	e78c      	b.n	800fb24 <_dtoa_r+0x63c>
 800fc0a:	4b7f      	ldr	r3, [pc, #508]	; (800fe08 <_dtoa_r+0x920>)
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	f7f0 fd0b 	bl	8000628 <__aeabi_dmul>
 800fc12:	2200      	movs	r2, #0
 800fc14:	2300      	movs	r3, #0
 800fc16:	4606      	mov	r6, r0
 800fc18:	460f      	mov	r7, r1
 800fc1a:	f7f0 ff6d 	bl	8000af8 <__aeabi_dcmpeq>
 800fc1e:	2800      	cmp	r0, #0
 800fc20:	d09b      	beq.n	800fb5a <_dtoa_r+0x672>
 800fc22:	e7cd      	b.n	800fbc0 <_dtoa_r+0x6d8>
 800fc24:	9a08      	ldr	r2, [sp, #32]
 800fc26:	2a00      	cmp	r2, #0
 800fc28:	f000 80c4 	beq.w	800fdb4 <_dtoa_r+0x8cc>
 800fc2c:	9a05      	ldr	r2, [sp, #20]
 800fc2e:	2a01      	cmp	r2, #1
 800fc30:	f300 80a8 	bgt.w	800fd84 <_dtoa_r+0x89c>
 800fc34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fc36:	2a00      	cmp	r2, #0
 800fc38:	f000 80a0 	beq.w	800fd7c <_dtoa_r+0x894>
 800fc3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fc40:	9e06      	ldr	r6, [sp, #24]
 800fc42:	4645      	mov	r5, r8
 800fc44:	9a04      	ldr	r2, [sp, #16]
 800fc46:	2101      	movs	r1, #1
 800fc48:	441a      	add	r2, r3
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	4498      	add	r8, r3
 800fc4e:	9204      	str	r2, [sp, #16]
 800fc50:	f000 ff2a 	bl	8010aa8 <__i2b>
 800fc54:	4607      	mov	r7, r0
 800fc56:	2d00      	cmp	r5, #0
 800fc58:	dd0b      	ble.n	800fc72 <_dtoa_r+0x78a>
 800fc5a:	9b04      	ldr	r3, [sp, #16]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	dd08      	ble.n	800fc72 <_dtoa_r+0x78a>
 800fc60:	42ab      	cmp	r3, r5
 800fc62:	9a04      	ldr	r2, [sp, #16]
 800fc64:	bfa8      	it	ge
 800fc66:	462b      	movge	r3, r5
 800fc68:	eba8 0803 	sub.w	r8, r8, r3
 800fc6c:	1aed      	subs	r5, r5, r3
 800fc6e:	1ad3      	subs	r3, r2, r3
 800fc70:	9304      	str	r3, [sp, #16]
 800fc72:	9b06      	ldr	r3, [sp, #24]
 800fc74:	b1fb      	cbz	r3, 800fcb6 <_dtoa_r+0x7ce>
 800fc76:	9b08      	ldr	r3, [sp, #32]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f000 809f 	beq.w	800fdbc <_dtoa_r+0x8d4>
 800fc7e:	2e00      	cmp	r6, #0
 800fc80:	dd11      	ble.n	800fca6 <_dtoa_r+0x7be>
 800fc82:	4639      	mov	r1, r7
 800fc84:	4632      	mov	r2, r6
 800fc86:	4620      	mov	r0, r4
 800fc88:	f000 ffca 	bl	8010c20 <__pow5mult>
 800fc8c:	465a      	mov	r2, fp
 800fc8e:	4601      	mov	r1, r0
 800fc90:	4607      	mov	r7, r0
 800fc92:	4620      	mov	r0, r4
 800fc94:	f000 ff1e 	bl	8010ad4 <__multiply>
 800fc98:	4659      	mov	r1, fp
 800fc9a:	9007      	str	r0, [sp, #28]
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f000 fdfd 	bl	801089c <_Bfree>
 800fca2:	9b07      	ldr	r3, [sp, #28]
 800fca4:	469b      	mov	fp, r3
 800fca6:	9b06      	ldr	r3, [sp, #24]
 800fca8:	1b9a      	subs	r2, r3, r6
 800fcaa:	d004      	beq.n	800fcb6 <_dtoa_r+0x7ce>
 800fcac:	4659      	mov	r1, fp
 800fcae:	4620      	mov	r0, r4
 800fcb0:	f000 ffb6 	bl	8010c20 <__pow5mult>
 800fcb4:	4683      	mov	fp, r0
 800fcb6:	2101      	movs	r1, #1
 800fcb8:	4620      	mov	r0, r4
 800fcba:	f000 fef5 	bl	8010aa8 <__i2b>
 800fcbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	4606      	mov	r6, r0
 800fcc4:	dd7c      	ble.n	800fdc0 <_dtoa_r+0x8d8>
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	4601      	mov	r1, r0
 800fcca:	4620      	mov	r0, r4
 800fccc:	f000 ffa8 	bl	8010c20 <__pow5mult>
 800fcd0:	9b05      	ldr	r3, [sp, #20]
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	4606      	mov	r6, r0
 800fcd6:	dd76      	ble.n	800fdc6 <_dtoa_r+0x8de>
 800fcd8:	2300      	movs	r3, #0
 800fcda:	9306      	str	r3, [sp, #24]
 800fcdc:	6933      	ldr	r3, [r6, #16]
 800fcde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fce2:	6918      	ldr	r0, [r3, #16]
 800fce4:	f000 fe90 	bl	8010a08 <__hi0bits>
 800fce8:	f1c0 0020 	rsb	r0, r0, #32
 800fcec:	9b04      	ldr	r3, [sp, #16]
 800fcee:	4418      	add	r0, r3
 800fcf0:	f010 001f 	ands.w	r0, r0, #31
 800fcf4:	f000 8086 	beq.w	800fe04 <_dtoa_r+0x91c>
 800fcf8:	f1c0 0320 	rsb	r3, r0, #32
 800fcfc:	2b04      	cmp	r3, #4
 800fcfe:	dd7f      	ble.n	800fe00 <_dtoa_r+0x918>
 800fd00:	f1c0 001c 	rsb	r0, r0, #28
 800fd04:	9b04      	ldr	r3, [sp, #16]
 800fd06:	4403      	add	r3, r0
 800fd08:	4480      	add	r8, r0
 800fd0a:	4405      	add	r5, r0
 800fd0c:	9304      	str	r3, [sp, #16]
 800fd0e:	f1b8 0f00 	cmp.w	r8, #0
 800fd12:	dd05      	ble.n	800fd20 <_dtoa_r+0x838>
 800fd14:	4659      	mov	r1, fp
 800fd16:	4642      	mov	r2, r8
 800fd18:	4620      	mov	r0, r4
 800fd1a:	f000 ffdb 	bl	8010cd4 <__lshift>
 800fd1e:	4683      	mov	fp, r0
 800fd20:	9b04      	ldr	r3, [sp, #16]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	dd05      	ble.n	800fd32 <_dtoa_r+0x84a>
 800fd26:	4631      	mov	r1, r6
 800fd28:	461a      	mov	r2, r3
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f000 ffd2 	bl	8010cd4 <__lshift>
 800fd30:	4606      	mov	r6, r0
 800fd32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d069      	beq.n	800fe0c <_dtoa_r+0x924>
 800fd38:	4631      	mov	r1, r6
 800fd3a:	4658      	mov	r0, fp
 800fd3c:	f001 f836 	bl	8010dac <__mcmp>
 800fd40:	2800      	cmp	r0, #0
 800fd42:	da63      	bge.n	800fe0c <_dtoa_r+0x924>
 800fd44:	2300      	movs	r3, #0
 800fd46:	4659      	mov	r1, fp
 800fd48:	220a      	movs	r2, #10
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f000 fdc8 	bl	80108e0 <__multadd>
 800fd50:	9b08      	ldr	r3, [sp, #32]
 800fd52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd56:	4683      	mov	fp, r0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	f000 818f 	beq.w	801007c <_dtoa_r+0xb94>
 800fd5e:	4639      	mov	r1, r7
 800fd60:	2300      	movs	r3, #0
 800fd62:	220a      	movs	r2, #10
 800fd64:	4620      	mov	r0, r4
 800fd66:	f000 fdbb 	bl	80108e0 <__multadd>
 800fd6a:	f1b9 0f00 	cmp.w	r9, #0
 800fd6e:	4607      	mov	r7, r0
 800fd70:	f300 808e 	bgt.w	800fe90 <_dtoa_r+0x9a8>
 800fd74:	9b05      	ldr	r3, [sp, #20]
 800fd76:	2b02      	cmp	r3, #2
 800fd78:	dc50      	bgt.n	800fe1c <_dtoa_r+0x934>
 800fd7a:	e089      	b.n	800fe90 <_dtoa_r+0x9a8>
 800fd7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fd7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fd82:	e75d      	b.n	800fc40 <_dtoa_r+0x758>
 800fd84:	9b01      	ldr	r3, [sp, #4]
 800fd86:	1e5e      	subs	r6, r3, #1
 800fd88:	9b06      	ldr	r3, [sp, #24]
 800fd8a:	42b3      	cmp	r3, r6
 800fd8c:	bfbf      	itttt	lt
 800fd8e:	9b06      	ldrlt	r3, [sp, #24]
 800fd90:	9606      	strlt	r6, [sp, #24]
 800fd92:	1af2      	sublt	r2, r6, r3
 800fd94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fd96:	bfb6      	itet	lt
 800fd98:	189b      	addlt	r3, r3, r2
 800fd9a:	1b9e      	subge	r6, r3, r6
 800fd9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fd9e:	9b01      	ldr	r3, [sp, #4]
 800fda0:	bfb8      	it	lt
 800fda2:	2600      	movlt	r6, #0
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	bfb5      	itete	lt
 800fda8:	eba8 0503 	sublt.w	r5, r8, r3
 800fdac:	9b01      	ldrge	r3, [sp, #4]
 800fdae:	2300      	movlt	r3, #0
 800fdb0:	4645      	movge	r5, r8
 800fdb2:	e747      	b.n	800fc44 <_dtoa_r+0x75c>
 800fdb4:	9e06      	ldr	r6, [sp, #24]
 800fdb6:	9f08      	ldr	r7, [sp, #32]
 800fdb8:	4645      	mov	r5, r8
 800fdba:	e74c      	b.n	800fc56 <_dtoa_r+0x76e>
 800fdbc:	9a06      	ldr	r2, [sp, #24]
 800fdbe:	e775      	b.n	800fcac <_dtoa_r+0x7c4>
 800fdc0:	9b05      	ldr	r3, [sp, #20]
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	dc18      	bgt.n	800fdf8 <_dtoa_r+0x910>
 800fdc6:	9b02      	ldr	r3, [sp, #8]
 800fdc8:	b9b3      	cbnz	r3, 800fdf8 <_dtoa_r+0x910>
 800fdca:	9b03      	ldr	r3, [sp, #12]
 800fdcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fdd0:	b9a3      	cbnz	r3, 800fdfc <_dtoa_r+0x914>
 800fdd2:	9b03      	ldr	r3, [sp, #12]
 800fdd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fdd8:	0d1b      	lsrs	r3, r3, #20
 800fdda:	051b      	lsls	r3, r3, #20
 800fddc:	b12b      	cbz	r3, 800fdea <_dtoa_r+0x902>
 800fdde:	9b04      	ldr	r3, [sp, #16]
 800fde0:	3301      	adds	r3, #1
 800fde2:	9304      	str	r3, [sp, #16]
 800fde4:	f108 0801 	add.w	r8, r8, #1
 800fde8:	2301      	movs	r3, #1
 800fdea:	9306      	str	r3, [sp, #24]
 800fdec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	f47f af74 	bne.w	800fcdc <_dtoa_r+0x7f4>
 800fdf4:	2001      	movs	r0, #1
 800fdf6:	e779      	b.n	800fcec <_dtoa_r+0x804>
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	e7f6      	b.n	800fdea <_dtoa_r+0x902>
 800fdfc:	9b02      	ldr	r3, [sp, #8]
 800fdfe:	e7f4      	b.n	800fdea <_dtoa_r+0x902>
 800fe00:	d085      	beq.n	800fd0e <_dtoa_r+0x826>
 800fe02:	4618      	mov	r0, r3
 800fe04:	301c      	adds	r0, #28
 800fe06:	e77d      	b.n	800fd04 <_dtoa_r+0x81c>
 800fe08:	40240000 	.word	0x40240000
 800fe0c:	9b01      	ldr	r3, [sp, #4]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	dc38      	bgt.n	800fe84 <_dtoa_r+0x99c>
 800fe12:	9b05      	ldr	r3, [sp, #20]
 800fe14:	2b02      	cmp	r3, #2
 800fe16:	dd35      	ble.n	800fe84 <_dtoa_r+0x99c>
 800fe18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fe1c:	f1b9 0f00 	cmp.w	r9, #0
 800fe20:	d10d      	bne.n	800fe3e <_dtoa_r+0x956>
 800fe22:	4631      	mov	r1, r6
 800fe24:	464b      	mov	r3, r9
 800fe26:	2205      	movs	r2, #5
 800fe28:	4620      	mov	r0, r4
 800fe2a:	f000 fd59 	bl	80108e0 <__multadd>
 800fe2e:	4601      	mov	r1, r0
 800fe30:	4606      	mov	r6, r0
 800fe32:	4658      	mov	r0, fp
 800fe34:	f000 ffba 	bl	8010dac <__mcmp>
 800fe38:	2800      	cmp	r0, #0
 800fe3a:	f73f adbd 	bgt.w	800f9b8 <_dtoa_r+0x4d0>
 800fe3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe40:	9d00      	ldr	r5, [sp, #0]
 800fe42:	ea6f 0a03 	mvn.w	sl, r3
 800fe46:	f04f 0800 	mov.w	r8, #0
 800fe4a:	4631      	mov	r1, r6
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	f000 fd25 	bl	801089c <_Bfree>
 800fe52:	2f00      	cmp	r7, #0
 800fe54:	f43f aeb4 	beq.w	800fbc0 <_dtoa_r+0x6d8>
 800fe58:	f1b8 0f00 	cmp.w	r8, #0
 800fe5c:	d005      	beq.n	800fe6a <_dtoa_r+0x982>
 800fe5e:	45b8      	cmp	r8, r7
 800fe60:	d003      	beq.n	800fe6a <_dtoa_r+0x982>
 800fe62:	4641      	mov	r1, r8
 800fe64:	4620      	mov	r0, r4
 800fe66:	f000 fd19 	bl	801089c <_Bfree>
 800fe6a:	4639      	mov	r1, r7
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	f000 fd15 	bl	801089c <_Bfree>
 800fe72:	e6a5      	b.n	800fbc0 <_dtoa_r+0x6d8>
 800fe74:	2600      	movs	r6, #0
 800fe76:	4637      	mov	r7, r6
 800fe78:	e7e1      	b.n	800fe3e <_dtoa_r+0x956>
 800fe7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fe7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fe80:	4637      	mov	r7, r6
 800fe82:	e599      	b.n	800f9b8 <_dtoa_r+0x4d0>
 800fe84:	9b08      	ldr	r3, [sp, #32]
 800fe86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	f000 80fd 	beq.w	801008a <_dtoa_r+0xba2>
 800fe90:	2d00      	cmp	r5, #0
 800fe92:	dd05      	ble.n	800fea0 <_dtoa_r+0x9b8>
 800fe94:	4639      	mov	r1, r7
 800fe96:	462a      	mov	r2, r5
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f000 ff1b 	bl	8010cd4 <__lshift>
 800fe9e:	4607      	mov	r7, r0
 800fea0:	9b06      	ldr	r3, [sp, #24]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d05c      	beq.n	800ff60 <_dtoa_r+0xa78>
 800fea6:	6879      	ldr	r1, [r7, #4]
 800fea8:	4620      	mov	r0, r4
 800feaa:	f000 fcb7 	bl	801081c <_Balloc>
 800feae:	4605      	mov	r5, r0
 800feb0:	b928      	cbnz	r0, 800febe <_dtoa_r+0x9d6>
 800feb2:	4b80      	ldr	r3, [pc, #512]	; (80100b4 <_dtoa_r+0xbcc>)
 800feb4:	4602      	mov	r2, r0
 800feb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800feba:	f7ff bb2e 	b.w	800f51a <_dtoa_r+0x32>
 800febe:	693a      	ldr	r2, [r7, #16]
 800fec0:	3202      	adds	r2, #2
 800fec2:	0092      	lsls	r2, r2, #2
 800fec4:	f107 010c 	add.w	r1, r7, #12
 800fec8:	300c      	adds	r0, #12
 800feca:	f000 fc99 	bl	8010800 <memcpy>
 800fece:	2201      	movs	r2, #1
 800fed0:	4629      	mov	r1, r5
 800fed2:	4620      	mov	r0, r4
 800fed4:	f000 fefe 	bl	8010cd4 <__lshift>
 800fed8:	9b00      	ldr	r3, [sp, #0]
 800feda:	3301      	adds	r3, #1
 800fedc:	9301      	str	r3, [sp, #4]
 800fede:	9b00      	ldr	r3, [sp, #0]
 800fee0:	444b      	add	r3, r9
 800fee2:	9307      	str	r3, [sp, #28]
 800fee4:	9b02      	ldr	r3, [sp, #8]
 800fee6:	f003 0301 	and.w	r3, r3, #1
 800feea:	46b8      	mov	r8, r7
 800feec:	9306      	str	r3, [sp, #24]
 800feee:	4607      	mov	r7, r0
 800fef0:	9b01      	ldr	r3, [sp, #4]
 800fef2:	4631      	mov	r1, r6
 800fef4:	3b01      	subs	r3, #1
 800fef6:	4658      	mov	r0, fp
 800fef8:	9302      	str	r3, [sp, #8]
 800fefa:	f7ff fa67 	bl	800f3cc <quorem>
 800fefe:	4603      	mov	r3, r0
 800ff00:	3330      	adds	r3, #48	; 0x30
 800ff02:	9004      	str	r0, [sp, #16]
 800ff04:	4641      	mov	r1, r8
 800ff06:	4658      	mov	r0, fp
 800ff08:	9308      	str	r3, [sp, #32]
 800ff0a:	f000 ff4f 	bl	8010dac <__mcmp>
 800ff0e:	463a      	mov	r2, r7
 800ff10:	4681      	mov	r9, r0
 800ff12:	4631      	mov	r1, r6
 800ff14:	4620      	mov	r0, r4
 800ff16:	f000 ff65 	bl	8010de4 <__mdiff>
 800ff1a:	68c2      	ldr	r2, [r0, #12]
 800ff1c:	9b08      	ldr	r3, [sp, #32]
 800ff1e:	4605      	mov	r5, r0
 800ff20:	bb02      	cbnz	r2, 800ff64 <_dtoa_r+0xa7c>
 800ff22:	4601      	mov	r1, r0
 800ff24:	4658      	mov	r0, fp
 800ff26:	f000 ff41 	bl	8010dac <__mcmp>
 800ff2a:	9b08      	ldr	r3, [sp, #32]
 800ff2c:	4602      	mov	r2, r0
 800ff2e:	4629      	mov	r1, r5
 800ff30:	4620      	mov	r0, r4
 800ff32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ff36:	f000 fcb1 	bl	801089c <_Bfree>
 800ff3a:	9b05      	ldr	r3, [sp, #20]
 800ff3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff3e:	9d01      	ldr	r5, [sp, #4]
 800ff40:	ea43 0102 	orr.w	r1, r3, r2
 800ff44:	9b06      	ldr	r3, [sp, #24]
 800ff46:	430b      	orrs	r3, r1
 800ff48:	9b08      	ldr	r3, [sp, #32]
 800ff4a:	d10d      	bne.n	800ff68 <_dtoa_r+0xa80>
 800ff4c:	2b39      	cmp	r3, #57	; 0x39
 800ff4e:	d029      	beq.n	800ffa4 <_dtoa_r+0xabc>
 800ff50:	f1b9 0f00 	cmp.w	r9, #0
 800ff54:	dd01      	ble.n	800ff5a <_dtoa_r+0xa72>
 800ff56:	9b04      	ldr	r3, [sp, #16]
 800ff58:	3331      	adds	r3, #49	; 0x31
 800ff5a:	9a02      	ldr	r2, [sp, #8]
 800ff5c:	7013      	strb	r3, [r2, #0]
 800ff5e:	e774      	b.n	800fe4a <_dtoa_r+0x962>
 800ff60:	4638      	mov	r0, r7
 800ff62:	e7b9      	b.n	800fed8 <_dtoa_r+0x9f0>
 800ff64:	2201      	movs	r2, #1
 800ff66:	e7e2      	b.n	800ff2e <_dtoa_r+0xa46>
 800ff68:	f1b9 0f00 	cmp.w	r9, #0
 800ff6c:	db06      	blt.n	800ff7c <_dtoa_r+0xa94>
 800ff6e:	9905      	ldr	r1, [sp, #20]
 800ff70:	ea41 0909 	orr.w	r9, r1, r9
 800ff74:	9906      	ldr	r1, [sp, #24]
 800ff76:	ea59 0101 	orrs.w	r1, r9, r1
 800ff7a:	d120      	bne.n	800ffbe <_dtoa_r+0xad6>
 800ff7c:	2a00      	cmp	r2, #0
 800ff7e:	ddec      	ble.n	800ff5a <_dtoa_r+0xa72>
 800ff80:	4659      	mov	r1, fp
 800ff82:	2201      	movs	r2, #1
 800ff84:	4620      	mov	r0, r4
 800ff86:	9301      	str	r3, [sp, #4]
 800ff88:	f000 fea4 	bl	8010cd4 <__lshift>
 800ff8c:	4631      	mov	r1, r6
 800ff8e:	4683      	mov	fp, r0
 800ff90:	f000 ff0c 	bl	8010dac <__mcmp>
 800ff94:	2800      	cmp	r0, #0
 800ff96:	9b01      	ldr	r3, [sp, #4]
 800ff98:	dc02      	bgt.n	800ffa0 <_dtoa_r+0xab8>
 800ff9a:	d1de      	bne.n	800ff5a <_dtoa_r+0xa72>
 800ff9c:	07da      	lsls	r2, r3, #31
 800ff9e:	d5dc      	bpl.n	800ff5a <_dtoa_r+0xa72>
 800ffa0:	2b39      	cmp	r3, #57	; 0x39
 800ffa2:	d1d8      	bne.n	800ff56 <_dtoa_r+0xa6e>
 800ffa4:	9a02      	ldr	r2, [sp, #8]
 800ffa6:	2339      	movs	r3, #57	; 0x39
 800ffa8:	7013      	strb	r3, [r2, #0]
 800ffaa:	462b      	mov	r3, r5
 800ffac:	461d      	mov	r5, r3
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ffb4:	2a39      	cmp	r2, #57	; 0x39
 800ffb6:	d050      	beq.n	801005a <_dtoa_r+0xb72>
 800ffb8:	3201      	adds	r2, #1
 800ffba:	701a      	strb	r2, [r3, #0]
 800ffbc:	e745      	b.n	800fe4a <_dtoa_r+0x962>
 800ffbe:	2a00      	cmp	r2, #0
 800ffc0:	dd03      	ble.n	800ffca <_dtoa_r+0xae2>
 800ffc2:	2b39      	cmp	r3, #57	; 0x39
 800ffc4:	d0ee      	beq.n	800ffa4 <_dtoa_r+0xabc>
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	e7c7      	b.n	800ff5a <_dtoa_r+0xa72>
 800ffca:	9a01      	ldr	r2, [sp, #4]
 800ffcc:	9907      	ldr	r1, [sp, #28]
 800ffce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ffd2:	428a      	cmp	r2, r1
 800ffd4:	d02a      	beq.n	801002c <_dtoa_r+0xb44>
 800ffd6:	4659      	mov	r1, fp
 800ffd8:	2300      	movs	r3, #0
 800ffda:	220a      	movs	r2, #10
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f000 fc7f 	bl	80108e0 <__multadd>
 800ffe2:	45b8      	cmp	r8, r7
 800ffe4:	4683      	mov	fp, r0
 800ffe6:	f04f 0300 	mov.w	r3, #0
 800ffea:	f04f 020a 	mov.w	r2, #10
 800ffee:	4641      	mov	r1, r8
 800fff0:	4620      	mov	r0, r4
 800fff2:	d107      	bne.n	8010004 <_dtoa_r+0xb1c>
 800fff4:	f000 fc74 	bl	80108e0 <__multadd>
 800fff8:	4680      	mov	r8, r0
 800fffa:	4607      	mov	r7, r0
 800fffc:	9b01      	ldr	r3, [sp, #4]
 800fffe:	3301      	adds	r3, #1
 8010000:	9301      	str	r3, [sp, #4]
 8010002:	e775      	b.n	800fef0 <_dtoa_r+0xa08>
 8010004:	f000 fc6c 	bl	80108e0 <__multadd>
 8010008:	4639      	mov	r1, r7
 801000a:	4680      	mov	r8, r0
 801000c:	2300      	movs	r3, #0
 801000e:	220a      	movs	r2, #10
 8010010:	4620      	mov	r0, r4
 8010012:	f000 fc65 	bl	80108e0 <__multadd>
 8010016:	4607      	mov	r7, r0
 8010018:	e7f0      	b.n	800fffc <_dtoa_r+0xb14>
 801001a:	f1b9 0f00 	cmp.w	r9, #0
 801001e:	9a00      	ldr	r2, [sp, #0]
 8010020:	bfcc      	ite	gt
 8010022:	464d      	movgt	r5, r9
 8010024:	2501      	movle	r5, #1
 8010026:	4415      	add	r5, r2
 8010028:	f04f 0800 	mov.w	r8, #0
 801002c:	4659      	mov	r1, fp
 801002e:	2201      	movs	r2, #1
 8010030:	4620      	mov	r0, r4
 8010032:	9301      	str	r3, [sp, #4]
 8010034:	f000 fe4e 	bl	8010cd4 <__lshift>
 8010038:	4631      	mov	r1, r6
 801003a:	4683      	mov	fp, r0
 801003c:	f000 feb6 	bl	8010dac <__mcmp>
 8010040:	2800      	cmp	r0, #0
 8010042:	dcb2      	bgt.n	800ffaa <_dtoa_r+0xac2>
 8010044:	d102      	bne.n	801004c <_dtoa_r+0xb64>
 8010046:	9b01      	ldr	r3, [sp, #4]
 8010048:	07db      	lsls	r3, r3, #31
 801004a:	d4ae      	bmi.n	800ffaa <_dtoa_r+0xac2>
 801004c:	462b      	mov	r3, r5
 801004e:	461d      	mov	r5, r3
 8010050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010054:	2a30      	cmp	r2, #48	; 0x30
 8010056:	d0fa      	beq.n	801004e <_dtoa_r+0xb66>
 8010058:	e6f7      	b.n	800fe4a <_dtoa_r+0x962>
 801005a:	9a00      	ldr	r2, [sp, #0]
 801005c:	429a      	cmp	r2, r3
 801005e:	d1a5      	bne.n	800ffac <_dtoa_r+0xac4>
 8010060:	f10a 0a01 	add.w	sl, sl, #1
 8010064:	2331      	movs	r3, #49	; 0x31
 8010066:	e779      	b.n	800ff5c <_dtoa_r+0xa74>
 8010068:	4b13      	ldr	r3, [pc, #76]	; (80100b8 <_dtoa_r+0xbd0>)
 801006a:	f7ff baaf 	b.w	800f5cc <_dtoa_r+0xe4>
 801006e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010070:	2b00      	cmp	r3, #0
 8010072:	f47f aa86 	bne.w	800f582 <_dtoa_r+0x9a>
 8010076:	4b11      	ldr	r3, [pc, #68]	; (80100bc <_dtoa_r+0xbd4>)
 8010078:	f7ff baa8 	b.w	800f5cc <_dtoa_r+0xe4>
 801007c:	f1b9 0f00 	cmp.w	r9, #0
 8010080:	dc03      	bgt.n	801008a <_dtoa_r+0xba2>
 8010082:	9b05      	ldr	r3, [sp, #20]
 8010084:	2b02      	cmp	r3, #2
 8010086:	f73f aec9 	bgt.w	800fe1c <_dtoa_r+0x934>
 801008a:	9d00      	ldr	r5, [sp, #0]
 801008c:	4631      	mov	r1, r6
 801008e:	4658      	mov	r0, fp
 8010090:	f7ff f99c 	bl	800f3cc <quorem>
 8010094:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010098:	f805 3b01 	strb.w	r3, [r5], #1
 801009c:	9a00      	ldr	r2, [sp, #0]
 801009e:	1aaa      	subs	r2, r5, r2
 80100a0:	4591      	cmp	r9, r2
 80100a2:	ddba      	ble.n	801001a <_dtoa_r+0xb32>
 80100a4:	4659      	mov	r1, fp
 80100a6:	2300      	movs	r3, #0
 80100a8:	220a      	movs	r2, #10
 80100aa:	4620      	mov	r0, r4
 80100ac:	f000 fc18 	bl	80108e0 <__multadd>
 80100b0:	4683      	mov	fp, r0
 80100b2:	e7eb      	b.n	801008c <_dtoa_r+0xba4>
 80100b4:	08025b81 	.word	0x08025b81
 80100b8:	080258e0 	.word	0x080258e0
 80100bc:	08025b15 	.word	0x08025b15

080100c0 <fiprintf>:
 80100c0:	b40e      	push	{r1, r2, r3}
 80100c2:	b503      	push	{r0, r1, lr}
 80100c4:	4601      	mov	r1, r0
 80100c6:	ab03      	add	r3, sp, #12
 80100c8:	4805      	ldr	r0, [pc, #20]	; (80100e0 <fiprintf+0x20>)
 80100ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80100ce:	6800      	ldr	r0, [r0, #0]
 80100d0:	9301      	str	r3, [sp, #4]
 80100d2:	f001 fa9d 	bl	8011610 <_vfiprintf_r>
 80100d6:	b002      	add	sp, #8
 80100d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80100dc:	b003      	add	sp, #12
 80100de:	4770      	bx	lr
 80100e0:	20000040 	.word	0x20000040

080100e4 <rshift>:
 80100e4:	6903      	ldr	r3, [r0, #16]
 80100e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80100ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80100f2:	f100 0414 	add.w	r4, r0, #20
 80100f6:	dd45      	ble.n	8010184 <rshift+0xa0>
 80100f8:	f011 011f 	ands.w	r1, r1, #31
 80100fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010100:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010104:	d10c      	bne.n	8010120 <rshift+0x3c>
 8010106:	f100 0710 	add.w	r7, r0, #16
 801010a:	4629      	mov	r1, r5
 801010c:	42b1      	cmp	r1, r6
 801010e:	d334      	bcc.n	801017a <rshift+0x96>
 8010110:	1a9b      	subs	r3, r3, r2
 8010112:	009b      	lsls	r3, r3, #2
 8010114:	1eea      	subs	r2, r5, #3
 8010116:	4296      	cmp	r6, r2
 8010118:	bf38      	it	cc
 801011a:	2300      	movcc	r3, #0
 801011c:	4423      	add	r3, r4
 801011e:	e015      	b.n	801014c <rshift+0x68>
 8010120:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010124:	f1c1 0820 	rsb	r8, r1, #32
 8010128:	40cf      	lsrs	r7, r1
 801012a:	f105 0e04 	add.w	lr, r5, #4
 801012e:	46a1      	mov	r9, r4
 8010130:	4576      	cmp	r6, lr
 8010132:	46f4      	mov	ip, lr
 8010134:	d815      	bhi.n	8010162 <rshift+0x7e>
 8010136:	1a9b      	subs	r3, r3, r2
 8010138:	009a      	lsls	r2, r3, #2
 801013a:	3a04      	subs	r2, #4
 801013c:	3501      	adds	r5, #1
 801013e:	42ae      	cmp	r6, r5
 8010140:	bf38      	it	cc
 8010142:	2200      	movcc	r2, #0
 8010144:	18a3      	adds	r3, r4, r2
 8010146:	50a7      	str	r7, [r4, r2]
 8010148:	b107      	cbz	r7, 801014c <rshift+0x68>
 801014a:	3304      	adds	r3, #4
 801014c:	1b1a      	subs	r2, r3, r4
 801014e:	42a3      	cmp	r3, r4
 8010150:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010154:	bf08      	it	eq
 8010156:	2300      	moveq	r3, #0
 8010158:	6102      	str	r2, [r0, #16]
 801015a:	bf08      	it	eq
 801015c:	6143      	streq	r3, [r0, #20]
 801015e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010162:	f8dc c000 	ldr.w	ip, [ip]
 8010166:	fa0c fc08 	lsl.w	ip, ip, r8
 801016a:	ea4c 0707 	orr.w	r7, ip, r7
 801016e:	f849 7b04 	str.w	r7, [r9], #4
 8010172:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010176:	40cf      	lsrs	r7, r1
 8010178:	e7da      	b.n	8010130 <rshift+0x4c>
 801017a:	f851 cb04 	ldr.w	ip, [r1], #4
 801017e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010182:	e7c3      	b.n	801010c <rshift+0x28>
 8010184:	4623      	mov	r3, r4
 8010186:	e7e1      	b.n	801014c <rshift+0x68>

08010188 <__hexdig_fun>:
 8010188:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801018c:	2b09      	cmp	r3, #9
 801018e:	d802      	bhi.n	8010196 <__hexdig_fun+0xe>
 8010190:	3820      	subs	r0, #32
 8010192:	b2c0      	uxtb	r0, r0
 8010194:	4770      	bx	lr
 8010196:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801019a:	2b05      	cmp	r3, #5
 801019c:	d801      	bhi.n	80101a2 <__hexdig_fun+0x1a>
 801019e:	3847      	subs	r0, #71	; 0x47
 80101a0:	e7f7      	b.n	8010192 <__hexdig_fun+0xa>
 80101a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80101a6:	2b05      	cmp	r3, #5
 80101a8:	d801      	bhi.n	80101ae <__hexdig_fun+0x26>
 80101aa:	3827      	subs	r0, #39	; 0x27
 80101ac:	e7f1      	b.n	8010192 <__hexdig_fun+0xa>
 80101ae:	2000      	movs	r0, #0
 80101b0:	4770      	bx	lr
	...

080101b4 <__gethex>:
 80101b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b8:	ed2d 8b02 	vpush	{d8}
 80101bc:	b089      	sub	sp, #36	; 0x24
 80101be:	ee08 0a10 	vmov	s16, r0
 80101c2:	9304      	str	r3, [sp, #16]
 80101c4:	4bbc      	ldr	r3, [pc, #752]	; (80104b8 <__gethex+0x304>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	9301      	str	r3, [sp, #4]
 80101ca:	4618      	mov	r0, r3
 80101cc:	468b      	mov	fp, r1
 80101ce:	4690      	mov	r8, r2
 80101d0:	f7f0 f810 	bl	80001f4 <strlen>
 80101d4:	9b01      	ldr	r3, [sp, #4]
 80101d6:	f8db 2000 	ldr.w	r2, [fp]
 80101da:	4403      	add	r3, r0
 80101dc:	4682      	mov	sl, r0
 80101de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80101e2:	9305      	str	r3, [sp, #20]
 80101e4:	1c93      	adds	r3, r2, #2
 80101e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80101ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80101ee:	32fe      	adds	r2, #254	; 0xfe
 80101f0:	18d1      	adds	r1, r2, r3
 80101f2:	461f      	mov	r7, r3
 80101f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80101f8:	9100      	str	r1, [sp, #0]
 80101fa:	2830      	cmp	r0, #48	; 0x30
 80101fc:	d0f8      	beq.n	80101f0 <__gethex+0x3c>
 80101fe:	f7ff ffc3 	bl	8010188 <__hexdig_fun>
 8010202:	4604      	mov	r4, r0
 8010204:	2800      	cmp	r0, #0
 8010206:	d13a      	bne.n	801027e <__gethex+0xca>
 8010208:	9901      	ldr	r1, [sp, #4]
 801020a:	4652      	mov	r2, sl
 801020c:	4638      	mov	r0, r7
 801020e:	f001 fb47 	bl	80118a0 <strncmp>
 8010212:	4605      	mov	r5, r0
 8010214:	2800      	cmp	r0, #0
 8010216:	d168      	bne.n	80102ea <__gethex+0x136>
 8010218:	f817 000a 	ldrb.w	r0, [r7, sl]
 801021c:	eb07 060a 	add.w	r6, r7, sl
 8010220:	f7ff ffb2 	bl	8010188 <__hexdig_fun>
 8010224:	2800      	cmp	r0, #0
 8010226:	d062      	beq.n	80102ee <__gethex+0x13a>
 8010228:	4633      	mov	r3, r6
 801022a:	7818      	ldrb	r0, [r3, #0]
 801022c:	2830      	cmp	r0, #48	; 0x30
 801022e:	461f      	mov	r7, r3
 8010230:	f103 0301 	add.w	r3, r3, #1
 8010234:	d0f9      	beq.n	801022a <__gethex+0x76>
 8010236:	f7ff ffa7 	bl	8010188 <__hexdig_fun>
 801023a:	2301      	movs	r3, #1
 801023c:	fab0 f480 	clz	r4, r0
 8010240:	0964      	lsrs	r4, r4, #5
 8010242:	4635      	mov	r5, r6
 8010244:	9300      	str	r3, [sp, #0]
 8010246:	463a      	mov	r2, r7
 8010248:	4616      	mov	r6, r2
 801024a:	3201      	adds	r2, #1
 801024c:	7830      	ldrb	r0, [r6, #0]
 801024e:	f7ff ff9b 	bl	8010188 <__hexdig_fun>
 8010252:	2800      	cmp	r0, #0
 8010254:	d1f8      	bne.n	8010248 <__gethex+0x94>
 8010256:	9901      	ldr	r1, [sp, #4]
 8010258:	4652      	mov	r2, sl
 801025a:	4630      	mov	r0, r6
 801025c:	f001 fb20 	bl	80118a0 <strncmp>
 8010260:	b980      	cbnz	r0, 8010284 <__gethex+0xd0>
 8010262:	b94d      	cbnz	r5, 8010278 <__gethex+0xc4>
 8010264:	eb06 050a 	add.w	r5, r6, sl
 8010268:	462a      	mov	r2, r5
 801026a:	4616      	mov	r6, r2
 801026c:	3201      	adds	r2, #1
 801026e:	7830      	ldrb	r0, [r6, #0]
 8010270:	f7ff ff8a 	bl	8010188 <__hexdig_fun>
 8010274:	2800      	cmp	r0, #0
 8010276:	d1f8      	bne.n	801026a <__gethex+0xb6>
 8010278:	1bad      	subs	r5, r5, r6
 801027a:	00ad      	lsls	r5, r5, #2
 801027c:	e004      	b.n	8010288 <__gethex+0xd4>
 801027e:	2400      	movs	r4, #0
 8010280:	4625      	mov	r5, r4
 8010282:	e7e0      	b.n	8010246 <__gethex+0x92>
 8010284:	2d00      	cmp	r5, #0
 8010286:	d1f7      	bne.n	8010278 <__gethex+0xc4>
 8010288:	7833      	ldrb	r3, [r6, #0]
 801028a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801028e:	2b50      	cmp	r3, #80	; 0x50
 8010290:	d13b      	bne.n	801030a <__gethex+0x156>
 8010292:	7873      	ldrb	r3, [r6, #1]
 8010294:	2b2b      	cmp	r3, #43	; 0x2b
 8010296:	d02c      	beq.n	80102f2 <__gethex+0x13e>
 8010298:	2b2d      	cmp	r3, #45	; 0x2d
 801029a:	d02e      	beq.n	80102fa <__gethex+0x146>
 801029c:	1c71      	adds	r1, r6, #1
 801029e:	f04f 0900 	mov.w	r9, #0
 80102a2:	7808      	ldrb	r0, [r1, #0]
 80102a4:	f7ff ff70 	bl	8010188 <__hexdig_fun>
 80102a8:	1e43      	subs	r3, r0, #1
 80102aa:	b2db      	uxtb	r3, r3
 80102ac:	2b18      	cmp	r3, #24
 80102ae:	d82c      	bhi.n	801030a <__gethex+0x156>
 80102b0:	f1a0 0210 	sub.w	r2, r0, #16
 80102b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80102b8:	f7ff ff66 	bl	8010188 <__hexdig_fun>
 80102bc:	1e43      	subs	r3, r0, #1
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	2b18      	cmp	r3, #24
 80102c2:	d91d      	bls.n	8010300 <__gethex+0x14c>
 80102c4:	f1b9 0f00 	cmp.w	r9, #0
 80102c8:	d000      	beq.n	80102cc <__gethex+0x118>
 80102ca:	4252      	negs	r2, r2
 80102cc:	4415      	add	r5, r2
 80102ce:	f8cb 1000 	str.w	r1, [fp]
 80102d2:	b1e4      	cbz	r4, 801030e <__gethex+0x15a>
 80102d4:	9b00      	ldr	r3, [sp, #0]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	bf14      	ite	ne
 80102da:	2700      	movne	r7, #0
 80102dc:	2706      	moveq	r7, #6
 80102de:	4638      	mov	r0, r7
 80102e0:	b009      	add	sp, #36	; 0x24
 80102e2:	ecbd 8b02 	vpop	{d8}
 80102e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ea:	463e      	mov	r6, r7
 80102ec:	4625      	mov	r5, r4
 80102ee:	2401      	movs	r4, #1
 80102f0:	e7ca      	b.n	8010288 <__gethex+0xd4>
 80102f2:	f04f 0900 	mov.w	r9, #0
 80102f6:	1cb1      	adds	r1, r6, #2
 80102f8:	e7d3      	b.n	80102a2 <__gethex+0xee>
 80102fa:	f04f 0901 	mov.w	r9, #1
 80102fe:	e7fa      	b.n	80102f6 <__gethex+0x142>
 8010300:	230a      	movs	r3, #10
 8010302:	fb03 0202 	mla	r2, r3, r2, r0
 8010306:	3a10      	subs	r2, #16
 8010308:	e7d4      	b.n	80102b4 <__gethex+0x100>
 801030a:	4631      	mov	r1, r6
 801030c:	e7df      	b.n	80102ce <__gethex+0x11a>
 801030e:	1bf3      	subs	r3, r6, r7
 8010310:	3b01      	subs	r3, #1
 8010312:	4621      	mov	r1, r4
 8010314:	2b07      	cmp	r3, #7
 8010316:	dc0b      	bgt.n	8010330 <__gethex+0x17c>
 8010318:	ee18 0a10 	vmov	r0, s16
 801031c:	f000 fa7e 	bl	801081c <_Balloc>
 8010320:	4604      	mov	r4, r0
 8010322:	b940      	cbnz	r0, 8010336 <__gethex+0x182>
 8010324:	4b65      	ldr	r3, [pc, #404]	; (80104bc <__gethex+0x308>)
 8010326:	4602      	mov	r2, r0
 8010328:	21de      	movs	r1, #222	; 0xde
 801032a:	4865      	ldr	r0, [pc, #404]	; (80104c0 <__gethex+0x30c>)
 801032c:	f7ff f830 	bl	800f390 <__assert_func>
 8010330:	3101      	adds	r1, #1
 8010332:	105b      	asrs	r3, r3, #1
 8010334:	e7ee      	b.n	8010314 <__gethex+0x160>
 8010336:	f100 0914 	add.w	r9, r0, #20
 801033a:	f04f 0b00 	mov.w	fp, #0
 801033e:	f1ca 0301 	rsb	r3, sl, #1
 8010342:	f8cd 9008 	str.w	r9, [sp, #8]
 8010346:	f8cd b000 	str.w	fp, [sp]
 801034a:	9306      	str	r3, [sp, #24]
 801034c:	42b7      	cmp	r7, r6
 801034e:	d340      	bcc.n	80103d2 <__gethex+0x21e>
 8010350:	9802      	ldr	r0, [sp, #8]
 8010352:	9b00      	ldr	r3, [sp, #0]
 8010354:	f840 3b04 	str.w	r3, [r0], #4
 8010358:	eba0 0009 	sub.w	r0, r0, r9
 801035c:	1080      	asrs	r0, r0, #2
 801035e:	0146      	lsls	r6, r0, #5
 8010360:	6120      	str	r0, [r4, #16]
 8010362:	4618      	mov	r0, r3
 8010364:	f000 fb50 	bl	8010a08 <__hi0bits>
 8010368:	1a30      	subs	r0, r6, r0
 801036a:	f8d8 6000 	ldr.w	r6, [r8]
 801036e:	42b0      	cmp	r0, r6
 8010370:	dd63      	ble.n	801043a <__gethex+0x286>
 8010372:	1b87      	subs	r7, r0, r6
 8010374:	4639      	mov	r1, r7
 8010376:	4620      	mov	r0, r4
 8010378:	f000 feea 	bl	8011150 <__any_on>
 801037c:	4682      	mov	sl, r0
 801037e:	b1a8      	cbz	r0, 80103ac <__gethex+0x1f8>
 8010380:	1e7b      	subs	r3, r7, #1
 8010382:	1159      	asrs	r1, r3, #5
 8010384:	f003 021f 	and.w	r2, r3, #31
 8010388:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801038c:	f04f 0a01 	mov.w	sl, #1
 8010390:	fa0a f202 	lsl.w	r2, sl, r2
 8010394:	420a      	tst	r2, r1
 8010396:	d009      	beq.n	80103ac <__gethex+0x1f8>
 8010398:	4553      	cmp	r3, sl
 801039a:	dd05      	ble.n	80103a8 <__gethex+0x1f4>
 801039c:	1eb9      	subs	r1, r7, #2
 801039e:	4620      	mov	r0, r4
 80103a0:	f000 fed6 	bl	8011150 <__any_on>
 80103a4:	2800      	cmp	r0, #0
 80103a6:	d145      	bne.n	8010434 <__gethex+0x280>
 80103a8:	f04f 0a02 	mov.w	sl, #2
 80103ac:	4639      	mov	r1, r7
 80103ae:	4620      	mov	r0, r4
 80103b0:	f7ff fe98 	bl	80100e4 <rshift>
 80103b4:	443d      	add	r5, r7
 80103b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80103ba:	42ab      	cmp	r3, r5
 80103bc:	da4c      	bge.n	8010458 <__gethex+0x2a4>
 80103be:	ee18 0a10 	vmov	r0, s16
 80103c2:	4621      	mov	r1, r4
 80103c4:	f000 fa6a 	bl	801089c <_Bfree>
 80103c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80103ca:	2300      	movs	r3, #0
 80103cc:	6013      	str	r3, [r2, #0]
 80103ce:	27a3      	movs	r7, #163	; 0xa3
 80103d0:	e785      	b.n	80102de <__gethex+0x12a>
 80103d2:	1e73      	subs	r3, r6, #1
 80103d4:	9a05      	ldr	r2, [sp, #20]
 80103d6:	9303      	str	r3, [sp, #12]
 80103d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80103dc:	4293      	cmp	r3, r2
 80103de:	d019      	beq.n	8010414 <__gethex+0x260>
 80103e0:	f1bb 0f20 	cmp.w	fp, #32
 80103e4:	d107      	bne.n	80103f6 <__gethex+0x242>
 80103e6:	9b02      	ldr	r3, [sp, #8]
 80103e8:	9a00      	ldr	r2, [sp, #0]
 80103ea:	f843 2b04 	str.w	r2, [r3], #4
 80103ee:	9302      	str	r3, [sp, #8]
 80103f0:	2300      	movs	r3, #0
 80103f2:	9300      	str	r3, [sp, #0]
 80103f4:	469b      	mov	fp, r3
 80103f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80103fa:	f7ff fec5 	bl	8010188 <__hexdig_fun>
 80103fe:	9b00      	ldr	r3, [sp, #0]
 8010400:	f000 000f 	and.w	r0, r0, #15
 8010404:	fa00 f00b 	lsl.w	r0, r0, fp
 8010408:	4303      	orrs	r3, r0
 801040a:	9300      	str	r3, [sp, #0]
 801040c:	f10b 0b04 	add.w	fp, fp, #4
 8010410:	9b03      	ldr	r3, [sp, #12]
 8010412:	e00d      	b.n	8010430 <__gethex+0x27c>
 8010414:	9b03      	ldr	r3, [sp, #12]
 8010416:	9a06      	ldr	r2, [sp, #24]
 8010418:	4413      	add	r3, r2
 801041a:	42bb      	cmp	r3, r7
 801041c:	d3e0      	bcc.n	80103e0 <__gethex+0x22c>
 801041e:	4618      	mov	r0, r3
 8010420:	9901      	ldr	r1, [sp, #4]
 8010422:	9307      	str	r3, [sp, #28]
 8010424:	4652      	mov	r2, sl
 8010426:	f001 fa3b 	bl	80118a0 <strncmp>
 801042a:	9b07      	ldr	r3, [sp, #28]
 801042c:	2800      	cmp	r0, #0
 801042e:	d1d7      	bne.n	80103e0 <__gethex+0x22c>
 8010430:	461e      	mov	r6, r3
 8010432:	e78b      	b.n	801034c <__gethex+0x198>
 8010434:	f04f 0a03 	mov.w	sl, #3
 8010438:	e7b8      	b.n	80103ac <__gethex+0x1f8>
 801043a:	da0a      	bge.n	8010452 <__gethex+0x29e>
 801043c:	1a37      	subs	r7, r6, r0
 801043e:	4621      	mov	r1, r4
 8010440:	ee18 0a10 	vmov	r0, s16
 8010444:	463a      	mov	r2, r7
 8010446:	f000 fc45 	bl	8010cd4 <__lshift>
 801044a:	1bed      	subs	r5, r5, r7
 801044c:	4604      	mov	r4, r0
 801044e:	f100 0914 	add.w	r9, r0, #20
 8010452:	f04f 0a00 	mov.w	sl, #0
 8010456:	e7ae      	b.n	80103b6 <__gethex+0x202>
 8010458:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801045c:	42a8      	cmp	r0, r5
 801045e:	dd72      	ble.n	8010546 <__gethex+0x392>
 8010460:	1b45      	subs	r5, r0, r5
 8010462:	42ae      	cmp	r6, r5
 8010464:	dc36      	bgt.n	80104d4 <__gethex+0x320>
 8010466:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801046a:	2b02      	cmp	r3, #2
 801046c:	d02a      	beq.n	80104c4 <__gethex+0x310>
 801046e:	2b03      	cmp	r3, #3
 8010470:	d02c      	beq.n	80104cc <__gethex+0x318>
 8010472:	2b01      	cmp	r3, #1
 8010474:	d115      	bne.n	80104a2 <__gethex+0x2ee>
 8010476:	42ae      	cmp	r6, r5
 8010478:	d113      	bne.n	80104a2 <__gethex+0x2ee>
 801047a:	2e01      	cmp	r6, #1
 801047c:	d10b      	bne.n	8010496 <__gethex+0x2e2>
 801047e:	9a04      	ldr	r2, [sp, #16]
 8010480:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010484:	6013      	str	r3, [r2, #0]
 8010486:	2301      	movs	r3, #1
 8010488:	6123      	str	r3, [r4, #16]
 801048a:	f8c9 3000 	str.w	r3, [r9]
 801048e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010490:	2762      	movs	r7, #98	; 0x62
 8010492:	601c      	str	r4, [r3, #0]
 8010494:	e723      	b.n	80102de <__gethex+0x12a>
 8010496:	1e71      	subs	r1, r6, #1
 8010498:	4620      	mov	r0, r4
 801049a:	f000 fe59 	bl	8011150 <__any_on>
 801049e:	2800      	cmp	r0, #0
 80104a0:	d1ed      	bne.n	801047e <__gethex+0x2ca>
 80104a2:	ee18 0a10 	vmov	r0, s16
 80104a6:	4621      	mov	r1, r4
 80104a8:	f000 f9f8 	bl	801089c <_Bfree>
 80104ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80104ae:	2300      	movs	r3, #0
 80104b0:	6013      	str	r3, [r2, #0]
 80104b2:	2750      	movs	r7, #80	; 0x50
 80104b4:	e713      	b.n	80102de <__gethex+0x12a>
 80104b6:	bf00      	nop
 80104b8:	08025bfc 	.word	0x08025bfc
 80104bc:	08025b81 	.word	0x08025b81
 80104c0:	08025b92 	.word	0x08025b92
 80104c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1eb      	bne.n	80104a2 <__gethex+0x2ee>
 80104ca:	e7d8      	b.n	801047e <__gethex+0x2ca>
 80104cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d1d5      	bne.n	801047e <__gethex+0x2ca>
 80104d2:	e7e6      	b.n	80104a2 <__gethex+0x2ee>
 80104d4:	1e6f      	subs	r7, r5, #1
 80104d6:	f1ba 0f00 	cmp.w	sl, #0
 80104da:	d131      	bne.n	8010540 <__gethex+0x38c>
 80104dc:	b127      	cbz	r7, 80104e8 <__gethex+0x334>
 80104de:	4639      	mov	r1, r7
 80104e0:	4620      	mov	r0, r4
 80104e2:	f000 fe35 	bl	8011150 <__any_on>
 80104e6:	4682      	mov	sl, r0
 80104e8:	117b      	asrs	r3, r7, #5
 80104ea:	2101      	movs	r1, #1
 80104ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80104f0:	f007 071f 	and.w	r7, r7, #31
 80104f4:	fa01 f707 	lsl.w	r7, r1, r7
 80104f8:	421f      	tst	r7, r3
 80104fa:	4629      	mov	r1, r5
 80104fc:	4620      	mov	r0, r4
 80104fe:	bf18      	it	ne
 8010500:	f04a 0a02 	orrne.w	sl, sl, #2
 8010504:	1b76      	subs	r6, r6, r5
 8010506:	f7ff fded 	bl	80100e4 <rshift>
 801050a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801050e:	2702      	movs	r7, #2
 8010510:	f1ba 0f00 	cmp.w	sl, #0
 8010514:	d048      	beq.n	80105a8 <__gethex+0x3f4>
 8010516:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801051a:	2b02      	cmp	r3, #2
 801051c:	d015      	beq.n	801054a <__gethex+0x396>
 801051e:	2b03      	cmp	r3, #3
 8010520:	d017      	beq.n	8010552 <__gethex+0x39e>
 8010522:	2b01      	cmp	r3, #1
 8010524:	d109      	bne.n	801053a <__gethex+0x386>
 8010526:	f01a 0f02 	tst.w	sl, #2
 801052a:	d006      	beq.n	801053a <__gethex+0x386>
 801052c:	f8d9 0000 	ldr.w	r0, [r9]
 8010530:	ea4a 0a00 	orr.w	sl, sl, r0
 8010534:	f01a 0f01 	tst.w	sl, #1
 8010538:	d10e      	bne.n	8010558 <__gethex+0x3a4>
 801053a:	f047 0710 	orr.w	r7, r7, #16
 801053e:	e033      	b.n	80105a8 <__gethex+0x3f4>
 8010540:	f04f 0a01 	mov.w	sl, #1
 8010544:	e7d0      	b.n	80104e8 <__gethex+0x334>
 8010546:	2701      	movs	r7, #1
 8010548:	e7e2      	b.n	8010510 <__gethex+0x35c>
 801054a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801054c:	f1c3 0301 	rsb	r3, r3, #1
 8010550:	9315      	str	r3, [sp, #84]	; 0x54
 8010552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010554:	2b00      	cmp	r3, #0
 8010556:	d0f0      	beq.n	801053a <__gethex+0x386>
 8010558:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801055c:	f104 0314 	add.w	r3, r4, #20
 8010560:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010564:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010568:	f04f 0c00 	mov.w	ip, #0
 801056c:	4618      	mov	r0, r3
 801056e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010572:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010576:	d01c      	beq.n	80105b2 <__gethex+0x3fe>
 8010578:	3201      	adds	r2, #1
 801057a:	6002      	str	r2, [r0, #0]
 801057c:	2f02      	cmp	r7, #2
 801057e:	f104 0314 	add.w	r3, r4, #20
 8010582:	d13f      	bne.n	8010604 <__gethex+0x450>
 8010584:	f8d8 2000 	ldr.w	r2, [r8]
 8010588:	3a01      	subs	r2, #1
 801058a:	42b2      	cmp	r2, r6
 801058c:	d10a      	bne.n	80105a4 <__gethex+0x3f0>
 801058e:	1171      	asrs	r1, r6, #5
 8010590:	2201      	movs	r2, #1
 8010592:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010596:	f006 061f 	and.w	r6, r6, #31
 801059a:	fa02 f606 	lsl.w	r6, r2, r6
 801059e:	421e      	tst	r6, r3
 80105a0:	bf18      	it	ne
 80105a2:	4617      	movne	r7, r2
 80105a4:	f047 0720 	orr.w	r7, r7, #32
 80105a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80105aa:	601c      	str	r4, [r3, #0]
 80105ac:	9b04      	ldr	r3, [sp, #16]
 80105ae:	601d      	str	r5, [r3, #0]
 80105b0:	e695      	b.n	80102de <__gethex+0x12a>
 80105b2:	4299      	cmp	r1, r3
 80105b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80105b8:	d8d8      	bhi.n	801056c <__gethex+0x3b8>
 80105ba:	68a3      	ldr	r3, [r4, #8]
 80105bc:	459b      	cmp	fp, r3
 80105be:	db19      	blt.n	80105f4 <__gethex+0x440>
 80105c0:	6861      	ldr	r1, [r4, #4]
 80105c2:	ee18 0a10 	vmov	r0, s16
 80105c6:	3101      	adds	r1, #1
 80105c8:	f000 f928 	bl	801081c <_Balloc>
 80105cc:	4681      	mov	r9, r0
 80105ce:	b918      	cbnz	r0, 80105d8 <__gethex+0x424>
 80105d0:	4b1a      	ldr	r3, [pc, #104]	; (801063c <__gethex+0x488>)
 80105d2:	4602      	mov	r2, r0
 80105d4:	2184      	movs	r1, #132	; 0x84
 80105d6:	e6a8      	b.n	801032a <__gethex+0x176>
 80105d8:	6922      	ldr	r2, [r4, #16]
 80105da:	3202      	adds	r2, #2
 80105dc:	f104 010c 	add.w	r1, r4, #12
 80105e0:	0092      	lsls	r2, r2, #2
 80105e2:	300c      	adds	r0, #12
 80105e4:	f000 f90c 	bl	8010800 <memcpy>
 80105e8:	4621      	mov	r1, r4
 80105ea:	ee18 0a10 	vmov	r0, s16
 80105ee:	f000 f955 	bl	801089c <_Bfree>
 80105f2:	464c      	mov	r4, r9
 80105f4:	6923      	ldr	r3, [r4, #16]
 80105f6:	1c5a      	adds	r2, r3, #1
 80105f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80105fc:	6122      	str	r2, [r4, #16]
 80105fe:	2201      	movs	r2, #1
 8010600:	615a      	str	r2, [r3, #20]
 8010602:	e7bb      	b.n	801057c <__gethex+0x3c8>
 8010604:	6922      	ldr	r2, [r4, #16]
 8010606:	455a      	cmp	r2, fp
 8010608:	dd0b      	ble.n	8010622 <__gethex+0x46e>
 801060a:	2101      	movs	r1, #1
 801060c:	4620      	mov	r0, r4
 801060e:	f7ff fd69 	bl	80100e4 <rshift>
 8010612:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010616:	3501      	adds	r5, #1
 8010618:	42ab      	cmp	r3, r5
 801061a:	f6ff aed0 	blt.w	80103be <__gethex+0x20a>
 801061e:	2701      	movs	r7, #1
 8010620:	e7c0      	b.n	80105a4 <__gethex+0x3f0>
 8010622:	f016 061f 	ands.w	r6, r6, #31
 8010626:	d0fa      	beq.n	801061e <__gethex+0x46a>
 8010628:	449a      	add	sl, r3
 801062a:	f1c6 0620 	rsb	r6, r6, #32
 801062e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010632:	f000 f9e9 	bl	8010a08 <__hi0bits>
 8010636:	42b0      	cmp	r0, r6
 8010638:	dbe7      	blt.n	801060a <__gethex+0x456>
 801063a:	e7f0      	b.n	801061e <__gethex+0x46a>
 801063c:	08025b81 	.word	0x08025b81

08010640 <L_shift>:
 8010640:	f1c2 0208 	rsb	r2, r2, #8
 8010644:	0092      	lsls	r2, r2, #2
 8010646:	b570      	push	{r4, r5, r6, lr}
 8010648:	f1c2 0620 	rsb	r6, r2, #32
 801064c:	6843      	ldr	r3, [r0, #4]
 801064e:	6804      	ldr	r4, [r0, #0]
 8010650:	fa03 f506 	lsl.w	r5, r3, r6
 8010654:	432c      	orrs	r4, r5
 8010656:	40d3      	lsrs	r3, r2
 8010658:	6004      	str	r4, [r0, #0]
 801065a:	f840 3f04 	str.w	r3, [r0, #4]!
 801065e:	4288      	cmp	r0, r1
 8010660:	d3f4      	bcc.n	801064c <L_shift+0xc>
 8010662:	bd70      	pop	{r4, r5, r6, pc}

08010664 <__match>:
 8010664:	b530      	push	{r4, r5, lr}
 8010666:	6803      	ldr	r3, [r0, #0]
 8010668:	3301      	adds	r3, #1
 801066a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801066e:	b914      	cbnz	r4, 8010676 <__match+0x12>
 8010670:	6003      	str	r3, [r0, #0]
 8010672:	2001      	movs	r0, #1
 8010674:	bd30      	pop	{r4, r5, pc}
 8010676:	f813 2b01 	ldrb.w	r2, [r3], #1
 801067a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801067e:	2d19      	cmp	r5, #25
 8010680:	bf98      	it	ls
 8010682:	3220      	addls	r2, #32
 8010684:	42a2      	cmp	r2, r4
 8010686:	d0f0      	beq.n	801066a <__match+0x6>
 8010688:	2000      	movs	r0, #0
 801068a:	e7f3      	b.n	8010674 <__match+0x10>

0801068c <__hexnan>:
 801068c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010690:	680b      	ldr	r3, [r1, #0]
 8010692:	6801      	ldr	r1, [r0, #0]
 8010694:	115e      	asrs	r6, r3, #5
 8010696:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801069a:	f013 031f 	ands.w	r3, r3, #31
 801069e:	b087      	sub	sp, #28
 80106a0:	bf18      	it	ne
 80106a2:	3604      	addne	r6, #4
 80106a4:	2500      	movs	r5, #0
 80106a6:	1f37      	subs	r7, r6, #4
 80106a8:	4682      	mov	sl, r0
 80106aa:	4690      	mov	r8, r2
 80106ac:	9301      	str	r3, [sp, #4]
 80106ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80106b2:	46b9      	mov	r9, r7
 80106b4:	463c      	mov	r4, r7
 80106b6:	9502      	str	r5, [sp, #8]
 80106b8:	46ab      	mov	fp, r5
 80106ba:	784a      	ldrb	r2, [r1, #1]
 80106bc:	1c4b      	adds	r3, r1, #1
 80106be:	9303      	str	r3, [sp, #12]
 80106c0:	b342      	cbz	r2, 8010714 <__hexnan+0x88>
 80106c2:	4610      	mov	r0, r2
 80106c4:	9105      	str	r1, [sp, #20]
 80106c6:	9204      	str	r2, [sp, #16]
 80106c8:	f7ff fd5e 	bl	8010188 <__hexdig_fun>
 80106cc:	2800      	cmp	r0, #0
 80106ce:	d14f      	bne.n	8010770 <__hexnan+0xe4>
 80106d0:	9a04      	ldr	r2, [sp, #16]
 80106d2:	9905      	ldr	r1, [sp, #20]
 80106d4:	2a20      	cmp	r2, #32
 80106d6:	d818      	bhi.n	801070a <__hexnan+0x7e>
 80106d8:	9b02      	ldr	r3, [sp, #8]
 80106da:	459b      	cmp	fp, r3
 80106dc:	dd13      	ble.n	8010706 <__hexnan+0x7a>
 80106de:	454c      	cmp	r4, r9
 80106e0:	d206      	bcs.n	80106f0 <__hexnan+0x64>
 80106e2:	2d07      	cmp	r5, #7
 80106e4:	dc04      	bgt.n	80106f0 <__hexnan+0x64>
 80106e6:	462a      	mov	r2, r5
 80106e8:	4649      	mov	r1, r9
 80106ea:	4620      	mov	r0, r4
 80106ec:	f7ff ffa8 	bl	8010640 <L_shift>
 80106f0:	4544      	cmp	r4, r8
 80106f2:	d950      	bls.n	8010796 <__hexnan+0x10a>
 80106f4:	2300      	movs	r3, #0
 80106f6:	f1a4 0904 	sub.w	r9, r4, #4
 80106fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80106fe:	f8cd b008 	str.w	fp, [sp, #8]
 8010702:	464c      	mov	r4, r9
 8010704:	461d      	mov	r5, r3
 8010706:	9903      	ldr	r1, [sp, #12]
 8010708:	e7d7      	b.n	80106ba <__hexnan+0x2e>
 801070a:	2a29      	cmp	r2, #41	; 0x29
 801070c:	d156      	bne.n	80107bc <__hexnan+0x130>
 801070e:	3102      	adds	r1, #2
 8010710:	f8ca 1000 	str.w	r1, [sl]
 8010714:	f1bb 0f00 	cmp.w	fp, #0
 8010718:	d050      	beq.n	80107bc <__hexnan+0x130>
 801071a:	454c      	cmp	r4, r9
 801071c:	d206      	bcs.n	801072c <__hexnan+0xa0>
 801071e:	2d07      	cmp	r5, #7
 8010720:	dc04      	bgt.n	801072c <__hexnan+0xa0>
 8010722:	462a      	mov	r2, r5
 8010724:	4649      	mov	r1, r9
 8010726:	4620      	mov	r0, r4
 8010728:	f7ff ff8a 	bl	8010640 <L_shift>
 801072c:	4544      	cmp	r4, r8
 801072e:	d934      	bls.n	801079a <__hexnan+0x10e>
 8010730:	f1a8 0204 	sub.w	r2, r8, #4
 8010734:	4623      	mov	r3, r4
 8010736:	f853 1b04 	ldr.w	r1, [r3], #4
 801073a:	f842 1f04 	str.w	r1, [r2, #4]!
 801073e:	429f      	cmp	r7, r3
 8010740:	d2f9      	bcs.n	8010736 <__hexnan+0xaa>
 8010742:	1b3b      	subs	r3, r7, r4
 8010744:	f023 0303 	bic.w	r3, r3, #3
 8010748:	3304      	adds	r3, #4
 801074a:	3401      	adds	r4, #1
 801074c:	3e03      	subs	r6, #3
 801074e:	42b4      	cmp	r4, r6
 8010750:	bf88      	it	hi
 8010752:	2304      	movhi	r3, #4
 8010754:	4443      	add	r3, r8
 8010756:	2200      	movs	r2, #0
 8010758:	f843 2b04 	str.w	r2, [r3], #4
 801075c:	429f      	cmp	r7, r3
 801075e:	d2fb      	bcs.n	8010758 <__hexnan+0xcc>
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	b91b      	cbnz	r3, 801076c <__hexnan+0xe0>
 8010764:	4547      	cmp	r7, r8
 8010766:	d127      	bne.n	80107b8 <__hexnan+0x12c>
 8010768:	2301      	movs	r3, #1
 801076a:	603b      	str	r3, [r7, #0]
 801076c:	2005      	movs	r0, #5
 801076e:	e026      	b.n	80107be <__hexnan+0x132>
 8010770:	3501      	adds	r5, #1
 8010772:	2d08      	cmp	r5, #8
 8010774:	f10b 0b01 	add.w	fp, fp, #1
 8010778:	dd06      	ble.n	8010788 <__hexnan+0xfc>
 801077a:	4544      	cmp	r4, r8
 801077c:	d9c3      	bls.n	8010706 <__hexnan+0x7a>
 801077e:	2300      	movs	r3, #0
 8010780:	f844 3c04 	str.w	r3, [r4, #-4]
 8010784:	2501      	movs	r5, #1
 8010786:	3c04      	subs	r4, #4
 8010788:	6822      	ldr	r2, [r4, #0]
 801078a:	f000 000f 	and.w	r0, r0, #15
 801078e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010792:	6022      	str	r2, [r4, #0]
 8010794:	e7b7      	b.n	8010706 <__hexnan+0x7a>
 8010796:	2508      	movs	r5, #8
 8010798:	e7b5      	b.n	8010706 <__hexnan+0x7a>
 801079a:	9b01      	ldr	r3, [sp, #4]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d0df      	beq.n	8010760 <__hexnan+0xd4>
 80107a0:	f04f 32ff 	mov.w	r2, #4294967295
 80107a4:	f1c3 0320 	rsb	r3, r3, #32
 80107a8:	fa22 f303 	lsr.w	r3, r2, r3
 80107ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80107b0:	401a      	ands	r2, r3
 80107b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80107b6:	e7d3      	b.n	8010760 <__hexnan+0xd4>
 80107b8:	3f04      	subs	r7, #4
 80107ba:	e7d1      	b.n	8010760 <__hexnan+0xd4>
 80107bc:	2004      	movs	r0, #4
 80107be:	b007      	add	sp, #28
 80107c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080107c4 <_localeconv_r>:
 80107c4:	4800      	ldr	r0, [pc, #0]	; (80107c8 <_localeconv_r+0x4>)
 80107c6:	4770      	bx	lr
 80107c8:	20000198 	.word	0x20000198

080107cc <malloc>:
 80107cc:	4b02      	ldr	r3, [pc, #8]	; (80107d8 <malloc+0xc>)
 80107ce:	4601      	mov	r1, r0
 80107d0:	6818      	ldr	r0, [r3, #0]
 80107d2:	f000 bd3d 	b.w	8011250 <_malloc_r>
 80107d6:	bf00      	nop
 80107d8:	20000040 	.word	0x20000040

080107dc <__ascii_mbtowc>:
 80107dc:	b082      	sub	sp, #8
 80107de:	b901      	cbnz	r1, 80107e2 <__ascii_mbtowc+0x6>
 80107e0:	a901      	add	r1, sp, #4
 80107e2:	b142      	cbz	r2, 80107f6 <__ascii_mbtowc+0x1a>
 80107e4:	b14b      	cbz	r3, 80107fa <__ascii_mbtowc+0x1e>
 80107e6:	7813      	ldrb	r3, [r2, #0]
 80107e8:	600b      	str	r3, [r1, #0]
 80107ea:	7812      	ldrb	r2, [r2, #0]
 80107ec:	1e10      	subs	r0, r2, #0
 80107ee:	bf18      	it	ne
 80107f0:	2001      	movne	r0, #1
 80107f2:	b002      	add	sp, #8
 80107f4:	4770      	bx	lr
 80107f6:	4610      	mov	r0, r2
 80107f8:	e7fb      	b.n	80107f2 <__ascii_mbtowc+0x16>
 80107fa:	f06f 0001 	mvn.w	r0, #1
 80107fe:	e7f8      	b.n	80107f2 <__ascii_mbtowc+0x16>

08010800 <memcpy>:
 8010800:	440a      	add	r2, r1
 8010802:	4291      	cmp	r1, r2
 8010804:	f100 33ff 	add.w	r3, r0, #4294967295
 8010808:	d100      	bne.n	801080c <memcpy+0xc>
 801080a:	4770      	bx	lr
 801080c:	b510      	push	{r4, lr}
 801080e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010816:	4291      	cmp	r1, r2
 8010818:	d1f9      	bne.n	801080e <memcpy+0xe>
 801081a:	bd10      	pop	{r4, pc}

0801081c <_Balloc>:
 801081c:	b570      	push	{r4, r5, r6, lr}
 801081e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010820:	4604      	mov	r4, r0
 8010822:	460d      	mov	r5, r1
 8010824:	b976      	cbnz	r6, 8010844 <_Balloc+0x28>
 8010826:	2010      	movs	r0, #16
 8010828:	f7ff ffd0 	bl	80107cc <malloc>
 801082c:	4602      	mov	r2, r0
 801082e:	6260      	str	r0, [r4, #36]	; 0x24
 8010830:	b920      	cbnz	r0, 801083c <_Balloc+0x20>
 8010832:	4b18      	ldr	r3, [pc, #96]	; (8010894 <_Balloc+0x78>)
 8010834:	4818      	ldr	r0, [pc, #96]	; (8010898 <_Balloc+0x7c>)
 8010836:	2166      	movs	r1, #102	; 0x66
 8010838:	f7fe fdaa 	bl	800f390 <__assert_func>
 801083c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010840:	6006      	str	r6, [r0, #0]
 8010842:	60c6      	str	r6, [r0, #12]
 8010844:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010846:	68f3      	ldr	r3, [r6, #12]
 8010848:	b183      	cbz	r3, 801086c <_Balloc+0x50>
 801084a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801084c:	68db      	ldr	r3, [r3, #12]
 801084e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010852:	b9b8      	cbnz	r0, 8010884 <_Balloc+0x68>
 8010854:	2101      	movs	r1, #1
 8010856:	fa01 f605 	lsl.w	r6, r1, r5
 801085a:	1d72      	adds	r2, r6, #5
 801085c:	0092      	lsls	r2, r2, #2
 801085e:	4620      	mov	r0, r4
 8010860:	f000 fc97 	bl	8011192 <_calloc_r>
 8010864:	b160      	cbz	r0, 8010880 <_Balloc+0x64>
 8010866:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801086a:	e00e      	b.n	801088a <_Balloc+0x6e>
 801086c:	2221      	movs	r2, #33	; 0x21
 801086e:	2104      	movs	r1, #4
 8010870:	4620      	mov	r0, r4
 8010872:	f000 fc8e 	bl	8011192 <_calloc_r>
 8010876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010878:	60f0      	str	r0, [r6, #12]
 801087a:	68db      	ldr	r3, [r3, #12]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d1e4      	bne.n	801084a <_Balloc+0x2e>
 8010880:	2000      	movs	r0, #0
 8010882:	bd70      	pop	{r4, r5, r6, pc}
 8010884:	6802      	ldr	r2, [r0, #0]
 8010886:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801088a:	2300      	movs	r3, #0
 801088c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010890:	e7f7      	b.n	8010882 <_Balloc+0x66>
 8010892:	bf00      	nop
 8010894:	08025960 	.word	0x08025960
 8010898:	08025c10 	.word	0x08025c10

0801089c <_Bfree>:
 801089c:	b570      	push	{r4, r5, r6, lr}
 801089e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80108a0:	4605      	mov	r5, r0
 80108a2:	460c      	mov	r4, r1
 80108a4:	b976      	cbnz	r6, 80108c4 <_Bfree+0x28>
 80108a6:	2010      	movs	r0, #16
 80108a8:	f7ff ff90 	bl	80107cc <malloc>
 80108ac:	4602      	mov	r2, r0
 80108ae:	6268      	str	r0, [r5, #36]	; 0x24
 80108b0:	b920      	cbnz	r0, 80108bc <_Bfree+0x20>
 80108b2:	4b09      	ldr	r3, [pc, #36]	; (80108d8 <_Bfree+0x3c>)
 80108b4:	4809      	ldr	r0, [pc, #36]	; (80108dc <_Bfree+0x40>)
 80108b6:	218a      	movs	r1, #138	; 0x8a
 80108b8:	f7fe fd6a 	bl	800f390 <__assert_func>
 80108bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108c0:	6006      	str	r6, [r0, #0]
 80108c2:	60c6      	str	r6, [r0, #12]
 80108c4:	b13c      	cbz	r4, 80108d6 <_Bfree+0x3a>
 80108c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80108c8:	6862      	ldr	r2, [r4, #4]
 80108ca:	68db      	ldr	r3, [r3, #12]
 80108cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108d0:	6021      	str	r1, [r4, #0]
 80108d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80108d6:	bd70      	pop	{r4, r5, r6, pc}
 80108d8:	08025960 	.word	0x08025960
 80108dc:	08025c10 	.word	0x08025c10

080108e0 <__multadd>:
 80108e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108e4:	690e      	ldr	r6, [r1, #16]
 80108e6:	4607      	mov	r7, r0
 80108e8:	4698      	mov	r8, r3
 80108ea:	460c      	mov	r4, r1
 80108ec:	f101 0014 	add.w	r0, r1, #20
 80108f0:	2300      	movs	r3, #0
 80108f2:	6805      	ldr	r5, [r0, #0]
 80108f4:	b2a9      	uxth	r1, r5
 80108f6:	fb02 8101 	mla	r1, r2, r1, r8
 80108fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80108fe:	0c2d      	lsrs	r5, r5, #16
 8010900:	fb02 c505 	mla	r5, r2, r5, ip
 8010904:	b289      	uxth	r1, r1
 8010906:	3301      	adds	r3, #1
 8010908:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801090c:	429e      	cmp	r6, r3
 801090e:	f840 1b04 	str.w	r1, [r0], #4
 8010912:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010916:	dcec      	bgt.n	80108f2 <__multadd+0x12>
 8010918:	f1b8 0f00 	cmp.w	r8, #0
 801091c:	d022      	beq.n	8010964 <__multadd+0x84>
 801091e:	68a3      	ldr	r3, [r4, #8]
 8010920:	42b3      	cmp	r3, r6
 8010922:	dc19      	bgt.n	8010958 <__multadd+0x78>
 8010924:	6861      	ldr	r1, [r4, #4]
 8010926:	4638      	mov	r0, r7
 8010928:	3101      	adds	r1, #1
 801092a:	f7ff ff77 	bl	801081c <_Balloc>
 801092e:	4605      	mov	r5, r0
 8010930:	b928      	cbnz	r0, 801093e <__multadd+0x5e>
 8010932:	4602      	mov	r2, r0
 8010934:	4b0d      	ldr	r3, [pc, #52]	; (801096c <__multadd+0x8c>)
 8010936:	480e      	ldr	r0, [pc, #56]	; (8010970 <__multadd+0x90>)
 8010938:	21b5      	movs	r1, #181	; 0xb5
 801093a:	f7fe fd29 	bl	800f390 <__assert_func>
 801093e:	6922      	ldr	r2, [r4, #16]
 8010940:	3202      	adds	r2, #2
 8010942:	f104 010c 	add.w	r1, r4, #12
 8010946:	0092      	lsls	r2, r2, #2
 8010948:	300c      	adds	r0, #12
 801094a:	f7ff ff59 	bl	8010800 <memcpy>
 801094e:	4621      	mov	r1, r4
 8010950:	4638      	mov	r0, r7
 8010952:	f7ff ffa3 	bl	801089c <_Bfree>
 8010956:	462c      	mov	r4, r5
 8010958:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801095c:	3601      	adds	r6, #1
 801095e:	f8c3 8014 	str.w	r8, [r3, #20]
 8010962:	6126      	str	r6, [r4, #16]
 8010964:	4620      	mov	r0, r4
 8010966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801096a:	bf00      	nop
 801096c:	08025b81 	.word	0x08025b81
 8010970:	08025c10 	.word	0x08025c10

08010974 <__s2b>:
 8010974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010978:	460c      	mov	r4, r1
 801097a:	4615      	mov	r5, r2
 801097c:	461f      	mov	r7, r3
 801097e:	2209      	movs	r2, #9
 8010980:	3308      	adds	r3, #8
 8010982:	4606      	mov	r6, r0
 8010984:	fb93 f3f2 	sdiv	r3, r3, r2
 8010988:	2100      	movs	r1, #0
 801098a:	2201      	movs	r2, #1
 801098c:	429a      	cmp	r2, r3
 801098e:	db09      	blt.n	80109a4 <__s2b+0x30>
 8010990:	4630      	mov	r0, r6
 8010992:	f7ff ff43 	bl	801081c <_Balloc>
 8010996:	b940      	cbnz	r0, 80109aa <__s2b+0x36>
 8010998:	4602      	mov	r2, r0
 801099a:	4b19      	ldr	r3, [pc, #100]	; (8010a00 <__s2b+0x8c>)
 801099c:	4819      	ldr	r0, [pc, #100]	; (8010a04 <__s2b+0x90>)
 801099e:	21ce      	movs	r1, #206	; 0xce
 80109a0:	f7fe fcf6 	bl	800f390 <__assert_func>
 80109a4:	0052      	lsls	r2, r2, #1
 80109a6:	3101      	adds	r1, #1
 80109a8:	e7f0      	b.n	801098c <__s2b+0x18>
 80109aa:	9b08      	ldr	r3, [sp, #32]
 80109ac:	6143      	str	r3, [r0, #20]
 80109ae:	2d09      	cmp	r5, #9
 80109b0:	f04f 0301 	mov.w	r3, #1
 80109b4:	6103      	str	r3, [r0, #16]
 80109b6:	dd16      	ble.n	80109e6 <__s2b+0x72>
 80109b8:	f104 0909 	add.w	r9, r4, #9
 80109bc:	46c8      	mov	r8, r9
 80109be:	442c      	add	r4, r5
 80109c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80109c4:	4601      	mov	r1, r0
 80109c6:	3b30      	subs	r3, #48	; 0x30
 80109c8:	220a      	movs	r2, #10
 80109ca:	4630      	mov	r0, r6
 80109cc:	f7ff ff88 	bl	80108e0 <__multadd>
 80109d0:	45a0      	cmp	r8, r4
 80109d2:	d1f5      	bne.n	80109c0 <__s2b+0x4c>
 80109d4:	f1a5 0408 	sub.w	r4, r5, #8
 80109d8:	444c      	add	r4, r9
 80109da:	1b2d      	subs	r5, r5, r4
 80109dc:	1963      	adds	r3, r4, r5
 80109de:	42bb      	cmp	r3, r7
 80109e0:	db04      	blt.n	80109ec <__s2b+0x78>
 80109e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109e6:	340a      	adds	r4, #10
 80109e8:	2509      	movs	r5, #9
 80109ea:	e7f6      	b.n	80109da <__s2b+0x66>
 80109ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80109f0:	4601      	mov	r1, r0
 80109f2:	3b30      	subs	r3, #48	; 0x30
 80109f4:	220a      	movs	r2, #10
 80109f6:	4630      	mov	r0, r6
 80109f8:	f7ff ff72 	bl	80108e0 <__multadd>
 80109fc:	e7ee      	b.n	80109dc <__s2b+0x68>
 80109fe:	bf00      	nop
 8010a00:	08025b81 	.word	0x08025b81
 8010a04:	08025c10 	.word	0x08025c10

08010a08 <__hi0bits>:
 8010a08:	0c03      	lsrs	r3, r0, #16
 8010a0a:	041b      	lsls	r3, r3, #16
 8010a0c:	b9d3      	cbnz	r3, 8010a44 <__hi0bits+0x3c>
 8010a0e:	0400      	lsls	r0, r0, #16
 8010a10:	2310      	movs	r3, #16
 8010a12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010a16:	bf04      	itt	eq
 8010a18:	0200      	lsleq	r0, r0, #8
 8010a1a:	3308      	addeq	r3, #8
 8010a1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010a20:	bf04      	itt	eq
 8010a22:	0100      	lsleq	r0, r0, #4
 8010a24:	3304      	addeq	r3, #4
 8010a26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010a2a:	bf04      	itt	eq
 8010a2c:	0080      	lsleq	r0, r0, #2
 8010a2e:	3302      	addeq	r3, #2
 8010a30:	2800      	cmp	r0, #0
 8010a32:	db05      	blt.n	8010a40 <__hi0bits+0x38>
 8010a34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010a38:	f103 0301 	add.w	r3, r3, #1
 8010a3c:	bf08      	it	eq
 8010a3e:	2320      	moveq	r3, #32
 8010a40:	4618      	mov	r0, r3
 8010a42:	4770      	bx	lr
 8010a44:	2300      	movs	r3, #0
 8010a46:	e7e4      	b.n	8010a12 <__hi0bits+0xa>

08010a48 <__lo0bits>:
 8010a48:	6803      	ldr	r3, [r0, #0]
 8010a4a:	f013 0207 	ands.w	r2, r3, #7
 8010a4e:	4601      	mov	r1, r0
 8010a50:	d00b      	beq.n	8010a6a <__lo0bits+0x22>
 8010a52:	07da      	lsls	r2, r3, #31
 8010a54:	d424      	bmi.n	8010aa0 <__lo0bits+0x58>
 8010a56:	0798      	lsls	r0, r3, #30
 8010a58:	bf49      	itett	mi
 8010a5a:	085b      	lsrmi	r3, r3, #1
 8010a5c:	089b      	lsrpl	r3, r3, #2
 8010a5e:	2001      	movmi	r0, #1
 8010a60:	600b      	strmi	r3, [r1, #0]
 8010a62:	bf5c      	itt	pl
 8010a64:	600b      	strpl	r3, [r1, #0]
 8010a66:	2002      	movpl	r0, #2
 8010a68:	4770      	bx	lr
 8010a6a:	b298      	uxth	r0, r3
 8010a6c:	b9b0      	cbnz	r0, 8010a9c <__lo0bits+0x54>
 8010a6e:	0c1b      	lsrs	r3, r3, #16
 8010a70:	2010      	movs	r0, #16
 8010a72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010a76:	bf04      	itt	eq
 8010a78:	0a1b      	lsreq	r3, r3, #8
 8010a7a:	3008      	addeq	r0, #8
 8010a7c:	071a      	lsls	r2, r3, #28
 8010a7e:	bf04      	itt	eq
 8010a80:	091b      	lsreq	r3, r3, #4
 8010a82:	3004      	addeq	r0, #4
 8010a84:	079a      	lsls	r2, r3, #30
 8010a86:	bf04      	itt	eq
 8010a88:	089b      	lsreq	r3, r3, #2
 8010a8a:	3002      	addeq	r0, #2
 8010a8c:	07da      	lsls	r2, r3, #31
 8010a8e:	d403      	bmi.n	8010a98 <__lo0bits+0x50>
 8010a90:	085b      	lsrs	r3, r3, #1
 8010a92:	f100 0001 	add.w	r0, r0, #1
 8010a96:	d005      	beq.n	8010aa4 <__lo0bits+0x5c>
 8010a98:	600b      	str	r3, [r1, #0]
 8010a9a:	4770      	bx	lr
 8010a9c:	4610      	mov	r0, r2
 8010a9e:	e7e8      	b.n	8010a72 <__lo0bits+0x2a>
 8010aa0:	2000      	movs	r0, #0
 8010aa2:	4770      	bx	lr
 8010aa4:	2020      	movs	r0, #32
 8010aa6:	4770      	bx	lr

08010aa8 <__i2b>:
 8010aa8:	b510      	push	{r4, lr}
 8010aaa:	460c      	mov	r4, r1
 8010aac:	2101      	movs	r1, #1
 8010aae:	f7ff feb5 	bl	801081c <_Balloc>
 8010ab2:	4602      	mov	r2, r0
 8010ab4:	b928      	cbnz	r0, 8010ac2 <__i2b+0x1a>
 8010ab6:	4b05      	ldr	r3, [pc, #20]	; (8010acc <__i2b+0x24>)
 8010ab8:	4805      	ldr	r0, [pc, #20]	; (8010ad0 <__i2b+0x28>)
 8010aba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010abe:	f7fe fc67 	bl	800f390 <__assert_func>
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	6144      	str	r4, [r0, #20]
 8010ac6:	6103      	str	r3, [r0, #16]
 8010ac8:	bd10      	pop	{r4, pc}
 8010aca:	bf00      	nop
 8010acc:	08025b81 	.word	0x08025b81
 8010ad0:	08025c10 	.word	0x08025c10

08010ad4 <__multiply>:
 8010ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad8:	4614      	mov	r4, r2
 8010ada:	690a      	ldr	r2, [r1, #16]
 8010adc:	6923      	ldr	r3, [r4, #16]
 8010ade:	429a      	cmp	r2, r3
 8010ae0:	bfb8      	it	lt
 8010ae2:	460b      	movlt	r3, r1
 8010ae4:	460d      	mov	r5, r1
 8010ae6:	bfbc      	itt	lt
 8010ae8:	4625      	movlt	r5, r4
 8010aea:	461c      	movlt	r4, r3
 8010aec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010af0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010af4:	68ab      	ldr	r3, [r5, #8]
 8010af6:	6869      	ldr	r1, [r5, #4]
 8010af8:	eb0a 0709 	add.w	r7, sl, r9
 8010afc:	42bb      	cmp	r3, r7
 8010afe:	b085      	sub	sp, #20
 8010b00:	bfb8      	it	lt
 8010b02:	3101      	addlt	r1, #1
 8010b04:	f7ff fe8a 	bl	801081c <_Balloc>
 8010b08:	b930      	cbnz	r0, 8010b18 <__multiply+0x44>
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	4b42      	ldr	r3, [pc, #264]	; (8010c18 <__multiply+0x144>)
 8010b0e:	4843      	ldr	r0, [pc, #268]	; (8010c1c <__multiply+0x148>)
 8010b10:	f240 115d 	movw	r1, #349	; 0x15d
 8010b14:	f7fe fc3c 	bl	800f390 <__assert_func>
 8010b18:	f100 0614 	add.w	r6, r0, #20
 8010b1c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010b20:	4633      	mov	r3, r6
 8010b22:	2200      	movs	r2, #0
 8010b24:	4543      	cmp	r3, r8
 8010b26:	d31e      	bcc.n	8010b66 <__multiply+0x92>
 8010b28:	f105 0c14 	add.w	ip, r5, #20
 8010b2c:	f104 0314 	add.w	r3, r4, #20
 8010b30:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010b34:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010b38:	9202      	str	r2, [sp, #8]
 8010b3a:	ebac 0205 	sub.w	r2, ip, r5
 8010b3e:	3a15      	subs	r2, #21
 8010b40:	f022 0203 	bic.w	r2, r2, #3
 8010b44:	3204      	adds	r2, #4
 8010b46:	f105 0115 	add.w	r1, r5, #21
 8010b4a:	458c      	cmp	ip, r1
 8010b4c:	bf38      	it	cc
 8010b4e:	2204      	movcc	r2, #4
 8010b50:	9201      	str	r2, [sp, #4]
 8010b52:	9a02      	ldr	r2, [sp, #8]
 8010b54:	9303      	str	r3, [sp, #12]
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d808      	bhi.n	8010b6c <__multiply+0x98>
 8010b5a:	2f00      	cmp	r7, #0
 8010b5c:	dc55      	bgt.n	8010c0a <__multiply+0x136>
 8010b5e:	6107      	str	r7, [r0, #16]
 8010b60:	b005      	add	sp, #20
 8010b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b66:	f843 2b04 	str.w	r2, [r3], #4
 8010b6a:	e7db      	b.n	8010b24 <__multiply+0x50>
 8010b6c:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b70:	f1ba 0f00 	cmp.w	sl, #0
 8010b74:	d020      	beq.n	8010bb8 <__multiply+0xe4>
 8010b76:	f105 0e14 	add.w	lr, r5, #20
 8010b7a:	46b1      	mov	r9, r6
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010b82:	f8d9 b000 	ldr.w	fp, [r9]
 8010b86:	b2a1      	uxth	r1, r4
 8010b88:	fa1f fb8b 	uxth.w	fp, fp
 8010b8c:	fb0a b101 	mla	r1, sl, r1, fp
 8010b90:	4411      	add	r1, r2
 8010b92:	f8d9 2000 	ldr.w	r2, [r9]
 8010b96:	0c24      	lsrs	r4, r4, #16
 8010b98:	0c12      	lsrs	r2, r2, #16
 8010b9a:	fb0a 2404 	mla	r4, sl, r4, r2
 8010b9e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010ba2:	b289      	uxth	r1, r1
 8010ba4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010ba8:	45f4      	cmp	ip, lr
 8010baa:	f849 1b04 	str.w	r1, [r9], #4
 8010bae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010bb2:	d8e4      	bhi.n	8010b7e <__multiply+0xaa>
 8010bb4:	9901      	ldr	r1, [sp, #4]
 8010bb6:	5072      	str	r2, [r6, r1]
 8010bb8:	9a03      	ldr	r2, [sp, #12]
 8010bba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010bbe:	3304      	adds	r3, #4
 8010bc0:	f1b9 0f00 	cmp.w	r9, #0
 8010bc4:	d01f      	beq.n	8010c06 <__multiply+0x132>
 8010bc6:	6834      	ldr	r4, [r6, #0]
 8010bc8:	f105 0114 	add.w	r1, r5, #20
 8010bcc:	46b6      	mov	lr, r6
 8010bce:	f04f 0a00 	mov.w	sl, #0
 8010bd2:	880a      	ldrh	r2, [r1, #0]
 8010bd4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010bd8:	fb09 b202 	mla	r2, r9, r2, fp
 8010bdc:	4492      	add	sl, r2
 8010bde:	b2a4      	uxth	r4, r4
 8010be0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010be4:	f84e 4b04 	str.w	r4, [lr], #4
 8010be8:	f851 4b04 	ldr.w	r4, [r1], #4
 8010bec:	f8be 2000 	ldrh.w	r2, [lr]
 8010bf0:	0c24      	lsrs	r4, r4, #16
 8010bf2:	fb09 2404 	mla	r4, r9, r4, r2
 8010bf6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010bfa:	458c      	cmp	ip, r1
 8010bfc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010c00:	d8e7      	bhi.n	8010bd2 <__multiply+0xfe>
 8010c02:	9a01      	ldr	r2, [sp, #4]
 8010c04:	50b4      	str	r4, [r6, r2]
 8010c06:	3604      	adds	r6, #4
 8010c08:	e7a3      	b.n	8010b52 <__multiply+0x7e>
 8010c0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d1a5      	bne.n	8010b5e <__multiply+0x8a>
 8010c12:	3f01      	subs	r7, #1
 8010c14:	e7a1      	b.n	8010b5a <__multiply+0x86>
 8010c16:	bf00      	nop
 8010c18:	08025b81 	.word	0x08025b81
 8010c1c:	08025c10 	.word	0x08025c10

08010c20 <__pow5mult>:
 8010c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c24:	4615      	mov	r5, r2
 8010c26:	f012 0203 	ands.w	r2, r2, #3
 8010c2a:	4606      	mov	r6, r0
 8010c2c:	460f      	mov	r7, r1
 8010c2e:	d007      	beq.n	8010c40 <__pow5mult+0x20>
 8010c30:	4c25      	ldr	r4, [pc, #148]	; (8010cc8 <__pow5mult+0xa8>)
 8010c32:	3a01      	subs	r2, #1
 8010c34:	2300      	movs	r3, #0
 8010c36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c3a:	f7ff fe51 	bl	80108e0 <__multadd>
 8010c3e:	4607      	mov	r7, r0
 8010c40:	10ad      	asrs	r5, r5, #2
 8010c42:	d03d      	beq.n	8010cc0 <__pow5mult+0xa0>
 8010c44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010c46:	b97c      	cbnz	r4, 8010c68 <__pow5mult+0x48>
 8010c48:	2010      	movs	r0, #16
 8010c4a:	f7ff fdbf 	bl	80107cc <malloc>
 8010c4e:	4602      	mov	r2, r0
 8010c50:	6270      	str	r0, [r6, #36]	; 0x24
 8010c52:	b928      	cbnz	r0, 8010c60 <__pow5mult+0x40>
 8010c54:	4b1d      	ldr	r3, [pc, #116]	; (8010ccc <__pow5mult+0xac>)
 8010c56:	481e      	ldr	r0, [pc, #120]	; (8010cd0 <__pow5mult+0xb0>)
 8010c58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010c5c:	f7fe fb98 	bl	800f390 <__assert_func>
 8010c60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c64:	6004      	str	r4, [r0, #0]
 8010c66:	60c4      	str	r4, [r0, #12]
 8010c68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010c6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c70:	b94c      	cbnz	r4, 8010c86 <__pow5mult+0x66>
 8010c72:	f240 2171 	movw	r1, #625	; 0x271
 8010c76:	4630      	mov	r0, r6
 8010c78:	f7ff ff16 	bl	8010aa8 <__i2b>
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c82:	4604      	mov	r4, r0
 8010c84:	6003      	str	r3, [r0, #0]
 8010c86:	f04f 0900 	mov.w	r9, #0
 8010c8a:	07eb      	lsls	r3, r5, #31
 8010c8c:	d50a      	bpl.n	8010ca4 <__pow5mult+0x84>
 8010c8e:	4639      	mov	r1, r7
 8010c90:	4622      	mov	r2, r4
 8010c92:	4630      	mov	r0, r6
 8010c94:	f7ff ff1e 	bl	8010ad4 <__multiply>
 8010c98:	4639      	mov	r1, r7
 8010c9a:	4680      	mov	r8, r0
 8010c9c:	4630      	mov	r0, r6
 8010c9e:	f7ff fdfd 	bl	801089c <_Bfree>
 8010ca2:	4647      	mov	r7, r8
 8010ca4:	106d      	asrs	r5, r5, #1
 8010ca6:	d00b      	beq.n	8010cc0 <__pow5mult+0xa0>
 8010ca8:	6820      	ldr	r0, [r4, #0]
 8010caa:	b938      	cbnz	r0, 8010cbc <__pow5mult+0x9c>
 8010cac:	4622      	mov	r2, r4
 8010cae:	4621      	mov	r1, r4
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	f7ff ff0f 	bl	8010ad4 <__multiply>
 8010cb6:	6020      	str	r0, [r4, #0]
 8010cb8:	f8c0 9000 	str.w	r9, [r0]
 8010cbc:	4604      	mov	r4, r0
 8010cbe:	e7e4      	b.n	8010c8a <__pow5mult+0x6a>
 8010cc0:	4638      	mov	r0, r7
 8010cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cc6:	bf00      	nop
 8010cc8:	08025d60 	.word	0x08025d60
 8010ccc:	08025960 	.word	0x08025960
 8010cd0:	08025c10 	.word	0x08025c10

08010cd4 <__lshift>:
 8010cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cd8:	460c      	mov	r4, r1
 8010cda:	6849      	ldr	r1, [r1, #4]
 8010cdc:	6923      	ldr	r3, [r4, #16]
 8010cde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ce2:	68a3      	ldr	r3, [r4, #8]
 8010ce4:	4607      	mov	r7, r0
 8010ce6:	4691      	mov	r9, r2
 8010ce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010cec:	f108 0601 	add.w	r6, r8, #1
 8010cf0:	42b3      	cmp	r3, r6
 8010cf2:	db0b      	blt.n	8010d0c <__lshift+0x38>
 8010cf4:	4638      	mov	r0, r7
 8010cf6:	f7ff fd91 	bl	801081c <_Balloc>
 8010cfa:	4605      	mov	r5, r0
 8010cfc:	b948      	cbnz	r0, 8010d12 <__lshift+0x3e>
 8010cfe:	4602      	mov	r2, r0
 8010d00:	4b28      	ldr	r3, [pc, #160]	; (8010da4 <__lshift+0xd0>)
 8010d02:	4829      	ldr	r0, [pc, #164]	; (8010da8 <__lshift+0xd4>)
 8010d04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010d08:	f7fe fb42 	bl	800f390 <__assert_func>
 8010d0c:	3101      	adds	r1, #1
 8010d0e:	005b      	lsls	r3, r3, #1
 8010d10:	e7ee      	b.n	8010cf0 <__lshift+0x1c>
 8010d12:	2300      	movs	r3, #0
 8010d14:	f100 0114 	add.w	r1, r0, #20
 8010d18:	f100 0210 	add.w	r2, r0, #16
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	4553      	cmp	r3, sl
 8010d20:	db33      	blt.n	8010d8a <__lshift+0xb6>
 8010d22:	6920      	ldr	r0, [r4, #16]
 8010d24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d28:	f104 0314 	add.w	r3, r4, #20
 8010d2c:	f019 091f 	ands.w	r9, r9, #31
 8010d30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010d38:	d02b      	beq.n	8010d92 <__lshift+0xbe>
 8010d3a:	f1c9 0e20 	rsb	lr, r9, #32
 8010d3e:	468a      	mov	sl, r1
 8010d40:	2200      	movs	r2, #0
 8010d42:	6818      	ldr	r0, [r3, #0]
 8010d44:	fa00 f009 	lsl.w	r0, r0, r9
 8010d48:	4302      	orrs	r2, r0
 8010d4a:	f84a 2b04 	str.w	r2, [sl], #4
 8010d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d52:	459c      	cmp	ip, r3
 8010d54:	fa22 f20e 	lsr.w	r2, r2, lr
 8010d58:	d8f3      	bhi.n	8010d42 <__lshift+0x6e>
 8010d5a:	ebac 0304 	sub.w	r3, ip, r4
 8010d5e:	3b15      	subs	r3, #21
 8010d60:	f023 0303 	bic.w	r3, r3, #3
 8010d64:	3304      	adds	r3, #4
 8010d66:	f104 0015 	add.w	r0, r4, #21
 8010d6a:	4584      	cmp	ip, r0
 8010d6c:	bf38      	it	cc
 8010d6e:	2304      	movcc	r3, #4
 8010d70:	50ca      	str	r2, [r1, r3]
 8010d72:	b10a      	cbz	r2, 8010d78 <__lshift+0xa4>
 8010d74:	f108 0602 	add.w	r6, r8, #2
 8010d78:	3e01      	subs	r6, #1
 8010d7a:	4638      	mov	r0, r7
 8010d7c:	612e      	str	r6, [r5, #16]
 8010d7e:	4621      	mov	r1, r4
 8010d80:	f7ff fd8c 	bl	801089c <_Bfree>
 8010d84:	4628      	mov	r0, r5
 8010d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010d8e:	3301      	adds	r3, #1
 8010d90:	e7c5      	b.n	8010d1e <__lshift+0x4a>
 8010d92:	3904      	subs	r1, #4
 8010d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d98:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d9c:	459c      	cmp	ip, r3
 8010d9e:	d8f9      	bhi.n	8010d94 <__lshift+0xc0>
 8010da0:	e7ea      	b.n	8010d78 <__lshift+0xa4>
 8010da2:	bf00      	nop
 8010da4:	08025b81 	.word	0x08025b81
 8010da8:	08025c10 	.word	0x08025c10

08010dac <__mcmp>:
 8010dac:	b530      	push	{r4, r5, lr}
 8010dae:	6902      	ldr	r2, [r0, #16]
 8010db0:	690c      	ldr	r4, [r1, #16]
 8010db2:	1b12      	subs	r2, r2, r4
 8010db4:	d10e      	bne.n	8010dd4 <__mcmp+0x28>
 8010db6:	f100 0314 	add.w	r3, r0, #20
 8010dba:	3114      	adds	r1, #20
 8010dbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010dc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010dc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010dc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010dcc:	42a5      	cmp	r5, r4
 8010dce:	d003      	beq.n	8010dd8 <__mcmp+0x2c>
 8010dd0:	d305      	bcc.n	8010dde <__mcmp+0x32>
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	4610      	mov	r0, r2
 8010dd6:	bd30      	pop	{r4, r5, pc}
 8010dd8:	4283      	cmp	r3, r0
 8010dda:	d3f3      	bcc.n	8010dc4 <__mcmp+0x18>
 8010ddc:	e7fa      	b.n	8010dd4 <__mcmp+0x28>
 8010dde:	f04f 32ff 	mov.w	r2, #4294967295
 8010de2:	e7f7      	b.n	8010dd4 <__mcmp+0x28>

08010de4 <__mdiff>:
 8010de4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de8:	460c      	mov	r4, r1
 8010dea:	4606      	mov	r6, r0
 8010dec:	4611      	mov	r1, r2
 8010dee:	4620      	mov	r0, r4
 8010df0:	4617      	mov	r7, r2
 8010df2:	f7ff ffdb 	bl	8010dac <__mcmp>
 8010df6:	1e05      	subs	r5, r0, #0
 8010df8:	d110      	bne.n	8010e1c <__mdiff+0x38>
 8010dfa:	4629      	mov	r1, r5
 8010dfc:	4630      	mov	r0, r6
 8010dfe:	f7ff fd0d 	bl	801081c <_Balloc>
 8010e02:	b930      	cbnz	r0, 8010e12 <__mdiff+0x2e>
 8010e04:	4b39      	ldr	r3, [pc, #228]	; (8010eec <__mdiff+0x108>)
 8010e06:	4602      	mov	r2, r0
 8010e08:	f240 2132 	movw	r1, #562	; 0x232
 8010e0c:	4838      	ldr	r0, [pc, #224]	; (8010ef0 <__mdiff+0x10c>)
 8010e0e:	f7fe fabf 	bl	800f390 <__assert_func>
 8010e12:	2301      	movs	r3, #1
 8010e14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010e18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e1c:	bfa4      	itt	ge
 8010e1e:	463b      	movge	r3, r7
 8010e20:	4627      	movge	r7, r4
 8010e22:	4630      	mov	r0, r6
 8010e24:	6879      	ldr	r1, [r7, #4]
 8010e26:	bfa6      	itte	ge
 8010e28:	461c      	movge	r4, r3
 8010e2a:	2500      	movge	r5, #0
 8010e2c:	2501      	movlt	r5, #1
 8010e2e:	f7ff fcf5 	bl	801081c <_Balloc>
 8010e32:	b920      	cbnz	r0, 8010e3e <__mdiff+0x5a>
 8010e34:	4b2d      	ldr	r3, [pc, #180]	; (8010eec <__mdiff+0x108>)
 8010e36:	4602      	mov	r2, r0
 8010e38:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010e3c:	e7e6      	b.n	8010e0c <__mdiff+0x28>
 8010e3e:	693e      	ldr	r6, [r7, #16]
 8010e40:	60c5      	str	r5, [r0, #12]
 8010e42:	6925      	ldr	r5, [r4, #16]
 8010e44:	f107 0114 	add.w	r1, r7, #20
 8010e48:	f104 0914 	add.w	r9, r4, #20
 8010e4c:	f100 0e14 	add.w	lr, r0, #20
 8010e50:	f107 0210 	add.w	r2, r7, #16
 8010e54:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010e58:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010e5c:	46f2      	mov	sl, lr
 8010e5e:	2700      	movs	r7, #0
 8010e60:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010e68:	fa1f f883 	uxth.w	r8, r3
 8010e6c:	fa17 f78b 	uxtah	r7, r7, fp
 8010e70:	0c1b      	lsrs	r3, r3, #16
 8010e72:	eba7 0808 	sub.w	r8, r7, r8
 8010e76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010e7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010e7e:	fa1f f888 	uxth.w	r8, r8
 8010e82:	141f      	asrs	r7, r3, #16
 8010e84:	454d      	cmp	r5, r9
 8010e86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010e8a:	f84a 3b04 	str.w	r3, [sl], #4
 8010e8e:	d8e7      	bhi.n	8010e60 <__mdiff+0x7c>
 8010e90:	1b2b      	subs	r3, r5, r4
 8010e92:	3b15      	subs	r3, #21
 8010e94:	f023 0303 	bic.w	r3, r3, #3
 8010e98:	3304      	adds	r3, #4
 8010e9a:	3415      	adds	r4, #21
 8010e9c:	42a5      	cmp	r5, r4
 8010e9e:	bf38      	it	cc
 8010ea0:	2304      	movcc	r3, #4
 8010ea2:	4419      	add	r1, r3
 8010ea4:	4473      	add	r3, lr
 8010ea6:	469e      	mov	lr, r3
 8010ea8:	460d      	mov	r5, r1
 8010eaa:	4565      	cmp	r5, ip
 8010eac:	d30e      	bcc.n	8010ecc <__mdiff+0xe8>
 8010eae:	f10c 0203 	add.w	r2, ip, #3
 8010eb2:	1a52      	subs	r2, r2, r1
 8010eb4:	f022 0203 	bic.w	r2, r2, #3
 8010eb8:	3903      	subs	r1, #3
 8010eba:	458c      	cmp	ip, r1
 8010ebc:	bf38      	it	cc
 8010ebe:	2200      	movcc	r2, #0
 8010ec0:	441a      	add	r2, r3
 8010ec2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010ec6:	b17b      	cbz	r3, 8010ee8 <__mdiff+0x104>
 8010ec8:	6106      	str	r6, [r0, #16]
 8010eca:	e7a5      	b.n	8010e18 <__mdiff+0x34>
 8010ecc:	f855 8b04 	ldr.w	r8, [r5], #4
 8010ed0:	fa17 f488 	uxtah	r4, r7, r8
 8010ed4:	1422      	asrs	r2, r4, #16
 8010ed6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010eda:	b2a4      	uxth	r4, r4
 8010edc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010ee0:	f84e 4b04 	str.w	r4, [lr], #4
 8010ee4:	1417      	asrs	r7, r2, #16
 8010ee6:	e7e0      	b.n	8010eaa <__mdiff+0xc6>
 8010ee8:	3e01      	subs	r6, #1
 8010eea:	e7ea      	b.n	8010ec2 <__mdiff+0xde>
 8010eec:	08025b81 	.word	0x08025b81
 8010ef0:	08025c10 	.word	0x08025c10

08010ef4 <__ulp>:
 8010ef4:	b082      	sub	sp, #8
 8010ef6:	ed8d 0b00 	vstr	d0, [sp]
 8010efa:	9b01      	ldr	r3, [sp, #4]
 8010efc:	4912      	ldr	r1, [pc, #72]	; (8010f48 <__ulp+0x54>)
 8010efe:	4019      	ands	r1, r3
 8010f00:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010f04:	2900      	cmp	r1, #0
 8010f06:	dd05      	ble.n	8010f14 <__ulp+0x20>
 8010f08:	2200      	movs	r2, #0
 8010f0a:	460b      	mov	r3, r1
 8010f0c:	ec43 2b10 	vmov	d0, r2, r3
 8010f10:	b002      	add	sp, #8
 8010f12:	4770      	bx	lr
 8010f14:	4249      	negs	r1, r1
 8010f16:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010f1a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010f1e:	f04f 0200 	mov.w	r2, #0
 8010f22:	f04f 0300 	mov.w	r3, #0
 8010f26:	da04      	bge.n	8010f32 <__ulp+0x3e>
 8010f28:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010f2c:	fa41 f300 	asr.w	r3, r1, r0
 8010f30:	e7ec      	b.n	8010f0c <__ulp+0x18>
 8010f32:	f1a0 0114 	sub.w	r1, r0, #20
 8010f36:	291e      	cmp	r1, #30
 8010f38:	bfda      	itte	le
 8010f3a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010f3e:	fa20 f101 	lsrle.w	r1, r0, r1
 8010f42:	2101      	movgt	r1, #1
 8010f44:	460a      	mov	r2, r1
 8010f46:	e7e1      	b.n	8010f0c <__ulp+0x18>
 8010f48:	7ff00000 	.word	0x7ff00000

08010f4c <__b2d>:
 8010f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f4e:	6905      	ldr	r5, [r0, #16]
 8010f50:	f100 0714 	add.w	r7, r0, #20
 8010f54:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010f58:	1f2e      	subs	r6, r5, #4
 8010f5a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f7ff fd52 	bl	8010a08 <__hi0bits>
 8010f64:	f1c0 0320 	rsb	r3, r0, #32
 8010f68:	280a      	cmp	r0, #10
 8010f6a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010fe8 <__b2d+0x9c>
 8010f6e:	600b      	str	r3, [r1, #0]
 8010f70:	dc14      	bgt.n	8010f9c <__b2d+0x50>
 8010f72:	f1c0 0e0b 	rsb	lr, r0, #11
 8010f76:	fa24 f10e 	lsr.w	r1, r4, lr
 8010f7a:	42b7      	cmp	r7, r6
 8010f7c:	ea41 030c 	orr.w	r3, r1, ip
 8010f80:	bf34      	ite	cc
 8010f82:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010f86:	2100      	movcs	r1, #0
 8010f88:	3015      	adds	r0, #21
 8010f8a:	fa04 f000 	lsl.w	r0, r4, r0
 8010f8e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010f92:	ea40 0201 	orr.w	r2, r0, r1
 8010f96:	ec43 2b10 	vmov	d0, r2, r3
 8010f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f9c:	42b7      	cmp	r7, r6
 8010f9e:	bf3a      	itte	cc
 8010fa0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010fa4:	f1a5 0608 	subcc.w	r6, r5, #8
 8010fa8:	2100      	movcs	r1, #0
 8010faa:	380b      	subs	r0, #11
 8010fac:	d017      	beq.n	8010fde <__b2d+0x92>
 8010fae:	f1c0 0c20 	rsb	ip, r0, #32
 8010fb2:	fa04 f500 	lsl.w	r5, r4, r0
 8010fb6:	42be      	cmp	r6, r7
 8010fb8:	fa21 f40c 	lsr.w	r4, r1, ip
 8010fbc:	ea45 0504 	orr.w	r5, r5, r4
 8010fc0:	bf8c      	ite	hi
 8010fc2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010fc6:	2400      	movls	r4, #0
 8010fc8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010fcc:	fa01 f000 	lsl.w	r0, r1, r0
 8010fd0:	fa24 f40c 	lsr.w	r4, r4, ip
 8010fd4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010fd8:	ea40 0204 	orr.w	r2, r0, r4
 8010fdc:	e7db      	b.n	8010f96 <__b2d+0x4a>
 8010fde:	ea44 030c 	orr.w	r3, r4, ip
 8010fe2:	460a      	mov	r2, r1
 8010fe4:	e7d7      	b.n	8010f96 <__b2d+0x4a>
 8010fe6:	bf00      	nop
 8010fe8:	3ff00000 	.word	0x3ff00000

08010fec <__d2b>:
 8010fec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ff0:	4689      	mov	r9, r1
 8010ff2:	2101      	movs	r1, #1
 8010ff4:	ec57 6b10 	vmov	r6, r7, d0
 8010ff8:	4690      	mov	r8, r2
 8010ffa:	f7ff fc0f 	bl	801081c <_Balloc>
 8010ffe:	4604      	mov	r4, r0
 8011000:	b930      	cbnz	r0, 8011010 <__d2b+0x24>
 8011002:	4602      	mov	r2, r0
 8011004:	4b25      	ldr	r3, [pc, #148]	; (801109c <__d2b+0xb0>)
 8011006:	4826      	ldr	r0, [pc, #152]	; (80110a0 <__d2b+0xb4>)
 8011008:	f240 310a 	movw	r1, #778	; 0x30a
 801100c:	f7fe f9c0 	bl	800f390 <__assert_func>
 8011010:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011014:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011018:	bb35      	cbnz	r5, 8011068 <__d2b+0x7c>
 801101a:	2e00      	cmp	r6, #0
 801101c:	9301      	str	r3, [sp, #4]
 801101e:	d028      	beq.n	8011072 <__d2b+0x86>
 8011020:	4668      	mov	r0, sp
 8011022:	9600      	str	r6, [sp, #0]
 8011024:	f7ff fd10 	bl	8010a48 <__lo0bits>
 8011028:	9900      	ldr	r1, [sp, #0]
 801102a:	b300      	cbz	r0, 801106e <__d2b+0x82>
 801102c:	9a01      	ldr	r2, [sp, #4]
 801102e:	f1c0 0320 	rsb	r3, r0, #32
 8011032:	fa02 f303 	lsl.w	r3, r2, r3
 8011036:	430b      	orrs	r3, r1
 8011038:	40c2      	lsrs	r2, r0
 801103a:	6163      	str	r3, [r4, #20]
 801103c:	9201      	str	r2, [sp, #4]
 801103e:	9b01      	ldr	r3, [sp, #4]
 8011040:	61a3      	str	r3, [r4, #24]
 8011042:	2b00      	cmp	r3, #0
 8011044:	bf14      	ite	ne
 8011046:	2202      	movne	r2, #2
 8011048:	2201      	moveq	r2, #1
 801104a:	6122      	str	r2, [r4, #16]
 801104c:	b1d5      	cbz	r5, 8011084 <__d2b+0x98>
 801104e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011052:	4405      	add	r5, r0
 8011054:	f8c9 5000 	str.w	r5, [r9]
 8011058:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801105c:	f8c8 0000 	str.w	r0, [r8]
 8011060:	4620      	mov	r0, r4
 8011062:	b003      	add	sp, #12
 8011064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801106c:	e7d5      	b.n	801101a <__d2b+0x2e>
 801106e:	6161      	str	r1, [r4, #20]
 8011070:	e7e5      	b.n	801103e <__d2b+0x52>
 8011072:	a801      	add	r0, sp, #4
 8011074:	f7ff fce8 	bl	8010a48 <__lo0bits>
 8011078:	9b01      	ldr	r3, [sp, #4]
 801107a:	6163      	str	r3, [r4, #20]
 801107c:	2201      	movs	r2, #1
 801107e:	6122      	str	r2, [r4, #16]
 8011080:	3020      	adds	r0, #32
 8011082:	e7e3      	b.n	801104c <__d2b+0x60>
 8011084:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011088:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801108c:	f8c9 0000 	str.w	r0, [r9]
 8011090:	6918      	ldr	r0, [r3, #16]
 8011092:	f7ff fcb9 	bl	8010a08 <__hi0bits>
 8011096:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801109a:	e7df      	b.n	801105c <__d2b+0x70>
 801109c:	08025b81 	.word	0x08025b81
 80110a0:	08025c10 	.word	0x08025c10

080110a4 <__ratio>:
 80110a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110a8:	4688      	mov	r8, r1
 80110aa:	4669      	mov	r1, sp
 80110ac:	4681      	mov	r9, r0
 80110ae:	f7ff ff4d 	bl	8010f4c <__b2d>
 80110b2:	a901      	add	r1, sp, #4
 80110b4:	4640      	mov	r0, r8
 80110b6:	ec55 4b10 	vmov	r4, r5, d0
 80110ba:	f7ff ff47 	bl	8010f4c <__b2d>
 80110be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80110c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80110c6:	eba3 0c02 	sub.w	ip, r3, r2
 80110ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 80110ce:	1a9b      	subs	r3, r3, r2
 80110d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80110d4:	ec51 0b10 	vmov	r0, r1, d0
 80110d8:	2b00      	cmp	r3, #0
 80110da:	bfd6      	itet	le
 80110dc:	460a      	movle	r2, r1
 80110de:	462a      	movgt	r2, r5
 80110e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80110e4:	468b      	mov	fp, r1
 80110e6:	462f      	mov	r7, r5
 80110e8:	bfd4      	ite	le
 80110ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80110ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80110f2:	4620      	mov	r0, r4
 80110f4:	ee10 2a10 	vmov	r2, s0
 80110f8:	465b      	mov	r3, fp
 80110fa:	4639      	mov	r1, r7
 80110fc:	f7ef fbbe 	bl	800087c <__aeabi_ddiv>
 8011100:	ec41 0b10 	vmov	d0, r0, r1
 8011104:	b003      	add	sp, #12
 8011106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801110a <__copybits>:
 801110a:	3901      	subs	r1, #1
 801110c:	b570      	push	{r4, r5, r6, lr}
 801110e:	1149      	asrs	r1, r1, #5
 8011110:	6914      	ldr	r4, [r2, #16]
 8011112:	3101      	adds	r1, #1
 8011114:	f102 0314 	add.w	r3, r2, #20
 8011118:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801111c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011120:	1f05      	subs	r5, r0, #4
 8011122:	42a3      	cmp	r3, r4
 8011124:	d30c      	bcc.n	8011140 <__copybits+0x36>
 8011126:	1aa3      	subs	r3, r4, r2
 8011128:	3b11      	subs	r3, #17
 801112a:	f023 0303 	bic.w	r3, r3, #3
 801112e:	3211      	adds	r2, #17
 8011130:	42a2      	cmp	r2, r4
 8011132:	bf88      	it	hi
 8011134:	2300      	movhi	r3, #0
 8011136:	4418      	add	r0, r3
 8011138:	2300      	movs	r3, #0
 801113a:	4288      	cmp	r0, r1
 801113c:	d305      	bcc.n	801114a <__copybits+0x40>
 801113e:	bd70      	pop	{r4, r5, r6, pc}
 8011140:	f853 6b04 	ldr.w	r6, [r3], #4
 8011144:	f845 6f04 	str.w	r6, [r5, #4]!
 8011148:	e7eb      	b.n	8011122 <__copybits+0x18>
 801114a:	f840 3b04 	str.w	r3, [r0], #4
 801114e:	e7f4      	b.n	801113a <__copybits+0x30>

08011150 <__any_on>:
 8011150:	f100 0214 	add.w	r2, r0, #20
 8011154:	6900      	ldr	r0, [r0, #16]
 8011156:	114b      	asrs	r3, r1, #5
 8011158:	4298      	cmp	r0, r3
 801115a:	b510      	push	{r4, lr}
 801115c:	db11      	blt.n	8011182 <__any_on+0x32>
 801115e:	dd0a      	ble.n	8011176 <__any_on+0x26>
 8011160:	f011 011f 	ands.w	r1, r1, #31
 8011164:	d007      	beq.n	8011176 <__any_on+0x26>
 8011166:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801116a:	fa24 f001 	lsr.w	r0, r4, r1
 801116e:	fa00 f101 	lsl.w	r1, r0, r1
 8011172:	428c      	cmp	r4, r1
 8011174:	d10b      	bne.n	801118e <__any_on+0x3e>
 8011176:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801117a:	4293      	cmp	r3, r2
 801117c:	d803      	bhi.n	8011186 <__any_on+0x36>
 801117e:	2000      	movs	r0, #0
 8011180:	bd10      	pop	{r4, pc}
 8011182:	4603      	mov	r3, r0
 8011184:	e7f7      	b.n	8011176 <__any_on+0x26>
 8011186:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801118a:	2900      	cmp	r1, #0
 801118c:	d0f5      	beq.n	801117a <__any_on+0x2a>
 801118e:	2001      	movs	r0, #1
 8011190:	e7f6      	b.n	8011180 <__any_on+0x30>

08011192 <_calloc_r>:
 8011192:	b513      	push	{r0, r1, r4, lr}
 8011194:	434a      	muls	r2, r1
 8011196:	4611      	mov	r1, r2
 8011198:	9201      	str	r2, [sp, #4]
 801119a:	f000 f859 	bl	8011250 <_malloc_r>
 801119e:	4604      	mov	r4, r0
 80111a0:	b118      	cbz	r0, 80111aa <_calloc_r+0x18>
 80111a2:	9a01      	ldr	r2, [sp, #4]
 80111a4:	2100      	movs	r1, #0
 80111a6:	f7fc fb25 	bl	800d7f4 <memset>
 80111aa:	4620      	mov	r0, r4
 80111ac:	b002      	add	sp, #8
 80111ae:	bd10      	pop	{r4, pc}

080111b0 <_free_r>:
 80111b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111b2:	2900      	cmp	r1, #0
 80111b4:	d048      	beq.n	8011248 <_free_r+0x98>
 80111b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111ba:	9001      	str	r0, [sp, #4]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	f1a1 0404 	sub.w	r4, r1, #4
 80111c2:	bfb8      	it	lt
 80111c4:	18e4      	addlt	r4, r4, r3
 80111c6:	f000 fe8b 	bl	8011ee0 <__malloc_lock>
 80111ca:	4a20      	ldr	r2, [pc, #128]	; (801124c <_free_r+0x9c>)
 80111cc:	9801      	ldr	r0, [sp, #4]
 80111ce:	6813      	ldr	r3, [r2, #0]
 80111d0:	4615      	mov	r5, r2
 80111d2:	b933      	cbnz	r3, 80111e2 <_free_r+0x32>
 80111d4:	6063      	str	r3, [r4, #4]
 80111d6:	6014      	str	r4, [r2, #0]
 80111d8:	b003      	add	sp, #12
 80111da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111de:	f000 be85 	b.w	8011eec <__malloc_unlock>
 80111e2:	42a3      	cmp	r3, r4
 80111e4:	d90b      	bls.n	80111fe <_free_r+0x4e>
 80111e6:	6821      	ldr	r1, [r4, #0]
 80111e8:	1862      	adds	r2, r4, r1
 80111ea:	4293      	cmp	r3, r2
 80111ec:	bf04      	itt	eq
 80111ee:	681a      	ldreq	r2, [r3, #0]
 80111f0:	685b      	ldreq	r3, [r3, #4]
 80111f2:	6063      	str	r3, [r4, #4]
 80111f4:	bf04      	itt	eq
 80111f6:	1852      	addeq	r2, r2, r1
 80111f8:	6022      	streq	r2, [r4, #0]
 80111fa:	602c      	str	r4, [r5, #0]
 80111fc:	e7ec      	b.n	80111d8 <_free_r+0x28>
 80111fe:	461a      	mov	r2, r3
 8011200:	685b      	ldr	r3, [r3, #4]
 8011202:	b10b      	cbz	r3, 8011208 <_free_r+0x58>
 8011204:	42a3      	cmp	r3, r4
 8011206:	d9fa      	bls.n	80111fe <_free_r+0x4e>
 8011208:	6811      	ldr	r1, [r2, #0]
 801120a:	1855      	adds	r5, r2, r1
 801120c:	42a5      	cmp	r5, r4
 801120e:	d10b      	bne.n	8011228 <_free_r+0x78>
 8011210:	6824      	ldr	r4, [r4, #0]
 8011212:	4421      	add	r1, r4
 8011214:	1854      	adds	r4, r2, r1
 8011216:	42a3      	cmp	r3, r4
 8011218:	6011      	str	r1, [r2, #0]
 801121a:	d1dd      	bne.n	80111d8 <_free_r+0x28>
 801121c:	681c      	ldr	r4, [r3, #0]
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	6053      	str	r3, [r2, #4]
 8011222:	4421      	add	r1, r4
 8011224:	6011      	str	r1, [r2, #0]
 8011226:	e7d7      	b.n	80111d8 <_free_r+0x28>
 8011228:	d902      	bls.n	8011230 <_free_r+0x80>
 801122a:	230c      	movs	r3, #12
 801122c:	6003      	str	r3, [r0, #0]
 801122e:	e7d3      	b.n	80111d8 <_free_r+0x28>
 8011230:	6825      	ldr	r5, [r4, #0]
 8011232:	1961      	adds	r1, r4, r5
 8011234:	428b      	cmp	r3, r1
 8011236:	bf04      	itt	eq
 8011238:	6819      	ldreq	r1, [r3, #0]
 801123a:	685b      	ldreq	r3, [r3, #4]
 801123c:	6063      	str	r3, [r4, #4]
 801123e:	bf04      	itt	eq
 8011240:	1949      	addeq	r1, r1, r5
 8011242:	6021      	streq	r1, [r4, #0]
 8011244:	6054      	str	r4, [r2, #4]
 8011246:	e7c7      	b.n	80111d8 <_free_r+0x28>
 8011248:	b003      	add	sp, #12
 801124a:	bd30      	pop	{r4, r5, pc}
 801124c:	20000280 	.word	0x20000280

08011250 <_malloc_r>:
 8011250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011252:	1ccd      	adds	r5, r1, #3
 8011254:	f025 0503 	bic.w	r5, r5, #3
 8011258:	3508      	adds	r5, #8
 801125a:	2d0c      	cmp	r5, #12
 801125c:	bf38      	it	cc
 801125e:	250c      	movcc	r5, #12
 8011260:	2d00      	cmp	r5, #0
 8011262:	4606      	mov	r6, r0
 8011264:	db01      	blt.n	801126a <_malloc_r+0x1a>
 8011266:	42a9      	cmp	r1, r5
 8011268:	d903      	bls.n	8011272 <_malloc_r+0x22>
 801126a:	230c      	movs	r3, #12
 801126c:	6033      	str	r3, [r6, #0]
 801126e:	2000      	movs	r0, #0
 8011270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011272:	f000 fe35 	bl	8011ee0 <__malloc_lock>
 8011276:	4921      	ldr	r1, [pc, #132]	; (80112fc <_malloc_r+0xac>)
 8011278:	680a      	ldr	r2, [r1, #0]
 801127a:	4614      	mov	r4, r2
 801127c:	b99c      	cbnz	r4, 80112a6 <_malloc_r+0x56>
 801127e:	4f20      	ldr	r7, [pc, #128]	; (8011300 <_malloc_r+0xb0>)
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	b923      	cbnz	r3, 801128e <_malloc_r+0x3e>
 8011284:	4621      	mov	r1, r4
 8011286:	4630      	mov	r0, r6
 8011288:	f000 fafa 	bl	8011880 <_sbrk_r>
 801128c:	6038      	str	r0, [r7, #0]
 801128e:	4629      	mov	r1, r5
 8011290:	4630      	mov	r0, r6
 8011292:	f000 faf5 	bl	8011880 <_sbrk_r>
 8011296:	1c43      	adds	r3, r0, #1
 8011298:	d123      	bne.n	80112e2 <_malloc_r+0x92>
 801129a:	230c      	movs	r3, #12
 801129c:	6033      	str	r3, [r6, #0]
 801129e:	4630      	mov	r0, r6
 80112a0:	f000 fe24 	bl	8011eec <__malloc_unlock>
 80112a4:	e7e3      	b.n	801126e <_malloc_r+0x1e>
 80112a6:	6823      	ldr	r3, [r4, #0]
 80112a8:	1b5b      	subs	r3, r3, r5
 80112aa:	d417      	bmi.n	80112dc <_malloc_r+0x8c>
 80112ac:	2b0b      	cmp	r3, #11
 80112ae:	d903      	bls.n	80112b8 <_malloc_r+0x68>
 80112b0:	6023      	str	r3, [r4, #0]
 80112b2:	441c      	add	r4, r3
 80112b4:	6025      	str	r5, [r4, #0]
 80112b6:	e004      	b.n	80112c2 <_malloc_r+0x72>
 80112b8:	6863      	ldr	r3, [r4, #4]
 80112ba:	42a2      	cmp	r2, r4
 80112bc:	bf0c      	ite	eq
 80112be:	600b      	streq	r3, [r1, #0]
 80112c0:	6053      	strne	r3, [r2, #4]
 80112c2:	4630      	mov	r0, r6
 80112c4:	f000 fe12 	bl	8011eec <__malloc_unlock>
 80112c8:	f104 000b 	add.w	r0, r4, #11
 80112cc:	1d23      	adds	r3, r4, #4
 80112ce:	f020 0007 	bic.w	r0, r0, #7
 80112d2:	1ac2      	subs	r2, r0, r3
 80112d4:	d0cc      	beq.n	8011270 <_malloc_r+0x20>
 80112d6:	1a1b      	subs	r3, r3, r0
 80112d8:	50a3      	str	r3, [r4, r2]
 80112da:	e7c9      	b.n	8011270 <_malloc_r+0x20>
 80112dc:	4622      	mov	r2, r4
 80112de:	6864      	ldr	r4, [r4, #4]
 80112e0:	e7cc      	b.n	801127c <_malloc_r+0x2c>
 80112e2:	1cc4      	adds	r4, r0, #3
 80112e4:	f024 0403 	bic.w	r4, r4, #3
 80112e8:	42a0      	cmp	r0, r4
 80112ea:	d0e3      	beq.n	80112b4 <_malloc_r+0x64>
 80112ec:	1a21      	subs	r1, r4, r0
 80112ee:	4630      	mov	r0, r6
 80112f0:	f000 fac6 	bl	8011880 <_sbrk_r>
 80112f4:	3001      	adds	r0, #1
 80112f6:	d1dd      	bne.n	80112b4 <_malloc_r+0x64>
 80112f8:	e7cf      	b.n	801129a <_malloc_r+0x4a>
 80112fa:	bf00      	nop
 80112fc:	20000280 	.word	0x20000280
 8011300:	20000284 	.word	0x20000284

08011304 <__ssputs_r>:
 8011304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011308:	688e      	ldr	r6, [r1, #8]
 801130a:	429e      	cmp	r6, r3
 801130c:	4682      	mov	sl, r0
 801130e:	460c      	mov	r4, r1
 8011310:	4690      	mov	r8, r2
 8011312:	461f      	mov	r7, r3
 8011314:	d838      	bhi.n	8011388 <__ssputs_r+0x84>
 8011316:	898a      	ldrh	r2, [r1, #12]
 8011318:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801131c:	d032      	beq.n	8011384 <__ssputs_r+0x80>
 801131e:	6825      	ldr	r5, [r4, #0]
 8011320:	6909      	ldr	r1, [r1, #16]
 8011322:	eba5 0901 	sub.w	r9, r5, r1
 8011326:	6965      	ldr	r5, [r4, #20]
 8011328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801132c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011330:	3301      	adds	r3, #1
 8011332:	444b      	add	r3, r9
 8011334:	106d      	asrs	r5, r5, #1
 8011336:	429d      	cmp	r5, r3
 8011338:	bf38      	it	cc
 801133a:	461d      	movcc	r5, r3
 801133c:	0553      	lsls	r3, r2, #21
 801133e:	d531      	bpl.n	80113a4 <__ssputs_r+0xa0>
 8011340:	4629      	mov	r1, r5
 8011342:	f7ff ff85 	bl	8011250 <_malloc_r>
 8011346:	4606      	mov	r6, r0
 8011348:	b950      	cbnz	r0, 8011360 <__ssputs_r+0x5c>
 801134a:	230c      	movs	r3, #12
 801134c:	f8ca 3000 	str.w	r3, [sl]
 8011350:	89a3      	ldrh	r3, [r4, #12]
 8011352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011356:	81a3      	strh	r3, [r4, #12]
 8011358:	f04f 30ff 	mov.w	r0, #4294967295
 801135c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011360:	6921      	ldr	r1, [r4, #16]
 8011362:	464a      	mov	r2, r9
 8011364:	f7ff fa4c 	bl	8010800 <memcpy>
 8011368:	89a3      	ldrh	r3, [r4, #12]
 801136a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801136e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011372:	81a3      	strh	r3, [r4, #12]
 8011374:	6126      	str	r6, [r4, #16]
 8011376:	6165      	str	r5, [r4, #20]
 8011378:	444e      	add	r6, r9
 801137a:	eba5 0509 	sub.w	r5, r5, r9
 801137e:	6026      	str	r6, [r4, #0]
 8011380:	60a5      	str	r5, [r4, #8]
 8011382:	463e      	mov	r6, r7
 8011384:	42be      	cmp	r6, r7
 8011386:	d900      	bls.n	801138a <__ssputs_r+0x86>
 8011388:	463e      	mov	r6, r7
 801138a:	4632      	mov	r2, r6
 801138c:	6820      	ldr	r0, [r4, #0]
 801138e:	4641      	mov	r1, r8
 8011390:	f000 fd8c 	bl	8011eac <memmove>
 8011394:	68a3      	ldr	r3, [r4, #8]
 8011396:	6822      	ldr	r2, [r4, #0]
 8011398:	1b9b      	subs	r3, r3, r6
 801139a:	4432      	add	r2, r6
 801139c:	60a3      	str	r3, [r4, #8]
 801139e:	6022      	str	r2, [r4, #0]
 80113a0:	2000      	movs	r0, #0
 80113a2:	e7db      	b.n	801135c <__ssputs_r+0x58>
 80113a4:	462a      	mov	r2, r5
 80113a6:	f000 fda7 	bl	8011ef8 <_realloc_r>
 80113aa:	4606      	mov	r6, r0
 80113ac:	2800      	cmp	r0, #0
 80113ae:	d1e1      	bne.n	8011374 <__ssputs_r+0x70>
 80113b0:	6921      	ldr	r1, [r4, #16]
 80113b2:	4650      	mov	r0, sl
 80113b4:	f7ff fefc 	bl	80111b0 <_free_r>
 80113b8:	e7c7      	b.n	801134a <__ssputs_r+0x46>
	...

080113bc <_svfiprintf_r>:
 80113bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c0:	4698      	mov	r8, r3
 80113c2:	898b      	ldrh	r3, [r1, #12]
 80113c4:	061b      	lsls	r3, r3, #24
 80113c6:	b09d      	sub	sp, #116	; 0x74
 80113c8:	4607      	mov	r7, r0
 80113ca:	460d      	mov	r5, r1
 80113cc:	4614      	mov	r4, r2
 80113ce:	d50e      	bpl.n	80113ee <_svfiprintf_r+0x32>
 80113d0:	690b      	ldr	r3, [r1, #16]
 80113d2:	b963      	cbnz	r3, 80113ee <_svfiprintf_r+0x32>
 80113d4:	2140      	movs	r1, #64	; 0x40
 80113d6:	f7ff ff3b 	bl	8011250 <_malloc_r>
 80113da:	6028      	str	r0, [r5, #0]
 80113dc:	6128      	str	r0, [r5, #16]
 80113de:	b920      	cbnz	r0, 80113ea <_svfiprintf_r+0x2e>
 80113e0:	230c      	movs	r3, #12
 80113e2:	603b      	str	r3, [r7, #0]
 80113e4:	f04f 30ff 	mov.w	r0, #4294967295
 80113e8:	e0d1      	b.n	801158e <_svfiprintf_r+0x1d2>
 80113ea:	2340      	movs	r3, #64	; 0x40
 80113ec:	616b      	str	r3, [r5, #20]
 80113ee:	2300      	movs	r3, #0
 80113f0:	9309      	str	r3, [sp, #36]	; 0x24
 80113f2:	2320      	movs	r3, #32
 80113f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80113fc:	2330      	movs	r3, #48	; 0x30
 80113fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80115a8 <_svfiprintf_r+0x1ec>
 8011402:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011406:	f04f 0901 	mov.w	r9, #1
 801140a:	4623      	mov	r3, r4
 801140c:	469a      	mov	sl, r3
 801140e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011412:	b10a      	cbz	r2, 8011418 <_svfiprintf_r+0x5c>
 8011414:	2a25      	cmp	r2, #37	; 0x25
 8011416:	d1f9      	bne.n	801140c <_svfiprintf_r+0x50>
 8011418:	ebba 0b04 	subs.w	fp, sl, r4
 801141c:	d00b      	beq.n	8011436 <_svfiprintf_r+0x7a>
 801141e:	465b      	mov	r3, fp
 8011420:	4622      	mov	r2, r4
 8011422:	4629      	mov	r1, r5
 8011424:	4638      	mov	r0, r7
 8011426:	f7ff ff6d 	bl	8011304 <__ssputs_r>
 801142a:	3001      	adds	r0, #1
 801142c:	f000 80aa 	beq.w	8011584 <_svfiprintf_r+0x1c8>
 8011430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011432:	445a      	add	r2, fp
 8011434:	9209      	str	r2, [sp, #36]	; 0x24
 8011436:	f89a 3000 	ldrb.w	r3, [sl]
 801143a:	2b00      	cmp	r3, #0
 801143c:	f000 80a2 	beq.w	8011584 <_svfiprintf_r+0x1c8>
 8011440:	2300      	movs	r3, #0
 8011442:	f04f 32ff 	mov.w	r2, #4294967295
 8011446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801144a:	f10a 0a01 	add.w	sl, sl, #1
 801144e:	9304      	str	r3, [sp, #16]
 8011450:	9307      	str	r3, [sp, #28]
 8011452:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011456:	931a      	str	r3, [sp, #104]	; 0x68
 8011458:	4654      	mov	r4, sl
 801145a:	2205      	movs	r2, #5
 801145c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011460:	4851      	ldr	r0, [pc, #324]	; (80115a8 <_svfiprintf_r+0x1ec>)
 8011462:	f7ee fed5 	bl	8000210 <memchr>
 8011466:	9a04      	ldr	r2, [sp, #16]
 8011468:	b9d8      	cbnz	r0, 80114a2 <_svfiprintf_r+0xe6>
 801146a:	06d0      	lsls	r0, r2, #27
 801146c:	bf44      	itt	mi
 801146e:	2320      	movmi	r3, #32
 8011470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011474:	0711      	lsls	r1, r2, #28
 8011476:	bf44      	itt	mi
 8011478:	232b      	movmi	r3, #43	; 0x2b
 801147a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801147e:	f89a 3000 	ldrb.w	r3, [sl]
 8011482:	2b2a      	cmp	r3, #42	; 0x2a
 8011484:	d015      	beq.n	80114b2 <_svfiprintf_r+0xf6>
 8011486:	9a07      	ldr	r2, [sp, #28]
 8011488:	4654      	mov	r4, sl
 801148a:	2000      	movs	r0, #0
 801148c:	f04f 0c0a 	mov.w	ip, #10
 8011490:	4621      	mov	r1, r4
 8011492:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011496:	3b30      	subs	r3, #48	; 0x30
 8011498:	2b09      	cmp	r3, #9
 801149a:	d94e      	bls.n	801153a <_svfiprintf_r+0x17e>
 801149c:	b1b0      	cbz	r0, 80114cc <_svfiprintf_r+0x110>
 801149e:	9207      	str	r2, [sp, #28]
 80114a0:	e014      	b.n	80114cc <_svfiprintf_r+0x110>
 80114a2:	eba0 0308 	sub.w	r3, r0, r8
 80114a6:	fa09 f303 	lsl.w	r3, r9, r3
 80114aa:	4313      	orrs	r3, r2
 80114ac:	9304      	str	r3, [sp, #16]
 80114ae:	46a2      	mov	sl, r4
 80114b0:	e7d2      	b.n	8011458 <_svfiprintf_r+0x9c>
 80114b2:	9b03      	ldr	r3, [sp, #12]
 80114b4:	1d19      	adds	r1, r3, #4
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	9103      	str	r1, [sp, #12]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	bfbb      	ittet	lt
 80114be:	425b      	neglt	r3, r3
 80114c0:	f042 0202 	orrlt.w	r2, r2, #2
 80114c4:	9307      	strge	r3, [sp, #28]
 80114c6:	9307      	strlt	r3, [sp, #28]
 80114c8:	bfb8      	it	lt
 80114ca:	9204      	strlt	r2, [sp, #16]
 80114cc:	7823      	ldrb	r3, [r4, #0]
 80114ce:	2b2e      	cmp	r3, #46	; 0x2e
 80114d0:	d10c      	bne.n	80114ec <_svfiprintf_r+0x130>
 80114d2:	7863      	ldrb	r3, [r4, #1]
 80114d4:	2b2a      	cmp	r3, #42	; 0x2a
 80114d6:	d135      	bne.n	8011544 <_svfiprintf_r+0x188>
 80114d8:	9b03      	ldr	r3, [sp, #12]
 80114da:	1d1a      	adds	r2, r3, #4
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	9203      	str	r2, [sp, #12]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	bfb8      	it	lt
 80114e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80114e8:	3402      	adds	r4, #2
 80114ea:	9305      	str	r3, [sp, #20]
 80114ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80115b8 <_svfiprintf_r+0x1fc>
 80114f0:	7821      	ldrb	r1, [r4, #0]
 80114f2:	2203      	movs	r2, #3
 80114f4:	4650      	mov	r0, sl
 80114f6:	f7ee fe8b 	bl	8000210 <memchr>
 80114fa:	b140      	cbz	r0, 801150e <_svfiprintf_r+0x152>
 80114fc:	2340      	movs	r3, #64	; 0x40
 80114fe:	eba0 000a 	sub.w	r0, r0, sl
 8011502:	fa03 f000 	lsl.w	r0, r3, r0
 8011506:	9b04      	ldr	r3, [sp, #16]
 8011508:	4303      	orrs	r3, r0
 801150a:	3401      	adds	r4, #1
 801150c:	9304      	str	r3, [sp, #16]
 801150e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011512:	4826      	ldr	r0, [pc, #152]	; (80115ac <_svfiprintf_r+0x1f0>)
 8011514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011518:	2206      	movs	r2, #6
 801151a:	f7ee fe79 	bl	8000210 <memchr>
 801151e:	2800      	cmp	r0, #0
 8011520:	d038      	beq.n	8011594 <_svfiprintf_r+0x1d8>
 8011522:	4b23      	ldr	r3, [pc, #140]	; (80115b0 <_svfiprintf_r+0x1f4>)
 8011524:	bb1b      	cbnz	r3, 801156e <_svfiprintf_r+0x1b2>
 8011526:	9b03      	ldr	r3, [sp, #12]
 8011528:	3307      	adds	r3, #7
 801152a:	f023 0307 	bic.w	r3, r3, #7
 801152e:	3308      	adds	r3, #8
 8011530:	9303      	str	r3, [sp, #12]
 8011532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011534:	4433      	add	r3, r6
 8011536:	9309      	str	r3, [sp, #36]	; 0x24
 8011538:	e767      	b.n	801140a <_svfiprintf_r+0x4e>
 801153a:	fb0c 3202 	mla	r2, ip, r2, r3
 801153e:	460c      	mov	r4, r1
 8011540:	2001      	movs	r0, #1
 8011542:	e7a5      	b.n	8011490 <_svfiprintf_r+0xd4>
 8011544:	2300      	movs	r3, #0
 8011546:	3401      	adds	r4, #1
 8011548:	9305      	str	r3, [sp, #20]
 801154a:	4619      	mov	r1, r3
 801154c:	f04f 0c0a 	mov.w	ip, #10
 8011550:	4620      	mov	r0, r4
 8011552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011556:	3a30      	subs	r2, #48	; 0x30
 8011558:	2a09      	cmp	r2, #9
 801155a:	d903      	bls.n	8011564 <_svfiprintf_r+0x1a8>
 801155c:	2b00      	cmp	r3, #0
 801155e:	d0c5      	beq.n	80114ec <_svfiprintf_r+0x130>
 8011560:	9105      	str	r1, [sp, #20]
 8011562:	e7c3      	b.n	80114ec <_svfiprintf_r+0x130>
 8011564:	fb0c 2101 	mla	r1, ip, r1, r2
 8011568:	4604      	mov	r4, r0
 801156a:	2301      	movs	r3, #1
 801156c:	e7f0      	b.n	8011550 <_svfiprintf_r+0x194>
 801156e:	ab03      	add	r3, sp, #12
 8011570:	9300      	str	r3, [sp, #0]
 8011572:	462a      	mov	r2, r5
 8011574:	4b0f      	ldr	r3, [pc, #60]	; (80115b4 <_svfiprintf_r+0x1f8>)
 8011576:	a904      	add	r1, sp, #16
 8011578:	4638      	mov	r0, r7
 801157a:	f7fc f9e3 	bl	800d944 <_printf_float>
 801157e:	1c42      	adds	r2, r0, #1
 8011580:	4606      	mov	r6, r0
 8011582:	d1d6      	bne.n	8011532 <_svfiprintf_r+0x176>
 8011584:	89ab      	ldrh	r3, [r5, #12]
 8011586:	065b      	lsls	r3, r3, #25
 8011588:	f53f af2c 	bmi.w	80113e4 <_svfiprintf_r+0x28>
 801158c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801158e:	b01d      	add	sp, #116	; 0x74
 8011590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011594:	ab03      	add	r3, sp, #12
 8011596:	9300      	str	r3, [sp, #0]
 8011598:	462a      	mov	r2, r5
 801159a:	4b06      	ldr	r3, [pc, #24]	; (80115b4 <_svfiprintf_r+0x1f8>)
 801159c:	a904      	add	r1, sp, #16
 801159e:	4638      	mov	r0, r7
 80115a0:	f7fc fc74 	bl	800de8c <_printf_i>
 80115a4:	e7eb      	b.n	801157e <_svfiprintf_r+0x1c2>
 80115a6:	bf00      	nop
 80115a8:	08025d6c 	.word	0x08025d6c
 80115ac:	08025d76 	.word	0x08025d76
 80115b0:	0800d945 	.word	0x0800d945
 80115b4:	08011305 	.word	0x08011305
 80115b8:	08025d72 	.word	0x08025d72

080115bc <__sfputc_r>:
 80115bc:	6893      	ldr	r3, [r2, #8]
 80115be:	3b01      	subs	r3, #1
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	b410      	push	{r4}
 80115c4:	6093      	str	r3, [r2, #8]
 80115c6:	da08      	bge.n	80115da <__sfputc_r+0x1e>
 80115c8:	6994      	ldr	r4, [r2, #24]
 80115ca:	42a3      	cmp	r3, r4
 80115cc:	db01      	blt.n	80115d2 <__sfputc_r+0x16>
 80115ce:	290a      	cmp	r1, #10
 80115d0:	d103      	bne.n	80115da <__sfputc_r+0x1e>
 80115d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115d6:	f000 b975 	b.w	80118c4 <__swbuf_r>
 80115da:	6813      	ldr	r3, [r2, #0]
 80115dc:	1c58      	adds	r0, r3, #1
 80115de:	6010      	str	r0, [r2, #0]
 80115e0:	7019      	strb	r1, [r3, #0]
 80115e2:	4608      	mov	r0, r1
 80115e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115e8:	4770      	bx	lr

080115ea <__sfputs_r>:
 80115ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ec:	4606      	mov	r6, r0
 80115ee:	460f      	mov	r7, r1
 80115f0:	4614      	mov	r4, r2
 80115f2:	18d5      	adds	r5, r2, r3
 80115f4:	42ac      	cmp	r4, r5
 80115f6:	d101      	bne.n	80115fc <__sfputs_r+0x12>
 80115f8:	2000      	movs	r0, #0
 80115fa:	e007      	b.n	801160c <__sfputs_r+0x22>
 80115fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011600:	463a      	mov	r2, r7
 8011602:	4630      	mov	r0, r6
 8011604:	f7ff ffda 	bl	80115bc <__sfputc_r>
 8011608:	1c43      	adds	r3, r0, #1
 801160a:	d1f3      	bne.n	80115f4 <__sfputs_r+0xa>
 801160c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011610 <_vfiprintf_r>:
 8011610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011614:	460d      	mov	r5, r1
 8011616:	b09d      	sub	sp, #116	; 0x74
 8011618:	4614      	mov	r4, r2
 801161a:	4698      	mov	r8, r3
 801161c:	4606      	mov	r6, r0
 801161e:	b118      	cbz	r0, 8011628 <_vfiprintf_r+0x18>
 8011620:	6983      	ldr	r3, [r0, #24]
 8011622:	b90b      	cbnz	r3, 8011628 <_vfiprintf_r+0x18>
 8011624:	f000 fb3e 	bl	8011ca4 <__sinit>
 8011628:	4b89      	ldr	r3, [pc, #548]	; (8011850 <_vfiprintf_r+0x240>)
 801162a:	429d      	cmp	r5, r3
 801162c:	d11b      	bne.n	8011666 <_vfiprintf_r+0x56>
 801162e:	6875      	ldr	r5, [r6, #4]
 8011630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011632:	07d9      	lsls	r1, r3, #31
 8011634:	d405      	bmi.n	8011642 <_vfiprintf_r+0x32>
 8011636:	89ab      	ldrh	r3, [r5, #12]
 8011638:	059a      	lsls	r2, r3, #22
 801163a:	d402      	bmi.n	8011642 <_vfiprintf_r+0x32>
 801163c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801163e:	f000 fbcf 	bl	8011de0 <__retarget_lock_acquire_recursive>
 8011642:	89ab      	ldrh	r3, [r5, #12]
 8011644:	071b      	lsls	r3, r3, #28
 8011646:	d501      	bpl.n	801164c <_vfiprintf_r+0x3c>
 8011648:	692b      	ldr	r3, [r5, #16]
 801164a:	b9eb      	cbnz	r3, 8011688 <_vfiprintf_r+0x78>
 801164c:	4629      	mov	r1, r5
 801164e:	4630      	mov	r0, r6
 8011650:	f000 f998 	bl	8011984 <__swsetup_r>
 8011654:	b1c0      	cbz	r0, 8011688 <_vfiprintf_r+0x78>
 8011656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011658:	07dc      	lsls	r4, r3, #31
 801165a:	d50e      	bpl.n	801167a <_vfiprintf_r+0x6a>
 801165c:	f04f 30ff 	mov.w	r0, #4294967295
 8011660:	b01d      	add	sp, #116	; 0x74
 8011662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011666:	4b7b      	ldr	r3, [pc, #492]	; (8011854 <_vfiprintf_r+0x244>)
 8011668:	429d      	cmp	r5, r3
 801166a:	d101      	bne.n	8011670 <_vfiprintf_r+0x60>
 801166c:	68b5      	ldr	r5, [r6, #8]
 801166e:	e7df      	b.n	8011630 <_vfiprintf_r+0x20>
 8011670:	4b79      	ldr	r3, [pc, #484]	; (8011858 <_vfiprintf_r+0x248>)
 8011672:	429d      	cmp	r5, r3
 8011674:	bf08      	it	eq
 8011676:	68f5      	ldreq	r5, [r6, #12]
 8011678:	e7da      	b.n	8011630 <_vfiprintf_r+0x20>
 801167a:	89ab      	ldrh	r3, [r5, #12]
 801167c:	0598      	lsls	r0, r3, #22
 801167e:	d4ed      	bmi.n	801165c <_vfiprintf_r+0x4c>
 8011680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011682:	f000 fbae 	bl	8011de2 <__retarget_lock_release_recursive>
 8011686:	e7e9      	b.n	801165c <_vfiprintf_r+0x4c>
 8011688:	2300      	movs	r3, #0
 801168a:	9309      	str	r3, [sp, #36]	; 0x24
 801168c:	2320      	movs	r3, #32
 801168e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011692:	f8cd 800c 	str.w	r8, [sp, #12]
 8011696:	2330      	movs	r3, #48	; 0x30
 8011698:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801185c <_vfiprintf_r+0x24c>
 801169c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116a0:	f04f 0901 	mov.w	r9, #1
 80116a4:	4623      	mov	r3, r4
 80116a6:	469a      	mov	sl, r3
 80116a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116ac:	b10a      	cbz	r2, 80116b2 <_vfiprintf_r+0xa2>
 80116ae:	2a25      	cmp	r2, #37	; 0x25
 80116b0:	d1f9      	bne.n	80116a6 <_vfiprintf_r+0x96>
 80116b2:	ebba 0b04 	subs.w	fp, sl, r4
 80116b6:	d00b      	beq.n	80116d0 <_vfiprintf_r+0xc0>
 80116b8:	465b      	mov	r3, fp
 80116ba:	4622      	mov	r2, r4
 80116bc:	4629      	mov	r1, r5
 80116be:	4630      	mov	r0, r6
 80116c0:	f7ff ff93 	bl	80115ea <__sfputs_r>
 80116c4:	3001      	adds	r0, #1
 80116c6:	f000 80aa 	beq.w	801181e <_vfiprintf_r+0x20e>
 80116ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116cc:	445a      	add	r2, fp
 80116ce:	9209      	str	r2, [sp, #36]	; 0x24
 80116d0:	f89a 3000 	ldrb.w	r3, [sl]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	f000 80a2 	beq.w	801181e <_vfiprintf_r+0x20e>
 80116da:	2300      	movs	r3, #0
 80116dc:	f04f 32ff 	mov.w	r2, #4294967295
 80116e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116e4:	f10a 0a01 	add.w	sl, sl, #1
 80116e8:	9304      	str	r3, [sp, #16]
 80116ea:	9307      	str	r3, [sp, #28]
 80116ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80116f0:	931a      	str	r3, [sp, #104]	; 0x68
 80116f2:	4654      	mov	r4, sl
 80116f4:	2205      	movs	r2, #5
 80116f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116fa:	4858      	ldr	r0, [pc, #352]	; (801185c <_vfiprintf_r+0x24c>)
 80116fc:	f7ee fd88 	bl	8000210 <memchr>
 8011700:	9a04      	ldr	r2, [sp, #16]
 8011702:	b9d8      	cbnz	r0, 801173c <_vfiprintf_r+0x12c>
 8011704:	06d1      	lsls	r1, r2, #27
 8011706:	bf44      	itt	mi
 8011708:	2320      	movmi	r3, #32
 801170a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801170e:	0713      	lsls	r3, r2, #28
 8011710:	bf44      	itt	mi
 8011712:	232b      	movmi	r3, #43	; 0x2b
 8011714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011718:	f89a 3000 	ldrb.w	r3, [sl]
 801171c:	2b2a      	cmp	r3, #42	; 0x2a
 801171e:	d015      	beq.n	801174c <_vfiprintf_r+0x13c>
 8011720:	9a07      	ldr	r2, [sp, #28]
 8011722:	4654      	mov	r4, sl
 8011724:	2000      	movs	r0, #0
 8011726:	f04f 0c0a 	mov.w	ip, #10
 801172a:	4621      	mov	r1, r4
 801172c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011730:	3b30      	subs	r3, #48	; 0x30
 8011732:	2b09      	cmp	r3, #9
 8011734:	d94e      	bls.n	80117d4 <_vfiprintf_r+0x1c4>
 8011736:	b1b0      	cbz	r0, 8011766 <_vfiprintf_r+0x156>
 8011738:	9207      	str	r2, [sp, #28]
 801173a:	e014      	b.n	8011766 <_vfiprintf_r+0x156>
 801173c:	eba0 0308 	sub.w	r3, r0, r8
 8011740:	fa09 f303 	lsl.w	r3, r9, r3
 8011744:	4313      	orrs	r3, r2
 8011746:	9304      	str	r3, [sp, #16]
 8011748:	46a2      	mov	sl, r4
 801174a:	e7d2      	b.n	80116f2 <_vfiprintf_r+0xe2>
 801174c:	9b03      	ldr	r3, [sp, #12]
 801174e:	1d19      	adds	r1, r3, #4
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	9103      	str	r1, [sp, #12]
 8011754:	2b00      	cmp	r3, #0
 8011756:	bfbb      	ittet	lt
 8011758:	425b      	neglt	r3, r3
 801175a:	f042 0202 	orrlt.w	r2, r2, #2
 801175e:	9307      	strge	r3, [sp, #28]
 8011760:	9307      	strlt	r3, [sp, #28]
 8011762:	bfb8      	it	lt
 8011764:	9204      	strlt	r2, [sp, #16]
 8011766:	7823      	ldrb	r3, [r4, #0]
 8011768:	2b2e      	cmp	r3, #46	; 0x2e
 801176a:	d10c      	bne.n	8011786 <_vfiprintf_r+0x176>
 801176c:	7863      	ldrb	r3, [r4, #1]
 801176e:	2b2a      	cmp	r3, #42	; 0x2a
 8011770:	d135      	bne.n	80117de <_vfiprintf_r+0x1ce>
 8011772:	9b03      	ldr	r3, [sp, #12]
 8011774:	1d1a      	adds	r2, r3, #4
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	9203      	str	r2, [sp, #12]
 801177a:	2b00      	cmp	r3, #0
 801177c:	bfb8      	it	lt
 801177e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011782:	3402      	adds	r4, #2
 8011784:	9305      	str	r3, [sp, #20]
 8011786:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801186c <_vfiprintf_r+0x25c>
 801178a:	7821      	ldrb	r1, [r4, #0]
 801178c:	2203      	movs	r2, #3
 801178e:	4650      	mov	r0, sl
 8011790:	f7ee fd3e 	bl	8000210 <memchr>
 8011794:	b140      	cbz	r0, 80117a8 <_vfiprintf_r+0x198>
 8011796:	2340      	movs	r3, #64	; 0x40
 8011798:	eba0 000a 	sub.w	r0, r0, sl
 801179c:	fa03 f000 	lsl.w	r0, r3, r0
 80117a0:	9b04      	ldr	r3, [sp, #16]
 80117a2:	4303      	orrs	r3, r0
 80117a4:	3401      	adds	r4, #1
 80117a6:	9304      	str	r3, [sp, #16]
 80117a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117ac:	482c      	ldr	r0, [pc, #176]	; (8011860 <_vfiprintf_r+0x250>)
 80117ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117b2:	2206      	movs	r2, #6
 80117b4:	f7ee fd2c 	bl	8000210 <memchr>
 80117b8:	2800      	cmp	r0, #0
 80117ba:	d03f      	beq.n	801183c <_vfiprintf_r+0x22c>
 80117bc:	4b29      	ldr	r3, [pc, #164]	; (8011864 <_vfiprintf_r+0x254>)
 80117be:	bb1b      	cbnz	r3, 8011808 <_vfiprintf_r+0x1f8>
 80117c0:	9b03      	ldr	r3, [sp, #12]
 80117c2:	3307      	adds	r3, #7
 80117c4:	f023 0307 	bic.w	r3, r3, #7
 80117c8:	3308      	adds	r3, #8
 80117ca:	9303      	str	r3, [sp, #12]
 80117cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117ce:	443b      	add	r3, r7
 80117d0:	9309      	str	r3, [sp, #36]	; 0x24
 80117d2:	e767      	b.n	80116a4 <_vfiprintf_r+0x94>
 80117d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80117d8:	460c      	mov	r4, r1
 80117da:	2001      	movs	r0, #1
 80117dc:	e7a5      	b.n	801172a <_vfiprintf_r+0x11a>
 80117de:	2300      	movs	r3, #0
 80117e0:	3401      	adds	r4, #1
 80117e2:	9305      	str	r3, [sp, #20]
 80117e4:	4619      	mov	r1, r3
 80117e6:	f04f 0c0a 	mov.w	ip, #10
 80117ea:	4620      	mov	r0, r4
 80117ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117f0:	3a30      	subs	r2, #48	; 0x30
 80117f2:	2a09      	cmp	r2, #9
 80117f4:	d903      	bls.n	80117fe <_vfiprintf_r+0x1ee>
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d0c5      	beq.n	8011786 <_vfiprintf_r+0x176>
 80117fa:	9105      	str	r1, [sp, #20]
 80117fc:	e7c3      	b.n	8011786 <_vfiprintf_r+0x176>
 80117fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8011802:	4604      	mov	r4, r0
 8011804:	2301      	movs	r3, #1
 8011806:	e7f0      	b.n	80117ea <_vfiprintf_r+0x1da>
 8011808:	ab03      	add	r3, sp, #12
 801180a:	9300      	str	r3, [sp, #0]
 801180c:	462a      	mov	r2, r5
 801180e:	4b16      	ldr	r3, [pc, #88]	; (8011868 <_vfiprintf_r+0x258>)
 8011810:	a904      	add	r1, sp, #16
 8011812:	4630      	mov	r0, r6
 8011814:	f7fc f896 	bl	800d944 <_printf_float>
 8011818:	4607      	mov	r7, r0
 801181a:	1c78      	adds	r0, r7, #1
 801181c:	d1d6      	bne.n	80117cc <_vfiprintf_r+0x1bc>
 801181e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011820:	07d9      	lsls	r1, r3, #31
 8011822:	d405      	bmi.n	8011830 <_vfiprintf_r+0x220>
 8011824:	89ab      	ldrh	r3, [r5, #12]
 8011826:	059a      	lsls	r2, r3, #22
 8011828:	d402      	bmi.n	8011830 <_vfiprintf_r+0x220>
 801182a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801182c:	f000 fad9 	bl	8011de2 <__retarget_lock_release_recursive>
 8011830:	89ab      	ldrh	r3, [r5, #12]
 8011832:	065b      	lsls	r3, r3, #25
 8011834:	f53f af12 	bmi.w	801165c <_vfiprintf_r+0x4c>
 8011838:	9809      	ldr	r0, [sp, #36]	; 0x24
 801183a:	e711      	b.n	8011660 <_vfiprintf_r+0x50>
 801183c:	ab03      	add	r3, sp, #12
 801183e:	9300      	str	r3, [sp, #0]
 8011840:	462a      	mov	r2, r5
 8011842:	4b09      	ldr	r3, [pc, #36]	; (8011868 <_vfiprintf_r+0x258>)
 8011844:	a904      	add	r1, sp, #16
 8011846:	4630      	mov	r0, r6
 8011848:	f7fc fb20 	bl	800de8c <_printf_i>
 801184c:	e7e4      	b.n	8011818 <_vfiprintf_r+0x208>
 801184e:	bf00      	nop
 8011850:	08025da0 	.word	0x08025da0
 8011854:	08025dc0 	.word	0x08025dc0
 8011858:	08025d80 	.word	0x08025d80
 801185c:	08025d6c 	.word	0x08025d6c
 8011860:	08025d76 	.word	0x08025d76
 8011864:	0800d945 	.word	0x0800d945
 8011868:	080115eb 	.word	0x080115eb
 801186c:	08025d72 	.word	0x08025d72

08011870 <nan>:
 8011870:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011878 <nan+0x8>
 8011874:	4770      	bx	lr
 8011876:	bf00      	nop
 8011878:	00000000 	.word	0x00000000
 801187c:	7ff80000 	.word	0x7ff80000

08011880 <_sbrk_r>:
 8011880:	b538      	push	{r3, r4, r5, lr}
 8011882:	4d06      	ldr	r5, [pc, #24]	; (801189c <_sbrk_r+0x1c>)
 8011884:	2300      	movs	r3, #0
 8011886:	4604      	mov	r4, r0
 8011888:	4608      	mov	r0, r1
 801188a:	602b      	str	r3, [r5, #0]
 801188c:	f7f4 fe94 	bl	80065b8 <_sbrk>
 8011890:	1c43      	adds	r3, r0, #1
 8011892:	d102      	bne.n	801189a <_sbrk_r+0x1a>
 8011894:	682b      	ldr	r3, [r5, #0]
 8011896:	b103      	cbz	r3, 801189a <_sbrk_r+0x1a>
 8011898:	6023      	str	r3, [r4, #0]
 801189a:	bd38      	pop	{r3, r4, r5, pc}
 801189c:	200007f8 	.word	0x200007f8

080118a0 <strncmp>:
 80118a0:	b510      	push	{r4, lr}
 80118a2:	b16a      	cbz	r2, 80118c0 <strncmp+0x20>
 80118a4:	3901      	subs	r1, #1
 80118a6:	1884      	adds	r4, r0, r2
 80118a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80118ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80118b0:	4293      	cmp	r3, r2
 80118b2:	d103      	bne.n	80118bc <strncmp+0x1c>
 80118b4:	42a0      	cmp	r0, r4
 80118b6:	d001      	beq.n	80118bc <strncmp+0x1c>
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d1f5      	bne.n	80118a8 <strncmp+0x8>
 80118bc:	1a98      	subs	r0, r3, r2
 80118be:	bd10      	pop	{r4, pc}
 80118c0:	4610      	mov	r0, r2
 80118c2:	e7fc      	b.n	80118be <strncmp+0x1e>

080118c4 <__swbuf_r>:
 80118c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118c6:	460e      	mov	r6, r1
 80118c8:	4614      	mov	r4, r2
 80118ca:	4605      	mov	r5, r0
 80118cc:	b118      	cbz	r0, 80118d6 <__swbuf_r+0x12>
 80118ce:	6983      	ldr	r3, [r0, #24]
 80118d0:	b90b      	cbnz	r3, 80118d6 <__swbuf_r+0x12>
 80118d2:	f000 f9e7 	bl	8011ca4 <__sinit>
 80118d6:	4b21      	ldr	r3, [pc, #132]	; (801195c <__swbuf_r+0x98>)
 80118d8:	429c      	cmp	r4, r3
 80118da:	d12b      	bne.n	8011934 <__swbuf_r+0x70>
 80118dc:	686c      	ldr	r4, [r5, #4]
 80118de:	69a3      	ldr	r3, [r4, #24]
 80118e0:	60a3      	str	r3, [r4, #8]
 80118e2:	89a3      	ldrh	r3, [r4, #12]
 80118e4:	071a      	lsls	r2, r3, #28
 80118e6:	d52f      	bpl.n	8011948 <__swbuf_r+0x84>
 80118e8:	6923      	ldr	r3, [r4, #16]
 80118ea:	b36b      	cbz	r3, 8011948 <__swbuf_r+0x84>
 80118ec:	6923      	ldr	r3, [r4, #16]
 80118ee:	6820      	ldr	r0, [r4, #0]
 80118f0:	1ac0      	subs	r0, r0, r3
 80118f2:	6963      	ldr	r3, [r4, #20]
 80118f4:	b2f6      	uxtb	r6, r6
 80118f6:	4283      	cmp	r3, r0
 80118f8:	4637      	mov	r7, r6
 80118fa:	dc04      	bgt.n	8011906 <__swbuf_r+0x42>
 80118fc:	4621      	mov	r1, r4
 80118fe:	4628      	mov	r0, r5
 8011900:	f000 f93c 	bl	8011b7c <_fflush_r>
 8011904:	bb30      	cbnz	r0, 8011954 <__swbuf_r+0x90>
 8011906:	68a3      	ldr	r3, [r4, #8]
 8011908:	3b01      	subs	r3, #1
 801190a:	60a3      	str	r3, [r4, #8]
 801190c:	6823      	ldr	r3, [r4, #0]
 801190e:	1c5a      	adds	r2, r3, #1
 8011910:	6022      	str	r2, [r4, #0]
 8011912:	701e      	strb	r6, [r3, #0]
 8011914:	6963      	ldr	r3, [r4, #20]
 8011916:	3001      	adds	r0, #1
 8011918:	4283      	cmp	r3, r0
 801191a:	d004      	beq.n	8011926 <__swbuf_r+0x62>
 801191c:	89a3      	ldrh	r3, [r4, #12]
 801191e:	07db      	lsls	r3, r3, #31
 8011920:	d506      	bpl.n	8011930 <__swbuf_r+0x6c>
 8011922:	2e0a      	cmp	r6, #10
 8011924:	d104      	bne.n	8011930 <__swbuf_r+0x6c>
 8011926:	4621      	mov	r1, r4
 8011928:	4628      	mov	r0, r5
 801192a:	f000 f927 	bl	8011b7c <_fflush_r>
 801192e:	b988      	cbnz	r0, 8011954 <__swbuf_r+0x90>
 8011930:	4638      	mov	r0, r7
 8011932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011934:	4b0a      	ldr	r3, [pc, #40]	; (8011960 <__swbuf_r+0x9c>)
 8011936:	429c      	cmp	r4, r3
 8011938:	d101      	bne.n	801193e <__swbuf_r+0x7a>
 801193a:	68ac      	ldr	r4, [r5, #8]
 801193c:	e7cf      	b.n	80118de <__swbuf_r+0x1a>
 801193e:	4b09      	ldr	r3, [pc, #36]	; (8011964 <__swbuf_r+0xa0>)
 8011940:	429c      	cmp	r4, r3
 8011942:	bf08      	it	eq
 8011944:	68ec      	ldreq	r4, [r5, #12]
 8011946:	e7ca      	b.n	80118de <__swbuf_r+0x1a>
 8011948:	4621      	mov	r1, r4
 801194a:	4628      	mov	r0, r5
 801194c:	f000 f81a 	bl	8011984 <__swsetup_r>
 8011950:	2800      	cmp	r0, #0
 8011952:	d0cb      	beq.n	80118ec <__swbuf_r+0x28>
 8011954:	f04f 37ff 	mov.w	r7, #4294967295
 8011958:	e7ea      	b.n	8011930 <__swbuf_r+0x6c>
 801195a:	bf00      	nop
 801195c:	08025da0 	.word	0x08025da0
 8011960:	08025dc0 	.word	0x08025dc0
 8011964:	08025d80 	.word	0x08025d80

08011968 <__ascii_wctomb>:
 8011968:	b149      	cbz	r1, 801197e <__ascii_wctomb+0x16>
 801196a:	2aff      	cmp	r2, #255	; 0xff
 801196c:	bf85      	ittet	hi
 801196e:	238a      	movhi	r3, #138	; 0x8a
 8011970:	6003      	strhi	r3, [r0, #0]
 8011972:	700a      	strbls	r2, [r1, #0]
 8011974:	f04f 30ff 	movhi.w	r0, #4294967295
 8011978:	bf98      	it	ls
 801197a:	2001      	movls	r0, #1
 801197c:	4770      	bx	lr
 801197e:	4608      	mov	r0, r1
 8011980:	4770      	bx	lr
	...

08011984 <__swsetup_r>:
 8011984:	4b32      	ldr	r3, [pc, #200]	; (8011a50 <__swsetup_r+0xcc>)
 8011986:	b570      	push	{r4, r5, r6, lr}
 8011988:	681d      	ldr	r5, [r3, #0]
 801198a:	4606      	mov	r6, r0
 801198c:	460c      	mov	r4, r1
 801198e:	b125      	cbz	r5, 801199a <__swsetup_r+0x16>
 8011990:	69ab      	ldr	r3, [r5, #24]
 8011992:	b913      	cbnz	r3, 801199a <__swsetup_r+0x16>
 8011994:	4628      	mov	r0, r5
 8011996:	f000 f985 	bl	8011ca4 <__sinit>
 801199a:	4b2e      	ldr	r3, [pc, #184]	; (8011a54 <__swsetup_r+0xd0>)
 801199c:	429c      	cmp	r4, r3
 801199e:	d10f      	bne.n	80119c0 <__swsetup_r+0x3c>
 80119a0:	686c      	ldr	r4, [r5, #4]
 80119a2:	89a3      	ldrh	r3, [r4, #12]
 80119a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119a8:	0719      	lsls	r1, r3, #28
 80119aa:	d42c      	bmi.n	8011a06 <__swsetup_r+0x82>
 80119ac:	06dd      	lsls	r5, r3, #27
 80119ae:	d411      	bmi.n	80119d4 <__swsetup_r+0x50>
 80119b0:	2309      	movs	r3, #9
 80119b2:	6033      	str	r3, [r6, #0]
 80119b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80119b8:	81a3      	strh	r3, [r4, #12]
 80119ba:	f04f 30ff 	mov.w	r0, #4294967295
 80119be:	e03e      	b.n	8011a3e <__swsetup_r+0xba>
 80119c0:	4b25      	ldr	r3, [pc, #148]	; (8011a58 <__swsetup_r+0xd4>)
 80119c2:	429c      	cmp	r4, r3
 80119c4:	d101      	bne.n	80119ca <__swsetup_r+0x46>
 80119c6:	68ac      	ldr	r4, [r5, #8]
 80119c8:	e7eb      	b.n	80119a2 <__swsetup_r+0x1e>
 80119ca:	4b24      	ldr	r3, [pc, #144]	; (8011a5c <__swsetup_r+0xd8>)
 80119cc:	429c      	cmp	r4, r3
 80119ce:	bf08      	it	eq
 80119d0:	68ec      	ldreq	r4, [r5, #12]
 80119d2:	e7e6      	b.n	80119a2 <__swsetup_r+0x1e>
 80119d4:	0758      	lsls	r0, r3, #29
 80119d6:	d512      	bpl.n	80119fe <__swsetup_r+0x7a>
 80119d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119da:	b141      	cbz	r1, 80119ee <__swsetup_r+0x6a>
 80119dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119e0:	4299      	cmp	r1, r3
 80119e2:	d002      	beq.n	80119ea <__swsetup_r+0x66>
 80119e4:	4630      	mov	r0, r6
 80119e6:	f7ff fbe3 	bl	80111b0 <_free_r>
 80119ea:	2300      	movs	r3, #0
 80119ec:	6363      	str	r3, [r4, #52]	; 0x34
 80119ee:	89a3      	ldrh	r3, [r4, #12]
 80119f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80119f4:	81a3      	strh	r3, [r4, #12]
 80119f6:	2300      	movs	r3, #0
 80119f8:	6063      	str	r3, [r4, #4]
 80119fa:	6923      	ldr	r3, [r4, #16]
 80119fc:	6023      	str	r3, [r4, #0]
 80119fe:	89a3      	ldrh	r3, [r4, #12]
 8011a00:	f043 0308 	orr.w	r3, r3, #8
 8011a04:	81a3      	strh	r3, [r4, #12]
 8011a06:	6923      	ldr	r3, [r4, #16]
 8011a08:	b94b      	cbnz	r3, 8011a1e <__swsetup_r+0x9a>
 8011a0a:	89a3      	ldrh	r3, [r4, #12]
 8011a0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a14:	d003      	beq.n	8011a1e <__swsetup_r+0x9a>
 8011a16:	4621      	mov	r1, r4
 8011a18:	4630      	mov	r0, r6
 8011a1a:	f000 fa07 	bl	8011e2c <__smakebuf_r>
 8011a1e:	89a0      	ldrh	r0, [r4, #12]
 8011a20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a24:	f010 0301 	ands.w	r3, r0, #1
 8011a28:	d00a      	beq.n	8011a40 <__swsetup_r+0xbc>
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	60a3      	str	r3, [r4, #8]
 8011a2e:	6963      	ldr	r3, [r4, #20]
 8011a30:	425b      	negs	r3, r3
 8011a32:	61a3      	str	r3, [r4, #24]
 8011a34:	6923      	ldr	r3, [r4, #16]
 8011a36:	b943      	cbnz	r3, 8011a4a <__swsetup_r+0xc6>
 8011a38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011a3c:	d1ba      	bne.n	80119b4 <__swsetup_r+0x30>
 8011a3e:	bd70      	pop	{r4, r5, r6, pc}
 8011a40:	0781      	lsls	r1, r0, #30
 8011a42:	bf58      	it	pl
 8011a44:	6963      	ldrpl	r3, [r4, #20]
 8011a46:	60a3      	str	r3, [r4, #8]
 8011a48:	e7f4      	b.n	8011a34 <__swsetup_r+0xb0>
 8011a4a:	2000      	movs	r0, #0
 8011a4c:	e7f7      	b.n	8011a3e <__swsetup_r+0xba>
 8011a4e:	bf00      	nop
 8011a50:	20000040 	.word	0x20000040
 8011a54:	08025da0 	.word	0x08025da0
 8011a58:	08025dc0 	.word	0x08025dc0
 8011a5c:	08025d80 	.word	0x08025d80

08011a60 <abort>:
 8011a60:	b508      	push	{r3, lr}
 8011a62:	2006      	movs	r0, #6
 8011a64:	f000 fa96 	bl	8011f94 <raise>
 8011a68:	2001      	movs	r0, #1
 8011a6a:	f7f4 fd2d 	bl	80064c8 <_exit>
	...

08011a70 <__sflush_r>:
 8011a70:	898a      	ldrh	r2, [r1, #12]
 8011a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a76:	4605      	mov	r5, r0
 8011a78:	0710      	lsls	r0, r2, #28
 8011a7a:	460c      	mov	r4, r1
 8011a7c:	d458      	bmi.n	8011b30 <__sflush_r+0xc0>
 8011a7e:	684b      	ldr	r3, [r1, #4]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	dc05      	bgt.n	8011a90 <__sflush_r+0x20>
 8011a84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	dc02      	bgt.n	8011a90 <__sflush_r+0x20>
 8011a8a:	2000      	movs	r0, #0
 8011a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a92:	2e00      	cmp	r6, #0
 8011a94:	d0f9      	beq.n	8011a8a <__sflush_r+0x1a>
 8011a96:	2300      	movs	r3, #0
 8011a98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a9c:	682f      	ldr	r7, [r5, #0]
 8011a9e:	602b      	str	r3, [r5, #0]
 8011aa0:	d032      	beq.n	8011b08 <__sflush_r+0x98>
 8011aa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011aa4:	89a3      	ldrh	r3, [r4, #12]
 8011aa6:	075a      	lsls	r2, r3, #29
 8011aa8:	d505      	bpl.n	8011ab6 <__sflush_r+0x46>
 8011aaa:	6863      	ldr	r3, [r4, #4]
 8011aac:	1ac0      	subs	r0, r0, r3
 8011aae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ab0:	b10b      	cbz	r3, 8011ab6 <__sflush_r+0x46>
 8011ab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ab4:	1ac0      	subs	r0, r0, r3
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	4602      	mov	r2, r0
 8011aba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011abc:	6a21      	ldr	r1, [r4, #32]
 8011abe:	4628      	mov	r0, r5
 8011ac0:	47b0      	blx	r6
 8011ac2:	1c43      	adds	r3, r0, #1
 8011ac4:	89a3      	ldrh	r3, [r4, #12]
 8011ac6:	d106      	bne.n	8011ad6 <__sflush_r+0x66>
 8011ac8:	6829      	ldr	r1, [r5, #0]
 8011aca:	291d      	cmp	r1, #29
 8011acc:	d82c      	bhi.n	8011b28 <__sflush_r+0xb8>
 8011ace:	4a2a      	ldr	r2, [pc, #168]	; (8011b78 <__sflush_r+0x108>)
 8011ad0:	40ca      	lsrs	r2, r1
 8011ad2:	07d6      	lsls	r6, r2, #31
 8011ad4:	d528      	bpl.n	8011b28 <__sflush_r+0xb8>
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	6062      	str	r2, [r4, #4]
 8011ada:	04d9      	lsls	r1, r3, #19
 8011adc:	6922      	ldr	r2, [r4, #16]
 8011ade:	6022      	str	r2, [r4, #0]
 8011ae0:	d504      	bpl.n	8011aec <__sflush_r+0x7c>
 8011ae2:	1c42      	adds	r2, r0, #1
 8011ae4:	d101      	bne.n	8011aea <__sflush_r+0x7a>
 8011ae6:	682b      	ldr	r3, [r5, #0]
 8011ae8:	b903      	cbnz	r3, 8011aec <__sflush_r+0x7c>
 8011aea:	6560      	str	r0, [r4, #84]	; 0x54
 8011aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011aee:	602f      	str	r7, [r5, #0]
 8011af0:	2900      	cmp	r1, #0
 8011af2:	d0ca      	beq.n	8011a8a <__sflush_r+0x1a>
 8011af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011af8:	4299      	cmp	r1, r3
 8011afa:	d002      	beq.n	8011b02 <__sflush_r+0x92>
 8011afc:	4628      	mov	r0, r5
 8011afe:	f7ff fb57 	bl	80111b0 <_free_r>
 8011b02:	2000      	movs	r0, #0
 8011b04:	6360      	str	r0, [r4, #52]	; 0x34
 8011b06:	e7c1      	b.n	8011a8c <__sflush_r+0x1c>
 8011b08:	6a21      	ldr	r1, [r4, #32]
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	4628      	mov	r0, r5
 8011b0e:	47b0      	blx	r6
 8011b10:	1c41      	adds	r1, r0, #1
 8011b12:	d1c7      	bne.n	8011aa4 <__sflush_r+0x34>
 8011b14:	682b      	ldr	r3, [r5, #0]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d0c4      	beq.n	8011aa4 <__sflush_r+0x34>
 8011b1a:	2b1d      	cmp	r3, #29
 8011b1c:	d001      	beq.n	8011b22 <__sflush_r+0xb2>
 8011b1e:	2b16      	cmp	r3, #22
 8011b20:	d101      	bne.n	8011b26 <__sflush_r+0xb6>
 8011b22:	602f      	str	r7, [r5, #0]
 8011b24:	e7b1      	b.n	8011a8a <__sflush_r+0x1a>
 8011b26:	89a3      	ldrh	r3, [r4, #12]
 8011b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b2c:	81a3      	strh	r3, [r4, #12]
 8011b2e:	e7ad      	b.n	8011a8c <__sflush_r+0x1c>
 8011b30:	690f      	ldr	r7, [r1, #16]
 8011b32:	2f00      	cmp	r7, #0
 8011b34:	d0a9      	beq.n	8011a8a <__sflush_r+0x1a>
 8011b36:	0793      	lsls	r3, r2, #30
 8011b38:	680e      	ldr	r6, [r1, #0]
 8011b3a:	bf08      	it	eq
 8011b3c:	694b      	ldreq	r3, [r1, #20]
 8011b3e:	600f      	str	r7, [r1, #0]
 8011b40:	bf18      	it	ne
 8011b42:	2300      	movne	r3, #0
 8011b44:	eba6 0807 	sub.w	r8, r6, r7
 8011b48:	608b      	str	r3, [r1, #8]
 8011b4a:	f1b8 0f00 	cmp.w	r8, #0
 8011b4e:	dd9c      	ble.n	8011a8a <__sflush_r+0x1a>
 8011b50:	6a21      	ldr	r1, [r4, #32]
 8011b52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011b54:	4643      	mov	r3, r8
 8011b56:	463a      	mov	r2, r7
 8011b58:	4628      	mov	r0, r5
 8011b5a:	47b0      	blx	r6
 8011b5c:	2800      	cmp	r0, #0
 8011b5e:	dc06      	bgt.n	8011b6e <__sflush_r+0xfe>
 8011b60:	89a3      	ldrh	r3, [r4, #12]
 8011b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b66:	81a3      	strh	r3, [r4, #12]
 8011b68:	f04f 30ff 	mov.w	r0, #4294967295
 8011b6c:	e78e      	b.n	8011a8c <__sflush_r+0x1c>
 8011b6e:	4407      	add	r7, r0
 8011b70:	eba8 0800 	sub.w	r8, r8, r0
 8011b74:	e7e9      	b.n	8011b4a <__sflush_r+0xda>
 8011b76:	bf00      	nop
 8011b78:	20400001 	.word	0x20400001

08011b7c <_fflush_r>:
 8011b7c:	b538      	push	{r3, r4, r5, lr}
 8011b7e:	690b      	ldr	r3, [r1, #16]
 8011b80:	4605      	mov	r5, r0
 8011b82:	460c      	mov	r4, r1
 8011b84:	b913      	cbnz	r3, 8011b8c <_fflush_r+0x10>
 8011b86:	2500      	movs	r5, #0
 8011b88:	4628      	mov	r0, r5
 8011b8a:	bd38      	pop	{r3, r4, r5, pc}
 8011b8c:	b118      	cbz	r0, 8011b96 <_fflush_r+0x1a>
 8011b8e:	6983      	ldr	r3, [r0, #24]
 8011b90:	b90b      	cbnz	r3, 8011b96 <_fflush_r+0x1a>
 8011b92:	f000 f887 	bl	8011ca4 <__sinit>
 8011b96:	4b14      	ldr	r3, [pc, #80]	; (8011be8 <_fflush_r+0x6c>)
 8011b98:	429c      	cmp	r4, r3
 8011b9a:	d11b      	bne.n	8011bd4 <_fflush_r+0x58>
 8011b9c:	686c      	ldr	r4, [r5, #4]
 8011b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d0ef      	beq.n	8011b86 <_fflush_r+0xa>
 8011ba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ba8:	07d0      	lsls	r0, r2, #31
 8011baa:	d404      	bmi.n	8011bb6 <_fflush_r+0x3a>
 8011bac:	0599      	lsls	r1, r3, #22
 8011bae:	d402      	bmi.n	8011bb6 <_fflush_r+0x3a>
 8011bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bb2:	f000 f915 	bl	8011de0 <__retarget_lock_acquire_recursive>
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	4621      	mov	r1, r4
 8011bba:	f7ff ff59 	bl	8011a70 <__sflush_r>
 8011bbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011bc0:	07da      	lsls	r2, r3, #31
 8011bc2:	4605      	mov	r5, r0
 8011bc4:	d4e0      	bmi.n	8011b88 <_fflush_r+0xc>
 8011bc6:	89a3      	ldrh	r3, [r4, #12]
 8011bc8:	059b      	lsls	r3, r3, #22
 8011bca:	d4dd      	bmi.n	8011b88 <_fflush_r+0xc>
 8011bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bce:	f000 f908 	bl	8011de2 <__retarget_lock_release_recursive>
 8011bd2:	e7d9      	b.n	8011b88 <_fflush_r+0xc>
 8011bd4:	4b05      	ldr	r3, [pc, #20]	; (8011bec <_fflush_r+0x70>)
 8011bd6:	429c      	cmp	r4, r3
 8011bd8:	d101      	bne.n	8011bde <_fflush_r+0x62>
 8011bda:	68ac      	ldr	r4, [r5, #8]
 8011bdc:	e7df      	b.n	8011b9e <_fflush_r+0x22>
 8011bde:	4b04      	ldr	r3, [pc, #16]	; (8011bf0 <_fflush_r+0x74>)
 8011be0:	429c      	cmp	r4, r3
 8011be2:	bf08      	it	eq
 8011be4:	68ec      	ldreq	r4, [r5, #12]
 8011be6:	e7da      	b.n	8011b9e <_fflush_r+0x22>
 8011be8:	08025da0 	.word	0x08025da0
 8011bec:	08025dc0 	.word	0x08025dc0
 8011bf0:	08025d80 	.word	0x08025d80

08011bf4 <std>:
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	b510      	push	{r4, lr}
 8011bf8:	4604      	mov	r4, r0
 8011bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8011bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c02:	6083      	str	r3, [r0, #8]
 8011c04:	8181      	strh	r1, [r0, #12]
 8011c06:	6643      	str	r3, [r0, #100]	; 0x64
 8011c08:	81c2      	strh	r2, [r0, #14]
 8011c0a:	6183      	str	r3, [r0, #24]
 8011c0c:	4619      	mov	r1, r3
 8011c0e:	2208      	movs	r2, #8
 8011c10:	305c      	adds	r0, #92	; 0x5c
 8011c12:	f7fb fdef 	bl	800d7f4 <memset>
 8011c16:	4b05      	ldr	r3, [pc, #20]	; (8011c2c <std+0x38>)
 8011c18:	6263      	str	r3, [r4, #36]	; 0x24
 8011c1a:	4b05      	ldr	r3, [pc, #20]	; (8011c30 <std+0x3c>)
 8011c1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011c1e:	4b05      	ldr	r3, [pc, #20]	; (8011c34 <std+0x40>)
 8011c20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011c22:	4b05      	ldr	r3, [pc, #20]	; (8011c38 <std+0x44>)
 8011c24:	6224      	str	r4, [r4, #32]
 8011c26:	6323      	str	r3, [r4, #48]	; 0x30
 8011c28:	bd10      	pop	{r4, pc}
 8011c2a:	bf00      	nop
 8011c2c:	08011fcd 	.word	0x08011fcd
 8011c30:	08011fef 	.word	0x08011fef
 8011c34:	08012027 	.word	0x08012027
 8011c38:	0801204b 	.word	0x0801204b

08011c3c <_cleanup_r>:
 8011c3c:	4901      	ldr	r1, [pc, #4]	; (8011c44 <_cleanup_r+0x8>)
 8011c3e:	f000 b8af 	b.w	8011da0 <_fwalk_reent>
 8011c42:	bf00      	nop
 8011c44:	08011b7d 	.word	0x08011b7d

08011c48 <__sfmoreglue>:
 8011c48:	b570      	push	{r4, r5, r6, lr}
 8011c4a:	1e4a      	subs	r2, r1, #1
 8011c4c:	2568      	movs	r5, #104	; 0x68
 8011c4e:	4355      	muls	r5, r2
 8011c50:	460e      	mov	r6, r1
 8011c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011c56:	f7ff fafb 	bl	8011250 <_malloc_r>
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	b140      	cbz	r0, 8011c70 <__sfmoreglue+0x28>
 8011c5e:	2100      	movs	r1, #0
 8011c60:	e9c0 1600 	strd	r1, r6, [r0]
 8011c64:	300c      	adds	r0, #12
 8011c66:	60a0      	str	r0, [r4, #8]
 8011c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011c6c:	f7fb fdc2 	bl	800d7f4 <memset>
 8011c70:	4620      	mov	r0, r4
 8011c72:	bd70      	pop	{r4, r5, r6, pc}

08011c74 <__sfp_lock_acquire>:
 8011c74:	4801      	ldr	r0, [pc, #4]	; (8011c7c <__sfp_lock_acquire+0x8>)
 8011c76:	f000 b8b3 	b.w	8011de0 <__retarget_lock_acquire_recursive>
 8011c7a:	bf00      	nop
 8011c7c:	200007f4 	.word	0x200007f4

08011c80 <__sfp_lock_release>:
 8011c80:	4801      	ldr	r0, [pc, #4]	; (8011c88 <__sfp_lock_release+0x8>)
 8011c82:	f000 b8ae 	b.w	8011de2 <__retarget_lock_release_recursive>
 8011c86:	bf00      	nop
 8011c88:	200007f4 	.word	0x200007f4

08011c8c <__sinit_lock_acquire>:
 8011c8c:	4801      	ldr	r0, [pc, #4]	; (8011c94 <__sinit_lock_acquire+0x8>)
 8011c8e:	f000 b8a7 	b.w	8011de0 <__retarget_lock_acquire_recursive>
 8011c92:	bf00      	nop
 8011c94:	200007ef 	.word	0x200007ef

08011c98 <__sinit_lock_release>:
 8011c98:	4801      	ldr	r0, [pc, #4]	; (8011ca0 <__sinit_lock_release+0x8>)
 8011c9a:	f000 b8a2 	b.w	8011de2 <__retarget_lock_release_recursive>
 8011c9e:	bf00      	nop
 8011ca0:	200007ef 	.word	0x200007ef

08011ca4 <__sinit>:
 8011ca4:	b510      	push	{r4, lr}
 8011ca6:	4604      	mov	r4, r0
 8011ca8:	f7ff fff0 	bl	8011c8c <__sinit_lock_acquire>
 8011cac:	69a3      	ldr	r3, [r4, #24]
 8011cae:	b11b      	cbz	r3, 8011cb8 <__sinit+0x14>
 8011cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cb4:	f7ff bff0 	b.w	8011c98 <__sinit_lock_release>
 8011cb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011cbc:	6523      	str	r3, [r4, #80]	; 0x50
 8011cbe:	4b13      	ldr	r3, [pc, #76]	; (8011d0c <__sinit+0x68>)
 8011cc0:	4a13      	ldr	r2, [pc, #76]	; (8011d10 <__sinit+0x6c>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8011cc6:	42a3      	cmp	r3, r4
 8011cc8:	bf04      	itt	eq
 8011cca:	2301      	moveq	r3, #1
 8011ccc:	61a3      	streq	r3, [r4, #24]
 8011cce:	4620      	mov	r0, r4
 8011cd0:	f000 f820 	bl	8011d14 <__sfp>
 8011cd4:	6060      	str	r0, [r4, #4]
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	f000 f81c 	bl	8011d14 <__sfp>
 8011cdc:	60a0      	str	r0, [r4, #8]
 8011cde:	4620      	mov	r0, r4
 8011ce0:	f000 f818 	bl	8011d14 <__sfp>
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	60e0      	str	r0, [r4, #12]
 8011ce8:	2104      	movs	r1, #4
 8011cea:	6860      	ldr	r0, [r4, #4]
 8011cec:	f7ff ff82 	bl	8011bf4 <std>
 8011cf0:	68a0      	ldr	r0, [r4, #8]
 8011cf2:	2201      	movs	r2, #1
 8011cf4:	2109      	movs	r1, #9
 8011cf6:	f7ff ff7d 	bl	8011bf4 <std>
 8011cfa:	68e0      	ldr	r0, [r4, #12]
 8011cfc:	2202      	movs	r2, #2
 8011cfe:	2112      	movs	r1, #18
 8011d00:	f7ff ff78 	bl	8011bf4 <std>
 8011d04:	2301      	movs	r3, #1
 8011d06:	61a3      	str	r3, [r4, #24]
 8011d08:	e7d2      	b.n	8011cb0 <__sinit+0xc>
 8011d0a:	bf00      	nop
 8011d0c:	080258cc 	.word	0x080258cc
 8011d10:	08011c3d 	.word	0x08011c3d

08011d14 <__sfp>:
 8011d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d16:	4607      	mov	r7, r0
 8011d18:	f7ff ffac 	bl	8011c74 <__sfp_lock_acquire>
 8011d1c:	4b1e      	ldr	r3, [pc, #120]	; (8011d98 <__sfp+0x84>)
 8011d1e:	681e      	ldr	r6, [r3, #0]
 8011d20:	69b3      	ldr	r3, [r6, #24]
 8011d22:	b913      	cbnz	r3, 8011d2a <__sfp+0x16>
 8011d24:	4630      	mov	r0, r6
 8011d26:	f7ff ffbd 	bl	8011ca4 <__sinit>
 8011d2a:	3648      	adds	r6, #72	; 0x48
 8011d2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011d30:	3b01      	subs	r3, #1
 8011d32:	d503      	bpl.n	8011d3c <__sfp+0x28>
 8011d34:	6833      	ldr	r3, [r6, #0]
 8011d36:	b30b      	cbz	r3, 8011d7c <__sfp+0x68>
 8011d38:	6836      	ldr	r6, [r6, #0]
 8011d3a:	e7f7      	b.n	8011d2c <__sfp+0x18>
 8011d3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011d40:	b9d5      	cbnz	r5, 8011d78 <__sfp+0x64>
 8011d42:	4b16      	ldr	r3, [pc, #88]	; (8011d9c <__sfp+0x88>)
 8011d44:	60e3      	str	r3, [r4, #12]
 8011d46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011d4a:	6665      	str	r5, [r4, #100]	; 0x64
 8011d4c:	f000 f847 	bl	8011dde <__retarget_lock_init_recursive>
 8011d50:	f7ff ff96 	bl	8011c80 <__sfp_lock_release>
 8011d54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011d58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011d5c:	6025      	str	r5, [r4, #0]
 8011d5e:	61a5      	str	r5, [r4, #24]
 8011d60:	2208      	movs	r2, #8
 8011d62:	4629      	mov	r1, r5
 8011d64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011d68:	f7fb fd44 	bl	800d7f4 <memset>
 8011d6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011d70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011d74:	4620      	mov	r0, r4
 8011d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d78:	3468      	adds	r4, #104	; 0x68
 8011d7a:	e7d9      	b.n	8011d30 <__sfp+0x1c>
 8011d7c:	2104      	movs	r1, #4
 8011d7e:	4638      	mov	r0, r7
 8011d80:	f7ff ff62 	bl	8011c48 <__sfmoreglue>
 8011d84:	4604      	mov	r4, r0
 8011d86:	6030      	str	r0, [r6, #0]
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	d1d5      	bne.n	8011d38 <__sfp+0x24>
 8011d8c:	f7ff ff78 	bl	8011c80 <__sfp_lock_release>
 8011d90:	230c      	movs	r3, #12
 8011d92:	603b      	str	r3, [r7, #0]
 8011d94:	e7ee      	b.n	8011d74 <__sfp+0x60>
 8011d96:	bf00      	nop
 8011d98:	080258cc 	.word	0x080258cc
 8011d9c:	ffff0001 	.word	0xffff0001

08011da0 <_fwalk_reent>:
 8011da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011da4:	4606      	mov	r6, r0
 8011da6:	4688      	mov	r8, r1
 8011da8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011dac:	2700      	movs	r7, #0
 8011dae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011db2:	f1b9 0901 	subs.w	r9, r9, #1
 8011db6:	d505      	bpl.n	8011dc4 <_fwalk_reent+0x24>
 8011db8:	6824      	ldr	r4, [r4, #0]
 8011dba:	2c00      	cmp	r4, #0
 8011dbc:	d1f7      	bne.n	8011dae <_fwalk_reent+0xe>
 8011dbe:	4638      	mov	r0, r7
 8011dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dc4:	89ab      	ldrh	r3, [r5, #12]
 8011dc6:	2b01      	cmp	r3, #1
 8011dc8:	d907      	bls.n	8011dda <_fwalk_reent+0x3a>
 8011dca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011dce:	3301      	adds	r3, #1
 8011dd0:	d003      	beq.n	8011dda <_fwalk_reent+0x3a>
 8011dd2:	4629      	mov	r1, r5
 8011dd4:	4630      	mov	r0, r6
 8011dd6:	47c0      	blx	r8
 8011dd8:	4307      	orrs	r7, r0
 8011dda:	3568      	adds	r5, #104	; 0x68
 8011ddc:	e7e9      	b.n	8011db2 <_fwalk_reent+0x12>

08011dde <__retarget_lock_init_recursive>:
 8011dde:	4770      	bx	lr

08011de0 <__retarget_lock_acquire_recursive>:
 8011de0:	4770      	bx	lr

08011de2 <__retarget_lock_release_recursive>:
 8011de2:	4770      	bx	lr

08011de4 <__swhatbuf_r>:
 8011de4:	b570      	push	{r4, r5, r6, lr}
 8011de6:	460e      	mov	r6, r1
 8011de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dec:	2900      	cmp	r1, #0
 8011dee:	b096      	sub	sp, #88	; 0x58
 8011df0:	4614      	mov	r4, r2
 8011df2:	461d      	mov	r5, r3
 8011df4:	da07      	bge.n	8011e06 <__swhatbuf_r+0x22>
 8011df6:	2300      	movs	r3, #0
 8011df8:	602b      	str	r3, [r5, #0]
 8011dfa:	89b3      	ldrh	r3, [r6, #12]
 8011dfc:	061a      	lsls	r2, r3, #24
 8011dfe:	d410      	bmi.n	8011e22 <__swhatbuf_r+0x3e>
 8011e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e04:	e00e      	b.n	8011e24 <__swhatbuf_r+0x40>
 8011e06:	466a      	mov	r2, sp
 8011e08:	f000 f946 	bl	8012098 <_fstat_r>
 8011e0c:	2800      	cmp	r0, #0
 8011e0e:	dbf2      	blt.n	8011df6 <__swhatbuf_r+0x12>
 8011e10:	9a01      	ldr	r2, [sp, #4]
 8011e12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011e16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011e1a:	425a      	negs	r2, r3
 8011e1c:	415a      	adcs	r2, r3
 8011e1e:	602a      	str	r2, [r5, #0]
 8011e20:	e7ee      	b.n	8011e00 <__swhatbuf_r+0x1c>
 8011e22:	2340      	movs	r3, #64	; 0x40
 8011e24:	2000      	movs	r0, #0
 8011e26:	6023      	str	r3, [r4, #0]
 8011e28:	b016      	add	sp, #88	; 0x58
 8011e2a:	bd70      	pop	{r4, r5, r6, pc}

08011e2c <__smakebuf_r>:
 8011e2c:	898b      	ldrh	r3, [r1, #12]
 8011e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e30:	079d      	lsls	r5, r3, #30
 8011e32:	4606      	mov	r6, r0
 8011e34:	460c      	mov	r4, r1
 8011e36:	d507      	bpl.n	8011e48 <__smakebuf_r+0x1c>
 8011e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e3c:	6023      	str	r3, [r4, #0]
 8011e3e:	6123      	str	r3, [r4, #16]
 8011e40:	2301      	movs	r3, #1
 8011e42:	6163      	str	r3, [r4, #20]
 8011e44:	b002      	add	sp, #8
 8011e46:	bd70      	pop	{r4, r5, r6, pc}
 8011e48:	ab01      	add	r3, sp, #4
 8011e4a:	466a      	mov	r2, sp
 8011e4c:	f7ff ffca 	bl	8011de4 <__swhatbuf_r>
 8011e50:	9900      	ldr	r1, [sp, #0]
 8011e52:	4605      	mov	r5, r0
 8011e54:	4630      	mov	r0, r6
 8011e56:	f7ff f9fb 	bl	8011250 <_malloc_r>
 8011e5a:	b948      	cbnz	r0, 8011e70 <__smakebuf_r+0x44>
 8011e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e60:	059a      	lsls	r2, r3, #22
 8011e62:	d4ef      	bmi.n	8011e44 <__smakebuf_r+0x18>
 8011e64:	f023 0303 	bic.w	r3, r3, #3
 8011e68:	f043 0302 	orr.w	r3, r3, #2
 8011e6c:	81a3      	strh	r3, [r4, #12]
 8011e6e:	e7e3      	b.n	8011e38 <__smakebuf_r+0xc>
 8011e70:	4b0d      	ldr	r3, [pc, #52]	; (8011ea8 <__smakebuf_r+0x7c>)
 8011e72:	62b3      	str	r3, [r6, #40]	; 0x28
 8011e74:	89a3      	ldrh	r3, [r4, #12]
 8011e76:	6020      	str	r0, [r4, #0]
 8011e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e7c:	81a3      	strh	r3, [r4, #12]
 8011e7e:	9b00      	ldr	r3, [sp, #0]
 8011e80:	6163      	str	r3, [r4, #20]
 8011e82:	9b01      	ldr	r3, [sp, #4]
 8011e84:	6120      	str	r0, [r4, #16]
 8011e86:	b15b      	cbz	r3, 8011ea0 <__smakebuf_r+0x74>
 8011e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e8c:	4630      	mov	r0, r6
 8011e8e:	f000 f915 	bl	80120bc <_isatty_r>
 8011e92:	b128      	cbz	r0, 8011ea0 <__smakebuf_r+0x74>
 8011e94:	89a3      	ldrh	r3, [r4, #12]
 8011e96:	f023 0303 	bic.w	r3, r3, #3
 8011e9a:	f043 0301 	orr.w	r3, r3, #1
 8011e9e:	81a3      	strh	r3, [r4, #12]
 8011ea0:	89a0      	ldrh	r0, [r4, #12]
 8011ea2:	4305      	orrs	r5, r0
 8011ea4:	81a5      	strh	r5, [r4, #12]
 8011ea6:	e7cd      	b.n	8011e44 <__smakebuf_r+0x18>
 8011ea8:	08011c3d 	.word	0x08011c3d

08011eac <memmove>:
 8011eac:	4288      	cmp	r0, r1
 8011eae:	b510      	push	{r4, lr}
 8011eb0:	eb01 0402 	add.w	r4, r1, r2
 8011eb4:	d902      	bls.n	8011ebc <memmove+0x10>
 8011eb6:	4284      	cmp	r4, r0
 8011eb8:	4623      	mov	r3, r4
 8011eba:	d807      	bhi.n	8011ecc <memmove+0x20>
 8011ebc:	1e43      	subs	r3, r0, #1
 8011ebe:	42a1      	cmp	r1, r4
 8011ec0:	d008      	beq.n	8011ed4 <memmove+0x28>
 8011ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011eca:	e7f8      	b.n	8011ebe <memmove+0x12>
 8011ecc:	4402      	add	r2, r0
 8011ece:	4601      	mov	r1, r0
 8011ed0:	428a      	cmp	r2, r1
 8011ed2:	d100      	bne.n	8011ed6 <memmove+0x2a>
 8011ed4:	bd10      	pop	{r4, pc}
 8011ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ede:	e7f7      	b.n	8011ed0 <memmove+0x24>

08011ee0 <__malloc_lock>:
 8011ee0:	4801      	ldr	r0, [pc, #4]	; (8011ee8 <__malloc_lock+0x8>)
 8011ee2:	f7ff bf7d 	b.w	8011de0 <__retarget_lock_acquire_recursive>
 8011ee6:	bf00      	nop
 8011ee8:	200007f0 	.word	0x200007f0

08011eec <__malloc_unlock>:
 8011eec:	4801      	ldr	r0, [pc, #4]	; (8011ef4 <__malloc_unlock+0x8>)
 8011eee:	f7ff bf78 	b.w	8011de2 <__retarget_lock_release_recursive>
 8011ef2:	bf00      	nop
 8011ef4:	200007f0 	.word	0x200007f0

08011ef8 <_realloc_r>:
 8011ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011efa:	4607      	mov	r7, r0
 8011efc:	4614      	mov	r4, r2
 8011efe:	460e      	mov	r6, r1
 8011f00:	b921      	cbnz	r1, 8011f0c <_realloc_r+0x14>
 8011f02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011f06:	4611      	mov	r1, r2
 8011f08:	f7ff b9a2 	b.w	8011250 <_malloc_r>
 8011f0c:	b922      	cbnz	r2, 8011f18 <_realloc_r+0x20>
 8011f0e:	f7ff f94f 	bl	80111b0 <_free_r>
 8011f12:	4625      	mov	r5, r4
 8011f14:	4628      	mov	r0, r5
 8011f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f18:	f000 f8f2 	bl	8012100 <_malloc_usable_size_r>
 8011f1c:	42a0      	cmp	r0, r4
 8011f1e:	d20f      	bcs.n	8011f40 <_realloc_r+0x48>
 8011f20:	4621      	mov	r1, r4
 8011f22:	4638      	mov	r0, r7
 8011f24:	f7ff f994 	bl	8011250 <_malloc_r>
 8011f28:	4605      	mov	r5, r0
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	d0f2      	beq.n	8011f14 <_realloc_r+0x1c>
 8011f2e:	4631      	mov	r1, r6
 8011f30:	4622      	mov	r2, r4
 8011f32:	f7fe fc65 	bl	8010800 <memcpy>
 8011f36:	4631      	mov	r1, r6
 8011f38:	4638      	mov	r0, r7
 8011f3a:	f7ff f939 	bl	80111b0 <_free_r>
 8011f3e:	e7e9      	b.n	8011f14 <_realloc_r+0x1c>
 8011f40:	4635      	mov	r5, r6
 8011f42:	e7e7      	b.n	8011f14 <_realloc_r+0x1c>

08011f44 <_raise_r>:
 8011f44:	291f      	cmp	r1, #31
 8011f46:	b538      	push	{r3, r4, r5, lr}
 8011f48:	4604      	mov	r4, r0
 8011f4a:	460d      	mov	r5, r1
 8011f4c:	d904      	bls.n	8011f58 <_raise_r+0x14>
 8011f4e:	2316      	movs	r3, #22
 8011f50:	6003      	str	r3, [r0, #0]
 8011f52:	f04f 30ff 	mov.w	r0, #4294967295
 8011f56:	bd38      	pop	{r3, r4, r5, pc}
 8011f58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011f5a:	b112      	cbz	r2, 8011f62 <_raise_r+0x1e>
 8011f5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f60:	b94b      	cbnz	r3, 8011f76 <_raise_r+0x32>
 8011f62:	4620      	mov	r0, r4
 8011f64:	f000 f830 	bl	8011fc8 <_getpid_r>
 8011f68:	462a      	mov	r2, r5
 8011f6a:	4601      	mov	r1, r0
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f72:	f000 b817 	b.w	8011fa4 <_kill_r>
 8011f76:	2b01      	cmp	r3, #1
 8011f78:	d00a      	beq.n	8011f90 <_raise_r+0x4c>
 8011f7a:	1c59      	adds	r1, r3, #1
 8011f7c:	d103      	bne.n	8011f86 <_raise_r+0x42>
 8011f7e:	2316      	movs	r3, #22
 8011f80:	6003      	str	r3, [r0, #0]
 8011f82:	2001      	movs	r0, #1
 8011f84:	e7e7      	b.n	8011f56 <_raise_r+0x12>
 8011f86:	2400      	movs	r4, #0
 8011f88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	4798      	blx	r3
 8011f90:	2000      	movs	r0, #0
 8011f92:	e7e0      	b.n	8011f56 <_raise_r+0x12>

08011f94 <raise>:
 8011f94:	4b02      	ldr	r3, [pc, #8]	; (8011fa0 <raise+0xc>)
 8011f96:	4601      	mov	r1, r0
 8011f98:	6818      	ldr	r0, [r3, #0]
 8011f9a:	f7ff bfd3 	b.w	8011f44 <_raise_r>
 8011f9e:	bf00      	nop
 8011fa0:	20000040 	.word	0x20000040

08011fa4 <_kill_r>:
 8011fa4:	b538      	push	{r3, r4, r5, lr}
 8011fa6:	4d07      	ldr	r5, [pc, #28]	; (8011fc4 <_kill_r+0x20>)
 8011fa8:	2300      	movs	r3, #0
 8011faa:	4604      	mov	r4, r0
 8011fac:	4608      	mov	r0, r1
 8011fae:	4611      	mov	r1, r2
 8011fb0:	602b      	str	r3, [r5, #0]
 8011fb2:	f7f4 fa79 	bl	80064a8 <_kill>
 8011fb6:	1c43      	adds	r3, r0, #1
 8011fb8:	d102      	bne.n	8011fc0 <_kill_r+0x1c>
 8011fba:	682b      	ldr	r3, [r5, #0]
 8011fbc:	b103      	cbz	r3, 8011fc0 <_kill_r+0x1c>
 8011fbe:	6023      	str	r3, [r4, #0]
 8011fc0:	bd38      	pop	{r3, r4, r5, pc}
 8011fc2:	bf00      	nop
 8011fc4:	200007f8 	.word	0x200007f8

08011fc8 <_getpid_r>:
 8011fc8:	f7f4 ba66 	b.w	8006498 <_getpid>

08011fcc <__sread>:
 8011fcc:	b510      	push	{r4, lr}
 8011fce:	460c      	mov	r4, r1
 8011fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fd4:	f000 f89c 	bl	8012110 <_read_r>
 8011fd8:	2800      	cmp	r0, #0
 8011fda:	bfab      	itete	ge
 8011fdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011fde:	89a3      	ldrhlt	r3, [r4, #12]
 8011fe0:	181b      	addge	r3, r3, r0
 8011fe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011fe6:	bfac      	ite	ge
 8011fe8:	6563      	strge	r3, [r4, #84]	; 0x54
 8011fea:	81a3      	strhlt	r3, [r4, #12]
 8011fec:	bd10      	pop	{r4, pc}

08011fee <__swrite>:
 8011fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ff2:	461f      	mov	r7, r3
 8011ff4:	898b      	ldrh	r3, [r1, #12]
 8011ff6:	05db      	lsls	r3, r3, #23
 8011ff8:	4605      	mov	r5, r0
 8011ffa:	460c      	mov	r4, r1
 8011ffc:	4616      	mov	r6, r2
 8011ffe:	d505      	bpl.n	801200c <__swrite+0x1e>
 8012000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012004:	2302      	movs	r3, #2
 8012006:	2200      	movs	r2, #0
 8012008:	f000 f868 	bl	80120dc <_lseek_r>
 801200c:	89a3      	ldrh	r3, [r4, #12]
 801200e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012016:	81a3      	strh	r3, [r4, #12]
 8012018:	4632      	mov	r2, r6
 801201a:	463b      	mov	r3, r7
 801201c:	4628      	mov	r0, r5
 801201e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012022:	f000 b817 	b.w	8012054 <_write_r>

08012026 <__sseek>:
 8012026:	b510      	push	{r4, lr}
 8012028:	460c      	mov	r4, r1
 801202a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801202e:	f000 f855 	bl	80120dc <_lseek_r>
 8012032:	1c43      	adds	r3, r0, #1
 8012034:	89a3      	ldrh	r3, [r4, #12]
 8012036:	bf15      	itete	ne
 8012038:	6560      	strne	r0, [r4, #84]	; 0x54
 801203a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801203e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012042:	81a3      	strheq	r3, [r4, #12]
 8012044:	bf18      	it	ne
 8012046:	81a3      	strhne	r3, [r4, #12]
 8012048:	bd10      	pop	{r4, pc}

0801204a <__sclose>:
 801204a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801204e:	f000 b813 	b.w	8012078 <_close_r>
	...

08012054 <_write_r>:
 8012054:	b538      	push	{r3, r4, r5, lr}
 8012056:	4d07      	ldr	r5, [pc, #28]	; (8012074 <_write_r+0x20>)
 8012058:	4604      	mov	r4, r0
 801205a:	4608      	mov	r0, r1
 801205c:	4611      	mov	r1, r2
 801205e:	2200      	movs	r2, #0
 8012060:	602a      	str	r2, [r5, #0]
 8012062:	461a      	mov	r2, r3
 8012064:	f7f4 fa57 	bl	8006516 <_write>
 8012068:	1c43      	adds	r3, r0, #1
 801206a:	d102      	bne.n	8012072 <_write_r+0x1e>
 801206c:	682b      	ldr	r3, [r5, #0]
 801206e:	b103      	cbz	r3, 8012072 <_write_r+0x1e>
 8012070:	6023      	str	r3, [r4, #0]
 8012072:	bd38      	pop	{r3, r4, r5, pc}
 8012074:	200007f8 	.word	0x200007f8

08012078 <_close_r>:
 8012078:	b538      	push	{r3, r4, r5, lr}
 801207a:	4d06      	ldr	r5, [pc, #24]	; (8012094 <_close_r+0x1c>)
 801207c:	2300      	movs	r3, #0
 801207e:	4604      	mov	r4, r0
 8012080:	4608      	mov	r0, r1
 8012082:	602b      	str	r3, [r5, #0]
 8012084:	f7f4 fa63 	bl	800654e <_close>
 8012088:	1c43      	adds	r3, r0, #1
 801208a:	d102      	bne.n	8012092 <_close_r+0x1a>
 801208c:	682b      	ldr	r3, [r5, #0]
 801208e:	b103      	cbz	r3, 8012092 <_close_r+0x1a>
 8012090:	6023      	str	r3, [r4, #0]
 8012092:	bd38      	pop	{r3, r4, r5, pc}
 8012094:	200007f8 	.word	0x200007f8

08012098 <_fstat_r>:
 8012098:	b538      	push	{r3, r4, r5, lr}
 801209a:	4d07      	ldr	r5, [pc, #28]	; (80120b8 <_fstat_r+0x20>)
 801209c:	2300      	movs	r3, #0
 801209e:	4604      	mov	r4, r0
 80120a0:	4608      	mov	r0, r1
 80120a2:	4611      	mov	r1, r2
 80120a4:	602b      	str	r3, [r5, #0]
 80120a6:	f7f4 fa5e 	bl	8006566 <_fstat>
 80120aa:	1c43      	adds	r3, r0, #1
 80120ac:	d102      	bne.n	80120b4 <_fstat_r+0x1c>
 80120ae:	682b      	ldr	r3, [r5, #0]
 80120b0:	b103      	cbz	r3, 80120b4 <_fstat_r+0x1c>
 80120b2:	6023      	str	r3, [r4, #0]
 80120b4:	bd38      	pop	{r3, r4, r5, pc}
 80120b6:	bf00      	nop
 80120b8:	200007f8 	.word	0x200007f8

080120bc <_isatty_r>:
 80120bc:	b538      	push	{r3, r4, r5, lr}
 80120be:	4d06      	ldr	r5, [pc, #24]	; (80120d8 <_isatty_r+0x1c>)
 80120c0:	2300      	movs	r3, #0
 80120c2:	4604      	mov	r4, r0
 80120c4:	4608      	mov	r0, r1
 80120c6:	602b      	str	r3, [r5, #0]
 80120c8:	f7f4 fa5d 	bl	8006586 <_isatty>
 80120cc:	1c43      	adds	r3, r0, #1
 80120ce:	d102      	bne.n	80120d6 <_isatty_r+0x1a>
 80120d0:	682b      	ldr	r3, [r5, #0]
 80120d2:	b103      	cbz	r3, 80120d6 <_isatty_r+0x1a>
 80120d4:	6023      	str	r3, [r4, #0]
 80120d6:	bd38      	pop	{r3, r4, r5, pc}
 80120d8:	200007f8 	.word	0x200007f8

080120dc <_lseek_r>:
 80120dc:	b538      	push	{r3, r4, r5, lr}
 80120de:	4d07      	ldr	r5, [pc, #28]	; (80120fc <_lseek_r+0x20>)
 80120e0:	4604      	mov	r4, r0
 80120e2:	4608      	mov	r0, r1
 80120e4:	4611      	mov	r1, r2
 80120e6:	2200      	movs	r2, #0
 80120e8:	602a      	str	r2, [r5, #0]
 80120ea:	461a      	mov	r2, r3
 80120ec:	f7f4 fa56 	bl	800659c <_lseek>
 80120f0:	1c43      	adds	r3, r0, #1
 80120f2:	d102      	bne.n	80120fa <_lseek_r+0x1e>
 80120f4:	682b      	ldr	r3, [r5, #0]
 80120f6:	b103      	cbz	r3, 80120fa <_lseek_r+0x1e>
 80120f8:	6023      	str	r3, [r4, #0]
 80120fa:	bd38      	pop	{r3, r4, r5, pc}
 80120fc:	200007f8 	.word	0x200007f8

08012100 <_malloc_usable_size_r>:
 8012100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012104:	1f18      	subs	r0, r3, #4
 8012106:	2b00      	cmp	r3, #0
 8012108:	bfbc      	itt	lt
 801210a:	580b      	ldrlt	r3, [r1, r0]
 801210c:	18c0      	addlt	r0, r0, r3
 801210e:	4770      	bx	lr

08012110 <_read_r>:
 8012110:	b538      	push	{r3, r4, r5, lr}
 8012112:	4d07      	ldr	r5, [pc, #28]	; (8012130 <_read_r+0x20>)
 8012114:	4604      	mov	r4, r0
 8012116:	4608      	mov	r0, r1
 8012118:	4611      	mov	r1, r2
 801211a:	2200      	movs	r2, #0
 801211c:	602a      	str	r2, [r5, #0]
 801211e:	461a      	mov	r2, r3
 8012120:	f7f4 f9dc 	bl	80064dc <_read>
 8012124:	1c43      	adds	r3, r0, #1
 8012126:	d102      	bne.n	801212e <_read_r+0x1e>
 8012128:	682b      	ldr	r3, [r5, #0]
 801212a:	b103      	cbz	r3, 801212e <_read_r+0x1e>
 801212c:	6023      	str	r3, [r4, #0]
 801212e:	bd38      	pop	{r3, r4, r5, pc}
 8012130:	200007f8 	.word	0x200007f8

08012134 <_init>:
 8012134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012136:	bf00      	nop
 8012138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801213a:	bc08      	pop	{r3}
 801213c:	469e      	mov	lr, r3
 801213e:	4770      	bx	lr

08012140 <_fini>:
 8012140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012142:	bf00      	nop
 8012144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012146:	bc08      	pop	{r3}
 8012148:	469e      	mov	lr, r3
 801214a:	4770      	bx	lr
