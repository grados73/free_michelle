
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013c90  080120c0  080120c0  000220c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025d50  08025d50  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08025d50  08025d50  00035d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025d58  08025d58  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025d58  08025d58  00035d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025d5c  08025d5c  00035d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08025d60  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20000214  08025f74  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  08025f74  000407fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e18  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a12  00000000  00000000  0006205c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  00066a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000758c  00000000  00000000  00068290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024309  00000000  00000000  0006f81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00097c57  00000000  00000000  00093b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0012b77c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001678  00000000  00000000  0012b7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007818  00000000  00000000  0012ce48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080120a4 	.word	0x080120a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	080120a4 	.word	0x080120a4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000288 	.word	0x20000288

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	20000288 	.word	0x20000288

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	20000288 	.word	0x20000288

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	20000288 	.word	0x20000288

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	20000288 	.word	0x20000288

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000288 	.word	0x20000288

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f005 f866 	bl	8006d00 <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	2000028c 	.word	0x2000028c

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f005 ff97 	bl	8007be0 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f005 ff91 	bl	8007be0 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f005 ff86 	bl	8007be0 <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f005 ff73 	bl	8007be0 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f005 ff6d 	bl	8007be0 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f005 ff61 	bl	8007be0 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f005 ff57 	bl	8007be0 <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f005 fe5c 	bl	8007be0 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f005 fe56 	bl	8007be0 <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f005 fe1f 	bl	8007be0 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	2000028c 	.word	0x2000028c

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f005 fdff 	bl	8007be0 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f005 fdf6 	bl	8007be0 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000028c 	.word	0x2000028c
 8002054:	0801512c 	.word	0x0801512c
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f005 fdb9 	bl	8007be0 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f009 fbd0 	bl	800b822 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f005 fda9 	bl	8007be0 <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000290 	.word	0x20000290
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002b9 	.word	0x200002b9

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f004 fd06 	bl	8006ce8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f005 fc3d 	bl	8007bb0 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f004 fcd1 	bl	8006ce8 <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f004 fccb 	bl	8006ce8 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f005 fbff 	bl	8007bb0 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f004 fc93 	bl	8006ce8 <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 fe40 	bl	800706c <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 fe2b 	bl	800704e <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f004 fdfa 	bl	8006ffe <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002b9 	.word	0x200002b9
 8002420:	200002bc 	.word	0x200002bc
 8002424:	200002b8 	.word	0x200002b8
 8002428:	20000290 	.word	0x20000290
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f004 fdea 	bl	800701a <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002b9 	.word	0x200002b9

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f005 fbb1 	bl	8007be0 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f004 fc33 	bl	8006d00 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002b9 	.word	0x200002b9
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_DMA_Init+0x6c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <MX_DMA_Init+0x6c>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_DMA_Init+0x6c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	200b      	movs	r0, #11
 800251c:	f004 fd53 	bl	8006fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002520:	200b      	movs	r0, #11
 8002522:	f004 fd6c 	bl	8006ffe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	200c      	movs	r0, #12
 800252c:	f004 fd4b 	bl	8006fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002530:	200c      	movs	r0, #12
 8002532:	f004 fd64 	bl	8006ffe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2010      	movs	r0, #16
 800253c:	f004 fd43 	bl	8006fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002540:	2010      	movs	r0, #16
 8002542:	f004 fd5c 	bl	8006ffe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2011      	movs	r0, #17
 800254c:	f004 fd3b 	bl	8006fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002550:	2011      	movs	r0, #17
 8002552:	f004 fd54 	bl	8006ffe <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <DS3231_Init+0x30>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f8ca 	bl	800270c <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 f88e 	bl	800269a <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800257e:	f000 f8e7 	bl	8002750 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002582:	f000 f8ad 	bl	80026e0 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f846 	bl	8002618 <DS3231_SetInterruptMode>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200002c0 	.word	0x200002c0

08002598 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	733b      	strb	r3, [r7, #12]
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <DS3231_SetRegByte+0x38>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2302      	movs	r3, #2
 80025c0:	21d0      	movs	r1, #208	; 0xd0
 80025c2:	f005 fc9d 	bl	8007f00 <HAL_I2C_Master_Transmit>
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002c0 	.word	0x200002c0

080025d4 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2301      	movs	r3, #1
 80025ec:	21d0      	movs	r1, #208	; 0xd0
 80025ee:	f005 fc87 	bl	8007f00 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	f107 020f 	add.w	r2, r7, #15
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	21d0      	movs	r1, #208	; 0xd0
 8002604:	f005 fd7a 	bl	80080fc <HAL_I2C_Master_Receive>
	return val;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200002c0 	.word	0x200002c0

08002618 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002622:	200e      	movs	r0, #14
 8002624:	f7ff ffd6 	bl	80025d4 <DS3231_GetRegByte>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	b25a      	sxtb	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b25b      	sxtb	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	200e      	movs	r0, #14
 800264c:	f7ff ffa4 	bl	8002598 <DS3231_SetRegByte>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002662:	200e      	movs	r0, #14
 8002664:	f7ff ffb6 	bl	80025d4 <DS3231_GetRegByte>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	b25b      	sxtb	r3, r3
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d102      	bne.n	8002682 <DS3231_EnableOscillator+0x2a>
 800267c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002680:	e000      	b.n	8002684 <DS3231_EnableOscillator+0x2c>
 8002682:	2200      	movs	r2, #0
 8002684:	4313      	orrs	r3, r2
 8002686:	b25b      	sxtb	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	200e      	movs	r0, #14
 800268e:	f7ff ff83 	bl	8002598 <DS3231_SetRegByte>
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80026a4:	200e      	movs	r0, #14
 80026a6:	f7ff ff95 	bl	80025d4 <DS3231_GetRegByte>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	200e      	movs	r0, #14
 80026ce:	f7ff ff63 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff ffa0 	bl	8002618 <DS3231_SetInterruptMode>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80026e6:	200f      	movs	r0, #15
 80026e8:	f7ff ff74 	bl	80025d4 <DS3231_GetRegByte>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	200f      	movs	r0, #15
 8002700:	f7ff ff4a 	bl	8002598 <DS3231_SetRegByte>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002716:	200e      	movs	r0, #14
 8002718:	f7ff ff5c 	bl	80025d4 <DS3231_GetRegByte>
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	b25a      	sxtb	r2, r3
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b25b      	sxtb	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b25b      	sxtb	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4619      	mov	r1, r3
 800273c:	200e      	movs	r0, #14
 800273e:	f7ff ff2b 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff ff68 	bl	8002618 <DS3231_SetInterruptMode>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002756:	200f      	movs	r0, #15
 8002758:	f7ff ff3c 	bl	80025d4 <DS3231_GetRegByte>
 800275c:	4603      	mov	r3, r0
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	200f      	movs	r0, #15
 8002770:	f7ff ff12 	bl	8002598 <DS3231_SetRegByte>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002780:	2002      	movs	r0, #2
 8002782:	f7ff ff27 	bl	80025d4 <DS3231_GetRegByte>
 8002786:	4603      	mov	r3, r0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f848 	bl	800281e <DS3231_DecodeBCD>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002798:	2001      	movs	r0, #1
 800279a:	f7ff ff1b 	bl	80025d4 <DS3231_GetRegByte>
 800279e:	4603      	mov	r3, r0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f83c 	bl	800281e <DS3231_DecodeBCD>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f846 	bl	8002850 <DS3231_EncodeBCD>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4619      	mov	r1, r3
 80027c8:	2002      	movs	r0, #2
 80027ca:	f7ff fee5 	bl	8002598 <DS3231_SetRegByte>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f834 	bl	8002850 <DS3231_EncodeBCD>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4619      	mov	r1, r3
 80027ec:	2001      	movs	r0, #1
 80027ee:	f7ff fed3 	bl	8002598 <DS3231_SetRegByte>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f822 	bl	8002850 <DS3231_EncodeBCD>
 800280c:	4603      	mov	r3, r0
 800280e:	4619      	mov	r1, r3
 8002810:	2000      	movs	r0, #0
 8002812:	f7ff fec1 	bl	8002598 <DS3231_SetRegByte>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	b2db      	uxtb	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	0092      	lsls	r2, r2, #2
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	b2da      	uxtb	r2, r3
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4413      	add	r3, r2
 8002842:	b2db      	uxtb	r3, r3
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 800285a:	79fa      	ldrb	r2, [r7, #7]
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <DS3231_EncodeBCD+0x40>)
 800285e:	fba3 1302 	umull	r1, r3, r3, r2
 8002862:	08d9      	lsrs	r1, r3, #3
 8002864:	460b      	mov	r3, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	b2da      	uxtb	r2, r3
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	4907      	ldr	r1, [pc, #28]	; (8002890 <DS3231_EncodeBCD+0x40>)
 8002874:	fba1 1303 	umull	r1, r3, r1, r3
 8002878:	08db      	lsrs	r3, r3, #3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4413      	add	r3, r2
 8002882:	b2db      	uxtb	r3, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	cccccccd 	.word	0xcccccccd

08002894 <eeprom_wait>:
#define WRITE_TIMEOUT   6

static uint32_t last_write;

void eeprom_wait(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 8002898:	bf00      	nop
 800289a:	f004 fa25 	bl	8006ce8 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <eeprom_wait+0x1c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d9f7      	bls.n	800289a <eeprom_wait+0x6>
    {
    }
}
 80028aa:	bf00      	nop
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000248 	.word	0x20000248

080028b4 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af04      	add	r7, sp, #16
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80028c0:	f7ff ffe8 	bl	8002894 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295
 80028d0:	9102      	str	r1, [sp, #8]
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	2301      	movs	r3, #1
 80028da:	21a0      	movs	r1, #160	; 0xa0
 80028dc:	4803      	ldr	r0, [pc, #12]	; (80028ec <eeprom_read+0x38>)
 80028de:	f005 ff2d 	bl	800873c <HAL_I2C_Mem_Read>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	200002e4 	.word	0x200002e4

080028f0 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 80028fc:	f7ff ffca 	bl	8002894 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	9102      	str	r1, [sp, #8]
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	21a0      	movs	r1, #160	; 0xa0
 8002918:	4807      	ldr	r0, [pc, #28]	; (8002938 <eeprom_write+0x48>)
 800291a:	f005 fe15 	bl	8008548 <HAL_I2C_Mem_Write>
 800291e:	4603      	mov	r3, r0
 8002920:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8002922:	f004 f9e1 	bl	8006ce8 <HAL_GetTick>
 8002926:	4603      	mov	r3, r0
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <eeprom_write+0x4c>)
 800292a:	6013      	str	r3, [r2, #0]

    return rc;
 800292c:	7dfb      	ldrb	r3, [r7, #23]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200002e4 	.word	0x200002e4
 800293c:	20000248 	.word	0x20000248

08002940 <EEPROM_RelayStateUpdate>:

void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	460a      	mov	r2, r1
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	4613      	mov	r3, r2
 800294e:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002950:	79bb      	ldrb	r3, [r7, #6]
 8002952:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d107      	bne.n	800296a <EEPROM_RelayStateUpdate+0x2a>
 800295a:	f107 030f 	add.w	r3, r7, #15
 800295e:	2201      	movs	r2, #1
 8002960:	4619      	mov	r1, r3
 8002962:	202e      	movs	r0, #46	; 0x2e
 8002964:	f7ff ffc4 	bl	80028f0 <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 8002968:	e01f      	b.n	80029aa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d107      	bne.n	8002980 <EEPROM_RelayStateUpdate+0x40>
 8002970:	f107 030f 	add.w	r3, r7, #15
 8002974:	2201      	movs	r2, #1
 8002976:	4619      	mov	r1, r3
 8002978:	202f      	movs	r0, #47	; 0x2f
 800297a:	f7ff ffb9 	bl	80028f0 <eeprom_write>
}
 800297e:	e014      	b.n	80029aa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d107      	bne.n	8002996 <EEPROM_RelayStateUpdate+0x56>
 8002986:	f107 030f 	add.w	r3, r7, #15
 800298a:	2201      	movs	r2, #1
 800298c:	4619      	mov	r1, r3
 800298e:	2030      	movs	r0, #48	; 0x30
 8002990:	f7ff ffae 	bl	80028f0 <eeprom_write>
}
 8002994:	e009      	b.n	80029aa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	2b04      	cmp	r3, #4
 800299a:	d106      	bne.n	80029aa <EEPROM_RelayStateUpdate+0x6a>
 800299c:	f107 030f 	add.w	r3, r7, #15
 80029a0:	2201      	movs	r2, #1
 80029a2:	4619      	mov	r1, r3
 80029a4:	2031      	movs	r0, #49	; 0x31
 80029a6:	f7ff ffa3 	bl	80028f0 <eeprom_write>
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80029ba:	f24c 6018 	movw	r0, #50712	; 0xc618
 80029be:	f7ff fa9b 	bl	8001ef8 <ILI9341_ClearDisplay>
	  ILI9341_DrawImage(40, 50, logo, 240, 140);
 80029c2:	238c      	movs	r3, #140	; 0x8c
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	23f0      	movs	r3, #240	; 0xf0
 80029c8:	4a71      	ldr	r2, [pc, #452]	; (8002b90 <system_init+0x1dc>)
 80029ca:	2132      	movs	r1, #50	; 0x32
 80029cc:	2028      	movs	r0, #40	; 0x28
 80029ce:	f7ff fa68 	bl	8001ea2 <ILI9341_DrawImage>
//	  GFX_Image(40, 50, logo, 240, 140); //usunieta wolniejsza wersja rysowania

	  EF_SetFont(&arialBlack_20ptFontInfo);
 80029d2:	4870      	ldr	r0, [pc, #448]	; (8002b94 <system_init+0x1e0>)
 80029d4:	f7fe fe8c 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 80029d8:	496f      	ldr	r1, [pc, #444]	; (8002b98 <system_init+0x1e4>)
 80029da:	4870      	ldr	r0, [pc, #448]	; (8002b9c <system_init+0x1e8>)
 80029dc:	f00b fd4c 	bl	800e478 <siprintf>
	  EF_PutString(Msg, 60, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 80029e0:	2300      	movs	r3, #0
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	2300      	movs	r3, #0
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	2300      	movs	r3, #0
 80029ea:	2214      	movs	r2, #20
 80029ec:	213c      	movs	r1, #60	; 0x3c
 80029ee:	486b      	ldr	r0, [pc, #428]	; (8002b9c <system_init+0x1e8>)
 80029f0:	f7ff f898 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  GFX_DrawRoundRectangle(60, 200, 20, 20, 5, ILI9341_RED);
 80029f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	2305      	movs	r3, #5
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2314      	movs	r3, #20
 8002a00:	2214      	movs	r2, #20
 8002a02:	21c8      	movs	r1, #200	; 0xc8
 8002a04:	203c      	movs	r0, #60	; 0x3c
 8002a06:	f7fe fda5 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 200, 20, 20, 5, ILI9341_RED);
 8002a0a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	2305      	movs	r3, #5
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2314      	movs	r3, #20
 8002a16:	2214      	movs	r2, #20
 8002a18:	21c8      	movs	r1, #200	; 0xc8
 8002a1a:	205a      	movs	r0, #90	; 0x5a
 8002a1c:	f7fe fd9a 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 200, 20, 20, 5, ILI9341_RED);
 8002a20:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	2305      	movs	r3, #5
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2314      	movs	r3, #20
 8002a2c:	2214      	movs	r2, #20
 8002a2e:	21c8      	movs	r1, #200	; 0xc8
 8002a30:	2078      	movs	r0, #120	; 0x78
 8002a32:	f7fe fd8f 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 200, 20, 20, 5, ILI9341_RED);
 8002a36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2305      	movs	r3, #5
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2314      	movs	r3, #20
 8002a42:	2214      	movs	r2, #20
 8002a44:	21c8      	movs	r1, #200	; 0xc8
 8002a46:	2096      	movs	r0, #150	; 0x96
 8002a48:	f7fe fd84 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 200, 20, 20, 5, ILI9341_RED);
 8002a4c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	2305      	movs	r3, #5
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2314      	movs	r3, #20
 8002a58:	2214      	movs	r2, #20
 8002a5a:	21c8      	movs	r1, #200	; 0xc8
 8002a5c:	20b4      	movs	r0, #180	; 0xb4
 8002a5e:	f7fe fd79 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 200, 20, 20, 5, ILI9341_RED);
 8002a62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	2305      	movs	r3, #5
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	2314      	movs	r3, #20
 8002a6e:	2214      	movs	r2, #20
 8002a70:	21c8      	movs	r1, #200	; 0xc8
 8002a72:	20d2      	movs	r0, #210	; 0xd2
 8002a74:	f7fe fd6e 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 200, 20, 20, 5, ILI9341_RED);
 8002a78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	2305      	movs	r3, #5
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2314      	movs	r3, #20
 8002a84:	2214      	movs	r2, #20
 8002a86:	21c8      	movs	r1, #200	; 0xc8
 8002a88:	20f0      	movs	r0, #240	; 0xf0
 8002a8a:	f7fe fd63 	bl	8001554 <GFX_DrawRoundRectangle>
	  	  HAL_Delay(200);
 8002a8e:	20c8      	movs	r0, #200	; 0xc8
 8002a90:	f004 f936 	bl	8006d00 <HAL_Delay>

	  GFX_DrawFillRoundRectangle(60, 200, 20, 20, 5, ILI9341_GREEN);
 8002a94:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	2305      	movs	r3, #5
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	2314      	movs	r3, #20
 8002aa0:	2214      	movs	r2, #20
 8002aa2:	21c8      	movs	r1, #200	; 0xc8
 8002aa4:	203c      	movs	r0, #60	; 0x3c
 8002aa6:	f7fe fdd2 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(100);
 8002aaa:	2064      	movs	r0, #100	; 0x64
 8002aac:	f004 f928 	bl	8006d00 <HAL_Delay>
	  	  while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8002ab0:	bf00      	nop
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	493a      	ldr	r1, [pc, #232]	; (8002ba0 <system_init+0x1ec>)
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f7ff fefc 	bl	80028b4 <eeprom_read>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f7      	bne.n	8002ab2 <system_init+0xfe>
	  GFX_DrawFillRoundRectangle(90, 200, 20, 20, 5, ILI9341_GREEN);
 8002ac2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	2305      	movs	r3, #5
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	2314      	movs	r3, #20
 8002ace:	2214      	movs	r2, #20
 8002ad0:	21c8      	movs	r1, #200	; 0xc8
 8002ad2:	205a      	movs	r0, #90	; 0x5a
 8002ad4:	f7fe fdbb 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_TEMP_1);	// ASK for current temperature
 8002ad8:	2003      	movs	r0, #3
 8002ada:	f003 f8f5 	bl	8005cc8 <SendComand>
	  	  HAL_Delay(100);
 8002ade:	2064      	movs	r0, #100	; 0x64
 8002ae0:	f004 f90e 	bl	8006d00 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(120, 200, 20, 20, 5, ILI9341_GREEN);
 8002ae4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	2305      	movs	r3, #5
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2314      	movs	r3, #20
 8002af0:	2214      	movs	r2, #20
 8002af2:	21c8      	movs	r1, #200	; 0xc8
 8002af4:	2078      	movs	r0, #120	; 0x78
 8002af6:	f7fe fdaa 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 8002afa:	2004      	movs	r0, #4
 8002afc:	f003 f8e4 	bl	8005cc8 <SendComand>
	  	  HAL_Delay(100);
 8002b00:	2064      	movs	r0, #100	; 0x64
 8002b02:	f004 f8fd 	bl	8006d00 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(150, 200, 20, 20, 5, ILI9341_GREEN);
 8002b06:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	2305      	movs	r3, #5
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	2314      	movs	r3, #20
 8002b12:	2214      	movs	r2, #20
 8002b14:	21c8      	movs	r1, #200	; 0xc8
 8002b16:	2096      	movs	r0, #150	; 0x96
 8002b18:	f7fe fd99 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8002b1c:	2015      	movs	r0, #21
 8002b1e:	f003 f8d3 	bl	8005cc8 <SendComand>
	  	  HAL_Delay(100);
 8002b22:	2064      	movs	r0, #100	; 0x64
 8002b24:	f004 f8ec 	bl	8006d00 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(180, 200, 20, 20, 5, ILI9341_GREEN);
 8002b28:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	2305      	movs	r3, #5
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2314      	movs	r3, #20
 8002b34:	2214      	movs	r2, #20
 8002b36:	21c8      	movs	r1, #200	; 0xc8
 8002b38:	20b4      	movs	r0, #180	; 0xb4
 8002b3a:	f7fe fd88 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8002b3e:	2016      	movs	r0, #22
 8002b40:	f003 f8c2 	bl	8005cc8 <SendComand>
	  	  HAL_Delay(100);
 8002b44:	2064      	movs	r0, #100	; 0x64
 8002b46:	f004 f8db 	bl	8006d00 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(210, 200, 20, 20, 5, ILI9341_GREEN);
 8002b4a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	2305      	movs	r3, #5
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2314      	movs	r3, #20
 8002b56:	2214      	movs	r2, #20
 8002b58:	21c8      	movs	r1, #200	; 0xc8
 8002b5a:	20d2      	movs	r0, #210	; 0xd2
 8002b5c:	f7fe fd77 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);
 8002b60:	201b      	movs	r0, #27
 8002b62:	f003 f8b1 	bl	8005cc8 <SendComand>
	  	  HAL_Delay(100);
 8002b66:	2064      	movs	r0, #100	; 0x64
 8002b68:	f004 f8ca 	bl	8006d00 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(240, 200, 20, 20, 5, ILI9341_GREEN);
 8002b6c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	2305      	movs	r3, #5
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2314      	movs	r3, #20
 8002b78:	2214      	movs	r2, #20
 8002b7a:	21c8      	movs	r1, #200	; 0xc8
 8002b7c:	20f0      	movs	r0, #240	; 0xf0
 8002b7e:	f7fe fd66 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(200);
 8002b82:	20c8      	movs	r0, #200	; 0xc8
 8002b84:	f004 f8bc 	bl	8006d00 <HAL_Delay>

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8002b88:	2301      	movs	r3, #1
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	0801519c 	.word	0x0801519c
 8002b94:	08015120 	.word	0x08015120
 8002b98:	080120c0 	.word	0x080120c0
 8002b9c:	200002c4 	.word	0x200002c4
 8002ba0:	20000032 	.word	0x20000032

08002ba4 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	ed87 0a05 	vstr	s0, [r7, #20]
 8002bae:	edc7 0a04 	vstr	s1, [r7, #16]
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	ed87 1a01 	vstr	s2, [r7, #4]
 8002bba:	72fb      	strb	r3, [r7, #11]
	  SendComand(UCMD_TEMP_1);
 8002bbc:	2003      	movs	r0, #3
 8002bbe:	f003 f883 	bl	8005cc8 <SendComand>
	  SendComand(UCMD_PRES_1);
 8002bc2:	2004      	movs	r0, #4
 8002bc4:	f003 f880 	bl	8005cc8 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8002bc8:	201b      	movs	r0, #27
 8002bca:	f003 f87d 	bl	8005cc8 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8002bce:	f7ff fdd5 	bl	800277c <DS3231_GetHour>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8002bd6:	f7ff fddd 	bl	8002794 <DS3231_GetMinute>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	77bb      	strb	r3, [r7, #30]

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002bde:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002be2:	f7ff f989 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002be6:	4881      	ldr	r0, [pc, #516]	; (8002dec <showCurrentParameters+0x248>)
 8002be8:	f7fe fd82 	bl	80016f0 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8002bec:	4980      	ldr	r1, [pc, #512]	; (8002df0 <showCurrentParameters+0x24c>)
 8002bee:	4881      	ldr	r0, [pc, #516]	; (8002df4 <showCurrentParameters+0x250>)
 8002bf0:	f00b fc42 	bl	800e478 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002bf4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002c02:	220a      	movs	r2, #10
 8002c04:	212f      	movs	r1, #47	; 0x2f
 8002c06:	487b      	ldr	r0, [pc, #492]	; (8002df4 <showCurrentParameters+0x250>)
 8002c08:	f7fe ff8c 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002c0c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2329      	movs	r3, #41	; 0x29
 8002c14:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c18:	2129      	movs	r1, #41	; 0x29
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f7fe fab8 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002c20:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	232b      	movs	r3, #43	; 0x2b
 8002c28:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c2c:	212b      	movs	r1, #43	; 0x2b
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fe faae 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8002c34:	7ffb      	ldrb	r3, [r7, #31]
 8002c36:	2b09      	cmp	r3, #9
 8002c38:	d809      	bhi.n	8002c4e <showCurrentParameters+0xaa>
 8002c3a:	7fbb      	ldrb	r3, [r7, #30]
 8002c3c:	2b09      	cmp	r3, #9
 8002c3e:	d806      	bhi.n	8002c4e <showCurrentParameters+0xaa>
 8002c40:	7ffa      	ldrb	r2, [r7, #31]
 8002c42:	7fbb      	ldrb	r3, [r7, #30]
 8002c44:	496c      	ldr	r1, [pc, #432]	; (8002df8 <showCurrentParameters+0x254>)
 8002c46:	486b      	ldr	r0, [pc, #428]	; (8002df4 <showCurrentParameters+0x250>)
 8002c48:	f00b fc16 	bl	800e478 <siprintf>
 8002c4c:	e019      	b.n	8002c82 <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 8002c4e:	7ffb      	ldrb	r3, [r7, #31]
 8002c50:	2b09      	cmp	r3, #9
 8002c52:	d806      	bhi.n	8002c62 <showCurrentParameters+0xbe>
 8002c54:	7ffa      	ldrb	r2, [r7, #31]
 8002c56:	7fbb      	ldrb	r3, [r7, #30]
 8002c58:	4968      	ldr	r1, [pc, #416]	; (8002dfc <showCurrentParameters+0x258>)
 8002c5a:	4866      	ldr	r0, [pc, #408]	; (8002df4 <showCurrentParameters+0x250>)
 8002c5c:	f00b fc0c 	bl	800e478 <siprintf>
 8002c60:	e00f      	b.n	8002c82 <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 8002c62:	7fbb      	ldrb	r3, [r7, #30]
 8002c64:	2b09      	cmp	r3, #9
 8002c66:	d806      	bhi.n	8002c76 <showCurrentParameters+0xd2>
 8002c68:	7ffa      	ldrb	r2, [r7, #31]
 8002c6a:	7fbb      	ldrb	r3, [r7, #30]
 8002c6c:	4964      	ldr	r1, [pc, #400]	; (8002e00 <showCurrentParameters+0x25c>)
 8002c6e:	4861      	ldr	r0, [pc, #388]	; (8002df4 <showCurrentParameters+0x250>)
 8002c70:	f00b fc02 	bl	800e478 <siprintf>
 8002c74:	e005      	b.n	8002c82 <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 8002c76:	7ffa      	ldrb	r2, [r7, #31]
 8002c78:	7fbb      	ldrb	r3, [r7, #30]
 8002c7a:	4962      	ldr	r1, [pc, #392]	; (8002e04 <showCurrentParameters+0x260>)
 8002c7c:	485d      	ldr	r0, [pc, #372]	; (8002df4 <showCurrentParameters+0x250>)
 8002c7e:	f00b fbfb 	bl	800e478 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002c82:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	2232      	movs	r2, #50	; 0x32
 8002c90:	2114      	movs	r1, #20
 8002c92:	4858      	ldr	r0, [pc, #352]	; (8002df4 <showCurrentParameters+0x250>)
 8002c94:	f7fe ff46 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 8002c98:	4b5b      	ldr	r3, [pc, #364]	; (8002e08 <showCurrentParameters+0x264>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd fc6b 	bl	8000578 <__aeabi_f2d>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4959      	ldr	r1, [pc, #356]	; (8002e0c <showCurrentParameters+0x268>)
 8002ca8:	4852      	ldr	r0, [pc, #328]	; (8002df4 <showCurrentParameters+0x250>)
 8002caa:	f00b fbe5 	bl	800e478 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002cae:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	2250      	movs	r2, #80	; 0x50
 8002cbc:	2114      	movs	r1, #20
 8002cbe:	484d      	ldr	r0, [pc, #308]	; (8002df4 <showCurrentParameters+0x250>)
 8002cc0:	f7fe ff30 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8002cc4:	4b52      	ldr	r3, [pc, #328]	; (8002e10 <showCurrentParameters+0x26c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fc55 	bl	8000578 <__aeabi_f2d>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4950      	ldr	r1, [pc, #320]	; (8002e14 <showCurrentParameters+0x270>)
 8002cd4:	4847      	ldr	r0, [pc, #284]	; (8002df4 <showCurrentParameters+0x250>)
 8002cd6:	f00b fbcf 	bl	800e478 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002cda:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	226e      	movs	r2, #110	; 0x6e
 8002ce8:	2114      	movs	r1, #20
 8002cea:	4842      	ldr	r0, [pc, #264]	; (8002df4 <showCurrentParameters+0x250>)
 8002cec:	f7fe ff1a 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: %d", CWaterLvl);
 8002cf0:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <showCurrentParameters+0x274>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4949      	ldr	r1, [pc, #292]	; (8002e1c <showCurrentParameters+0x278>)
 8002cf8:	483e      	ldr	r0, [pc, #248]	; (8002df4 <showCurrentParameters+0x250>)
 8002cfa:	f00b fbbd 	bl	800e478 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002cfe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	2300      	movs	r3, #0
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	228c      	movs	r2, #140	; 0x8c
 8002d0c:	2114      	movs	r1, #20
 8002d0e:	4839      	ldr	r0, [pc, #228]	; (8002df4 <showCurrentParameters+0x250>)
 8002d10:	f7fe ff08 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8002d14:	4b42      	ldr	r3, [pc, #264]	; (8002e20 <showCurrentParameters+0x27c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fc2d 	bl	8000578 <__aeabi_f2d>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4940      	ldr	r1, [pc, #256]	; (8002e24 <showCurrentParameters+0x280>)
 8002d24:	4833      	ldr	r0, [pc, #204]	; (8002df4 <showCurrentParameters+0x250>)
 8002d26:	f00b fba7 	bl	800e478 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002d2a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	2300      	movs	r3, #0
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	2300      	movs	r3, #0
 8002d36:	22aa      	movs	r2, #170	; 0xaa
 8002d38:	2114      	movs	r1, #20
 8002d3a:	482e      	ldr	r0, [pc, #184]	; (8002df4 <showCurrentParameters+0x250>)
 8002d3c:	f7fe fef2 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8002d40:	4839      	ldr	r0, [pc, #228]	; (8002e28 <showCurrentParameters+0x284>)
 8002d42:	f7fe fcd5 	bl	80016f0 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002d46:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	2305      	movs	r3, #5
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	2314      	movs	r3, #20
 8002d52:	225f      	movs	r2, #95	; 0x5f
 8002d54:	21d8      	movs	r1, #216	; 0xd8
 8002d56:	20dc      	movs	r0, #220	; 0xdc
 8002d58:	f7fe fc79 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 8002d5c:	4933      	ldr	r1, [pc, #204]	; (8002e2c <showCurrentParameters+0x288>)
 8002d5e:	4825      	ldr	r0, [pc, #148]	; (8002df4 <showCurrentParameters+0x250>)
 8002d60:	f00b fb8a 	bl	800e478 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002d64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	22da      	movs	r2, #218	; 0xda
 8002d72:	21df      	movs	r1, #223	; 0xdf
 8002d74:	481f      	ldr	r0, [pc, #124]	; (8002df4 <showCurrentParameters+0x250>)
 8002d76:	f7fe fed5 	bl	8001b24 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002d7a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	2305      	movs	r3, #5
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	2314      	movs	r3, #20
 8002d86:	2264      	movs	r2, #100	; 0x64
 8002d88:	21d8      	movs	r1, #216	; 0xd8
 8002d8a:	200a      	movs	r0, #10
 8002d8c:	f7fe fc5f 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 8002d90:	4927      	ldr	r1, [pc, #156]	; (8002e30 <showCurrentParameters+0x28c>)
 8002d92:	4818      	ldr	r0, [pc, #96]	; (8002df4 <showCurrentParameters+0x250>)
 8002d94:	f00b fb70 	bl	800e478 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002d98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	2300      	movs	r3, #0
 8002da4:	22da      	movs	r2, #218	; 0xda
 8002da6:	2114      	movs	r1, #20
 8002da8:	4812      	ldr	r0, [pc, #72]	; (8002df4 <showCurrentParameters+0x250>)
 8002daa:	f7fe febb 	bl	8001b24 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8002dae:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	2305      	movs	r3, #5
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	2314      	movs	r3, #20
 8002dba:	225a      	movs	r2, #90	; 0x5a
 8002dbc:	21d8      	movs	r1, #216	; 0xd8
 8002dbe:	2078      	movs	r0, #120	; 0x78
 8002dc0:	f7fe fc45 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8002dc4:	491b      	ldr	r1, [pc, #108]	; (8002e34 <showCurrentParameters+0x290>)
 8002dc6:	480b      	ldr	r0, [pc, #44]	; (8002df4 <showCurrentParameters+0x250>)
 8002dc8:	f00b fb56 	bl	800e478 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002dcc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	22da      	movs	r2, #218	; 0xda
 8002dda:	2184      	movs	r1, #132	; 0x84
 8002ddc:	4805      	ldr	r0, [pc, #20]	; (8002df4 <showCurrentParameters+0x250>)
 8002dde:	f7fe fea1 	bl	8001b24 <EF_PutString>
}
 8002de2:	bf00      	nop
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	08015120 	.word	0x08015120
 8002df0:	080120d4 	.word	0x080120d4
 8002df4:	200002c4 	.word	0x200002c4
 8002df8:	080120e4 	.word	0x080120e4
 8002dfc:	080120f4 	.word	0x080120f4
 8002e00:	08012104 	.word	0x08012104
 8002e04:	08012114 	.word	0x08012114
 8002e08:	2000025c 	.word	0x2000025c
 8002e0c:	08012124 	.word	0x08012124
 8002e10:	20000268 	.word	0x20000268
 8002e14:	08012138 	.word	0x08012138
 8002e18:	2000026c 	.word	0x2000026c
 8002e1c:	0801214c 	.word	0x0801214c
 8002e20:	20000264 	.word	0x20000264
 8002e24:	0801215c 	.word	0x0801215c
 8002e28:	080131a8 	.word	0x080131a8
 8002e2c:	08012174 	.word	0x08012174
 8002e30:	08012180 	.word	0x08012180
 8002e34:	0801218c 	.word	0x0801218c

08002e38 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8002e3e:	2015      	movs	r0, #21
 8002e40:	f002 ff42 	bl	8005cc8 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002e44:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002e48:	f7ff f856 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002e4c:	485c      	ldr	r0, [pc, #368]	; (8002fc0 <showControlPanel+0x188>)
 8002e4e:	f7fe fc4f 	bl	80016f0 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 8002e52:	495c      	ldr	r1, [pc, #368]	; (8002fc4 <showControlPanel+0x18c>)
 8002e54:	485c      	ldr	r0, [pc, #368]	; (8002fc8 <showControlPanel+0x190>)
 8002e56:	f00b fb0f 	bl	800e478 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002e5a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	2300      	movs	r3, #0
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	231f      	movs	r3, #31
 8002e66:	220a      	movs	r2, #10
 8002e68:	2123      	movs	r1, #35	; 0x23
 8002e6a:	4857      	ldr	r0, [pc, #348]	; (8002fc8 <showControlPanel+0x190>)
 8002e6c:	f7fe fe5a 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002e70:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	2329      	movs	r3, #41	; 0x29
 8002e78:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e7c:	2129      	movs	r1, #41	; 0x29
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7fe f986 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002e84:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	232b      	movs	r3, #43	; 0x2b
 8002e8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e90:	212b      	movs	r1, #43	; 0x2b
 8002e92:	2000      	movs	r0, #0
 8002e94:	f7fe f97c 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 8002e98:	494c      	ldr	r1, [pc, #304]	; (8002fcc <showControlPanel+0x194>)
 8002e9a:	484b      	ldr	r0, [pc, #300]	; (8002fc8 <showControlPanel+0x190>)
 8002e9c:	f00b faec 	bl	800e478 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002ea0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	223c      	movs	r2, #60	; 0x3c
 8002eae:	2114      	movs	r1, #20
 8002eb0:	4845      	ldr	r0, [pc, #276]	; (8002fc8 <showControlPanel+0x190>)
 8002eb2:	f7fe fe37 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 8002eb6:	4946      	ldr	r1, [pc, #280]	; (8002fd0 <showControlPanel+0x198>)
 8002eb8:	4843      	ldr	r0, [pc, #268]	; (8002fc8 <showControlPanel+0x190>)
 8002eba:	f00b fadd 	bl	800e478 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002ebe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	225a      	movs	r2, #90	; 0x5a
 8002ecc:	2114      	movs	r1, #20
 8002ece:	483e      	ldr	r0, [pc, #248]	; (8002fc8 <showControlPanel+0x190>)
 8002ed0:	f7fe fe28 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8002ed4:	493f      	ldr	r1, [pc, #252]	; (8002fd4 <showControlPanel+0x19c>)
 8002ed6:	483c      	ldr	r0, [pc, #240]	; (8002fc8 <showControlPanel+0x190>)
 8002ed8:	f00b face 	bl	800e478 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002edc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2278      	movs	r2, #120	; 0x78
 8002eea:	2114      	movs	r1, #20
 8002eec:	4836      	ldr	r0, [pc, #216]	; (8002fc8 <showControlPanel+0x190>)
 8002eee:	f7fe fe19 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8002ef2:	4939      	ldr	r1, [pc, #228]	; (8002fd8 <showControlPanel+0x1a0>)
 8002ef4:	4834      	ldr	r0, [pc, #208]	; (8002fc8 <showControlPanel+0x190>)
 8002ef6:	f00b fabf 	bl	800e478 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002efa:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	2300      	movs	r3, #0
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2300      	movs	r3, #0
 8002f06:	2296      	movs	r2, #150	; 0x96
 8002f08:	2114      	movs	r1, #20
 8002f0a:	482f      	ldr	r0, [pc, #188]	; (8002fc8 <showControlPanel+0x190>)
 8002f0c:	f7fe fe0a 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8002f10:	4832      	ldr	r0, [pc, #200]	; (8002fdc <showControlPanel+0x1a4>)
 8002f12:	f7fe fbed 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002f16:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002f1a:	9301      	str	r3, [sp, #4]
 8002f1c:	2305      	movs	r3, #5
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2314      	movs	r3, #20
 8002f22:	225f      	movs	r2, #95	; 0x5f
 8002f24:	21d8      	movs	r1, #216	; 0xd8
 8002f26:	20dc      	movs	r0, #220	; 0xdc
 8002f28:	f7fe fb91 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8002f2c:	492c      	ldr	r1, [pc, #176]	; (8002fe0 <showControlPanel+0x1a8>)
 8002f2e:	4826      	ldr	r0, [pc, #152]	; (8002fc8 <showControlPanel+0x190>)
 8002f30:	f00b faa2 	bl	800e478 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002f34:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	22da      	movs	r2, #218	; 0xda
 8002f42:	21df      	movs	r1, #223	; 0xdf
 8002f44:	4820      	ldr	r0, [pc, #128]	; (8002fc8 <showControlPanel+0x190>)
 8002f46:	f7fe fded 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002f4a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	2305      	movs	r3, #5
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2314      	movs	r3, #20
 8002f56:	2264      	movs	r2, #100	; 0x64
 8002f58:	21d8      	movs	r1, #216	; 0xd8
 8002f5a:	200a      	movs	r0, #10
 8002f5c:	f7fe fb77 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 8002f60:	4920      	ldr	r1, [pc, #128]	; (8002fe4 <showControlPanel+0x1ac>)
 8002f62:	4819      	ldr	r0, [pc, #100]	; (8002fc8 <showControlPanel+0x190>)
 8002f64:	f00b fa88 	bl	800e478 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002f68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2300      	movs	r3, #0
 8002f74:	22da      	movs	r2, #218	; 0xda
 8002f76:	2114      	movs	r1, #20
 8002f78:	4813      	ldr	r0, [pc, #76]	; (8002fc8 <showControlPanel+0x190>)
 8002f7a:	f7fe fdd3 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8002f7e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	2305      	movs	r3, #5
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	2314      	movs	r3, #20
 8002f8a:	225a      	movs	r2, #90	; 0x5a
 8002f8c:	21d8      	movs	r1, #216	; 0xd8
 8002f8e:	2078      	movs	r0, #120	; 0x78
 8002f90:	f7fe fb5d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 8002f94:	4914      	ldr	r1, [pc, #80]	; (8002fe8 <showControlPanel+0x1b0>)
 8002f96:	480c      	ldr	r0, [pc, #48]	; (8002fc8 <showControlPanel+0x190>)
 8002f98:	f00b fa6e 	bl	800e478 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002f9c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	22da      	movs	r2, #218	; 0xda
 8002faa:	217e      	movs	r1, #126	; 0x7e
 8002fac:	4806      	ldr	r0, [pc, #24]	; (8002fc8 <showControlPanel+0x190>)
 8002fae:	f7fe fdb9 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002fb2:	4803      	ldr	r0, [pc, #12]	; (8002fc0 <showControlPanel+0x188>)
 8002fb4:	f7fe fb9c 	bl	80016f0 <EF_SetFont>


}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	08015120 	.word	0x08015120
 8002fc4:	08012194 	.word	0x08012194
 8002fc8:	200002c4 	.word	0x200002c4
 8002fcc:	080121a8 	.word	0x080121a8
 8002fd0:	080121bc 	.word	0x080121bc
 8002fd4:	080121d0 	.word	0x080121d0
 8002fd8:	080121e4 	.word	0x080121e4
 8002fdc:	080131a8 	.word	0x080131a8
 8002fe0:	080121f8 	.word	0x080121f8
 8002fe4:	08012204 	.word	0x08012204
 8002fe8:	0801220c 	.word	0x0801220c

08002fec <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8002ff2:	2016      	movs	r0, #22
 8002ff4:	f002 fe68 	bl	8005cc8 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002ff8:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002ffc:	f7fe ff7c 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003000:	485b      	ldr	r0, [pc, #364]	; (8003170 <showLightsControlPanel+0x184>)
 8003002:	f7fe fb75 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8003006:	495b      	ldr	r1, [pc, #364]	; (8003174 <showLightsControlPanel+0x188>)
 8003008:	485b      	ldr	r0, [pc, #364]	; (8003178 <showLightsControlPanel+0x18c>)
 800300a:	f00b fa35 	bl	800e478 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800300e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	2300      	movs	r3, #0
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800301c:	220a      	movs	r2, #10
 800301e:	2146      	movs	r1, #70	; 0x46
 8003020:	4855      	ldr	r0, [pc, #340]	; (8003178 <showLightsControlPanel+0x18c>)
 8003022:	f7fe fd7f 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003026:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	2329      	movs	r3, #41	; 0x29
 800302e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003032:	2129      	movs	r1, #41	; 0x29
 8003034:	2000      	movs	r0, #0
 8003036:	f7fe f8ab 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800303a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	232b      	movs	r3, #43	; 0x2b
 8003042:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003046:	212b      	movs	r1, #43	; 0x2b
 8003048:	2000      	movs	r0, #0
 800304a:	f7fe f8a1 	bl	8001190 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 800304e:	494b      	ldr	r1, [pc, #300]	; (800317c <showLightsControlPanel+0x190>)
 8003050:	4849      	ldr	r0, [pc, #292]	; (8003178 <showLightsControlPanel+0x18c>)
 8003052:	f00b fa11 	bl	800e478 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003056:	f24c 6318 	movw	r3, #50712	; 0xc618
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	2300      	movs	r3, #0
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	2300      	movs	r3, #0
 8003062:	223c      	movs	r2, #60	; 0x3c
 8003064:	2114      	movs	r1, #20
 8003066:	4844      	ldr	r0, [pc, #272]	; (8003178 <showLightsControlPanel+0x18c>)
 8003068:	f7fe fd5c 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 800306c:	4944      	ldr	r1, [pc, #272]	; (8003180 <showLightsControlPanel+0x194>)
 800306e:	4842      	ldr	r0, [pc, #264]	; (8003178 <showLightsControlPanel+0x18c>)
 8003070:	f00b fa02 	bl	800e478 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003074:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	2301      	movs	r3, #1
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	2300      	movs	r3, #0
 8003080:	225a      	movs	r2, #90	; 0x5a
 8003082:	2114      	movs	r1, #20
 8003084:	483c      	ldr	r0, [pc, #240]	; (8003178 <showLightsControlPanel+0x18c>)
 8003086:	f7fe fd4d 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 800308a:	493e      	ldr	r1, [pc, #248]	; (8003184 <showLightsControlPanel+0x198>)
 800308c:	483a      	ldr	r0, [pc, #232]	; (8003178 <showLightsControlPanel+0x18c>)
 800308e:	f00b f9f3 	bl	800e478 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003092:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	2300      	movs	r3, #0
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2300      	movs	r3, #0
 800309e:	2278      	movs	r2, #120	; 0x78
 80030a0:	2114      	movs	r1, #20
 80030a2:	4835      	ldr	r0, [pc, #212]	; (8003178 <showLightsControlPanel+0x18c>)
 80030a4:	f7fe fd3e 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 80030a8:	4937      	ldr	r1, [pc, #220]	; (8003188 <showLightsControlPanel+0x19c>)
 80030aa:	4833      	ldr	r0, [pc, #204]	; (8003178 <showLightsControlPanel+0x18c>)
 80030ac:	f00b f9e4 	bl	800e478 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80030b0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80030b4:	9301      	str	r3, [sp, #4]
 80030b6:	2300      	movs	r3, #0
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	2300      	movs	r3, #0
 80030bc:	2296      	movs	r2, #150	; 0x96
 80030be:	2114      	movs	r1, #20
 80030c0:	482d      	ldr	r0, [pc, #180]	; (8003178 <showLightsControlPanel+0x18c>)
 80030c2:	f7fe fd2f 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 80030c6:	4831      	ldr	r0, [pc, #196]	; (800318c <showLightsControlPanel+0x1a0>)
 80030c8:	f7fe fb12 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80030cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	2305      	movs	r3, #5
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2314      	movs	r3, #20
 80030d8:	225f      	movs	r2, #95	; 0x5f
 80030da:	21d8      	movs	r1, #216	; 0xd8
 80030dc:	20dc      	movs	r0, #220	; 0xdc
 80030de:	f7fe fab6 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 80030e2:	492b      	ldr	r1, [pc, #172]	; (8003190 <showLightsControlPanel+0x1a4>)
 80030e4:	4824      	ldr	r0, [pc, #144]	; (8003178 <showLightsControlPanel+0x18c>)
 80030e6:	f00b f9c7 	bl	800e478 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80030ea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	2300      	movs	r3, #0
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2300      	movs	r3, #0
 80030f6:	22da      	movs	r2, #218	; 0xda
 80030f8:	21e6      	movs	r1, #230	; 0xe6
 80030fa:	481f      	ldr	r0, [pc, #124]	; (8003178 <showLightsControlPanel+0x18c>)
 80030fc:	f7fe fd12 	bl	8001b24 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003100:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	2305      	movs	r3, #5
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2314      	movs	r3, #20
 800310c:	225a      	movs	r2, #90	; 0x5a
 800310e:	21d8      	movs	r1, #216	; 0xd8
 8003110:	2078      	movs	r0, #120	; 0x78
 8003112:	f7fe fa9c 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8003116:	491f      	ldr	r1, [pc, #124]	; (8003194 <showLightsControlPanel+0x1a8>)
 8003118:	4817      	ldr	r0, [pc, #92]	; (8003178 <showLightsControlPanel+0x18c>)
 800311a:	f00b f9ad 	bl	800e478 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800311e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	2300      	movs	r3, #0
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2300      	movs	r3, #0
 800312a:	22da      	movs	r2, #218	; 0xda
 800312c:	217e      	movs	r1, #126	; 0x7e
 800312e:	4812      	ldr	r0, [pc, #72]	; (8003178 <showLightsControlPanel+0x18c>)
 8003130:	f7fe fcf8 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003134:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	2305      	movs	r3, #5
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2314      	movs	r3, #20
 8003140:	2264      	movs	r2, #100	; 0x64
 8003142:	21d8      	movs	r1, #216	; 0xd8
 8003144:	200a      	movs	r0, #10
 8003146:	f7fe fa82 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 800314a:	4913      	ldr	r1, [pc, #76]	; (8003198 <showLightsControlPanel+0x1ac>)
 800314c:	480a      	ldr	r0, [pc, #40]	; (8003178 <showLightsControlPanel+0x18c>)
 800314e:	f00b f993 	bl	800e478 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003152:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003156:	9301      	str	r3, [sp, #4]
 8003158:	2300      	movs	r3, #0
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	2300      	movs	r3, #0
 800315e:	22da      	movs	r2, #218	; 0xda
 8003160:	210d      	movs	r1, #13
 8003162:	4805      	ldr	r0, [pc, #20]	; (8003178 <showLightsControlPanel+0x18c>)
 8003164:	f7fe fcde 	bl	8001b24 <EF_PutString>


}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	08015120 	.word	0x08015120
 8003174:	08012218 	.word	0x08012218
 8003178:	200002c4 	.word	0x200002c4
 800317c:	08012228 	.word	0x08012228
 8003180:	08012238 	.word	0x08012238
 8003184:	08012248 	.word	0x08012248
 8003188:	08012258 	.word	0x08012258
 800318c:	080131a8 	.word	0x080131a8
 8003190:	08012268 	.word	0x08012268
 8003194:	08012270 	.word	0x08012270
 8003198:	0801227c 	.word	0x0801227c

0800319c <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80031a2:	f24c 6018 	movw	r0, #50712	; 0xc618
 80031a6:	f7fe fea7 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80031aa:	487d      	ldr	r0, [pc, #500]	; (80033a0 <showClockSetPanel+0x204>)
 80031ac:	f7fe faa0 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 80031b0:	f7ff fae4 	bl	800277c <DS3231_GetHour>
 80031b4:	4603      	mov	r3, r0
 80031b6:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 80031b8:	f7ff faec 	bl	8002794 <DS3231_GetMinute>
 80031bc:	4603      	mov	r3, r0
 80031be:	71bb      	strb	r3, [r7, #6]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 80031c0:	4978      	ldr	r1, [pc, #480]	; (80033a4 <showClockSetPanel+0x208>)
 80031c2:	4879      	ldr	r0, [pc, #484]	; (80033a8 <showClockSetPanel+0x20c>)
 80031c4:	f00b f958 	bl	800e478 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80031c8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	2300      	movs	r3, #0
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80031d6:	220a      	movs	r2, #10
 80031d8:	212f      	movs	r1, #47	; 0x2f
 80031da:	4873      	ldr	r0, [pc, #460]	; (80033a8 <showClockSetPanel+0x20c>)
 80031dc:	f7fe fca2 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80031e0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	2329      	movs	r3, #41	; 0x29
 80031e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031ec:	2129      	movs	r1, #41	; 0x29
 80031ee:	2000      	movs	r0, #0
 80031f0:	f7fd ffce 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80031f4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	232b      	movs	r3, #43	; 0x2b
 80031fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003200:	212b      	movs	r1, #43	; 0x2b
 8003202:	2000      	movs	r0, #0
 8003204:	f7fd ffc4 	bl	8001190 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	461a      	mov	r2, r3
 800320c:	4967      	ldr	r1, [pc, #412]	; (80033ac <showClockSetPanel+0x210>)
 800320e:	4866      	ldr	r0, [pc, #408]	; (80033a8 <showClockSetPanel+0x20c>)
 8003210:	f00b f932 	bl	800e478 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003214:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	2300      	movs	r3, #0
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	2300      	movs	r3, #0
 8003220:	2246      	movs	r2, #70	; 0x46
 8003222:	2114      	movs	r1, #20
 8003224:	4860      	ldr	r0, [pc, #384]	; (80033a8 <showClockSetPanel+0x20c>)
 8003226:	f7fe fc7d 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 800322a:	79bb      	ldrb	r3, [r7, #6]
 800322c:	461a      	mov	r2, r3
 800322e:	4960      	ldr	r1, [pc, #384]	; (80033b0 <showClockSetPanel+0x214>)
 8003230:	485d      	ldr	r0, [pc, #372]	; (80033a8 <showClockSetPanel+0x20c>)
 8003232:	f00b f921 	bl	800e478 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003236:	f24c 6318 	movw	r3, #50712	; 0xc618
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	2301      	movs	r3, #1
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2300      	movs	r3, #0
 8003242:	226e      	movs	r2, #110	; 0x6e
 8003244:	2114      	movs	r1, #20
 8003246:	4858      	ldr	r0, [pc, #352]	; (80033a8 <showClockSetPanel+0x20c>)
 8003248:	f7fe fc6c 	bl	8001b24 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 800324c:	4859      	ldr	r0, [pc, #356]	; (80033b4 <showClockSetPanel+0x218>)
 800324e:	f7fe fa4f 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003252:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	2305      	movs	r3, #5
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	2315      	movs	r3, #21
 800325e:	221e      	movs	r2, #30
 8003260:	214b      	movs	r1, #75	; 0x4b
 8003262:	20f0      	movs	r0, #240	; 0xf0
 8003264:	f7fe f9f3 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003268:	4953      	ldr	r1, [pc, #332]	; (80033b8 <showClockSetPanel+0x21c>)
 800326a:	484f      	ldr	r0, [pc, #316]	; (80033a8 <showClockSetPanel+0x20c>)
 800326c:	f00b f904 	bl	800e478 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003270:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	2300      	movs	r3, #0
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	2300      	movs	r3, #0
 800327c:	224d      	movs	r2, #77	; 0x4d
 800327e:	21f3      	movs	r1, #243	; 0xf3
 8003280:	4849      	ldr	r0, [pc, #292]	; (80033a8 <showClockSetPanel+0x20c>)
 8003282:	f7fe fc4f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003286:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	2305      	movs	r3, #5
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2315      	movs	r3, #21
 8003292:	221e      	movs	r2, #30
 8003294:	214b      	movs	r1, #75	; 0x4b
 8003296:	f44f 708c 	mov.w	r0, #280	; 0x118
 800329a:	f7fe f9d8 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 800329e:	4947      	ldr	r1, [pc, #284]	; (80033bc <showClockSetPanel+0x220>)
 80032a0:	4841      	ldr	r0, [pc, #260]	; (80033a8 <showClockSetPanel+0x20c>)
 80032a2:	f00b f8e9 	bl	800e478 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80032a6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	2300      	movs	r3, #0
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2300      	movs	r3, #0
 80032b2:	224d      	movs	r2, #77	; 0x4d
 80032b4:	f240 111d 	movw	r1, #285	; 0x11d
 80032b8:	483b      	ldr	r0, [pc, #236]	; (80033a8 <showClockSetPanel+0x20c>)
 80032ba:	f7fe fc33 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80032be:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80032c2:	9301      	str	r3, [sp, #4]
 80032c4:	2305      	movs	r3, #5
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2315      	movs	r3, #21
 80032ca:	221e      	movs	r2, #30
 80032cc:	2173      	movs	r1, #115	; 0x73
 80032ce:	20f0      	movs	r0, #240	; 0xf0
 80032d0:	f7fe f9bd 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80032d4:	4938      	ldr	r1, [pc, #224]	; (80033b8 <showClockSetPanel+0x21c>)
 80032d6:	4834      	ldr	r0, [pc, #208]	; (80033a8 <showClockSetPanel+0x20c>)
 80032d8:	f00b f8ce 	bl	800e478 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80032dc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	2300      	movs	r3, #0
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	2300      	movs	r3, #0
 80032e8:	2275      	movs	r2, #117	; 0x75
 80032ea:	21f5      	movs	r1, #245	; 0xf5
 80032ec:	482e      	ldr	r0, [pc, #184]	; (80033a8 <showClockSetPanel+0x20c>)
 80032ee:	f7fe fc19 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80032f2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	2305      	movs	r3, #5
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	2315      	movs	r3, #21
 80032fe:	221e      	movs	r2, #30
 8003300:	2173      	movs	r1, #115	; 0x73
 8003302:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003306:	f7fe f9a2 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 800330a:	492d      	ldr	r1, [pc, #180]	; (80033c0 <showClockSetPanel+0x224>)
 800330c:	4826      	ldr	r0, [pc, #152]	; (80033a8 <showClockSetPanel+0x20c>)
 800330e:	f00b f8b3 	bl	800e478 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003312:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	2300      	movs	r3, #0
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2300      	movs	r3, #0
 800331e:	2275      	movs	r2, #117	; 0x75
 8003320:	f240 111b 	movw	r1, #283	; 0x11b
 8003324:	4820      	ldr	r0, [pc, #128]	; (80033a8 <showClockSetPanel+0x20c>)
 8003326:	f7fe fbfd 	bl	8001b24 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 800332a:	4822      	ldr	r0, [pc, #136]	; (80033b4 <showClockSetPanel+0x218>)
 800332c:	f7fe f9e0 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003330:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003334:	9301      	str	r3, [sp, #4]
 8003336:	2305      	movs	r3, #5
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	2314      	movs	r3, #20
 800333c:	225f      	movs	r2, #95	; 0x5f
 800333e:	21d8      	movs	r1, #216	; 0xd8
 8003340:	20dc      	movs	r0, #220	; 0xdc
 8003342:	f7fe f984 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003346:	491f      	ldr	r1, [pc, #124]	; (80033c4 <showClockSetPanel+0x228>)
 8003348:	4817      	ldr	r0, [pc, #92]	; (80033a8 <showClockSetPanel+0x20c>)
 800334a:	f00b f895 	bl	800e478 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800334e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	2300      	movs	r3, #0
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2300      	movs	r3, #0
 800335a:	22da      	movs	r2, #218	; 0xda
 800335c:	21e6      	movs	r1, #230	; 0xe6
 800335e:	4812      	ldr	r0, [pc, #72]	; (80033a8 <showClockSetPanel+0x20c>)
 8003360:	f7fe fbe0 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003364:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	2305      	movs	r3, #5
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	2314      	movs	r3, #20
 8003370:	2264      	movs	r2, #100	; 0x64
 8003372:	21d8      	movs	r1, #216	; 0xd8
 8003374:	200a      	movs	r0, #10
 8003376:	f7fe f96a 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 800337a:	4913      	ldr	r1, [pc, #76]	; (80033c8 <showClockSetPanel+0x22c>)
 800337c:	480a      	ldr	r0, [pc, #40]	; (80033a8 <showClockSetPanel+0x20c>)
 800337e:	f00b f87b 	bl	800e478 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003382:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	2300      	movs	r3, #0
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2300      	movs	r3, #0
 800338e:	22da      	movs	r2, #218	; 0xda
 8003390:	210d      	movs	r1, #13
 8003392:	4805      	ldr	r0, [pc, #20]	; (80033a8 <showClockSetPanel+0x20c>)
 8003394:	f7fe fbc6 	bl	8001b24 <EF_PutString>
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	08015120 	.word	0x08015120
 80033a4:	08012288 	.word	0x08012288
 80033a8:	200002c4 	.word	0x200002c4
 80033ac:	08012298 	.word	0x08012298
 80033b0:	080122a4 	.word	0x080122a4
 80033b4:	080131a8 	.word	0x080131a8
 80033b8:	080122b4 	.word	0x080122b4
 80033bc:	080122b8 	.word	0x080122b8
 80033c0:	080122bc 	.word	0x080122bc
 80033c4:	080122c0 	.word	0x080122c0
 80033c8:	080122c8 	.word	0x080122c8

080033cc <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80033d2:	f24c 6018 	movw	r0, #50712	; 0xc618
 80033d6:	f7fe fd8f 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80033da:	487a      	ldr	r0, [pc, #488]	; (80035c4 <showPreparedActivitiesPanel+0x1f8>)
 80033dc:	f7fe f988 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 80033e0:	4979      	ldr	r1, [pc, #484]	; (80035c8 <showPreparedActivitiesPanel+0x1fc>)
 80033e2:	487a      	ldr	r0, [pc, #488]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 80033e4:	f00b f848 	bl	800e478 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80033e8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	2300      	movs	r3, #0
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	231f      	movs	r3, #31
 80033f4:	220a      	movs	r2, #10
 80033f6:	212f      	movs	r1, #47	; 0x2f
 80033f8:	4874      	ldr	r0, [pc, #464]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 80033fa:	f7fe fb93 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80033fe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	2329      	movs	r3, #41	; 0x29
 8003406:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800340a:	2129      	movs	r1, #41	; 0x29
 800340c:	2000      	movs	r0, #0
 800340e:	f7fd febf 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003412:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	232b      	movs	r3, #43	; 0x2b
 800341a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800341e:	212b      	movs	r1, #43	; 0x2b
 8003420:	2000      	movs	r0, #0
 8003422:	f7fd feb5 	bl	8001190 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003426:	486a      	ldr	r0, [pc, #424]	; (80035d0 <showPreparedActivitiesPanel+0x204>)
 8003428:	f7fe f962 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800342c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	2305      	movs	r3, #5
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	2314      	movs	r3, #20
 8003438:	2264      	movs	r2, #100	; 0x64
 800343a:	21d8      	movs	r1, #216	; 0xd8
 800343c:	200a      	movs	r0, #10
 800343e:	f7fe f906 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003442:	4964      	ldr	r1, [pc, #400]	; (80035d4 <showPreparedActivitiesPanel+0x208>)
 8003444:	4861      	ldr	r0, [pc, #388]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 8003446:	f00b f817 	bl	800e478 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800344a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	2300      	movs	r3, #0
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2300      	movs	r3, #0
 8003456:	22da      	movs	r2, #218	; 0xda
 8003458:	210d      	movs	r1, #13
 800345a:	485c      	ldr	r0, [pc, #368]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 800345c:	f7fe fb62 	bl	8001b24 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8003460:	4b5d      	ldr	r3, [pc, #372]	; (80035d8 <showPreparedActivitiesPanel+0x20c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d029      	beq.n	80034bc <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003468:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	230a      	movs	r3, #10
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2328      	movs	r3, #40	; 0x28
 8003474:	2278      	movs	r2, #120	; 0x78
 8003476:	213c      	movs	r1, #60	; 0x3c
 8003478:	2064      	movs	r0, #100	; 0x64
 800347a:	f7fe f8e8 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 800347e:	4957      	ldr	r1, [pc, #348]	; (80035dc <showPreparedActivitiesPanel+0x210>)
 8003480:	4852      	ldr	r0, [pc, #328]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 8003482:	f00a fff9 	bl	800e478 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003486:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	2300      	movs	r3, #0
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2300      	movs	r3, #0
 8003492:	223e      	movs	r2, #62	; 0x3e
 8003494:	2177      	movs	r1, #119	; 0x77
 8003496:	484d      	ldr	r0, [pc, #308]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 8003498:	f7fe fb44 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 800349c:	4950      	ldr	r1, [pc, #320]	; (80035e0 <showPreparedActivitiesPanel+0x214>)
 800349e:	484b      	ldr	r0, [pc, #300]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 80034a0:	f00a ffea 	bl	800e478 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80034a4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	2300      	movs	r3, #0
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	2300      	movs	r3, #0
 80034b0:	2250      	movs	r2, #80	; 0x50
 80034b2:	2193      	movs	r1, #147	; 0x93
 80034b4:	4845      	ldr	r0, [pc, #276]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 80034b6:	f7fe fb35 	bl	8001b24 <EF_PutString>
 80034ba:	e028      	b.n	800350e <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80034bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	230a      	movs	r3, #10
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	2328      	movs	r3, #40	; 0x28
 80034c8:	2278      	movs	r2, #120	; 0x78
 80034ca:	213c      	movs	r1, #60	; 0x3c
 80034cc:	2064      	movs	r0, #100	; 0x64
 80034ce:	f7fe f8be 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 80034d2:	4942      	ldr	r1, [pc, #264]	; (80035dc <showPreparedActivitiesPanel+0x210>)
 80034d4:	483d      	ldr	r0, [pc, #244]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 80034d6:	f00a ffcf 	bl	800e478 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80034da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	2300      	movs	r3, #0
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2300      	movs	r3, #0
 80034e6:	223e      	movs	r2, #62	; 0x3e
 80034e8:	2177      	movs	r1, #119	; 0x77
 80034ea:	4838      	ldr	r0, [pc, #224]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 80034ec:	f7fe fb1a 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 80034f0:	493c      	ldr	r1, [pc, #240]	; (80035e4 <showPreparedActivitiesPanel+0x218>)
 80034f2:	4836      	ldr	r0, [pc, #216]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 80034f4:	f00a ffc0 	bl	800e478 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80034f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	2300      	movs	r3, #0
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	2300      	movs	r3, #0
 8003504:	2250      	movs	r2, #80	; 0x50
 8003506:	2193      	movs	r1, #147	; 0x93
 8003508:	4830      	ldr	r0, [pc, #192]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 800350a:	f7fe fb0b 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 800350e:	4b32      	ldr	r3, [pc, #200]	; (80035d8 <showPreparedActivitiesPanel+0x20c>)
 8003510:	785b      	ldrb	r3, [r3, #1]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d029      	beq.n	800356a <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003516:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800351a:	9301      	str	r3, [sp, #4]
 800351c:	230a      	movs	r3, #10
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	2328      	movs	r3, #40	; 0x28
 8003522:	2278      	movs	r2, #120	; 0x78
 8003524:	2178      	movs	r1, #120	; 0x78
 8003526:	2064      	movs	r0, #100	; 0x64
 8003528:	f7fe f891 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 800352c:	492e      	ldr	r1, [pc, #184]	; (80035e8 <showPreparedActivitiesPanel+0x21c>)
 800352e:	4827      	ldr	r0, [pc, #156]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 8003530:	f00a ffa2 	bl	800e478 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003534:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	2300      	movs	r3, #0
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	2300      	movs	r3, #0
 8003540:	227a      	movs	r2, #122	; 0x7a
 8003542:	2169      	movs	r1, #105	; 0x69
 8003544:	4821      	ldr	r0, [pc, #132]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 8003546:	f7fe faed 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 800354a:	4925      	ldr	r1, [pc, #148]	; (80035e0 <showPreparedActivitiesPanel+0x214>)
 800354c:	481f      	ldr	r0, [pc, #124]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 800354e:	f00a ff93 	bl	800e478 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003552:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	2300      	movs	r3, #0
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	2300      	movs	r3, #0
 800355e:	228c      	movs	r2, #140	; 0x8c
 8003560:	2193      	movs	r1, #147	; 0x93
 8003562:	481a      	ldr	r0, [pc, #104]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 8003564:	f7fe fade 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8003568:	e028      	b.n	80035bc <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800356a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	230a      	movs	r3, #10
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	2328      	movs	r3, #40	; 0x28
 8003576:	2278      	movs	r2, #120	; 0x78
 8003578:	2178      	movs	r1, #120	; 0x78
 800357a:	2064      	movs	r0, #100	; 0x64
 800357c:	f7fe f867 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003580:	4919      	ldr	r1, [pc, #100]	; (80035e8 <showPreparedActivitiesPanel+0x21c>)
 8003582:	4812      	ldr	r0, [pc, #72]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 8003584:	f00a ff78 	bl	800e478 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003588:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	2300      	movs	r3, #0
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2300      	movs	r3, #0
 8003594:	227a      	movs	r2, #122	; 0x7a
 8003596:	2169      	movs	r1, #105	; 0x69
 8003598:	480c      	ldr	r0, [pc, #48]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 800359a:	f7fe fac3 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 800359e:	4911      	ldr	r1, [pc, #68]	; (80035e4 <showPreparedActivitiesPanel+0x218>)
 80035a0:	480a      	ldr	r0, [pc, #40]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 80035a2:	f00a ff69 	bl	800e478 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80035a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	2300      	movs	r3, #0
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	2300      	movs	r3, #0
 80035b2:	228c      	movs	r2, #140	; 0x8c
 80035b4:	2193      	movs	r1, #147	; 0x93
 80035b6:	4805      	ldr	r0, [pc, #20]	; (80035cc <showPreparedActivitiesPanel+0x200>)
 80035b8:	f7fe fab4 	bl	8001b24 <EF_PutString>
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	08015120 	.word	0x08015120
 80035c8:	080122d0 	.word	0x080122d0
 80035cc:	200002c4 	.word	0x200002c4
 80035d0:	080131a8 	.word	0x080131a8
 80035d4:	080122c8 	.word	0x080122c8
 80035d8:	20000278 	.word	0x20000278
 80035dc:	080122e0 	.word	0x080122e0
 80035e0:	080122ec 	.word	0x080122ec
 80035e4:	080122f0 	.word	0x080122f0
 80035e8:	080122f4 	.word	0x080122f4

080035ec <showWSLedPanel>:
//
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showWSLedPanel()
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80035f2:	f24c 6018 	movw	r0, #50712	; 0xc618
 80035f6:	f7fe fc7f 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80035fa:	48c7      	ldr	r0, [pc, #796]	; (8003918 <showWSLedPanel+0x32c>)
 80035fc:	f7fe f878 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 8003600:	49c6      	ldr	r1, [pc, #792]	; (800391c <showWSLedPanel+0x330>)
 8003602:	48c7      	ldr	r0, [pc, #796]	; (8003920 <showWSLedPanel+0x334>)
 8003604:	f00a ff38 	bl	800e478 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003608:	f24c 6318 	movw	r3, #50712	; 0xc618
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	2300      	movs	r3, #0
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	231f      	movs	r3, #31
 8003614:	220a      	movs	r2, #10
 8003616:	2146      	movs	r1, #70	; 0x46
 8003618:	48c1      	ldr	r0, [pc, #772]	; (8003920 <showWSLedPanel+0x334>)
 800361a:	f7fe fa83 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800361e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2329      	movs	r3, #41	; 0x29
 8003626:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800362a:	2129      	movs	r1, #41	; 0x29
 800362c:	2000      	movs	r0, #0
 800362e:	f7fd fdaf 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003632:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	232b      	movs	r3, #43	; 0x2b
 800363a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800363e:	212b      	movs	r1, #43	; 0x2b
 8003640:	2000      	movs	r0, #0
 8003642:	f7fd fda5 	bl	8001190 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 8003646:	4bb7      	ldr	r3, [pc, #732]	; (8003924 <showWSLedPanel+0x338>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	49b6      	ldr	r1, [pc, #728]	; (8003928 <showWSLedPanel+0x33c>)
 800364e:	48b4      	ldr	r0, [pc, #720]	; (8003920 <showWSLedPanel+0x334>)
 8003650:	f00a ff12 	bl	800e478 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003654:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	2300      	movs	r3, #0
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	2300      	movs	r3, #0
 8003660:	223c      	movs	r2, #60	; 0x3c
 8003662:	2114      	movs	r1, #20
 8003664:	48ae      	ldr	r0, [pc, #696]	; (8003920 <showWSLedPanel+0x334>)
 8003666:	f7fe fa5d 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 800366a:	49b0      	ldr	r1, [pc, #704]	; (800392c <showWSLedPanel+0x340>)
 800366c:	48ac      	ldr	r0, [pc, #688]	; (8003920 <showWSLedPanel+0x334>)
 800366e:	f00a ff03 	bl	800e478 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003672:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	2300      	movs	r3, #0
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	2300      	movs	r3, #0
 800367e:	225a      	movs	r2, #90	; 0x5a
 8003680:	2114      	movs	r1, #20
 8003682:	48a7      	ldr	r0, [pc, #668]	; (8003920 <showWSLedPanel+0x334>)
 8003684:	f7fe fa4e 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 8003688:	49a9      	ldr	r1, [pc, #676]	; (8003930 <showWSLedPanel+0x344>)
 800368a:	48a5      	ldr	r0, [pc, #660]	; (8003920 <showWSLedPanel+0x334>)
 800368c:	f00a fef4 	bl	800e478 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003690:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	2300      	movs	r3, #0
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2300      	movs	r3, #0
 800369c:	2278      	movs	r2, #120	; 0x78
 800369e:	2114      	movs	r1, #20
 80036a0:	489f      	ldr	r0, [pc, #636]	; (8003920 <showWSLedPanel+0x334>)
 80036a2:	f7fe fa3f 	bl	8001b24 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 80036a6:	48a3      	ldr	r0, [pc, #652]	; (8003934 <showWSLedPanel+0x348>)
 80036a8:	f7fe f822 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80036ac:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	2305      	movs	r3, #5
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	2315      	movs	r3, #21
 80036b8:	221e      	movs	r2, #30
 80036ba:	2141      	movs	r1, #65	; 0x41
 80036bc:	20d9      	movs	r0, #217	; 0xd9
 80036be:	f7fd ffc6 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80036c2:	499d      	ldr	r1, [pc, #628]	; (8003938 <showWSLedPanel+0x34c>)
 80036c4:	4896      	ldr	r0, [pc, #600]	; (8003920 <showWSLedPanel+0x334>)
 80036c6:	f00a fed7 	bl	800e478 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80036ca:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	2300      	movs	r3, #0
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2300      	movs	r3, #0
 80036d6:	2243      	movs	r2, #67	; 0x43
 80036d8:	21df      	movs	r1, #223	; 0xdf
 80036da:	4891      	ldr	r0, [pc, #580]	; (8003920 <showWSLedPanel+0x334>)
 80036dc:	f7fe fa22 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80036e0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	2305      	movs	r3, #5
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	2315      	movs	r3, #21
 80036ec:	221e      	movs	r2, #30
 80036ee:	2141      	movs	r1, #65	; 0x41
 80036f0:	20fc      	movs	r0, #252	; 0xfc
 80036f2:	f7fd ffac 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 80036f6:	4991      	ldr	r1, [pc, #580]	; (800393c <showWSLedPanel+0x350>)
 80036f8:	4889      	ldr	r0, [pc, #548]	; (8003920 <showWSLedPanel+0x334>)
 80036fa:	f00a febd 	bl	800e478 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80036fe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	2300      	movs	r3, #0
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	2300      	movs	r3, #0
 800370a:	2243      	movs	r2, #67	; 0x43
 800370c:	f240 1101 	movw	r1, #257	; 0x101
 8003710:	4883      	ldr	r0, [pc, #524]	; (8003920 <showWSLedPanel+0x334>)
 8003712:	f7fe fa07 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003716:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	2305      	movs	r3, #5
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2315      	movs	r3, #21
 8003722:	221e      	movs	r2, #30
 8003724:	2141      	movs	r1, #65	; 0x41
 8003726:	f240 101f 	movw	r0, #287	; 0x11f
 800372a:	f7fd ff90 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 800372e:	4984      	ldr	r1, [pc, #528]	; (8003940 <showWSLedPanel+0x354>)
 8003730:	487b      	ldr	r0, [pc, #492]	; (8003920 <showWSLedPanel+0x334>)
 8003732:	f00a fea1 	bl	800e478 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003736:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	2300      	movs	r3, #0
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2300      	movs	r3, #0
 8003742:	2243      	movs	r2, #67	; 0x43
 8003744:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003748:	4875      	ldr	r0, [pc, #468]	; (8003920 <showWSLedPanel+0x334>)
 800374a:	f7fe f9eb 	bl	8001b24 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800374e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	2305      	movs	r3, #5
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2315      	movs	r3, #21
 800375a:	2228      	movs	r2, #40	; 0x28
 800375c:	215f      	movs	r1, #95	; 0x5f
 800375e:	2096      	movs	r0, #150	; 0x96
 8003760:	f7fd ff75 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8003764:	4977      	ldr	r1, [pc, #476]	; (8003944 <showWSLedPanel+0x358>)
 8003766:	486e      	ldr	r0, [pc, #440]	; (8003920 <showWSLedPanel+0x334>)
 8003768:	f00a fe86 	bl	800e478 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 800376c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003770:	9301      	str	r3, [sp, #4]
 8003772:	2300      	movs	r3, #0
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	2300      	movs	r3, #0
 8003778:	2261      	movs	r2, #97	; 0x61
 800377a:	219b      	movs	r1, #155	; 0x9b
 800377c:	4868      	ldr	r0, [pc, #416]	; (8003920 <showWSLedPanel+0x334>)
 800377e:	f7fe f9d1 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8003782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003786:	9301      	str	r3, [sp, #4]
 8003788:	2305      	movs	r3, #5
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	2315      	movs	r3, #21
 800378e:	2228      	movs	r2, #40	; 0x28
 8003790:	215f      	movs	r1, #95	; 0x5f
 8003792:	20ca      	movs	r0, #202	; 0xca
 8003794:	f7fd ff5b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8003798:	496b      	ldr	r1, [pc, #428]	; (8003948 <showWSLedPanel+0x35c>)
 800379a:	4861      	ldr	r0, [pc, #388]	; (8003920 <showWSLedPanel+0x334>)
 800379c:	f00a fe6c 	bl	800e478 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80037a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	2300      	movs	r3, #0
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	2300      	movs	r3, #0
 80037ac:	2261      	movs	r2, #97	; 0x61
 80037ae:	21d2      	movs	r1, #210	; 0xd2
 80037b0:	485b      	ldr	r0, [pc, #364]	; (8003920 <showWSLedPanel+0x334>)
 80037b2:	f7fe f9b7 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 80037b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	2305      	movs	r3, #5
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	2315      	movs	r3, #21
 80037c2:	2228      	movs	r2, #40	; 0x28
 80037c4:	215f      	movs	r1, #95	; 0x5f
 80037c6:	20fe      	movs	r0, #254	; 0xfe
 80037c8:	f7fd ff41 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 80037cc:	495f      	ldr	r1, [pc, #380]	; (800394c <showWSLedPanel+0x360>)
 80037ce:	4854      	ldr	r0, [pc, #336]	; (8003920 <showWSLedPanel+0x334>)
 80037d0:	f00a fe52 	bl	800e478 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80037d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	2300      	movs	r3, #0
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	2300      	movs	r3, #0
 80037e0:	2261      	movs	r2, #97	; 0x61
 80037e2:	f44f 7183 	mov.w	r1, #262	; 0x106
 80037e6:	484e      	ldr	r0, [pc, #312]	; (8003920 <showWSLedPanel+0x334>)
 80037e8:	f7fe f99c 	bl	8001b24 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80037ec:	231f      	movs	r3, #31
 80037ee:	9301      	str	r3, [sp, #4]
 80037f0:	2305      	movs	r3, #5
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	2315      	movs	r3, #21
 80037f6:	2228      	movs	r2, #40	; 0x28
 80037f8:	217d      	movs	r1, #125	; 0x7d
 80037fa:	2096      	movs	r0, #150	; 0x96
 80037fc:	f7fd ff27 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8003800:	4950      	ldr	r1, [pc, #320]	; (8003944 <showWSLedPanel+0x358>)
 8003802:	4847      	ldr	r0, [pc, #284]	; (8003920 <showWSLedPanel+0x334>)
 8003804:	f00a fe38 	bl	800e478 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8003808:	231f      	movs	r3, #31
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	2300      	movs	r3, #0
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	2300      	movs	r3, #0
 8003812:	227f      	movs	r2, #127	; 0x7f
 8003814:	219b      	movs	r1, #155	; 0x9b
 8003816:	4842      	ldr	r0, [pc, #264]	; (8003920 <showWSLedPanel+0x334>)
 8003818:	f7fe f984 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 800381c:	231f      	movs	r3, #31
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	2305      	movs	r3, #5
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	2315      	movs	r3, #21
 8003826:	2228      	movs	r2, #40	; 0x28
 8003828:	217d      	movs	r1, #125	; 0x7d
 800382a:	20ca      	movs	r0, #202	; 0xca
 800382c:	f7fd ff0f 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8003830:	4945      	ldr	r1, [pc, #276]	; (8003948 <showWSLedPanel+0x35c>)
 8003832:	483b      	ldr	r0, [pc, #236]	; (8003920 <showWSLedPanel+0x334>)
 8003834:	f00a fe20 	bl	800e478 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8003838:	231f      	movs	r3, #31
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	2300      	movs	r3, #0
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	2300      	movs	r3, #0
 8003842:	227f      	movs	r2, #127	; 0x7f
 8003844:	21d2      	movs	r1, #210	; 0xd2
 8003846:	4836      	ldr	r0, [pc, #216]	; (8003920 <showWSLedPanel+0x334>)
 8003848:	f7fe f96c 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 800384c:	231f      	movs	r3, #31
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	2305      	movs	r3, #5
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	2315      	movs	r3, #21
 8003856:	2228      	movs	r2, #40	; 0x28
 8003858:	217d      	movs	r1, #125	; 0x7d
 800385a:	20fe      	movs	r0, #254	; 0xfe
 800385c:	f7fd fef7 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8003860:	493a      	ldr	r1, [pc, #232]	; (800394c <showWSLedPanel+0x360>)
 8003862:	482f      	ldr	r0, [pc, #188]	; (8003920 <showWSLedPanel+0x334>)
 8003864:	f00a fe08 	bl	800e478 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8003868:	231f      	movs	r3, #31
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	2300      	movs	r3, #0
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2300      	movs	r3, #0
 8003872:	227f      	movs	r2, #127	; 0x7f
 8003874:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003878:	4829      	ldr	r0, [pc, #164]	; (8003920 <showWSLedPanel+0x334>)
 800387a:	f7fe f953 	bl	8001b24 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 800387e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003882:	9301      	str	r3, [sp, #4]
 8003884:	2305      	movs	r3, #5
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	2315      	movs	r3, #21
 800388a:	2250      	movs	r2, #80	; 0x50
 800388c:	219c      	movs	r1, #156	; 0x9c
 800388e:	2014      	movs	r0, #20
 8003890:	f7fd fedd 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 8003894:	492e      	ldr	r1, [pc, #184]	; (8003950 <showWSLedPanel+0x364>)
 8003896:	4822      	ldr	r0, [pc, #136]	; (8003920 <showWSLedPanel+0x334>)
 8003898:	f00a fdee 	bl	800e478 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 800389c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	2300      	movs	r3, #0
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2300      	movs	r3, #0
 80038a8:	229e      	movs	r2, #158	; 0x9e
 80038aa:	211c      	movs	r1, #28
 80038ac:	481c      	ldr	r0, [pc, #112]	; (8003920 <showWSLedPanel+0x334>)
 80038ae:	f7fe f939 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80038b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	2305      	movs	r3, #5
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	2315      	movs	r3, #21
 80038be:	2250      	movs	r2, #80	; 0x50
 80038c0:	219c      	movs	r1, #156	; 0x9c
 80038c2:	2078      	movs	r0, #120	; 0x78
 80038c4:	f7fd fec3 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 80038c8:	4922      	ldr	r1, [pc, #136]	; (8003954 <showWSLedPanel+0x368>)
 80038ca:	4815      	ldr	r0, [pc, #84]	; (8003920 <showWSLedPanel+0x334>)
 80038cc:	f00a fdd4 	bl	800e478 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80038d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038d4:	9301      	str	r3, [sp, #4]
 80038d6:	2300      	movs	r3, #0
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	2300      	movs	r3, #0
 80038dc:	229e      	movs	r2, #158	; 0x9e
 80038de:	2187      	movs	r1, #135	; 0x87
 80038e0:	480f      	ldr	r0, [pc, #60]	; (8003920 <showWSLedPanel+0x334>)
 80038e2:	f7fe f91f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80038e6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	2305      	movs	r3, #5
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	2315      	movs	r3, #21
 80038f2:	2250      	movs	r2, #80	; 0x50
 80038f4:	219c      	movs	r1, #156	; 0x9c
 80038f6:	20dc      	movs	r0, #220	; 0xdc
 80038f8:	f7fd fea9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 80038fc:	4916      	ldr	r1, [pc, #88]	; (8003958 <showWSLedPanel+0x36c>)
 80038fe:	4808      	ldr	r0, [pc, #32]	; (8003920 <showWSLedPanel+0x334>)
 8003900:	f00a fdba 	bl	800e478 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 8003904:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	2300      	movs	r3, #0
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	2300      	movs	r3, #0
 8003910:	229e      	movs	r2, #158	; 0x9e
 8003912:	21e9      	movs	r1, #233	; 0xe9
 8003914:	e022      	b.n	800395c <showWSLedPanel+0x370>
 8003916:	bf00      	nop
 8003918:	08015120 	.word	0x08015120
 800391c:	08012300 	.word	0x08012300
 8003920:	200002c4 	.word	0x200002c4
 8003924:	20000032 	.word	0x20000032
 8003928:	0801230c 	.word	0x0801230c
 800392c:	0801231c 	.word	0x0801231c
 8003930:	08012324 	.word	0x08012324
 8003934:	080131a8 	.word	0x080131a8
 8003938:	080122b4 	.word	0x080122b4
 800393c:	080122bc 	.word	0x080122bc
 8003940:	0801232c 	.word	0x0801232c
 8003944:	08012330 	.word	0x08012330
 8003948:	08012334 	.word	0x08012334
 800394c:	08012338 	.word	0x08012338
 8003950:	0801233c 	.word	0x0801233c
 8003954:	080122f0 	.word	0x080122f0
 8003958:	08012344 	.word	0x08012344
 800395c:	482b      	ldr	r0, [pc, #172]	; (8003a0c <showWSLedPanel+0x420>)
 800395e:	f7fe f8e1 	bl	8001b24 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8003962:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	2305      	movs	r3, #5
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	2315      	movs	r3, #21
 800396e:	2250      	movs	r2, #80	; 0x50
 8003970:	21bb      	movs	r1, #187	; 0xbb
 8003972:	2046      	movs	r0, #70	; 0x46
 8003974:	f7fd fe6b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 8003978:	4925      	ldr	r1, [pc, #148]	; (8003a10 <showWSLedPanel+0x424>)
 800397a:	4824      	ldr	r0, [pc, #144]	; (8003a0c <showWSLedPanel+0x420>)
 800397c:	f00a fd7c 	bl	800e478 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8003980:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	2300      	movs	r3, #0
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	2300      	movs	r3, #0
 800398c:	22bd      	movs	r2, #189	; 0xbd
 800398e:	214e      	movs	r1, #78	; 0x4e
 8003990:	481e      	ldr	r0, [pc, #120]	; (8003a0c <showWSLedPanel+0x420>)
 8003992:	f7fe f8c7 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8003996:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	2305      	movs	r3, #5
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	2315      	movs	r3, #21
 80039a2:	2250      	movs	r2, #80	; 0x50
 80039a4:	21bb      	movs	r1, #187	; 0xbb
 80039a6:	20aa      	movs	r0, #170	; 0xaa
 80039a8:	f7fd fe51 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 80039ac:	4919      	ldr	r1, [pc, #100]	; (8003a14 <showWSLedPanel+0x428>)
 80039ae:	4817      	ldr	r0, [pc, #92]	; (8003a0c <showWSLedPanel+0x420>)
 80039b0:	f00a fd62 	bl	800e478 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 80039b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	2300      	movs	r3, #0
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2300      	movs	r3, #0
 80039c0:	22bd      	movs	r2, #189	; 0xbd
 80039c2:	21b5      	movs	r1, #181	; 0xb5
 80039c4:	4811      	ldr	r0, [pc, #68]	; (8003a0c <showWSLedPanel+0x420>)
 80039c6:	f7fe f8ad 	bl	8001b24 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80039ca:	4813      	ldr	r0, [pc, #76]	; (8003a18 <showWSLedPanel+0x42c>)
 80039cc:	f7fd fe90 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80039d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	2305      	movs	r3, #5
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2314      	movs	r3, #20
 80039dc:	2264      	movs	r2, #100	; 0x64
 80039de:	21d8      	movs	r1, #216	; 0xd8
 80039e0:	200a      	movs	r0, #10
 80039e2:	f7fd fe34 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80039e6:	490d      	ldr	r1, [pc, #52]	; (8003a1c <showWSLedPanel+0x430>)
 80039e8:	4808      	ldr	r0, [pc, #32]	; (8003a0c <showWSLedPanel+0x420>)
 80039ea:	f00a fd45 	bl	800e478 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80039ee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	2300      	movs	r3, #0
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2300      	movs	r3, #0
 80039fa:	22da      	movs	r2, #218	; 0xda
 80039fc:	210d      	movs	r1, #13
 80039fe:	4803      	ldr	r0, [pc, #12]	; (8003a0c <showWSLedPanel+0x420>)
 8003a00:	f7fe f890 	bl	8001b24 <EF_PutString>


}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	200002c4 	.word	0x200002c4
 8003a10:	0801234c 	.word	0x0801234c
 8003a14:	08012354 	.word	0x08012354
 8003a18:	080131a8 	.word	0x080131a8
 8003a1c:	080122c8 	.word	0x080122c8

08003a20 <ChangeHourOnScreen>:
//
// Change displayed time, if is other than current time
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ChangeHourOnScreen()
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8003a26:	f7fe fea9 	bl	800277c <DS3231_GetHour>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8003a2e:	f7fe feb1 	bl	8002794 <DS3231_GetMinute>
 8003a32:	4603      	mov	r3, r0
 8003a34:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003a36:	482a      	ldr	r0, [pc, #168]	; (8003ae0 <ChangeHourOnScreen+0xc0>)
 8003a38:	f7fd fe5a 	bl	80016f0 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8003a3c:	4b29      	ldr	r3, [pc, #164]	; (8003ae4 <ChangeHourOnScreen+0xc4>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	79fa      	ldrb	r2, [r7, #7]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d021      	beq.n	8003a8a <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8003a46:	4b28      	ldr	r3, [pc, #160]	; (8003ae8 <ChangeHourOnScreen+0xc8>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d11d      	bne.n	8003a8a <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	2b09      	cmp	r3, #9
 8003a52:	d806      	bhi.n	8003a62 <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	461a      	mov	r2, r3
 8003a58:	4924      	ldr	r1, [pc, #144]	; (8003aec <ChangeHourOnScreen+0xcc>)
 8003a5a:	4825      	ldr	r0, [pc, #148]	; (8003af0 <ChangeHourOnScreen+0xd0>)
 8003a5c:	f00a fd0c 	bl	800e478 <siprintf>
 8003a60:	e005      	b.n	8003a6e <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	461a      	mov	r2, r3
 8003a66:	4923      	ldr	r1, [pc, #140]	; (8003af4 <ChangeHourOnScreen+0xd4>)
 8003a68:	4821      	ldr	r0, [pc, #132]	; (8003af0 <ChangeHourOnScreen+0xd0>)
 8003a6a:	f00a fd05 	bl	800e478 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003a6e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	2301      	movs	r3, #1
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	2232      	movs	r2, #50	; 0x32
 8003a7c:	2161      	movs	r1, #97	; 0x61
 8003a7e:	481c      	ldr	r0, [pc, #112]	; (8003af0 <ChangeHourOnScreen+0xd0>)
 8003a80:	f7fe f850 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 8003a84:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <ChangeHourOnScreen+0xc4>)
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <ChangeHourOnScreen+0xd8>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	79ba      	ldrb	r2, [r7, #6]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d021      	beq.n	8003ad8 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8003a94:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <ChangeHourOnScreen+0xc8>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d11d      	bne.n	8003ad8 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 8003a9c:	79bb      	ldrb	r3, [r7, #6]
 8003a9e:	2b09      	cmp	r3, #9
 8003aa0:	d806      	bhi.n	8003ab0 <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8003aa2:	79bb      	ldrb	r3, [r7, #6]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4915      	ldr	r1, [pc, #84]	; (8003afc <ChangeHourOnScreen+0xdc>)
 8003aa8:	4811      	ldr	r0, [pc, #68]	; (8003af0 <ChangeHourOnScreen+0xd0>)
 8003aaa:	f00a fce5 	bl	800e478 <siprintf>
 8003aae:	e005      	b.n	8003abc <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8003ab0:	79bb      	ldrb	r3, [r7, #6]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4912      	ldr	r1, [pc, #72]	; (8003b00 <ChangeHourOnScreen+0xe0>)
 8003ab6:	480e      	ldr	r0, [pc, #56]	; (8003af0 <ChangeHourOnScreen+0xd0>)
 8003ab8:	f00a fcde 	bl	800e478 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003abc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2232      	movs	r2, #50	; 0x32
 8003aca:	2196      	movs	r1, #150	; 0x96
 8003acc:	4808      	ldr	r0, [pc, #32]	; (8003af0 <ChangeHourOnScreen+0xd0>)
 8003ace:	f7fe f829 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 8003ad2:	4a09      	ldr	r2, [pc, #36]	; (8003af8 <ChangeHourOnScreen+0xd8>)
 8003ad4:	79bb      	ldrb	r3, [r7, #6]
 8003ad6:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8003ad8:	bf00      	nop
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	08015120 	.word	0x08015120
 8003ae4:	2000024c 	.word	0x2000024c
 8003ae8:	20000258 	.word	0x20000258
 8003aec:	0801235c 	.word	0x0801235c
 8003af0:	200002c4 	.word	0x200002c4
 8003af4:	08012364 	.word	0x08012364
 8003af8:	2000024d 	.word	0x2000024d
 8003afc:	08012368 	.word	0x08012368
 8003b00:	08012370 	.word	0x08012370

08003b04 <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d103      	bne.n	8003b20 <predefinedActivityCzyszczenie+0x1c>
	{
		SendComand(UCMD_RELAY_ALL_ON);
 8003b18:	2017      	movs	r0, #23
 8003b1a:	f002 f8d5 	bl	8005cc8 <SendComand>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8003b1e:	e005      	b.n	8003b2c <predefinedActivityCzyszczenie+0x28>
		SendComand(UCMD_RELAY_ALL_OFF);
 8003b20:	2018      	movs	r0, #24
 8003b22:	f002 f8d1 	bl	8005cc8 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8003b26:	2019      	movs	r0, #25
 8003b28:	f002 f8ce 	bl	8005cc8 <SendComand>
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d12f      	bne.n	8003ba8 <predefinedActivityKarmienie+0x74>
	{
		SendComand(UCMD_RELAY_ALL_ON);
 8003b48:	2017      	movs	r0, #23
 8003b4a:	f002 f8bd 	bl	8005cc8 <SendComand>
		EF_SetFont(&arial_11ptFontInfo);
 8003b4e:	481b      	ldr	r0, [pc, #108]	; (8003bbc <predefinedActivityKarmienie+0x88>)
 8003b50:	f7fd fdce 	bl	80016f0 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003b54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	230a      	movs	r3, #10
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	2328      	movs	r3, #40	; 0x28
 8003b60:	2278      	movs	r2, #120	; 0x78
 8003b62:	213c      	movs	r1, #60	; 0x3c
 8003b64:	2064      	movs	r0, #100	; 0x64
 8003b66:	f7fd fd72 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003b6a:	4915      	ldr	r1, [pc, #84]	; (8003bc0 <predefinedActivityKarmienie+0x8c>)
 8003b6c:	4815      	ldr	r0, [pc, #84]	; (8003bc4 <predefinedActivityKarmienie+0x90>)
 8003b6e:	f00a fc83 	bl	800e478 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003b72:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	223e      	movs	r2, #62	; 0x3e
 8003b80:	2177      	movs	r1, #119	; 0x77
 8003b82:	4810      	ldr	r0, [pc, #64]	; (8003bc4 <predefinedActivityKarmienie+0x90>)
 8003b84:	f7fd ffce 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003b88:	490f      	ldr	r1, [pc, #60]	; (8003bc8 <predefinedActivityKarmienie+0x94>)
 8003b8a:	480e      	ldr	r0, [pc, #56]	; (8003bc4 <predefinedActivityKarmienie+0x90>)
 8003b8c:	f00a fc74 	bl	800e478 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003b90:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	2300      	movs	r3, #0
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	2250      	movs	r2, #80	; 0x50
 8003b9e:	2193      	movs	r1, #147	; 0x93
 8003ba0:	4808      	ldr	r0, [pc, #32]	; (8003bc4 <predefinedActivityKarmienie+0x90>)
 8003ba2:	f7fd ffbf 	bl	8001b24 <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8003ba6:	e005      	b.n	8003bb4 <predefinedActivityKarmienie+0x80>
		SendComand(UCMD_RELAY_ALL_OFF);
 8003ba8:	2018      	movs	r0, #24
 8003baa:	f002 f88d 	bl	8005cc8 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8003bae:	4807      	ldr	r0, [pc, #28]	; (8003bcc <predefinedActivityKarmienie+0x98>)
 8003bb0:	f008 fa12 	bl	800bfd8 <HAL_TIM_Base_Start_IT>
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	080131a8 	.word	0x080131a8
 8003bc0:	080122e0 	.word	0x080122e0
 8003bc4:	200002c4 	.word	0x200002c4
 8003bc8:	080122f0 	.word	0x080122f0
 8003bcc:	20000654 	.word	0x20000654

08003bd0 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8003bd6:	487d      	ldr	r0, [pc, #500]	; (8003dcc <drawCurrentStateOfSwitches+0x1fc>)
 8003bd8:	f7fd fd8a 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8003bdc:	4b7c      	ldr	r3, [pc, #496]	; (8003dd0 <drawCurrentStateOfSwitches+0x200>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d01c      	beq.n	8003c1e <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003be4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	2305      	movs	r3, #5
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	2315      	movs	r3, #21
 8003bf0:	2221      	movs	r2, #33	; 0x21
 8003bf2:	2141      	movs	r1, #65	; 0x41
 8003bf4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003bf8:	f7fd fd29 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003bfc:	4975      	ldr	r1, [pc, #468]	; (8003dd4 <drawCurrentStateOfSwitches+0x204>)
 8003bfe:	4876      	ldr	r0, [pc, #472]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003c00:	f00a fc3a 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003c04:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2243      	movs	r2, #67	; 0x43
 8003c12:	f240 1111 	movw	r1, #273	; 0x111
 8003c16:	4870      	ldr	r0, [pc, #448]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003c18:	f7fd ff84 	bl	8001b24 <EF_PutString>
 8003c1c:	e01b      	b.n	8003c56 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003c1e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	2305      	movs	r3, #5
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	2315      	movs	r3, #21
 8003c2a:	2221      	movs	r2, #33	; 0x21
 8003c2c:	2141      	movs	r1, #65	; 0x41
 8003c2e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003c32:	f7fd fd0c 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003c36:	4969      	ldr	r1, [pc, #420]	; (8003ddc <drawCurrentStateOfSwitches+0x20c>)
 8003c38:	4867      	ldr	r0, [pc, #412]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003c3a:	f00a fc1d 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003c3e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	2300      	movs	r3, #0
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2243      	movs	r2, #67	; 0x43
 8003c4c:	f240 1111 	movw	r1, #273	; 0x111
 8003c50:	4861      	ldr	r0, [pc, #388]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003c52:	f7fd ff67 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8003c56:	4b5e      	ldr	r3, [pc, #376]	; (8003dd0 <drawCurrentStateOfSwitches+0x200>)
 8003c58:	785b      	ldrb	r3, [r3, #1]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01c      	beq.n	8003c98 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003c5e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	2305      	movs	r3, #5
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	2315      	movs	r3, #21
 8003c6a:	2221      	movs	r2, #33	; 0x21
 8003c6c:	215f      	movs	r1, #95	; 0x5f
 8003c6e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003c72:	f7fd fcec 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003c76:	4957      	ldr	r1, [pc, #348]	; (8003dd4 <drawCurrentStateOfSwitches+0x204>)
 8003c78:	4857      	ldr	r0, [pc, #348]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003c7a:	f00a fbfd 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003c7e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	2300      	movs	r3, #0
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	2261      	movs	r2, #97	; 0x61
 8003c8c:	f240 1111 	movw	r1, #273	; 0x111
 8003c90:	4851      	ldr	r0, [pc, #324]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003c92:	f7fd ff47 	bl	8001b24 <EF_PutString>
 8003c96:	e01b      	b.n	8003cd0 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003c98:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	2305      	movs	r3, #5
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	2315      	movs	r3, #21
 8003ca4:	2221      	movs	r2, #33	; 0x21
 8003ca6:	215f      	movs	r1, #95	; 0x5f
 8003ca8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003cac:	f7fd fccf 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003cb0:	494a      	ldr	r1, [pc, #296]	; (8003ddc <drawCurrentStateOfSwitches+0x20c>)
 8003cb2:	4849      	ldr	r0, [pc, #292]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003cb4:	f00a fbe0 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003cb8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	2261      	movs	r2, #97	; 0x61
 8003cc6:	f240 1111 	movw	r1, #273	; 0x111
 8003cca:	4843      	ldr	r0, [pc, #268]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003ccc:	f7fd ff2a 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <drawCurrentStateOfSwitches+0x200>)
 8003cd2:	789b      	ldrb	r3, [r3, #2]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d01c      	beq.n	8003d12 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003cd8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	2305      	movs	r3, #5
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2315      	movs	r3, #21
 8003ce4:	2221      	movs	r2, #33	; 0x21
 8003ce6:	217d      	movs	r1, #125	; 0x7d
 8003ce8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003cec:	f7fd fcaf 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003cf0:	4938      	ldr	r1, [pc, #224]	; (8003dd4 <drawCurrentStateOfSwitches+0x204>)
 8003cf2:	4839      	ldr	r0, [pc, #228]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003cf4:	f00a fbc0 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003cf8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003cfc:	9301      	str	r3, [sp, #4]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	2300      	movs	r3, #0
 8003d04:	227f      	movs	r2, #127	; 0x7f
 8003d06:	f240 1111 	movw	r1, #273	; 0x111
 8003d0a:	4833      	ldr	r0, [pc, #204]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003d0c:	f7fd ff0a 	bl	8001b24 <EF_PutString>
 8003d10:	e01b      	b.n	8003d4a <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003d12:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	2305      	movs	r3, #5
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	2315      	movs	r3, #21
 8003d1e:	2221      	movs	r2, #33	; 0x21
 8003d20:	217d      	movs	r1, #125	; 0x7d
 8003d22:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003d26:	f7fd fc92 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003d2a:	492c      	ldr	r1, [pc, #176]	; (8003ddc <drawCurrentStateOfSwitches+0x20c>)
 8003d2c:	482a      	ldr	r0, [pc, #168]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003d2e:	f00a fba3 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003d32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	227f      	movs	r2, #127	; 0x7f
 8003d40:	f240 1111 	movw	r1, #273	; 0x111
 8003d44:	4824      	ldr	r0, [pc, #144]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003d46:	f7fd feed 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8003d4a:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <drawCurrentStateOfSwitches+0x200>)
 8003d4c:	78db      	ldrb	r3, [r3, #3]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01c      	beq.n	8003d8c <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003d52:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003d56:	9301      	str	r3, [sp, #4]
 8003d58:	2305      	movs	r3, #5
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	2315      	movs	r3, #21
 8003d5e:	2221      	movs	r2, #33	; 0x21
 8003d60:	219b      	movs	r1, #155	; 0x9b
 8003d62:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003d66:	f7fd fc72 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003d6a:	491a      	ldr	r1, [pc, #104]	; (8003dd4 <drawCurrentStateOfSwitches+0x204>)
 8003d6c:	481a      	ldr	r0, [pc, #104]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003d6e:	f00a fb83 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003d72:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003d76:	9301      	str	r3, [sp, #4]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	229d      	movs	r2, #157	; 0x9d
 8003d80:	f240 1111 	movw	r1, #273	; 0x111
 8003d84:	4814      	ldr	r0, [pc, #80]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003d86:	f7fd fecd 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8003d8a:	e01b      	b.n	8003dc4 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003d8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	2305      	movs	r3, #5
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	2315      	movs	r3, #21
 8003d98:	2221      	movs	r2, #33	; 0x21
 8003d9a:	219b      	movs	r1, #155	; 0x9b
 8003d9c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003da0:	f7fd fc55 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003da4:	490d      	ldr	r1, [pc, #52]	; (8003ddc <drawCurrentStateOfSwitches+0x20c>)
 8003da6:	480c      	ldr	r0, [pc, #48]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003da8:	f00a fb66 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003dac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	2300      	movs	r3, #0
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2300      	movs	r3, #0
 8003db8:	229d      	movs	r2, #157	; 0x9d
 8003dba:	f240 1111 	movw	r1, #273	; 0x111
 8003dbe:	4806      	ldr	r0, [pc, #24]	; (8003dd8 <drawCurrentStateOfSwitches+0x208>)
 8003dc0:	f7fd feb0 	bl	8001b24 <EF_PutString>
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	080131a8 	.word	0x080131a8
 8003dd0:	20000270 	.word	0x20000270
 8003dd4:	080122ec 	.word	0x080122ec
 8003dd8:	200002c4 	.word	0x200002c4
 8003ddc:	080122f0 	.word	0x080122f0

08003de0 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8003de6:	4875      	ldr	r0, [pc, #468]	; (8003fbc <drawCurrentStateOfLights+0x1dc>)
 8003de8:	f7fd fc82 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8003dec:	4b74      	ldr	r3, [pc, #464]	; (8003fc0 <drawCurrentStateOfLights+0x1e0>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01a      	beq.n	8003e2a <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003df4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	2305      	movs	r3, #5
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	2315      	movs	r3, #21
 8003e00:	2221      	movs	r2, #33	; 0x21
 8003e02:	2141      	movs	r1, #65	; 0x41
 8003e04:	20c8      	movs	r0, #200	; 0xc8
 8003e06:	f7fd fc22 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003e0a:	496e      	ldr	r1, [pc, #440]	; (8003fc4 <drawCurrentStateOfLights+0x1e4>)
 8003e0c:	486e      	ldr	r0, [pc, #440]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003e0e:	f00a fb33 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e12:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e16:	9301      	str	r3, [sp, #4]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	2243      	movs	r2, #67	; 0x43
 8003e20:	21cb      	movs	r1, #203	; 0xcb
 8003e22:	4869      	ldr	r0, [pc, #420]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003e24:	f7fd fe7e 	bl	8001b24 <EF_PutString>
 8003e28:	e019      	b.n	8003e5e <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003e2a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	2305      	movs	r3, #5
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	2315      	movs	r3, #21
 8003e36:	2221      	movs	r2, #33	; 0x21
 8003e38:	2141      	movs	r1, #65	; 0x41
 8003e3a:	20c8      	movs	r0, #200	; 0xc8
 8003e3c:	f7fd fc07 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003e40:	4962      	ldr	r1, [pc, #392]	; (8003fcc <drawCurrentStateOfLights+0x1ec>)
 8003e42:	4861      	ldr	r0, [pc, #388]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003e44:	f00a fb18 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e48:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e4c:	9301      	str	r3, [sp, #4]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	2300      	movs	r3, #0
 8003e54:	2243      	movs	r2, #67	; 0x43
 8003e56:	21cb      	movs	r1, #203	; 0xcb
 8003e58:	485b      	ldr	r0, [pc, #364]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003e5a:	f7fd fe63 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 8003e5e:	4b58      	ldr	r3, [pc, #352]	; (8003fc0 <drawCurrentStateOfLights+0x1e0>)
 8003e60:	785b      	ldrb	r3, [r3, #1]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01a      	beq.n	8003e9c <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003e66:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	2305      	movs	r3, #5
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	2315      	movs	r3, #21
 8003e72:	2221      	movs	r2, #33	; 0x21
 8003e74:	215f      	movs	r1, #95	; 0x5f
 8003e76:	20c8      	movs	r0, #200	; 0xc8
 8003e78:	f7fd fbe9 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003e7c:	4951      	ldr	r1, [pc, #324]	; (8003fc4 <drawCurrentStateOfLights+0x1e4>)
 8003e7e:	4852      	ldr	r0, [pc, #328]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003e80:	f00a fafa 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e88:	9301      	str	r3, [sp, #4]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2261      	movs	r2, #97	; 0x61
 8003e92:	21cb      	movs	r1, #203	; 0xcb
 8003e94:	484c      	ldr	r0, [pc, #304]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003e96:	f7fd fe45 	bl	8001b24 <EF_PutString>
 8003e9a:	e019      	b.n	8003ed0 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003e9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	2305      	movs	r3, #5
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	2315      	movs	r3, #21
 8003ea8:	2221      	movs	r2, #33	; 0x21
 8003eaa:	215f      	movs	r1, #95	; 0x5f
 8003eac:	20c8      	movs	r0, #200	; 0xc8
 8003eae:	f7fd fbce 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003eb2:	4946      	ldr	r1, [pc, #280]	; (8003fcc <drawCurrentStateOfLights+0x1ec>)
 8003eb4:	4844      	ldr	r0, [pc, #272]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003eb6:	f00a fadf 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003eba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2261      	movs	r2, #97	; 0x61
 8003ec8:	21cb      	movs	r1, #203	; 0xcb
 8003eca:	483f      	ldr	r0, [pc, #252]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003ecc:	f7fd fe2a 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 8003ed0:	4b3b      	ldr	r3, [pc, #236]	; (8003fc0 <drawCurrentStateOfLights+0x1e0>)
 8003ed2:	789b      	ldrb	r3, [r3, #2]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01a      	beq.n	8003f0e <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003ed8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	2305      	movs	r3, #5
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	2315      	movs	r3, #21
 8003ee4:	2221      	movs	r2, #33	; 0x21
 8003ee6:	217d      	movs	r1, #125	; 0x7d
 8003ee8:	20c8      	movs	r0, #200	; 0xc8
 8003eea:	f7fd fbb0 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003eee:	4935      	ldr	r1, [pc, #212]	; (8003fc4 <drawCurrentStateOfLights+0x1e4>)
 8003ef0:	4835      	ldr	r0, [pc, #212]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003ef2:	f00a fac1 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003ef6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	2300      	movs	r3, #0
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	2300      	movs	r3, #0
 8003f02:	227f      	movs	r2, #127	; 0x7f
 8003f04:	21cb      	movs	r1, #203	; 0xcb
 8003f06:	4830      	ldr	r0, [pc, #192]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003f08:	f7fd fe0c 	bl	8001b24 <EF_PutString>
 8003f0c:	e019      	b.n	8003f42 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003f0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f12:	9301      	str	r3, [sp, #4]
 8003f14:	2305      	movs	r3, #5
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	2315      	movs	r3, #21
 8003f1a:	2221      	movs	r2, #33	; 0x21
 8003f1c:	217d      	movs	r1, #125	; 0x7d
 8003f1e:	20c8      	movs	r0, #200	; 0xc8
 8003f20:	f7fd fb95 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003f24:	4929      	ldr	r1, [pc, #164]	; (8003fcc <drawCurrentStateOfLights+0x1ec>)
 8003f26:	4828      	ldr	r0, [pc, #160]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003f28:	f00a faa6 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003f2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	2300      	movs	r3, #0
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	2300      	movs	r3, #0
 8003f38:	227f      	movs	r2, #127	; 0x7f
 8003f3a:	21cb      	movs	r1, #203	; 0xcb
 8003f3c:	4822      	ldr	r0, [pc, #136]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003f3e:	f7fd fdf1 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8003f42:	4b1f      	ldr	r3, [pc, #124]	; (8003fc0 <drawCurrentStateOfLights+0x1e0>)
 8003f44:	78db      	ldrb	r3, [r3, #3]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01a      	beq.n	8003f80 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003f4a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003f4e:	9301      	str	r3, [sp, #4]
 8003f50:	2305      	movs	r3, #5
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2315      	movs	r3, #21
 8003f56:	2221      	movs	r2, #33	; 0x21
 8003f58:	219b      	movs	r1, #155	; 0x9b
 8003f5a:	20c8      	movs	r0, #200	; 0xc8
 8003f5c:	f7fd fb77 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003f60:	4918      	ldr	r1, [pc, #96]	; (8003fc4 <drawCurrentStateOfLights+0x1e4>)
 8003f62:	4819      	ldr	r0, [pc, #100]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003f64:	f00a fa88 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003f68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	2300      	movs	r3, #0
 8003f74:	229d      	movs	r2, #157	; 0x9d
 8003f76:	21cb      	movs	r1, #203	; 0xcb
 8003f78:	4813      	ldr	r0, [pc, #76]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003f7a:	f7fd fdd3 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8003f7e:	e019      	b.n	8003fb4 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003f80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	2305      	movs	r3, #5
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	2315      	movs	r3, #21
 8003f8c:	2221      	movs	r2, #33	; 0x21
 8003f8e:	219b      	movs	r1, #155	; 0x9b
 8003f90:	20c8      	movs	r0, #200	; 0xc8
 8003f92:	f7fd fb5c 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003f96:	490d      	ldr	r1, [pc, #52]	; (8003fcc <drawCurrentStateOfLights+0x1ec>)
 8003f98:	480b      	ldr	r0, [pc, #44]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003f9a:	f00a fa6d 	bl	800e478 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003f9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	229d      	movs	r2, #157	; 0x9d
 8003fac:	21cb      	movs	r1, #203	; 0xcb
 8003fae:	4806      	ldr	r0, [pc, #24]	; (8003fc8 <drawCurrentStateOfLights+0x1e8>)
 8003fb0:	f7fd fdb8 	bl	8001b24 <EF_PutString>
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	080131a8 	.word	0x080131a8
 8003fc0:	20000274 	.word	0x20000274
 8003fc4:	080122ec 	.word	0x080122ec
 8003fc8:	200002c4 	.word	0x200002c4
 8003fcc:	080122f0 	.word	0x080122f0

08003fd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	; 0x28
 8003fd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd6:	f107 0314 	add.w	r3, r7, #20
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	605a      	str	r2, [r3, #4]
 8003fe0:	609a      	str	r2, [r3, #8]
 8003fe2:	60da      	str	r2, [r3, #12]
 8003fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	4b3f      	ldr	r3, [pc, #252]	; (80040e8 <MX_GPIO_Init+0x118>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	4a3e      	ldr	r2, [pc, #248]	; (80040e8 <MX_GPIO_Init+0x118>)
 8003ff0:	f043 0304 	orr.w	r3, r3, #4
 8003ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff6:	4b3c      	ldr	r3, [pc, #240]	; (80040e8 <MX_GPIO_Init+0x118>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <MX_GPIO_Init+0x118>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	4a37      	ldr	r2, [pc, #220]	; (80040e8 <MX_GPIO_Init+0x118>)
 800400c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004010:	6313      	str	r3, [r2, #48]	; 0x30
 8004012:	4b35      	ldr	r3, [pc, #212]	; (80040e8 <MX_GPIO_Init+0x118>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	4b31      	ldr	r3, [pc, #196]	; (80040e8 <MX_GPIO_Init+0x118>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	4a30      	ldr	r2, [pc, #192]	; (80040e8 <MX_GPIO_Init+0x118>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	6313      	str	r3, [r2, #48]	; 0x30
 800402e:	4b2e      	ldr	r3, [pc, #184]	; (80040e8 <MX_GPIO_Init+0x118>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	60bb      	str	r3, [r7, #8]
 8004038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	4b2a      	ldr	r3, [pc, #168]	; (80040e8 <MX_GPIO_Init+0x118>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	4a29      	ldr	r2, [pc, #164]	; (80040e8 <MX_GPIO_Init+0x118>)
 8004044:	f043 0302 	orr.w	r3, r3, #2
 8004048:	6313      	str	r3, [r2, #48]	; 0x30
 800404a:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <MX_GPIO_Init+0x118>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8004056:	2200      	movs	r2, #0
 8004058:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800405c:	4823      	ldr	r0, [pc, #140]	; (80040ec <MX_GPIO_Init+0x11c>)
 800405e:	f003 fdbf 	bl	8007be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8004062:	2200      	movs	r2, #0
 8004064:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8004068:	4821      	ldr	r0, [pc, #132]	; (80040f0 <MX_GPIO_Init+0x120>)
 800406a:	f003 fdb9 	bl	8007be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 800406e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004074:	2301      	movs	r3, #1
 8004076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407c:	2300      	movs	r3, #0
 800407e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8004080:	f107 0314 	add.w	r3, r7, #20
 8004084:	4619      	mov	r1, r3
 8004086:	4819      	ldr	r0, [pc, #100]	; (80040ec <MX_GPIO_Init+0x11c>)
 8004088:	f003 fc0e 	bl	80078a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTC_IRQ_Pin;
 800408c:	2310      	movs	r3, #16
 800408e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004090:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004096:	2301      	movs	r3, #1
 8004098:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTC_IRQ_GPIO_Port, &GPIO_InitStruct);
 800409a:	f107 0314 	add.w	r3, r7, #20
 800409e:	4619      	mov	r1, r3
 80040a0:	4814      	ldr	r0, [pc, #80]	; (80040f4 <MX_GPIO_Init+0x124>)
 80040a2:	f003 fc01 	bl	80078a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 80040a6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80040aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ac:	2301      	movs	r3, #1
 80040ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b4:	2300      	movs	r3, #0
 80040b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b8:	f107 0314 	add.w	r3, r7, #20
 80040bc:	4619      	mov	r1, r3
 80040be:	480c      	ldr	r0, [pc, #48]	; (80040f0 <MX_GPIO_Init+0x120>)
 80040c0:	f003 fbf2 	bl	80078a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80040c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80040ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80040ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80040d4:	f107 0314 	add.w	r3, r7, #20
 80040d8:	4619      	mov	r1, r3
 80040da:	4806      	ldr	r0, [pc, #24]	; (80040f4 <MX_GPIO_Init+0x124>)
 80040dc:	f003 fbe4 	bl	80078a8 <HAL_GPIO_Init>

}
 80040e0:	bf00      	nop
 80040e2:	3728      	adds	r7, #40	; 0x28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40020800 	.word	0x40020800
 80040f0:	40020400 	.word	0x40020400
 80040f4:	40020000 	.word	0x40020000

080040f8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80040fc:	4b12      	ldr	r3, [pc, #72]	; (8004148 <MX_I2C1_Init+0x50>)
 80040fe:	4a13      	ldr	r2, [pc, #76]	; (800414c <MX_I2C1_Init+0x54>)
 8004100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004102:	4b11      	ldr	r3, [pc, #68]	; (8004148 <MX_I2C1_Init+0x50>)
 8004104:	4a12      	ldr	r2, [pc, #72]	; (8004150 <MX_I2C1_Init+0x58>)
 8004106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004108:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <MX_I2C1_Init+0x50>)
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <MX_I2C1_Init+0x50>)
 8004110:	2200      	movs	r2, #0
 8004112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004114:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <MX_I2C1_Init+0x50>)
 8004116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800411a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <MX_I2C1_Init+0x50>)
 800411e:	2200      	movs	r2, #0
 8004120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004122:	4b09      	ldr	r3, [pc, #36]	; (8004148 <MX_I2C1_Init+0x50>)
 8004124:	2200      	movs	r2, #0
 8004126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004128:	4b07      	ldr	r3, [pc, #28]	; (8004148 <MX_I2C1_Init+0x50>)
 800412a:	2200      	movs	r2, #0
 800412c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <MX_I2C1_Init+0x50>)
 8004130:	2200      	movs	r2, #0
 8004132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004134:	4804      	ldr	r0, [pc, #16]	; (8004148 <MX_I2C1_Init+0x50>)
 8004136:	f003 fd9f 	bl	8007c78 <HAL_I2C_Init>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004140:	f000 fa7c 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004144:	bf00      	nop
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20000398 	.word	0x20000398
 800414c:	40005400 	.word	0x40005400
 8004150:	00061a80 	.word	0x00061a80

08004154 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004158:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <MX_I2C3_Init+0x50>)
 800415a:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <MX_I2C3_Init+0x54>)
 800415c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800415e:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <MX_I2C3_Init+0x50>)
 8004160:	4a12      	ldr	r2, [pc, #72]	; (80041ac <MX_I2C3_Init+0x58>)
 8004162:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004164:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <MX_I2C3_Init+0x50>)
 8004166:	2200      	movs	r2, #0
 8004168:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800416a:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <MX_I2C3_Init+0x50>)
 800416c:	2200      	movs	r2, #0
 800416e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <MX_I2C3_Init+0x50>)
 8004172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004176:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004178:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <MX_I2C3_Init+0x50>)
 800417a:	2200      	movs	r2, #0
 800417c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <MX_I2C3_Init+0x50>)
 8004180:	2200      	movs	r2, #0
 8004182:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <MX_I2C3_Init+0x50>)
 8004186:	2200      	movs	r2, #0
 8004188:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800418a:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <MX_I2C3_Init+0x50>)
 800418c:	2200      	movs	r2, #0
 800418e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004190:	4804      	ldr	r0, [pc, #16]	; (80041a4 <MX_I2C3_Init+0x50>)
 8004192:	f003 fd71 	bl	8007c78 <HAL_I2C_Init>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800419c:	f000 fa4e 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80041a0:	bf00      	nop
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	200002e4 	.word	0x200002e4
 80041a8:	40005c00 	.word	0x40005c00
 80041ac:	000186a0 	.word	0x000186a0

080041b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08c      	sub	sp, #48	; 0x30
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b8:	f107 031c 	add.w	r3, r7, #28
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	60da      	str	r2, [r3, #12]
 80041c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a74      	ldr	r2, [pc, #464]	; (80043a0 <HAL_I2C_MspInit+0x1f0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	f040 8090 	bne.w	80042f4 <HAL_I2C_MspInit+0x144>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041d4:	2300      	movs	r3, #0
 80041d6:	61bb      	str	r3, [r7, #24]
 80041d8:	4b72      	ldr	r3, [pc, #456]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	4a71      	ldr	r2, [pc, #452]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 80041de:	f043 0302 	orr.w	r3, r3, #2
 80041e2:	6313      	str	r3, [r2, #48]	; 0x30
 80041e4:	4b6f      	ldr	r3, [pc, #444]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041f0:	23c0      	movs	r3, #192	; 0xc0
 80041f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041f4:	2312      	movs	r3, #18
 80041f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041fc:	2303      	movs	r3, #3
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004200:	2304      	movs	r3, #4
 8004202:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004204:	f107 031c 	add.w	r3, r7, #28
 8004208:	4619      	mov	r1, r3
 800420a:	4867      	ldr	r0, [pc, #412]	; (80043a8 <HAL_I2C_MspInit+0x1f8>)
 800420c:	f003 fb4c 	bl	80078a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	4b63      	ldr	r3, [pc, #396]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	4a62      	ldr	r2, [pc, #392]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 800421a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800421e:	6413      	str	r3, [r2, #64]	; 0x40
 8004220:	4b60      	ldr	r3, [pc, #384]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800422c:	4b5f      	ldr	r3, [pc, #380]	; (80043ac <HAL_I2C_MspInit+0x1fc>)
 800422e:	4a60      	ldr	r2, [pc, #384]	; (80043b0 <HAL_I2C_MspInit+0x200>)
 8004230:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004232:	4b5e      	ldr	r3, [pc, #376]	; (80043ac <HAL_I2C_MspInit+0x1fc>)
 8004234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004238:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800423a:	4b5c      	ldr	r3, [pc, #368]	; (80043ac <HAL_I2C_MspInit+0x1fc>)
 800423c:	2200      	movs	r2, #0
 800423e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004240:	4b5a      	ldr	r3, [pc, #360]	; (80043ac <HAL_I2C_MspInit+0x1fc>)
 8004242:	2200      	movs	r2, #0
 8004244:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004246:	4b59      	ldr	r3, [pc, #356]	; (80043ac <HAL_I2C_MspInit+0x1fc>)
 8004248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800424c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800424e:	4b57      	ldr	r3, [pc, #348]	; (80043ac <HAL_I2C_MspInit+0x1fc>)
 8004250:	2200      	movs	r2, #0
 8004252:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004254:	4b55      	ldr	r3, [pc, #340]	; (80043ac <HAL_I2C_MspInit+0x1fc>)
 8004256:	2200      	movs	r2, #0
 8004258:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800425a:	4b54      	ldr	r3, [pc, #336]	; (80043ac <HAL_I2C_MspInit+0x1fc>)
 800425c:	2200      	movs	r2, #0
 800425e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004260:	4b52      	ldr	r3, [pc, #328]	; (80043ac <HAL_I2C_MspInit+0x1fc>)
 8004262:	2200      	movs	r2, #0
 8004264:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004266:	4b51      	ldr	r3, [pc, #324]	; (80043ac <HAL_I2C_MspInit+0x1fc>)
 8004268:	2200      	movs	r2, #0
 800426a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800426c:	484f      	ldr	r0, [pc, #316]	; (80043ac <HAL_I2C_MspInit+0x1fc>)
 800426e:	f002 ff0b 	bl	8007088 <HAL_DMA_Init>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8004278:	f000 f9e0 	bl	800463c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a4b      	ldr	r2, [pc, #300]	; (80043ac <HAL_I2C_MspInit+0x1fc>)
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
 8004282:	4a4a      	ldr	r2, [pc, #296]	; (80043ac <HAL_I2C_MspInit+0x1fc>)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8004288:	4b4a      	ldr	r3, [pc, #296]	; (80043b4 <HAL_I2C_MspInit+0x204>)
 800428a:	4a4b      	ldr	r2, [pc, #300]	; (80043b8 <HAL_I2C_MspInit+0x208>)
 800428c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800428e:	4b49      	ldr	r3, [pc, #292]	; (80043b4 <HAL_I2C_MspInit+0x204>)
 8004290:	2200      	movs	r2, #0
 8004292:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004294:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <HAL_I2C_MspInit+0x204>)
 8004296:	2240      	movs	r2, #64	; 0x40
 8004298:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800429a:	4b46      	ldr	r3, [pc, #280]	; (80043b4 <HAL_I2C_MspInit+0x204>)
 800429c:	2200      	movs	r2, #0
 800429e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042a0:	4b44      	ldr	r3, [pc, #272]	; (80043b4 <HAL_I2C_MspInit+0x204>)
 80042a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042a6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042a8:	4b42      	ldr	r3, [pc, #264]	; (80043b4 <HAL_I2C_MspInit+0x204>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042ae:	4b41      	ldr	r3, [pc, #260]	; (80043b4 <HAL_I2C_MspInit+0x204>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80042b4:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <HAL_I2C_MspInit+0x204>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80042ba:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <HAL_I2C_MspInit+0x204>)
 80042bc:	2200      	movs	r2, #0
 80042be:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042c0:	4b3c      	ldr	r3, [pc, #240]	; (80043b4 <HAL_I2C_MspInit+0x204>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80042c6:	483b      	ldr	r0, [pc, #236]	; (80043b4 <HAL_I2C_MspInit+0x204>)
 80042c8:	f002 fede 	bl	8007088 <HAL_DMA_Init>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80042d2:	f000 f9b3 	bl	800463c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a36      	ldr	r2, [pc, #216]	; (80043b4 <HAL_I2C_MspInit+0x204>)
 80042da:	635a      	str	r2, [r3, #52]	; 0x34
 80042dc:	4a35      	ldr	r2, [pc, #212]	; (80043b4 <HAL_I2C_MspInit+0x204>)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80042e2:	2200      	movs	r2, #0
 80042e4:	2100      	movs	r1, #0
 80042e6:	2020      	movs	r0, #32
 80042e8:	f002 fe6d 	bl	8006fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80042ec:	2020      	movs	r0, #32
 80042ee:	f002 fe86 	bl	8006ffe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80042f2:	e050      	b.n	8004396 <HAL_I2C_MspInit+0x1e6>
  else if(i2cHandle->Instance==I2C3)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a30      	ldr	r2, [pc, #192]	; (80043bc <HAL_I2C_MspInit+0x20c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d14b      	bne.n	8004396 <HAL_I2C_MspInit+0x1e6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	4b28      	ldr	r3, [pc, #160]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	4a27      	ldr	r2, [pc, #156]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6313      	str	r3, [r2, #48]	; 0x30
 800430e:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	4a20      	ldr	r2, [pc, #128]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 8004324:	f043 0302 	orr.w	r3, r3, #2
 8004328:	6313      	str	r3, [r2, #48]	; 0x30
 800432a:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800433a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800433c:	2312      	movs	r3, #18
 800433e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004340:	2300      	movs	r3, #0
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004344:	2303      	movs	r3, #3
 8004346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004348:	2304      	movs	r3, #4
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800434c:	f107 031c 	add.w	r3, r7, #28
 8004350:	4619      	mov	r1, r3
 8004352:	481b      	ldr	r0, [pc, #108]	; (80043c0 <HAL_I2C_MspInit+0x210>)
 8004354:	f003 faa8 	bl	80078a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800435c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800435e:	2312      	movs	r3, #18
 8004360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004366:	2303      	movs	r3, #3
 8004368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800436a:	2309      	movs	r3, #9
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800436e:	f107 031c 	add.w	r3, r7, #28
 8004372:	4619      	mov	r1, r3
 8004374:	480c      	ldr	r0, [pc, #48]	; (80043a8 <HAL_I2C_MspInit+0x1f8>)
 8004376:	f003 fa97 	bl	80078a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800437a:	2300      	movs	r3, #0
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	4a08      	ldr	r2, [pc, #32]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 8004384:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004388:	6413      	str	r3, [r2, #64]	; 0x40
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_I2C_MspInit+0x1f4>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004392:	60bb      	str	r3, [r7, #8]
 8004394:	68bb      	ldr	r3, [r7, #8]
}
 8004396:	bf00      	nop
 8004398:	3730      	adds	r7, #48	; 0x30
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40005400 	.word	0x40005400
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40020400 	.word	0x40020400
 80043ac:	200003ec 	.word	0x200003ec
 80043b0:	40026010 	.word	0x40026010
 80043b4:	20000338 	.word	0x20000338
 80043b8:	40026028 	.word	0x40026028
 80043bc:	40005c00 	.word	0x40005c00
 80043c0:	40020000 	.word	0x40020000

080043c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043ca:	f002 fc27 	bl	8006c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043ce:	f000 f857 	bl	8004480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043d2:	f7ff fdfd 	bl	8003fd0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80043d6:	f001 fe65 	bl	80060a4 <MX_SPI1_Init>
  MX_DMA_Init();
 80043da:	f7fe f88b 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80043de:	f002 fb1d 	bl	8006a1c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80043e2:	f001 fe95 	bl	8006110 <MX_SPI3_Init>
  MX_I2C1_Init();
 80043e6:	f7ff fe87 	bl	80040f8 <MX_I2C1_Init>
  MX_TIM11_Init();
 80043ea:	f002 f90b 	bl	8006604 <MX_TIM11_Init>
  MX_TIM10_Init();
 80043ee:	f002 f8e5 	bl	80065bc <MX_TIM10_Init>
  MX_I2C3_Init();
 80043f2:	f7ff feaf 	bl	8004154 <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80043f6:	f000 f8ab 	bl	8004550 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 80043fa:	481b      	ldr	r0, [pc, #108]	; (8004468 <main+0xa4>)
 80043fc:	f007 fdec 	bl	800bfd8 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 8004400:	481a      	ldr	r0, [pc, #104]	; (800446c <main+0xa8>)
 8004402:	f7fd fdd7 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8004406:	491a      	ldr	r1, [pc, #104]	; (8004470 <main+0xac>)
 8004408:	481a      	ldr	r0, [pc, #104]	; (8004474 <main+0xb0>)
 800440a:	f002 fab8 	bl	800697e <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 800440e:	2117      	movs	r1, #23
 8004410:	4819      	ldr	r0, [pc, #100]	; (8004478 <main+0xb4>)
 8004412:	f7fe f81f 	bl	8002454 <XPT2046_Init>
  // RTC Initialization
  DS3231_Init(&hi2c1);
 8004416:	4819      	ldr	r0, [pc, #100]	; (800447c <main+0xb8>)
 8004418:	f7fe f8a4 	bl	8002564 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800441c:	2001      	movs	r0, #1
 800441e:	f7fe f8fb 	bl	8002618 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 8004422:	2001      	movs	r0, #1
 8004424:	f7fe f918 	bl	8002658 <DS3231_EnableOscillator>


  uint8_t result = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	71fb      	strb	r3, [r7, #7]
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 800442c:	e001      	b.n	8004432 <main+0x6e>
  Error_Handler();
 800442e:	f000 f905 	bl	800463c <Error_Handler>
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 8004432:	1dfb      	adds	r3, r7, #7
 8004434:	2201      	movs	r2, #1
 8004436:	4619      	mov	r1, r3
 8004438:	2001      	movs	r0, #1
 800443a:	f7fe fa3b 	bl	80028b4 <eeprom_read>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f4      	bne.n	800442e <main+0x6a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8004444:	480b      	ldr	r0, [pc, #44]	; (8004474 <main+0xb0>)
 8004446:	f002 fa4e 	bl	80068e6 <UARTDMA_IsDataReceivedReady>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <main+0x92>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8004450:	4808      	ldr	r0, [pc, #32]	; (8004474 <main+0xb0>)
 8004452:	f001 f9a5 	bl	80057a0 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8004456:	4807      	ldr	r0, [pc, #28]	; (8004474 <main+0xb0>)
 8004458:	f002 fa57 	bl	800690a <UARTDMA_TransmitEvent>

	  //
	  // TOUCH
	  //
	  XPT2046_Task();
 800445c:	f7fd ff28 	bl	80022b0 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  MenuTFT();
 8004460:	f000 f8f2 	bl	8004648 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8004464:	e7ee      	b.n	8004444 <main+0x80>
 8004466:	bf00      	nop
 8004468:	2000069c 	.word	0x2000069c
 800446c:	200005fc 	.word	0x200005fc
 8004470:	200007a4 	.word	0x200007a4
 8004474:	2000044c 	.word	0x2000044c
 8004478:	200005a4 	.word	0x200005a4
 800447c:	20000398 	.word	0x20000398

08004480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b094      	sub	sp, #80	; 0x50
 8004484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004486:	f107 0320 	add.w	r3, r7, #32
 800448a:	2230      	movs	r2, #48	; 0x30
 800448c:	2100      	movs	r1, #0
 800448e:	4618      	mov	r0, r3
 8004490:	f009 f96a 	bl	800d768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004494:	f107 030c 	add.w	r3, r7, #12
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	60da      	str	r2, [r3, #12]
 80044a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	4b27      	ldr	r3, [pc, #156]	; (8004548 <SystemClock_Config+0xc8>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	4a26      	ldr	r2, [pc, #152]	; (8004548 <SystemClock_Config+0xc8>)
 80044ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b2:	6413      	str	r3, [r2, #64]	; 0x40
 80044b4:	4b24      	ldr	r3, [pc, #144]	; (8004548 <SystemClock_Config+0xc8>)
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044c0:	2300      	movs	r3, #0
 80044c2:	607b      	str	r3, [r7, #4]
 80044c4:	4b21      	ldr	r3, [pc, #132]	; (800454c <SystemClock_Config+0xcc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a20      	ldr	r2, [pc, #128]	; (800454c <SystemClock_Config+0xcc>)
 80044ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b1e      	ldr	r3, [pc, #120]	; (800454c <SystemClock_Config+0xcc>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044d8:	607b      	str	r3, [r7, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044dc:	2301      	movs	r3, #1
 80044de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044e6:	2302      	movs	r3, #2
 80044e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80044f0:	230c      	movs	r3, #12
 80044f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80044f4:	2360      	movs	r3, #96	; 0x60
 80044f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044f8:	2302      	movs	r3, #2
 80044fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80044fc:	2304      	movs	r3, #4
 80044fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004500:	f107 0320 	add.w	r3, r7, #32
 8004504:	4618      	mov	r0, r3
 8004506:	f006 fcbb 	bl	800ae80 <HAL_RCC_OscConfig>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004510:	f000 f894 	bl	800463c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004514:	230f      	movs	r3, #15
 8004516:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004518:	2302      	movs	r3, #2
 800451a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004524:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800452a:	f107 030c 	add.w	r3, r7, #12
 800452e:	2103      	movs	r1, #3
 8004530:	4618      	mov	r0, r3
 8004532:	f006 ff1d 	bl	800b370 <HAL_RCC_ClockConfig>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800453c:	f000 f87e 	bl	800463c <Error_Handler>
  }
}
 8004540:	bf00      	nop
 8004542:	3750      	adds	r7, #80	; 0x50
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40023800 	.word	0x40023800
 800454c:	40007000 	.word	0x40007000

08004550 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004554:	2200      	movs	r2, #0
 8004556:	2100      	movs	r1, #0
 8004558:	200a      	movs	r0, #10
 800455a:	f002 fd34 	bl	8006fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800455e:	200a      	movs	r0, #10
 8004560:	f002 fd4d 	bl	8006ffe <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004564:	2200      	movs	r2, #0
 8004566:	2100      	movs	r1, #0
 8004568:	2017      	movs	r0, #23
 800456a:	f002 fd2c 	bl	8006fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800456e:	2017      	movs	r0, #23
 8004570:	f002 fd45 	bl	8006ffe <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004574:	2200      	movs	r2, #0
 8004576:	2100      	movs	r1, #0
 8004578:	201f      	movs	r0, #31
 800457a:	f002 fd24 	bl	8006fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800457e:	201f      	movs	r0, #31
 8004580:	f002 fd3d 	bl	8006ffe <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004584:	2200      	movs	r2, #0
 8004586:	2100      	movs	r1, #0
 8004588:	2026      	movs	r0, #38	; 0x26
 800458a:	f002 fd1c 	bl	8006fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800458e:	2026      	movs	r0, #38	; 0x26
 8004590:	f002 fd35 	bl	8006ffe <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004594:	2200      	movs	r2, #0
 8004596:	2100      	movs	r1, #0
 8004598:	2033      	movs	r0, #51	; 0x33
 800459a:	f002 fd14 	bl	8006fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800459e:	2033      	movs	r0, #51	; 0x33
 80045a0:	f002 fd2d 	bl	8006ffe <HAL_NVIC_EnableIRQ>
}
 80045a4:	bf00      	nop
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a12      	ldr	r2, [pc, #72]	; (8004600 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d101      	bne.n	80045be <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen();
 80045ba:	f7ff fa31 	bl	8003a20 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a10      	ldr	r2, [pc, #64]	; (8004604 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d117      	bne.n	80045f8 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S)
 80045c8:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d90d      	bls.n	80045ec <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin);
 80045d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045d4:	480d      	ldr	r0, [pc, #52]	; (800460c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80045d6:	f003 fb1c 	bl	8007c12 <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 80045da:	2000      	movs	r0, #0
 80045dc:	f7ff faaa 	bl	8003b34 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 80045e6:	480a      	ldr	r0, [pc, #40]	; (8004610 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80045e8:	f007 fd58 	bl	800c09c <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	4b04      	ldr	r3, [pc, #16]	; (8004608 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80045f6:	701a      	strb	r2, [r3, #0]
	}
}
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40014800 	.word	0x40014800
 8004604:	40014400 	.word	0x40014400
 8004608:	2000024e 	.word	0x2000024e
 800460c:	40020800 	.word	0x40020800
 8004610:	20000654 	.word	0x20000654

08004614 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin)
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004624:	d101      	bne.n	800462a <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8004626:	f7fd ff09 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == RTC_IRQ_Pin) // Interrupt from RTC - alarm one per minute
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	2b10      	cmp	r3, #16
 800462e:	d101      	bne.n	8004634 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8004630:	f7fe f856 	bl	80026e0 <DS3231_ClearAlarm2Flag>

	}
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004640:	b672      	cpsid	i
}
 8004642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004644:	e7fe      	b.n	8004644 <Error_Handler+0x8>
	...

08004648 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
	switch(State)
 800464c:	4b3e      	ldr	r3, [pc, #248]	; (8004748 <MenuTFT+0x100>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b06      	cmp	r3, #6
 8004652:	d876      	bhi.n	8004742 <MenuTFT+0xfa>
 8004654:	a201      	add	r2, pc, #4	; (adr r2, 800465c <MenuTFT+0x14>)
 8004656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465a:	bf00      	nop
 800465c:	08004679 	.word	0x08004679
 8004660:	0800468b 	.word	0x0800468b
 8004664:	080046bf 	.word	0x080046bf
 8004668:	080046ef 	.word	0x080046ef
 800466c:	0800470d 	.word	0x0800470d
 8004670:	080046d7 	.word	0x080046d7
 8004674:	08004725 	.word	0x08004725
	{
	case MENUTFT_INIT:
		system_init();
 8004678:	f7fe f99c 	bl	80029b4 <system_init>
		State = MENUTFT_PARAMETERS;
 800467c:	4b32      	ldr	r3, [pc, #200]	; (8004748 <MenuTFT+0x100>)
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8004682:	4b32      	ldr	r3, [pc, #200]	; (800474c <MenuTFT+0x104>)
 8004684:	2201      	movs	r2, #1
 8004686:	701a      	strb	r2, [r3, #0]
		break;
 8004688:	e05b      	b.n	8004742 <MenuTFT+0xfa>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 800468a:	4b30      	ldr	r3, [pc, #192]	; (800474c <MenuTFT+0x104>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d112      	bne.n	80046b8 <MenuTFT+0x70>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8004692:	4b2f      	ldr	r3, [pc, #188]	; (8004750 <MenuTFT+0x108>)
 8004694:	edd3 7a00 	vldr	s15, [r3]
 8004698:	4b2e      	ldr	r3, [pc, #184]	; (8004754 <MenuTFT+0x10c>)
 800469a:	ed93 7a00 	vldr	s14, [r3]
 800469e:	eeb0 1a47 	vmov.f32	s2, s14
 80046a2:	2100      	movs	r1, #0
 80046a4:	2000      	movs	r0, #0
 80046a6:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8004758 <MenuTFT+0x110>
 80046aa:	eeb0 0a67 	vmov.f32	s0, s15
 80046ae:	f7fe fa79 	bl	8002ba4 <showCurrentParameters>
			StateChangeFlag = 0;
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <MenuTFT+0x104>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 80046b8:	f000 f854 	bl	8004764 <TouchParametersActivity>
		break;
 80046bc:	e041      	b.n	8004742 <MenuTFT+0xfa>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 80046be:	4b23      	ldr	r3, [pc, #140]	; (800474c <MenuTFT+0x104>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d104      	bne.n	80046d0 <MenuTFT+0x88>
		{
			showControlPanel();
 80046c6:	f7fe fbb7 	bl	8002e38 <showControlPanel>
			StateChangeFlag = 0;
 80046ca:	4b20      	ldr	r3, [pc, #128]	; (800474c <MenuTFT+0x104>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 80046d0:	f000 f8a8 	bl	8004824 <TouchSwitchActivity>
		break;
 80046d4:	e035      	b.n	8004742 <MenuTFT+0xfa>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 80046d6:	4b1d      	ldr	r3, [pc, #116]	; (800474c <MenuTFT+0x104>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d104      	bne.n	80046e8 <MenuTFT+0xa0>
		{
			showLightsControlPanel();
 80046de:	f7fe fc85 	bl	8002fec <showLightsControlPanel>
			StateChangeFlag = 0;
 80046e2:	4b1a      	ldr	r3, [pc, #104]	; (800474c <MenuTFT+0x104>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 80046e8:	f000 fa84 	bl	8004bf4 <TouchLightsActivity>
		break;
 80046ec:	e029      	b.n	8004742 <MenuTFT+0xfa>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 80046ee:	4b17      	ldr	r3, [pc, #92]	; (800474c <MenuTFT+0x104>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d107      	bne.n	8004706 <MenuTFT+0xbe>
		{
			showClockSetPanel();
 80046f6:	f7fe fd51 	bl	800319c <showClockSetPanel>
			ClockChangeFlag = 1;
 80046fa:	4b18      	ldr	r3, [pc, #96]	; (800475c <MenuTFT+0x114>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8004700:	4b12      	ldr	r3, [pc, #72]	; (800474c <MenuTFT+0x104>)
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8004706:	f000 fc29 	bl	8004f5c <TouchClockActivity>
		break;
 800470a:	e01a      	b.n	8004742 <MenuTFT+0xfa>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <MenuTFT+0x104>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d104      	bne.n	800471e <MenuTFT+0xd6>
		{
			showPreparedActivitiesPanel();
 8004714:	f7fe fe5a 	bl	80033cc <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <MenuTFT+0x104>)
 800471a:	2200      	movs	r2, #0
 800471c:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 800471e:	f000 fd6b 	bl	80051f8 <TouchPredefinedActivityActivity>
		break;
 8004722:	e00e      	b.n	8004742 <MenuTFT+0xfa>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <MenuTFT+0x104>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d107      	bne.n	800473c <MenuTFT+0xf4>
		{
			showWSLedPanel();
 800472c:	f7fe ff5e 	bl	80035ec <showWSLedPanel>
			WSLedChangeFlag = 1;
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <MenuTFT+0x118>)
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <MenuTFT+0x104>)
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 800473c:	f000 fe84 	bl	8005448 <TouchWSLedActivity>
		break;
 8004740:	bf00      	nop
	}
}
 8004742:	bf00      	nop
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000258 	.word	0x20000258
 800474c:	2000024f 	.word	0x2000024f
 8004750:	2000025c 	.word	0x2000025c
 8004754:	20000264 	.word	0x20000264
 8004758:	00000000 	.word	0x00000000
 800475c:	20000250 	.word	0x20000250
 8004760:	20000251 	.word	0x20000251

08004764 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 800476a:	f7fd fd8f 	bl	800228c <XPT2046_IsTouched>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d04c      	beq.n	800480e <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004774:	f002 fab8 	bl	8006ce8 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	4b27      	ldr	r3, [pc, #156]	; (8004818 <TouchParametersActivity+0xb4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004784:	d343      	bcc.n	800480e <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004786:	1d3a      	adds	r2, r7, #4
 8004788:	1dbb      	adds	r3, r7, #6
 800478a:	4611      	mov	r1, r2
 800478c:	4618      	mov	r0, r3
 800478e:	f7fd fd3f 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	2b09      	cmp	r3, #9
 8004796:	d90f      	bls.n	80047b8 <TouchParametersActivity+0x54>
 8004798:	88fb      	ldrh	r3, [r7, #6]
 800479a:	2b6e      	cmp	r3, #110	; 0x6e
 800479c:	d80c      	bhi.n	80047b8 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800479e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80047a0:	2bd7      	cmp	r3, #215	; 0xd7
 80047a2:	d909      	bls.n	80047b8 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80047a4:	88bb      	ldrh	r3, [r7, #4]
 80047a6:	2bec      	cmp	r3, #236	; 0xec
 80047a8:	d806      	bhi.n	80047b8 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 80047aa:	4b1c      	ldr	r3, [pc, #112]	; (800481c <TouchParametersActivity+0xb8>)
 80047ac:	2205      	movs	r2, #5
 80047ae:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80047b0:	4b1b      	ldr	r3, [pc, #108]	; (8004820 <TouchParametersActivity+0xbc>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	e025      	b.n	8004804 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	2bdb      	cmp	r3, #219	; 0xdb
 80047bc:	d910      	bls.n	80047e0 <TouchParametersActivity+0x7c>
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80047c4:	d20c      	bcs.n	80047e0 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80047c6:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80047c8:	2bd7      	cmp	r3, #215	; 0xd7
 80047ca:	d909      	bls.n	80047e0 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80047cc:	88bb      	ldrh	r3, [r7, #4]
 80047ce:	2bec      	cmp	r3, #236	; 0xec
 80047d0:	d806      	bhi.n	80047e0 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 80047d2:	4b12      	ldr	r3, [pc, #72]	; (800481c <TouchParametersActivity+0xb8>)
 80047d4:	2202      	movs	r2, #2
 80047d6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80047d8:	4b11      	ldr	r3, [pc, #68]	; (8004820 <TouchParametersActivity+0xbc>)
 80047da:	2201      	movs	r2, #1
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e011      	b.n	8004804 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	2b77      	cmp	r3, #119	; 0x77
 80047e4:	d90e      	bls.n	8004804 <TouchParametersActivity+0xa0>
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	2bd2      	cmp	r3, #210	; 0xd2
 80047ea:	d80b      	bhi.n	8004804 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80047ec:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80047ee:	2bd7      	cmp	r3, #215	; 0xd7
 80047f0:	d908      	bls.n	8004804 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80047f2:	88bb      	ldrh	r3, [r7, #4]
 80047f4:	2bec      	cmp	r3, #236	; 0xec
 80047f6:	d805      	bhi.n	8004804 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 80047f8:	4b08      	ldr	r3, [pc, #32]	; (800481c <TouchParametersActivity+0xb8>)
 80047fa:	2203      	movs	r2, #3
 80047fc:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80047fe:	4b08      	ldr	r3, [pc, #32]	; (8004820 <TouchParametersActivity+0xbc>)
 8004800:	2201      	movs	r2, #1
 8004802:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8004804:	f002 fa70 	bl	8006ce8 <HAL_GetTick>
 8004808:	4603      	mov	r3, r0
 800480a:	4a03      	ldr	r2, [pc, #12]	; (8004818 <TouchParametersActivity+0xb4>)
 800480c:	6013      	str	r3, [r2, #0]
		}
	}
}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000254 	.word	0x20000254
 800481c:	20000258 	.word	0x20000258
 8004820:	2000024f 	.word	0x2000024f

08004824 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 800482a:	f7fd fd2f 	bl	800228c <XPT2046_IsTouched>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 81ce 	beq.w	8004bd2 <TouchSwitchActivity+0x3ae>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004836:	f002 fa57 	bl	8006ce8 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	4bad      	ldr	r3, [pc, #692]	; (8004af4 <TouchSwitchActivity+0x2d0>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004846:	f0c0 81c4 	bcc.w	8004bd2 <TouchSwitchActivity+0x3ae>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800484a:	1d3a      	adds	r2, r7, #4
 800484c:	1dbb      	adds	r3, r7, #6
 800484e:	4611      	mov	r1, r2
 8004850:	4618      	mov	r0, r3
 8004852:	f7fd fcdd 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	2b09      	cmp	r3, #9
 800485a:	d90f      	bls.n	800487c <TouchSwitchActivity+0x58>
 800485c:	88fb      	ldrh	r3, [r7, #6]
 800485e:	2b6e      	cmp	r3, #110	; 0x6e
 8004860:	d80c      	bhi.n	800487c <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004862:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004864:	2bd7      	cmp	r3, #215	; 0xd7
 8004866:	d909      	bls.n	800487c <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004868:	88bb      	ldrh	r3, [r7, #4]
 800486a:	2bec      	cmp	r3, #236	; 0xec
 800486c:	d806      	bhi.n	800487c <TouchSwitchActivity+0x58>
			{
				State = MENUTFT_PARAMETERS;
 800486e:	4ba2      	ldr	r3, [pc, #648]	; (8004af8 <TouchSwitchActivity+0x2d4>)
 8004870:	2201      	movs	r2, #1
 8004872:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004874:	4ba1      	ldr	r3, [pc, #644]	; (8004afc <TouchSwitchActivity+0x2d8>)
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	e1a5      	b.n	8004bc8 <TouchSwitchActivity+0x3a4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	2bdb      	cmp	r3, #219	; 0xdb
 8004880:	d910      	bls.n	80048a4 <TouchSwitchActivity+0x80>
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004888:	d20c      	bcs.n	80048a4 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800488a:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800488c:	2bd7      	cmp	r3, #215	; 0xd7
 800488e:	d909      	bls.n	80048a4 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004890:	88bb      	ldrh	r3, [r7, #4]
 8004892:	2bec      	cmp	r3, #236	; 0xec
 8004894:	d806      	bhi.n	80048a4 <TouchSwitchActivity+0x80>
			{
				State = MENUTFT_LIGHTS;
 8004896:	4b98      	ldr	r3, [pc, #608]	; (8004af8 <TouchSwitchActivity+0x2d4>)
 8004898:	2205      	movs	r2, #5
 800489a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800489c:	4b97      	ldr	r3, [pc, #604]	; (8004afc <TouchSwitchActivity+0x2d8>)
 800489e:	2201      	movs	r2, #1
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	e191      	b.n	8004bc8 <TouchSwitchActivity+0x3a4>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	2b77      	cmp	r3, #119	; 0x77
 80048a8:	d90f      	bls.n	80048ca <TouchSwitchActivity+0xa6>
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	2bd2      	cmp	r3, #210	; 0xd2
 80048ae:	d80c      	bhi.n	80048ca <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80048b0:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80048b2:	2bd7      	cmp	r3, #215	; 0xd7
 80048b4:	d909      	bls.n	80048ca <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80048b6:	88bb      	ldrh	r3, [r7, #4]
 80048b8:	2bec      	cmp	r3, #236	; 0xec
 80048ba:	d806      	bhi.n	80048ca <TouchSwitchActivity+0xa6>
			{
				State = MENUTFT_ACTIVITIES;
 80048bc:	4b8e      	ldr	r3, [pc, #568]	; (8004af8 <TouchSwitchActivity+0x2d4>)
 80048be:	2204      	movs	r2, #4
 80048c0:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80048c2:	4b8e      	ldr	r3, [pc, #568]	; (8004afc <TouchSwitchActivity+0x2d8>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	701a      	strb	r2, [r3, #0]
 80048c8:	e17e      	b.n	8004bc8 <TouchSwitchActivity+0x3a4>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80048d0:	f0c0 817a 	bcc.w	8004bc8 <TouchSwitchActivity+0x3a4>
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80048da:	f080 8175 	bcs.w	8004bc8 <TouchSwitchActivity+0x3a4>
			{
				EF_SetFont(&arial_11ptFontInfo);
 80048de:	4888      	ldr	r0, [pc, #544]	; (8004b00 <TouchSwitchActivity+0x2dc>)
 80048e0:	f7fc ff06 	bl	80016f0 <EF_SetFont>
				//
				// FIRST SWITCH
				if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 80048e4:	88bb      	ldrh	r3, [r7, #4]
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	d954      	bls.n	8004994 <TouchSwitchActivity+0x170>
 80048ea:	88bb      	ldrh	r3, [r7, #4]
 80048ec:	2b56      	cmp	r3, #86	; 0x56
 80048ee:	d851      	bhi.n	8004994 <TouchSwitchActivity+0x170>
				{
					if(SwitchesButtonState[0] >= 1) // if is ON
 80048f0:	4b84      	ldr	r3, [pc, #528]	; (8004b04 <TouchSwitchActivity+0x2e0>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d026      	beq.n	8004946 <TouchSwitchActivity+0x122>
					{
						SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 80048f8:	2006      	movs	r0, #6
 80048fa:	f001 f9e5 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80048fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	2305      	movs	r3, #5
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2315      	movs	r3, #21
 800490a:	2221      	movs	r2, #33	; 0x21
 800490c:	2141      	movs	r1, #65	; 0x41
 800490e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004912:	f7fc fe9c 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004916:	497c      	ldr	r1, [pc, #496]	; (8004b08 <TouchSwitchActivity+0x2e4>)
 8004918:	487c      	ldr	r0, [pc, #496]	; (8004b0c <TouchSwitchActivity+0x2e8>)
 800491a:	f009 fdad 	bl	800e478 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800491e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004922:	9301      	str	r3, [sp, #4]
 8004924:	2300      	movs	r3, #0
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	2300      	movs	r3, #0
 800492a:	2243      	movs	r2, #67	; 0x43
 800492c:	f240 1111 	movw	r1, #273	; 0x111
 8004930:	4876      	ldr	r0, [pc, #472]	; (8004b0c <TouchSwitchActivity+0x2e8>)
 8004932:	f7fd f8f7 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 0;
 8004936:	4b73      	ldr	r3, [pc, #460]	; (8004b04 <TouchSwitchActivity+0x2e0>)
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
						EEPROM_RelayStateUpdate(1, 0);
 800493c:	2100      	movs	r1, #0
 800493e:	2001      	movs	r0, #1
 8004940:	f7fd fffe 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[0] >= 1) // if is ON
 8004944:	e13d      	b.n	8004bc2 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8004946:	2005      	movs	r0, #5
 8004948:	f001 f9be 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800494c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	2305      	movs	r3, #5
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	2315      	movs	r3, #21
 8004958:	2221      	movs	r2, #33	; 0x21
 800495a:	2141      	movs	r1, #65	; 0x41
 800495c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004960:	f7fc fe75 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004964:	496a      	ldr	r1, [pc, #424]	; (8004b10 <TouchSwitchActivity+0x2ec>)
 8004966:	4869      	ldr	r0, [pc, #420]	; (8004b0c <TouchSwitchActivity+0x2e8>)
 8004968:	f009 fd86 	bl	800e478 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800496c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	2300      	movs	r3, #0
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	2300      	movs	r3, #0
 8004978:	2243      	movs	r2, #67	; 0x43
 800497a:	f240 1111 	movw	r1, #273	; 0x111
 800497e:	4863      	ldr	r0, [pc, #396]	; (8004b0c <TouchSwitchActivity+0x2e8>)
 8004980:	f7fd f8d0 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 1;
 8004984:	4b5f      	ldr	r3, [pc, #380]	; (8004b04 <TouchSwitchActivity+0x2e0>)
 8004986:	2201      	movs	r2, #1
 8004988:	701a      	strb	r2, [r3, #0]
						EEPROM_RelayStateUpdate(1, 1);
 800498a:	2101      	movs	r1, #1
 800498c:	2001      	movs	r0, #1
 800498e:	f7fd ffd7 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[0] >= 1) // if is ON
 8004992:	e116      	b.n	8004bc2 <TouchSwitchActivity+0x39e>
					}

				}
				//
				// SECOND SWITCH
				else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8004994:	88bb      	ldrh	r3, [r7, #4]
 8004996:	2b5e      	cmp	r3, #94	; 0x5e
 8004998:	d954      	bls.n	8004a44 <TouchSwitchActivity+0x220>
 800499a:	88bb      	ldrh	r3, [r7, #4]
 800499c:	2b74      	cmp	r3, #116	; 0x74
 800499e:	d851      	bhi.n	8004a44 <TouchSwitchActivity+0x220>
				{
					if(SwitchesButtonState[1] >= 1) // if is ON
 80049a0:	4b58      	ldr	r3, [pc, #352]	; (8004b04 <TouchSwitchActivity+0x2e0>)
 80049a2:	785b      	ldrb	r3, [r3, #1]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d026      	beq.n	80049f6 <TouchSwitchActivity+0x1d2>
					{
						SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 80049a8:	2008      	movs	r0, #8
 80049aa:	f001 f98d 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80049ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	2305      	movs	r3, #5
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	2315      	movs	r3, #21
 80049ba:	2221      	movs	r2, #33	; 0x21
 80049bc:	215f      	movs	r1, #95	; 0x5f
 80049be:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80049c2:	f7fc fe44 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 80049c6:	4950      	ldr	r1, [pc, #320]	; (8004b08 <TouchSwitchActivity+0x2e4>)
 80049c8:	4850      	ldr	r0, [pc, #320]	; (8004b0c <TouchSwitchActivity+0x2e8>)
 80049ca:	f009 fd55 	bl	800e478 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80049ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	2300      	movs	r3, #0
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2300      	movs	r3, #0
 80049da:	2261      	movs	r2, #97	; 0x61
 80049dc:	f240 1111 	movw	r1, #273	; 0x111
 80049e0:	484a      	ldr	r0, [pc, #296]	; (8004b0c <TouchSwitchActivity+0x2e8>)
 80049e2:	f7fd f89f 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 0;
 80049e6:	4b47      	ldr	r3, [pc, #284]	; (8004b04 <TouchSwitchActivity+0x2e0>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	705a      	strb	r2, [r3, #1]
						EEPROM_RelayStateUpdate(2, 0);
 80049ec:	2100      	movs	r1, #0
 80049ee:	2002      	movs	r0, #2
 80049f0:	f7fd ffa6 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[1] >= 1) // if is ON
 80049f4:	e0e5      	b.n	8004bc2 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 80049f6:	2007      	movs	r0, #7
 80049f8:	f001 f966 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80049fc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004a00:	9301      	str	r3, [sp, #4]
 8004a02:	2305      	movs	r3, #5
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	2315      	movs	r3, #21
 8004a08:	2221      	movs	r2, #33	; 0x21
 8004a0a:	215f      	movs	r1, #95	; 0x5f
 8004a0c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004a10:	f7fc fe1d 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004a14:	493e      	ldr	r1, [pc, #248]	; (8004b10 <TouchSwitchActivity+0x2ec>)
 8004a16:	483d      	ldr	r0, [pc, #244]	; (8004b0c <TouchSwitchActivity+0x2e8>)
 8004a18:	f009 fd2e 	bl	800e478 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004a1c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	2300      	movs	r3, #0
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	2300      	movs	r3, #0
 8004a28:	2261      	movs	r2, #97	; 0x61
 8004a2a:	f240 1111 	movw	r1, #273	; 0x111
 8004a2e:	4837      	ldr	r0, [pc, #220]	; (8004b0c <TouchSwitchActivity+0x2e8>)
 8004a30:	f7fd f878 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 1;
 8004a34:	4b33      	ldr	r3, [pc, #204]	; (8004b04 <TouchSwitchActivity+0x2e0>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	705a      	strb	r2, [r3, #1]
						EEPROM_RelayStateUpdate(2, 1);
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	2002      	movs	r0, #2
 8004a3e:	f7fd ff7f 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004a42:	e0be      	b.n	8004bc2 <TouchSwitchActivity+0x39e>
					}
				}
				//
				// THIRD SWITCH
				else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8004a44:	88bb      	ldrh	r3, [r7, #4]
 8004a46:	2b7c      	cmp	r3, #124	; 0x7c
 8004a48:	d964      	bls.n	8004b14 <TouchSwitchActivity+0x2f0>
 8004a4a:	88bb      	ldrh	r3, [r7, #4]
 8004a4c:	2b92      	cmp	r3, #146	; 0x92
 8004a4e:	d861      	bhi.n	8004b14 <TouchSwitchActivity+0x2f0>
				{
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004a50:	4b2c      	ldr	r3, [pc, #176]	; (8004b04 <TouchSwitchActivity+0x2e0>)
 8004a52:	789b      	ldrb	r3, [r3, #2]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d026      	beq.n	8004aa6 <TouchSwitchActivity+0x282>
					{
						SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8004a58:	200a      	movs	r0, #10
 8004a5a:	f001 f935 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004a5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a62:	9301      	str	r3, [sp, #4]
 8004a64:	2305      	movs	r3, #5
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	2315      	movs	r3, #21
 8004a6a:	2221      	movs	r2, #33	; 0x21
 8004a6c:	217d      	movs	r1, #125	; 0x7d
 8004a6e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004a72:	f7fc fdec 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004a76:	4924      	ldr	r1, [pc, #144]	; (8004b08 <TouchSwitchActivity+0x2e4>)
 8004a78:	4824      	ldr	r0, [pc, #144]	; (8004b0c <TouchSwitchActivity+0x2e8>)
 8004a7a:	f009 fcfd 	bl	800e478 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004a7e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a82:	9301      	str	r3, [sp, #4]
 8004a84:	2300      	movs	r3, #0
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	227f      	movs	r2, #127	; 0x7f
 8004a8c:	f240 1111 	movw	r1, #273	; 0x111
 8004a90:	481e      	ldr	r0, [pc, #120]	; (8004b0c <TouchSwitchActivity+0x2e8>)
 8004a92:	f7fd f847 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 0;
 8004a96:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <TouchSwitchActivity+0x2e0>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	709a      	strb	r2, [r3, #2]
						EEPROM_RelayStateUpdate(3, 0);
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	2003      	movs	r0, #3
 8004aa0:	f7fd ff4e 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004aa4:	e08d      	b.n	8004bc2 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8004aa6:	2009      	movs	r0, #9
 8004aa8:	f001 f90e 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004aac:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ab0:	9301      	str	r3, [sp, #4]
 8004ab2:	2305      	movs	r3, #5
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	2315      	movs	r3, #21
 8004ab8:	2221      	movs	r2, #33	; 0x21
 8004aba:	217d      	movs	r1, #125	; 0x7d
 8004abc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004ac0:	f7fc fdc5 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004ac4:	4912      	ldr	r1, [pc, #72]	; (8004b10 <TouchSwitchActivity+0x2ec>)
 8004ac6:	4811      	ldr	r0, [pc, #68]	; (8004b0c <TouchSwitchActivity+0x2e8>)
 8004ac8:	f009 fcd6 	bl	800e478 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004acc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	227f      	movs	r2, #127	; 0x7f
 8004ada:	f240 1111 	movw	r1, #273	; 0x111
 8004ade:	480b      	ldr	r0, [pc, #44]	; (8004b0c <TouchSwitchActivity+0x2e8>)
 8004ae0:	f7fd f820 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 1;
 8004ae4:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <TouchSwitchActivity+0x2e0>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	709a      	strb	r2, [r3, #2]
						EEPROM_RelayStateUpdate(3, 1);
 8004aea:	2101      	movs	r1, #1
 8004aec:	2003      	movs	r0, #3
 8004aee:	f7fd ff27 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004af2:	e066      	b.n	8004bc2 <TouchSwitchActivity+0x39e>
 8004af4:	20000254 	.word	0x20000254
 8004af8:	20000258 	.word	0x20000258
 8004afc:	2000024f 	.word	0x2000024f
 8004b00:	080131a8 	.word	0x080131a8
 8004b04:	20000270 	.word	0x20000270
 8004b08:	08012378 	.word	0x08012378
 8004b0c:	200002c4 	.word	0x200002c4
 8004b10:	0801237c 	.word	0x0801237c
					}
				}
				//
				// FOURTH SWITCH
				else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8004b14:	88bb      	ldrh	r3, [r7, #4]
 8004b16:	2b9a      	cmp	r3, #154	; 0x9a
 8004b18:	d953      	bls.n	8004bc2 <TouchSwitchActivity+0x39e>
 8004b1a:	88bb      	ldrh	r3, [r7, #4]
 8004b1c:	2bb0      	cmp	r3, #176	; 0xb0
 8004b1e:	d850      	bhi.n	8004bc2 <TouchSwitchActivity+0x39e>
				{
					if(SwitchesButtonState[3] >= 1) // if is ON
 8004b20:	4b2e      	ldr	r3, [pc, #184]	; (8004bdc <TouchSwitchActivity+0x3b8>)
 8004b22:	78db      	ldrb	r3, [r3, #3]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d026      	beq.n	8004b76 <TouchSwitchActivity+0x352>
					{
						SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8004b28:	200c      	movs	r0, #12
 8004b2a:	f001 f8cd 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004b2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b32:	9301      	str	r3, [sp, #4]
 8004b34:	2305      	movs	r3, #5
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	2315      	movs	r3, #21
 8004b3a:	2221      	movs	r2, #33	; 0x21
 8004b3c:	219b      	movs	r1, #155	; 0x9b
 8004b3e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004b42:	f7fc fd84 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004b46:	4926      	ldr	r1, [pc, #152]	; (8004be0 <TouchSwitchActivity+0x3bc>)
 8004b48:	4826      	ldr	r0, [pc, #152]	; (8004be4 <TouchSwitchActivity+0x3c0>)
 8004b4a:	f009 fc95 	bl	800e478 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004b4e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	2300      	movs	r3, #0
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	229d      	movs	r2, #157	; 0x9d
 8004b5c:	f240 1111 	movw	r1, #273	; 0x111
 8004b60:	4820      	ldr	r0, [pc, #128]	; (8004be4 <TouchSwitchActivity+0x3c0>)
 8004b62:	f7fc ffdf 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 0;
 8004b66:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <TouchSwitchActivity+0x3b8>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	70da      	strb	r2, [r3, #3]
						EEPROM_RelayStateUpdate(4, 0);
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	2004      	movs	r0, #4
 8004b70:	f7fd fee6 	bl	8002940 <EEPROM_RelayStateUpdate>
 8004b74:	e025      	b.n	8004bc2 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8004b76:	200b      	movs	r0, #11
 8004b78:	f001 f8a6 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004b7c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	2305      	movs	r3, #5
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	2315      	movs	r3, #21
 8004b88:	2221      	movs	r2, #33	; 0x21
 8004b8a:	219b      	movs	r1, #155	; 0x9b
 8004b8c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004b90:	f7fc fd5d 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004b94:	4914      	ldr	r1, [pc, #80]	; (8004be8 <TouchSwitchActivity+0x3c4>)
 8004b96:	4813      	ldr	r0, [pc, #76]	; (8004be4 <TouchSwitchActivity+0x3c0>)
 8004b98:	f009 fc6e 	bl	800e478 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004b9c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	229d      	movs	r2, #157	; 0x9d
 8004baa:	f240 1111 	movw	r1, #273	; 0x111
 8004bae:	480d      	ldr	r0, [pc, #52]	; (8004be4 <TouchSwitchActivity+0x3c0>)
 8004bb0:	f7fc ffb8 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 1;
 8004bb4:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <TouchSwitchActivity+0x3b8>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	70da      	strb	r2, [r3, #3]
						EEPROM_RelayStateUpdate(4, 1);
 8004bba:	2101      	movs	r1, #1
 8004bbc:	2004      	movs	r0, #4
 8004bbe:	f7fd febf 	bl	8002940 <EEPROM_RelayStateUpdate>
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 8004bc2:	480a      	ldr	r0, [pc, #40]	; (8004bec <TouchSwitchActivity+0x3c8>)
 8004bc4:	f7fc fd94 	bl	80016f0 <EF_SetFont>
			}
			TimerTouch = HAL_GetTick();
 8004bc8:	f002 f88e 	bl	8006ce8 <HAL_GetTick>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <TouchSwitchActivity+0x3cc>)
 8004bd0:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000270 	.word	0x20000270
 8004be0:	08012378 	.word	0x08012378
 8004be4:	200002c4 	.word	0x200002c4
 8004be8:	0801237c 	.word	0x0801237c
 8004bec:	08015120 	.word	0x08015120
 8004bf0:	20000254 	.word	0x20000254

08004bf4 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8004bfa:	f7fd fb47 	bl	800228c <XPT2046_IsTouched>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 819d 	beq.w	8004f40 <TouchLightsActivity+0x34c>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004c06:	f002 f86f 	bl	8006ce8 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	4bb0      	ldr	r3, [pc, #704]	; (8004ed0 <TouchLightsActivity+0x2dc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c16:	f0c0 8193 	bcc.w	8004f40 <TouchLightsActivity+0x34c>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004c1a:	1d3a      	adds	r2, r7, #4
 8004c1c:	1dbb      	adds	r3, r7, #6
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fd faf5 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b09      	cmp	r3, #9
 8004c2a:	d90f      	bls.n	8004c4c <TouchLightsActivity+0x58>
 8004c2c:	88fb      	ldrh	r3, [r7, #6]
 8004c2e:	2b6e      	cmp	r3, #110	; 0x6e
 8004c30:	d80c      	bhi.n	8004c4c <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004c32:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004c34:	2bd7      	cmp	r3, #215	; 0xd7
 8004c36:	d909      	bls.n	8004c4c <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004c38:	88bb      	ldrh	r3, [r7, #4]
 8004c3a:	2bec      	cmp	r3, #236	; 0xec
 8004c3c:	d806      	bhi.n	8004c4c <TouchLightsActivity+0x58>
			{
				State = MENUTFT_SWITCH;
 8004c3e:	4ba5      	ldr	r3, [pc, #660]	; (8004ed4 <TouchLightsActivity+0x2e0>)
 8004c40:	2202      	movs	r2, #2
 8004c42:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004c44:	4ba4      	ldr	r3, [pc, #656]	; (8004ed8 <TouchLightsActivity+0x2e4>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e174      	b.n	8004f36 <TouchLightsActivity+0x342>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004c4c:	88fb      	ldrh	r3, [r7, #6]
 8004c4e:	2bdb      	cmp	r3, #219	; 0xdb
 8004c50:	d910      	bls.n	8004c74 <TouchLightsActivity+0x80>
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004c58:	d20c      	bcs.n	8004c74 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004c5a:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004c5c:	2bd7      	cmp	r3, #215	; 0xd7
 8004c5e:	d909      	bls.n	8004c74 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004c60:	88bb      	ldrh	r3, [r7, #4]
 8004c62:	2bec      	cmp	r3, #236	; 0xec
 8004c64:	d806      	bhi.n	8004c74 <TouchLightsActivity+0x80>
			{
				State = MENUTFT_PARAMETERS;
 8004c66:	4b9b      	ldr	r3, [pc, #620]	; (8004ed4 <TouchLightsActivity+0x2e0>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004c6c:	4b9a      	ldr	r3, [pc, #616]	; (8004ed8 <TouchLightsActivity+0x2e4>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
 8004c72:	e160      	b.n	8004f36 <TouchLightsActivity+0x342>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	2b77      	cmp	r3, #119	; 0x77
 8004c78:	d90f      	bls.n	8004c9a <TouchLightsActivity+0xa6>
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2bd2      	cmp	r3, #210	; 0xd2
 8004c7e:	d80c      	bhi.n	8004c9a <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004c80:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004c82:	2bd7      	cmp	r3, #215	; 0xd7
 8004c84:	d909      	bls.n	8004c9a <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004c86:	88bb      	ldrh	r3, [r7, #4]
 8004c88:	2bec      	cmp	r3, #236	; 0xec
 8004c8a:	d806      	bhi.n	8004c9a <TouchLightsActivity+0xa6>
			{
				State = MENUTFT_WS_LED;
 8004c8c:	4b91      	ldr	r3, [pc, #580]	; (8004ed4 <TouchLightsActivity+0x2e0>)
 8004c8e:	2206      	movs	r2, #6
 8004c90:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004c92:	4b91      	ldr	r3, [pc, #580]	; (8004ed8 <TouchLightsActivity+0x2e4>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e14d      	b.n	8004f36 <TouchLightsActivity+0x342>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	2bc7      	cmp	r3, #199	; 0xc7
 8004c9e:	f240 814a 	bls.w	8004f36 <TouchLightsActivity+0x342>
 8004ca2:	88fb      	ldrh	r3, [r7, #6]
 8004ca4:	2be9      	cmp	r3, #233	; 0xe9
 8004ca6:	f200 8146 	bhi.w	8004f36 <TouchLightsActivity+0x342>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8004caa:	488c      	ldr	r0, [pc, #560]	; (8004edc <TouchLightsActivity+0x2e8>)
 8004cac:	f7fc fd20 	bl	80016f0 <EF_SetFont>

				//
				// FIRST LIGHT
				if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8004cb0:	88bb      	ldrh	r3, [r7, #4]
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d948      	bls.n	8004d48 <TouchLightsActivity+0x154>
 8004cb6:	88bb      	ldrh	r3, [r7, #4]
 8004cb8:	2b56      	cmp	r3, #86	; 0x56
 8004cba:	d845      	bhi.n	8004d48 <TouchLightsActivity+0x154>
				{
					if(LightsButtonState[0] >= 1) // if is ON
 8004cbc:	4b88      	ldr	r3, [pc, #544]	; (8004ee0 <TouchLightsActivity+0x2ec>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d020      	beq.n	8004d06 <TouchLightsActivity+0x112>
					{
						SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8004cc4:	200e      	movs	r0, #14
 8004cc6:	f000 ffff 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004cca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	2305      	movs	r3, #5
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	2315      	movs	r3, #21
 8004cd6:	2221      	movs	r2, #33	; 0x21
 8004cd8:	2141      	movs	r1, #65	; 0x41
 8004cda:	20c8      	movs	r0, #200	; 0xc8
 8004cdc:	f7fc fcb7 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004ce0:	4980      	ldr	r1, [pc, #512]	; (8004ee4 <TouchLightsActivity+0x2f0>)
 8004ce2:	4881      	ldr	r0, [pc, #516]	; (8004ee8 <TouchLightsActivity+0x2f4>)
 8004ce4:	f009 fbc8 	bl	800e478 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004ce8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2243      	movs	r2, #67	; 0x43
 8004cf6:	21cb      	movs	r1, #203	; 0xcb
 8004cf8:	487b      	ldr	r0, [pc, #492]	; (8004ee8 <TouchLightsActivity+0x2f4>)
 8004cfa:	f7fc ff13 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 0;
 8004cfe:	4b78      	ldr	r3, [pc, #480]	; (8004ee0 <TouchLightsActivity+0x2ec>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
					if(LightsButtonState[0] >= 1) // if is ON
 8004d04:	e114      	b.n	8004f30 <TouchLightsActivity+0x33c>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8004d06:	200d      	movs	r0, #13
 8004d08:	f000 ffde 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004d0c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	2305      	movs	r3, #5
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	2315      	movs	r3, #21
 8004d18:	2221      	movs	r2, #33	; 0x21
 8004d1a:	2141      	movs	r1, #65	; 0x41
 8004d1c:	20c8      	movs	r0, #200	; 0xc8
 8004d1e:	f7fc fc96 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004d22:	4972      	ldr	r1, [pc, #456]	; (8004eec <TouchLightsActivity+0x2f8>)
 8004d24:	4870      	ldr	r0, [pc, #448]	; (8004ee8 <TouchLightsActivity+0x2f4>)
 8004d26:	f009 fba7 	bl	800e478 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004d2a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	2300      	movs	r3, #0
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	2300      	movs	r3, #0
 8004d36:	2243      	movs	r2, #67	; 0x43
 8004d38:	21cb      	movs	r1, #203	; 0xcb
 8004d3a:	486b      	ldr	r0, [pc, #428]	; (8004ee8 <TouchLightsActivity+0x2f4>)
 8004d3c:	f7fc fef2 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 1;
 8004d40:	4b67      	ldr	r3, [pc, #412]	; (8004ee0 <TouchLightsActivity+0x2ec>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
					if(LightsButtonState[0] >= 1) // if is ON
 8004d46:	e0f3      	b.n	8004f30 <TouchLightsActivity+0x33c>
					}
				}
				//
				// SECOND LIGHT
				else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8004d48:	88bb      	ldrh	r3, [r7, #4]
 8004d4a:	2b5e      	cmp	r3, #94	; 0x5e
 8004d4c:	d948      	bls.n	8004de0 <TouchLightsActivity+0x1ec>
 8004d4e:	88bb      	ldrh	r3, [r7, #4]
 8004d50:	2b74      	cmp	r3, #116	; 0x74
 8004d52:	d845      	bhi.n	8004de0 <TouchLightsActivity+0x1ec>
				{
					if(LightsButtonState[1] >= 1) // if is ON
 8004d54:	4b62      	ldr	r3, [pc, #392]	; (8004ee0 <TouchLightsActivity+0x2ec>)
 8004d56:	785b      	ldrb	r3, [r3, #1]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d020      	beq.n	8004d9e <TouchLightsActivity+0x1aa>
					{
						SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8004d5c:	2010      	movs	r0, #16
 8004d5e:	f000 ffb3 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004d62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	2305      	movs	r3, #5
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	2315      	movs	r3, #21
 8004d6e:	2221      	movs	r2, #33	; 0x21
 8004d70:	215f      	movs	r1, #95	; 0x5f
 8004d72:	20c8      	movs	r0, #200	; 0xc8
 8004d74:	f7fc fc6b 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004d78:	495a      	ldr	r1, [pc, #360]	; (8004ee4 <TouchLightsActivity+0x2f0>)
 8004d7a:	485b      	ldr	r0, [pc, #364]	; (8004ee8 <TouchLightsActivity+0x2f4>)
 8004d7c:	f009 fb7c 	bl	800e478 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004d80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	2300      	movs	r3, #0
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2261      	movs	r2, #97	; 0x61
 8004d8e:	21cb      	movs	r1, #203	; 0xcb
 8004d90:	4855      	ldr	r0, [pc, #340]	; (8004ee8 <TouchLightsActivity+0x2f4>)
 8004d92:	f7fc fec7 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 0;
 8004d96:	4b52      	ldr	r3, [pc, #328]	; (8004ee0 <TouchLightsActivity+0x2ec>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	705a      	strb	r2, [r3, #1]
					if(LightsButtonState[1] >= 1) // if is ON
 8004d9c:	e0c8      	b.n	8004f30 <TouchLightsActivity+0x33c>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8004d9e:	200f      	movs	r0, #15
 8004da0:	f000 ff92 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004da4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004da8:	9301      	str	r3, [sp, #4]
 8004daa:	2305      	movs	r3, #5
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	2315      	movs	r3, #21
 8004db0:	2221      	movs	r2, #33	; 0x21
 8004db2:	215f      	movs	r1, #95	; 0x5f
 8004db4:	20c8      	movs	r0, #200	; 0xc8
 8004db6:	f7fc fc4a 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004dba:	494c      	ldr	r1, [pc, #304]	; (8004eec <TouchLightsActivity+0x2f8>)
 8004dbc:	484a      	ldr	r0, [pc, #296]	; (8004ee8 <TouchLightsActivity+0x2f4>)
 8004dbe:	f009 fb5b 	bl	800e478 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004dc2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004dc6:	9301      	str	r3, [sp, #4]
 8004dc8:	2300      	movs	r3, #0
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2261      	movs	r2, #97	; 0x61
 8004dd0:	21cb      	movs	r1, #203	; 0xcb
 8004dd2:	4845      	ldr	r0, [pc, #276]	; (8004ee8 <TouchLightsActivity+0x2f4>)
 8004dd4:	f7fc fea6 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 1;
 8004dd8:	4b41      	ldr	r3, [pc, #260]	; (8004ee0 <TouchLightsActivity+0x2ec>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	705a      	strb	r2, [r3, #1]
					if(LightsButtonState[1] >= 1) // if is ON
 8004dde:	e0a7      	b.n	8004f30 <TouchLightsActivity+0x33c>
					}
				}

				//
				// THIRD LIGHT
				else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8004de0:	88bb      	ldrh	r3, [r7, #4]
 8004de2:	2b7c      	cmp	r3, #124	; 0x7c
 8004de4:	d948      	bls.n	8004e78 <TouchLightsActivity+0x284>
 8004de6:	88bb      	ldrh	r3, [r7, #4]
 8004de8:	2b92      	cmp	r3, #146	; 0x92
 8004dea:	d845      	bhi.n	8004e78 <TouchLightsActivity+0x284>
				{
					if(LightsButtonState[2] >= 1) // if is ON
 8004dec:	4b3c      	ldr	r3, [pc, #240]	; (8004ee0 <TouchLightsActivity+0x2ec>)
 8004dee:	789b      	ldrb	r3, [r3, #2]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d020      	beq.n	8004e36 <TouchLightsActivity+0x242>
					{
						SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8004df4:	2012      	movs	r0, #18
 8004df6:	f000 ff67 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004dfa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	2305      	movs	r3, #5
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	2315      	movs	r3, #21
 8004e06:	2221      	movs	r2, #33	; 0x21
 8004e08:	217d      	movs	r1, #125	; 0x7d
 8004e0a:	20c8      	movs	r0, #200	; 0xc8
 8004e0c:	f7fc fc1f 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004e10:	4934      	ldr	r1, [pc, #208]	; (8004ee4 <TouchLightsActivity+0x2f0>)
 8004e12:	4835      	ldr	r0, [pc, #212]	; (8004ee8 <TouchLightsActivity+0x2f4>)
 8004e14:	f009 fb30 	bl	800e478 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e1c:	9301      	str	r3, [sp, #4]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	2300      	movs	r3, #0
 8004e24:	227f      	movs	r2, #127	; 0x7f
 8004e26:	21cb      	movs	r1, #203	; 0xcb
 8004e28:	482f      	ldr	r0, [pc, #188]	; (8004ee8 <TouchLightsActivity+0x2f4>)
 8004e2a:	f7fc fe7b 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 0;
 8004e2e:	4b2c      	ldr	r3, [pc, #176]	; (8004ee0 <TouchLightsActivity+0x2ec>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	709a      	strb	r2, [r3, #2]
					if(LightsButtonState[2] >= 1) // if is ON
 8004e34:	e07c      	b.n	8004f30 <TouchLightsActivity+0x33c>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8004e36:	2011      	movs	r0, #17
 8004e38:	f000 ff46 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004e3c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	2305      	movs	r3, #5
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2315      	movs	r3, #21
 8004e48:	2221      	movs	r2, #33	; 0x21
 8004e4a:	217d      	movs	r1, #125	; 0x7d
 8004e4c:	20c8      	movs	r0, #200	; 0xc8
 8004e4e:	f7fc fbfe 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004e52:	4926      	ldr	r1, [pc, #152]	; (8004eec <TouchLightsActivity+0x2f8>)
 8004e54:	4824      	ldr	r0, [pc, #144]	; (8004ee8 <TouchLightsActivity+0x2f4>)
 8004e56:	f009 fb0f 	bl	800e478 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e5a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	2300      	movs	r3, #0
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	2300      	movs	r3, #0
 8004e66:	227f      	movs	r2, #127	; 0x7f
 8004e68:	21cb      	movs	r1, #203	; 0xcb
 8004e6a:	481f      	ldr	r0, [pc, #124]	; (8004ee8 <TouchLightsActivity+0x2f4>)
 8004e6c:	f7fc fe5a 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 1;
 8004e70:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <TouchLightsActivity+0x2ec>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	709a      	strb	r2, [r3, #2]
					if(LightsButtonState[2] >= 1) // if is ON
 8004e76:	e05b      	b.n	8004f30 <TouchLightsActivity+0x33c>
					}
				}

				//
				// FOURTH LIGHT
				else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 8004e78:	88bb      	ldrh	r3, [r7, #4]
 8004e7a:	2b9a      	cmp	r3, #154	; 0x9a
 8004e7c:	d958      	bls.n	8004f30 <TouchLightsActivity+0x33c>
 8004e7e:	88bb      	ldrh	r3, [r7, #4]
 8004e80:	2bb0      	cmp	r3, #176	; 0xb0
 8004e82:	d855      	bhi.n	8004f30 <TouchLightsActivity+0x33c>
				{
					if(LightsButtonState[3] >= 1) // if is ON
 8004e84:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <TouchLightsActivity+0x2ec>)
 8004e86:	78db      	ldrb	r3, [r3, #3]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d031      	beq.n	8004ef0 <TouchLightsActivity+0x2fc>
					{
						SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8004e8c:	2014      	movs	r0, #20
 8004e8e:	f000 ff1b 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004e92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	2305      	movs	r3, #5
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	2315      	movs	r3, #21
 8004e9e:	2221      	movs	r2, #33	; 0x21
 8004ea0:	219b      	movs	r1, #155	; 0x9b
 8004ea2:	20c8      	movs	r0, #200	; 0xc8
 8004ea4:	f7fc fbd3 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004ea8:	490e      	ldr	r1, [pc, #56]	; (8004ee4 <TouchLightsActivity+0x2f0>)
 8004eaa:	480f      	ldr	r0, [pc, #60]	; (8004ee8 <TouchLightsActivity+0x2f4>)
 8004eac:	f009 fae4 	bl	800e478 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004eb0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	229d      	movs	r2, #157	; 0x9d
 8004ebe:	21cb      	movs	r1, #203	; 0xcb
 8004ec0:	4809      	ldr	r0, [pc, #36]	; (8004ee8 <TouchLightsActivity+0x2f4>)
 8004ec2:	f7fc fe2f 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 0;
 8004ec6:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <TouchLightsActivity+0x2ec>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	70da      	strb	r2, [r3, #3]
 8004ecc:	e030      	b.n	8004f30 <TouchLightsActivity+0x33c>
 8004ece:	bf00      	nop
 8004ed0:	20000254 	.word	0x20000254
 8004ed4:	20000258 	.word	0x20000258
 8004ed8:	2000024f 	.word	0x2000024f
 8004edc:	080131a8 	.word	0x080131a8
 8004ee0:	20000274 	.word	0x20000274
 8004ee4:	08012378 	.word	0x08012378
 8004ee8:	200002c4 	.word	0x200002c4
 8004eec:	0801237c 	.word	0x0801237c
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8004ef0:	2013      	movs	r0, #19
 8004ef2:	f000 fee9 	bl	8005cc8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004ef6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	2305      	movs	r3, #5
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	2315      	movs	r3, #21
 8004f02:	2221      	movs	r2, #33	; 0x21
 8004f04:	219b      	movs	r1, #155	; 0x9b
 8004f06:	20c8      	movs	r0, #200	; 0xc8
 8004f08:	f7fc fba1 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004f0c:	490e      	ldr	r1, [pc, #56]	; (8004f48 <TouchLightsActivity+0x354>)
 8004f0e:	480f      	ldr	r0, [pc, #60]	; (8004f4c <TouchLightsActivity+0x358>)
 8004f10:	f009 fab2 	bl	800e478 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	229d      	movs	r2, #157	; 0x9d
 8004f22:	21cb      	movs	r1, #203	; 0xcb
 8004f24:	4809      	ldr	r0, [pc, #36]	; (8004f4c <TouchLightsActivity+0x358>)
 8004f26:	f7fc fdfd 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 1;
 8004f2a:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <TouchLightsActivity+0x35c>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	70da      	strb	r2, [r3, #3]
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 8004f30:	4808      	ldr	r0, [pc, #32]	; (8004f54 <TouchLightsActivity+0x360>)
 8004f32:	f7fc fbdd 	bl	80016f0 <EF_SetFont>
			}

			TimerTouch = HAL_GetTick();
 8004f36:	f001 fed7 	bl	8006ce8 <HAL_GetTick>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	4a06      	ldr	r2, [pc, #24]	; (8004f58 <TouchLightsActivity+0x364>)
 8004f3e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004f40:	bf00      	nop
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	0801237c 	.word	0x0801237c
 8004f4c:	200002c4 	.word	0x200002c4
 8004f50:	20000274 	.word	0x20000274
 8004f54:	08015120 	.word	0x08015120
 8004f58:	20000254 	.word	0x20000254

08004f5c <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 8004f62:	f7fd f993 	bl	800228c <XPT2046_IsTouched>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 812a 	beq.w	80051c2 <TouchClockActivity+0x266>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8004f6e:	4897      	ldr	r0, [pc, #604]	; (80051cc <TouchClockActivity+0x270>)
 8004f70:	f7fc fbbe 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004f74:	f001 feb8 	bl	8006ce8 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	4b95      	ldr	r3, [pc, #596]	; (80051d0 <TouchClockActivity+0x274>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f84:	f0c0 811d 	bcc.w	80051c2 <TouchClockActivity+0x266>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004f88:	1d3a      	adds	r2, r7, #4
 8004f8a:	1dbb      	adds	r3, r7, #6
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fd f93e 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8004f94:	4b8f      	ldr	r3, [pc, #572]	; (80051d4 <TouchClockActivity+0x278>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d10e      	bne.n	8004fba <TouchClockActivity+0x5e>
				{
					Hours = DS3231_GetHour();
 8004f9c:	f7fd fbee 	bl	800277c <DS3231_GetHour>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4b8c      	ldr	r3, [pc, #560]	; (80051d8 <TouchClockActivity+0x27c>)
 8004fa6:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8004fa8:	f7fd fbf4 	bl	8002794 <DS3231_GetMinute>
 8004fac:	4603      	mov	r3, r0
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4b8a      	ldr	r3, [pc, #552]	; (80051dc <TouchClockActivity+0x280>)
 8004fb2:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8004fb4:	4b87      	ldr	r3, [pc, #540]	; (80051d4 <TouchClockActivity+0x278>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	2b09      	cmp	r3, #9
 8004fbe:	d90f      	bls.n	8004fe0 <TouchClockActivity+0x84>
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	2b6e      	cmp	r3, #110	; 0x6e
 8004fc4:	d80c      	bhi.n	8004fe0 <TouchClockActivity+0x84>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004fc6:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004fc8:	2bd7      	cmp	r3, #215	; 0xd7
 8004fca:	d909      	bls.n	8004fe0 <TouchClockActivity+0x84>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004fcc:	88bb      	ldrh	r3, [r7, #4]
 8004fce:	2bec      	cmp	r3, #236	; 0xec
 8004fd0:	d806      	bhi.n	8004fe0 <TouchClockActivity+0x84>
				{
					State = MENUTFT_PARAMETERS;
 8004fd2:	4b83      	ldr	r3, [pc, #524]	; (80051e0 <TouchClockActivity+0x284>)
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8004fd8:	4b82      	ldr	r3, [pc, #520]	; (80051e4 <TouchClockActivity+0x288>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	e0eb      	b.n	80051b8 <TouchClockActivity+0x25c>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	2bdb      	cmp	r3, #219	; 0xdb
 8004fe4:	d927      	bls.n	8005036 <TouchClockActivity+0xda>
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004fec:	d223      	bcs.n	8005036 <TouchClockActivity+0xda>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004fee:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004ff0:	2bd7      	cmp	r3, #215	; 0xd7
 8004ff2:	d920      	bls.n	8005036 <TouchClockActivity+0xda>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004ff4:	88bb      	ldrh	r3, [r7, #4]
 8004ff6:	2bec      	cmp	r3, #236	; 0xec
 8004ff8:	d81d      	bhi.n	8005036 <TouchClockActivity+0xda>
				{
					DS3231_SetHour(Hours);
 8004ffa:	4b77      	ldr	r3, [pc, #476]	; (80051d8 <TouchClockActivity+0x27c>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fd fbd4 	bl	80027ac <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8005004:	4b75      	ldr	r3, [pc, #468]	; (80051dc <TouchClockActivity+0x280>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f7fd fbe4 	bl	80027d6 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 800500e:	2032      	movs	r0, #50	; 0x32
 8005010:	f7fd fbf3 	bl	80027fa <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 8005014:	4974      	ldr	r1, [pc, #464]	; (80051e8 <TouchClockActivity+0x28c>)
 8005016:	4875      	ldr	r0, [pc, #468]	; (80051ec <TouchClockActivity+0x290>)
 8005018:	f009 fa2e 	bl	800e478 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 800501c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	2301      	movs	r3, #1
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800502a:	220a      	movs	r2, #10
 800502c:	212f      	movs	r1, #47	; 0x2f
 800502e:	486f      	ldr	r0, [pc, #444]	; (80051ec <TouchClockActivity+0x290>)
 8005030:	f7fc fd78 	bl	8001b24 <EF_PutString>
 8005034:	e0c0      	b.n	80051b8 <TouchClockActivity+0x25c>
				}

				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	2bef      	cmp	r3, #239	; 0xef
 800503a:	d953      	bls.n	80050e4 <TouchClockActivity+0x188>
 800503c:	88fb      	ldrh	r3, [r7, #6]
 800503e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005042:	d84f      	bhi.n	80050e4 <TouchClockActivity+0x188>
				{

					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8005044:	88bb      	ldrh	r3, [r7, #4]
 8005046:	2b4a      	cmp	r3, #74	; 0x4a
 8005048:	d923      	bls.n	8005092 <TouchClockActivity+0x136>
 800504a:	88bb      	ldrh	r3, [r7, #4]
 800504c:	2b60      	cmp	r3, #96	; 0x60
 800504e:	d820      	bhi.n	8005092 <TouchClockActivity+0x136>
					{
						if(Hours < 24)
 8005050:	4b61      	ldr	r3, [pc, #388]	; (80051d8 <TouchClockActivity+0x27c>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b17      	cmp	r3, #23
 8005056:	d806      	bhi.n	8005066 <TouchClockActivity+0x10a>
						{
							Hours++;
 8005058:	4b5f      	ldr	r3, [pc, #380]	; (80051d8 <TouchClockActivity+0x27c>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	3301      	adds	r3, #1
 800505e:	b2da      	uxtb	r2, r3
 8005060:	4b5d      	ldr	r3, [pc, #372]	; (80051d8 <TouchClockActivity+0x27c>)
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	e002      	b.n	800506c <TouchClockActivity+0x110>
						}
						else
						{
							Hours = 1;
 8005066:	4b5c      	ldr	r3, [pc, #368]	; (80051d8 <TouchClockActivity+0x27c>)
 8005068:	2201      	movs	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 800506c:	4b5a      	ldr	r3, [pc, #360]	; (80051d8 <TouchClockActivity+0x27c>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	495f      	ldr	r1, [pc, #380]	; (80051f0 <TouchClockActivity+0x294>)
 8005074:	485d      	ldr	r0, [pc, #372]	; (80051ec <TouchClockActivity+0x290>)
 8005076:	f009 f9ff 	bl	800e478 <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800507a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	2301      	movs	r3, #1
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2300      	movs	r3, #0
 8005086:	2246      	movs	r2, #70	; 0x46
 8005088:	21a0      	movs	r1, #160	; 0xa0
 800508a:	4858      	ldr	r0, [pc, #352]	; (80051ec <TouchClockActivity+0x290>)
 800508c:	f7fc fd4a 	bl	8001b24 <EF_PutString>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8005090:	e091      	b.n	80051b6 <TouchClockActivity+0x25a>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 8005092:	88bb      	ldrh	r3, [r7, #4]
 8005094:	2b72      	cmp	r3, #114	; 0x72
 8005096:	f240 808e 	bls.w	80051b6 <TouchClockActivity+0x25a>
 800509a:	88bb      	ldrh	r3, [r7, #4]
 800509c:	2b88      	cmp	r3, #136	; 0x88
 800509e:	f200 808a 	bhi.w	80051b6 <TouchClockActivity+0x25a>
					{
						if(Minutes < 59)
 80050a2:	4b4e      	ldr	r3, [pc, #312]	; (80051dc <TouchClockActivity+0x280>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b3a      	cmp	r3, #58	; 0x3a
 80050a8:	d806      	bhi.n	80050b8 <TouchClockActivity+0x15c>
						{
							Minutes++;
 80050aa:	4b4c      	ldr	r3, [pc, #304]	; (80051dc <TouchClockActivity+0x280>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	3301      	adds	r3, #1
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	4b4a      	ldr	r3, [pc, #296]	; (80051dc <TouchClockActivity+0x280>)
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	e002      	b.n	80050be <TouchClockActivity+0x162>
						}
						else
						{
							Minutes = 0;
 80050b8:	4b48      	ldr	r3, [pc, #288]	; (80051dc <TouchClockActivity+0x280>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 80050be:	4b47      	ldr	r3, [pc, #284]	; (80051dc <TouchClockActivity+0x280>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	494a      	ldr	r1, [pc, #296]	; (80051f0 <TouchClockActivity+0x294>)
 80050c6:	4849      	ldr	r0, [pc, #292]	; (80051ec <TouchClockActivity+0x290>)
 80050c8:	f009 f9d6 	bl	800e478 <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80050cc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	2301      	movs	r3, #1
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	2300      	movs	r3, #0
 80050d8:	226e      	movs	r2, #110	; 0x6e
 80050da:	21a0      	movs	r1, #160	; 0xa0
 80050dc:	4843      	ldr	r0, [pc, #268]	; (80051ec <TouchClockActivity+0x290>)
 80050de:	f7fc fd21 	bl	8001b24 <EF_PutString>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 80050e2:	e068      	b.n	80051b6 <TouchClockActivity+0x25a>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80050ea:	d365      	bcc.n	80051b8 <TouchClockActivity+0x25c>
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80050f2:	d861      	bhi.n	80051b8 <TouchClockActivity+0x25c>
				{
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 80050f4:	88bb      	ldrh	r3, [r7, #4]
 80050f6:	2b4a      	cmp	r3, #74	; 0x4a
 80050f8:	d923      	bls.n	8005142 <TouchClockActivity+0x1e6>
 80050fa:	88bb      	ldrh	r3, [r7, #4]
 80050fc:	2b60      	cmp	r3, #96	; 0x60
 80050fe:	d820      	bhi.n	8005142 <TouchClockActivity+0x1e6>
					{

						if(Hours < 19)
 8005100:	4b35      	ldr	r3, [pc, #212]	; (80051d8 <TouchClockActivity+0x27c>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b12      	cmp	r3, #18
 8005106:	d806      	bhi.n	8005116 <TouchClockActivity+0x1ba>
						{
							Hours = Hours + 6;
 8005108:	4b33      	ldr	r3, [pc, #204]	; (80051d8 <TouchClockActivity+0x27c>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	3306      	adds	r3, #6
 800510e:	b2da      	uxtb	r2, r3
 8005110:	4b31      	ldr	r3, [pc, #196]	; (80051d8 <TouchClockActivity+0x27c>)
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	e002      	b.n	800511c <TouchClockActivity+0x1c0>
						}
						else
						{
							Hours = 1;
 8005116:	4b30      	ldr	r3, [pc, #192]	; (80051d8 <TouchClockActivity+0x27c>)
 8005118:	2201      	movs	r2, #1
 800511a:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 800511c:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <TouchClockActivity+0x27c>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	4933      	ldr	r1, [pc, #204]	; (80051f0 <TouchClockActivity+0x294>)
 8005124:	4831      	ldr	r0, [pc, #196]	; (80051ec <TouchClockActivity+0x290>)
 8005126:	f009 f9a7 	bl	800e478 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800512a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800512e:	9301      	str	r3, [sp, #4]
 8005130:	2301      	movs	r3, #1
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	2300      	movs	r3, #0
 8005136:	2246      	movs	r2, #70	; 0x46
 8005138:	219d      	movs	r1, #157	; 0x9d
 800513a:	482c      	ldr	r0, [pc, #176]	; (80051ec <TouchClockActivity+0x290>)
 800513c:	f7fc fcf2 	bl	8001b24 <EF_PutString>
 8005140:	e035      	b.n	80051ae <TouchClockActivity+0x252>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8005142:	88bb      	ldrh	r3, [r7, #4]
 8005144:	2b72      	cmp	r3, #114	; 0x72
 8005146:	d932      	bls.n	80051ae <TouchClockActivity+0x252>
 8005148:	88bb      	ldrh	r3, [r7, #4]
 800514a:	2b88      	cmp	r3, #136	; 0x88
 800514c:	d82f      	bhi.n	80051ae <TouchClockActivity+0x252>
					{
						if(Minutes < 49)
 800514e:	4b23      	ldr	r3, [pc, #140]	; (80051dc <TouchClockActivity+0x280>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b30      	cmp	r3, #48	; 0x30
 8005154:	d806      	bhi.n	8005164 <TouchClockActivity+0x208>
						{
							Minutes = Minutes +10;
 8005156:	4b21      	ldr	r3, [pc, #132]	; (80051dc <TouchClockActivity+0x280>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	330a      	adds	r3, #10
 800515c:	b2da      	uxtb	r2, r3
 800515e:	4b1f      	ldr	r3, [pc, #124]	; (80051dc <TouchClockActivity+0x280>)
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	e012      	b.n	800518a <TouchClockActivity+0x22e>
						}
						else
						{
							Minutes = (Minutes + 10) % 60;
 8005164:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <TouchClockActivity+0x280>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	f103 020a 	add.w	r2, r3, #10
 800516c:	4b21      	ldr	r3, [pc, #132]	; (80051f4 <TouchClockActivity+0x298>)
 800516e:	fb83 1302 	smull	r1, r3, r3, r2
 8005172:	4413      	add	r3, r2
 8005174:	1159      	asrs	r1, r3, #5
 8005176:	17d3      	asrs	r3, r2, #31
 8005178:	1ac9      	subs	r1, r1, r3
 800517a:	460b      	mov	r3, r1
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	1a5b      	subs	r3, r3, r1
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	1ad1      	subs	r1, r2, r3
 8005184:	b2ca      	uxtb	r2, r1
 8005186:	4b15      	ldr	r3, [pc, #84]	; (80051dc <TouchClockActivity+0x280>)
 8005188:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 800518a:	4b14      	ldr	r3, [pc, #80]	; (80051dc <TouchClockActivity+0x280>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	4917      	ldr	r1, [pc, #92]	; (80051f0 <TouchClockActivity+0x294>)
 8005192:	4816      	ldr	r0, [pc, #88]	; (80051ec <TouchClockActivity+0x290>)
 8005194:	f009 f970 	bl	800e478 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005198:	f24c 6318 	movw	r3, #50712	; 0xc618
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	2301      	movs	r3, #1
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	2300      	movs	r3, #0
 80051a4:	226e      	movs	r2, #110	; 0x6e
 80051a6:	219c      	movs	r1, #156	; 0x9c
 80051a8:	4810      	ldr	r0, [pc, #64]	; (80051ec <TouchClockActivity+0x290>)
 80051aa:	f7fc fcbb 	bl	8001b24 <EF_PutString>

					}
					EF_SetFont(&arialBlack_20ptFontInfo);
 80051ae:	4807      	ldr	r0, [pc, #28]	; (80051cc <TouchClockActivity+0x270>)
 80051b0:	f7fc fa9e 	bl	80016f0 <EF_SetFont>
 80051b4:	e000      	b.n	80051b8 <TouchClockActivity+0x25c>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 80051b6:	bf00      	nop
				}
				TimerTouch = HAL_GetTick();
 80051b8:	f001 fd96 	bl	8006ce8 <HAL_GetTick>
 80051bc:	4603      	mov	r3, r0
 80051be:	4a04      	ldr	r2, [pc, #16]	; (80051d0 <TouchClockActivity+0x274>)
 80051c0:	6013      	str	r3, [r2, #0]
			}
		}
}
 80051c2:	bf00      	nop
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	08015120 	.word	0x08015120
 80051d0:	20000254 	.word	0x20000254
 80051d4:	20000250 	.word	0x20000250
 80051d8:	20000030 	.word	0x20000030
 80051dc:	20000031 	.word	0x20000031
 80051e0:	20000258 	.word	0x20000258
 80051e4:	2000024f 	.word	0x2000024f
 80051e8:	08012380 	.word	0x08012380
 80051ec:	200002c4 	.word	0x200002c4
 80051f0:	08012390 	.word	0x08012390
 80051f4:	88888889 	.word	0x88888889

080051f8 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 80051fe:	f7fd f845 	bl	800228c <XPT2046_IsTouched>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8106 	beq.w	8005416 <TouchPredefinedActivityActivity+0x21e>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800520a:	f001 fd6d 	bl	8006ce8 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	4b83      	ldr	r3, [pc, #524]	; (8005420 <TouchPredefinedActivityActivity+0x228>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800521a:	f0c0 80fc 	bcc.w	8005416 <TouchPredefinedActivityActivity+0x21e>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800521e:	1d3a      	adds	r2, r7, #4
 8005220:	1dbb      	adds	r3, r7, #6
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f7fc fff3 	bl	8002210 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 800522a:	487e      	ldr	r0, [pc, #504]	; (8005424 <TouchPredefinedActivityActivity+0x22c>)
 800522c:	f7fc fa60 	bl	80016f0 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	2b09      	cmp	r3, #9
 8005234:	d90f      	bls.n	8005256 <TouchPredefinedActivityActivity+0x5e>
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	2b6e      	cmp	r3, #110	; 0x6e
 800523a:	d80c      	bhi.n	8005256 <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800523c:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800523e:	2bd7      	cmp	r3, #215	; 0xd7
 8005240:	d909      	bls.n	8005256 <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005242:	88bb      	ldrh	r3, [r7, #4]
 8005244:	2bec      	cmp	r3, #236	; 0xec
 8005246:	d806      	bhi.n	8005256 <TouchPredefinedActivityActivity+0x5e>
			{
				State = MENUTFT_SWITCH;
 8005248:	4b77      	ldr	r3, [pc, #476]	; (8005428 <TouchPredefinedActivityActivity+0x230>)
 800524a:	2202      	movs	r2, #2
 800524c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800524e:	4b77      	ldr	r3, [pc, #476]	; (800542c <TouchPredefinedActivityActivity+0x234>)
 8005250:	2201      	movs	r2, #1
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	e0da      	b.n	800540c <TouchPredefinedActivityActivity+0x214>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	2b63      	cmp	r3, #99	; 0x63
 800525a:	f240 80d7 	bls.w	800540c <TouchPredefinedActivityActivity+0x214>
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	2bdc      	cmp	r3, #220	; 0xdc
 8005262:	f200 80d3 	bhi.w	800540c <TouchPredefinedActivityActivity+0x214>
			{
				if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8005266:	88bb      	ldrh	r3, [r7, #4]
 8005268:	2b3b      	cmp	r3, #59	; 0x3b
 800526a:	d966      	bls.n	800533a <TouchPredefinedActivityActivity+0x142>
 800526c:	88bb      	ldrh	r3, [r7, #4]
 800526e:	2b64      	cmp	r3, #100	; 0x64
 8005270:	d863      	bhi.n	800533a <TouchPredefinedActivityActivity+0x142>
				{
					if(ActivityButtonState[0] >= 1) // if is ON
 8005272:	4b6f      	ldr	r3, [pc, #444]	; (8005430 <TouchPredefinedActivityActivity+0x238>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d02f      	beq.n	80052da <TouchPredefinedActivityActivity+0xe2>
					{
						ActivityButtonState[0] = 0;
 800527a:	4b6d      	ldr	r3, [pc, #436]	; (8005430 <TouchPredefinedActivityActivity+0x238>)
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005280:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005284:	9301      	str	r3, [sp, #4]
 8005286:	230a      	movs	r3, #10
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	2328      	movs	r3, #40	; 0x28
 800528c:	2278      	movs	r2, #120	; 0x78
 800528e:	213c      	movs	r1, #60	; 0x3c
 8005290:	2064      	movs	r0, #100	; 0x64
 8005292:	f7fc f9dc 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 8005296:	4967      	ldr	r1, [pc, #412]	; (8005434 <TouchPredefinedActivityActivity+0x23c>)
 8005298:	4867      	ldr	r0, [pc, #412]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 800529a:	f009 f8ed 	bl	800e478 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800529e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	2300      	movs	r3, #0
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	223e      	movs	r2, #62	; 0x3e
 80052ac:	2177      	movs	r1, #119	; 0x77
 80052ae:	4862      	ldr	r0, [pc, #392]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 80052b0:	f7fc fc38 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 80052b4:	4961      	ldr	r1, [pc, #388]	; (800543c <TouchPredefinedActivityActivity+0x244>)
 80052b6:	4860      	ldr	r0, [pc, #384]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 80052b8:	f009 f8de 	bl	800e478 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80052bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	2300      	movs	r3, #0
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	2300      	movs	r3, #0
 80052c8:	2250      	movs	r2, #80	; 0x50
 80052ca:	2193      	movs	r1, #147	; 0x93
 80052cc:	485a      	ldr	r0, [pc, #360]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 80052ce:	f7fc fc29 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(0); // Turn Activity OFF
 80052d2:	2000      	movs	r0, #0
 80052d4:	f7fe fc2e 	bl	8003b34 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 80052d8:	e098      	b.n	800540c <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[0] = 1;
 80052da:	4b55      	ldr	r3, [pc, #340]	; (8005430 <TouchPredefinedActivityActivity+0x238>)
 80052dc:	2201      	movs	r2, #1
 80052de:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80052e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	230a      	movs	r3, #10
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	2328      	movs	r3, #40	; 0x28
 80052ec:	2278      	movs	r2, #120	; 0x78
 80052ee:	213c      	movs	r1, #60	; 0x3c
 80052f0:	2064      	movs	r0, #100	; 0x64
 80052f2:	f7fc f9ac 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 80052f6:	494f      	ldr	r1, [pc, #316]	; (8005434 <TouchPredefinedActivityActivity+0x23c>)
 80052f8:	484f      	ldr	r0, [pc, #316]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 80052fa:	f009 f8bd 	bl	800e478 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80052fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005302:	9301      	str	r3, [sp, #4]
 8005304:	2300      	movs	r3, #0
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	2300      	movs	r3, #0
 800530a:	223e      	movs	r2, #62	; 0x3e
 800530c:	2177      	movs	r1, #119	; 0x77
 800530e:	484a      	ldr	r0, [pc, #296]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 8005310:	f7fc fc08 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 8005314:	494a      	ldr	r1, [pc, #296]	; (8005440 <TouchPredefinedActivityActivity+0x248>)
 8005316:	4848      	ldr	r0, [pc, #288]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 8005318:	f009 f8ae 	bl	800e478 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800531c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	2300      	movs	r3, #0
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	2300      	movs	r3, #0
 8005328:	2250      	movs	r2, #80	; 0x50
 800532a:	2193      	movs	r1, #147	; 0x93
 800532c:	4842      	ldr	r0, [pc, #264]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 800532e:	f7fc fbf9 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(1);
 8005332:	2001      	movs	r0, #1
 8005334:	f7fe fbfe 	bl	8003b34 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8005338:	e068      	b.n	800540c <TouchPredefinedActivityActivity+0x214>
					}

				}

				else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 800533a:	88bb      	ldrh	r3, [r7, #4]
 800533c:	2b77      	cmp	r3, #119	; 0x77
 800533e:	d965      	bls.n	800540c <TouchPredefinedActivityActivity+0x214>
 8005340:	88bb      	ldrh	r3, [r7, #4]
 8005342:	2ba0      	cmp	r3, #160	; 0xa0
 8005344:	d862      	bhi.n	800540c <TouchPredefinedActivityActivity+0x214>
				{
					if(ActivityButtonState[1] >= 1) // if is ON
 8005346:	4b3a      	ldr	r3, [pc, #232]	; (8005430 <TouchPredefinedActivityActivity+0x238>)
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d02f      	beq.n	80053ae <TouchPredefinedActivityActivity+0x1b6>
					{
						ActivityButtonState[1] = 0;
 800534e:	4b38      	ldr	r3, [pc, #224]	; (8005430 <TouchPredefinedActivityActivity+0x238>)
 8005350:	2200      	movs	r2, #0
 8005352:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005354:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	230a      	movs	r3, #10
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	2328      	movs	r3, #40	; 0x28
 8005360:	2278      	movs	r2, #120	; 0x78
 8005362:	2178      	movs	r1, #120	; 0x78
 8005364:	2064      	movs	r0, #100	; 0x64
 8005366:	f7fc f972 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 800536a:	4936      	ldr	r1, [pc, #216]	; (8005444 <TouchPredefinedActivityActivity+0x24c>)
 800536c:	4832      	ldr	r0, [pc, #200]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 800536e:	f009 f883 	bl	800e478 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005372:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	2300      	movs	r3, #0
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	2300      	movs	r3, #0
 800537e:	227a      	movs	r2, #122	; 0x7a
 8005380:	2169      	movs	r1, #105	; 0x69
 8005382:	482d      	ldr	r0, [pc, #180]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 8005384:	f7fc fbce 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 8005388:	492c      	ldr	r1, [pc, #176]	; (800543c <TouchPredefinedActivityActivity+0x244>)
 800538a:	482b      	ldr	r0, [pc, #172]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 800538c:	f009 f874 	bl	800e478 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005390:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	2300      	movs	r3, #0
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	2300      	movs	r3, #0
 800539c:	228c      	movs	r2, #140	; 0x8c
 800539e:	2193      	movs	r1, #147	; 0x93
 80053a0:	4825      	ldr	r0, [pc, #148]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 80053a2:	f7fc fbbf 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(0);
 80053a6:	2000      	movs	r0, #0
 80053a8:	f7fe fbac 	bl	8003b04 <predefinedActivityCzyszczenie>
 80053ac:	e02e      	b.n	800540c <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[1] = 1;
 80053ae:	4b20      	ldr	r3, [pc, #128]	; (8005430 <TouchPredefinedActivityActivity+0x238>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80053b4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	230a      	movs	r3, #10
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2328      	movs	r3, #40	; 0x28
 80053c0:	2278      	movs	r2, #120	; 0x78
 80053c2:	2178      	movs	r1, #120	; 0x78
 80053c4:	2064      	movs	r0, #100	; 0x64
 80053c6:	f7fc f942 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 80053ca:	491e      	ldr	r1, [pc, #120]	; (8005444 <TouchPredefinedActivityActivity+0x24c>)
 80053cc:	481a      	ldr	r0, [pc, #104]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 80053ce:	f009 f853 	bl	800e478 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80053d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80053d6:	9301      	str	r3, [sp, #4]
 80053d8:	2300      	movs	r3, #0
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	2300      	movs	r3, #0
 80053de:	227a      	movs	r2, #122	; 0x7a
 80053e0:	2169      	movs	r1, #105	; 0x69
 80053e2:	4815      	ldr	r0, [pc, #84]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 80053e4:	f7fc fb9e 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 80053e8:	4915      	ldr	r1, [pc, #84]	; (8005440 <TouchPredefinedActivityActivity+0x248>)
 80053ea:	4813      	ldr	r0, [pc, #76]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 80053ec:	f009 f844 	bl	800e478 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80053f0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	2300      	movs	r3, #0
 80053fc:	228c      	movs	r2, #140	; 0x8c
 80053fe:	2193      	movs	r1, #147	; 0x93
 8005400:	480d      	ldr	r0, [pc, #52]	; (8005438 <TouchPredefinedActivityActivity+0x240>)
 8005402:	f7fc fb8f 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(1);
 8005406:	2001      	movs	r0, #1
 8005408:	f7fe fb7c 	bl	8003b04 <predefinedActivityCzyszczenie>
					}
				}
			}
			TimerTouch = HAL_GetTick();
 800540c:	f001 fc6c 	bl	8006ce8 <HAL_GetTick>
 8005410:	4603      	mov	r3, r0
 8005412:	4a03      	ldr	r2, [pc, #12]	; (8005420 <TouchPredefinedActivityActivity+0x228>)
 8005414:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20000254 	.word	0x20000254
 8005424:	080131a8 	.word	0x080131a8
 8005428:	20000258 	.word	0x20000258
 800542c:	2000024f 	.word	0x2000024f
 8005430:	20000278 	.word	0x20000278
 8005434:	08012398 	.word	0x08012398
 8005438:	200002c4 	.word	0x200002c4
 800543c:	08012378 	.word	0x08012378
 8005440:	0801237c 	.word	0x0801237c
 8005444:	080123a4 	.word	0x080123a4

08005448 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800544e:	f7fc ff1d 	bl	800228c <XPT2046_IsTouched>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 819d 	beq.w	8005794 <TouchWSLedActivity+0x34c>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800545a:	48ae      	ldr	r0, [pc, #696]	; (8005714 <TouchWSLedActivity+0x2cc>)
 800545c:	f7fc f948 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005460:	f001 fc42 	bl	8006ce8 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	4bac      	ldr	r3, [pc, #688]	; (8005718 <TouchWSLedActivity+0x2d0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005470:	f0c0 8190 	bcc.w	8005794 <TouchWSLedActivity+0x34c>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005474:	1d3a      	adds	r2, r7, #4
 8005476:	1dbb      	adds	r3, r7, #6
 8005478:	4611      	mov	r1, r2
 800547a:	4618      	mov	r0, r3
 800547c:	f7fc fec8 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 8005480:	4ba6      	ldr	r3, [pc, #664]	; (800571c <TouchWSLedActivity+0x2d4>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d10b      	bne.n	80054a0 <TouchWSLedActivity+0x58>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8005488:	bf00      	nop
 800548a:	2201      	movs	r2, #1
 800548c:	49a4      	ldr	r1, [pc, #656]	; (8005720 <TouchWSLedActivity+0x2d8>)
 800548e:	2001      	movs	r0, #1
 8005490:	f7fd fa10 	bl	80028b4 <eeprom_read>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f7      	bne.n	800548a <TouchWSLedActivity+0x42>
					WSLedChangeFlag = 0;
 800549a:	4ba2      	ldr	r3, [pc, #648]	; (8005724 <TouchWSLedActivity+0x2dc>)
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	2b09      	cmp	r3, #9
 80054a4:	d90f      	bls.n	80054c6 <TouchWSLedActivity+0x7e>
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	2b6e      	cmp	r3, #110	; 0x6e
 80054aa:	d80c      	bhi.n	80054c6 <TouchWSLedActivity+0x7e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80054ac:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80054ae:	2bd7      	cmp	r3, #215	; 0xd7
 80054b0:	d909      	bls.n	80054c6 <TouchWSLedActivity+0x7e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80054b2:	88bb      	ldrh	r3, [r7, #4]
 80054b4:	2bec      	cmp	r3, #236	; 0xec
 80054b6:	d806      	bhi.n	80054c6 <TouchWSLedActivity+0x7e>
				{
					State = MENUTFT_LIGHTS;
 80054b8:	4b9b      	ldr	r3, [pc, #620]	; (8005728 <TouchWSLedActivity+0x2e0>)
 80054ba:	2205      	movs	r2, #5
 80054bc:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80054be:	4b9b      	ldr	r3, [pc, #620]	; (800572c <TouchWSLedActivity+0x2e4>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	701a      	strb	r2, [r3, #0]
 80054c4:	e161      	b.n	800578a <TouchWSLedActivity+0x342>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 80054c6:	88bb      	ldrh	r3, [r7, #4]
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	f240 80af 	bls.w	800562c <TouchWSLedActivity+0x1e4>
 80054ce:	88bb      	ldrh	r3, [r7, #4]
 80054d0:	2b56      	cmp	r3, #86	; 0x56
 80054d2:	f200 80ab 	bhi.w	800562c <TouchWSLedActivity+0x1e4>
				{

					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	2bd8      	cmp	r3, #216	; 0xd8
 80054da:	d92f      	bls.n	800553c <TouchWSLedActivity+0xf4>
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	2bf7      	cmp	r3, #247	; 0xf7
 80054e0:	d82c      	bhi.n	800553c <TouchWSLedActivity+0xf4>
					{
						if(NrOfLeds < 98)
 80054e2:	4b8f      	ldr	r3, [pc, #572]	; (8005720 <TouchWSLedActivity+0x2d8>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b61      	cmp	r3, #97	; 0x61
 80054e8:	d806      	bhi.n	80054f8 <TouchWSLedActivity+0xb0>
						{
							NrOfLeds++;
 80054ea:	4b8d      	ldr	r3, [pc, #564]	; (8005720 <TouchWSLedActivity+0x2d8>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	3301      	adds	r3, #1
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	4b8b      	ldr	r3, [pc, #556]	; (8005720 <TouchWSLedActivity+0x2d8>)
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e002      	b.n	80054fe <TouchWSLedActivity+0xb6>
						}
						else
						{
							NrOfLeds = 1;
 80054f8:	4b89      	ldr	r3, [pc, #548]	; (8005720 <TouchWSLedActivity+0x2d8>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	701a      	strb	r2, [r3, #0]
						}
						if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 80054fe:	4b88      	ldr	r3, [pc, #544]	; (8005720 <TouchWSLedActivity+0x2d8>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b09      	cmp	r3, #9
 8005504:	d807      	bhi.n	8005516 <TouchWSLedActivity+0xce>
 8005506:	4b86      	ldr	r3, [pc, #536]	; (8005720 <TouchWSLedActivity+0x2d8>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	4988      	ldr	r1, [pc, #544]	; (8005730 <TouchWSLedActivity+0x2e8>)
 800550e:	4889      	ldr	r0, [pc, #548]	; (8005734 <TouchWSLedActivity+0x2ec>)
 8005510:	f008 ffb2 	bl	800e478 <siprintf>
 8005514:	e006      	b.n	8005524 <TouchWSLedActivity+0xdc>
						else sprintf((char*)Msg, " %d", NrOfLeds);
 8005516:	4b82      	ldr	r3, [pc, #520]	; (8005720 <TouchWSLedActivity+0x2d8>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	4986      	ldr	r1, [pc, #536]	; (8005738 <TouchWSLedActivity+0x2f0>)
 800551e:	4885      	ldr	r0, [pc, #532]	; (8005734 <TouchWSLedActivity+0x2ec>)
 8005520:	f008 ffaa 	bl	800e478 <siprintf>
						EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005524:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	2301      	movs	r3, #1
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	2300      	movs	r3, #0
 8005530:	223c      	movs	r2, #60	; 0x3c
 8005532:	21ac      	movs	r1, #172	; 0xac
 8005534:	487f      	ldr	r0, [pc, #508]	; (8005734 <TouchWSLedActivity+0x2ec>)
 8005536:	f7fc faf5 	bl	8001b24 <EF_PutString>
 800553a:	e076      	b.n	800562a <TouchWSLedActivity+0x1e2>
					}
					else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	2bfb      	cmp	r3, #251	; 0xfb
 8005540:	d941      	bls.n	80055c6 <TouchWSLedActivity+0x17e>
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 8005548:	d83d      	bhi.n	80055c6 <TouchWSLedActivity+0x17e>
					{
						if(NrOfLeds < 90)
 800554a:	4b75      	ldr	r3, [pc, #468]	; (8005720 <TouchWSLedActivity+0x2d8>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b59      	cmp	r3, #89	; 0x59
 8005550:	d806      	bhi.n	8005560 <TouchWSLedActivity+0x118>
						{
							NrOfLeds = NrOfLeds + 10;
 8005552:	4b73      	ldr	r3, [pc, #460]	; (8005720 <TouchWSLedActivity+0x2d8>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	330a      	adds	r3, #10
 8005558:	b2da      	uxtb	r2, r3
 800555a:	4b71      	ldr	r3, [pc, #452]	; (8005720 <TouchWSLedActivity+0x2d8>)
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	e013      	b.n	8005588 <TouchWSLedActivity+0x140>
						}
						else
						{
							NrOfLeds = (NrOfLeds + 10) % 99;
 8005560:	4b6f      	ldr	r3, [pc, #444]	; (8005720 <TouchWSLedActivity+0x2d8>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f103 020a 	add.w	r2, r3, #10
 8005568:	4b74      	ldr	r3, [pc, #464]	; (800573c <TouchWSLedActivity+0x2f4>)
 800556a:	fb83 1302 	smull	r1, r3, r3, r2
 800556e:	4413      	add	r3, r2
 8005570:	1199      	asrs	r1, r3, #6
 8005572:	17d3      	asrs	r3, r2, #31
 8005574:	1ac9      	subs	r1, r1, r3
 8005576:	460b      	mov	r3, r1
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	440b      	add	r3, r1
 800557c:	0159      	lsls	r1, r3, #5
 800557e:	440b      	add	r3, r1
 8005580:	1ad1      	subs	r1, r2, r3
 8005582:	b2ca      	uxtb	r2, r1
 8005584:	4b66      	ldr	r3, [pc, #408]	; (8005720 <TouchWSLedActivity+0x2d8>)
 8005586:	701a      	strb	r2, [r3, #0]
						}
					// Display String
					if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8005588:	4b65      	ldr	r3, [pc, #404]	; (8005720 <TouchWSLedActivity+0x2d8>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b09      	cmp	r3, #9
 800558e:	d807      	bhi.n	80055a0 <TouchWSLedActivity+0x158>
 8005590:	4b63      	ldr	r3, [pc, #396]	; (8005720 <TouchWSLedActivity+0x2d8>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	461a      	mov	r2, r3
 8005596:	4966      	ldr	r1, [pc, #408]	; (8005730 <TouchWSLedActivity+0x2e8>)
 8005598:	4866      	ldr	r0, [pc, #408]	; (8005734 <TouchWSLedActivity+0x2ec>)
 800559a:	f008 ff6d 	bl	800e478 <siprintf>
 800559e:	e006      	b.n	80055ae <TouchWSLedActivity+0x166>
					else sprintf((char*)Msg, " %d", NrOfLeds);
 80055a0:	4b5f      	ldr	r3, [pc, #380]	; (8005720 <TouchWSLedActivity+0x2d8>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	4964      	ldr	r1, [pc, #400]	; (8005738 <TouchWSLedActivity+0x2f0>)
 80055a8:	4862      	ldr	r0, [pc, #392]	; (8005734 <TouchWSLedActivity+0x2ec>)
 80055aa:	f008 ff65 	bl	800e478 <siprintf>
					EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80055ae:	f24c 6318 	movw	r3, #50712	; 0xc618
 80055b2:	9301      	str	r3, [sp, #4]
 80055b4:	2301      	movs	r3, #1
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	2300      	movs	r3, #0
 80055ba:	223c      	movs	r2, #60	; 0x3c
 80055bc:	21ac      	movs	r1, #172	; 0xac
 80055be:	485d      	ldr	r0, [pc, #372]	; (8005734 <TouchWSLedActivity+0x2ec>)
 80055c0:	f7fc fab0 	bl	8001b24 <EF_PutString>
 80055c4:	e031      	b.n	800562a <TouchWSLedActivity+0x1e2>
					}


					else if((x >= WS_LED_BUTTON_3_X)&&(x <= (WS_LED_BUTTON_3_X + WS_LED_BUTTON_W))) // OK - confirm and send number of LEDs
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 80055cc:	f240 80d6 	bls.w	800577c <TouchWSLedActivity+0x334>
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 80055d6:	f080 80d1 	bcs.w	800577c <TouchWSLedActivity+0x334>
					{
						SendComand(UCMD_WS_NUMBER_LED);
 80055da:	2025      	movs	r0, #37	; 0x25
 80055dc:	f000 fb74 	bl	8005cc8 <SendComand>
						EF_SetFont(&arial_11ptFontInfo);
 80055e0:	4857      	ldr	r0, [pc, #348]	; (8005740 <TouchWSLedActivity+0x2f8>)
 80055e2:	f7fc f885 	bl	80016f0 <EF_SetFont>
						GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80055e6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	2305      	movs	r3, #5
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	2315      	movs	r3, #21
 80055f2:	221e      	movs	r2, #30
 80055f4:	2141      	movs	r1, #65	; 0x41
 80055f6:	f240 101f 	movw	r0, #287	; 0x11f
 80055fa:	f7fc f828 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OK");
 80055fe:	4951      	ldr	r1, [pc, #324]	; (8005744 <TouchWSLedActivity+0x2fc>)
 8005600:	484c      	ldr	r0, [pc, #304]	; (8005734 <TouchWSLedActivity+0x2ec>)
 8005602:	f008 ff39 	bl	800e478 <siprintf>
						EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005606:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	2300      	movs	r3, #0
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	2300      	movs	r3, #0
 8005612:	2243      	movs	r2, #67	; 0x43
 8005614:	f240 1123 	movw	r1, #291	; 0x123
 8005618:	4846      	ldr	r0, [pc, #280]	; (8005734 <TouchWSLedActivity+0x2ec>)
 800561a:	f7fc fa83 	bl	8001b24 <EF_PutString>
						// Write chosen number of LEDs to EEPROM memory
						eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
 800561e:	2201      	movs	r2, #1
 8005620:	493f      	ldr	r1, [pc, #252]	; (8005720 <TouchWSLedActivity+0x2d8>)
 8005622:	2001      	movs	r0, #1
 8005624:	f7fd f964 	bl	80028f0 <eeprom_write>
					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8005628:	e0a8      	b.n	800577c <TouchWSLedActivity+0x334>
 800562a:	e0a7      	b.n	800577c <TouchWSLedActivity+0x334>
				}

				//
				// Check if it is second line button to change LEDs to WHITE
				//
				else if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 800562c:	88bb      	ldrh	r3, [r7, #4]
 800562e:	2b5e      	cmp	r3, #94	; 0x5e
 8005630:	d924      	bls.n	800567c <TouchWSLedActivity+0x234>
 8005632:	88bb      	ldrh	r3, [r7, #4]
 8005634:	2b74      	cmp	r3, #116	; 0x74
 8005636:	d821      	bhi.n	800567c <TouchWSLedActivity+0x234>
				{
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005638:	88fb      	ldrh	r3, [r7, #6]
 800563a:	2b95      	cmp	r3, #149	; 0x95
 800563c:	d906      	bls.n	800564c <TouchWSLedActivity+0x204>
 800563e:	88fb      	ldrh	r3, [r7, #6]
 8005640:	2bbe      	cmp	r3, #190	; 0xbe
 8005642:	d803      	bhi.n	800564c <TouchWSLedActivity+0x204>
					{
						SendComand(UCMD_WS_LED_WHITE_MAX);
 8005644:	201d      	movs	r0, #29
 8005646:	f000 fb3f 	bl	8005cc8 <SendComand>
 800564a:	e016      	b.n	800567a <TouchWSLedActivity+0x232>
					}
					else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	2bc9      	cmp	r3, #201	; 0xc9
 8005650:	d906      	bls.n	8005660 <TouchWSLedActivity+0x218>
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	2bf2      	cmp	r3, #242	; 0xf2
 8005656:	d803      	bhi.n	8005660 <TouchWSLedActivity+0x218>
					{
						SendComand(UCMD_WS_LED_WHITE_MID);
 8005658:	201e      	movs	r0, #30
 800565a:	f000 fb35 	bl	8005cc8 <SendComand>
 800565e:	e00c      	b.n	800567a <TouchWSLedActivity+0x232>
					}
					else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	2bfd      	cmp	r3, #253	; 0xfd
 8005664:	f240 808c 	bls.w	8005780 <TouchWSLedActivity+0x338>
 8005668:	88fb      	ldrh	r3, [r7, #6]
 800566a:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800566e:	f200 8087 	bhi.w	8005780 <TouchWSLedActivity+0x338>
					{
						SendComand(UCMD_WS_LED_WHITE_MIN);
 8005672:	201f      	movs	r0, #31
 8005674:	f000 fb28 	bl	8005cc8 <SendComand>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005678:	e082      	b.n	8005780 <TouchWSLedActivity+0x338>
 800567a:	e081      	b.n	8005780 <TouchWSLedActivity+0x338>
				}

				//
				// Check if it is third line button to change LEDs to BLUE
				//
				else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 800567c:	88bb      	ldrh	r3, [r7, #4]
 800567e:	2b7c      	cmp	r3, #124	; 0x7c
 8005680:	d922      	bls.n	80056c8 <TouchWSLedActivity+0x280>
 8005682:	88bb      	ldrh	r3, [r7, #4]
 8005684:	2b92      	cmp	r3, #146	; 0x92
 8005686:	d81f      	bhi.n	80056c8 <TouchWSLedActivity+0x280>
				{
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	2b95      	cmp	r3, #149	; 0x95
 800568c:	d906      	bls.n	800569c <TouchWSLedActivity+0x254>
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	2bbe      	cmp	r3, #190	; 0xbe
 8005692:	d803      	bhi.n	800569c <TouchWSLedActivity+0x254>
					{
						SendComand(UCMD_WS_LED_BLUE_MAX);
 8005694:	2020      	movs	r0, #32
 8005696:	f000 fb17 	bl	8005cc8 <SendComand>
 800569a:	e014      	b.n	80056c6 <TouchWSLedActivity+0x27e>
					}
					else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 800569c:	88fb      	ldrh	r3, [r7, #6]
 800569e:	2bc9      	cmp	r3, #201	; 0xc9
 80056a0:	d906      	bls.n	80056b0 <TouchWSLedActivity+0x268>
 80056a2:	88fb      	ldrh	r3, [r7, #6]
 80056a4:	2bf2      	cmp	r3, #242	; 0xf2
 80056a6:	d803      	bhi.n	80056b0 <TouchWSLedActivity+0x268>
					{
						SendComand(UCMD_WS_LED_BLUE_MID);
 80056a8:	2021      	movs	r0, #33	; 0x21
 80056aa:	f000 fb0d 	bl	8005cc8 <SendComand>
 80056ae:	e00a      	b.n	80056c6 <TouchWSLedActivity+0x27e>
					}
					else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80056b0:	88fb      	ldrh	r3, [r7, #6]
 80056b2:	2bfd      	cmp	r3, #253	; 0xfd
 80056b4:	d966      	bls.n	8005784 <TouchWSLedActivity+0x33c>
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80056bc:	d862      	bhi.n	8005784 <TouchWSLedActivity+0x33c>
					{
						SendComand(UCMD_WS_LED_BLUE_MIN);
 80056be:	2022      	movs	r0, #34	; 0x22
 80056c0:	f000 fb02 	bl	8005cc8 <SendComand>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80056c4:	e05e      	b.n	8005784 <TouchWSLedActivity+0x33c>
 80056c6:	e05d      	b.n	8005784 <TouchWSLedActivity+0x33c>
				}

				//
				// Check if it is fourth line button to change LEDs to Predefined
				//
				else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 80056c8:	88bb      	ldrh	r3, [r7, #4]
 80056ca:	2b9b      	cmp	r3, #155	; 0x9b
 80056cc:	d93c      	bls.n	8005748 <TouchWSLedActivity+0x300>
 80056ce:	88bb      	ldrh	r3, [r7, #4]
 80056d0:	2bb1      	cmp	r3, #177	; 0xb1
 80056d2:	d839      	bhi.n	8005748 <TouchWSLedActivity+0x300>
				{
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80056d4:	88fb      	ldrh	r3, [r7, #6]
 80056d6:	2b13      	cmp	r3, #19
 80056d8:	d906      	bls.n	80056e8 <TouchWSLedActivity+0x2a0>
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	2b64      	cmp	r3, #100	; 0x64
 80056de:	d803      	bhi.n	80056e8 <TouchWSLedActivity+0x2a0>
					{
						SendComand(UCMD_WS_LED_DAILY);
 80056e0:	2023      	movs	r0, #35	; 0x23
 80056e2:	f000 faf1 	bl	8005cc8 <SendComand>
 80056e6:	e014      	b.n	8005712 <TouchWSLedActivity+0x2ca>
					}
					else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	2b77      	cmp	r3, #119	; 0x77
 80056ec:	d906      	bls.n	80056fc <TouchWSLedActivity+0x2b4>
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	2bc8      	cmp	r3, #200	; 0xc8
 80056f2:	d803      	bhi.n	80056fc <TouchWSLedActivity+0x2b4>
					{
						SendComand(UCMD_WS_LED_WHITE_OFF);
 80056f4:	201c      	movs	r0, #28
 80056f6:	f000 fae7 	bl	8005cc8 <SendComand>
 80056fa:	e00a      	b.n	8005712 <TouchWSLedActivity+0x2ca>
					}
					else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	2bdb      	cmp	r3, #219	; 0xdb
 8005700:	d942      	bls.n	8005788 <TouchWSLedActivity+0x340>
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005708:	d83e      	bhi.n	8005788 <TouchWSLedActivity+0x340>
					{
						SendComand(UCMD_WS_LED_NIGHT);
 800570a:	2024      	movs	r0, #36	; 0x24
 800570c:	f000 fadc 	bl	8005cc8 <SendComand>
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8005710:	e03a      	b.n	8005788 <TouchWSLedActivity+0x340>
 8005712:	e039      	b.n	8005788 <TouchWSLedActivity+0x340>
 8005714:	08015120 	.word	0x08015120
 8005718:	20000254 	.word	0x20000254
 800571c:	20000250 	.word	0x20000250
 8005720:	20000032 	.word	0x20000032
 8005724:	20000251 	.word	0x20000251
 8005728:	20000258 	.word	0x20000258
 800572c:	2000024f 	.word	0x2000024f
 8005730:	080123b0 	.word	0x080123b0
 8005734:	200002c4 	.word	0x200002c4
 8005738:	080123b8 	.word	0x080123b8
 800573c:	a57eb503 	.word	0xa57eb503
 8005740:	080131a8 	.word	0x080131a8
 8005744:	080123bc 	.word	0x080123bc
				}

				//
				// Check if it is fifth line button to change LEDs to Predefined animations
				//
				else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 8005748:	88bb      	ldrh	r3, [r7, #4]
 800574a:	2bba      	cmp	r3, #186	; 0xba
 800574c:	d91d      	bls.n	800578a <TouchWSLedActivity+0x342>
 800574e:	88bb      	ldrh	r3, [r7, #4]
 8005750:	2bd0      	cmp	r3, #208	; 0xd0
 8005752:	d81a      	bhi.n	800578a <TouchWSLedActivity+0x342>
				{
					if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8005754:	88fb      	ldrh	r3, [r7, #6]
 8005756:	2b45      	cmp	r3, #69	; 0x45
 8005758:	d906      	bls.n	8005768 <TouchWSLedActivity+0x320>
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	2b96      	cmp	r3, #150	; 0x96
 800575e:	d803      	bhi.n	8005768 <TouchWSLedActivity+0x320>
					{
						SendComand(UCMD_WS_ANIMATION_SUNRISE);
 8005760:	2026      	movs	r0, #38	; 0x26
 8005762:	f000 fab1 	bl	8005cc8 <SendComand>
 8005766:	e010      	b.n	800578a <TouchWSLedActivity+0x342>
					}
					else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	2ba9      	cmp	r3, #169	; 0xa9
 800576c:	d90d      	bls.n	800578a <TouchWSLedActivity+0x342>
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	2bfa      	cmp	r3, #250	; 0xfa
 8005772:	d80a      	bhi.n	800578a <TouchWSLedActivity+0x342>
					{
						SendComand(UCMD_WS_ANIMATION_SUNSET);
 8005774:	2027      	movs	r0, #39	; 0x27
 8005776:	f000 faa7 	bl	8005cc8 <SendComand>
 800577a:	e006      	b.n	800578a <TouchWSLedActivity+0x342>
					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 800577c:	bf00      	nop
 800577e:	e004      	b.n	800578a <TouchWSLedActivity+0x342>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005780:	bf00      	nop
 8005782:	e002      	b.n	800578a <TouchWSLedActivity+0x342>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005784:	bf00      	nop
 8005786:	e000      	b.n	800578a <TouchWSLedActivity+0x342>
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8005788:	bf00      	nop
					}
				}
				TimerTouch = HAL_GetTick();
 800578a:	f001 faad 	bl	8006ce8 <HAL_GetTick>
 800578e:	4603      	mov	r3, r0
 8005790:	4a02      	ldr	r2, [pc, #8]	; (800579c <TouchWSLedActivity+0x354>)
 8005792:	6013      	str	r3, [r2, #0]
			}
		}
}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	20000254 	.word	0x20000254

080057a0 <UART_ParseLine>:
 * 	22	=>	LIGHTSSTATUS=?\n	// Podaj stan wszytskich swiatel
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b094      	sub	sp, #80	; 0x50
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 80057a8:	f107 0308 	add.w	r3, r7, #8
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 f842 	bl	8006838 <UARTDMA_GetLineFromReceiveBuffer>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d155      	bne.n	8005866 <UART_ParseLine+0xc6>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 80057ba:	f107 0308 	add.w	r3, r7, #8
 80057be:	492c      	ldr	r1, [pc, #176]	; (8005870 <UART_ParseLine+0xd0>)
 80057c0:	4618      	mov	r0, r3
 80057c2:	f009 fcb1 	bl	800f128 <strtok>
 80057c6:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 80057c8:	492a      	ldr	r1, [pc, #168]	; (8005874 <UART_ParseLine+0xd4>)
 80057ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80057cc:	f7fa fd08 	bl	80001e0 <strcmp>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 80057d6:	f000 f85d 	bl	8005894 <UART_ParseLED>
	  {
		  UART_ParseAnswLightsStateStatus();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 80057da:	e044      	b.n	8005866 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 80057dc:	4926      	ldr	r1, [pc, #152]	; (8005878 <UART_ParseLine+0xd8>)
 80057de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80057e0:	f7fa fcfe 	bl	80001e0 <strcmp>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d102      	bne.n	80057f0 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 80057ea:	f000 f8a1 	bl	8005930 <UART_ParseAnswStatus>
}
 80057ee:	e03a      	b.n	8005866 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 80057f0:	4922      	ldr	r1, [pc, #136]	; (800587c <UART_ParseLine+0xdc>)
 80057f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80057f4:	f7fa fcf4 	bl	80001e0 <strcmp>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 80057fe:	f000 f89f 	bl	8005940 <UART_ParseAnswTemp>
}
 8005802:	e030      	b.n	8005866 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8005804:	491e      	ldr	r1, [pc, #120]	; (8005880 <UART_ParseLine+0xe0>)
 8005806:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005808:	f7fa fcea 	bl	80001e0 <strcmp>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d102      	bne.n	8005818 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8005812:	f000 f939 	bl	8005a88 <UART_ParseAnswPres>
}
 8005816:	e026      	b.n	8005866 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8005818:	491a      	ldr	r1, [pc, #104]	; (8005884 <UART_ParseLine+0xe4>)
 800581a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800581c:	f7fa fce0 	bl	80001e0 <strcmp>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8005826:	f000 f975 	bl	8005b14 <UART_ParseAnswChangeRelayState>
}
 800582a:	e01c      	b.n	8005866 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 800582c:	4916      	ldr	r1, [pc, #88]	; (8005888 <UART_ParseLine+0xe8>)
 800582e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005830:	f7fa fcd6 	bl	80001e0 <strcmp>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d102      	bne.n	8005840 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 800583a:	f000 f972 	bl	8005b22 <UART_ParseAnswChangeLightState>
}
 800583e:	e012      	b.n	8005866 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8005840:	4912      	ldr	r1, [pc, #72]	; (800588c <UART_ParseLine+0xec>)
 8005842:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005844:	f7fa fccc 	bl	80001e0 <strcmp>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d102      	bne.n	8005854 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 800584e:	f000 f96f 	bl	8005b30 <UART_ParseAnswRelayStateStatus>
}
 8005852:	e008      	b.n	8005866 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8005854:	490e      	ldr	r1, [pc, #56]	; (8005890 <UART_ParseLine+0xf0>)
 8005856:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005858:	f7fa fcc2 	bl	80001e0 <strcmp>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <UART_ParseLine+0xc6>
		  UART_ParseAnswLightsStateStatus();
 8005862:	f000 f9cb 	bl	8005bfc <UART_ParseAnswLightsStateStatus>
}
 8005866:	bf00      	nop
 8005868:	3750      	adds	r7, #80	; 0x50
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	080123c0 	.word	0x080123c0
 8005874:	080123c4 	.word	0x080123c4
 8005878:	080123c8 	.word	0x080123c8
 800587c:	080123d0 	.word	0x080123d0
 8005880:	080123d8 	.word	0x080123d8
 8005884:	080123e0 	.word	0x080123e0
 8005888:	080123ec 	.word	0x080123ec
 800588c:	080123f8 	.word	0x080123f8
 8005890:	08012404 	.word	0x08012404

08005894 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800589a:	491f      	ldr	r1, [pc, #124]	; (8005918 <UART_ParseLED+0x84>)
 800589c:	2000      	movs	r0, #0
 800589e:	f009 fc43 	bl	800f128 <strtok>
 80058a2:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d031      	beq.n	8005910 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b2f      	cmp	r3, #47	; 0x2f
 80058b2:	d903      	bls.n	80058bc <UART_ParseLED+0x28>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b39      	cmp	r3, #57	; 0x39
 80058ba:	d904      	bls.n	80058c6 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 80058bc:	4917      	ldr	r1, [pc, #92]	; (800591c <UART_ParseLED+0x88>)
 80058be:	4818      	ldr	r0, [pc, #96]	; (8005920 <UART_ParseLED+0x8c>)
 80058c0:	f000 ffeb 	bl	800689a <UARTDMA_Print>
			return;	// And exit parsing
 80058c4:	e024      	b.n	8005910 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f007 ff1f 	bl	800d70a <atoi>
 80058cc:	4603      	mov	r3, r0
 80058ce:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d10a      	bne.n	80058ec <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 80058d6:	2200      	movs	r2, #0
 80058d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058dc:	4811      	ldr	r0, [pc, #68]	; (8005924 <UART_ParseLED+0x90>)
 80058de:	f002 f97f 	bl	8007be0 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 80058e2:	4911      	ldr	r1, [pc, #68]	; (8005928 <UART_ParseLED+0x94>)
 80058e4:	480e      	ldr	r0, [pc, #56]	; (8005920 <UART_ParseLED+0x8c>)
 80058e6:	f000 ffd8 	bl	800689a <UARTDMA_Print>
 80058ea:	e011      	b.n	8005910 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 80058f2:	2201      	movs	r2, #1
 80058f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058f8:	480a      	ldr	r0, [pc, #40]	; (8005924 <UART_ParseLED+0x90>)
 80058fa:	f002 f971 	bl	8007be0 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 80058fe:	490b      	ldr	r1, [pc, #44]	; (800592c <UART_ParseLED+0x98>)
 8005900:	4807      	ldr	r0, [pc, #28]	; (8005920 <UART_ParseLED+0x8c>)
 8005902:	f000 ffca 	bl	800689a <UARTDMA_Print>
 8005906:	e003      	b.n	8005910 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8005908:	4904      	ldr	r1, [pc, #16]	; (800591c <UART_ParseLED+0x88>)
 800590a:	4805      	ldr	r0, [pc, #20]	; (8005920 <UART_ParseLED+0x8c>)
 800590c:	f000 ffc5 	bl	800689a <UARTDMA_Print>
		}
	}
}
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	08012410 	.word	0x08012410
 800591c:	08012414 	.word	0x08012414
 8005920:	2000044c 	.word	0x2000044c
 8005924:	40020800 	.word	0x40020800
 8005928:	08012424 	.word	0x08012424
 800592c:	08012430 	.word	0x08012430

08005930 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
	...

08005940 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8005946:	2300      	movs	r3, #0
 8005948:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 800594a:	4947      	ldr	r1, [pc, #284]	; (8005a68 <UART_ParseAnswTemp+0x128>)
 800594c:	2000      	movs	r0, #0
 800594e:	f009 fbeb 	bl	800f128 <strtok>
 8005952:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8081 	beq.w	8005a60 <UART_ParseAnswTemp+0x120>
	{
			NrCzujnika = atoi(ParsePointer);
 800595e:	68b8      	ldr	r0, [r7, #8]
 8005960:	f007 fed3 	bl	800d70a <atoi>
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d010      	beq.n	8005992 <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8005970:	493d      	ldr	r1, [pc, #244]	; (8005a68 <UART_ParseAnswTemp+0x128>)
 8005972:	2000      	movs	r0, #0
 8005974:	f009 fbd8 	bl	800f128 <strtok>
 8005978:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f007 fec2 	bl	800d704 <atof>
 8005980:	ec53 2b10 	vmov	r2, r3, d0
 8005984:	4610      	mov	r0, r2
 8005986:	4619      	mov	r1, r3
 8005988:	f7fb f946 	bl	8000c18 <__aeabi_d2f>
 800598c:	4603      	mov	r3, r0
 800598e:	4a37      	ldr	r2, [pc, #220]	; (8005a6c <UART_ParseAnswTemp+0x12c>)
 8005990:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 8005992:	4b37      	ldr	r3, [pc, #220]	; (8005a70 <UART_ParseAnswTemp+0x130>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d162      	bne.n	8005a60 <UART_ParseAnswTemp+0x120>
			{
				if(NrCzujnika == 1)
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d119      	bne.n	80059d4 <UART_ParseAnswTemp+0x94>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 80059a0:	4834      	ldr	r0, [pc, #208]	; (8005a74 <UART_ParseAnswTemp+0x134>)
 80059a2:	f7fb fea5 	bl	80016f0 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 80059a6:	4b31      	ldr	r3, [pc, #196]	; (8005a6c <UART_ParseAnswTemp+0x12c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fa fde4 	bl	8000578 <__aeabi_f2d>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4930      	ldr	r1, [pc, #192]	; (8005a78 <UART_ParseAnswTemp+0x138>)
 80059b6:	4831      	ldr	r0, [pc, #196]	; (8005a7c <UART_ParseAnswTemp+0x13c>)
 80059b8:	f008 fd5e 	bl	800e478 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80059bc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	2301      	movs	r3, #1
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	2300      	movs	r3, #0
 80059c8:	2250      	movs	r2, #80	; 0x50
 80059ca:	2114      	movs	r1, #20
 80059cc:	482b      	ldr	r0, [pc, #172]	; (8005a7c <UART_ParseAnswTemp+0x13c>)
 80059ce:	f7fc f8a9 	bl	8001b24 <EF_PutString>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 80059d2:	e045      	b.n	8005a60 <UART_ParseAnswTemp+0x120>
				else if(NrCzujnika == 2)
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d142      	bne.n	8005a60 <UART_ParseAnswTemp+0x120>
						if (CTemp == 0.0) // Error in connection to ds18b20
 80059da:	4b24      	ldr	r3, [pc, #144]	; (8005a6c <UART_ParseAnswTemp+0x12c>)
 80059dc:	edd3 7a00 	vldr	s15, [r3]
 80059e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80059e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e8:	d11d      	bne.n	8005a26 <UART_ParseAnswTemp+0xe6>
							CTemp = LCTemp;
 80059ea:	4b25      	ldr	r3, [pc, #148]	; (8005a80 <UART_ParseAnswTemp+0x140>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1f      	ldr	r2, [pc, #124]	; (8005a6c <UART_ParseAnswTemp+0x12c>)
 80059f0:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 80059f2:	4820      	ldr	r0, [pc, #128]	; (8005a74 <UART_ParseAnswTemp+0x134>)
 80059f4:	f7fb fe7c 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 80059f8:	4b1c      	ldr	r3, [pc, #112]	; (8005a6c <UART_ParseAnswTemp+0x12c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fa fdbb 	bl	8000578 <__aeabi_f2d>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	491f      	ldr	r1, [pc, #124]	; (8005a84 <UART_ParseAnswTemp+0x144>)
 8005a08:	481c      	ldr	r0, [pc, #112]	; (8005a7c <UART_ParseAnswTemp+0x13c>)
 8005a0a:	f008 fd35 	bl	800e478 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005a0e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	2301      	movs	r3, #1
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	226e      	movs	r2, #110	; 0x6e
 8005a1c:	2114      	movs	r1, #20
 8005a1e:	4817      	ldr	r0, [pc, #92]	; (8005a7c <UART_ParseAnswTemp+0x13c>)
 8005a20:	f7fc f880 	bl	8001b24 <EF_PutString>
	}
 8005a24:	e01c      	b.n	8005a60 <UART_ParseAnswTemp+0x120>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8005a26:	4813      	ldr	r0, [pc, #76]	; (8005a74 <UART_ParseAnswTemp+0x134>)
 8005a28:	f7fb fe62 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <UART_ParseAnswTemp+0x12c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fa fda1 	bl	8000578 <__aeabi_f2d>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4912      	ldr	r1, [pc, #72]	; (8005a84 <UART_ParseAnswTemp+0x144>)
 8005a3c:	480f      	ldr	r0, [pc, #60]	; (8005a7c <UART_ParseAnswTemp+0x13c>)
 8005a3e:	f008 fd1b 	bl	800e478 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005a42:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005a46:	9301      	str	r3, [sp, #4]
 8005a48:	2301      	movs	r3, #1
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	226e      	movs	r2, #110	; 0x6e
 8005a50:	2114      	movs	r1, #20
 8005a52:	480a      	ldr	r0, [pc, #40]	; (8005a7c <UART_ParseAnswTemp+0x13c>)
 8005a54:	f7fc f866 	bl	8001b24 <EF_PutString>
							LCTemp = CTemp;
 8005a58:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <UART_ParseAnswTemp+0x12c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a08      	ldr	r2, [pc, #32]	; (8005a80 <UART_ParseAnswTemp+0x140>)
 8005a5e:	6013      	str	r3, [r2, #0]
	}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	08012410 	.word	0x08012410
 8005a6c:	2000025c 	.word	0x2000025c
 8005a70:	20000258 	.word	0x20000258
 8005a74:	08015120 	.word	0x08015120
 8005a78:	0801243c 	.word	0x0801243c
 8005a7c:	200002c4 	.word	0x200002c4
 8005a80:	20000260 	.word	0x20000260
 8005a84:	08012450 	.word	0x08012450

08005a88 <UART_ParseAnswPres>:

//
// Parsing information about current presure
//"APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8005a8e:	491b      	ldr	r1, [pc, #108]	; (8005afc <UART_ParseAnswPres+0x74>)
 8005a90:	2000      	movs	r0, #0
 8005a92:	f009 fb49 	bl	800f128 <strtok>
 8005a96:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d028      	beq.n	8005af2 <UART_ParseAnswPres+0x6a>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f007 fe2f 	bl	800d704 <atof>
 8005aa6:	ec53 2b10 	vmov	r2, r3, d0
 8005aaa:	4610      	mov	r0, r2
 8005aac:	4619      	mov	r1, r3
 8005aae:	f7fb f8b3 	bl	8000c18 <__aeabi_d2f>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4a12      	ldr	r2, [pc, #72]	; (8005b00 <UART_ParseAnswPres+0x78>)
 8005ab6:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8005ab8:	4b12      	ldr	r3, [pc, #72]	; (8005b04 <UART_ParseAnswPres+0x7c>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d118      	bne.n	8005af2 <UART_ParseAnswPres+0x6a>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8005ac0:	4811      	ldr	r0, [pc, #68]	; (8005b08 <UART_ParseAnswPres+0x80>)
 8005ac2:	f7fb fe15 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8005ac6:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <UART_ParseAnswPres+0x78>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fa fd54 	bl	8000578 <__aeabi_f2d>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	490d      	ldr	r1, [pc, #52]	; (8005b0c <UART_ParseAnswPres+0x84>)
 8005ad6:	480e      	ldr	r0, [pc, #56]	; (8005b10 <UART_ParseAnswPres+0x88>)
 8005ad8:	f008 fcce 	bl	800e478 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005adc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005ae0:	9301      	str	r3, [sp, #4]
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	22aa      	movs	r2, #170	; 0xaa
 8005aea:	2114      	movs	r1, #20
 8005aec:	4808      	ldr	r0, [pc, #32]	; (8005b10 <UART_ParseAnswPres+0x88>)
 8005aee:	f7fc f819 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	08012410 	.word	0x08012410
 8005b00:	20000264 	.word	0x20000264
 8005b04:	20000258 	.word	0x20000258
 8005b08:	08015120 	.word	0x08015120
 8005b0c:	08012464 	.word	0x08012464
 8005b10:	200002c4 	.word	0x200002c4

08005b14 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
	//TODO!
}
 8005b18:	bf00      	nop
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8005b22:	b480      	push	{r7}
 8005b24:	af00      	add	r7, sp, #0
	//TODO!
}
 8005b26:	bf00      	nop
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8005b36:	2300      	movs	r3, #0
 8005b38:	71fb      	strb	r3, [r7, #7]
 8005b3a:	e04a      	b.n	8005bd2 <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8005b3c:	4928      	ldr	r1, [pc, #160]	; (8005be0 <UART_ParseAnswRelayStateStatus+0xb0>)
 8005b3e:	2000      	movs	r0, #0
 8005b40:	f009 faf2 	bl	800f128 <strtok>
 8005b44:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d02f      	beq.n	8005bae <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005b4e:	2300      	movs	r3, #0
 8005b50:	71bb      	strb	r3, [r7, #6]
 8005b52:	e025      	b.n	8005ba0 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8005b54:	79bb      	ldrb	r3, [r7, #6]
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	4413      	add	r3, r2
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b2f      	cmp	r3, #47	; 0x2f
 8005b5e:	d905      	bls.n	8005b6c <UART_ParseAnswRelayStateStatus+0x3c>
 8005b60:	79bb      	ldrb	r3, [r7, #6]
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	4413      	add	r3, r2
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b39      	cmp	r3, #57	; 0x39
 8005b6a:	d90e      	bls.n	8005b8a <UART_ParseAnswRelayStateStatus+0x5a>
 8005b6c:	79bb      	ldrb	r3, [r7, #6]
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	4413      	add	r3, r2
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b2e      	cmp	r3, #46	; 0x2e
 8005b76:	d008      	beq.n	8005b8a <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8005b78:	491a      	ldr	r1, [pc, #104]	; (8005be4 <UART_ParseAnswRelayStateStatus+0xb4>)
 8005b7a:	481b      	ldr	r0, [pc, #108]	; (8005be8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005b7c:	f008 fc7c 	bl	800e478 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8005b80:	4919      	ldr	r1, [pc, #100]	; (8005be8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005b82:	481a      	ldr	r0, [pc, #104]	; (8005bec <UART_ParseAnswRelayStateStatus+0xbc>)
 8005b84:	f000 fe89 	bl	800689a <UARTDMA_Print>
					return;	// And exit parsing
 8005b88:	e026      	b.n	8005bd8 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8005b8a:	6838      	ldr	r0, [r7, #0]
 8005b8c:	f007 fdbd 	bl	800d70a <atoi>
 8005b90:	4602      	mov	r2, r0
 8005b92:	79fb      	ldrb	r3, [r7, #7]
 8005b94:	b2d1      	uxtb	r1, r2
 8005b96:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <UART_ParseAnswRelayStateStatus+0xc0>)
 8005b98:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005b9a:	79bb      	ldrb	r3, [r7, #6]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	71bb      	strb	r3, [r7, #6]
 8005ba0:	79bb      	ldrb	r3, [r7, #6]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1d3      	bne.n	8005b54 <UART_ParseAnswRelayStateStatus+0x24>
 8005bac:	e008      	b.n	8005bc0 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8005bae:	4911      	ldr	r1, [pc, #68]	; (8005bf4 <UART_ParseAnswRelayStateStatus+0xc4>)
 8005bb0:	480d      	ldr	r0, [pc, #52]	; (8005be8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005bb2:	f008 fc61 	bl	800e478 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8005bb6:	490c      	ldr	r1, [pc, #48]	; (8005be8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005bb8:	480c      	ldr	r0, [pc, #48]	; (8005bec <UART_ParseAnswRelayStateStatus+0xbc>)
 8005bba:	f000 fe6e 	bl	800689a <UARTDMA_Print>
			return;	// And exit parsing
 8005bbe:	e00b      	b.n	8005bd8 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8005bc0:	4b0d      	ldr	r3, [pc, #52]	; (8005bf8 <UART_ParseAnswRelayStateStatus+0xc8>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d101      	bne.n	8005bcc <UART_ParseAnswRelayStateStatus+0x9c>
 8005bc8:	f7fe f802 	bl	8003bd0 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	71fb      	strb	r3, [r7, #7]
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d9b1      	bls.n	8005b3c <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	08012410 	.word	0x08012410
 8005be4:	0801247c 	.word	0x0801247c
 8005be8:	20000560 	.word	0x20000560
 8005bec:	2000044c 	.word	0x2000044c
 8005bf0:	20000270 	.word	0x20000270
 8005bf4:	08012490 	.word	0x08012490
 8005bf8:	20000258 	.word	0x20000258

08005bfc <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8005c02:	2300      	movs	r3, #0
 8005c04:	71fb      	strb	r3, [r7, #7]
 8005c06:	e04a      	b.n	8005c9e <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8005c08:	4928      	ldr	r1, [pc, #160]	; (8005cac <UART_ParseAnswLightsStateStatus+0xb0>)
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	f009 fa8c 	bl	800f128 <strtok>
 8005c10:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d02f      	beq.n	8005c7a <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	71bb      	strb	r3, [r7, #6]
 8005c1e:	e025      	b.n	8005c6c <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8005c20:	79bb      	ldrb	r3, [r7, #6]
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	4413      	add	r3, r2
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b2f      	cmp	r3, #47	; 0x2f
 8005c2a:	d905      	bls.n	8005c38 <UART_ParseAnswLightsStateStatus+0x3c>
 8005c2c:	79bb      	ldrb	r3, [r7, #6]
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	4413      	add	r3, r2
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b39      	cmp	r3, #57	; 0x39
 8005c36:	d90e      	bls.n	8005c56 <UART_ParseAnswLightsStateStatus+0x5a>
 8005c38:	79bb      	ldrb	r3, [r7, #6]
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b2e      	cmp	r3, #46	; 0x2e
 8005c42:	d008      	beq.n	8005c56 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8005c44:	491a      	ldr	r1, [pc, #104]	; (8005cb0 <UART_ParseAnswLightsStateStatus+0xb4>)
 8005c46:	481b      	ldr	r0, [pc, #108]	; (8005cb4 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005c48:	f008 fc16 	bl	800e478 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8005c4c:	4919      	ldr	r1, [pc, #100]	; (8005cb4 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005c4e:	481a      	ldr	r0, [pc, #104]	; (8005cb8 <UART_ParseAnswLightsStateStatus+0xbc>)
 8005c50:	f000 fe23 	bl	800689a <UARTDMA_Print>
					return;	// And exit parsing
 8005c54:	e026      	b.n	8005ca4 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8005c56:	6838      	ldr	r0, [r7, #0]
 8005c58:	f007 fd57 	bl	800d70a <atoi>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	b2d1      	uxtb	r1, r2
 8005c62:	4a16      	ldr	r2, [pc, #88]	; (8005cbc <UART_ParseAnswLightsStateStatus+0xc0>)
 8005c64:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005c66:	79bb      	ldrb	r3, [r7, #6]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	71bb      	strb	r3, [r7, #6]
 8005c6c:	79bb      	ldrb	r3, [r7, #6]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	4413      	add	r3, r2
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1d3      	bne.n	8005c20 <UART_ParseAnswLightsStateStatus+0x24>
 8005c78:	e008      	b.n	8005c8c <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8005c7a:	4911      	ldr	r1, [pc, #68]	; (8005cc0 <UART_ParseAnswLightsStateStatus+0xc4>)
 8005c7c:	480d      	ldr	r0, [pc, #52]	; (8005cb4 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005c7e:	f008 fbfb 	bl	800e478 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8005c82:	490c      	ldr	r1, [pc, #48]	; (8005cb4 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005c84:	480c      	ldr	r0, [pc, #48]	; (8005cb8 <UART_ParseAnswLightsStateStatus+0xbc>)
 8005c86:	f000 fe08 	bl	800689a <UARTDMA_Print>
			return;	// And exit parsing
 8005c8a:	e00b      	b.n	8005ca4 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 8005c8c:	4b0d      	ldr	r3, [pc, #52]	; (8005cc4 <UART_ParseAnswLightsStateStatus+0xc8>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	d101      	bne.n	8005c98 <UART_ParseAnswLightsStateStatus+0x9c>
 8005c94:	f7fe f8a4 	bl	8003de0 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	71fb      	strb	r3, [r7, #7]
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d9b1      	bls.n	8005c08 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	08012410 	.word	0x08012410
 8005cb0:	0801247c 	.word	0x0801247c
 8005cb4:	20000560 	.word	0x20000560
 8005cb8:	2000044c 	.word	0x2000044c
 8005cbc:	20000274 	.word	0x20000274
 8005cc0:	08012490 	.word	0x08012490
 8005cc4:	20000258 	.word	0x20000258

08005cc8 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	2b27      	cmp	r3, #39	; 0x27
 8005cda:	f200 8129 	bhi.w	8005f30 <SendComand+0x268>
 8005cde:	a201      	add	r2, pc, #4	; (adr r2, 8005ce4 <SendComand+0x1c>)
 8005ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce4:	08005d85 	.word	0x08005d85
 8005ce8:	08005d8f 	.word	0x08005d8f
 8005cec:	08005d99 	.word	0x08005d99
 8005cf0:	08005da3 	.word	0x08005da3
 8005cf4:	08005db7 	.word	0x08005db7
 8005cf8:	08005dc1 	.word	0x08005dc1
 8005cfc:	08005dcb 	.word	0x08005dcb
 8005d00:	08005dd5 	.word	0x08005dd5
 8005d04:	08005ddf 	.word	0x08005ddf
 8005d08:	08005de9 	.word	0x08005de9
 8005d0c:	08005df3 	.word	0x08005df3
 8005d10:	08005dfd 	.word	0x08005dfd
 8005d14:	08005e07 	.word	0x08005e07
 8005d18:	08005e2f 	.word	0x08005e2f
 8005d1c:	08005e39 	.word	0x08005e39
 8005d20:	08005e43 	.word	0x08005e43
 8005d24:	08005e4d 	.word	0x08005e4d
 8005d28:	08005e57 	.word	0x08005e57
 8005d2c:	08005e61 	.word	0x08005e61
 8005d30:	08005e6b 	.word	0x08005e6b
 8005d34:	08005e75 	.word	0x08005e75
 8005d38:	08005e25 	.word	0x08005e25
 8005d3c:	08005e93 	.word	0x08005e93
 8005d40:	08005e11 	.word	0x08005e11
 8005d44:	08005e1b 	.word	0x08005e1b
 8005d48:	08005e7f 	.word	0x08005e7f
 8005d4c:	08005e89 	.word	0x08005e89
 8005d50:	08005dad 	.word	0x08005dad
 8005d54:	08005e9d 	.word	0x08005e9d
 8005d58:	08005ea7 	.word	0x08005ea7
 8005d5c:	08005eb1 	.word	0x08005eb1
 8005d60:	08005ebb 	.word	0x08005ebb
 8005d64:	08005ec5 	.word	0x08005ec5
 8005d68:	08005ecf 	.word	0x08005ecf
 8005d6c:	08005ed9 	.word	0x08005ed9
 8005d70:	08005ee3 	.word	0x08005ee3
 8005d74:	08005eed 	.word	0x08005eed
 8005d78:	08005ef7 	.word	0x08005ef7
 8005d7c:	08005f1d 	.word	0x08005f1d
 8005d80:	08005f27 	.word	0x08005f27
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8005d84:	496d      	ldr	r1, [pc, #436]	; (8005f3c <SendComand+0x274>)
 8005d86:	486e      	ldr	r0, [pc, #440]	; (8005f40 <SendComand+0x278>)
 8005d88:	f000 fd87 	bl	800689a <UARTDMA_Print>
			break;
 8005d8c:	e0d0      	b.n	8005f30 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8005d8e:	496d      	ldr	r1, [pc, #436]	; (8005f44 <SendComand+0x27c>)
 8005d90:	486b      	ldr	r0, [pc, #428]	; (8005f40 <SendComand+0x278>)
 8005d92:	f000 fd82 	bl	800689a <UARTDMA_Print>
			break;
 8005d96:	e0cb      	b.n	8005f30 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8005d98:	496b      	ldr	r1, [pc, #428]	; (8005f48 <SendComand+0x280>)
 8005d9a:	4869      	ldr	r0, [pc, #420]	; (8005f40 <SendComand+0x278>)
 8005d9c:	f000 fd7d 	bl	800689a <UARTDMA_Print>
			break;
 8005da0:	e0c6      	b.n	8005f30 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8005da2:	496a      	ldr	r1, [pc, #424]	; (8005f4c <SendComand+0x284>)
 8005da4:	4866      	ldr	r0, [pc, #408]	; (8005f40 <SendComand+0x278>)
 8005da6:	f000 fd78 	bl	800689a <UARTDMA_Print>
			break;
 8005daa:	e0c1      	b.n	8005f30 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8005dac:	4968      	ldr	r1, [pc, #416]	; (8005f50 <SendComand+0x288>)
 8005dae:	4864      	ldr	r0, [pc, #400]	; (8005f40 <SendComand+0x278>)
 8005db0:	f000 fd73 	bl	800689a <UARTDMA_Print>
			break;
 8005db4:	e0bc      	b.n	8005f30 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8005db6:	4967      	ldr	r1, [pc, #412]	; (8005f54 <SendComand+0x28c>)
 8005db8:	4861      	ldr	r0, [pc, #388]	; (8005f40 <SendComand+0x278>)
 8005dba:	f000 fd6e 	bl	800689a <UARTDMA_Print>
			break;
 8005dbe:	e0b7      	b.n	8005f30 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8005dc0:	4965      	ldr	r1, [pc, #404]	; (8005f58 <SendComand+0x290>)
 8005dc2:	485f      	ldr	r0, [pc, #380]	; (8005f40 <SendComand+0x278>)
 8005dc4:	f000 fd69 	bl	800689a <UARTDMA_Print>
			break;
 8005dc8:	e0b2      	b.n	8005f30 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8005dca:	4964      	ldr	r1, [pc, #400]	; (8005f5c <SendComand+0x294>)
 8005dcc:	485c      	ldr	r0, [pc, #368]	; (8005f40 <SendComand+0x278>)
 8005dce:	f000 fd64 	bl	800689a <UARTDMA_Print>
			break;
 8005dd2:	e0ad      	b.n	8005f30 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8005dd4:	4962      	ldr	r1, [pc, #392]	; (8005f60 <SendComand+0x298>)
 8005dd6:	485a      	ldr	r0, [pc, #360]	; (8005f40 <SendComand+0x278>)
 8005dd8:	f000 fd5f 	bl	800689a <UARTDMA_Print>
			break;
 8005ddc:	e0a8      	b.n	8005f30 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8005dde:	4961      	ldr	r1, [pc, #388]	; (8005f64 <SendComand+0x29c>)
 8005de0:	4857      	ldr	r0, [pc, #348]	; (8005f40 <SendComand+0x278>)
 8005de2:	f000 fd5a 	bl	800689a <UARTDMA_Print>
			break;
 8005de6:	e0a3      	b.n	8005f30 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8005de8:	495f      	ldr	r1, [pc, #380]	; (8005f68 <SendComand+0x2a0>)
 8005dea:	4855      	ldr	r0, [pc, #340]	; (8005f40 <SendComand+0x278>)
 8005dec:	f000 fd55 	bl	800689a <UARTDMA_Print>
			break;
 8005df0:	e09e      	b.n	8005f30 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8005df2:	495e      	ldr	r1, [pc, #376]	; (8005f6c <SendComand+0x2a4>)
 8005df4:	4852      	ldr	r0, [pc, #328]	; (8005f40 <SendComand+0x278>)
 8005df6:	f000 fd50 	bl	800689a <UARTDMA_Print>
			break;
 8005dfa:	e099      	b.n	8005f30 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8005dfc:	495c      	ldr	r1, [pc, #368]	; (8005f70 <SendComand+0x2a8>)
 8005dfe:	4850      	ldr	r0, [pc, #320]	; (8005f40 <SendComand+0x278>)
 8005e00:	f000 fd4b 	bl	800689a <UARTDMA_Print>
			break;
 8005e04:	e094      	b.n	8005f30 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8005e06:	495b      	ldr	r1, [pc, #364]	; (8005f74 <SendComand+0x2ac>)
 8005e08:	484d      	ldr	r0, [pc, #308]	; (8005f40 <SendComand+0x278>)
 8005e0a:	f000 fd46 	bl	800689a <UARTDMA_Print>
			break;
 8005e0e:	e08f      	b.n	8005f30 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8005e10:	4959      	ldr	r1, [pc, #356]	; (8005f78 <SendComand+0x2b0>)
 8005e12:	484b      	ldr	r0, [pc, #300]	; (8005f40 <SendComand+0x278>)
 8005e14:	f000 fd41 	bl	800689a <UARTDMA_Print>
			break;
 8005e18:	e08a      	b.n	8005f30 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8005e1a:	4958      	ldr	r1, [pc, #352]	; (8005f7c <SendComand+0x2b4>)
 8005e1c:	4848      	ldr	r0, [pc, #288]	; (8005f40 <SendComand+0x278>)
 8005e1e:	f000 fd3c 	bl	800689a <UARTDMA_Print>
			break;
 8005e22:	e085      	b.n	8005f30 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8005e24:	4956      	ldr	r1, [pc, #344]	; (8005f80 <SendComand+0x2b8>)
 8005e26:	4846      	ldr	r0, [pc, #280]	; (8005f40 <SendComand+0x278>)
 8005e28:	f000 fd37 	bl	800689a <UARTDMA_Print>
			break;
 8005e2c:	e080      	b.n	8005f30 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8005e2e:	4955      	ldr	r1, [pc, #340]	; (8005f84 <SendComand+0x2bc>)
 8005e30:	4843      	ldr	r0, [pc, #268]	; (8005f40 <SendComand+0x278>)
 8005e32:	f000 fd32 	bl	800689a <UARTDMA_Print>
			break;
 8005e36:	e07b      	b.n	8005f30 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8005e38:	4953      	ldr	r1, [pc, #332]	; (8005f88 <SendComand+0x2c0>)
 8005e3a:	4841      	ldr	r0, [pc, #260]	; (8005f40 <SendComand+0x278>)
 8005e3c:	f000 fd2d 	bl	800689a <UARTDMA_Print>
			break;
 8005e40:	e076      	b.n	8005f30 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8005e42:	4952      	ldr	r1, [pc, #328]	; (8005f8c <SendComand+0x2c4>)
 8005e44:	483e      	ldr	r0, [pc, #248]	; (8005f40 <SendComand+0x278>)
 8005e46:	f000 fd28 	bl	800689a <UARTDMA_Print>
			break;
 8005e4a:	e071      	b.n	8005f30 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8005e4c:	4950      	ldr	r1, [pc, #320]	; (8005f90 <SendComand+0x2c8>)
 8005e4e:	483c      	ldr	r0, [pc, #240]	; (8005f40 <SendComand+0x278>)
 8005e50:	f000 fd23 	bl	800689a <UARTDMA_Print>
			break;
 8005e54:	e06c      	b.n	8005f30 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8005e56:	494f      	ldr	r1, [pc, #316]	; (8005f94 <SendComand+0x2cc>)
 8005e58:	4839      	ldr	r0, [pc, #228]	; (8005f40 <SendComand+0x278>)
 8005e5a:	f000 fd1e 	bl	800689a <UARTDMA_Print>
			break;
 8005e5e:	e067      	b.n	8005f30 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8005e60:	494d      	ldr	r1, [pc, #308]	; (8005f98 <SendComand+0x2d0>)
 8005e62:	4837      	ldr	r0, [pc, #220]	; (8005f40 <SendComand+0x278>)
 8005e64:	f000 fd19 	bl	800689a <UARTDMA_Print>
			break;
 8005e68:	e062      	b.n	8005f30 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 8005e6a:	494c      	ldr	r1, [pc, #304]	; (8005f9c <SendComand+0x2d4>)
 8005e6c:	4834      	ldr	r0, [pc, #208]	; (8005f40 <SendComand+0x278>)
 8005e6e:	f000 fd14 	bl	800689a <UARTDMA_Print>
			break;
 8005e72:	e05d      	b.n	8005f30 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8005e74:	494a      	ldr	r1, [pc, #296]	; (8005fa0 <SendComand+0x2d8>)
 8005e76:	4832      	ldr	r0, [pc, #200]	; (8005f40 <SendComand+0x278>)
 8005e78:	f000 fd0f 	bl	800689a <UARTDMA_Print>
			break;
 8005e7c:	e058      	b.n	8005f30 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 8005e7e:	4949      	ldr	r1, [pc, #292]	; (8005fa4 <SendComand+0x2dc>)
 8005e80:	482f      	ldr	r0, [pc, #188]	; (8005f40 <SendComand+0x278>)
 8005e82:	f000 fd0a 	bl	800689a <UARTDMA_Print>
			break;
 8005e86:	e053      	b.n	8005f30 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8005e88:	4947      	ldr	r1, [pc, #284]	; (8005fa8 <SendComand+0x2e0>)
 8005e8a:	482d      	ldr	r0, [pc, #180]	; (8005f40 <SendComand+0x278>)
 8005e8c:	f000 fd05 	bl	800689a <UARTDMA_Print>
			break;
 8005e90:	e04e      	b.n	8005f30 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8005e92:	4946      	ldr	r1, [pc, #280]	; (8005fac <SendComand+0x2e4>)
 8005e94:	482a      	ldr	r0, [pc, #168]	; (8005f40 <SendComand+0x278>)
 8005e96:	f000 fd00 	bl	800689a <UARTDMA_Print>
			break;
 8005e9a:	e049      	b.n	8005f30 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 8005e9c:	4944      	ldr	r1, [pc, #272]	; (8005fb0 <SendComand+0x2e8>)
 8005e9e:	4828      	ldr	r0, [pc, #160]	; (8005f40 <SendComand+0x278>)
 8005ea0:	f000 fcfb 	bl	800689a <UARTDMA_Print>
			break;
 8005ea4:	e044      	b.n	8005f30 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8005ea6:	4943      	ldr	r1, [pc, #268]	; (8005fb4 <SendComand+0x2ec>)
 8005ea8:	4825      	ldr	r0, [pc, #148]	; (8005f40 <SendComand+0x278>)
 8005eaa:	f000 fcf6 	bl	800689a <UARTDMA_Print>
			break;
 8005eae:	e03f      	b.n	8005f30 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8005eb0:	4941      	ldr	r1, [pc, #260]	; (8005fb8 <SendComand+0x2f0>)
 8005eb2:	4823      	ldr	r0, [pc, #140]	; (8005f40 <SendComand+0x278>)
 8005eb4:	f000 fcf1 	bl	800689a <UARTDMA_Print>
			break;
 8005eb8:	e03a      	b.n	8005f30 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8005eba:	4940      	ldr	r1, [pc, #256]	; (8005fbc <SendComand+0x2f4>)
 8005ebc:	4820      	ldr	r0, [pc, #128]	; (8005f40 <SendComand+0x278>)
 8005ebe:	f000 fcec 	bl	800689a <UARTDMA_Print>
			break;
 8005ec2:	e035      	b.n	8005f30 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8005ec4:	493e      	ldr	r1, [pc, #248]	; (8005fc0 <SendComand+0x2f8>)
 8005ec6:	481e      	ldr	r0, [pc, #120]	; (8005f40 <SendComand+0x278>)
 8005ec8:	f000 fce7 	bl	800689a <UARTDMA_Print>
			break;
 8005ecc:	e030      	b.n	8005f30 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8005ece:	493d      	ldr	r1, [pc, #244]	; (8005fc4 <SendComand+0x2fc>)
 8005ed0:	481b      	ldr	r0, [pc, #108]	; (8005f40 <SendComand+0x278>)
 8005ed2:	f000 fce2 	bl	800689a <UARTDMA_Print>
			break;
 8005ed6:	e02b      	b.n	8005f30 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8005ed8:	493b      	ldr	r1, [pc, #236]	; (8005fc8 <SendComand+0x300>)
 8005eda:	4819      	ldr	r0, [pc, #100]	; (8005f40 <SendComand+0x278>)
 8005edc:	f000 fcdd 	bl	800689a <UARTDMA_Print>
			break;
 8005ee0:	e026      	b.n	8005f30 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 8005ee2:	493a      	ldr	r1, [pc, #232]	; (8005fcc <SendComand+0x304>)
 8005ee4:	4816      	ldr	r0, [pc, #88]	; (8005f40 <SendComand+0x278>)
 8005ee6:	f000 fcd8 	bl	800689a <UARTDMA_Print>
			break;
 8005eea:	e021      	b.n	8005f30 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8005eec:	4938      	ldr	r1, [pc, #224]	; (8005fd0 <SendComand+0x308>)
 8005eee:	4814      	ldr	r0, [pc, #80]	; (8005f40 <SendComand+0x278>)
 8005ef0:	f000 fcd3 	bl	800689a <UARTDMA_Print>
			break;
 8005ef4:	e01c      	b.n	8005f30 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8005ef6:	4b37      	ldr	r3, [pc, #220]	; (8005fd4 <SendComand+0x30c>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d802      	bhi.n	8005f04 <SendComand+0x23c>
 8005efe:	4b35      	ldr	r3, [pc, #212]	; (8005fd4 <SendComand+0x30c>)
 8005f00:	2209      	movs	r2, #9
 8005f02:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8005f04:	4b33      	ldr	r3, [pc, #204]	; (8005fd4 <SendComand+0x30c>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4933      	ldr	r1, [pc, #204]	; (8005fd8 <SendComand+0x310>)
 8005f0c:	4833      	ldr	r0, [pc, #204]	; (8005fdc <SendComand+0x314>)
 8005f0e:	f008 fab3 	bl	800e478 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8005f12:	4932      	ldr	r1, [pc, #200]	; (8005fdc <SendComand+0x314>)
 8005f14:	480a      	ldr	r0, [pc, #40]	; (8005f40 <SendComand+0x278>)
 8005f16:	f000 fcc0 	bl	800689a <UARTDMA_Print>
			break;
 8005f1a:	e009      	b.n	8005f30 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8005f1c:	4930      	ldr	r1, [pc, #192]	; (8005fe0 <SendComand+0x318>)
 8005f1e:	4808      	ldr	r0, [pc, #32]	; (8005f40 <SendComand+0x278>)
 8005f20:	f000 fcbb 	bl	800689a <UARTDMA_Print>
			break;
 8005f24:	e004      	b.n	8005f30 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8005f26:	492f      	ldr	r1, [pc, #188]	; (8005fe4 <SendComand+0x31c>)
 8005f28:	4805      	ldr	r0, [pc, #20]	; (8005f40 <SendComand+0x278>)
 8005f2a:	f000 fcb6 	bl	800689a <UARTDMA_Print>
			break;
 8005f2e:	bf00      	nop
		}
	return 1;
 8005f30:	2301      	movs	r3, #1
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	080124ac 	.word	0x080124ac
 8005f40:	2000044c 	.word	0x2000044c
 8005f44:	080124b4 	.word	0x080124b4
 8005f48:	080124bc 	.word	0x080124bc
 8005f4c:	080124c8 	.word	0x080124c8
 8005f50:	080124d0 	.word	0x080124d0
 8005f54:	080124d8 	.word	0x080124d8
 8005f58:	080124e0 	.word	0x080124e0
 8005f5c:	080124f0 	.word	0x080124f0
 8005f60:	08012500 	.word	0x08012500
 8005f64:	08012510 	.word	0x08012510
 8005f68:	08012520 	.word	0x08012520
 8005f6c:	08012530 	.word	0x08012530
 8005f70:	08012540 	.word	0x08012540
 8005f74:	08012550 	.word	0x08012550
 8005f78:	08012560 	.word	0x08012560
 8005f7c:	08012570 	.word	0x08012570
 8005f80:	08012580 	.word	0x08012580
 8005f84:	08012590 	.word	0x08012590
 8005f88:	080125a0 	.word	0x080125a0
 8005f8c:	080125b0 	.word	0x080125b0
 8005f90:	080125c0 	.word	0x080125c0
 8005f94:	080125d0 	.word	0x080125d0
 8005f98:	080125e0 	.word	0x080125e0
 8005f9c:	080125f0 	.word	0x080125f0
 8005fa0:	08012600 	.word	0x08012600
 8005fa4:	08012610 	.word	0x08012610
 8005fa8:	08012620 	.word	0x08012620
 8005fac:	08012630 	.word	0x08012630
 8005fb0:	08012640 	.word	0x08012640
 8005fb4:	08012650 	.word	0x08012650
 8005fb8:	08012660 	.word	0x08012660
 8005fbc:	08012670 	.word	0x08012670
 8005fc0:	08012680 	.word	0x08012680
 8005fc4:	08012690 	.word	0x08012690
 8005fc8:	080126a0 	.word	0x080126a0
 8005fcc:	080126b0 	.word	0x080126b0
 8005fd0:	080126c0 	.word	0x080126c0
 8005fd4:	20000032 	.word	0x20000032
 8005fd8:	080126d0 	.word	0x080126d0
 8005fdc:	20000560 	.word	0x20000560
 8005fe0:	080126e0 	.word	0x080126e0
 8005fe4:	080126f0 	.word	0x080126f0

08005fe8 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d101      	bne.n	8006002 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8005ffe:	2301      	movs	r3, #1
 8006000:	e018      	b.n	8006034 <RB_Read+0x4c>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	461a      	mov	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4413      	add	r3, r2
 800600c:	789a      	ldrb	r2, [r3, #2]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	4b09      	ldr	r3, [pc, #36]	; (8006040 <RB_Read+0x58>)
 800601a:	fb83 1302 	smull	r1, r3, r3, r2
 800601e:	1159      	asrs	r1, r3, #5
 8006020:	17d3      	asrs	r3, r2, #31
 8006022:	1ac9      	subs	r1, r1, r3
 8006024:	460b      	mov	r3, r1
 8006026:	019b      	lsls	r3, r3, #6
 8006028:	440b      	add	r3, r1
 800602a:	1ad1      	subs	r1, r2, r3
 800602c:	b2ca      	uxtb	r2, r1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	7e07e07f 	.word	0x7e07e07f

08006044 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <RB_Write+0x5c>)
 8006058:	fb83 1302 	smull	r1, r3, r3, r2
 800605c:	1159      	asrs	r1, r3, #5
 800605e:	17d3      	asrs	r3, r2, #31
 8006060:	1ac9      	subs	r1, r1, r3
 8006062:	460b      	mov	r3, r1
 8006064:	019b      	lsls	r3, r3, #6
 8006066:	440b      	add	r3, r1
 8006068:	1ad1      	subs	r1, r2, r3
 800606a:	460b      	mov	r3, r1
 800606c:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	785b      	ldrb	r3, [r3, #1]
 8006072:	7bfa      	ldrb	r2, [r7, #15]
 8006074:	429a      	cmp	r2, r3
 8006076:	d101      	bne.n	800607c <RB_Write+0x38>
	{
		return RB_ERROR; // No free space error
 8006078:	2301      	movs	r3, #1
 800607a:	e00a      	b.n	8006092 <RB_Write+0x4e>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4413      	add	r3, r2
 8006086:	78fa      	ldrb	r2, [r7, #3]
 8006088:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	7bfa      	ldrb	r2, [r7, #15]
 800608e:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	7e07e07f 	.word	0x7e07e07f

080060a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80060a8:	4b17      	ldr	r3, [pc, #92]	; (8006108 <MX_SPI1_Init+0x64>)
 80060aa:	4a18      	ldr	r2, [pc, #96]	; (800610c <MX_SPI1_Init+0x68>)
 80060ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80060ae:	4b16      	ldr	r3, [pc, #88]	; (8006108 <MX_SPI1_Init+0x64>)
 80060b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80060b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80060b6:	4b14      	ldr	r3, [pc, #80]	; (8006108 <MX_SPI1_Init+0x64>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80060bc:	4b12      	ldr	r3, [pc, #72]	; (8006108 <MX_SPI1_Init+0x64>)
 80060be:	2200      	movs	r2, #0
 80060c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80060c2:	4b11      	ldr	r3, [pc, #68]	; (8006108 <MX_SPI1_Init+0x64>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80060c8:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <MX_SPI1_Init+0x64>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80060ce:	4b0e      	ldr	r3, [pc, #56]	; (8006108 <MX_SPI1_Init+0x64>)
 80060d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80060d6:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <MX_SPI1_Init+0x64>)
 80060d8:	2210      	movs	r2, #16
 80060da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80060dc:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <MX_SPI1_Init+0x64>)
 80060de:	2200      	movs	r2, #0
 80060e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80060e2:	4b09      	ldr	r3, [pc, #36]	; (8006108 <MX_SPI1_Init+0x64>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060e8:	4b07      	ldr	r3, [pc, #28]	; (8006108 <MX_SPI1_Init+0x64>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80060ee:	4b06      	ldr	r3, [pc, #24]	; (8006108 <MX_SPI1_Init+0x64>)
 80060f0:	220a      	movs	r2, #10
 80060f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80060f4:	4804      	ldr	r0, [pc, #16]	; (8006108 <MX_SPI1_Init+0x64>)
 80060f6:	f005 fb0b 	bl	800b710 <HAL_SPI_Init>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006100:	f7fe fa9c 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006104:	bf00      	nop
 8006106:	bd80      	pop	{r7, pc}
 8006108:	200005fc 	.word	0x200005fc
 800610c:	40013000 	.word	0x40013000

08006110 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8006114:	4b17      	ldr	r3, [pc, #92]	; (8006174 <MX_SPI3_Init+0x64>)
 8006116:	4a18      	ldr	r2, [pc, #96]	; (8006178 <MX_SPI3_Init+0x68>)
 8006118:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800611a:	4b16      	ldr	r3, [pc, #88]	; (8006174 <MX_SPI3_Init+0x64>)
 800611c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006120:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006122:	4b14      	ldr	r3, [pc, #80]	; (8006174 <MX_SPI3_Init+0x64>)
 8006124:	2200      	movs	r2, #0
 8006126:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006128:	4b12      	ldr	r3, [pc, #72]	; (8006174 <MX_SPI3_Init+0x64>)
 800612a:	2200      	movs	r2, #0
 800612c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800612e:	4b11      	ldr	r3, [pc, #68]	; (8006174 <MX_SPI3_Init+0x64>)
 8006130:	2200      	movs	r2, #0
 8006132:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <MX_SPI3_Init+0x64>)
 8006136:	2200      	movs	r2, #0
 8006138:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800613a:	4b0e      	ldr	r3, [pc, #56]	; (8006174 <MX_SPI3_Init+0x64>)
 800613c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006140:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006142:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <MX_SPI3_Init+0x64>)
 8006144:	2220      	movs	r2, #32
 8006146:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <MX_SPI3_Init+0x64>)
 800614a:	2200      	movs	r2, #0
 800614c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800614e:	4b09      	ldr	r3, [pc, #36]	; (8006174 <MX_SPI3_Init+0x64>)
 8006150:	2200      	movs	r2, #0
 8006152:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <MX_SPI3_Init+0x64>)
 8006156:	2200      	movs	r2, #0
 8006158:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800615a:	4b06      	ldr	r3, [pc, #24]	; (8006174 <MX_SPI3_Init+0x64>)
 800615c:	220a      	movs	r2, #10
 800615e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006160:	4804      	ldr	r0, [pc, #16]	; (8006174 <MX_SPI3_Init+0x64>)
 8006162:	f005 fad5 	bl	800b710 <HAL_SPI_Init>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800616c:	f7fe fa66 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006170:	bf00      	nop
 8006172:	bd80      	pop	{r7, pc}
 8006174:	200005a4 	.word	0x200005a4
 8006178:	40003c00 	.word	0x40003c00

0800617c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08c      	sub	sp, #48	; 0x30
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006184:	f107 031c 	add.w	r3, r7, #28
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	605a      	str	r2, [r3, #4]
 800618e:	609a      	str	r2, [r3, #8]
 8006190:	60da      	str	r2, [r3, #12]
 8006192:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a32      	ldr	r2, [pc, #200]	; (8006264 <HAL_SPI_MspInit+0xe8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d12c      	bne.n	80061f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800619e:	2300      	movs	r3, #0
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	4b31      	ldr	r3, [pc, #196]	; (8006268 <HAL_SPI_MspInit+0xec>)
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a6:	4a30      	ldr	r2, [pc, #192]	; (8006268 <HAL_SPI_MspInit+0xec>)
 80061a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061ac:	6453      	str	r3, [r2, #68]	; 0x44
 80061ae:	4b2e      	ldr	r3, [pc, #184]	; (8006268 <HAL_SPI_MspInit+0xec>)
 80061b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
 80061be:	4b2a      	ldr	r3, [pc, #168]	; (8006268 <HAL_SPI_MspInit+0xec>)
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	4a29      	ldr	r2, [pc, #164]	; (8006268 <HAL_SPI_MspInit+0xec>)
 80061c4:	f043 0301 	orr.w	r3, r3, #1
 80061c8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ca:	4b27      	ldr	r3, [pc, #156]	; (8006268 <HAL_SPI_MspInit+0xec>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80061d6:	23e0      	movs	r3, #224	; 0xe0
 80061d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061da:	2302      	movs	r3, #2
 80061dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061e2:	2303      	movs	r3, #3
 80061e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80061e6:	2305      	movs	r3, #5
 80061e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061ea:	f107 031c 	add.w	r3, r7, #28
 80061ee:	4619      	mov	r1, r3
 80061f0:	481e      	ldr	r0, [pc, #120]	; (800626c <HAL_SPI_MspInit+0xf0>)
 80061f2:	f001 fb59 	bl	80078a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80061f6:	e030      	b.n	800625a <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1c      	ldr	r2, [pc, #112]	; (8006270 <HAL_SPI_MspInit+0xf4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d12b      	bne.n	800625a <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006202:	2300      	movs	r3, #0
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	4b18      	ldr	r3, [pc, #96]	; (8006268 <HAL_SPI_MspInit+0xec>)
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	4a17      	ldr	r2, [pc, #92]	; (8006268 <HAL_SPI_MspInit+0xec>)
 800620c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006210:	6413      	str	r3, [r2, #64]	; 0x40
 8006212:	4b15      	ldr	r3, [pc, #84]	; (8006268 <HAL_SPI_MspInit+0xec>)
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800621a:	613b      	str	r3, [r7, #16]
 800621c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	4b11      	ldr	r3, [pc, #68]	; (8006268 <HAL_SPI_MspInit+0xec>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	4a10      	ldr	r2, [pc, #64]	; (8006268 <HAL_SPI_MspInit+0xec>)
 8006228:	f043 0302 	orr.w	r3, r3, #2
 800622c:	6313      	str	r3, [r2, #48]	; 0x30
 800622e:	4b0e      	ldr	r3, [pc, #56]	; (8006268 <HAL_SPI_MspInit+0xec>)
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800623a:	2338      	movs	r3, #56	; 0x38
 800623c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800623e:	2302      	movs	r3, #2
 8006240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006242:	2300      	movs	r3, #0
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006246:	2303      	movs	r3, #3
 8006248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800624a:	2306      	movs	r3, #6
 800624c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800624e:	f107 031c 	add.w	r3, r7, #28
 8006252:	4619      	mov	r1, r3
 8006254:	4807      	ldr	r0, [pc, #28]	; (8006274 <HAL_SPI_MspInit+0xf8>)
 8006256:	f001 fb27 	bl	80078a8 <HAL_GPIO_Init>
}
 800625a:	bf00      	nop
 800625c:	3730      	adds	r7, #48	; 0x30
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40013000 	.word	0x40013000
 8006268:	40023800 	.word	0x40023800
 800626c:	40020000 	.word	0x40020000
 8006270:	40003c00 	.word	0x40003c00
 8006274:	40020400 	.word	0x40020400

08006278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800627e:	2300      	movs	r3, #0
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <HAL_MspInit+0x4c>)
 8006284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006286:	4a0f      	ldr	r2, [pc, #60]	; (80062c4 <HAL_MspInit+0x4c>)
 8006288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800628c:	6453      	str	r3, [r2, #68]	; 0x44
 800628e:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <HAL_MspInit+0x4c>)
 8006290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006296:	607b      	str	r3, [r7, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800629a:	2300      	movs	r3, #0
 800629c:	603b      	str	r3, [r7, #0]
 800629e:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <HAL_MspInit+0x4c>)
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	4a08      	ldr	r2, [pc, #32]	; (80062c4 <HAL_MspInit+0x4c>)
 80062a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a8:	6413      	str	r3, [r2, #64]	; 0x40
 80062aa:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <HAL_MspInit+0x4c>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	40023800 	.word	0x40023800

080062c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80062cc:	e7fe      	b.n	80062cc <NMI_Handler+0x4>

080062ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062ce:	b480      	push	{r7}
 80062d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062d2:	e7fe      	b.n	80062d2 <HardFault_Handler+0x4>

080062d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062d8:	e7fe      	b.n	80062d8 <MemManage_Handler+0x4>

080062da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062da:	b480      	push	{r7}
 80062dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062de:	e7fe      	b.n	80062de <BusFault_Handler+0x4>

080062e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062e4:	e7fe      	b.n	80062e4 <UsageFault_Handler+0x4>

080062e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062e6:	b480      	push	{r7}
 80062e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80062ea:	bf00      	nop
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062f8:	bf00      	nop
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006302:	b480      	push	{r7}
 8006304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006306:	bf00      	nop
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006314:	f000 fcd4 	bl	8006cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006318:	bf00      	nop
 800631a:	bd80      	pop	{r7, pc}

0800631c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IRQ_Pin);
 8006320:	2010      	movs	r0, #16
 8006322:	f001 fc91 	bl	8007c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006326:	bf00      	nop
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8006330:	4802      	ldr	r0, [pc, #8]	; (800633c <DMA1_Stream0_IRQHandler+0x10>)
 8006332:	f001 f841 	bl	80073b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006336:	bf00      	nop
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	200003ec 	.word	0x200003ec

08006340 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006344:	4802      	ldr	r0, [pc, #8]	; (8006350 <DMA1_Stream1_IRQHandler+0x10>)
 8006346:	f001 f837 	bl	80073b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800634a:	bf00      	nop
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20000338 	.word	0x20000338

08006354 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 8006358:	4802      	ldr	r0, [pc, #8]	; (8006364 <DMA1_Stream5_IRQHandler+0x10>)
 800635a:	f000 f9e9 	bl	8006730 <UARTDMA_DmaReceiveIrqHandler>
	return;
 800635e:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	2000044c 	.word	0x2000044c

08006368 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800636c:	4802      	ldr	r0, [pc, #8]	; (8006378 <DMA1_Stream6_IRQHandler+0x10>)
 800636e:	f001 f823 	bl	80073b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8006372:	bf00      	nop
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	20000744 	.word	0x20000744

0800637c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8006380:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006384:	f001 fc60 	bl	8007c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006388:	bf00      	nop
 800638a:	bd80      	pop	{r7, pc}

0800638c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006390:	4802      	ldr	r0, [pc, #8]	; (800639c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006392:	f005 feb2 	bl	800c0fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006396:	bf00      	nop
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20000654 	.word	0x20000654

080063a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80063a4:	4802      	ldr	r0, [pc, #8]	; (80063b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80063a6:	f005 fea8 	bl	800c0fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80063aa:	bf00      	nop
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	2000069c 	.word	0x2000069c

080063b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80063b8:	4802      	ldr	r0, [pc, #8]	; (80063c4 <I2C1_EV_IRQHandler+0x10>)
 80063ba:	f002 fbe5 	bl	8008b88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80063be:	bf00      	nop
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000398 	.word	0x20000398

080063c8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80063cc:	4802      	ldr	r0, [pc, #8]	; (80063d8 <I2C1_ER_IRQHandler+0x10>)
 80063ce:	f002 fd4c 	bl	8008e6a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80063d2:	bf00      	nop
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000398 	.word	0x20000398

080063dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 80063e0:	4803      	ldr	r0, [pc, #12]	; (80063f0 <USART2_IRQHandler+0x14>)
 80063e2:	f000 f97b 	bl	80066dc <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80063e6:	4803      	ldr	r0, [pc, #12]	; (80063f4 <USART2_IRQHandler+0x18>)
 80063e8:	f006 f948 	bl	800c67c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80063ec:	bf00      	nop
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	2000044c 	.word	0x2000044c
 80063f4:	200007a4 	.word	0x200007a4

080063f8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80063fc:	4802      	ldr	r0, [pc, #8]	; (8006408 <SPI3_IRQHandler+0x10>)
 80063fe:	f005 fbb3 	bl	800bb68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8006402:	bf00      	nop
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	200005a4 	.word	0x200005a4

0800640c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
	return 1;
 8006410:	2301      	movs	r3, #1
}
 8006412:	4618      	mov	r0, r3
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <_kill>:

int _kill(int pid, int sig)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006426:	f007 f975 	bl	800d714 <__errno>
 800642a:	4603      	mov	r3, r0
 800642c:	2216      	movs	r2, #22
 800642e:	601a      	str	r2, [r3, #0]
	return -1;
 8006430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <_exit>:

void _exit (int status)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006444:	f04f 31ff 	mov.w	r1, #4294967295
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff ffe7 	bl	800641c <_kill>
	while (1) {}		/* Make sure we hang here */
 800644e:	e7fe      	b.n	800644e <_exit+0x12>

08006450 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	e00a      	b.n	8006478 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006462:	f3af 8000 	nop.w
 8006466:	4601      	mov	r1, r0
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	60ba      	str	r2, [r7, #8]
 800646e:	b2ca      	uxtb	r2, r1
 8006470:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	3301      	adds	r3, #1
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	429a      	cmp	r2, r3
 800647e:	dbf0      	blt.n	8006462 <_read+0x12>
	}

return len;
 8006480:	687b      	ldr	r3, [r7, #4]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b086      	sub	sp, #24
 800648e:	af00      	add	r7, sp, #0
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	e009      	b.n	80064b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	60ba      	str	r2, [r7, #8]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	3301      	adds	r3, #1
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	dbf1      	blt.n	800649c <_write+0x12>
	}
	return len;
 80064b8:	687b      	ldr	r3, [r7, #4]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <_close>:

int _close(int file)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
	return -1;
 80064ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064ea:	605a      	str	r2, [r3, #4]
	return 0;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <_isatty>:

int _isatty(int file)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
	return 1;
 8006502:	2301      	movs	r3, #1
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
	return 0;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
	...

0800652c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006534:	4a14      	ldr	r2, [pc, #80]	; (8006588 <_sbrk+0x5c>)
 8006536:	4b15      	ldr	r3, [pc, #84]	; (800658c <_sbrk+0x60>)
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006540:	4b13      	ldr	r3, [pc, #76]	; (8006590 <_sbrk+0x64>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d102      	bne.n	800654e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006548:	4b11      	ldr	r3, [pc, #68]	; (8006590 <_sbrk+0x64>)
 800654a:	4a12      	ldr	r2, [pc, #72]	; (8006594 <_sbrk+0x68>)
 800654c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800654e:	4b10      	ldr	r3, [pc, #64]	; (8006590 <_sbrk+0x64>)
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4413      	add	r3, r2
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	429a      	cmp	r2, r3
 800655a:	d207      	bcs.n	800656c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800655c:	f007 f8da 	bl	800d714 <__errno>
 8006560:	4603      	mov	r3, r0
 8006562:	220c      	movs	r2, #12
 8006564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006566:	f04f 33ff 	mov.w	r3, #4294967295
 800656a:	e009      	b.n	8006580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800656c:	4b08      	ldr	r3, [pc, #32]	; (8006590 <_sbrk+0x64>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006572:	4b07      	ldr	r3, [pc, #28]	; (8006590 <_sbrk+0x64>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4413      	add	r3, r2
 800657a:	4a05      	ldr	r2, [pc, #20]	; (8006590 <_sbrk+0x64>)
 800657c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800657e:	68fb      	ldr	r3, [r7, #12]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20020000 	.word	0x20020000
 800658c:	00000400 	.word	0x00000400
 8006590:	2000027c 	.word	0x2000027c
 8006594:	20000800 	.word	0x20000800

08006598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006598:	b480      	push	{r7}
 800659a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <SystemInit+0x20>)
 800659e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a2:	4a05      	ldr	r2, [pc, #20]	; (80065b8 <SystemInit+0x20>)
 80065a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80065ac:	bf00      	nop
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	e000ed00 	.word	0xe000ed00

080065bc <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80065c0:	4b0e      	ldr	r3, [pc, #56]	; (80065fc <MX_TIM10_Init+0x40>)
 80065c2:	4a0f      	ldr	r2, [pc, #60]	; (8006600 <MX_TIM10_Init+0x44>)
 80065c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80065c6:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <MX_TIM10_Init+0x40>)
 80065c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80065cc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065ce:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <MX_TIM10_Init+0x40>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80065d4:	4b09      	ldr	r3, [pc, #36]	; (80065fc <MX_TIM10_Init+0x40>)
 80065d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80065da:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065dc:	4b07      	ldr	r3, [pc, #28]	; (80065fc <MX_TIM10_Init+0x40>)
 80065de:	2200      	movs	r2, #0
 80065e0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <MX_TIM10_Init+0x40>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80065e8:	4804      	ldr	r0, [pc, #16]	; (80065fc <MX_TIM10_Init+0x40>)
 80065ea:	f005 fca5 	bl	800bf38 <HAL_TIM_Base_Init>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80065f4:	f7fe f822 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80065f8:	bf00      	nop
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	20000654 	.word	0x20000654
 8006600:	40014400 	.word	0x40014400

08006604 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006608:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <MX_TIM11_Init+0x44>)
 800660a:	4a10      	ldr	r2, [pc, #64]	; (800664c <MX_TIM11_Init+0x48>)
 800660c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800660e:	4b0e      	ldr	r3, [pc, #56]	; (8006648 <MX_TIM11_Init+0x44>)
 8006610:	f643 2297 	movw	r2, #14999	; 0x3a97
 8006614:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006616:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <MX_TIM11_Init+0x44>)
 8006618:	2200      	movs	r2, #0
 800661a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 800661c:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <MX_TIM11_Init+0x44>)
 800661e:	f247 522f 	movw	r2, #29999	; 0x752f
 8006622:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006624:	4b08      	ldr	r3, [pc, #32]	; (8006648 <MX_TIM11_Init+0x44>)
 8006626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800662a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800662c:	4b06      	ldr	r3, [pc, #24]	; (8006648 <MX_TIM11_Init+0x44>)
 800662e:	2200      	movs	r2, #0
 8006630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006632:	4805      	ldr	r0, [pc, #20]	; (8006648 <MX_TIM11_Init+0x44>)
 8006634:	f005 fc80 	bl	800bf38 <HAL_TIM_Base_Init>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 800663e:	f7fd fffd 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8006642:	bf00      	nop
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	2000069c 	.word	0x2000069c
 800664c:	40014800 	.word	0x40014800

08006650 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a1c      	ldr	r2, [pc, #112]	; (80066d0 <HAL_TIM_Base_MspInit+0x80>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d116      	bne.n	8006690 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	4b1b      	ldr	r3, [pc, #108]	; (80066d4 <HAL_TIM_Base_MspInit+0x84>)
 8006668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666a:	4a1a      	ldr	r2, [pc, #104]	; (80066d4 <HAL_TIM_Base_MspInit+0x84>)
 800666c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006670:	6453      	str	r3, [r2, #68]	; 0x44
 8006672:	4b18      	ldr	r3, [pc, #96]	; (80066d4 <HAL_TIM_Base_MspInit+0x84>)
 8006674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800667e:	2200      	movs	r2, #0
 8006680:	2100      	movs	r1, #0
 8006682:	2019      	movs	r0, #25
 8006684:	f000 fc9f 	bl	8006fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006688:	2019      	movs	r0, #25
 800668a:	f000 fcb8 	bl	8006ffe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800668e:	e01a      	b.n	80066c6 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a10      	ldr	r2, [pc, #64]	; (80066d8 <HAL_TIM_Base_MspInit+0x88>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d115      	bne.n	80066c6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800669a:	2300      	movs	r3, #0
 800669c:	60bb      	str	r3, [r7, #8]
 800669e:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <HAL_TIM_Base_MspInit+0x84>)
 80066a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a2:	4a0c      	ldr	r2, [pc, #48]	; (80066d4 <HAL_TIM_Base_MspInit+0x84>)
 80066a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066a8:	6453      	str	r3, [r2, #68]	; 0x44
 80066aa:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <HAL_TIM_Base_MspInit+0x84>)
 80066ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066b2:	60bb      	str	r3, [r7, #8]
 80066b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80066b6:	2200      	movs	r2, #0
 80066b8:	2100      	movs	r1, #0
 80066ba:	201a      	movs	r0, #26
 80066bc:	f000 fc83 	bl	8006fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80066c0:	201a      	movs	r0, #26
 80066c2:	f000 fc9c 	bl	8006ffe <HAL_NVIC_EnableIRQ>
}
 80066c6:	bf00      	nop
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	40014400 	.word	0x40014400
 80066d4:	40023800 	.word	0x40023800
 80066d8:	40014800 	.word	0x40014800

080066dc <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d017      	beq.n	8006724 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0201 	bic.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	60fb      	str	r3, [r7, #12]
	}
}
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006740:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0310 	and.w	r3, r3, #16
 8006750:	2b00      	cmp	r3, #0
 8006752:	d056      	beq.n	8006802 <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675c:	2220      	movs	r2, #32
 800675e:	409a      	lsls	r2, r3
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	b29b      	uxth	r3, r3
 8006770:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8006774:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3304      	adds	r3, #4
 800677a:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800677c:	2300      	movs	r3, #0
 800677e:	82fb      	strh	r3, [r7, #22]
 8006780:	e01a      	b.n	80067b8 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f103 0045 	add.w	r0, r3, #69	; 0x45
 8006788:	8afb      	ldrh	r3, [r7, #22]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	4413      	add	r3, r2
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	4619      	mov	r1, r3
 8006792:	f7ff fc57 	bl	8006044 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8006796:	8afb      	ldrh	r3, [r7, #22]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	4413      	add	r3, r2
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b0a      	cmp	r3, #10
 80067a0:	d107      	bne.n	80067b2 <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80067a8:	3301      	adds	r3, #1
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 80067b2:	8afb      	ldrh	r3, [r7, #22]
 80067b4:	3301      	adds	r3, #1
 80067b6:	82fb      	strh	r3, [r7, #22]
 80067b8:	8afa      	ldrh	r2, [r7, #22]
 80067ba:	89fb      	ldrh	r3, [r7, #14]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d3e0      	bcc.n	8006782 <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c8:	223f      	movs	r2, #63	; 0x3f
 80067ca:	409a      	lsls	r2, r3
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	1d1a      	adds	r2, r3, #4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2241      	movs	r2, #65	; 0x41
 80067e8:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0201 	orr.w	r2, r2, #1
 8006800:	601a      	str	r2, [r3, #0]
	}
}
 8006802:	bf00      	nop
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	460b      	mov	r3, r1
 8006814:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	33ca      	adds	r3, #202	; 0xca
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	4611      	mov	r1, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f7ff fc10 	bl	8006044 <RB_Write>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <UARTDMA_PutCharToTxBuffer+0x24>
	{
		return 1; // Error code
 800682a:	2301      	movs	r3, #1
 800682c:	e000      	b.n	8006830 <UARTDMA_PutCharToTxBuffer+0x26>
	}
	return 0; // Success code
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01f      	beq.n	8006890 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8006850:	e013      	b.n	800687a <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b0a      	cmp	r3, #10
 8006858:	d10c      	bne.n	8006874 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006866:	3b01      	subs	r3, #1
 8006868:	b2da      	uxtb	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				return 0; // Exit if end line
 8006870:	2300      	movs	r3, #0
 8006872:	e00e      	b.n	8006892 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3301      	adds	r3, #1
 8006878:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3345      	adds	r3, #69	; 0x45
 800687e:	68f9      	ldr	r1, [r7, #12]
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff fbb1 	bl	8005fe8 <RB_Read>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d0e2      	beq.n	8006852 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 800688c:	2300      	movs	r3, #0
 800688e:	e000      	b.n	8006892 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 8006890:	2301      	movs	r3, #1
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80068a8:	e012      	b.n	80068d0 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 80068aa:	7afb      	ldrb	r3, [r7, #11]
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7ff ffab 	bl	800680a <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 80068ba:	7afb      	ldrb	r3, [r7, #11]
 80068bc:	2b0a      	cmp	r3, #10
 80068be:	d107      	bne.n	80068d0 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80068c6:	3301      	adds	r3, #1
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	72fb      	strb	r3, [r7, #11]
 80068d6:	7afb      	ldrb	r3, [r7, #11]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e6      	bne.n	80068aa <UARTDMA_Print+0x10>
		}
	}
}
 80068dc:	bf00      	nop
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8006912:	2300      	movs	r3, #0
 8006914:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d027      	beq.n	8006976 <UARTDMA_TransmitEvent+0x6c>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8006926:	e013      	b.n	8006950 <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8006928:	7b7b      	ldrb	r3, [r7, #13]
 800692a:	2b0a      	cmp	r3, #10
 800692c:	d107      	bne.n	800693e <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8006934:	3b01      	subs	r3, #1
 8006936:	b2da      	uxtb	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 800693e:	89fb      	ldrh	r3, [r7, #14]
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	81fa      	strh	r2, [r7, #14]
 8006944:	4619      	mov	r1, r3
 8006946:	7b7a      	ldrb	r2, [r7, #13]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	440b      	add	r3, r1
 800694c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	33ca      	adds	r3, #202	; 0xca
 8006954:	f107 020d 	add.w	r2, r7, #13
 8006958:	4611      	mov	r1, r2
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff fb44 	bl	8005fe8 <RB_Read>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0e0      	beq.n	8006928 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3389      	adds	r3, #137	; 0x89
 800696e:	89fa      	ldrh	r2, [r7, #14]
 8006970:	4619      	mov	r1, r3
 8006972:	f005 fdd5 	bl	800c520 <HAL_UART_Transmit_DMA>
	}
}
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b082      	sub	sp, #8
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 0210 	orr.w	r2, r2, #16
 80069a0:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0210 	orr.w	r2, r2, #16
 80069b8:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 0210 	orr.w	r2, r2, #16
 80069d0:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	3304      	adds	r3, #4
 80069da:	2241      	movs	r2, #65	; 0x41
 80069dc:	4619      	mov	r1, r3
 80069de:	f005 fe1d 	bl	800c61c <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0208 	bic.w	r2, r2, #8
 80069f8:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0208 	bic.w	r2, r2, #8
 8006a10:	601a      	str	r2, [r3, #0]
}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006a20:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <MX_USART2_UART_Init+0x4c>)
 8006a22:	4a12      	ldr	r2, [pc, #72]	; (8006a6c <MX_USART2_UART_Init+0x50>)
 8006a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006a26:	4b10      	ldr	r3, [pc, #64]	; (8006a68 <MX_USART2_UART_Init+0x4c>)
 8006a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006a2e:	4b0e      	ldr	r3, [pc, #56]	; (8006a68 <MX_USART2_UART_Init+0x4c>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006a34:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <MX_USART2_UART_Init+0x4c>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006a3a:	4b0b      	ldr	r3, [pc, #44]	; (8006a68 <MX_USART2_UART_Init+0x4c>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006a40:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <MX_USART2_UART_Init+0x4c>)
 8006a42:	220c      	movs	r2, #12
 8006a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a46:	4b08      	ldr	r3, [pc, #32]	; (8006a68 <MX_USART2_UART_Init+0x4c>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <MX_USART2_UART_Init+0x4c>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006a52:	4805      	ldr	r0, [pc, #20]	; (8006a68 <MX_USART2_UART_Init+0x4c>)
 8006a54:	f005 fd16 	bl	800c484 <HAL_UART_Init>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006a5e:	f7fd fded 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006a62:	bf00      	nop
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	200007a4 	.word	0x200007a4
 8006a6c:	40004400 	.word	0x40004400

08006a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	; 0x28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a78:	f107 0314 	add.w	r3, r7, #20
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	605a      	str	r2, [r3, #4]
 8006a82:	609a      	str	r2, [r3, #8]
 8006a84:	60da      	str	r2, [r3, #12]
 8006a86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a47      	ldr	r2, [pc, #284]	; (8006bac <HAL_UART_MspInit+0x13c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	f040 8088 	bne.w	8006ba4 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006a94:	2300      	movs	r3, #0
 8006a96:	613b      	str	r3, [r7, #16]
 8006a98:	4b45      	ldr	r3, [pc, #276]	; (8006bb0 <HAL_UART_MspInit+0x140>)
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	4a44      	ldr	r2, [pc, #272]	; (8006bb0 <HAL_UART_MspInit+0x140>)
 8006a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8006aa4:	4b42      	ldr	r3, [pc, #264]	; (8006bb0 <HAL_UART_MspInit+0x140>)
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	4b3e      	ldr	r3, [pc, #248]	; (8006bb0 <HAL_UART_MspInit+0x140>)
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab8:	4a3d      	ldr	r2, [pc, #244]	; (8006bb0 <HAL_UART_MspInit+0x140>)
 8006aba:	f043 0301 	orr.w	r3, r3, #1
 8006abe:	6313      	str	r3, [r2, #48]	; 0x30
 8006ac0:	4b3b      	ldr	r3, [pc, #236]	; (8006bb0 <HAL_UART_MspInit+0x140>)
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006acc:	230c      	movs	r3, #12
 8006ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006adc:	2307      	movs	r3, #7
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ae0:	f107 0314 	add.w	r3, r7, #20
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4833      	ldr	r0, [pc, #204]	; (8006bb4 <HAL_UART_MspInit+0x144>)
 8006ae8:	f000 fede 	bl	80078a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006aec:	4b32      	ldr	r3, [pc, #200]	; (8006bb8 <HAL_UART_MspInit+0x148>)
 8006aee:	4a33      	ldr	r2, [pc, #204]	; (8006bbc <HAL_UART_MspInit+0x14c>)
 8006af0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006af2:	4b31      	ldr	r3, [pc, #196]	; (8006bb8 <HAL_UART_MspInit+0x148>)
 8006af4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006af8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006afa:	4b2f      	ldr	r3, [pc, #188]	; (8006bb8 <HAL_UART_MspInit+0x148>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b00:	4b2d      	ldr	r3, [pc, #180]	; (8006bb8 <HAL_UART_MspInit+0x148>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b06:	4b2c      	ldr	r3, [pc, #176]	; (8006bb8 <HAL_UART_MspInit+0x148>)
 8006b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b0e:	4b2a      	ldr	r3, [pc, #168]	; (8006bb8 <HAL_UART_MspInit+0x148>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b14:	4b28      	ldr	r3, [pc, #160]	; (8006bb8 <HAL_UART_MspInit+0x148>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006b1a:	4b27      	ldr	r3, [pc, #156]	; (8006bb8 <HAL_UART_MspInit+0x148>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006b20:	4b25      	ldr	r3, [pc, #148]	; (8006bb8 <HAL_UART_MspInit+0x148>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b26:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <HAL_UART_MspInit+0x148>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006b2c:	4822      	ldr	r0, [pc, #136]	; (8006bb8 <HAL_UART_MspInit+0x148>)
 8006b2e:	f000 faab 	bl	8007088 <HAL_DMA_Init>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006b38:	f7fd fd80 	bl	800463c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a1e      	ldr	r2, [pc, #120]	; (8006bb8 <HAL_UART_MspInit+0x148>)
 8006b40:	639a      	str	r2, [r3, #56]	; 0x38
 8006b42:	4a1d      	ldr	r2, [pc, #116]	; (8006bb8 <HAL_UART_MspInit+0x148>)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006b48:	4b1d      	ldr	r3, [pc, #116]	; (8006bc0 <HAL_UART_MspInit+0x150>)
 8006b4a:	4a1e      	ldr	r2, [pc, #120]	; (8006bc4 <HAL_UART_MspInit+0x154>)
 8006b4c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006b4e:	4b1c      	ldr	r3, [pc, #112]	; (8006bc0 <HAL_UART_MspInit+0x150>)
 8006b50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b54:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b56:	4b1a      	ldr	r3, [pc, #104]	; (8006bc0 <HAL_UART_MspInit+0x150>)
 8006b58:	2240      	movs	r2, #64	; 0x40
 8006b5a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b5c:	4b18      	ldr	r3, [pc, #96]	; (8006bc0 <HAL_UART_MspInit+0x150>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b62:	4b17      	ldr	r3, [pc, #92]	; (8006bc0 <HAL_UART_MspInit+0x150>)
 8006b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b68:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b6a:	4b15      	ldr	r3, [pc, #84]	; (8006bc0 <HAL_UART_MspInit+0x150>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b70:	4b13      	ldr	r3, [pc, #76]	; (8006bc0 <HAL_UART_MspInit+0x150>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006b76:	4b12      	ldr	r3, [pc, #72]	; (8006bc0 <HAL_UART_MspInit+0x150>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006b7c:	4b10      	ldr	r3, [pc, #64]	; (8006bc0 <HAL_UART_MspInit+0x150>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b82:	4b0f      	ldr	r3, [pc, #60]	; (8006bc0 <HAL_UART_MspInit+0x150>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006b88:	480d      	ldr	r0, [pc, #52]	; (8006bc0 <HAL_UART_MspInit+0x150>)
 8006b8a:	f000 fa7d 	bl	8007088 <HAL_DMA_Init>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8006b94:	f7fd fd52 	bl	800463c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a09      	ldr	r2, [pc, #36]	; (8006bc0 <HAL_UART_MspInit+0x150>)
 8006b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8006b9e:	4a08      	ldr	r2, [pc, #32]	; (8006bc0 <HAL_UART_MspInit+0x150>)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	3728      	adds	r7, #40	; 0x28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	40004400 	.word	0x40004400
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	40020000 	.word	0x40020000
 8006bb8:	200006e4 	.word	0x200006e4
 8006bbc:	40026088 	.word	0x40026088
 8006bc0:	20000744 	.word	0x20000744
 8006bc4:	400260a0 	.word	0x400260a0

08006bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006bcc:	480d      	ldr	r0, [pc, #52]	; (8006c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006bce:	490e      	ldr	r1, [pc, #56]	; (8006c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006bd0:	4a0e      	ldr	r2, [pc, #56]	; (8006c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006bd4:	e002      	b.n	8006bdc <LoopCopyDataInit>

08006bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006bda:	3304      	adds	r3, #4

08006bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006be0:	d3f9      	bcc.n	8006bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006be2:	4a0b      	ldr	r2, [pc, #44]	; (8006c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006be4:	4c0b      	ldr	r4, [pc, #44]	; (8006c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006be8:	e001      	b.n	8006bee <LoopFillZerobss>

08006bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006bec:	3204      	adds	r2, #4

08006bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006bf0:	d3fb      	bcc.n	8006bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006bf2:	f7ff fcd1 	bl	8006598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006bf6:	f006 fd93 	bl	800d720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006bfa:	f7fd fbe3 	bl	80043c4 <main>
  bx  lr    
 8006bfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c08:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8006c0c:	08025d60 	.word	0x08025d60
  ldr r2, =_sbss
 8006c10:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8006c14:	200007fc 	.word	0x200007fc

08006c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c18:	e7fe      	b.n	8006c18 <ADC_IRQHandler>
	...

08006c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006c20:	4b0e      	ldr	r3, [pc, #56]	; (8006c5c <HAL_Init+0x40>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a0d      	ldr	r2, [pc, #52]	; (8006c5c <HAL_Init+0x40>)
 8006c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006c2c:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <HAL_Init+0x40>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a0a      	ldr	r2, [pc, #40]	; (8006c5c <HAL_Init+0x40>)
 8006c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c38:	4b08      	ldr	r3, [pc, #32]	; (8006c5c <HAL_Init+0x40>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a07      	ldr	r2, [pc, #28]	; (8006c5c <HAL_Init+0x40>)
 8006c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c44:	2003      	movs	r0, #3
 8006c46:	f000 f9b3 	bl	8006fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	f000 f808 	bl	8006c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c50:	f7ff fb12 	bl	8006278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40023c00 	.word	0x40023c00

08006c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c68:	4b12      	ldr	r3, [pc, #72]	; (8006cb4 <HAL_InitTick+0x54>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <HAL_InitTick+0x58>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	4619      	mov	r1, r3
 8006c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 f9d9 	bl	8007036 <HAL_SYSTICK_Config>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e00e      	b.n	8006cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b0f      	cmp	r3, #15
 8006c92:	d80a      	bhi.n	8006caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c94:	2200      	movs	r2, #0
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9c:	f000 f993 	bl	8006fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ca0:	4a06      	ldr	r2, [pc, #24]	; (8006cbc <HAL_InitTick+0x5c>)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e000      	b.n	8006cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20000034 	.word	0x20000034
 8006cb8:	2000003c 	.word	0x2000003c
 8006cbc:	20000038 	.word	0x20000038

08006cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006cc4:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <HAL_IncTick+0x20>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <HAL_IncTick+0x24>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4413      	add	r3, r2
 8006cd0:	4a04      	ldr	r2, [pc, #16]	; (8006ce4 <HAL_IncTick+0x24>)
 8006cd2:	6013      	str	r3, [r2, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	2000003c 	.word	0x2000003c
 8006ce4:	200007e8 	.word	0x200007e8

08006ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
  return uwTick;
 8006cec:	4b03      	ldr	r3, [pc, #12]	; (8006cfc <HAL_GetTick+0x14>)
 8006cee:	681b      	ldr	r3, [r3, #0]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	200007e8 	.word	0x200007e8

08006d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d08:	f7ff ffee 	bl	8006ce8 <HAL_GetTick>
 8006d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d005      	beq.n	8006d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d1a:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <HAL_Delay+0x44>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006d26:	bf00      	nop
 8006d28:	f7ff ffde 	bl	8006ce8 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d8f7      	bhi.n	8006d28 <HAL_Delay+0x28>
  {
  }
}
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	2000003c 	.word	0x2000003c

08006d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d58:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <__NVIC_SetPriorityGrouping+0x44>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d64:	4013      	ands	r3, r2
 8006d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d7a:	4a04      	ldr	r2, [pc, #16]	; (8006d8c <__NVIC_SetPriorityGrouping+0x44>)
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	60d3      	str	r3, [r2, #12]
}
 8006d80:	bf00      	nop
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	e000ed00 	.word	0xe000ed00

08006d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d94:	4b04      	ldr	r3, [pc, #16]	; (8006da8 <__NVIC_GetPriorityGrouping+0x18>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	0a1b      	lsrs	r3, r3, #8
 8006d9a:	f003 0307 	and.w	r3, r3, #7
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	e000ed00 	.word	0xe000ed00

08006dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	db0b      	blt.n	8006dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	f003 021f 	and.w	r2, r3, #31
 8006dc4:	4907      	ldr	r1, [pc, #28]	; (8006de4 <__NVIC_EnableIRQ+0x38>)
 8006dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	2001      	movs	r0, #1
 8006dce:	fa00 f202 	lsl.w	r2, r0, r2
 8006dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006dd6:	bf00      	nop
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	e000e100 	.word	0xe000e100

08006de8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	4603      	mov	r3, r0
 8006df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	db12      	blt.n	8006e20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dfa:	79fb      	ldrb	r3, [r7, #7]
 8006dfc:	f003 021f 	and.w	r2, r3, #31
 8006e00:	490a      	ldr	r1, [pc, #40]	; (8006e2c <__NVIC_DisableIRQ+0x44>)
 8006e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e06:	095b      	lsrs	r3, r3, #5
 8006e08:	2001      	movs	r0, #1
 8006e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8006e0e:	3320      	adds	r3, #32
 8006e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006e14:	f3bf 8f4f 	dsb	sy
}
 8006e18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e1a:	f3bf 8f6f 	isb	sy
}
 8006e1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	e000e100 	.word	0xe000e100

08006e30 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	db0e      	blt.n	8006e60 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006e42:	4a0b      	ldr	r2, [pc, #44]	; (8006e70 <__NVIC_GetPendingIRQ+0x40>)
 8006e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e48:	095b      	lsrs	r3, r3, #5
 8006e4a:	3340      	adds	r3, #64	; 0x40
 8006e4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	f003 031f 	and.w	r3, r3, #31
 8006e56:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	e000      	b.n	8006e62 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8006e60:	2300      	movs	r3, #0
  }
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	e000e100 	.word	0xe000e100

08006e74 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	db0c      	blt.n	8006ea0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e86:	79fb      	ldrb	r3, [r7, #7]
 8006e88:	f003 021f 	and.w	r2, r3, #31
 8006e8c:	4907      	ldr	r1, [pc, #28]	; (8006eac <__NVIC_ClearPendingIRQ+0x38>)
 8006e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	2001      	movs	r0, #1
 8006e96:	fa00 f202 	lsl.w	r2, r0, r2
 8006e9a:	3360      	adds	r3, #96	; 0x60
 8006e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	e000e100 	.word	0xe000e100

08006eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	6039      	str	r1, [r7, #0]
 8006eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	db0a      	blt.n	8006eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	490c      	ldr	r1, [pc, #48]	; (8006efc <__NVIC_SetPriority+0x4c>)
 8006eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ece:	0112      	lsls	r2, r2, #4
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ed8:	e00a      	b.n	8006ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	4908      	ldr	r1, [pc, #32]	; (8006f00 <__NVIC_SetPriority+0x50>)
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	3b04      	subs	r3, #4
 8006ee8:	0112      	lsls	r2, r2, #4
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	440b      	add	r3, r1
 8006eee:	761a      	strb	r2, [r3, #24]
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	e000e100 	.word	0xe000e100
 8006f00:	e000ed00 	.word	0xe000ed00

08006f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b089      	sub	sp, #36	; 0x24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f1c3 0307 	rsb	r3, r3, #7
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	bf28      	it	cs
 8006f22:	2304      	movcs	r3, #4
 8006f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	3304      	adds	r3, #4
 8006f2a:	2b06      	cmp	r3, #6
 8006f2c:	d902      	bls.n	8006f34 <NVIC_EncodePriority+0x30>
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	3b03      	subs	r3, #3
 8006f32:	e000      	b.n	8006f36 <NVIC_EncodePriority+0x32>
 8006f34:	2300      	movs	r3, #0
 8006f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f38:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f42:	43da      	mvns	r2, r3
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	401a      	ands	r2, r3
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	fa01 f303 	lsl.w	r3, r1, r3
 8006f56:	43d9      	mvns	r1, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f5c:	4313      	orrs	r3, r2
         );
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3724      	adds	r7, #36	; 0x24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
	...

08006f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f7c:	d301      	bcc.n	8006f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e00f      	b.n	8006fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f82:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <SysTick_Config+0x40>)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f8a:	210f      	movs	r1, #15
 8006f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f90:	f7ff ff8e 	bl	8006eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f94:	4b05      	ldr	r3, [pc, #20]	; (8006fac <SysTick_Config+0x40>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f9a:	4b04      	ldr	r3, [pc, #16]	; (8006fac <SysTick_Config+0x40>)
 8006f9c:	2207      	movs	r2, #7
 8006f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	e000e010 	.word	0xe000e010

08006fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff fec5 	bl	8006d48 <__NVIC_SetPriorityGrouping>
}
 8006fbe:	bf00      	nop
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b086      	sub	sp, #24
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	4603      	mov	r3, r0
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	607a      	str	r2, [r7, #4]
 8006fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006fd8:	f7ff feda 	bl	8006d90 <__NVIC_GetPriorityGrouping>
 8006fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	6978      	ldr	r0, [r7, #20]
 8006fe4:	f7ff ff8e 	bl	8006f04 <NVIC_EncodePriority>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fee:	4611      	mov	r1, r2
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7ff ff5d 	bl	8006eb0 <__NVIC_SetPriority>
}
 8006ff6:	bf00      	nop
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	4603      	mov	r3, r0
 8007006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff fecd 	bl	8006dac <__NVIC_EnableIRQ>
}
 8007012:	bf00      	nop
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b082      	sub	sp, #8
 800701e:	af00      	add	r7, sp, #0
 8007020:	4603      	mov	r3, r0
 8007022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff fedd 	bl	8006de8 <__NVIC_DisableIRQ>
}
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff ff94 	bl	8006f6c <SysTick_Config>
 8007044:	4603      	mov	r3, r0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	4603      	mov	r3, r0
 8007056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8007058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff fee7 	bl	8006e30 <__NVIC_GetPendingIRQ>
 8007062:	4603      	mov	r3, r0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800707a:	4618      	mov	r0, r3
 800707c:	f7ff fefa 	bl	8006e74 <__NVIC_ClearPendingIRQ>
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007090:	2300      	movs	r3, #0
 8007092:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007094:	f7ff fe28 	bl	8006ce8 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e099      	b.n	80071d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0201 	bic.w	r2, r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070c4:	e00f      	b.n	80070e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070c6:	f7ff fe0f 	bl	8006ce8 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b05      	cmp	r3, #5
 80070d2:	d908      	bls.n	80070e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2203      	movs	r2, #3
 80070de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e078      	b.n	80071d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1e8      	bne.n	80070c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	4b38      	ldr	r3, [pc, #224]	; (80071e0 <HAL_DMA_Init+0x158>)
 8007100:	4013      	ands	r3, r2
 8007102:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007112:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800711e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800712a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	2b04      	cmp	r3, #4
 800713e:	d107      	bne.n	8007150 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	4313      	orrs	r3, r2
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f023 0307 	bic.w	r3, r3, #7
 8007166:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	2b04      	cmp	r3, #4
 8007178:	d117      	bne.n	80071aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4313      	orrs	r3, r2
 8007182:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00e      	beq.n	80071aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fb0f 	bl	80077b0 <DMA_CheckFifoParam>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2240      	movs	r2, #64	; 0x40
 800719c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80071a6:	2301      	movs	r3, #1
 80071a8:	e016      	b.n	80071d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fac6 	bl	8007744 <DMA_CalcBaseAndBitshift>
 80071b8:	4603      	mov	r3, r0
 80071ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c0:	223f      	movs	r2, #63	; 0x3f
 80071c2:	409a      	lsls	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	f010803f 	.word	0xf010803f

080071e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_DMA_Start_IT+0x26>
 8007206:	2302      	movs	r3, #2
 8007208:	e040      	b.n	800728c <HAL_DMA_Start_IT+0xa8>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b01      	cmp	r3, #1
 800721c:	d12f      	bne.n	800727e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2202      	movs	r2, #2
 8007222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 fa58 	bl	80076e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800723c:	223f      	movs	r2, #63	; 0x3f
 800723e:	409a      	lsls	r2, r3
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0216 	orr.w	r2, r2, #22
 8007252:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007258:	2b00      	cmp	r3, #0
 800725a:	d007      	beq.n	800726c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f042 0208 	orr.w	r2, r2, #8
 800726a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0201 	orr.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e005      	b.n	800728a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007286:	2302      	movs	r3, #2
 8007288:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800728a:	7dfb      	ldrb	r3, [r7, #23]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80072a2:	f7ff fd21 	bl	8006ce8 <HAL_GetTick>
 80072a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d008      	beq.n	80072c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2280      	movs	r2, #128	; 0x80
 80072b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e052      	b.n	800736c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0216 	bic.w	r2, r2, #22
 80072d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695a      	ldr	r2, [r3, #20]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d103      	bne.n	80072f6 <HAL_DMA_Abort+0x62>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d007      	beq.n	8007306 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0208 	bic.w	r2, r2, #8
 8007304:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0201 	bic.w	r2, r2, #1
 8007314:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007316:	e013      	b.n	8007340 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007318:	f7ff fce6 	bl	8006ce8 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b05      	cmp	r3, #5
 8007324:	d90c      	bls.n	8007340 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2220      	movs	r2, #32
 800732a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2203      	movs	r2, #3
 8007330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e015      	b.n	800736c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e4      	bne.n	8007318 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007352:	223f      	movs	r2, #63	; 0x3f
 8007354:	409a      	lsls	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d004      	beq.n	8007392 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2280      	movs	r2, #128	; 0x80
 800738c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e00c      	b.n	80073ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2205      	movs	r2, #5
 8007396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0201 	bic.w	r2, r2, #1
 80073a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80073c4:	4b92      	ldr	r3, [pc, #584]	; (8007610 <HAL_DMA_IRQHandler+0x258>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a92      	ldr	r2, [pc, #584]	; (8007614 <HAL_DMA_IRQHandler+0x25c>)
 80073ca:	fba2 2303 	umull	r2, r3, r2, r3
 80073ce:	0a9b      	lsrs	r3, r3, #10
 80073d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e2:	2208      	movs	r2, #8
 80073e4:	409a      	lsls	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	4013      	ands	r3, r2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d01a      	beq.n	8007424 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d013      	beq.n	8007424 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0204 	bic.w	r2, r2, #4
 800740a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007410:	2208      	movs	r2, #8
 8007412:	409a      	lsls	r2, r3
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741c:	f043 0201 	orr.w	r2, r3, #1
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007428:	2201      	movs	r2, #1
 800742a:	409a      	lsls	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4013      	ands	r3, r2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d012      	beq.n	800745a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00b      	beq.n	800745a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007446:	2201      	movs	r2, #1
 8007448:	409a      	lsls	r2, r3
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007452:	f043 0202 	orr.w	r2, r3, #2
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800745e:	2204      	movs	r2, #4
 8007460:	409a      	lsls	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4013      	ands	r3, r2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d012      	beq.n	8007490 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747c:	2204      	movs	r2, #4
 800747e:	409a      	lsls	r2, r3
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007488:	f043 0204 	orr.w	r2, r3, #4
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007494:	2210      	movs	r2, #16
 8007496:	409a      	lsls	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	4013      	ands	r3, r2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d043      	beq.n	8007528 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d03c      	beq.n	8007528 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b2:	2210      	movs	r2, #16
 80074b4:	409a      	lsls	r2, r3
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d018      	beq.n	80074fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d108      	bne.n	80074e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d024      	beq.n	8007528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	4798      	blx	r3
 80074e6:	e01f      	b.n	8007528 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d01b      	beq.n	8007528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	4798      	blx	r3
 80074f8:	e016      	b.n	8007528 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007504:	2b00      	cmp	r3, #0
 8007506:	d107      	bne.n	8007518 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0208 	bic.w	r2, r2, #8
 8007516:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800752c:	2220      	movs	r2, #32
 800752e:	409a      	lsls	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4013      	ands	r3, r2
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 808e 	beq.w	8007656 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0310 	and.w	r3, r3, #16
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 8086 	beq.w	8007656 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800754e:	2220      	movs	r2, #32
 8007550:	409a      	lsls	r2, r3
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b05      	cmp	r3, #5
 8007560:	d136      	bne.n	80075d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0216 	bic.w	r2, r2, #22
 8007570:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	695a      	ldr	r2, [r3, #20]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007580:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	2b00      	cmp	r3, #0
 8007588:	d103      	bne.n	8007592 <HAL_DMA_IRQHandler+0x1da>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800758e:	2b00      	cmp	r3, #0
 8007590:	d007      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0208 	bic.w	r2, r2, #8
 80075a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075a6:	223f      	movs	r2, #63	; 0x3f
 80075a8:	409a      	lsls	r2, r3
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d07d      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	4798      	blx	r3
        }
        return;
 80075ce:	e078      	b.n	80076c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d01c      	beq.n	8007618 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d108      	bne.n	80075fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d030      	beq.n	8007656 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	4798      	blx	r3
 80075fc:	e02b      	b.n	8007656 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007602:	2b00      	cmp	r3, #0
 8007604:	d027      	beq.n	8007656 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	4798      	blx	r3
 800760e:	e022      	b.n	8007656 <HAL_DMA_IRQHandler+0x29e>
 8007610:	20000034 	.word	0x20000034
 8007614:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10f      	bne.n	8007646 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 0210 	bic.w	r2, r2, #16
 8007634:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765a:	2b00      	cmp	r3, #0
 800765c:	d032      	beq.n	80076c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d022      	beq.n	80076b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2205      	movs	r2, #5
 800766e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0201 	bic.w	r2, r2, #1
 8007680:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	3301      	adds	r3, #1
 8007686:	60bb      	str	r3, [r7, #8]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	429a      	cmp	r2, r3
 800768c:	d307      	bcc.n	800769e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f2      	bne.n	8007682 <HAL_DMA_IRQHandler+0x2ca>
 800769c:	e000      	b.n	80076a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800769e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d005      	beq.n	80076c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	4798      	blx	r3
 80076c0:	e000      	b.n	80076c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80076c2:	bf00      	nop
    }
  }
}
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop

080076cc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076da:	b2db      	uxtb	r3, r3
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007704:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d108      	bne.n	8007728 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007726:	e007      	b.n	8007738 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	60da      	str	r2, [r3, #12]
}
 8007738:	bf00      	nop
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	3b10      	subs	r3, #16
 8007754:	4a14      	ldr	r2, [pc, #80]	; (80077a8 <DMA_CalcBaseAndBitshift+0x64>)
 8007756:	fba2 2303 	umull	r2, r3, r2, r3
 800775a:	091b      	lsrs	r3, r3, #4
 800775c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800775e:	4a13      	ldr	r2, [pc, #76]	; (80077ac <DMA_CalcBaseAndBitshift+0x68>)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4413      	add	r3, r2
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b03      	cmp	r3, #3
 8007770:	d909      	bls.n	8007786 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800777a:	f023 0303 	bic.w	r3, r3, #3
 800777e:	1d1a      	adds	r2, r3, #4
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	659a      	str	r2, [r3, #88]	; 0x58
 8007784:	e007      	b.n	8007796 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800778e:	f023 0303 	bic.w	r3, r3, #3
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	aaaaaaab 	.word	0xaaaaaaab
 80077ac:	08025834 	.word	0x08025834

080077b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d11f      	bne.n	800780a <DMA_CheckFifoParam+0x5a>
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	2b03      	cmp	r3, #3
 80077ce:	d856      	bhi.n	800787e <DMA_CheckFifoParam+0xce>
 80077d0:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <DMA_CheckFifoParam+0x28>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	080077e9 	.word	0x080077e9
 80077dc:	080077fb 	.word	0x080077fb
 80077e0:	080077e9 	.word	0x080077e9
 80077e4:	0800787f 	.word	0x0800787f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d046      	beq.n	8007882 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077f8:	e043      	b.n	8007882 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007802:	d140      	bne.n	8007886 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007808:	e03d      	b.n	8007886 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007812:	d121      	bne.n	8007858 <DMA_CheckFifoParam+0xa8>
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b03      	cmp	r3, #3
 8007818:	d837      	bhi.n	800788a <DMA_CheckFifoParam+0xda>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <DMA_CheckFifoParam+0x70>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007831 	.word	0x08007831
 8007824:	08007837 	.word	0x08007837
 8007828:	08007831 	.word	0x08007831
 800782c:	08007849 	.word	0x08007849
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	73fb      	strb	r3, [r7, #15]
      break;
 8007834:	e030      	b.n	8007898 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d025      	beq.n	800788e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007846:	e022      	b.n	800788e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007850:	d11f      	bne.n	8007892 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007856:	e01c      	b.n	8007892 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d903      	bls.n	8007866 <DMA_CheckFifoParam+0xb6>
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b03      	cmp	r3, #3
 8007862:	d003      	beq.n	800786c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007864:	e018      	b.n	8007898 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	73fb      	strb	r3, [r7, #15]
      break;
 800786a:	e015      	b.n	8007898 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00e      	beq.n	8007896 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	73fb      	strb	r3, [r7, #15]
      break;
 800787c:	e00b      	b.n	8007896 <DMA_CheckFifoParam+0xe6>
      break;
 800787e:	bf00      	nop
 8007880:	e00a      	b.n	8007898 <DMA_CheckFifoParam+0xe8>
      break;
 8007882:	bf00      	nop
 8007884:	e008      	b.n	8007898 <DMA_CheckFifoParam+0xe8>
      break;
 8007886:	bf00      	nop
 8007888:	e006      	b.n	8007898 <DMA_CheckFifoParam+0xe8>
      break;
 800788a:	bf00      	nop
 800788c:	e004      	b.n	8007898 <DMA_CheckFifoParam+0xe8>
      break;
 800788e:	bf00      	nop
 8007890:	e002      	b.n	8007898 <DMA_CheckFifoParam+0xe8>
      break;   
 8007892:	bf00      	nop
 8007894:	e000      	b.n	8007898 <DMA_CheckFifoParam+0xe8>
      break;
 8007896:	bf00      	nop
    }
  } 
  
  return status; 
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop

080078a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b089      	sub	sp, #36	; 0x24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078be:	2300      	movs	r3, #0
 80078c0:	61fb      	str	r3, [r7, #28]
 80078c2:	e159      	b.n	8007b78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80078c4:	2201      	movs	r2, #1
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	fa02 f303 	lsl.w	r3, r2, r3
 80078cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	4013      	ands	r3, r2
 80078d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	429a      	cmp	r2, r3
 80078de:	f040 8148 	bne.w	8007b72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f003 0303 	and.w	r3, r3, #3
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d005      	beq.n	80078fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d130      	bne.n	800795c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	2203      	movs	r2, #3
 8007906:	fa02 f303 	lsl.w	r3, r2, r3
 800790a:	43db      	mvns	r3, r3
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	4013      	ands	r3, r2
 8007910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	fa02 f303 	lsl.w	r3, r2, r3
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	4313      	orrs	r3, r2
 8007922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007930:	2201      	movs	r2, #1
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	fa02 f303 	lsl.w	r3, r2, r3
 8007938:	43db      	mvns	r3, r3
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	4013      	ands	r3, r2
 800793e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	091b      	lsrs	r3, r3, #4
 8007946:	f003 0201 	and.w	r2, r3, #1
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	fa02 f303 	lsl.w	r3, r2, r3
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	4313      	orrs	r3, r2
 8007954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f003 0303 	and.w	r3, r3, #3
 8007964:	2b03      	cmp	r3, #3
 8007966:	d017      	beq.n	8007998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	2203      	movs	r2, #3
 8007974:	fa02 f303 	lsl.w	r3, r2, r3
 8007978:	43db      	mvns	r3, r3
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	4013      	ands	r3, r2
 800797e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	fa02 f303 	lsl.w	r3, r2, r3
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	4313      	orrs	r3, r2
 8007990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f003 0303 	and.w	r3, r3, #3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d123      	bne.n	80079ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	08da      	lsrs	r2, r3, #3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3208      	adds	r2, #8
 80079ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	220f      	movs	r2, #15
 80079bc:	fa02 f303 	lsl.w	r3, r2, r3
 80079c0:	43db      	mvns	r3, r3
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	4013      	ands	r3, r2
 80079c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f003 0307 	and.w	r3, r3, #7
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	fa02 f303 	lsl.w	r3, r2, r3
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	4313      	orrs	r3, r2
 80079dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	08da      	lsrs	r2, r3, #3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3208      	adds	r2, #8
 80079e6:	69b9      	ldr	r1, [r7, #24]
 80079e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	2203      	movs	r2, #3
 80079f8:	fa02 f303 	lsl.w	r3, r2, r3
 80079fc:	43db      	mvns	r3, r3
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	4013      	ands	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f003 0203 	and.w	r2, r3, #3
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	fa02 f303 	lsl.w	r3, r2, r3
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 80a2 	beq.w	8007b72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	4b57      	ldr	r3, [pc, #348]	; (8007b90 <HAL_GPIO_Init+0x2e8>)
 8007a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a36:	4a56      	ldr	r2, [pc, #344]	; (8007b90 <HAL_GPIO_Init+0x2e8>)
 8007a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8007a3e:	4b54      	ldr	r3, [pc, #336]	; (8007b90 <HAL_GPIO_Init+0x2e8>)
 8007a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a4a:	4a52      	ldr	r2, [pc, #328]	; (8007b94 <HAL_GPIO_Init+0x2ec>)
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	089b      	lsrs	r3, r3, #2
 8007a50:	3302      	adds	r3, #2
 8007a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	220f      	movs	r2, #15
 8007a62:	fa02 f303 	lsl.w	r3, r2, r3
 8007a66:	43db      	mvns	r3, r3
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a49      	ldr	r2, [pc, #292]	; (8007b98 <HAL_GPIO_Init+0x2f0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d019      	beq.n	8007aaa <HAL_GPIO_Init+0x202>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a48      	ldr	r2, [pc, #288]	; (8007b9c <HAL_GPIO_Init+0x2f4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d013      	beq.n	8007aa6 <HAL_GPIO_Init+0x1fe>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a47      	ldr	r2, [pc, #284]	; (8007ba0 <HAL_GPIO_Init+0x2f8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00d      	beq.n	8007aa2 <HAL_GPIO_Init+0x1fa>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a46      	ldr	r2, [pc, #280]	; (8007ba4 <HAL_GPIO_Init+0x2fc>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d007      	beq.n	8007a9e <HAL_GPIO_Init+0x1f6>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a45      	ldr	r2, [pc, #276]	; (8007ba8 <HAL_GPIO_Init+0x300>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d101      	bne.n	8007a9a <HAL_GPIO_Init+0x1f2>
 8007a96:	2304      	movs	r3, #4
 8007a98:	e008      	b.n	8007aac <HAL_GPIO_Init+0x204>
 8007a9a:	2307      	movs	r3, #7
 8007a9c:	e006      	b.n	8007aac <HAL_GPIO_Init+0x204>
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e004      	b.n	8007aac <HAL_GPIO_Init+0x204>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	e002      	b.n	8007aac <HAL_GPIO_Init+0x204>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <HAL_GPIO_Init+0x204>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	69fa      	ldr	r2, [r7, #28]
 8007aae:	f002 0203 	and.w	r2, r2, #3
 8007ab2:	0092      	lsls	r2, r2, #2
 8007ab4:	4093      	lsls	r3, r2
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007abc:	4935      	ldr	r1, [pc, #212]	; (8007b94 <HAL_GPIO_Init+0x2ec>)
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	089b      	lsrs	r3, r3, #2
 8007ac2:	3302      	adds	r3, #2
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007aca:	4b38      	ldr	r3, [pc, #224]	; (8007bac <HAL_GPIO_Init+0x304>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	43db      	mvns	r3, r3
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007aee:	4a2f      	ldr	r2, [pc, #188]	; (8007bac <HAL_GPIO_Init+0x304>)
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007af4:	4b2d      	ldr	r3, [pc, #180]	; (8007bac <HAL_GPIO_Init+0x304>)
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	43db      	mvns	r3, r3
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	4013      	ands	r3, r2
 8007b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b18:	4a24      	ldr	r2, [pc, #144]	; (8007bac <HAL_GPIO_Init+0x304>)
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b1e:	4b23      	ldr	r3, [pc, #140]	; (8007bac <HAL_GPIO_Init+0x304>)
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	43db      	mvns	r3, r3
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007b42:	4a1a      	ldr	r2, [pc, #104]	; (8007bac <HAL_GPIO_Init+0x304>)
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007b48:	4b18      	ldr	r3, [pc, #96]	; (8007bac <HAL_GPIO_Init+0x304>)
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	43db      	mvns	r3, r3
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	4013      	ands	r3, r2
 8007b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d003      	beq.n	8007b6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007b6c:	4a0f      	ldr	r2, [pc, #60]	; (8007bac <HAL_GPIO_Init+0x304>)
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	3301      	adds	r3, #1
 8007b76:	61fb      	str	r3, [r7, #28]
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	2b0f      	cmp	r3, #15
 8007b7c:	f67f aea2 	bls.w	80078c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007b80:	bf00      	nop
 8007b82:	bf00      	nop
 8007b84:	3724      	adds	r7, #36	; 0x24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	40023800 	.word	0x40023800
 8007b94:	40013800 	.word	0x40013800
 8007b98:	40020000 	.word	0x40020000
 8007b9c:	40020400 	.word	0x40020400
 8007ba0:	40020800 	.word	0x40020800
 8007ba4:	40020c00 	.word	0x40020c00
 8007ba8:	40021000 	.word	0x40021000
 8007bac:	40013c00 	.word	0x40013c00

08007bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691a      	ldr	r2, [r3, #16]
 8007bc0:	887b      	ldrh	r3, [r7, #2]
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	73fb      	strb	r3, [r7, #15]
 8007bcc:	e001      	b.n	8007bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	807b      	strh	r3, [r7, #2]
 8007bec:	4613      	mov	r3, r2
 8007bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007bf0:	787b      	ldrb	r3, [r7, #1]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007bf6:	887a      	ldrh	r2, [r7, #2]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007bfc:	e003      	b.n	8007c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007bfe:	887b      	ldrh	r3, [r7, #2]
 8007c00:	041a      	lsls	r2, r3, #16
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	619a      	str	r2, [r3, #24]
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b085      	sub	sp, #20
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c24:	887a      	ldrh	r2, [r7, #2]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	041a      	lsls	r2, r3, #16
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	43d9      	mvns	r1, r3
 8007c30:	887b      	ldrh	r3, [r7, #2]
 8007c32:	400b      	ands	r3, r1
 8007c34:	431a      	orrs	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	619a      	str	r2, [r3, #24]
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
	...

08007c48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	4603      	mov	r3, r0
 8007c50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007c52:	4b08      	ldr	r3, [pc, #32]	; (8007c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c54:	695a      	ldr	r2, [r3, #20]
 8007c56:	88fb      	ldrh	r3, [r7, #6]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d006      	beq.n	8007c6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c5e:	4a05      	ldr	r2, [pc, #20]	; (8007c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c60:	88fb      	ldrh	r3, [r7, #6]
 8007c62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c64:	88fb      	ldrh	r3, [r7, #6]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fc fcd4 	bl	8004614 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	40013c00 	.word	0x40013c00

08007c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e12b      	b.n	8007ee2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fc fa86 	bl	80041b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2224      	movs	r2, #36	; 0x24
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0201 	bic.w	r2, r2, #1
 8007cba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007cdc:	f003 fcf0 	bl	800b6c0 <HAL_RCC_GetPCLK1Freq>
 8007ce0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	4a81      	ldr	r2, [pc, #516]	; (8007eec <HAL_I2C_Init+0x274>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d807      	bhi.n	8007cfc <HAL_I2C_Init+0x84>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4a80      	ldr	r2, [pc, #512]	; (8007ef0 <HAL_I2C_Init+0x278>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	bf94      	ite	ls
 8007cf4:	2301      	movls	r3, #1
 8007cf6:	2300      	movhi	r3, #0
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	e006      	b.n	8007d0a <HAL_I2C_Init+0x92>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4a7d      	ldr	r2, [pc, #500]	; (8007ef4 <HAL_I2C_Init+0x27c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	bf94      	ite	ls
 8007d04:	2301      	movls	r3, #1
 8007d06:	2300      	movhi	r3, #0
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e0e7      	b.n	8007ee2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4a78      	ldr	r2, [pc, #480]	; (8007ef8 <HAL_I2C_Init+0x280>)
 8007d16:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1a:	0c9b      	lsrs	r3, r3, #18
 8007d1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	4a6a      	ldr	r2, [pc, #424]	; (8007eec <HAL_I2C_Init+0x274>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d802      	bhi.n	8007d4c <HAL_I2C_Init+0xd4>
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	e009      	b.n	8007d60 <HAL_I2C_Init+0xe8>
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d52:	fb02 f303 	mul.w	r3, r2, r3
 8007d56:	4a69      	ldr	r2, [pc, #420]	; (8007efc <HAL_I2C_Init+0x284>)
 8007d58:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5c:	099b      	lsrs	r3, r3, #6
 8007d5e:	3301      	adds	r3, #1
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6812      	ldr	r2, [r2, #0]
 8007d64:	430b      	orrs	r3, r1
 8007d66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007d72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	495c      	ldr	r1, [pc, #368]	; (8007eec <HAL_I2C_Init+0x274>)
 8007d7c:	428b      	cmp	r3, r1
 8007d7e:	d819      	bhi.n	8007db4 <HAL_I2C_Init+0x13c>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	1e59      	subs	r1, r3, #1
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d8e:	1c59      	adds	r1, r3, #1
 8007d90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007d94:	400b      	ands	r3, r1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <HAL_I2C_Init+0x138>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	1e59      	subs	r1, r3, #1
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007da8:	3301      	adds	r3, #1
 8007daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dae:	e051      	b.n	8007e54 <HAL_I2C_Init+0x1dc>
 8007db0:	2304      	movs	r3, #4
 8007db2:	e04f      	b.n	8007e54 <HAL_I2C_Init+0x1dc>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d111      	bne.n	8007de0 <HAL_I2C_Init+0x168>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	1e58      	subs	r0, r3, #1
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6859      	ldr	r1, [r3, #4]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	440b      	add	r3, r1
 8007dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dce:	3301      	adds	r3, #1
 8007dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bf0c      	ite	eq
 8007dd8:	2301      	moveq	r3, #1
 8007dda:	2300      	movne	r3, #0
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	e012      	b.n	8007e06 <HAL_I2C_Init+0x18e>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	1e58      	subs	r0, r3, #1
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6859      	ldr	r1, [r3, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	440b      	add	r3, r1
 8007dee:	0099      	lsls	r1, r3, #2
 8007df0:	440b      	add	r3, r1
 8007df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007df6:	3301      	adds	r3, #1
 8007df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bf0c      	ite	eq
 8007e00:	2301      	moveq	r3, #1
 8007e02:	2300      	movne	r3, #0
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <HAL_I2C_Init+0x196>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e022      	b.n	8007e54 <HAL_I2C_Init+0x1dc>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10e      	bne.n	8007e34 <HAL_I2C_Init+0x1bc>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	1e58      	subs	r0, r3, #1
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6859      	ldr	r1, [r3, #4]
 8007e1e:	460b      	mov	r3, r1
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	440b      	add	r3, r1
 8007e24:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e28:	3301      	adds	r3, #1
 8007e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e32:	e00f      	b.n	8007e54 <HAL_I2C_Init+0x1dc>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	1e58      	subs	r0, r3, #1
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6859      	ldr	r1, [r3, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	440b      	add	r3, r1
 8007e42:	0099      	lsls	r1, r3, #2
 8007e44:	440b      	add	r3, r1
 8007e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	6809      	ldr	r1, [r1, #0]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	69da      	ldr	r2, [r3, #28]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	6911      	ldr	r1, [r2, #16]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	68d2      	ldr	r2, [r2, #12]
 8007e8e:	4311      	orrs	r1, r2
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	6812      	ldr	r2, [r2, #0]
 8007e94:	430b      	orrs	r3, r1
 8007e96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	695a      	ldr	r2, [r3, #20]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0201 	orr.w	r2, r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	000186a0 	.word	0x000186a0
 8007ef0:	001e847f 	.word	0x001e847f
 8007ef4:	003d08ff 	.word	0x003d08ff
 8007ef8:	431bde83 	.word	0x431bde83
 8007efc:	10624dd3 	.word	0x10624dd3

08007f00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af02      	add	r7, sp, #8
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	607a      	str	r2, [r7, #4]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	817b      	strh	r3, [r7, #10]
 8007f10:	4613      	mov	r3, r2
 8007f12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f14:	f7fe fee8 	bl	8006ce8 <HAL_GetTick>
 8007f18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b20      	cmp	r3, #32
 8007f24:	f040 80e0 	bne.w	80080e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	2319      	movs	r3, #25
 8007f2e:	2201      	movs	r2, #1
 8007f30:	4970      	ldr	r1, [pc, #448]	; (80080f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f002 fd7a 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e0d3      	b.n	80080ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d101      	bne.n	8007f50 <HAL_I2C_Master_Transmit+0x50>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e0cc      	b.n	80080ea <HAL_I2C_Master_Transmit+0x1ea>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d007      	beq.n	8007f76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f042 0201 	orr.w	r2, r2, #1
 8007f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2221      	movs	r2, #33	; 0x21
 8007f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2210      	movs	r2, #16
 8007f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	893a      	ldrh	r2, [r7, #8]
 8007fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	4a50      	ldr	r2, [pc, #320]	; (80080f8 <HAL_I2C_Master_Transmit+0x1f8>)
 8007fb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007fb8:	8979      	ldrh	r1, [r7, #10]
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	6a3a      	ldr	r2, [r7, #32]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f002 f9be 	bl	800a340 <I2C_MasterRequestWrite>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e08d      	b.n	80080ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fce:	2300      	movs	r3, #0
 8007fd0:	613b      	str	r3, [r7, #16]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	613b      	str	r3, [r7, #16]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	613b      	str	r3, [r7, #16]
 8007fe2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007fe4:	e066      	b.n	80080b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	6a39      	ldr	r1, [r7, #32]
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f002 fdf4 	bl	800abd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00d      	beq.n	8008012 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d107      	bne.n	800800e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800800c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e06b      	b.n	80080ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008016:	781a      	ldrb	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800802c:	b29b      	uxth	r3, r3
 800802e:	3b01      	subs	r3, #1
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800803a:	3b01      	subs	r3, #1
 800803c:	b29a      	uxth	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b04      	cmp	r3, #4
 800804e:	d11b      	bne.n	8008088 <HAL_I2C_Master_Transmit+0x188>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008054:	2b00      	cmp	r3, #0
 8008056:	d017      	beq.n	8008088 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	781a      	ldrb	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008072:	b29b      	uxth	r3, r3
 8008074:	3b01      	subs	r3, #1
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008080:	3b01      	subs	r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	6a39      	ldr	r1, [r7, #32]
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f002 fde4 	bl	800ac5a <I2C_WaitOnBTFFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00d      	beq.n	80080b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	2b04      	cmp	r3, #4
 800809e:	d107      	bne.n	80080b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e01a      	b.n	80080ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d194      	bne.n	8007fe6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	e000      	b.n	80080ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80080e8:	2302      	movs	r3, #2
  }
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	00100002 	.word	0x00100002
 80080f8:	ffff0000 	.word	0xffff0000

080080fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08c      	sub	sp, #48	; 0x30
 8008100:	af02      	add	r7, sp, #8
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	607a      	str	r2, [r7, #4]
 8008106:	461a      	mov	r2, r3
 8008108:	460b      	mov	r3, r1
 800810a:	817b      	strh	r3, [r7, #10]
 800810c:	4613      	mov	r3, r2
 800810e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008110:	f7fe fdea 	bl	8006ce8 <HAL_GetTick>
 8008114:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b20      	cmp	r3, #32
 8008120:	f040 820b 	bne.w	800853a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	2319      	movs	r3, #25
 800812a:	2201      	movs	r2, #1
 800812c:	497c      	ldr	r1, [pc, #496]	; (8008320 <HAL_I2C_Master_Receive+0x224>)
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f002 fc7c 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800813a:	2302      	movs	r3, #2
 800813c:	e1fe      	b.n	800853c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008144:	2b01      	cmp	r3, #1
 8008146:	d101      	bne.n	800814c <HAL_I2C_Master_Receive+0x50>
 8008148:	2302      	movs	r3, #2
 800814a:	e1f7      	b.n	800853c <HAL_I2C_Master_Receive+0x440>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b01      	cmp	r3, #1
 8008160:	d007      	beq.n	8008172 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f042 0201 	orr.w	r2, r2, #1
 8008170:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008180:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2222      	movs	r2, #34	; 0x22
 8008186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2210      	movs	r2, #16
 800818e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	893a      	ldrh	r2, [r7, #8]
 80081a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4a5c      	ldr	r2, [pc, #368]	; (8008324 <HAL_I2C_Master_Receive+0x228>)
 80081b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80081b4:	8979      	ldrh	r1, [r7, #10]
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f002 f942 	bl	800a444 <I2C_MasterRequestRead>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e1b8      	b.n	800853c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d113      	bne.n	80081fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081d2:	2300      	movs	r3, #0
 80081d4:	623b      	str	r3, [r7, #32]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	623b      	str	r3, [r7, #32]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	623b      	str	r3, [r7, #32]
 80081e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	e18c      	b.n	8008514 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d11b      	bne.n	800823a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008210:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008212:	2300      	movs	r3, #0
 8008214:	61fb      	str	r3, [r7, #28]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	61fb      	str	r3, [r7, #28]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	61fb      	str	r3, [r7, #28]
 8008226:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	e16c      	b.n	8008514 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800823e:	2b02      	cmp	r3, #2
 8008240:	d11b      	bne.n	800827a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008250:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008260:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008262:	2300      	movs	r3, #0
 8008264:	61bb      	str	r3, [r7, #24]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	61bb      	str	r3, [r7, #24]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	61bb      	str	r3, [r7, #24]
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	e14c      	b.n	8008514 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008288:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800828a:	2300      	movs	r3, #0
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	617b      	str	r3, [r7, #20]
 800829e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80082a0:	e138      	b.n	8008514 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	f200 80f1 	bhi.w	800848e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d123      	bne.n	80082fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f002 fd41 	bl	800ad40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e139      	b.n	800853c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	691a      	ldr	r2, [r3, #16]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082da:	1c5a      	adds	r2, r3, #1
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e4:	3b01      	subs	r3, #1
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	3b01      	subs	r3, #1
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082fa:	e10b      	b.n	8008514 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008300:	2b02      	cmp	r3, #2
 8008302:	d14e      	bne.n	80083a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	2200      	movs	r2, #0
 800830c:	4906      	ldr	r1, [pc, #24]	; (8008328 <HAL_I2C_Master_Receive+0x22c>)
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f002 fb8c 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d008      	beq.n	800832c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e10e      	b.n	800853c <HAL_I2C_Master_Receive+0x440>
 800831e:	bf00      	nop
 8008320:	00100002 	.word	0x00100002
 8008324:	ffff0000 	.word	0xffff0000
 8008328:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800833a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	691a      	ldr	r2, [r3, #16]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	b2d2      	uxtb	r2, r2
 8008348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	1c5a      	adds	r2, r3, #1
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008358:	3b01      	subs	r3, #1
 800835a:	b29a      	uxth	r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008364:	b29b      	uxth	r3, r3
 8008366:	3b01      	subs	r3, #1
 8008368:	b29a      	uxth	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	691a      	ldr	r2, [r3, #16]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	b2d2      	uxtb	r2, r2
 800837a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838a:	3b01      	subs	r3, #1
 800838c:	b29a      	uxth	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008396:	b29b      	uxth	r3, r3
 8008398:	3b01      	subs	r3, #1
 800839a:	b29a      	uxth	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083a0:	e0b8      	b.n	8008514 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a8:	2200      	movs	r2, #0
 80083aa:	4966      	ldr	r1, [pc, #408]	; (8008544 <HAL_I2C_Master_Receive+0x448>)
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f002 fb3d 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e0bf      	b.n	800853c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	691a      	ldr	r2, [r3, #16]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	b2d2      	uxtb	r2, r2
 80083d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	1c5a      	adds	r2, r3, #1
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e8:	3b01      	subs	r3, #1
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	3b01      	subs	r3, #1
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	2200      	movs	r2, #0
 8008406:	494f      	ldr	r1, [pc, #316]	; (8008544 <HAL_I2C_Master_Receive+0x448>)
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f002 fb0f 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e091      	b.n	800853c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	691a      	ldr	r2, [r3, #16]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008432:	b2d2      	uxtb	r2, r2
 8008434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843a:	1c5a      	adds	r2, r3, #1
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008444:	3b01      	subs	r3, #1
 8008446:	b29a      	uxth	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008450:	b29b      	uxth	r3, r3
 8008452:	3b01      	subs	r3, #1
 8008454:	b29a      	uxth	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008464:	b2d2      	uxtb	r2, r2
 8008466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008476:	3b01      	subs	r3, #1
 8008478:	b29a      	uxth	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008482:	b29b      	uxth	r3, r3
 8008484:	3b01      	subs	r3, #1
 8008486:	b29a      	uxth	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800848c:	e042      	b.n	8008514 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800848e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f002 fc54 	bl	800ad40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e04c      	b.n	800853c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	691a      	ldr	r2, [r3, #16]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	b2d2      	uxtb	r2, r2
 80084ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	1c5a      	adds	r2, r3, #1
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084be:	3b01      	subs	r3, #1
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	3b01      	subs	r3, #1
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	f003 0304 	and.w	r3, r3, #4
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d118      	bne.n	8008514 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	691a      	ldr	r2, [r3, #16]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084fe:	3b01      	subs	r3, #1
 8008500:	b29a      	uxth	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800850a:	b29b      	uxth	r3, r3
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008518:	2b00      	cmp	r3, #0
 800851a:	f47f aec2 	bne.w	80082a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2220      	movs	r2, #32
 8008522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	e000      	b.n	800853c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800853a:	2302      	movs	r3, #2
  }
}
 800853c:	4618      	mov	r0, r3
 800853e:	3728      	adds	r7, #40	; 0x28
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	00010004 	.word	0x00010004

08008548 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b088      	sub	sp, #32
 800854c:	af02      	add	r7, sp, #8
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	4608      	mov	r0, r1
 8008552:	4611      	mov	r1, r2
 8008554:	461a      	mov	r2, r3
 8008556:	4603      	mov	r3, r0
 8008558:	817b      	strh	r3, [r7, #10]
 800855a:	460b      	mov	r3, r1
 800855c:	813b      	strh	r3, [r7, #8]
 800855e:	4613      	mov	r3, r2
 8008560:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008562:	f7fe fbc1 	bl	8006ce8 <HAL_GetTick>
 8008566:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b20      	cmp	r3, #32
 8008572:	f040 80d9 	bne.w	8008728 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	2319      	movs	r3, #25
 800857c:	2201      	movs	r2, #1
 800857e:	496d      	ldr	r1, [pc, #436]	; (8008734 <HAL_I2C_Mem_Write+0x1ec>)
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f002 fa53 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800858c:	2302      	movs	r3, #2
 800858e:	e0cc      	b.n	800872a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008596:	2b01      	cmp	r3, #1
 8008598:	d101      	bne.n	800859e <HAL_I2C_Mem_Write+0x56>
 800859a:	2302      	movs	r3, #2
 800859c:	e0c5      	b.n	800872a <HAL_I2C_Mem_Write+0x1e2>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d007      	beq.n	80085c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f042 0201 	orr.w	r2, r2, #1
 80085c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2221      	movs	r2, #33	; 0x21
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2240      	movs	r2, #64	; 0x40
 80085e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6a3a      	ldr	r2, [r7, #32]
 80085ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80085f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4a4d      	ldr	r2, [pc, #308]	; (8008738 <HAL_I2C_Mem_Write+0x1f0>)
 8008604:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008606:	88f8      	ldrh	r0, [r7, #6]
 8008608:	893a      	ldrh	r2, [r7, #8]
 800860a:	8979      	ldrh	r1, [r7, #10]
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	9301      	str	r3, [sp, #4]
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	4603      	mov	r3, r0
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f001 ffe2 	bl	800a5e0 <I2C_RequestMemoryWrite>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d052      	beq.n	80086c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e081      	b.n	800872a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f002 fad4 	bl	800abd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00d      	beq.n	8008652 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	2b04      	cmp	r3, #4
 800863c:	d107      	bne.n	800864e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800864c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e06b      	b.n	800872a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008656:	781a      	ldrb	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800866c:	3b01      	subs	r3, #1
 800866e:	b29a      	uxth	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008678:	b29b      	uxth	r3, r3
 800867a:	3b01      	subs	r3, #1
 800867c:	b29a      	uxth	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	f003 0304 	and.w	r3, r3, #4
 800868c:	2b04      	cmp	r3, #4
 800868e:	d11b      	bne.n	80086c8 <HAL_I2C_Mem_Write+0x180>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008694:	2b00      	cmp	r3, #0
 8008696:	d017      	beq.n	80086c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	781a      	ldrb	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086b2:	3b01      	subs	r3, #1
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086be:	b29b      	uxth	r3, r3
 80086c0:	3b01      	subs	r3, #1
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1aa      	bne.n	8008626 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f002 fac0 	bl	800ac5a <I2C_WaitOnBTFFlagUntilTimeout>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00d      	beq.n	80086fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e4:	2b04      	cmp	r3, #4
 80086e6:	d107      	bne.n	80086f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e016      	b.n	800872a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800870a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2220      	movs	r2, #32
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	e000      	b.n	800872a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008728:	2302      	movs	r3, #2
  }
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	00100002 	.word	0x00100002
 8008738:	ffff0000 	.word	0xffff0000

0800873c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b08c      	sub	sp, #48	; 0x30
 8008740:	af02      	add	r7, sp, #8
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	4608      	mov	r0, r1
 8008746:	4611      	mov	r1, r2
 8008748:	461a      	mov	r2, r3
 800874a:	4603      	mov	r3, r0
 800874c:	817b      	strh	r3, [r7, #10]
 800874e:	460b      	mov	r3, r1
 8008750:	813b      	strh	r3, [r7, #8]
 8008752:	4613      	mov	r3, r2
 8008754:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008756:	f7fe fac7 	bl	8006ce8 <HAL_GetTick>
 800875a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b20      	cmp	r3, #32
 8008766:	f040 8208 	bne.w	8008b7a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	2319      	movs	r3, #25
 8008770:	2201      	movs	r2, #1
 8008772:	497b      	ldr	r1, [pc, #492]	; (8008960 <HAL_I2C_Mem_Read+0x224>)
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f002 f959 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008780:	2302      	movs	r3, #2
 8008782:	e1fb      	b.n	8008b7c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800878a:	2b01      	cmp	r3, #1
 800878c:	d101      	bne.n	8008792 <HAL_I2C_Mem_Read+0x56>
 800878e:	2302      	movs	r3, #2
 8008790:	e1f4      	b.n	8008b7c <HAL_I2C_Mem_Read+0x440>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d007      	beq.n	80087b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f042 0201 	orr.w	r2, r2, #1
 80087b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2222      	movs	r2, #34	; 0x22
 80087cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2240      	movs	r2, #64	; 0x40
 80087d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80087e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4a5b      	ldr	r2, [pc, #364]	; (8008964 <HAL_I2C_Mem_Read+0x228>)
 80087f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80087fa:	88f8      	ldrh	r0, [r7, #6]
 80087fc:	893a      	ldrh	r2, [r7, #8]
 80087fe:	8979      	ldrh	r1, [r7, #10]
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	9301      	str	r3, [sp, #4]
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	4603      	mov	r3, r0
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f001 ff7e 	bl	800a70c <I2C_RequestMemoryRead>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e1b0      	b.n	8008b7c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800881e:	2b00      	cmp	r3, #0
 8008820:	d113      	bne.n	800884a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008822:	2300      	movs	r3, #0
 8008824:	623b      	str	r3, [r7, #32]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	623b      	str	r3, [r7, #32]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	623b      	str	r3, [r7, #32]
 8008836:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	e184      	b.n	8008b54 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800884e:	2b01      	cmp	r3, #1
 8008850:	d11b      	bne.n	800888a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008860:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008862:	2300      	movs	r3, #0
 8008864:	61fb      	str	r3, [r7, #28]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	61fb      	str	r3, [r7, #28]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	61fb      	str	r3, [r7, #28]
 8008876:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	e164      	b.n	8008b54 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800888e:	2b02      	cmp	r3, #2
 8008890:	d11b      	bne.n	80088ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088b2:	2300      	movs	r3, #0
 80088b4:	61bb      	str	r3, [r7, #24]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	695b      	ldr	r3, [r3, #20]
 80088bc:	61bb      	str	r3, [r7, #24]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	61bb      	str	r3, [r7, #24]
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	e144      	b.n	8008b54 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088ca:	2300      	movs	r3, #0
 80088cc:	617b      	str	r3, [r7, #20]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	617b      	str	r3, [r7, #20]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	617b      	str	r3, [r7, #20]
 80088de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80088e0:	e138      	b.n	8008b54 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	f200 80f1 	bhi.w	8008ace <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d123      	bne.n	800893c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f002 fa21 	bl	800ad40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e139      	b.n	8008b7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691a      	ldr	r2, [r3, #16]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	b2d2      	uxtb	r2, r2
 8008914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008924:	3b01      	subs	r3, #1
 8008926:	b29a      	uxth	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008930:	b29b      	uxth	r3, r3
 8008932:	3b01      	subs	r3, #1
 8008934:	b29a      	uxth	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	855a      	strh	r2, [r3, #42]	; 0x2a
 800893a:	e10b      	b.n	8008b54 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008940:	2b02      	cmp	r3, #2
 8008942:	d14e      	bne.n	80089e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894a:	2200      	movs	r2, #0
 800894c:	4906      	ldr	r1, [pc, #24]	; (8008968 <HAL_I2C_Mem_Read+0x22c>)
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f002 f86c 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d008      	beq.n	800896c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e10e      	b.n	8008b7c <HAL_I2C_Mem_Read+0x440>
 800895e:	bf00      	nop
 8008960:	00100002 	.word	0x00100002
 8008964:	ffff0000 	.word	0xffff0000
 8008968:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800897a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	691a      	ldr	r2, [r3, #16]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	b2d2      	uxtb	r2, r2
 8008988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898e:	1c5a      	adds	r2, r3, #1
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008998:	3b01      	subs	r3, #1
 800899a:	b29a      	uxth	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	691a      	ldr	r2, [r3, #16]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	b2d2      	uxtb	r2, r2
 80089ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c0:	1c5a      	adds	r2, r3, #1
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ca:	3b01      	subs	r3, #1
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	3b01      	subs	r3, #1
 80089da:	b29a      	uxth	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80089e0:	e0b8      	b.n	8008b54 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	2200      	movs	r2, #0
 80089ea:	4966      	ldr	r1, [pc, #408]	; (8008b84 <HAL_I2C_Mem_Read+0x448>)
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f002 f81d 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e0bf      	b.n	8008b7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	691a      	ldr	r2, [r3, #16]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	3b01      	subs	r3, #1
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	2200      	movs	r2, #0
 8008a46:	494f      	ldr	r1, [pc, #316]	; (8008b84 <HAL_I2C_Mem_Read+0x448>)
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f001 ffef 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e091      	b.n	8008b7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	691a      	ldr	r2, [r3, #16]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	b2d2      	uxtb	r2, r2
 8008a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a84:	3b01      	subs	r3, #1
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	3b01      	subs	r3, #1
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	691a      	ldr	r2, [r3, #16]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	b2d2      	uxtb	r2, r2
 8008aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	1c5a      	adds	r2, r3, #1
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008acc:	e042      	b.n	8008b54 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f002 f934 	bl	800ad40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e04c      	b.n	8008b7c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	691a      	ldr	r2, [r3, #16]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	b2d2      	uxtb	r2, r2
 8008aee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af4:	1c5a      	adds	r2, r3, #1
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008afe:	3b01      	subs	r3, #1
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	f003 0304 	and.w	r3, r3, #4
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d118      	bne.n	8008b54 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	691a      	ldr	r2, [r3, #16]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	b2d2      	uxtb	r2, r2
 8008b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b34:	1c5a      	adds	r2, r3, #1
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f47f aec2 	bne.w	80088e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	e000      	b.n	8008b7c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008b7a:	2302      	movs	r3, #2
  }
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3728      	adds	r7, #40	; 0x28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	00010004 	.word	0x00010004

08008b88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ba8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	2b10      	cmp	r3, #16
 8008bb6:	d003      	beq.n	8008bc0 <HAL_I2C_EV_IRQHandler+0x38>
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
 8008bba:	2b40      	cmp	r3, #64	; 0x40
 8008bbc:	f040 80c1 	bne.w	8008d42 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10d      	bne.n	8008bf6 <HAL_I2C_EV_IRQHandler+0x6e>
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008be0:	d003      	beq.n	8008bea <HAL_I2C_EV_IRQHandler+0x62>
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008be8:	d101      	bne.n	8008bee <HAL_I2C_EV_IRQHandler+0x66>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e000      	b.n	8008bf0 <HAL_I2C_EV_IRQHandler+0x68>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	f000 8132 	beq.w	8008e5a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00c      	beq.n	8008c1a <HAL_I2C_EV_IRQHandler+0x92>
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	0a5b      	lsrs	r3, r3, #9
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d006      	beq.n	8008c1a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f002 f91c 	bl	800ae4a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fd79 	bl	800970a <I2C_Master_SB>
 8008c18:	e092      	b.n	8008d40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	08db      	lsrs	r3, r3, #3
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d009      	beq.n	8008c3a <HAL_I2C_EV_IRQHandler+0xb2>
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	0a5b      	lsrs	r3, r3, #9
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fdef 	bl	8009816 <I2C_Master_ADD10>
 8008c38:	e082      	b.n	8008d40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	085b      	lsrs	r3, r3, #1
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d009      	beq.n	8008c5a <HAL_I2C_EV_IRQHandler+0xd2>
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	0a5b      	lsrs	r3, r3, #9
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fe09 	bl	800986a <I2C_Master_ADDR>
 8008c58:	e072      	b.n	8008d40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	089b      	lsrs	r3, r3, #2
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d03b      	beq.n	8008cde <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c74:	f000 80f3 	beq.w	8008e5e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	09db      	lsrs	r3, r3, #7
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00f      	beq.n	8008ca4 <HAL_I2C_EV_IRQHandler+0x11c>
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	0a9b      	lsrs	r3, r3, #10
 8008c88:	f003 0301 	and.w	r3, r3, #1
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d009      	beq.n	8008ca4 <HAL_I2C_EV_IRQHandler+0x11c>
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	089b      	lsrs	r3, r3, #2
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d103      	bne.n	8008ca4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f9f3 	bl	8009088 <I2C_MasterTransmit_TXE>
 8008ca2:	e04d      	b.n	8008d40 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	089b      	lsrs	r3, r3, #2
 8008ca8:	f003 0301 	and.w	r3, r3, #1
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 80d6 	beq.w	8008e5e <HAL_I2C_EV_IRQHandler+0x2d6>
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	0a5b      	lsrs	r3, r3, #9
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 80cf 	beq.w	8008e5e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	2b21      	cmp	r3, #33	; 0x21
 8008cc4:	d103      	bne.n	8008cce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fa7a 	bl	80091c0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ccc:	e0c7      	b.n	8008e5e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	2b40      	cmp	r3, #64	; 0x40
 8008cd2:	f040 80c4 	bne.w	8008e5e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fae8 	bl	80092ac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008cdc:	e0bf      	b.n	8008e5e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cec:	f000 80b7 	beq.w	8008e5e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	099b      	lsrs	r3, r3, #6
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00f      	beq.n	8008d1c <HAL_I2C_EV_IRQHandler+0x194>
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	0a9b      	lsrs	r3, r3, #10
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d009      	beq.n	8008d1c <HAL_I2C_EV_IRQHandler+0x194>
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	089b      	lsrs	r3, r3, #2
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d103      	bne.n	8008d1c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fb5d 	bl	80093d4 <I2C_MasterReceive_RXNE>
 8008d1a:	e011      	b.n	8008d40 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	089b      	lsrs	r3, r3, #2
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 809a 	beq.w	8008e5e <HAL_I2C_EV_IRQHandler+0x2d6>
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	0a5b      	lsrs	r3, r3, #9
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 8093 	beq.w	8008e5e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fbfc 	bl	8009536 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d3e:	e08e      	b.n	8008e5e <HAL_I2C_EV_IRQHandler+0x2d6>
 8008d40:	e08d      	b.n	8008e5e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d004      	beq.n	8008d54 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	61fb      	str	r3, [r7, #28]
 8008d52:	e007      	b.n	8008d64 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	085b      	lsrs	r3, r3, #1
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d012      	beq.n	8008d96 <HAL_I2C_EV_IRQHandler+0x20e>
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	0a5b      	lsrs	r3, r3, #9
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00c      	beq.n	8008d96 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d003      	beq.n	8008d8c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008d8c:	69b9      	ldr	r1, [r7, #24]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 ffba 	bl	8009d08 <I2C_Slave_ADDR>
 8008d94:	e066      	b.n	8008e64 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	091b      	lsrs	r3, r3, #4
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d009      	beq.n	8008db6 <HAL_I2C_EV_IRQHandler+0x22e>
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	0a5b      	lsrs	r3, r3, #9
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fff4 	bl	8009d9c <I2C_Slave_STOPF>
 8008db4:	e056      	b.n	8008e64 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	2b21      	cmp	r3, #33	; 0x21
 8008dba:	d002      	beq.n	8008dc2 <HAL_I2C_EV_IRQHandler+0x23a>
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	2b29      	cmp	r3, #41	; 0x29
 8008dc0:	d125      	bne.n	8008e0e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	09db      	lsrs	r3, r3, #7
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00f      	beq.n	8008dee <HAL_I2C_EV_IRQHandler+0x266>
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	0a9b      	lsrs	r3, r3, #10
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d009      	beq.n	8008dee <HAL_I2C_EV_IRQHandler+0x266>
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	089b      	lsrs	r3, r3, #2
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d103      	bne.n	8008dee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fed0 	bl	8009b8c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008dec:	e039      	b.n	8008e62 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	089b      	lsrs	r3, r3, #2
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d033      	beq.n	8008e62 <HAL_I2C_EV_IRQHandler+0x2da>
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	0a5b      	lsrs	r3, r3, #9
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d02d      	beq.n	8008e62 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fefd 	bl	8009c06 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e0c:	e029      	b.n	8008e62 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	099b      	lsrs	r3, r3, #6
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00f      	beq.n	8008e3a <HAL_I2C_EV_IRQHandler+0x2b2>
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	0a9b      	lsrs	r3, r3, #10
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d009      	beq.n	8008e3a <HAL_I2C_EV_IRQHandler+0x2b2>
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	089b      	lsrs	r3, r3, #2
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d103      	bne.n	8008e3a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 ff08 	bl	8009c48 <I2C_SlaveReceive_RXNE>
 8008e38:	e014      	b.n	8008e64 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	089b      	lsrs	r3, r3, #2
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00e      	beq.n	8008e64 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	0a5b      	lsrs	r3, r3, #9
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d008      	beq.n	8008e64 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 ff36 	bl	8009cc4 <I2C_SlaveReceive_BTF>
 8008e58:	e004      	b.n	8008e64 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008e5a:	bf00      	nop
 8008e5c:	e002      	b.n	8008e64 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e5e:	bf00      	nop
 8008e60:	e000      	b.n	8008e64 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e62:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008e64:	3720      	adds	r7, #32
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b08a      	sub	sp, #40	; 0x28
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008e82:	2300      	movs	r3, #0
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e8c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	0a1b      	lsrs	r3, r3, #8
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00e      	beq.n	8008eb8 <HAL_I2C_ER_IRQHandler+0x4e>
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	0a1b      	lsrs	r3, r3, #8
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d008      	beq.n	8008eb8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	f043 0301 	orr.w	r3, r3, #1
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008eb6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	0a5b      	lsrs	r3, r3, #9
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00e      	beq.n	8008ee2 <HAL_I2C_ER_IRQHandler+0x78>
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	0a1b      	lsrs	r3, r3, #8
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d008      	beq.n	8008ee2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	f043 0302 	orr.w	r3, r3, #2
 8008ed6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008ee0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	0a9b      	lsrs	r3, r3, #10
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d03f      	beq.n	8008f6e <HAL_I2C_ER_IRQHandler+0x104>
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	0a1b      	lsrs	r3, r3, #8
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d039      	beq.n	8008f6e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008efa:	7efb      	ldrb	r3, [r7, #27]
 8008efc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f0c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f12:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008f14:	7ebb      	ldrb	r3, [r7, #26]
 8008f16:	2b20      	cmp	r3, #32
 8008f18:	d112      	bne.n	8008f40 <HAL_I2C_ER_IRQHandler+0xd6>
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10f      	bne.n	8008f40 <HAL_I2C_ER_IRQHandler+0xd6>
 8008f20:	7cfb      	ldrb	r3, [r7, #19]
 8008f22:	2b21      	cmp	r3, #33	; 0x21
 8008f24:	d008      	beq.n	8008f38 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008f26:	7cfb      	ldrb	r3, [r7, #19]
 8008f28:	2b29      	cmp	r3, #41	; 0x29
 8008f2a:	d005      	beq.n	8008f38 <HAL_I2C_ER_IRQHandler+0xce>
 8008f2c:	7cfb      	ldrb	r3, [r7, #19]
 8008f2e:	2b28      	cmp	r3, #40	; 0x28
 8008f30:	d106      	bne.n	8008f40 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b21      	cmp	r3, #33	; 0x21
 8008f36:	d103      	bne.n	8008f40 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f001 f85f 	bl	8009ffc <I2C_Slave_AF>
 8008f3e:	e016      	b.n	8008f6e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f48:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	f043 0304 	orr.w	r3, r3, #4
 8008f50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008f52:	7efb      	ldrb	r3, [r7, #27]
 8008f54:	2b10      	cmp	r3, #16
 8008f56:	d002      	beq.n	8008f5e <HAL_I2C_ER_IRQHandler+0xf4>
 8008f58:	7efb      	ldrb	r3, [r7, #27]
 8008f5a:	2b40      	cmp	r3, #64	; 0x40
 8008f5c:	d107      	bne.n	8008f6e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f6c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	0adb      	lsrs	r3, r3, #11
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00e      	beq.n	8008f98 <HAL_I2C_ER_IRQHandler+0x12e>
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	0a1b      	lsrs	r3, r3, #8
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d008      	beq.n	8008f98 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	f043 0308 	orr.w	r3, r3, #8
 8008f8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008f96:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d008      	beq.n	8008fb0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f001 f896 	bl	800a0dc <I2C_ITError>
  }
}
 8008fb0:	bf00      	nop
 8008fb2:	3728      	adds	r7, #40	; 0x28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	70fb      	strb	r3, [r7, #3]
 8009014:	4613      	mov	r3, r2
 8009016:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009096:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800909e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d150      	bne.n	8009150 <I2C_MasterTransmit_TXE+0xc8>
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	2b21      	cmp	r3, #33	; 0x21
 80090b2:	d14d      	bne.n	8009150 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	2b08      	cmp	r3, #8
 80090b8:	d01d      	beq.n	80090f6 <I2C_MasterTransmit_TXE+0x6e>
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2b20      	cmp	r3, #32
 80090be:	d01a      	beq.n	80090f6 <I2C_MasterTransmit_TXE+0x6e>
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090c6:	d016      	beq.n	80090f6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80090d6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2211      	movs	r2, #17
 80090dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2220      	movs	r2, #32
 80090ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff ff62 	bl	8008fb8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80090f4:	e060      	b.n	80091b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009104:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009114:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2220      	movs	r2, #32
 8009120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800912a:	b2db      	uxtb	r3, r3
 800912c:	2b40      	cmp	r3, #64	; 0x40
 800912e:	d107      	bne.n	8009140 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff ff7d 	bl	8009038 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800913e:	e03b      	b.n	80091b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff ff35 	bl	8008fb8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800914e:	e033      	b.n	80091b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	2b21      	cmp	r3, #33	; 0x21
 8009154:	d005      	beq.n	8009162 <I2C_MasterTransmit_TXE+0xda>
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	2b40      	cmp	r3, #64	; 0x40
 800915a:	d12d      	bne.n	80091b8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800915c:	7bfb      	ldrb	r3, [r7, #15]
 800915e:	2b22      	cmp	r3, #34	; 0x22
 8009160:	d12a      	bne.n	80091b8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009166:	b29b      	uxth	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	d108      	bne.n	800917e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800917a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800917c:	e01c      	b.n	80091b8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b40      	cmp	r3, #64	; 0x40
 8009188:	d103      	bne.n	8009192 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f88e 	bl	80092ac <I2C_MemoryTransmit_TXE_BTF>
}
 8009190:	e012      	b.n	80091b8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	781a      	ldrb	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	1c5a      	adds	r2, r3, #1
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80091b6:	e7ff      	b.n	80091b8 <I2C_MasterTransmit_TXE+0x130>
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b21      	cmp	r3, #33	; 0x21
 80091d8:	d164      	bne.n	80092a4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091de:	b29b      	uxth	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d012      	beq.n	800920a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	781a      	ldrb	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091fe:	b29b      	uxth	r3, r3
 8009200:	3b01      	subs	r3, #1
 8009202:	b29a      	uxth	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8009208:	e04c      	b.n	80092a4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b08      	cmp	r3, #8
 800920e:	d01d      	beq.n	800924c <I2C_MasterTransmit_BTF+0x8c>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2b20      	cmp	r3, #32
 8009214:	d01a      	beq.n	800924c <I2C_MasterTransmit_BTF+0x8c>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800921c:	d016      	beq.n	800924c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800922c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2211      	movs	r2, #17
 8009232:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2220      	movs	r2, #32
 8009240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff feb7 	bl	8008fb8 <HAL_I2C_MasterTxCpltCallback>
}
 800924a:	e02b      	b.n	80092a4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800925a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800926a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2220      	movs	r2, #32
 8009276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b40      	cmp	r3, #64	; 0x40
 8009284:	d107      	bne.n	8009296 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7ff fed2 	bl	8009038 <HAL_I2C_MemTxCpltCallback>
}
 8009294:	e006      	b.n	80092a4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff fe8a 	bl	8008fb8 <HAL_I2C_MasterTxCpltCallback>
}
 80092a4:	bf00      	nop
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d11d      	bne.n	8009300 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d10b      	bne.n	80092e4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092dc:	1c9a      	adds	r2, r3, #2
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80092e2:	e073      	b.n	80093cc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	121b      	asrs	r3, r3, #8
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80092fe:	e065      	b.n	80093cc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009304:	2b01      	cmp	r3, #1
 8009306:	d10b      	bne.n	8009320 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800930c:	b2da      	uxtb	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009318:	1c5a      	adds	r2, r3, #1
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800931e:	e055      	b.n	80093cc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009324:	2b02      	cmp	r3, #2
 8009326:	d151      	bne.n	80093cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	2b22      	cmp	r3, #34	; 0x22
 800932c:	d10d      	bne.n	800934a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800933c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009348:	e040      	b.n	80093cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800934e:	b29b      	uxth	r3, r3
 8009350:	2b00      	cmp	r3, #0
 8009352:	d015      	beq.n	8009380 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	2b21      	cmp	r3, #33	; 0x21
 8009358:	d112      	bne.n	8009380 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935e:	781a      	ldrb	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009374:	b29b      	uxth	r3, r3
 8009376:	3b01      	subs	r3, #1
 8009378:	b29a      	uxth	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800937e:	e025      	b.n	80093cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009384:	b29b      	uxth	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d120      	bne.n	80093cc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800938a:	7bfb      	ldrb	r3, [r7, #15]
 800938c:	2b21      	cmp	r3, #33	; 0x21
 800938e:	d11d      	bne.n	80093cc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800939e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2220      	movs	r2, #32
 80093ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff fe36 	bl	8009038 <HAL_I2C_MemTxCpltCallback>
}
 80093cc:	bf00      	nop
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b22      	cmp	r3, #34	; 0x22
 80093e6:	f040 80a2 	bne.w	800952e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d921      	bls.n	800943c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	691a      	ldr	r2, [r3, #16]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	b2d2      	uxtb	r2, r2
 8009404:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009414:	b29b      	uxth	r3, r3
 8009416:	3b01      	subs	r3, #1
 8009418:	b29a      	uxth	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009422:	b29b      	uxth	r3, r3
 8009424:	2b03      	cmp	r3, #3
 8009426:	f040 8082 	bne.w	800952e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009438:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800943a:	e078      	b.n	800952e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009440:	2b02      	cmp	r3, #2
 8009442:	d074      	beq.n	800952e <I2C_MasterReceive_RXNE+0x15a>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d002      	beq.n	8009450 <I2C_MasterReceive_RXNE+0x7c>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d16e      	bne.n	800952e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f001 fc43 	bl	800acdc <I2C_WaitOnSTOPRequestThroughIT>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d142      	bne.n	80094e2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800946a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	685a      	ldr	r2, [r3, #4]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800947a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	691a      	ldr	r2, [r3, #16]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	b2d2      	uxtb	r2, r2
 8009488:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	1c5a      	adds	r2, r3, #1
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009498:	b29b      	uxth	r3, r3
 800949a:	3b01      	subs	r3, #1
 800949c:	b29a      	uxth	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2220      	movs	r2, #32
 80094a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b40      	cmp	r3, #64	; 0x40
 80094b4:	d10a      	bne.n	80094cc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7ff fdc1 	bl	800904c <HAL_I2C_MemRxCpltCallback>
}
 80094ca:	e030      	b.n	800952e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2212      	movs	r2, #18
 80094d8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7ff fd76 	bl	8008fcc <HAL_I2C_MasterRxCpltCallback>
}
 80094e0:	e025      	b.n	800952e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	685a      	ldr	r2, [r3, #4]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80094f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	691a      	ldr	r2, [r3, #16]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	b2d2      	uxtb	r2, r2
 80094fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	1c5a      	adds	r2, r3, #1
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800950e:	b29b      	uxth	r3, r3
 8009510:	3b01      	subs	r3, #1
 8009512:	b29a      	uxth	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2220      	movs	r2, #32
 800951c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7ff fd99 	bl	8009060 <HAL_I2C_ErrorCallback>
}
 800952e:	bf00      	nop
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009542:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009548:	b29b      	uxth	r3, r3
 800954a:	2b04      	cmp	r3, #4
 800954c:	d11b      	bne.n	8009586 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800955c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	691a      	ldr	r2, [r3, #16]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	b2d2      	uxtb	r2, r2
 800956a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009570:	1c5a      	adds	r2, r3, #1
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800957a:	b29b      	uxth	r3, r3
 800957c:	3b01      	subs	r3, #1
 800957e:	b29a      	uxth	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8009584:	e0bd      	b.n	8009702 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800958a:	b29b      	uxth	r3, r3
 800958c:	2b03      	cmp	r3, #3
 800958e:	d129      	bne.n	80095e4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	685a      	ldr	r2, [r3, #4]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800959e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	d00a      	beq.n	80095bc <I2C_MasterReceive_BTF+0x86>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d007      	beq.n	80095bc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	691a      	ldr	r2, [r3, #16]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c6:	b2d2      	uxtb	r2, r2
 80095c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d8:	b29b      	uxth	r3, r3
 80095da:	3b01      	subs	r3, #1
 80095dc:	b29a      	uxth	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80095e2:	e08e      	b.n	8009702 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d176      	bne.n	80096dc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d002      	beq.n	80095fa <I2C_MasterReceive_BTF+0xc4>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b10      	cmp	r3, #16
 80095f8:	d108      	bne.n	800960c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	e019      	b.n	8009640 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b04      	cmp	r3, #4
 8009610:	d002      	beq.n	8009618 <I2C_MasterReceive_BTF+0xe2>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b02      	cmp	r3, #2
 8009616:	d108      	bne.n	800962a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	e00a      	b.n	8009640 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2b10      	cmp	r3, #16
 800962e:	d007      	beq.n	8009640 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800963e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	691a      	ldr	r2, [r3, #16]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964a:	b2d2      	uxtb	r2, r2
 800964c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009652:	1c5a      	adds	r2, r3, #1
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800965c:	b29b      	uxth	r3, r3
 800965e:	3b01      	subs	r3, #1
 8009660:	b29a      	uxth	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	691a      	ldr	r2, [r3, #16]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009670:	b2d2      	uxtb	r2, r2
 8009672:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009682:	b29b      	uxth	r3, r3
 8009684:	3b01      	subs	r3, #1
 8009686:	b29a      	uxth	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	685a      	ldr	r2, [r3, #4]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800969a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2220      	movs	r2, #32
 80096a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b40      	cmp	r3, #64	; 0x40
 80096ae:	d10a      	bne.n	80096c6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7ff fcc4 	bl	800904c <HAL_I2C_MemRxCpltCallback>
}
 80096c4:	e01d      	b.n	8009702 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2212      	movs	r2, #18
 80096d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff fc79 	bl	8008fcc <HAL_I2C_MasterRxCpltCallback>
}
 80096da:	e012      	b.n	8009702 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	691a      	ldr	r2, [r3, #16]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e6:	b2d2      	uxtb	r2, r2
 80096e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ee:	1c5a      	adds	r2, r3, #1
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	3b01      	subs	r3, #1
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009702:	bf00      	nop
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800970a:	b480      	push	{r7}
 800970c:	b083      	sub	sp, #12
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b40      	cmp	r3, #64	; 0x40
 800971c:	d117      	bne.n	800974e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009722:	2b00      	cmp	r3, #0
 8009724:	d109      	bne.n	800973a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800972a:	b2db      	uxtb	r3, r3
 800972c:	461a      	mov	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009736:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009738:	e067      	b.n	800980a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800973e:	b2db      	uxtb	r3, r3
 8009740:	f043 0301 	orr.w	r3, r3, #1
 8009744:	b2da      	uxtb	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	611a      	str	r2, [r3, #16]
}
 800974c:	e05d      	b.n	800980a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009756:	d133      	bne.n	80097c0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b21      	cmp	r3, #33	; 0x21
 8009762:	d109      	bne.n	8009778 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009768:	b2db      	uxtb	r3, r3
 800976a:	461a      	mov	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009774:	611a      	str	r2, [r3, #16]
 8009776:	e008      	b.n	800978a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800977c:	b2db      	uxtb	r3, r3
 800977e:	f043 0301 	orr.w	r3, r3, #1
 8009782:	b2da      	uxtb	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978e:	2b00      	cmp	r3, #0
 8009790:	d004      	beq.n	800979c <I2C_Master_SB+0x92>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009798:	2b00      	cmp	r3, #0
 800979a:	d108      	bne.n	80097ae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d032      	beq.n	800980a <I2C_Master_SB+0x100>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d02d      	beq.n	800980a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097bc:	605a      	str	r2, [r3, #4]
}
 80097be:	e024      	b.n	800980a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10e      	bne.n	80097e6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	11db      	asrs	r3, r3, #7
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	f003 0306 	and.w	r3, r3, #6
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	f063 030f 	orn	r3, r3, #15
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	611a      	str	r2, [r3, #16]
}
 80097e4:	e011      	b.n	800980a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d10d      	bne.n	800980a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	11db      	asrs	r3, r3, #7
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	f003 0306 	and.w	r3, r3, #6
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	f063 030e 	orn	r3, r3, #14
 8009802:	b2da      	uxtb	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	611a      	str	r2, [r3, #16]
}
 800980a:	bf00      	nop
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009822:	b2da      	uxtb	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982e:	2b00      	cmp	r3, #0
 8009830:	d004      	beq.n	800983c <I2C_Master_ADD10+0x26>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009838:	2b00      	cmp	r3, #0
 800983a:	d108      	bne.n	800984e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00c      	beq.n	800985e <I2C_Master_ADD10+0x48>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984a:	2b00      	cmp	r3, #0
 800984c:	d007      	beq.n	800985e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800985c:	605a      	str	r2, [r3, #4]
  }
}
 800985e:	bf00      	nop
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800986a:	b480      	push	{r7}
 800986c:	b091      	sub	sp, #68	; 0x44
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009878:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009880:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009886:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b22      	cmp	r3, #34	; 0x22
 8009892:	f040 8169 	bne.w	8009b68 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10f      	bne.n	80098be <I2C_Master_ADDR+0x54>
 800989e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80098a2:	2b40      	cmp	r3, #64	; 0x40
 80098a4:	d10b      	bne.n	80098be <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098a6:	2300      	movs	r3, #0
 80098a8:	633b      	str	r3, [r7, #48]	; 0x30
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	633b      	str	r3, [r7, #48]	; 0x30
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	633b      	str	r3, [r7, #48]	; 0x30
 80098ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098bc:	e160      	b.n	8009b80 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d11d      	bne.n	8009902 <I2C_Master_ADDR+0x98>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80098ce:	d118      	bne.n	8009902 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098d0:	2300      	movs	r3, #0
 80098d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098f4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	651a      	str	r2, [r3, #80]	; 0x50
 8009900:	e13e      	b.n	8009b80 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009906:	b29b      	uxth	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d113      	bne.n	8009934 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800990c:	2300      	movs	r3, #0
 800990e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	62bb      	str	r3, [r7, #40]	; 0x28
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009920:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009930:	601a      	str	r2, [r3, #0]
 8009932:	e115      	b.n	8009b60 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009938:	b29b      	uxth	r3, r3
 800993a:	2b01      	cmp	r3, #1
 800993c:	f040 808a 	bne.w	8009a54 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009942:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009946:	d137      	bne.n	80099b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009956:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009966:	d113      	bne.n	8009990 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009976:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009978:	2300      	movs	r3, #0
 800997a:	627b      	str	r3, [r7, #36]	; 0x24
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	627b      	str	r3, [r7, #36]	; 0x24
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	627b      	str	r3, [r7, #36]	; 0x24
 800998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998e:	e0e7      	b.n	8009b60 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009990:	2300      	movs	r3, #0
 8009992:	623b      	str	r3, [r7, #32]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	623b      	str	r3, [r7, #32]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	623b      	str	r3, [r7, #32]
 80099a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	e0d3      	b.n	8009b60 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	2b08      	cmp	r3, #8
 80099bc:	d02e      	beq.n	8009a1c <I2C_Master_ADDR+0x1b2>
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	2b20      	cmp	r3, #32
 80099c2:	d02b      	beq.n	8009a1c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80099c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c6:	2b12      	cmp	r3, #18
 80099c8:	d102      	bne.n	80099d0 <I2C_Master_ADDR+0x166>
 80099ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d125      	bne.n	8009a1c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80099d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	d00e      	beq.n	80099f4 <I2C_Master_ADDR+0x18a>
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d00b      	beq.n	80099f4 <I2C_Master_ADDR+0x18a>
 80099dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099de:	2b10      	cmp	r3, #16
 80099e0:	d008      	beq.n	80099f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	e007      	b.n	8009a04 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a02:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a04:	2300      	movs	r3, #0
 8009a06:	61fb      	str	r3, [r7, #28]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	61fb      	str	r3, [r7, #28]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	61fb      	str	r3, [r7, #28]
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	e0a1      	b.n	8009b60 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a2a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	61bb      	str	r3, [r7, #24]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	61bb      	str	r3, [r7, #24]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	61bb      	str	r3, [r7, #24]
 8009a40:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	e085      	b.n	8009b60 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d14d      	bne.n	8009afa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	2b04      	cmp	r3, #4
 8009a62:	d016      	beq.n	8009a92 <I2C_Master_ADDR+0x228>
 8009a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d013      	beq.n	8009a92 <I2C_Master_ADDR+0x228>
 8009a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6c:	2b10      	cmp	r3, #16
 8009a6e:	d010      	beq.n	8009a92 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a7e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	e007      	b.n	8009aa2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009aa0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ab0:	d117      	bne.n	8009ae2 <I2C_Master_ADDR+0x278>
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ab8:	d00b      	beq.n	8009ad2 <I2C_Master_ADDR+0x268>
 8009aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d008      	beq.n	8009ad2 <I2C_Master_ADDR+0x268>
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac2:	2b08      	cmp	r3, #8
 8009ac4:	d005      	beq.n	8009ad2 <I2C_Master_ADDR+0x268>
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac8:	2b10      	cmp	r3, #16
 8009aca:	d002      	beq.n	8009ad2 <I2C_Master_ADDR+0x268>
 8009acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ace:	2b20      	cmp	r3, #32
 8009ad0:	d107      	bne.n	8009ae2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ae0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	617b      	str	r3, [r7, #20]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	617b      	str	r3, [r7, #20]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	e032      	b.n	8009b60 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b08:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b18:	d117      	bne.n	8009b4a <I2C_Master_ADDR+0x2e0>
 8009b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b20:	d00b      	beq.n	8009b3a <I2C_Master_ADDR+0x2d0>
 8009b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d008      	beq.n	8009b3a <I2C_Master_ADDR+0x2d0>
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	2b08      	cmp	r3, #8
 8009b2c:	d005      	beq.n	8009b3a <I2C_Master_ADDR+0x2d0>
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b30:	2b10      	cmp	r3, #16
 8009b32:	d002      	beq.n	8009b3a <I2C_Master_ADDR+0x2d0>
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	2b20      	cmp	r3, #32
 8009b38:	d107      	bne.n	8009b4a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009b48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	613b      	str	r3, [r7, #16]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	695b      	ldr	r3, [r3, #20]
 8009b54:	613b      	str	r3, [r7, #16]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	613b      	str	r3, [r7, #16]
 8009b5e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009b66:	e00b      	b.n	8009b80 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
}
 8009b7e:	e7ff      	b.n	8009b80 <I2C_Master_ADDR+0x316>
 8009b80:	bf00      	nop
 8009b82:	3744      	adds	r7, #68	; 0x44
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d02b      	beq.n	8009bfe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	781a      	ldrb	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d114      	bne.n	8009bfe <I2C_SlaveTransmit_TXE+0x72>
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
 8009bd6:	2b29      	cmp	r3, #41	; 0x29
 8009bd8:	d111      	bne.n	8009bfe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009be8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2221      	movs	r2, #33	; 0x21
 8009bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2228      	movs	r2, #40	; 0x28
 8009bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f7ff f9f1 	bl	8008fe0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009bfe:	bf00      	nop
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d011      	beq.n	8009c3c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1c:	781a      	ldrb	r2, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	3b01      	subs	r3, #1
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d02c      	beq.n	8009cbc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	691a      	ldr	r2, [r3, #16]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6c:	b2d2      	uxtb	r2, r2
 8009c6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	3b01      	subs	r3, #1
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d114      	bne.n	8009cbc <I2C_SlaveReceive_RXNE+0x74>
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	2b2a      	cmp	r3, #42	; 0x2a
 8009c96:	d111      	bne.n	8009cbc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ca6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2222      	movs	r2, #34	; 0x22
 8009cac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2228      	movs	r2, #40	; 0x28
 8009cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7ff f99c 	bl	8008ff4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009cbc:	bf00      	nop
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d012      	beq.n	8009cfc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	691a      	ldr	r2, [r3, #16]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	b2d2      	uxtb	r2, r2
 8009ce2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce8:	1c5a      	adds	r2, r3, #1
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009d12:	2300      	movs	r3, #0
 8009d14:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009d22:	2b28      	cmp	r3, #40	; 0x28
 8009d24:	d127      	bne.n	8009d76 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d34:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	089b      	lsrs	r3, r3, #2
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009d42:	2301      	movs	r3, #1
 8009d44:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	09db      	lsrs	r3, r3, #7
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d103      	bne.n	8009d5a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	81bb      	strh	r3, [r7, #12]
 8009d58:	e002      	b.n	8009d60 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009d68:	89ba      	ldrh	r2, [r7, #12]
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff f94a 	bl	8009008 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009d74:	e00e      	b.n	8009d94 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d76:	2300      	movs	r3, #0
 8009d78:	60bb      	str	r3, [r7, #8]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	695b      	ldr	r3, [r3, #20]
 8009d80:	60bb      	str	r3, [r7, #8]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	60bb      	str	r3, [r7, #8]
 8009d8a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009d94:	bf00      	nop
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009daa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009dba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	60bb      	str	r3, [r7, #8]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	695b      	ldr	r3, [r3, #20]
 8009dc6:	60bb      	str	r3, [r7, #8]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f042 0201 	orr.w	r2, r2, #1
 8009dd6:	601a      	str	r2, [r3, #0]
 8009dd8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009de8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009df8:	d172      	bne.n	8009ee0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
 8009dfc:	2b22      	cmp	r3, #34	; 0x22
 8009dfe:	d002      	beq.n	8009e06 <I2C_Slave_STOPF+0x6a>
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	2b2a      	cmp	r3, #42	; 0x2a
 8009e04:	d135      	bne.n	8009e72 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d005      	beq.n	8009e2a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e22:	f043 0204 	orr.w	r2, r3, #4
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fd fc44 	bl	80076cc <HAL_DMA_GetState>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d049      	beq.n	8009ede <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4e:	4a69      	ldr	r2, [pc, #420]	; (8009ff4 <I2C_Slave_STOPF+0x258>)
 8009e50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fd fa8c 	bl	8007374 <HAL_DMA_Abort_IT>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d03d      	beq.n	8009ede <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009e70:	e035      	b.n	8009ede <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d005      	beq.n	8009e96 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8e:	f043 0204 	orr.w	r2, r3, #4
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	685a      	ldr	r2, [r3, #4]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ea4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fd fc0e 	bl	80076cc <HAL_DMA_GetState>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d014      	beq.n	8009ee0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eba:	4a4e      	ldr	r2, [pc, #312]	; (8009ff4 <I2C_Slave_STOPF+0x258>)
 8009ebc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fd fa56 	bl	8007374 <HAL_DMA_Abort_IT>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d008      	beq.n	8009ee0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009ed8:	4610      	mov	r0, r2
 8009eda:	4798      	blx	r3
 8009edc:	e000      	b.n	8009ee0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009ede:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d03e      	beq.n	8009f68 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	f003 0304 	and.w	r3, r3, #4
 8009ef4:	2b04      	cmp	r3, #4
 8009ef6:	d112      	bne.n	8009f1e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	691a      	ldr	r2, [r3, #16]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	b2d2      	uxtb	r2, r2
 8009f04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0a:	1c5a      	adds	r2, r3, #1
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	3b01      	subs	r3, #1
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f28:	2b40      	cmp	r3, #64	; 0x40
 8009f2a:	d112      	bne.n	8009f52 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	691a      	ldr	r2, [r3, #16]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	b2d2      	uxtb	r2, r2
 8009f38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d005      	beq.n	8009f68 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f60:	f043 0204 	orr.w	r2, r3, #4
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f8b3 	bl	800a0dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009f76:	e039      	b.n	8009fec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f7c:	d109      	bne.n	8009f92 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2228      	movs	r2, #40	; 0x28
 8009f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7ff f831 	bl	8008ff4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b28      	cmp	r3, #40	; 0x28
 8009f9c:	d111      	bne.n	8009fc2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a15      	ldr	r2, [pc, #84]	; (8009ff8 <I2C_Slave_STOPF+0x25c>)
 8009fa2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2220      	movs	r2, #32
 8009fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7ff f832 	bl	8009024 <HAL_I2C_ListenCpltCallback>
}
 8009fc0:	e014      	b.n	8009fec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc6:	2b22      	cmp	r3, #34	; 0x22
 8009fc8:	d002      	beq.n	8009fd0 <I2C_Slave_STOPF+0x234>
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
 8009fcc:	2b22      	cmp	r3, #34	; 0x22
 8009fce:	d10d      	bne.n	8009fec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2220      	movs	r2, #32
 8009fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7ff f804 	bl	8008ff4 <HAL_I2C_SlaveRxCpltCallback>
}
 8009fec:	bf00      	nop
 8009fee:	3710      	adds	r7, #16
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	0800a8dd 	.word	0x0800a8dd
 8009ff8:	ffff0000 	.word	0xffff0000

08009ffc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a00a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a010:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	2b08      	cmp	r3, #8
 800a016:	d002      	beq.n	800a01e <I2C_Slave_AF+0x22>
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	2b20      	cmp	r3, #32
 800a01c:	d129      	bne.n	800a072 <I2C_Slave_AF+0x76>
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
 800a020:	2b28      	cmp	r3, #40	; 0x28
 800a022:	d126      	bne.n	800a072 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a2c      	ldr	r2, [pc, #176]	; (800a0d8 <I2C_Slave_AF+0xdc>)
 800a028:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a038:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a042:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a052:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2220      	movs	r2, #32
 800a05e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7fe ffda 	bl	8009024 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800a070:	e02e      	b.n	800a0d0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a072:	7bfb      	ldrb	r3, [r7, #15]
 800a074:	2b21      	cmp	r3, #33	; 0x21
 800a076:	d126      	bne.n	800a0c6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a17      	ldr	r2, [pc, #92]	; (800a0d8 <I2C_Slave_AF+0xdc>)
 800a07c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2221      	movs	r2, #33	; 0x21
 800a082:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2220      	movs	r2, #32
 800a088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a0a2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a0ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0bc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f7fe ff8e 	bl	8008fe0 <HAL_I2C_SlaveTxCpltCallback>
}
 800a0c4:	e004      	b.n	800a0d0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a0ce:	615a      	str	r2, [r3, #20]
}
 800a0d0:	bf00      	nop
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	ffff0000 	.word	0xffff0000

0800a0dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a0f4:	7bbb      	ldrb	r3, [r7, #14]
 800a0f6:	2b10      	cmp	r3, #16
 800a0f8:	d002      	beq.n	800a100 <I2C_ITError+0x24>
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
 800a0fc:	2b40      	cmp	r3, #64	; 0x40
 800a0fe:	d10a      	bne.n	800a116 <I2C_ITError+0x3a>
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	2b22      	cmp	r3, #34	; 0x22
 800a104:	d107      	bne.n	800a116 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a114:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a116:	7bfb      	ldrb	r3, [r7, #15]
 800a118:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a11c:	2b28      	cmp	r3, #40	; 0x28
 800a11e:	d107      	bne.n	800a130 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2228      	movs	r2, #40	; 0x28
 800a12a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a12e:	e015      	b.n	800a15c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a13a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a13e:	d00a      	beq.n	800a156 <I2C_ITError+0x7a>
 800a140:	7bfb      	ldrb	r3, [r7, #15]
 800a142:	2b60      	cmp	r3, #96	; 0x60
 800a144:	d007      	beq.n	800a156 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2220      	movs	r2, #32
 800a14a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a16a:	d162      	bne.n	800a232 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	685a      	ldr	r2, [r3, #4]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a17a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b01      	cmp	r3, #1
 800a188:	d020      	beq.n	800a1cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a18e:	4a6a      	ldr	r2, [pc, #424]	; (800a338 <I2C_ITError+0x25c>)
 800a190:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a196:	4618      	mov	r0, r3
 800a198:	f7fd f8ec 	bl	8007374 <HAL_DMA_Abort_IT>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 8089 	beq.w	800a2b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f022 0201 	bic.w	r2, r2, #1
 800a1b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2220      	movs	r2, #32
 800a1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a1c6:	4610      	mov	r0, r2
 800a1c8:	4798      	blx	r3
 800a1ca:	e074      	b.n	800a2b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d0:	4a59      	ldr	r2, [pc, #356]	; (800a338 <I2C_ITError+0x25c>)
 800a1d2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7fd f8cb 	bl	8007374 <HAL_DMA_Abort_IT>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d068      	beq.n	800a2b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ee:	2b40      	cmp	r3, #64	; 0x40
 800a1f0:	d10b      	bne.n	800a20a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	691a      	ldr	r2, [r3, #16]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fc:	b2d2      	uxtb	r2, r2
 800a1fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a204:	1c5a      	adds	r2, r3, #1
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f022 0201 	bic.w	r2, r2, #1
 800a218:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2220      	movs	r2, #32
 800a21e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a22c:	4610      	mov	r0, r2
 800a22e:	4798      	blx	r3
 800a230:	e041      	b.n	800a2b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b60      	cmp	r3, #96	; 0x60
 800a23c:	d125      	bne.n	800a28a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2220      	movs	r2, #32
 800a242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a256:	2b40      	cmp	r3, #64	; 0x40
 800a258:	d10b      	bne.n	800a272 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	691a      	ldr	r2, [r3, #16]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a264:	b2d2      	uxtb	r2, r2
 800a266:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f022 0201 	bic.w	r2, r2, #1
 800a280:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7fe fef6 	bl	8009074 <HAL_I2C_AbortCpltCallback>
 800a288:	e015      	b.n	800a2b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	695b      	ldr	r3, [r3, #20]
 800a290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a294:	2b40      	cmp	r3, #64	; 0x40
 800a296:	d10b      	bne.n	800a2b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	691a      	ldr	r2, [r3, #16]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	b2d2      	uxtb	r2, r2
 800a2a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	1c5a      	adds	r2, r3, #1
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7fe fed5 	bl	8009060 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10e      	bne.n	800a2e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d109      	bne.n	800a2e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d104      	bne.n	800a2e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d007      	beq.n	800a2f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	685a      	ldr	r2, [r3, #4]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a2f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a300:	f003 0304 	and.w	r3, r3, #4
 800a304:	2b04      	cmp	r3, #4
 800a306:	d113      	bne.n	800a330 <I2C_ITError+0x254>
 800a308:	7bfb      	ldrb	r3, [r7, #15]
 800a30a:	2b28      	cmp	r3, #40	; 0x28
 800a30c:	d110      	bne.n	800a330 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a0a      	ldr	r2, [pc, #40]	; (800a33c <I2C_ITError+0x260>)
 800a312:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2220      	movs	r2, #32
 800a31e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7fe fe7a 	bl	8009024 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a330:	bf00      	nop
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	0800a8dd 	.word	0x0800a8dd
 800a33c:	ffff0000 	.word	0xffff0000

0800a340 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b088      	sub	sp, #32
 800a344:	af02      	add	r7, sp, #8
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	607a      	str	r2, [r7, #4]
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	460b      	mov	r3, r1
 800a34e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a354:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2b08      	cmp	r3, #8
 800a35a:	d006      	beq.n	800a36a <I2C_MasterRequestWrite+0x2a>
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d003      	beq.n	800a36a <I2C_MasterRequestWrite+0x2a>
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a368:	d108      	bne.n	800a37c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a378:	601a      	str	r2, [r3, #0]
 800a37a:	e00b      	b.n	800a394 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a380:	2b12      	cmp	r3, #18
 800a382:	d107      	bne.n	800a394 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a392:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f000 fb43 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00d      	beq.n	800a3c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3ba:	d103      	bne.n	800a3c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e035      	b.n	800a434 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3d0:	d108      	bne.n	800a3e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a3d2:	897b      	ldrh	r3, [r7, #10]
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a3e0:	611a      	str	r2, [r3, #16]
 800a3e2:	e01b      	b.n	800a41c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a3e4:	897b      	ldrh	r3, [r7, #10]
 800a3e6:	11db      	asrs	r3, r3, #7
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	f003 0306 	and.w	r3, r3, #6
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	f063 030f 	orn	r3, r3, #15
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	490e      	ldr	r1, [pc, #56]	; (800a43c <I2C_MasterRequestWrite+0xfc>)
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f000 fb69 	bl	800aada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e010      	b.n	800a434 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a412:	897b      	ldrh	r3, [r7, #10]
 800a414:	b2da      	uxtb	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	4907      	ldr	r1, [pc, #28]	; (800a440 <I2C_MasterRequestWrite+0x100>)
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f000 fb59 	bl	800aada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e000      	b.n	800a434 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	00010008 	.word	0x00010008
 800a440:	00010002 	.word	0x00010002

0800a444 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b088      	sub	sp, #32
 800a448:	af02      	add	r7, sp, #8
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	607a      	str	r2, [r7, #4]
 800a44e:	603b      	str	r3, [r7, #0]
 800a450:	460b      	mov	r3, r1
 800a452:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a458:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a468:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2b08      	cmp	r3, #8
 800a46e:	d006      	beq.n	800a47e <I2C_MasterRequestRead+0x3a>
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	2b01      	cmp	r3, #1
 800a474:	d003      	beq.n	800a47e <I2C_MasterRequestRead+0x3a>
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a47c:	d108      	bne.n	800a490 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	e00b      	b.n	800a4a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a494:	2b11      	cmp	r3, #17
 800a496:	d107      	bne.n	800a4a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 fab9 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00d      	beq.n	800a4dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ce:	d103      	bne.n	800a4d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e079      	b.n	800a5d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4e4:	d108      	bne.n	800a4f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a4e6:	897b      	ldrh	r3, [r7, #10]
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	f043 0301 	orr.w	r3, r3, #1
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	611a      	str	r2, [r3, #16]
 800a4f6:	e05f      	b.n	800a5b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a4f8:	897b      	ldrh	r3, [r7, #10]
 800a4fa:	11db      	asrs	r3, r3, #7
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	f003 0306 	and.w	r3, r3, #6
 800a502:	b2db      	uxtb	r3, r3
 800a504:	f063 030f 	orn	r3, r3, #15
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	4930      	ldr	r1, [pc, #192]	; (800a5d8 <I2C_MasterRequestRead+0x194>)
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 fadf 	bl	800aada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d001      	beq.n	800a526 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e054      	b.n	800a5d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a526:	897b      	ldrh	r3, [r7, #10]
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	4929      	ldr	r1, [pc, #164]	; (800a5dc <I2C_MasterRequestRead+0x198>)
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f000 facf 	bl	800aada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d001      	beq.n	800a546 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e044      	b.n	800a5d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a546:	2300      	movs	r3, #0
 800a548:	613b      	str	r3, [r7, #16]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	613b      	str	r3, [r7, #16]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	613b      	str	r3, [r7, #16]
 800a55a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a56a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 fa57 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00d      	beq.n	800a5a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a58e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a592:	d103      	bne.n	800a59c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a59a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a59c:	2303      	movs	r3, #3
 800a59e:	e017      	b.n	800a5d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a5a0:	897b      	ldrh	r3, [r7, #10]
 800a5a2:	11db      	asrs	r3, r3, #7
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	f003 0306 	and.w	r3, r3, #6
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	f063 030e 	orn	r3, r3, #14
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	4907      	ldr	r1, [pc, #28]	; (800a5dc <I2C_MasterRequestRead+0x198>)
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f000 fa8b 	bl	800aada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e000      	b.n	800a5d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	00010008 	.word	0x00010008
 800a5dc:	00010002 	.word	0x00010002

0800a5e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	4608      	mov	r0, r1
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	817b      	strh	r3, [r7, #10]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	813b      	strh	r3, [r7, #8]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a608:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	2200      	movs	r2, #0
 800a612:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f000 fa08 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00d      	beq.n	800a63e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a62c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a630:	d103      	bne.n	800a63a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a638:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a63a:	2303      	movs	r3, #3
 800a63c:	e05f      	b.n	800a6fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a63e:	897b      	ldrh	r3, [r7, #10]
 800a640:	b2db      	uxtb	r3, r3
 800a642:	461a      	mov	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a64c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a650:	6a3a      	ldr	r2, [r7, #32]
 800a652:	492d      	ldr	r1, [pc, #180]	; (800a708 <I2C_RequestMemoryWrite+0x128>)
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f000 fa40 	bl	800aada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e04c      	b.n	800a6fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a664:	2300      	movs	r3, #0
 800a666:	617b      	str	r3, [r7, #20]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	695b      	ldr	r3, [r3, #20]
 800a66e:	617b      	str	r3, [r7, #20]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	617b      	str	r3, [r7, #20]
 800a678:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a67a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a67c:	6a39      	ldr	r1, [r7, #32]
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 faaa 	bl	800abd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00d      	beq.n	800a6a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68e:	2b04      	cmp	r3, #4
 800a690:	d107      	bne.n	800a6a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e02b      	b.n	800a6fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a6a6:	88fb      	ldrh	r3, [r7, #6]
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d105      	bne.n	800a6b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a6ac:	893b      	ldrh	r3, [r7, #8]
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	611a      	str	r2, [r3, #16]
 800a6b6:	e021      	b.n	800a6fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a6b8:	893b      	ldrh	r3, [r7, #8]
 800a6ba:	0a1b      	lsrs	r3, r3, #8
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	b2da      	uxtb	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6c8:	6a39      	ldr	r1, [r7, #32]
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f000 fa84 	bl	800abd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00d      	beq.n	800a6f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6da:	2b04      	cmp	r3, #4
 800a6dc:	d107      	bne.n	800a6ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e005      	b.n	800a6fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a6f2:	893b      	ldrh	r3, [r7, #8]
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3718      	adds	r7, #24
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	00010002 	.word	0x00010002

0800a70c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af02      	add	r7, sp, #8
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	4608      	mov	r0, r1
 800a716:	4611      	mov	r1, r2
 800a718:	461a      	mov	r2, r3
 800a71a:	4603      	mov	r3, r0
 800a71c:	817b      	strh	r3, [r7, #10]
 800a71e:	460b      	mov	r3, r1
 800a720:	813b      	strh	r3, [r7, #8]
 800a722:	4613      	mov	r3, r2
 800a724:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a734:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a744:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f000 f96a 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00d      	beq.n	800a77a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a76c:	d103      	bne.n	800a776 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a774:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a776:	2303      	movs	r3, #3
 800a778:	e0aa      	b.n	800a8d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a77a:	897b      	ldrh	r3, [r7, #10]
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	461a      	mov	r2, r3
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a788:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	6a3a      	ldr	r2, [r7, #32]
 800a78e:	4952      	ldr	r1, [pc, #328]	; (800a8d8 <I2C_RequestMemoryRead+0x1cc>)
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f000 f9a2 	bl	800aada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e097      	b.n	800a8d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	617b      	str	r3, [r7, #20]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	695b      	ldr	r3, [r3, #20]
 800a7aa:	617b      	str	r3, [r7, #20]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	617b      	str	r3, [r7, #20]
 800a7b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b8:	6a39      	ldr	r1, [r7, #32]
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f000 fa0c 	bl	800abd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00d      	beq.n	800a7e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ca:	2b04      	cmp	r3, #4
 800a7cc:	d107      	bne.n	800a7de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e076      	b.n	800a8d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a7e2:	88fb      	ldrh	r3, [r7, #6]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d105      	bne.n	800a7f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a7e8:	893b      	ldrh	r3, [r7, #8]
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	611a      	str	r2, [r3, #16]
 800a7f2:	e021      	b.n	800a838 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a7f4:	893b      	ldrh	r3, [r7, #8]
 800a7f6:	0a1b      	lsrs	r3, r3, #8
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	b2da      	uxtb	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a804:	6a39      	ldr	r1, [r7, #32]
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f000 f9e6 	bl	800abd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00d      	beq.n	800a82e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a816:	2b04      	cmp	r3, #4
 800a818:	d107      	bne.n	800a82a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a828:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	e050      	b.n	800a8d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a82e:	893b      	ldrh	r3, [r7, #8]
 800a830:	b2da      	uxtb	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a83a:	6a39      	ldr	r1, [r7, #32]
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f000 f9cb 	bl	800abd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00d      	beq.n	800a864 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84c:	2b04      	cmp	r3, #4
 800a84e:	d107      	bne.n	800a860 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a85e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e035      	b.n	800a8d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a872:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	6a3b      	ldr	r3, [r7, #32]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 f8d3 	bl	800aa2c <I2C_WaitOnFlagUntilTimeout>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00d      	beq.n	800a8a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a89a:	d103      	bne.n	800a8a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e013      	b.n	800a8d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a8a8:	897b      	ldrh	r3, [r7, #10]
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	f043 0301 	orr.w	r3, r3, #1
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	6a3a      	ldr	r2, [r7, #32]
 800a8bc:	4906      	ldr	r1, [pc, #24]	; (800a8d8 <I2C_RequestMemoryRead+0x1cc>)
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f000 f90b 	bl	800aada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e000      	b.n	800a8d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3718      	adds	r7, #24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	00010002 	.word	0x00010002

0800a8dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8f4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a8f6:	4b4b      	ldr	r3, [pc, #300]	; (800aa24 <I2C_DMAAbort+0x148>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	08db      	lsrs	r3, r3, #3
 800a8fc:	4a4a      	ldr	r2, [pc, #296]	; (800aa28 <I2C_DMAAbort+0x14c>)
 800a8fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a902:	0a1a      	lsrs	r2, r3, #8
 800a904:	4613      	mov	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	00da      	lsls	r2, r3, #3
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d106      	bne.n	800a924 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91a:	f043 0220 	orr.w	r2, r3, #32
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800a922:	e00a      	b.n	800a93a <I2C_DMAAbort+0x5e>
    }
    count--;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	3b01      	subs	r3, #1
 800a928:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a938:	d0ea      	beq.n	800a910 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d003      	beq.n	800a94a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a946:	2200      	movs	r2, #0
 800a948:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d003      	beq.n	800a95a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a956:	2200      	movs	r2, #0
 800a958:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a968:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	2200      	movs	r2, #0
 800a96e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a974:	2b00      	cmp	r3, #0
 800a976:	d003      	beq.n	800a980 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97c:	2200      	movs	r2, #0
 800a97e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a984:	2b00      	cmp	r3, #0
 800a986:	d003      	beq.n	800a990 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98c:	2200      	movs	r2, #0
 800a98e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f022 0201 	bic.w	r2, r2, #1
 800a99e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b60      	cmp	r3, #96	; 0x60
 800a9aa:	d10e      	bne.n	800a9ca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	2220      	movs	r2, #32
 800a9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a9c2:	6978      	ldr	r0, [r7, #20]
 800a9c4:	f7fe fb56 	bl	8009074 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a9c8:	e027      	b.n	800aa1a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a9ca:	7cfb      	ldrb	r3, [r7, #19]
 800a9cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a9d0:	2b28      	cmp	r3, #40	; 0x28
 800a9d2:	d117      	bne.n	800aa04 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f042 0201 	orr.w	r2, r2, #1
 800a9e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a9f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	2228      	movs	r2, #40	; 0x28
 800a9fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800aa02:	e007      	b.n	800aa14 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	2220      	movs	r2, #32
 800aa08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800aa14:	6978      	ldr	r0, [r7, #20]
 800aa16:	f7fe fb23 	bl	8009060 <HAL_I2C_ErrorCallback>
}
 800aa1a:	bf00      	nop
 800aa1c:	3718      	adds	r7, #24
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	20000034 	.word	0x20000034
 800aa28:	14f8b589 	.word	0x14f8b589

0800aa2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	603b      	str	r3, [r7, #0]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa3c:	e025      	b.n	800aa8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa44:	d021      	beq.n	800aa8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa46:	f7fc f94f 	bl	8006ce8 <HAL_GetTick>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d302      	bcc.n	800aa5c <I2C_WaitOnFlagUntilTimeout+0x30>
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d116      	bne.n	800aa8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2220      	movs	r2, #32
 800aa66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa76:	f043 0220 	orr.w	r2, r3, #32
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e023      	b.n	800aad2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	0c1b      	lsrs	r3, r3, #16
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d10d      	bne.n	800aab0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	43da      	mvns	r2, r3
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	bf0c      	ite	eq
 800aaa6:	2301      	moveq	r3, #1
 800aaa8:	2300      	movne	r3, #0
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	461a      	mov	r2, r3
 800aaae:	e00c      	b.n	800aaca <I2C_WaitOnFlagUntilTimeout+0x9e>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	43da      	mvns	r2, r3
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	4013      	ands	r3, r2
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	bf0c      	ite	eq
 800aac2:	2301      	moveq	r3, #1
 800aac4:	2300      	movne	r3, #0
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	461a      	mov	r2, r3
 800aaca:	79fb      	ldrb	r3, [r7, #7]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d0b6      	beq.n	800aa3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b084      	sub	sp, #16
 800aade:	af00      	add	r7, sp, #0
 800aae0:	60f8      	str	r0, [r7, #12]
 800aae2:	60b9      	str	r1, [r7, #8]
 800aae4:	607a      	str	r2, [r7, #4]
 800aae6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aae8:	e051      	b.n	800ab8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	695b      	ldr	r3, [r3, #20]
 800aaf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaf8:	d123      	bne.n	800ab42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2220      	movs	r2, #32
 800ab1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2e:	f043 0204 	orr.w	r2, r3, #4
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e046      	b.n	800abd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab48:	d021      	beq.n	800ab8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab4a:	f7fc f8cd 	bl	8006ce8 <HAL_GetTick>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d302      	bcc.n	800ab60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d116      	bne.n	800ab8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2220      	movs	r2, #32
 800ab6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7a:	f043 0220 	orr.w	r2, r3, #32
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e020      	b.n	800abd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	0c1b      	lsrs	r3, r3, #16
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d10c      	bne.n	800abb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	695b      	ldr	r3, [r3, #20]
 800ab9e:	43da      	mvns	r2, r3
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	4013      	ands	r3, r2
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	bf14      	ite	ne
 800abaa:	2301      	movne	r3, #1
 800abac:	2300      	moveq	r3, #0
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	e00b      	b.n	800abca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	699b      	ldr	r3, [r3, #24]
 800abb8:	43da      	mvns	r2, r3
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	4013      	ands	r3, r2
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	bf14      	ite	ne
 800abc4:	2301      	movne	r3, #1
 800abc6:	2300      	moveq	r3, #0
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d18d      	bne.n	800aaea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abe4:	e02d      	b.n	800ac42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f000 f900 	bl	800adec <I2C_IsAcknowledgeFailed>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	e02d      	b.n	800ac52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abfc:	d021      	beq.n	800ac42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abfe:	f7fc f873 	bl	8006ce8 <HAL_GetTick>
 800ac02:	4602      	mov	r2, r0
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d302      	bcc.n	800ac14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d116      	bne.n	800ac42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2200      	movs	r2, #0
 800ac18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2220      	movs	r2, #32
 800ac1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2e:	f043 0220 	orr.w	r2, r3, #32
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e007      	b.n	800ac52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	695b      	ldr	r3, [r3, #20]
 800ac48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac4c:	2b80      	cmp	r3, #128	; 0x80
 800ac4e:	d1ca      	bne.n	800abe6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	60b9      	str	r1, [r7, #8]
 800ac64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac66:	e02d      	b.n	800acc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f000 f8bf 	bl	800adec <I2C_IsAcknowledgeFailed>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e02d      	b.n	800acd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7e:	d021      	beq.n	800acc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac80:	f7fc f832 	bl	8006ce8 <HAL_GetTick>
 800ac84:	4602      	mov	r2, r0
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d302      	bcc.n	800ac96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d116      	bne.n	800acc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb0:	f043 0220 	orr.w	r2, r3, #32
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	e007      	b.n	800acd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	695b      	ldr	r3, [r3, #20]
 800acca:	f003 0304 	and.w	r3, r3, #4
 800acce:	2b04      	cmp	r3, #4
 800acd0:	d1ca      	bne.n	800ac68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ace4:	2300      	movs	r3, #0
 800ace6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800ace8:	4b13      	ldr	r3, [pc, #76]	; (800ad38 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	08db      	lsrs	r3, r3, #3
 800acee:	4a13      	ldr	r2, [pc, #76]	; (800ad3c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800acf0:	fba2 2303 	umull	r2, r3, r2, r3
 800acf4:	0a1a      	lsrs	r2, r3, #8
 800acf6:	4613      	mov	r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d107      	bne.n	800ad1a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0e:	f043 0220 	orr.w	r2, r3, #32
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e008      	b.n	800ad2c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad28:	d0e9      	beq.n	800acfe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr
 800ad38:	20000034 	.word	0x20000034
 800ad3c:	14f8b589 	.word	0x14f8b589

0800ad40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad4c:	e042      	b.n	800add4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	695b      	ldr	r3, [r3, #20]
 800ad54:	f003 0310 	and.w	r3, r3, #16
 800ad58:	2b10      	cmp	r3, #16
 800ad5a:	d119      	bne.n	800ad90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f06f 0210 	mvn.w	r2, #16
 800ad64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2220      	movs	r2, #32
 800ad70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e029      	b.n	800ade4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad90:	f7fb ffaa 	bl	8006ce8 <HAL_GetTick>
 800ad94:	4602      	mov	r2, r0
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d302      	bcc.n	800ada6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d116      	bne.n	800add4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2220      	movs	r2, #32
 800adb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc0:	f043 0220 	orr.w	r2, r3, #32
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	e007      	b.n	800ade4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adde:	2b40      	cmp	r3, #64	; 0x40
 800ade0:	d1b5      	bne.n	800ad4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae02:	d11b      	bne.n	800ae3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ae0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2220      	movs	r2, #32
 800ae18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae28:	f043 0204 	orr.w	r2, r3, #4
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e000      	b.n	800ae3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b083      	sub	sp, #12
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae56:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ae5a:	d103      	bne.n	800ae64 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800ae62:	e007      	b.n	800ae74 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae68:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ae6c:	d102      	bne.n	800ae74 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2208      	movs	r2, #8
 800ae72:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ae74:	bf00      	nop
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d101      	bne.n	800ae92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e264      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 0301 	and.w	r3, r3, #1
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d075      	beq.n	800af8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ae9e:	4ba3      	ldr	r3, [pc, #652]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	f003 030c 	and.w	r3, r3, #12
 800aea6:	2b04      	cmp	r3, #4
 800aea8:	d00c      	beq.n	800aec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aeaa:	4ba0      	ldr	r3, [pc, #640]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aeb2:	2b08      	cmp	r3, #8
 800aeb4:	d112      	bne.n	800aedc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aeb6:	4b9d      	ldr	r3, [pc, #628]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aec2:	d10b      	bne.n	800aedc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aec4:	4b99      	ldr	r3, [pc, #612]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d05b      	beq.n	800af88 <HAL_RCC_OscConfig+0x108>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d157      	bne.n	800af88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e23f      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aee4:	d106      	bne.n	800aef4 <HAL_RCC_OscConfig+0x74>
 800aee6:	4b91      	ldr	r3, [pc, #580]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a90      	ldr	r2, [pc, #576]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800aeec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aef0:	6013      	str	r3, [r2, #0]
 800aef2:	e01d      	b.n	800af30 <HAL_RCC_OscConfig+0xb0>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aefc:	d10c      	bne.n	800af18 <HAL_RCC_OscConfig+0x98>
 800aefe:	4b8b      	ldr	r3, [pc, #556]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a8a      	ldr	r2, [pc, #552]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800af04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af08:	6013      	str	r3, [r2, #0]
 800af0a:	4b88      	ldr	r3, [pc, #544]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a87      	ldr	r2, [pc, #540]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800af10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	e00b      	b.n	800af30 <HAL_RCC_OscConfig+0xb0>
 800af18:	4b84      	ldr	r3, [pc, #528]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a83      	ldr	r2, [pc, #524]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800af1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	4b81      	ldr	r3, [pc, #516]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a80      	ldr	r2, [pc, #512]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800af2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d013      	beq.n	800af60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af38:	f7fb fed6 	bl	8006ce8 <HAL_GetTick>
 800af3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af3e:	e008      	b.n	800af52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af40:	f7fb fed2 	bl	8006ce8 <HAL_GetTick>
 800af44:	4602      	mov	r2, r0
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	1ad3      	subs	r3, r2, r3
 800af4a:	2b64      	cmp	r3, #100	; 0x64
 800af4c:	d901      	bls.n	800af52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800af4e:	2303      	movs	r3, #3
 800af50:	e204      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af52:	4b76      	ldr	r3, [pc, #472]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0f0      	beq.n	800af40 <HAL_RCC_OscConfig+0xc0>
 800af5e:	e014      	b.n	800af8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af60:	f7fb fec2 	bl	8006ce8 <HAL_GetTick>
 800af64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af66:	e008      	b.n	800af7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af68:	f7fb febe 	bl	8006ce8 <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	2b64      	cmp	r3, #100	; 0x64
 800af74:	d901      	bls.n	800af7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800af76:	2303      	movs	r3, #3
 800af78:	e1f0      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af7a:	4b6c      	ldr	r3, [pc, #432]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1f0      	bne.n	800af68 <HAL_RCC_OscConfig+0xe8>
 800af86:	e000      	b.n	800af8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0302 	and.w	r3, r3, #2
 800af92:	2b00      	cmp	r3, #0
 800af94:	d063      	beq.n	800b05e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800af96:	4b65      	ldr	r3, [pc, #404]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	f003 030c 	and.w	r3, r3, #12
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00b      	beq.n	800afba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800afa2:	4b62      	ldr	r3, [pc, #392]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800afaa:	2b08      	cmp	r3, #8
 800afac:	d11c      	bne.n	800afe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800afae:	4b5f      	ldr	r3, [pc, #380]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d116      	bne.n	800afe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800afba:	4b5c      	ldr	r3, [pc, #368]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f003 0302 	and.w	r3, r3, #2
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d005      	beq.n	800afd2 <HAL_RCC_OscConfig+0x152>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d001      	beq.n	800afd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e1c4      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afd2:	4b56      	ldr	r3, [pc, #344]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	00db      	lsls	r3, r3, #3
 800afe0:	4952      	ldr	r1, [pc, #328]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800afe2:	4313      	orrs	r3, r2
 800afe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800afe6:	e03a      	b.n	800b05e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d020      	beq.n	800b032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aff0:	4b4f      	ldr	r3, [pc, #316]	; (800b130 <HAL_RCC_OscConfig+0x2b0>)
 800aff2:	2201      	movs	r2, #1
 800aff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aff6:	f7fb fe77 	bl	8006ce8 <HAL_GetTick>
 800affa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800affc:	e008      	b.n	800b010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800affe:	f7fb fe73 	bl	8006ce8 <HAL_GetTick>
 800b002:	4602      	mov	r2, r0
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d901      	bls.n	800b010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b00c:	2303      	movs	r3, #3
 800b00e:	e1a5      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b010:	4b46      	ldr	r3, [pc, #280]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 0302 	and.w	r3, r3, #2
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d0f0      	beq.n	800affe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b01c:	4b43      	ldr	r3, [pc, #268]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	00db      	lsls	r3, r3, #3
 800b02a:	4940      	ldr	r1, [pc, #256]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800b02c:	4313      	orrs	r3, r2
 800b02e:	600b      	str	r3, [r1, #0]
 800b030:	e015      	b.n	800b05e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b032:	4b3f      	ldr	r3, [pc, #252]	; (800b130 <HAL_RCC_OscConfig+0x2b0>)
 800b034:	2200      	movs	r2, #0
 800b036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b038:	f7fb fe56 	bl	8006ce8 <HAL_GetTick>
 800b03c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b03e:	e008      	b.n	800b052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b040:	f7fb fe52 	bl	8006ce8 <HAL_GetTick>
 800b044:	4602      	mov	r2, r0
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d901      	bls.n	800b052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b04e:	2303      	movs	r3, #3
 800b050:	e184      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b052:	4b36      	ldr	r3, [pc, #216]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f003 0302 	and.w	r3, r3, #2
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d1f0      	bne.n	800b040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f003 0308 	and.w	r3, r3, #8
 800b066:	2b00      	cmp	r3, #0
 800b068:	d030      	beq.n	800b0cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d016      	beq.n	800b0a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b072:	4b30      	ldr	r3, [pc, #192]	; (800b134 <HAL_RCC_OscConfig+0x2b4>)
 800b074:	2201      	movs	r2, #1
 800b076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b078:	f7fb fe36 	bl	8006ce8 <HAL_GetTick>
 800b07c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b07e:	e008      	b.n	800b092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b080:	f7fb fe32 	bl	8006ce8 <HAL_GetTick>
 800b084:	4602      	mov	r2, r0
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d901      	bls.n	800b092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b08e:	2303      	movs	r3, #3
 800b090:	e164      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b092:	4b26      	ldr	r3, [pc, #152]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800b094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b096:	f003 0302 	and.w	r3, r3, #2
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d0f0      	beq.n	800b080 <HAL_RCC_OscConfig+0x200>
 800b09e:	e015      	b.n	800b0cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0a0:	4b24      	ldr	r3, [pc, #144]	; (800b134 <HAL_RCC_OscConfig+0x2b4>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0a6:	f7fb fe1f 	bl	8006ce8 <HAL_GetTick>
 800b0aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0ac:	e008      	b.n	800b0c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b0ae:	f7fb fe1b 	bl	8006ce8 <HAL_GetTick>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d901      	bls.n	800b0c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	e14d      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0c0:	4b1a      	ldr	r3, [pc, #104]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800b0c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0c4:	f003 0302 	and.w	r3, r3, #2
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d1f0      	bne.n	800b0ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f003 0304 	and.w	r3, r3, #4
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f000 80a0 	beq.w	800b21a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b0de:	4b13      	ldr	r3, [pc, #76]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10f      	bne.n	800b10a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	60bb      	str	r3, [r7, #8]
 800b0ee:	4b0f      	ldr	r3, [pc, #60]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800b0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f2:	4a0e      	ldr	r2, [pc, #56]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800b0f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0f8:	6413      	str	r3, [r2, #64]	; 0x40
 800b0fa:	4b0c      	ldr	r3, [pc, #48]	; (800b12c <HAL_RCC_OscConfig+0x2ac>)
 800b0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b102:	60bb      	str	r3, [r7, #8]
 800b104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b106:	2301      	movs	r3, #1
 800b108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b10a:	4b0b      	ldr	r3, [pc, #44]	; (800b138 <HAL_RCC_OscConfig+0x2b8>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b112:	2b00      	cmp	r3, #0
 800b114:	d121      	bne.n	800b15a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b116:	4b08      	ldr	r3, [pc, #32]	; (800b138 <HAL_RCC_OscConfig+0x2b8>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a07      	ldr	r2, [pc, #28]	; (800b138 <HAL_RCC_OscConfig+0x2b8>)
 800b11c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b122:	f7fb fde1 	bl	8006ce8 <HAL_GetTick>
 800b126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b128:	e011      	b.n	800b14e <HAL_RCC_OscConfig+0x2ce>
 800b12a:	bf00      	nop
 800b12c:	40023800 	.word	0x40023800
 800b130:	42470000 	.word	0x42470000
 800b134:	42470e80 	.word	0x42470e80
 800b138:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b13c:	f7fb fdd4 	bl	8006ce8 <HAL_GetTick>
 800b140:	4602      	mov	r2, r0
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	2b02      	cmp	r3, #2
 800b148:	d901      	bls.n	800b14e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b14a:	2303      	movs	r3, #3
 800b14c:	e106      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b14e:	4b85      	ldr	r3, [pc, #532]	; (800b364 <HAL_RCC_OscConfig+0x4e4>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b156:	2b00      	cmp	r3, #0
 800b158:	d0f0      	beq.n	800b13c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d106      	bne.n	800b170 <HAL_RCC_OscConfig+0x2f0>
 800b162:	4b81      	ldr	r3, [pc, #516]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b166:	4a80      	ldr	r2, [pc, #512]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b168:	f043 0301 	orr.w	r3, r3, #1
 800b16c:	6713      	str	r3, [r2, #112]	; 0x70
 800b16e:	e01c      	b.n	800b1aa <HAL_RCC_OscConfig+0x32a>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	2b05      	cmp	r3, #5
 800b176:	d10c      	bne.n	800b192 <HAL_RCC_OscConfig+0x312>
 800b178:	4b7b      	ldr	r3, [pc, #492]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b17a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b17c:	4a7a      	ldr	r2, [pc, #488]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b17e:	f043 0304 	orr.w	r3, r3, #4
 800b182:	6713      	str	r3, [r2, #112]	; 0x70
 800b184:	4b78      	ldr	r3, [pc, #480]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b188:	4a77      	ldr	r2, [pc, #476]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b18a:	f043 0301 	orr.w	r3, r3, #1
 800b18e:	6713      	str	r3, [r2, #112]	; 0x70
 800b190:	e00b      	b.n	800b1aa <HAL_RCC_OscConfig+0x32a>
 800b192:	4b75      	ldr	r3, [pc, #468]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b196:	4a74      	ldr	r2, [pc, #464]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b198:	f023 0301 	bic.w	r3, r3, #1
 800b19c:	6713      	str	r3, [r2, #112]	; 0x70
 800b19e:	4b72      	ldr	r3, [pc, #456]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1a2:	4a71      	ldr	r2, [pc, #452]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b1a4:	f023 0304 	bic.w	r3, r3, #4
 800b1a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d015      	beq.n	800b1de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1b2:	f7fb fd99 	bl	8006ce8 <HAL_GetTick>
 800b1b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1b8:	e00a      	b.n	800b1d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b1ba:	f7fb fd95 	bl	8006ce8 <HAL_GetTick>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	1ad3      	subs	r3, r2, r3
 800b1c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d901      	bls.n	800b1d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e0c5      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1d0:	4b65      	ldr	r3, [pc, #404]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d4:	f003 0302 	and.w	r3, r3, #2
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d0ee      	beq.n	800b1ba <HAL_RCC_OscConfig+0x33a>
 800b1dc:	e014      	b.n	800b208 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b1de:	f7fb fd83 	bl	8006ce8 <HAL_GetTick>
 800b1e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b1e4:	e00a      	b.n	800b1fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b1e6:	f7fb fd7f 	bl	8006ce8 <HAL_GetTick>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	1ad3      	subs	r3, r2, r3
 800b1f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d901      	bls.n	800b1fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	e0af      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b1fc:	4b5a      	ldr	r3, [pc, #360]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b200:	f003 0302 	and.w	r3, r3, #2
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1ee      	bne.n	800b1e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b208:	7dfb      	ldrb	r3, [r7, #23]
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d105      	bne.n	800b21a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b20e:	4b56      	ldr	r3, [pc, #344]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b212:	4a55      	ldr	r2, [pc, #340]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b218:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	699b      	ldr	r3, [r3, #24]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f000 809b 	beq.w	800b35a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b224:	4b50      	ldr	r3, [pc, #320]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	f003 030c 	and.w	r3, r3, #12
 800b22c:	2b08      	cmp	r3, #8
 800b22e:	d05c      	beq.n	800b2ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	699b      	ldr	r3, [r3, #24]
 800b234:	2b02      	cmp	r3, #2
 800b236:	d141      	bne.n	800b2bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b238:	4b4c      	ldr	r3, [pc, #304]	; (800b36c <HAL_RCC_OscConfig+0x4ec>)
 800b23a:	2200      	movs	r2, #0
 800b23c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b23e:	f7fb fd53 	bl	8006ce8 <HAL_GetTick>
 800b242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b244:	e008      	b.n	800b258 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b246:	f7fb fd4f 	bl	8006ce8 <HAL_GetTick>
 800b24a:	4602      	mov	r2, r0
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	2b02      	cmp	r3, #2
 800b252:	d901      	bls.n	800b258 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b254:	2303      	movs	r3, #3
 800b256:	e081      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b258:	4b43      	ldr	r3, [pc, #268]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1f0      	bne.n	800b246 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	69da      	ldr	r2, [r3, #28]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6a1b      	ldr	r3, [r3, #32]
 800b26c:	431a      	orrs	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b272:	019b      	lsls	r3, r3, #6
 800b274:	431a      	orrs	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b27a:	085b      	lsrs	r3, r3, #1
 800b27c:	3b01      	subs	r3, #1
 800b27e:	041b      	lsls	r3, r3, #16
 800b280:	431a      	orrs	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b286:	061b      	lsls	r3, r3, #24
 800b288:	4937      	ldr	r1, [pc, #220]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b28a:	4313      	orrs	r3, r2
 800b28c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b28e:	4b37      	ldr	r3, [pc, #220]	; (800b36c <HAL_RCC_OscConfig+0x4ec>)
 800b290:	2201      	movs	r2, #1
 800b292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b294:	f7fb fd28 	bl	8006ce8 <HAL_GetTick>
 800b298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b29a:	e008      	b.n	800b2ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b29c:	f7fb fd24 	bl	8006ce8 <HAL_GetTick>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d901      	bls.n	800b2ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	e056      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2ae:	4b2e      	ldr	r3, [pc, #184]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d0f0      	beq.n	800b29c <HAL_RCC_OscConfig+0x41c>
 800b2ba:	e04e      	b.n	800b35a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2bc:	4b2b      	ldr	r3, [pc, #172]	; (800b36c <HAL_RCC_OscConfig+0x4ec>)
 800b2be:	2200      	movs	r2, #0
 800b2c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2c2:	f7fb fd11 	bl	8006ce8 <HAL_GetTick>
 800b2c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2c8:	e008      	b.n	800b2dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b2ca:	f7fb fd0d 	bl	8006ce8 <HAL_GetTick>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	d901      	bls.n	800b2dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b2d8:	2303      	movs	r3, #3
 800b2da:	e03f      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2dc:	4b22      	ldr	r3, [pc, #136]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1f0      	bne.n	800b2ca <HAL_RCC_OscConfig+0x44a>
 800b2e8:	e037      	b.n	800b35a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	699b      	ldr	r3, [r3, #24]
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d101      	bne.n	800b2f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e032      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b2f6:	4b1c      	ldr	r3, [pc, #112]	; (800b368 <HAL_RCC_OscConfig+0x4e8>)
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	699b      	ldr	r3, [r3, #24]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d028      	beq.n	800b356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b30e:	429a      	cmp	r2, r3
 800b310:	d121      	bne.n	800b356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d11a      	bne.n	800b356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b326:	4013      	ands	r3, r2
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b32c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b32e:	4293      	cmp	r3, r2
 800b330:	d111      	bne.n	800b356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b33c:	085b      	lsrs	r3, r3, #1
 800b33e:	3b01      	subs	r3, #1
 800b340:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b342:	429a      	cmp	r2, r3
 800b344:	d107      	bne.n	800b356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b350:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b352:	429a      	cmp	r2, r3
 800b354:	d001      	beq.n	800b35a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	e000      	b.n	800b35c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3718      	adds	r7, #24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	40007000 	.word	0x40007000
 800b368:	40023800 	.word	0x40023800
 800b36c:	42470060 	.word	0x42470060

0800b370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d101      	bne.n	800b384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	e0cc      	b.n	800b51e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b384:	4b68      	ldr	r3, [pc, #416]	; (800b528 <HAL_RCC_ClockConfig+0x1b8>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 0307 	and.w	r3, r3, #7
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d90c      	bls.n	800b3ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b392:	4b65      	ldr	r3, [pc, #404]	; (800b528 <HAL_RCC_ClockConfig+0x1b8>)
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	b2d2      	uxtb	r2, r2
 800b398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b39a:	4b63      	ldr	r3, [pc, #396]	; (800b528 <HAL_RCC_ClockConfig+0x1b8>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f003 0307 	and.w	r3, r3, #7
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d001      	beq.n	800b3ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e0b8      	b.n	800b51e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 0302 	and.w	r3, r3, #2
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d020      	beq.n	800b3fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 0304 	and.w	r3, r3, #4
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d005      	beq.n	800b3d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b3c4:	4b59      	ldr	r3, [pc, #356]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	4a58      	ldr	r2, [pc, #352]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b3ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b3ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f003 0308 	and.w	r3, r3, #8
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d005      	beq.n	800b3e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b3dc:	4b53      	ldr	r3, [pc, #332]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	4a52      	ldr	r2, [pc, #328]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b3e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b3e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b3e8:	4b50      	ldr	r3, [pc, #320]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	494d      	ldr	r1, [pc, #308]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	2b00      	cmp	r3, #0
 800b404:	d044      	beq.n	800b490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d107      	bne.n	800b41e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b40e:	4b47      	ldr	r3, [pc, #284]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b416:	2b00      	cmp	r3, #0
 800b418:	d119      	bne.n	800b44e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e07f      	b.n	800b51e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	2b02      	cmp	r3, #2
 800b424:	d003      	beq.n	800b42e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b42a:	2b03      	cmp	r3, #3
 800b42c:	d107      	bne.n	800b43e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b42e:	4b3f      	ldr	r3, [pc, #252]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b436:	2b00      	cmp	r3, #0
 800b438:	d109      	bne.n	800b44e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e06f      	b.n	800b51e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b43e:	4b3b      	ldr	r3, [pc, #236]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 0302 	and.w	r3, r3, #2
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	e067      	b.n	800b51e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b44e:	4b37      	ldr	r3, [pc, #220]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	f023 0203 	bic.w	r2, r3, #3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	4934      	ldr	r1, [pc, #208]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b45c:	4313      	orrs	r3, r2
 800b45e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b460:	f7fb fc42 	bl	8006ce8 <HAL_GetTick>
 800b464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b466:	e00a      	b.n	800b47e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b468:	f7fb fc3e 	bl	8006ce8 <HAL_GetTick>
 800b46c:	4602      	mov	r2, r0
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	f241 3288 	movw	r2, #5000	; 0x1388
 800b476:	4293      	cmp	r3, r2
 800b478:	d901      	bls.n	800b47e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b47a:	2303      	movs	r3, #3
 800b47c:	e04f      	b.n	800b51e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b47e:	4b2b      	ldr	r3, [pc, #172]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	f003 020c 	and.w	r2, r3, #12
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d1eb      	bne.n	800b468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b490:	4b25      	ldr	r3, [pc, #148]	; (800b528 <HAL_RCC_ClockConfig+0x1b8>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f003 0307 	and.w	r3, r3, #7
 800b498:	683a      	ldr	r2, [r7, #0]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d20c      	bcs.n	800b4b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b49e:	4b22      	ldr	r3, [pc, #136]	; (800b528 <HAL_RCC_ClockConfig+0x1b8>)
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	b2d2      	uxtb	r2, r2
 800b4a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4a6:	4b20      	ldr	r3, [pc, #128]	; (800b528 <HAL_RCC_ClockConfig+0x1b8>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f003 0307 	and.w	r3, r3, #7
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d001      	beq.n	800b4b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e032      	b.n	800b51e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f003 0304 	and.w	r3, r3, #4
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d008      	beq.n	800b4d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b4c4:	4b19      	ldr	r3, [pc, #100]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	4916      	ldr	r1, [pc, #88]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f003 0308 	and.w	r3, r3, #8
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d009      	beq.n	800b4f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b4e2:	4b12      	ldr	r3, [pc, #72]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	00db      	lsls	r3, r3, #3
 800b4f0:	490e      	ldr	r1, [pc, #56]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b4f6:	f000 f821 	bl	800b53c <HAL_RCC_GetSysClockFreq>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	4b0b      	ldr	r3, [pc, #44]	; (800b52c <HAL_RCC_ClockConfig+0x1bc>)
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	091b      	lsrs	r3, r3, #4
 800b502:	f003 030f 	and.w	r3, r3, #15
 800b506:	490a      	ldr	r1, [pc, #40]	; (800b530 <HAL_RCC_ClockConfig+0x1c0>)
 800b508:	5ccb      	ldrb	r3, [r1, r3]
 800b50a:	fa22 f303 	lsr.w	r3, r2, r3
 800b50e:	4a09      	ldr	r2, [pc, #36]	; (800b534 <HAL_RCC_ClockConfig+0x1c4>)
 800b510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b512:	4b09      	ldr	r3, [pc, #36]	; (800b538 <HAL_RCC_ClockConfig+0x1c8>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4618      	mov	r0, r3
 800b518:	f7fb fba2 	bl	8006c60 <HAL_InitTick>

  return HAL_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	40023c00 	.word	0x40023c00
 800b52c:	40023800 	.word	0x40023800
 800b530:	0802581c 	.word	0x0802581c
 800b534:	20000034 	.word	0x20000034
 800b538:	20000038 	.word	0x20000038

0800b53c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b53c:	b5b0      	push	{r4, r5, r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b542:	2100      	movs	r1, #0
 800b544:	6079      	str	r1, [r7, #4]
 800b546:	2100      	movs	r1, #0
 800b548:	60f9      	str	r1, [r7, #12]
 800b54a:	2100      	movs	r1, #0
 800b54c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b54e:	2100      	movs	r1, #0
 800b550:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b552:	4952      	ldr	r1, [pc, #328]	; (800b69c <HAL_RCC_GetSysClockFreq+0x160>)
 800b554:	6889      	ldr	r1, [r1, #8]
 800b556:	f001 010c 	and.w	r1, r1, #12
 800b55a:	2908      	cmp	r1, #8
 800b55c:	d00d      	beq.n	800b57a <HAL_RCC_GetSysClockFreq+0x3e>
 800b55e:	2908      	cmp	r1, #8
 800b560:	f200 8094 	bhi.w	800b68c <HAL_RCC_GetSysClockFreq+0x150>
 800b564:	2900      	cmp	r1, #0
 800b566:	d002      	beq.n	800b56e <HAL_RCC_GetSysClockFreq+0x32>
 800b568:	2904      	cmp	r1, #4
 800b56a:	d003      	beq.n	800b574 <HAL_RCC_GetSysClockFreq+0x38>
 800b56c:	e08e      	b.n	800b68c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b56e:	4b4c      	ldr	r3, [pc, #304]	; (800b6a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800b570:	60bb      	str	r3, [r7, #8]
       break;
 800b572:	e08e      	b.n	800b692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b574:	4b4b      	ldr	r3, [pc, #300]	; (800b6a4 <HAL_RCC_GetSysClockFreq+0x168>)
 800b576:	60bb      	str	r3, [r7, #8]
      break;
 800b578:	e08b      	b.n	800b692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b57a:	4948      	ldr	r1, [pc, #288]	; (800b69c <HAL_RCC_GetSysClockFreq+0x160>)
 800b57c:	6849      	ldr	r1, [r1, #4]
 800b57e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b582:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b584:	4945      	ldr	r1, [pc, #276]	; (800b69c <HAL_RCC_GetSysClockFreq+0x160>)
 800b586:	6849      	ldr	r1, [r1, #4]
 800b588:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800b58c:	2900      	cmp	r1, #0
 800b58e:	d024      	beq.n	800b5da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b590:	4942      	ldr	r1, [pc, #264]	; (800b69c <HAL_RCC_GetSysClockFreq+0x160>)
 800b592:	6849      	ldr	r1, [r1, #4]
 800b594:	0989      	lsrs	r1, r1, #6
 800b596:	4608      	mov	r0, r1
 800b598:	f04f 0100 	mov.w	r1, #0
 800b59c:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b5a0:	f04f 0500 	mov.w	r5, #0
 800b5a4:	ea00 0204 	and.w	r2, r0, r4
 800b5a8:	ea01 0305 	and.w	r3, r1, r5
 800b5ac:	493d      	ldr	r1, [pc, #244]	; (800b6a4 <HAL_RCC_GetSysClockFreq+0x168>)
 800b5ae:	fb01 f003 	mul.w	r0, r1, r3
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	fb01 f102 	mul.w	r1, r1, r2
 800b5b8:	1844      	adds	r4, r0, r1
 800b5ba:	493a      	ldr	r1, [pc, #232]	; (800b6a4 <HAL_RCC_GetSysClockFreq+0x168>)
 800b5bc:	fba2 0101 	umull	r0, r1, r2, r1
 800b5c0:	1863      	adds	r3, r4, r1
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	f04f 0300 	mov.w	r3, #0
 800b5cc:	f7f5 fb74 	bl	8000cb8 <__aeabi_uldivmod>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	60fb      	str	r3, [r7, #12]
 800b5d8:	e04a      	b.n	800b670 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5da:	4b30      	ldr	r3, [pc, #192]	; (800b69c <HAL_RCC_GetSysClockFreq+0x160>)
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	099b      	lsrs	r3, r3, #6
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	f04f 0300 	mov.w	r3, #0
 800b5e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b5ea:	f04f 0100 	mov.w	r1, #0
 800b5ee:	ea02 0400 	and.w	r4, r2, r0
 800b5f2:	ea03 0501 	and.w	r5, r3, r1
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	f04f 0200 	mov.w	r2, #0
 800b5fe:	f04f 0300 	mov.w	r3, #0
 800b602:	014b      	lsls	r3, r1, #5
 800b604:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b608:	0142      	lsls	r2, r0, #5
 800b60a:	4610      	mov	r0, r2
 800b60c:	4619      	mov	r1, r3
 800b60e:	1b00      	subs	r0, r0, r4
 800b610:	eb61 0105 	sbc.w	r1, r1, r5
 800b614:	f04f 0200 	mov.w	r2, #0
 800b618:	f04f 0300 	mov.w	r3, #0
 800b61c:	018b      	lsls	r3, r1, #6
 800b61e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b622:	0182      	lsls	r2, r0, #6
 800b624:	1a12      	subs	r2, r2, r0
 800b626:	eb63 0301 	sbc.w	r3, r3, r1
 800b62a:	f04f 0000 	mov.w	r0, #0
 800b62e:	f04f 0100 	mov.w	r1, #0
 800b632:	00d9      	lsls	r1, r3, #3
 800b634:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b638:	00d0      	lsls	r0, r2, #3
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	1912      	adds	r2, r2, r4
 800b640:	eb45 0303 	adc.w	r3, r5, r3
 800b644:	f04f 0000 	mov.w	r0, #0
 800b648:	f04f 0100 	mov.w	r1, #0
 800b64c:	0299      	lsls	r1, r3, #10
 800b64e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b652:	0290      	lsls	r0, r2, #10
 800b654:	4602      	mov	r2, r0
 800b656:	460b      	mov	r3, r1
 800b658:	4610      	mov	r0, r2
 800b65a:	4619      	mov	r1, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	461a      	mov	r2, r3
 800b660:	f04f 0300 	mov.w	r3, #0
 800b664:	f7f5 fb28 	bl	8000cb8 <__aeabi_uldivmod>
 800b668:	4602      	mov	r2, r0
 800b66a:	460b      	mov	r3, r1
 800b66c:	4613      	mov	r3, r2
 800b66e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b670:	4b0a      	ldr	r3, [pc, #40]	; (800b69c <HAL_RCC_GetSysClockFreq+0x160>)
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	0c1b      	lsrs	r3, r3, #16
 800b676:	f003 0303 	and.w	r3, r3, #3
 800b67a:	3301      	adds	r3, #1
 800b67c:	005b      	lsls	r3, r3, #1
 800b67e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	fbb2 f3f3 	udiv	r3, r2, r3
 800b688:	60bb      	str	r3, [r7, #8]
      break;
 800b68a:	e002      	b.n	800b692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b68c:	4b04      	ldr	r3, [pc, #16]	; (800b6a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800b68e:	60bb      	str	r3, [r7, #8]
      break;
 800b690:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b692:	68bb      	ldr	r3, [r7, #8]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	bdb0      	pop	{r4, r5, r7, pc}
 800b69c:	40023800 	.word	0x40023800
 800b6a0:	00f42400 	.word	0x00f42400
 800b6a4:	017d7840 	.word	0x017d7840

0800b6a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b6ac:	4b03      	ldr	r3, [pc, #12]	; (800b6bc <HAL_RCC_GetHCLKFreq+0x14>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	20000034 	.word	0x20000034

0800b6c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b6c4:	f7ff fff0 	bl	800b6a8 <HAL_RCC_GetHCLKFreq>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	4b05      	ldr	r3, [pc, #20]	; (800b6e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	0a9b      	lsrs	r3, r3, #10
 800b6d0:	f003 0307 	and.w	r3, r3, #7
 800b6d4:	4903      	ldr	r1, [pc, #12]	; (800b6e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b6d6:	5ccb      	ldrb	r3, [r1, r3]
 800b6d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	40023800 	.word	0x40023800
 800b6e4:	0802582c 	.word	0x0802582c

0800b6e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b6ec:	f7ff ffdc 	bl	800b6a8 <HAL_RCC_GetHCLKFreq>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	4b05      	ldr	r3, [pc, #20]	; (800b708 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	0b5b      	lsrs	r3, r3, #13
 800b6f8:	f003 0307 	and.w	r3, r3, #7
 800b6fc:	4903      	ldr	r1, [pc, #12]	; (800b70c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b6fe:	5ccb      	ldrb	r3, [r1, r3]
 800b700:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b704:	4618      	mov	r0, r3
 800b706:	bd80      	pop	{r7, pc}
 800b708:	40023800 	.word	0x40023800
 800b70c:	0802582c 	.word	0x0802582c

0800b710 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d101      	bne.n	800b722 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	e07b      	b.n	800b81a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b726:	2b00      	cmp	r3, #0
 800b728:	d108      	bne.n	800b73c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b732:	d009      	beq.n	800b748 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	61da      	str	r2, [r3, #28]
 800b73a:	e005      	b.n	800b748 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b00      	cmp	r3, #0
 800b758:	d106      	bne.n	800b768 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7fa fd0a 	bl	800617c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2202      	movs	r2, #2
 800b76c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b77e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b790:	431a      	orrs	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b79a:	431a      	orrs	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	f003 0302 	and.w	r3, r3, #2
 800b7a4:	431a      	orrs	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	695b      	ldr	r3, [r3, #20]
 800b7aa:	f003 0301 	and.w	r3, r3, #1
 800b7ae:	431a      	orrs	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	69db      	ldr	r3, [r3, #28]
 800b7be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b7c2:	431a      	orrs	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6a1b      	ldr	r3, [r3, #32]
 800b7c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7cc:	ea42 0103 	orr.w	r1, r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	430a      	orrs	r2, r1
 800b7de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	0c1b      	lsrs	r3, r3, #16
 800b7e6:	f003 0104 	and.w	r1, r3, #4
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ee:	f003 0210 	and.w	r2, r3, #16
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	430a      	orrs	r2, r1
 800b7f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	69da      	ldr	r2, [r3, #28]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b808:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b08c      	sub	sp, #48	; 0x30
 800b826:	af00      	add	r7, sp, #0
 800b828:	60f8      	str	r0, [r7, #12]
 800b82a:	60b9      	str	r1, [r7, #8]
 800b82c:	607a      	str	r2, [r7, #4]
 800b82e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b830:	2301      	movs	r3, #1
 800b832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b834:	2300      	movs	r3, #0
 800b836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b840:	2b01      	cmp	r3, #1
 800b842:	d101      	bne.n	800b848 <HAL_SPI_TransmitReceive+0x26>
 800b844:	2302      	movs	r3, #2
 800b846:	e18a      	b.n	800bb5e <HAL_SPI_TransmitReceive+0x33c>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b850:	f7fb fa4a 	bl	8006ce8 <HAL_GetTick>
 800b854:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b85c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b866:	887b      	ldrh	r3, [r7, #2]
 800b868:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b86a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d00f      	beq.n	800b892 <HAL_SPI_TransmitReceive+0x70>
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b878:	d107      	bne.n	800b88a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d103      	bne.n	800b88a <HAL_SPI_TransmitReceive+0x68>
 800b882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b886:	2b04      	cmp	r3, #4
 800b888:	d003      	beq.n	800b892 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b88a:	2302      	movs	r3, #2
 800b88c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b890:	e15b      	b.n	800bb4a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d005      	beq.n	800b8a4 <HAL_SPI_TransmitReceive+0x82>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d002      	beq.n	800b8a4 <HAL_SPI_TransmitReceive+0x82>
 800b89e:	887b      	ldrh	r3, [r7, #2]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d103      	bne.n	800b8ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b8aa:	e14e      	b.n	800bb4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b04      	cmp	r3, #4
 800b8b6:	d003      	beq.n	800b8c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2205      	movs	r2, #5
 800b8bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	887a      	ldrh	r2, [r7, #2]
 800b8d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	887a      	ldrh	r2, [r7, #2]
 800b8d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	887a      	ldrh	r2, [r7, #2]
 800b8e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	887a      	ldrh	r2, [r7, #2]
 800b8e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b900:	2b40      	cmp	r3, #64	; 0x40
 800b902:	d007      	beq.n	800b914 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b912:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b91c:	d178      	bne.n	800ba10 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d002      	beq.n	800b92c <HAL_SPI_TransmitReceive+0x10a>
 800b926:	8b7b      	ldrh	r3, [r7, #26]
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d166      	bne.n	800b9fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b930:	881a      	ldrh	r2, [r3, #0]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b93c:	1c9a      	adds	r2, r3, #2
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b946:	b29b      	uxth	r3, r3
 800b948:	3b01      	subs	r3, #1
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b950:	e053      	b.n	800b9fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	f003 0302 	and.w	r3, r3, #2
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d11b      	bne.n	800b998 <HAL_SPI_TransmitReceive+0x176>
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b964:	b29b      	uxth	r3, r3
 800b966:	2b00      	cmp	r3, #0
 800b968:	d016      	beq.n	800b998 <HAL_SPI_TransmitReceive+0x176>
 800b96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d113      	bne.n	800b998 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b974:	881a      	ldrh	r2, [r3, #0]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b980:	1c9a      	adds	r2, r3, #2
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	3b01      	subs	r3, #1
 800b98e:	b29a      	uxth	r2, r3
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b994:	2300      	movs	r3, #0
 800b996:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	f003 0301 	and.w	r3, r3, #1
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d119      	bne.n	800b9da <HAL_SPI_TransmitReceive+0x1b8>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d014      	beq.n	800b9da <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68da      	ldr	r2, [r3, #12]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ba:	b292      	uxth	r2, r2
 800b9bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c2:	1c9a      	adds	r2, r3, #2
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b9da:	f7fb f985 	bl	8006ce8 <HAL_GetTick>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d807      	bhi.n	800b9fa <HAL_SPI_TransmitReceive+0x1d8>
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f0:	d003      	beq.n	800b9fa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b9f8:	e0a7      	b.n	800bb4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1a6      	bne.n	800b952 <HAL_SPI_TransmitReceive+0x130>
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1a1      	bne.n	800b952 <HAL_SPI_TransmitReceive+0x130>
 800ba0e:	e07c      	b.n	800bb0a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <HAL_SPI_TransmitReceive+0x1fc>
 800ba18:	8b7b      	ldrh	r3, [r7, #26]
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d16b      	bne.n	800baf6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	330c      	adds	r3, #12
 800ba28:	7812      	ldrb	r2, [r2, #0]
 800ba2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba30:	1c5a      	adds	r2, r3, #1
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba44:	e057      	b.n	800baf6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	f003 0302 	and.w	r3, r3, #2
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	d11c      	bne.n	800ba8e <HAL_SPI_TransmitReceive+0x26c>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d017      	beq.n	800ba8e <HAL_SPI_TransmitReceive+0x26c>
 800ba5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d114      	bne.n	800ba8e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	330c      	adds	r3, #12
 800ba6e:	7812      	ldrb	r2, [r2, #0]
 800ba70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba76:	1c5a      	adds	r2, r3, #1
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	3b01      	subs	r3, #1
 800ba84:	b29a      	uxth	r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	f003 0301 	and.w	r3, r3, #1
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d119      	bne.n	800bad0 <HAL_SPI_TransmitReceive+0x2ae>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d014      	beq.n	800bad0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68da      	ldr	r2, [r3, #12]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab0:	b2d2      	uxtb	r2, r2
 800bab2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	3b01      	subs	r3, #1
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bacc:	2301      	movs	r3, #1
 800bace:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bad0:	f7fb f90a 	bl	8006ce8 <HAL_GetTick>
 800bad4:	4602      	mov	r2, r0
 800bad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad8:	1ad3      	subs	r3, r2, r3
 800bada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800badc:	429a      	cmp	r2, r3
 800bade:	d803      	bhi.n	800bae8 <HAL_SPI_TransmitReceive+0x2c6>
 800bae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae6:	d102      	bne.n	800baee <HAL_SPI_TransmitReceive+0x2cc>
 800bae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baea:	2b00      	cmp	r3, #0
 800baec:	d103      	bne.n	800baf6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800baee:	2303      	movs	r3, #3
 800baf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800baf4:	e029      	b.n	800bb4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1a2      	bne.n	800ba46 <HAL_SPI_TransmitReceive+0x224>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d19d      	bne.n	800ba46 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f000 f9d0 	bl	800beb4 <SPI_EndRxTxTransaction>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d006      	beq.n	800bb28 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2220      	movs	r2, #32
 800bb24:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bb26:	e010      	b.n	800bb4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10b      	bne.n	800bb48 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb30:	2300      	movs	r3, #0
 800bb32:	617b      	str	r3, [r7, #20]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	617b      	str	r3, [r7, #20]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	617b      	str	r3, [r7, #20]
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	e000      	b.n	800bb4a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bb48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bb5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3730      	adds	r7, #48	; 0x30
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
	...

0800bb68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b088      	sub	sp, #32
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	099b      	lsrs	r3, r3, #6
 800bb84:	f003 0301 	and.w	r3, r3, #1
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10f      	bne.n	800bbac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00a      	beq.n	800bbac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	099b      	lsrs	r3, r3, #6
 800bb9a:	f003 0301 	and.w	r3, r3, #1
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d004      	beq.n	800bbac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	4798      	blx	r3
    return;
 800bbaa:	e0d7      	b.n	800bd5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bbac:	69bb      	ldr	r3, [r7, #24]
 800bbae:	085b      	lsrs	r3, r3, #1
 800bbb0:	f003 0301 	and.w	r3, r3, #1
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00a      	beq.n	800bbce <HAL_SPI_IRQHandler+0x66>
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	09db      	lsrs	r3, r3, #7
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d004      	beq.n	800bbce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	4798      	blx	r3
    return;
 800bbcc:	e0c6      	b.n	800bd5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	095b      	lsrs	r3, r3, #5
 800bbd2:	f003 0301 	and.w	r3, r3, #1
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10c      	bne.n	800bbf4 <HAL_SPI_IRQHandler+0x8c>
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	099b      	lsrs	r3, r3, #6
 800bbde:	f003 0301 	and.w	r3, r3, #1
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d106      	bne.n	800bbf4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	0a1b      	lsrs	r3, r3, #8
 800bbea:	f003 0301 	and.w	r3, r3, #1
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	f000 80b4 	beq.w	800bd5c <HAL_SPI_IRQHandler+0x1f4>
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	095b      	lsrs	r3, r3, #5
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f000 80ad 	beq.w	800bd5c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	099b      	lsrs	r3, r3, #6
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d023      	beq.n	800bc56 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	2b03      	cmp	r3, #3
 800bc18:	d011      	beq.n	800bc3e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc1e:	f043 0204 	orr.w	r2, r3, #4
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc26:	2300      	movs	r3, #0
 800bc28:	617b      	str	r3, [r7, #20]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	617b      	str	r3, [r7, #20]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	617b      	str	r3, [r7, #20]
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	e00b      	b.n	800bc56 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc3e:	2300      	movs	r3, #0
 800bc40:	613b      	str	r3, [r7, #16]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	613b      	str	r3, [r7, #16]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	613b      	str	r3, [r7, #16]
 800bc52:	693b      	ldr	r3, [r7, #16]
        return;
 800bc54:	e082      	b.n	800bd5c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bc56:	69bb      	ldr	r3, [r7, #24]
 800bc58:	095b      	lsrs	r3, r3, #5
 800bc5a:	f003 0301 	and.w	r3, r3, #1
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d014      	beq.n	800bc8c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc66:	f043 0201 	orr.w	r2, r3, #1
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	60fb      	str	r3, [r7, #12]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc88:	601a      	str	r2, [r3, #0]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	0a1b      	lsrs	r3, r3, #8
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00c      	beq.n	800bcb2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc9c:	f043 0208 	orr.w	r2, r3, #8
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bca4:	2300      	movs	r3, #0
 800bca6:	60bb      	str	r3, [r7, #8]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	60bb      	str	r3, [r7, #8]
 800bcb0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d04f      	beq.n	800bd5a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	685a      	ldr	r2, [r3, #4]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bcc8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2201      	movs	r2, #1
 800bcce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	f003 0302 	and.w	r3, r3, #2
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d104      	bne.n	800bce6 <HAL_SPI_IRQHandler+0x17e>
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	f003 0301 	and.w	r3, r3, #1
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d034      	beq.n	800bd50 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f022 0203 	bic.w	r2, r2, #3
 800bcf4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d011      	beq.n	800bd22 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd02:	4a18      	ldr	r2, [pc, #96]	; (800bd64 <HAL_SPI_IRQHandler+0x1fc>)
 800bd04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fb fb32 	bl	8007374 <HAL_DMA_Abort_IT>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d005      	beq.n	800bd22 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d016      	beq.n	800bd58 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd2e:	4a0d      	ldr	r2, [pc, #52]	; (800bd64 <HAL_SPI_IRQHandler+0x1fc>)
 800bd30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fb fb1c 	bl	8007374 <HAL_DMA_Abort_IT>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d00a      	beq.n	800bd58 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bd4e:	e003      	b.n	800bd58 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f809 	bl	800bd68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bd56:	e000      	b.n	800bd5a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bd58:	bf00      	nop
    return;
 800bd5a:	bf00      	nop
  }
}
 800bd5c:	3720      	adds	r7, #32
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	0800bd7d 	.word	0x0800bd7d

0800bd68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2200      	movs	r2, #0
 800bd94:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f7ff ffe6 	bl	800bd68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd9c:	bf00      	nop
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b088      	sub	sp, #32
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bdb4:	f7fa ff98 	bl	8006ce8 <HAL_GetTick>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbc:	1a9b      	subs	r3, r3, r2
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bdc4:	f7fa ff90 	bl	8006ce8 <HAL_GetTick>
 800bdc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bdca:	4b39      	ldr	r3, [pc, #228]	; (800beb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	015b      	lsls	r3, r3, #5
 800bdd0:	0d1b      	lsrs	r3, r3, #20
 800bdd2:	69fa      	ldr	r2, [r7, #28]
 800bdd4:	fb02 f303 	mul.w	r3, r2, r3
 800bdd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bdda:	e054      	b.n	800be86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde2:	d050      	beq.n	800be86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bde4:	f7fa ff80 	bl	8006ce8 <HAL_GetTick>
 800bde8:	4602      	mov	r2, r0
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	69fa      	ldr	r2, [r7, #28]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d902      	bls.n	800bdfa <SPI_WaitFlagStateUntilTimeout+0x56>
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d13d      	bne.n	800be76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	685a      	ldr	r2, [r3, #4]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800be08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be12:	d111      	bne.n	800be38 <SPI_WaitFlagStateUntilTimeout+0x94>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be1c:	d004      	beq.n	800be28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be26:	d107      	bne.n	800be38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be40:	d10f      	bne.n	800be62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be50:	601a      	str	r2, [r3, #0]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2201      	movs	r2, #1
 800be66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800be72:	2303      	movs	r3, #3
 800be74:	e017      	b.n	800bea6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d101      	bne.n	800be80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800be7c:	2300      	movs	r3, #0
 800be7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	3b01      	subs	r3, #1
 800be84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	689a      	ldr	r2, [r3, #8]
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	4013      	ands	r3, r2
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	429a      	cmp	r2, r3
 800be94:	bf0c      	ite	eq
 800be96:	2301      	moveq	r3, #1
 800be98:	2300      	movne	r3, #0
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	461a      	mov	r2, r3
 800be9e:	79fb      	ldrb	r3, [r7, #7]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d19b      	bne.n	800bddc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3720      	adds	r7, #32
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	20000034 	.word	0x20000034

0800beb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b088      	sub	sp, #32
 800beb8:	af02      	add	r7, sp, #8
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bec0:	4b1b      	ldr	r3, [pc, #108]	; (800bf30 <SPI_EndRxTxTransaction+0x7c>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a1b      	ldr	r2, [pc, #108]	; (800bf34 <SPI_EndRxTxTransaction+0x80>)
 800bec6:	fba2 2303 	umull	r2, r3, r2, r3
 800beca:	0d5b      	lsrs	r3, r3, #21
 800becc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bed0:	fb02 f303 	mul.w	r3, r2, r3
 800bed4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bede:	d112      	bne.n	800bf06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	2200      	movs	r2, #0
 800bee8:	2180      	movs	r1, #128	; 0x80
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f7ff ff5a 	bl	800bda4 <SPI_WaitFlagStateUntilTimeout>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d016      	beq.n	800bf24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befa:	f043 0220 	orr.w	r2, r3, #32
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bf02:	2303      	movs	r3, #3
 800bf04:	e00f      	b.n	800bf26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00a      	beq.n	800bf22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf1c:	2b80      	cmp	r3, #128	; 0x80
 800bf1e:	d0f2      	beq.n	800bf06 <SPI_EndRxTxTransaction+0x52>
 800bf20:	e000      	b.n	800bf24 <SPI_EndRxTxTransaction+0x70>
        break;
 800bf22:	bf00      	nop
  }

  return HAL_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	20000034 	.word	0x20000034
 800bf34:	165e9f81 	.word	0x165e9f81

0800bf38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	e041      	b.n	800bfce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d106      	bne.n	800bf64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f7fa fb76 	bl	8006650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2202      	movs	r2, #2
 800bf68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	3304      	adds	r3, #4
 800bf74:	4619      	mov	r1, r3
 800bf76:	4610      	mov	r0, r2
 800bf78:	f000 f9f0 	bl	800c35c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2201      	movs	r2, #1
 800bf88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
	...

0800bfd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d001      	beq.n	800bff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	e044      	b.n	800c07a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2202      	movs	r2, #2
 800bff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68da      	ldr	r2, [r3, #12]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f042 0201 	orr.w	r2, r2, #1
 800c006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a1e      	ldr	r2, [pc, #120]	; (800c088 <HAL_TIM_Base_Start_IT+0xb0>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d018      	beq.n	800c044 <HAL_TIM_Base_Start_IT+0x6c>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c01a:	d013      	beq.n	800c044 <HAL_TIM_Base_Start_IT+0x6c>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a1a      	ldr	r2, [pc, #104]	; (800c08c <HAL_TIM_Base_Start_IT+0xb4>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d00e      	beq.n	800c044 <HAL_TIM_Base_Start_IT+0x6c>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a19      	ldr	r2, [pc, #100]	; (800c090 <HAL_TIM_Base_Start_IT+0xb8>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d009      	beq.n	800c044 <HAL_TIM_Base_Start_IT+0x6c>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a17      	ldr	r2, [pc, #92]	; (800c094 <HAL_TIM_Base_Start_IT+0xbc>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d004      	beq.n	800c044 <HAL_TIM_Base_Start_IT+0x6c>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a16      	ldr	r2, [pc, #88]	; (800c098 <HAL_TIM_Base_Start_IT+0xc0>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d111      	bne.n	800c068 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	f003 0307 	and.w	r3, r3, #7
 800c04e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2b06      	cmp	r3, #6
 800c054:	d010      	beq.n	800c078 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f042 0201 	orr.w	r2, r2, #1
 800c064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c066:	e007      	b.n	800c078 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f042 0201 	orr.w	r2, r2, #1
 800c076:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop
 800c088:	40010000 	.word	0x40010000
 800c08c:	40000400 	.word	0x40000400
 800c090:	40000800 	.word	0x40000800
 800c094:	40000c00 	.word	0x40000c00
 800c098:	40014000 	.word	0x40014000

0800c09c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b083      	sub	sp, #12
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	68da      	ldr	r2, [r3, #12]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f022 0201 	bic.w	r2, r2, #1
 800c0b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	6a1a      	ldr	r2, [r3, #32]
 800c0ba:	f241 1311 	movw	r3, #4369	; 0x1111
 800c0be:	4013      	ands	r3, r2
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d10f      	bne.n	800c0e4 <HAL_TIM_Base_Stop_IT+0x48>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6a1a      	ldr	r2, [r3, #32]
 800c0ca:	f240 4344 	movw	r3, #1092	; 0x444
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d107      	bne.n	800c0e4 <HAL_TIM_Base_Stop_IT+0x48>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f022 0201 	bic.w	r2, r2, #1
 800c0e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	370c      	adds	r7, #12
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr

0800c0fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b082      	sub	sp, #8
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	691b      	ldr	r3, [r3, #16]
 800c108:	f003 0302 	and.w	r3, r3, #2
 800c10c:	2b02      	cmp	r3, #2
 800c10e:	d122      	bne.n	800c156 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	f003 0302 	and.w	r3, r3, #2
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d11b      	bne.n	800c156 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f06f 0202 	mvn.w	r2, #2
 800c126:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2201      	movs	r2, #1
 800c12c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	699b      	ldr	r3, [r3, #24]
 800c134:	f003 0303 	and.w	r3, r3, #3
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d003      	beq.n	800c144 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f8ee 	bl	800c31e <HAL_TIM_IC_CaptureCallback>
 800c142:	e005      	b.n	800c150 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 f8e0 	bl	800c30a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f8f1 	bl	800c332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	f003 0304 	and.w	r3, r3, #4
 800c160:	2b04      	cmp	r3, #4
 800c162:	d122      	bne.n	800c1aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	f003 0304 	and.w	r3, r3, #4
 800c16e:	2b04      	cmp	r3, #4
 800c170:	d11b      	bne.n	800c1aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f06f 0204 	mvn.w	r2, #4
 800c17a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2202      	movs	r2, #2
 800c180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	699b      	ldr	r3, [r3, #24]
 800c188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d003      	beq.n	800c198 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 f8c4 	bl	800c31e <HAL_TIM_IC_CaptureCallback>
 800c196:	e005      	b.n	800c1a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 f8b6 	bl	800c30a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f8c7 	bl	800c332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	f003 0308 	and.w	r3, r3, #8
 800c1b4:	2b08      	cmp	r3, #8
 800c1b6:	d122      	bne.n	800c1fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	f003 0308 	and.w	r3, r3, #8
 800c1c2:	2b08      	cmp	r3, #8
 800c1c4:	d11b      	bne.n	800c1fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f06f 0208 	mvn.w	r2, #8
 800c1ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2204      	movs	r2, #4
 800c1d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	69db      	ldr	r3, [r3, #28]
 800c1dc:	f003 0303 	and.w	r3, r3, #3
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d003      	beq.n	800c1ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 f89a 	bl	800c31e <HAL_TIM_IC_CaptureCallback>
 800c1ea:	e005      	b.n	800c1f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 f88c 	bl	800c30a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 f89d 	bl	800c332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	f003 0310 	and.w	r3, r3, #16
 800c208:	2b10      	cmp	r3, #16
 800c20a:	d122      	bne.n	800c252 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	f003 0310 	and.w	r3, r3, #16
 800c216:	2b10      	cmp	r3, #16
 800c218:	d11b      	bne.n	800c252 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f06f 0210 	mvn.w	r2, #16
 800c222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2208      	movs	r2, #8
 800c228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	69db      	ldr	r3, [r3, #28]
 800c230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c234:	2b00      	cmp	r3, #0
 800c236:	d003      	beq.n	800c240 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f870 	bl	800c31e <HAL_TIM_IC_CaptureCallback>
 800c23e:	e005      	b.n	800c24c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f862 	bl	800c30a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 f873 	bl	800c332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	f003 0301 	and.w	r3, r3, #1
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d10e      	bne.n	800c27e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d107      	bne.n	800c27e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f06f 0201 	mvn.w	r2, #1
 800c276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f7f8 f995 	bl	80045a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c288:	2b80      	cmp	r3, #128	; 0x80
 800c28a:	d10e      	bne.n	800c2aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c296:	2b80      	cmp	r3, #128	; 0x80
 800c298:	d107      	bne.n	800c2aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c2a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 f8e3 	bl	800c470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	691b      	ldr	r3, [r3, #16]
 800c2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2b4:	2b40      	cmp	r3, #64	; 0x40
 800c2b6:	d10e      	bne.n	800c2d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2c2:	2b40      	cmp	r3, #64	; 0x40
 800c2c4:	d107      	bne.n	800c2d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c2ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f838 	bl	800c346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	f003 0320 	and.w	r3, r3, #32
 800c2e0:	2b20      	cmp	r3, #32
 800c2e2:	d10e      	bne.n	800c302 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	f003 0320 	and.w	r3, r3, #32
 800c2ee:	2b20      	cmp	r3, #32
 800c2f0:	d107      	bne.n	800c302 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f06f 0220 	mvn.w	r2, #32
 800c2fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 f8ad 	bl	800c45c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c302:	bf00      	nop
 800c304:	3708      	adds	r7, #8
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c30a:	b480      	push	{r7}
 800c30c:	b083      	sub	sp, #12
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c312:	bf00      	nop
 800c314:	370c      	adds	r7, #12
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr

0800c31e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c31e:	b480      	push	{r7}
 800c320:	b083      	sub	sp, #12
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c326:	bf00      	nop
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr

0800c332 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c332:	b480      	push	{r7}
 800c334:	b083      	sub	sp, #12
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c33a:	bf00      	nop
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c346:	b480      	push	{r7}
 800c348:	b083      	sub	sp, #12
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c34e:	bf00      	nop
 800c350:	370c      	adds	r7, #12
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr
	...

0800c35c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a34      	ldr	r2, [pc, #208]	; (800c440 <TIM_Base_SetConfig+0xe4>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d00f      	beq.n	800c394 <TIM_Base_SetConfig+0x38>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c37a:	d00b      	beq.n	800c394 <TIM_Base_SetConfig+0x38>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a31      	ldr	r2, [pc, #196]	; (800c444 <TIM_Base_SetConfig+0xe8>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d007      	beq.n	800c394 <TIM_Base_SetConfig+0x38>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	4a30      	ldr	r2, [pc, #192]	; (800c448 <TIM_Base_SetConfig+0xec>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d003      	beq.n	800c394 <TIM_Base_SetConfig+0x38>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	4a2f      	ldr	r2, [pc, #188]	; (800c44c <TIM_Base_SetConfig+0xf0>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d108      	bne.n	800c3a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c39a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4a25      	ldr	r2, [pc, #148]	; (800c440 <TIM_Base_SetConfig+0xe4>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d01b      	beq.n	800c3e6 <TIM_Base_SetConfig+0x8a>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3b4:	d017      	beq.n	800c3e6 <TIM_Base_SetConfig+0x8a>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4a22      	ldr	r2, [pc, #136]	; (800c444 <TIM_Base_SetConfig+0xe8>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d013      	beq.n	800c3e6 <TIM_Base_SetConfig+0x8a>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4a21      	ldr	r2, [pc, #132]	; (800c448 <TIM_Base_SetConfig+0xec>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d00f      	beq.n	800c3e6 <TIM_Base_SetConfig+0x8a>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4a20      	ldr	r2, [pc, #128]	; (800c44c <TIM_Base_SetConfig+0xf0>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d00b      	beq.n	800c3e6 <TIM_Base_SetConfig+0x8a>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	4a1f      	ldr	r2, [pc, #124]	; (800c450 <TIM_Base_SetConfig+0xf4>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d007      	beq.n	800c3e6 <TIM_Base_SetConfig+0x8a>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	4a1e      	ldr	r2, [pc, #120]	; (800c454 <TIM_Base_SetConfig+0xf8>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d003      	beq.n	800c3e6 <TIM_Base_SetConfig+0x8a>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4a1d      	ldr	r2, [pc, #116]	; (800c458 <TIM_Base_SetConfig+0xfc>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d108      	bne.n	800c3f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	68fa      	ldr	r2, [r7, #12]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	695b      	ldr	r3, [r3, #20]
 800c402:	4313      	orrs	r3, r2
 800c404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	689a      	ldr	r2, [r3, #8]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a08      	ldr	r2, [pc, #32]	; (800c440 <TIM_Base_SetConfig+0xe4>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d103      	bne.n	800c42c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	691a      	ldr	r2, [r3, #16]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2201      	movs	r2, #1
 800c430:	615a      	str	r2, [r3, #20]
}
 800c432:	bf00      	nop
 800c434:	3714      	adds	r7, #20
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	40010000 	.word	0x40010000
 800c444:	40000400 	.word	0x40000400
 800c448:	40000800 	.word	0x40000800
 800c44c:	40000c00 	.word	0x40000c00
 800c450:	40014000 	.word	0x40014000
 800c454:	40014400 	.word	0x40014400
 800c458:	40014800 	.word	0x40014800

0800c45c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c464:	bf00      	nop
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c478:	bf00      	nop
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d101      	bne.n	800c496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c492:	2301      	movs	r3, #1
 800c494:	e03f      	b.n	800c516 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d106      	bne.n	800c4b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7fa fae0 	bl	8006a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2224      	movs	r2, #36	; 0x24
 800c4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68da      	ldr	r2, [r3, #12]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c4c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 ff53 	bl	800d374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	691a      	ldr	r2, [r3, #16]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c4dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	695a      	ldr	r2, [r3, #20]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c4ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68da      	ldr	r2, [r3, #12]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c4fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2220      	movs	r2, #32
 800c508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2220      	movs	r2, #32
 800c510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b08c      	sub	sp, #48	; 0x30
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	4613      	mov	r3, r2
 800c52c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c534:	b2db      	uxtb	r3, r3
 800c536:	2b20      	cmp	r3, #32
 800c538:	d165      	bne.n	800c606 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d002      	beq.n	800c546 <HAL_UART_Transmit_DMA+0x26>
 800c540:	88fb      	ldrh	r3, [r7, #6]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d101      	bne.n	800c54a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c546:	2301      	movs	r3, #1
 800c548:	e05e      	b.n	800c608 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c550:	2b01      	cmp	r3, #1
 800c552:	d101      	bne.n	800c558 <HAL_UART_Transmit_DMA+0x38>
 800c554:	2302      	movs	r3, #2
 800c556:	e057      	b.n	800c608 <HAL_UART_Transmit_DMA+0xe8>
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2201      	movs	r2, #1
 800c55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800c560:	68ba      	ldr	r2, [r7, #8]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	88fa      	ldrh	r2, [r7, #6]
 800c56a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	88fa      	ldrh	r2, [r7, #6]
 800c570:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2200      	movs	r2, #0
 800c576:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2221      	movs	r2, #33	; 0x21
 800c57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c584:	4a22      	ldr	r2, [pc, #136]	; (800c610 <HAL_UART_Transmit_DMA+0xf0>)
 800c586:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c58c:	4a21      	ldr	r2, [pc, #132]	; (800c614 <HAL_UART_Transmit_DMA+0xf4>)
 800c58e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c594:	4a20      	ldr	r2, [pc, #128]	; (800c618 <HAL_UART_Transmit_DMA+0xf8>)
 800c596:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c59c:	2200      	movs	r2, #0
 800c59e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800c5a0:	f107 0308 	add.w	r3, r7, #8
 800c5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ac:	6819      	ldr	r1, [r3, #0]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	3304      	adds	r3, #4
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	88fb      	ldrh	r3, [r7, #6]
 800c5b8:	f7fa fe14 	bl	80071e4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c5c4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3314      	adds	r3, #20
 800c5d4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	e853 3f00 	ldrex	r3, [r3]
 800c5dc:	617b      	str	r3, [r7, #20]
   return(result);
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3314      	adds	r3, #20
 800c5ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5ee:	627a      	str	r2, [r7, #36]	; 0x24
 800c5f0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f2:	6a39      	ldr	r1, [r7, #32]
 800c5f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5f6:	e841 2300 	strex	r3, r2, [r1]
 800c5fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1e5      	bne.n	800c5ce <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800c602:	2300      	movs	r3, #0
 800c604:	e000      	b.n	800c608 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800c606:	2302      	movs	r3, #2
  }
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3730      	adds	r7, #48	; 0x30
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	0800cc15 	.word	0x0800cc15
 800c614:	0800ccaf 	.word	0x0800ccaf
 800c618:	0800ce27 	.word	0x0800ce27

0800c61c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	4613      	mov	r3, r2
 800c628:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b20      	cmp	r3, #32
 800c634:	d11d      	bne.n	800c672 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d002      	beq.n	800c642 <HAL_UART_Receive_DMA+0x26>
 800c63c:	88fb      	ldrh	r3, [r7, #6]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d101      	bne.n	800c646 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	e016      	b.n	800c674 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d101      	bne.n	800c654 <HAL_UART_Receive_DMA+0x38>
 800c650:	2302      	movs	r3, #2
 800c652:	e00f      	b.n	800c674 <HAL_UART_Receive_DMA+0x58>
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c662:	88fb      	ldrh	r3, [r7, #6]
 800c664:	461a      	mov	r2, r3
 800c666:	68b9      	ldr	r1, [r7, #8]
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f000 fc27 	bl	800cebc <UART_Start_Receive_DMA>
 800c66e:	4603      	mov	r3, r0
 800c670:	e000      	b.n	800c674 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c672:	2302      	movs	r3, #2
  }
}
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b0ba      	sub	sp, #232	; 0xe8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	695b      	ldr	r3, [r3, #20]
 800c69e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6b2:	f003 030f 	and.w	r3, r3, #15
 800c6b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c6ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d10f      	bne.n	800c6e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c6c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6c6:	f003 0320 	and.w	r3, r3, #32
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d009      	beq.n	800c6e2 <HAL_UART_IRQHandler+0x66>
 800c6ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6d2:	f003 0320 	and.w	r3, r3, #32
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d003      	beq.n	800c6e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 fd8f 	bl	800d1fe <UART_Receive_IT>
      return;
 800c6e0:	e256      	b.n	800cb90 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c6e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f000 80de 	beq.w	800c8a8 <HAL_UART_IRQHandler+0x22c>
 800c6ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6f0:	f003 0301 	and.w	r3, r3, #1
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d106      	bne.n	800c706 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c6f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c700:	2b00      	cmp	r3, #0
 800c702:	f000 80d1 	beq.w	800c8a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c70a:	f003 0301 	and.w	r3, r3, #1
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00b      	beq.n	800c72a <HAL_UART_IRQHandler+0xae>
 800c712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d005      	beq.n	800c72a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c722:	f043 0201 	orr.w	r2, r3, #1
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c72a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c72e:	f003 0304 	and.w	r3, r3, #4
 800c732:	2b00      	cmp	r3, #0
 800c734:	d00b      	beq.n	800c74e <HAL_UART_IRQHandler+0xd2>
 800c736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c73a:	f003 0301 	and.w	r3, r3, #1
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d005      	beq.n	800c74e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c746:	f043 0202 	orr.w	r2, r3, #2
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c74e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c752:	f003 0302 	and.w	r3, r3, #2
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00b      	beq.n	800c772 <HAL_UART_IRQHandler+0xf6>
 800c75a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c75e:	f003 0301 	and.w	r3, r3, #1
 800c762:	2b00      	cmp	r3, #0
 800c764:	d005      	beq.n	800c772 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76a:	f043 0204 	orr.w	r2, r3, #4
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c776:	f003 0308 	and.w	r3, r3, #8
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d011      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x126>
 800c77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c782:	f003 0320 	and.w	r3, r3, #32
 800c786:	2b00      	cmp	r3, #0
 800c788:	d105      	bne.n	800c796 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c78a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c78e:	f003 0301 	and.w	r3, r3, #1
 800c792:	2b00      	cmp	r3, #0
 800c794:	d005      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c79a:	f043 0208 	orr.w	r2, r3, #8
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f000 81ed 	beq.w	800cb86 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c7ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7b0:	f003 0320 	and.w	r3, r3, #32
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d008      	beq.n	800c7ca <HAL_UART_IRQHandler+0x14e>
 800c7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7bc:	f003 0320 	and.w	r3, r3, #32
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d002      	beq.n	800c7ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 fd1a 	bl	800d1fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	695b      	ldr	r3, [r3, #20]
 800c7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7d4:	2b40      	cmp	r3, #64	; 0x40
 800c7d6:	bf0c      	ite	eq
 800c7d8:	2301      	moveq	r3, #1
 800c7da:	2300      	movne	r3, #0
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e6:	f003 0308 	and.w	r3, r3, #8
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d103      	bne.n	800c7f6 <HAL_UART_IRQHandler+0x17a>
 800c7ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d04f      	beq.n	800c896 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fc22 	bl	800d040 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	695b      	ldr	r3, [r3, #20]
 800c802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c806:	2b40      	cmp	r3, #64	; 0x40
 800c808:	d141      	bne.n	800c88e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	3314      	adds	r3, #20
 800c810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c814:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c818:	e853 3f00 	ldrex	r3, [r3]
 800c81c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	3314      	adds	r3, #20
 800c832:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c836:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c83a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c846:	e841 2300 	strex	r3, r2, [r1]
 800c84a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c84e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1d9      	bne.n	800c80a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d013      	beq.n	800c886 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c862:	4a7d      	ldr	r2, [pc, #500]	; (800ca58 <HAL_UART_IRQHandler+0x3dc>)
 800c864:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7fa fd82 	bl	8007374 <HAL_DMA_Abort_IT>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d016      	beq.n	800c8a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c880:	4610      	mov	r0, r2
 800c882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c884:	e00e      	b.n	800c8a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 f9ae 	bl	800cbe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c88c:	e00a      	b.n	800c8a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f9aa 	bl	800cbe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c894:	e006      	b.n	800c8a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f9a6 	bl	800cbe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c8a2:	e170      	b.n	800cb86 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8a4:	bf00      	nop
    return;
 800c8a6:	e16e      	b.n	800cb86 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	f040 814a 	bne.w	800cb46 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c8b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8b6:	f003 0310 	and.w	r3, r3, #16
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	f000 8143 	beq.w	800cb46 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c8c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8c4:	f003 0310 	and.w	r3, r3, #16
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	f000 813c 	beq.w	800cb46 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	60bb      	str	r3, [r7, #8]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	60bb      	str	r3, [r7, #8]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	60bb      	str	r3, [r7, #8]
 800c8e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	695b      	ldr	r3, [r3, #20]
 800c8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8ee:	2b40      	cmp	r3, #64	; 0x40
 800c8f0:	f040 80b4 	bne.w	800ca5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c900:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c904:	2b00      	cmp	r3, #0
 800c906:	f000 8140 	beq.w	800cb8a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c90e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c912:	429a      	cmp	r2, r3
 800c914:	f080 8139 	bcs.w	800cb8a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c91e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c924:	69db      	ldr	r3, [r3, #28]
 800c926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c92a:	f000 8088 	beq.w	800ca3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	330c      	adds	r3, #12
 800c934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c938:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c93c:	e853 3f00 	ldrex	r3, [r3]
 800c940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c944:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c94c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	330c      	adds	r3, #12
 800c956:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c95a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c95e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c962:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c966:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c96a:	e841 2300 	strex	r3, r2, [r1]
 800c96e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c972:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1d9      	bne.n	800c92e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	3314      	adds	r3, #20
 800c980:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c984:	e853 3f00 	ldrex	r3, [r3]
 800c988:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c98a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c98c:	f023 0301 	bic.w	r3, r3, #1
 800c990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	3314      	adds	r3, #20
 800c99a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c99e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c9a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c9a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c9aa:	e841 2300 	strex	r3, r2, [r1]
 800c9ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c9b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d1e1      	bne.n	800c97a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	3314      	adds	r3, #20
 800c9bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9c0:	e853 3f00 	ldrex	r3, [r3]
 800c9c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c9c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	3314      	adds	r3, #20
 800c9d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c9da:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c9dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c9e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c9e2:	e841 2300 	strex	r3, r2, [r1]
 800c9e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c9e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1e3      	bne.n	800c9b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2220      	movs	r2, #32
 800c9f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	330c      	adds	r3, #12
 800ca02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca06:	e853 3f00 	ldrex	r3, [r3]
 800ca0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ca0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca0e:	f023 0310 	bic.w	r3, r3, #16
 800ca12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	330c      	adds	r3, #12
 800ca1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ca20:	65ba      	str	r2, [r7, #88]	; 0x58
 800ca22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca28:	e841 2300 	strex	r3, r2, [r1]
 800ca2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d1e3      	bne.n	800c9fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7fa fc2b 	bl	8007294 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f8d4 	bl	800cbfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ca54:	e099      	b.n	800cb8a <HAL_UART_IRQHandler+0x50e>
 800ca56:	bf00      	nop
 800ca58:	0800d107 	.word	0x0800d107
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	1ad3      	subs	r3, r2, r3
 800ca68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f000 808b 	beq.w	800cb8e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ca78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f000 8086 	beq.w	800cb8e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	330c      	adds	r3, #12
 800ca88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8c:	e853 3f00 	ldrex	r3, [r3]
 800ca90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	330c      	adds	r3, #12
 800caa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800caa6:	647a      	str	r2, [r7, #68]	; 0x44
 800caa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800caac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800caae:	e841 2300 	strex	r3, r2, [r1]
 800cab2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d1e3      	bne.n	800ca82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	3314      	adds	r3, #20
 800cac0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac4:	e853 3f00 	ldrex	r3, [r3]
 800cac8:	623b      	str	r3, [r7, #32]
   return(result);
 800caca:	6a3b      	ldr	r3, [r7, #32]
 800cacc:	f023 0301 	bic.w	r3, r3, #1
 800cad0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	3314      	adds	r3, #20
 800cada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cade:	633a      	str	r2, [r7, #48]	; 0x30
 800cae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cae6:	e841 2300 	strex	r3, r2, [r1]
 800caea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1e3      	bne.n	800caba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2220      	movs	r2, #32
 800caf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	330c      	adds	r3, #12
 800cb06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	e853 3f00 	ldrex	r3, [r3]
 800cb0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f023 0310 	bic.w	r3, r3, #16
 800cb16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	330c      	adds	r3, #12
 800cb20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cb24:	61fa      	str	r2, [r7, #28]
 800cb26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb28:	69b9      	ldr	r1, [r7, #24]
 800cb2a:	69fa      	ldr	r2, [r7, #28]
 800cb2c:	e841 2300 	strex	r3, r2, [r1]
 800cb30:	617b      	str	r3, [r7, #20]
   return(result);
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1e3      	bne.n	800cb00 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cb38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f85c 	bl	800cbfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cb44:	e023      	b.n	800cb8e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cb46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d009      	beq.n	800cb66 <HAL_UART_IRQHandler+0x4ea>
 800cb52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d003      	beq.n	800cb66 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 fae5 	bl	800d12e <UART_Transmit_IT>
    return;
 800cb64:	e014      	b.n	800cb90 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cb66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d00e      	beq.n	800cb90 <HAL_UART_IRQHandler+0x514>
 800cb72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d008      	beq.n	800cb90 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 fb25 	bl	800d1ce <UART_EndTransmit_IT>
    return;
 800cb84:	e004      	b.n	800cb90 <HAL_UART_IRQHandler+0x514>
    return;
 800cb86:	bf00      	nop
 800cb88:	e002      	b.n	800cb90 <HAL_UART_IRQHandler+0x514>
      return;
 800cb8a:	bf00      	nop
 800cb8c:	e000      	b.n	800cb90 <HAL_UART_IRQHandler+0x514>
      return;
 800cb8e:	bf00      	nop
  }
}
 800cb90:	37e8      	adds	r7, #232	; 0xe8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop

0800cb98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cba0:	bf00      	nop
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800cbb4:	bf00      	nop
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cbc8:	bf00      	nop
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cbdc:	bf00      	nop
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cbf0:	bf00      	nop
 800cbf2:	370c      	adds	r7, #12
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b083      	sub	sp, #12
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	460b      	mov	r3, r1
 800cc06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cc08:	bf00      	nop
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b090      	sub	sp, #64	; 0x40
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc20:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d137      	bne.n	800cca0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800cc30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc32:	2200      	movs	r2, #0
 800cc34:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cc36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	3314      	adds	r3, #20
 800cc3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc40:	e853 3f00 	ldrex	r3, [r3]
 800cc44:	623b      	str	r3, [r7, #32]
   return(result);
 800cc46:	6a3b      	ldr	r3, [r7, #32]
 800cc48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc4c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	3314      	adds	r3, #20
 800cc54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc56:	633a      	str	r2, [r7, #48]	; 0x30
 800cc58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc5e:	e841 2300 	strex	r3, r2, [r1]
 800cc62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1e5      	bne.n	800cc36 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cc6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	330c      	adds	r3, #12
 800cc70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	e853 3f00 	ldrex	r3, [r3]
 800cc78:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc80:	637b      	str	r3, [r7, #52]	; 0x34
 800cc82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	330c      	adds	r3, #12
 800cc88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc8a:	61fa      	str	r2, [r7, #28]
 800cc8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc8e:	69b9      	ldr	r1, [r7, #24]
 800cc90:	69fa      	ldr	r2, [r7, #28]
 800cc92:	e841 2300 	strex	r3, r2, [r1]
 800cc96:	617b      	str	r3, [r7, #20]
   return(result);
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1e5      	bne.n	800cc6a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc9e:	e002      	b.n	800cca6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800cca0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cca2:	f7ff ff79 	bl	800cb98 <HAL_UART_TxCpltCallback>
}
 800cca6:	bf00      	nop
 800cca8:	3740      	adds	r7, #64	; 0x40
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ccae:	b580      	push	{r7, lr}
 800ccb0:	b084      	sub	sp, #16
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f7ff ff75 	bl	800cbac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccc2:	bf00      	nop
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b09c      	sub	sp, #112	; 0x70
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d172      	bne.n	800cdcc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800cce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cce8:	2200      	movs	r2, #0
 800ccea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ccec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	330c      	adds	r3, #12
 800ccf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccf6:	e853 3f00 	ldrex	r3, [r3]
 800ccfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ccfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd02:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	330c      	adds	r3, #12
 800cd0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd0c:	65ba      	str	r2, [r7, #88]	; 0x58
 800cd0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd14:	e841 2300 	strex	r3, r2, [r1]
 800cd18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cd1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1e5      	bne.n	800ccec <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	3314      	adds	r3, #20
 800cd26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2a:	e853 3f00 	ldrex	r3, [r3]
 800cd2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cd30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd32:	f023 0301 	bic.w	r3, r3, #1
 800cd36:	667b      	str	r3, [r7, #100]	; 0x64
 800cd38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	3314      	adds	r3, #20
 800cd3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cd40:	647a      	str	r2, [r7, #68]	; 0x44
 800cd42:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd48:	e841 2300 	strex	r3, r2, [r1]
 800cd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d1e5      	bne.n	800cd20 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	3314      	adds	r3, #20
 800cd5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5e:	e853 3f00 	ldrex	r3, [r3]
 800cd62:	623b      	str	r3, [r7, #32]
   return(result);
 800cd64:	6a3b      	ldr	r3, [r7, #32]
 800cd66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd6a:	663b      	str	r3, [r7, #96]	; 0x60
 800cd6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	3314      	adds	r3, #20
 800cd72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd74:	633a      	str	r2, [r7, #48]	; 0x30
 800cd76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd7c:	e841 2300 	strex	r3, r2, [r1]
 800cd80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1e5      	bne.n	800cd54 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cd88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd8a:	2220      	movs	r2, #32
 800cd8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d119      	bne.n	800cdcc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	330c      	adds	r3, #12
 800cd9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	e853 3f00 	ldrex	r3, [r3]
 800cda6:	60fb      	str	r3, [r7, #12]
   return(result);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f023 0310 	bic.w	r3, r3, #16
 800cdae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cdb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	330c      	adds	r3, #12
 800cdb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cdb8:	61fa      	str	r2, [r7, #28]
 800cdba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdbc:	69b9      	ldr	r1, [r7, #24]
 800cdbe:	69fa      	ldr	r2, [r7, #28]
 800cdc0:	e841 2300 	strex	r3, r2, [r1]
 800cdc4:	617b      	str	r3, [r7, #20]
   return(result);
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d1e5      	bne.n	800cd98 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d106      	bne.n	800cde2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cdd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cddc:	f7ff ff0e 	bl	800cbfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cde0:	e002      	b.n	800cde8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800cde2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cde4:	f7ff feec 	bl	800cbc0 <HAL_UART_RxCpltCallback>
}
 800cde8:	bf00      	nop
 800cdea:	3770      	adds	r7, #112	; 0x70
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdfc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d108      	bne.n	800ce18 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ce0a:	085b      	lsrs	r3, r3, #1
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	4619      	mov	r1, r3
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f7ff fef3 	bl	800cbfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ce16:	e002      	b.n	800ce1e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ce18:	68f8      	ldr	r0, [r7, #12]
 800ce1a:	f7ff fedb 	bl	800cbd4 <HAL_UART_RxHalfCpltCallback>
}
 800ce1e:	bf00      	nop
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b084      	sub	sp, #16
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce36:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce42:	2b80      	cmp	r3, #128	; 0x80
 800ce44:	bf0c      	ite	eq
 800ce46:	2301      	moveq	r3, #1
 800ce48:	2300      	movne	r3, #0
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	2b21      	cmp	r3, #33	; 0x21
 800ce58:	d108      	bne.n	800ce6c <UART_DMAError+0x46>
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d005      	beq.n	800ce6c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	2200      	movs	r2, #0
 800ce64:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ce66:	68b8      	ldr	r0, [r7, #8]
 800ce68:	f000 f8c2 	bl	800cff0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	695b      	ldr	r3, [r3, #20]
 800ce72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce76:	2b40      	cmp	r3, #64	; 0x40
 800ce78:	bf0c      	ite	eq
 800ce7a:	2301      	moveq	r3, #1
 800ce7c:	2300      	movne	r3, #0
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	2b22      	cmp	r3, #34	; 0x22
 800ce8c:	d108      	bne.n	800cea0 <UART_DMAError+0x7a>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d005      	beq.n	800cea0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	2200      	movs	r2, #0
 800ce98:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ce9a:	68b8      	ldr	r0, [r7, #8]
 800ce9c:	f000 f8d0 	bl	800d040 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea4:	f043 0210 	orr.w	r2, r3, #16
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ceac:	68b8      	ldr	r0, [r7, #8]
 800ceae:	f7ff fe9b 	bl	800cbe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ceb2:	bf00      	nop
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b098      	sub	sp, #96	; 0x60
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	4613      	mov	r3, r2
 800cec8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ceca:	68ba      	ldr	r2, [r7, #8]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	88fa      	ldrh	r2, [r7, #6]
 800ced4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2200      	movs	r2, #0
 800ceda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2222      	movs	r2, #34	; 0x22
 800cee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee8:	4a3e      	ldr	r2, [pc, #248]	; (800cfe4 <UART_Start_Receive_DMA+0x128>)
 800ceea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef0:	4a3d      	ldr	r2, [pc, #244]	; (800cfe8 <UART_Start_Receive_DMA+0x12c>)
 800cef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef8:	4a3c      	ldr	r2, [pc, #240]	; (800cfec <UART_Start_Receive_DMA+0x130>)
 800cefa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf00:	2200      	movs	r2, #0
 800cf02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800cf04:	f107 0308 	add.w	r3, r7, #8
 800cf08:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3304      	adds	r3, #4
 800cf14:	4619      	mov	r1, r3
 800cf16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	88fb      	ldrh	r3, [r7, #6]
 800cf1c:	f7fa f962 	bl	80071e4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800cf20:	2300      	movs	r3, #0
 800cf22:	613b      	str	r3, [r7, #16]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	613b      	str	r3, [r7, #16]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	613b      	str	r3, [r7, #16]
 800cf34:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	330c      	adds	r3, #12
 800cf44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf48:	e853 3f00 	ldrex	r3, [r3]
 800cf4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf54:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	330c      	adds	r3, #12
 800cf5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf5e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cf60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf62:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cf64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf66:	e841 2300 	strex	r3, r2, [r1]
 800cf6a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cf6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d1e5      	bne.n	800cf3e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	3314      	adds	r3, #20
 800cf78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7c:	e853 3f00 	ldrex	r3, [r3]
 800cf80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf84:	f043 0301 	orr.w	r3, r3, #1
 800cf88:	657b      	str	r3, [r7, #84]	; 0x54
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	3314      	adds	r3, #20
 800cf90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf92:	63ba      	str	r2, [r7, #56]	; 0x38
 800cf94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf9a:	e841 2300 	strex	r3, r2, [r1]
 800cf9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d1e5      	bne.n	800cf72 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	3314      	adds	r3, #20
 800cfac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	e853 3f00 	ldrex	r3, [r3]
 800cfb4:	617b      	str	r3, [r7, #20]
   return(result);
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfbc:	653b      	str	r3, [r7, #80]	; 0x50
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	3314      	adds	r3, #20
 800cfc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cfc6:	627a      	str	r2, [r7, #36]	; 0x24
 800cfc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfca:	6a39      	ldr	r1, [r7, #32]
 800cfcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfce:	e841 2300 	strex	r3, r2, [r1]
 800cfd2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1e5      	bne.n	800cfa6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800cfda:	2300      	movs	r3, #0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3760      	adds	r7, #96	; 0x60
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	0800cccb 	.word	0x0800cccb
 800cfe8:	0800cdf1 	.word	0x0800cdf1
 800cfec:	0800ce27 	.word	0x0800ce27

0800cff0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b089      	sub	sp, #36	; 0x24
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	330c      	adds	r3, #12
 800cffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	e853 3f00 	ldrex	r3, [r3]
 800d006:	60bb      	str	r3, [r7, #8]
   return(result);
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d00e:	61fb      	str	r3, [r7, #28]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	330c      	adds	r3, #12
 800d016:	69fa      	ldr	r2, [r7, #28]
 800d018:	61ba      	str	r2, [r7, #24]
 800d01a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d01c:	6979      	ldr	r1, [r7, #20]
 800d01e:	69ba      	ldr	r2, [r7, #24]
 800d020:	e841 2300 	strex	r3, r2, [r1]
 800d024:	613b      	str	r3, [r7, #16]
   return(result);
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1e5      	bne.n	800cff8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2220      	movs	r2, #32
 800d030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800d034:	bf00      	nop
 800d036:	3724      	adds	r7, #36	; 0x24
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d040:	b480      	push	{r7}
 800d042:	b095      	sub	sp, #84	; 0x54
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	330c      	adds	r3, #12
 800d04e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d052:	e853 3f00 	ldrex	r3, [r3]
 800d056:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d05e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	330c      	adds	r3, #12
 800d066:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d068:	643a      	str	r2, [r7, #64]	; 0x40
 800d06a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d06e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d070:	e841 2300 	strex	r3, r2, [r1]
 800d074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1e5      	bne.n	800d048 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	3314      	adds	r3, #20
 800d082:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	e853 3f00 	ldrex	r3, [r3]
 800d08a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d08c:	69fb      	ldr	r3, [r7, #28]
 800d08e:	f023 0301 	bic.w	r3, r3, #1
 800d092:	64bb      	str	r3, [r7, #72]	; 0x48
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	3314      	adds	r3, #20
 800d09a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d09c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d09e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0a4:	e841 2300 	strex	r3, r2, [r1]
 800d0a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d1e5      	bne.n	800d07c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d119      	bne.n	800d0ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	330c      	adds	r3, #12
 800d0be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	e853 3f00 	ldrex	r3, [r3]
 800d0c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	f023 0310 	bic.w	r3, r3, #16
 800d0ce:	647b      	str	r3, [r7, #68]	; 0x44
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	330c      	adds	r3, #12
 800d0d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0d8:	61ba      	str	r2, [r7, #24]
 800d0da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0dc:	6979      	ldr	r1, [r7, #20]
 800d0de:	69ba      	ldr	r2, [r7, #24]
 800d0e0:	e841 2300 	strex	r3, r2, [r1]
 800d0e4:	613b      	str	r3, [r7, #16]
   return(result);
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d1e5      	bne.n	800d0b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2220      	movs	r2, #32
 800d0f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d0fa:	bf00      	nop
 800d0fc:	3754      	adds	r7, #84	; 0x54
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr

0800d106 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b084      	sub	sp, #16
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d112:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2200      	movs	r2, #0
 800d118:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2200      	movs	r2, #0
 800d11e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	f7ff fd61 	bl	800cbe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d126:	bf00      	nop
 800d128:	3710      	adds	r7, #16
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}

0800d12e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d12e:	b480      	push	{r7}
 800d130:	b085      	sub	sp, #20
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	2b21      	cmp	r3, #33	; 0x21
 800d140:	d13e      	bne.n	800d1c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d14a:	d114      	bne.n	800d176 <UART_Transmit_IT+0x48>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	691b      	ldr	r3, [r3, #16]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d110      	bne.n	800d176 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6a1b      	ldr	r3, [r3, #32]
 800d158:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	881b      	ldrh	r3, [r3, #0]
 800d15e:	461a      	mov	r2, r3
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d168:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6a1b      	ldr	r3, [r3, #32]
 800d16e:	1c9a      	adds	r2, r3, #2
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	621a      	str	r2, [r3, #32]
 800d174:	e008      	b.n	800d188 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6a1b      	ldr	r3, [r3, #32]
 800d17a:	1c59      	adds	r1, r3, #1
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	6211      	str	r1, [r2, #32]
 800d180:	781a      	ldrb	r2, [r3, #0]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	3b01      	subs	r3, #1
 800d190:	b29b      	uxth	r3, r3
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	4619      	mov	r1, r3
 800d196:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10f      	bne.n	800d1bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	68da      	ldr	r2, [r3, #12]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d1aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	68da      	ldr	r2, [r3, #12]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	e000      	b.n	800d1c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d1c0:	2302      	movs	r3, #2
  }
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3714      	adds	r7, #20
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr

0800d1ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b082      	sub	sp, #8
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	68da      	ldr	r2, [r3, #12]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2220      	movs	r2, #32
 800d1ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7ff fcd2 	bl	800cb98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d1f4:	2300      	movs	r3, #0
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3708      	adds	r7, #8
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b08c      	sub	sp, #48	; 0x30
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	2b22      	cmp	r3, #34	; 0x22
 800d210:	f040 80ab 	bne.w	800d36a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d21c:	d117      	bne.n	800d24e <UART_Receive_IT+0x50>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	691b      	ldr	r3, [r3, #16]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d113      	bne.n	800d24e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d226:	2300      	movs	r3, #0
 800d228:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d22e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	b29b      	uxth	r3, r3
 800d238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d246:	1c9a      	adds	r2, r3, #2
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	629a      	str	r2, [r3, #40]	; 0x28
 800d24c:	e026      	b.n	800d29c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d252:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d254:	2300      	movs	r3, #0
 800d256:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d260:	d007      	beq.n	800d272 <UART_Receive_IT+0x74>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d10a      	bne.n	800d280 <UART_Receive_IT+0x82>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	691b      	ldr	r3, [r3, #16]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d106      	bne.n	800d280 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	b2da      	uxtb	r2, r3
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	701a      	strb	r2, [r3, #0]
 800d27e:	e008      	b.n	800d292 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	b2db      	uxtb	r3, r3
 800d288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d28c:	b2da      	uxtb	r2, r3
 800d28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d290:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d296:	1c5a      	adds	r2, r3, #1
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d15a      	bne.n	800d366 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68da      	ldr	r2, [r3, #12]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f022 0220 	bic.w	r2, r2, #32
 800d2be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	68da      	ldr	r2, [r3, #12]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d2ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	695a      	ldr	r2, [r3, #20]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f022 0201 	bic.w	r2, r2, #1
 800d2de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2220      	movs	r2, #32
 800d2e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d135      	bne.n	800d35c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	330c      	adds	r3, #12
 800d2fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	e853 3f00 	ldrex	r3, [r3]
 800d304:	613b      	str	r3, [r7, #16]
   return(result);
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	f023 0310 	bic.w	r3, r3, #16
 800d30c:	627b      	str	r3, [r7, #36]	; 0x24
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	330c      	adds	r3, #12
 800d314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d316:	623a      	str	r2, [r7, #32]
 800d318:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d31a:	69f9      	ldr	r1, [r7, #28]
 800d31c:	6a3a      	ldr	r2, [r7, #32]
 800d31e:	e841 2300 	strex	r3, r2, [r1]
 800d322:	61bb      	str	r3, [r7, #24]
   return(result);
 800d324:	69bb      	ldr	r3, [r7, #24]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d1e5      	bne.n	800d2f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f003 0310 	and.w	r3, r3, #16
 800d334:	2b10      	cmp	r3, #16
 800d336:	d10a      	bne.n	800d34e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d338:	2300      	movs	r3, #0
 800d33a:	60fb      	str	r3, [r7, #12]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	60fb      	str	r3, [r7, #12]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	60fb      	str	r3, [r7, #12]
 800d34c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f7ff fc51 	bl	800cbfc <HAL_UARTEx_RxEventCallback>
 800d35a:	e002      	b.n	800d362 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7ff fc2f 	bl	800cbc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d362:	2300      	movs	r3, #0
 800d364:	e002      	b.n	800d36c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d366:	2300      	movs	r3, #0
 800d368:	e000      	b.n	800d36c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d36a:	2302      	movs	r3, #2
  }
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3730      	adds	r7, #48	; 0x30
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d378:	b09f      	sub	sp, #124	; 0x7c
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d37e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d38a:	68d9      	ldr	r1, [r3, #12]
 800d38c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	ea40 0301 	orr.w	r3, r0, r1
 800d394:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d398:	689a      	ldr	r2, [r3, #8]
 800d39a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d39c:	691b      	ldr	r3, [r3, #16]
 800d39e:	431a      	orrs	r2, r3
 800d3a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3a2:	695b      	ldr	r3, [r3, #20]
 800d3a4:	431a      	orrs	r2, r3
 800d3a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3a8:	69db      	ldr	r3, [r3, #28]
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800d3ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d3b8:	f021 010c 	bic.w	r1, r1, #12
 800d3bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3c2:	430b      	orrs	r3, r1
 800d3c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d3c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	695b      	ldr	r3, [r3, #20]
 800d3cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d3d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3d2:	6999      	ldr	r1, [r3, #24]
 800d3d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	ea40 0301 	orr.w	r3, r0, r1
 800d3dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d3de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	4bc5      	ldr	r3, [pc, #788]	; (800d6f8 <UART_SetConfig+0x384>)
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d004      	beq.n	800d3f2 <UART_SetConfig+0x7e>
 800d3e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	4bc3      	ldr	r3, [pc, #780]	; (800d6fc <UART_SetConfig+0x388>)
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d103      	bne.n	800d3fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d3f2:	f7fe f979 	bl	800b6e8 <HAL_RCC_GetPCLK2Freq>
 800d3f6:	6778      	str	r0, [r7, #116]	; 0x74
 800d3f8:	e002      	b.n	800d400 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d3fa:	f7fe f961 	bl	800b6c0 <HAL_RCC_GetPCLK1Freq>
 800d3fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d402:	69db      	ldr	r3, [r3, #28]
 800d404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d408:	f040 80b6 	bne.w	800d578 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d40c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d40e:	461c      	mov	r4, r3
 800d410:	f04f 0500 	mov.w	r5, #0
 800d414:	4622      	mov	r2, r4
 800d416:	462b      	mov	r3, r5
 800d418:	1891      	adds	r1, r2, r2
 800d41a:	6439      	str	r1, [r7, #64]	; 0x40
 800d41c:	415b      	adcs	r3, r3
 800d41e:	647b      	str	r3, [r7, #68]	; 0x44
 800d420:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d424:	1912      	adds	r2, r2, r4
 800d426:	eb45 0303 	adc.w	r3, r5, r3
 800d42a:	f04f 0000 	mov.w	r0, #0
 800d42e:	f04f 0100 	mov.w	r1, #0
 800d432:	00d9      	lsls	r1, r3, #3
 800d434:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d438:	00d0      	lsls	r0, r2, #3
 800d43a:	4602      	mov	r2, r0
 800d43c:	460b      	mov	r3, r1
 800d43e:	1911      	adds	r1, r2, r4
 800d440:	6639      	str	r1, [r7, #96]	; 0x60
 800d442:	416b      	adcs	r3, r5
 800d444:	667b      	str	r3, [r7, #100]	; 0x64
 800d446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	461a      	mov	r2, r3
 800d44c:	f04f 0300 	mov.w	r3, #0
 800d450:	1891      	adds	r1, r2, r2
 800d452:	63b9      	str	r1, [r7, #56]	; 0x38
 800d454:	415b      	adcs	r3, r3
 800d456:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d458:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d45c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d460:	f7f3 fc2a 	bl	8000cb8 <__aeabi_uldivmod>
 800d464:	4602      	mov	r2, r0
 800d466:	460b      	mov	r3, r1
 800d468:	4ba5      	ldr	r3, [pc, #660]	; (800d700 <UART_SetConfig+0x38c>)
 800d46a:	fba3 2302 	umull	r2, r3, r3, r2
 800d46e:	095b      	lsrs	r3, r3, #5
 800d470:	011e      	lsls	r6, r3, #4
 800d472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d474:	461c      	mov	r4, r3
 800d476:	f04f 0500 	mov.w	r5, #0
 800d47a:	4622      	mov	r2, r4
 800d47c:	462b      	mov	r3, r5
 800d47e:	1891      	adds	r1, r2, r2
 800d480:	6339      	str	r1, [r7, #48]	; 0x30
 800d482:	415b      	adcs	r3, r3
 800d484:	637b      	str	r3, [r7, #52]	; 0x34
 800d486:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d48a:	1912      	adds	r2, r2, r4
 800d48c:	eb45 0303 	adc.w	r3, r5, r3
 800d490:	f04f 0000 	mov.w	r0, #0
 800d494:	f04f 0100 	mov.w	r1, #0
 800d498:	00d9      	lsls	r1, r3, #3
 800d49a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d49e:	00d0      	lsls	r0, r2, #3
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	1911      	adds	r1, r2, r4
 800d4a6:	65b9      	str	r1, [r7, #88]	; 0x58
 800d4a8:	416b      	adcs	r3, r5
 800d4aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	f04f 0300 	mov.w	r3, #0
 800d4b6:	1891      	adds	r1, r2, r2
 800d4b8:	62b9      	str	r1, [r7, #40]	; 0x28
 800d4ba:	415b      	adcs	r3, r3
 800d4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d4c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d4c6:	f7f3 fbf7 	bl	8000cb8 <__aeabi_uldivmod>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	4b8c      	ldr	r3, [pc, #560]	; (800d700 <UART_SetConfig+0x38c>)
 800d4d0:	fba3 1302 	umull	r1, r3, r3, r2
 800d4d4:	095b      	lsrs	r3, r3, #5
 800d4d6:	2164      	movs	r1, #100	; 0x64
 800d4d8:	fb01 f303 	mul.w	r3, r1, r3
 800d4dc:	1ad3      	subs	r3, r2, r3
 800d4de:	00db      	lsls	r3, r3, #3
 800d4e0:	3332      	adds	r3, #50	; 0x32
 800d4e2:	4a87      	ldr	r2, [pc, #540]	; (800d700 <UART_SetConfig+0x38c>)
 800d4e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d4e8:	095b      	lsrs	r3, r3, #5
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d4f0:	441e      	add	r6, r3
 800d4f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f04f 0100 	mov.w	r1, #0
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	1894      	adds	r4, r2, r2
 800d500:	623c      	str	r4, [r7, #32]
 800d502:	415b      	adcs	r3, r3
 800d504:	627b      	str	r3, [r7, #36]	; 0x24
 800d506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d50a:	1812      	adds	r2, r2, r0
 800d50c:	eb41 0303 	adc.w	r3, r1, r3
 800d510:	f04f 0400 	mov.w	r4, #0
 800d514:	f04f 0500 	mov.w	r5, #0
 800d518:	00dd      	lsls	r5, r3, #3
 800d51a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d51e:	00d4      	lsls	r4, r2, #3
 800d520:	4622      	mov	r2, r4
 800d522:	462b      	mov	r3, r5
 800d524:	1814      	adds	r4, r2, r0
 800d526:	653c      	str	r4, [r7, #80]	; 0x50
 800d528:	414b      	adcs	r3, r1
 800d52a:	657b      	str	r3, [r7, #84]	; 0x54
 800d52c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	461a      	mov	r2, r3
 800d532:	f04f 0300 	mov.w	r3, #0
 800d536:	1891      	adds	r1, r2, r2
 800d538:	61b9      	str	r1, [r7, #24]
 800d53a:	415b      	adcs	r3, r3
 800d53c:	61fb      	str	r3, [r7, #28]
 800d53e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d542:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d546:	f7f3 fbb7 	bl	8000cb8 <__aeabi_uldivmod>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	4b6c      	ldr	r3, [pc, #432]	; (800d700 <UART_SetConfig+0x38c>)
 800d550:	fba3 1302 	umull	r1, r3, r3, r2
 800d554:	095b      	lsrs	r3, r3, #5
 800d556:	2164      	movs	r1, #100	; 0x64
 800d558:	fb01 f303 	mul.w	r3, r1, r3
 800d55c:	1ad3      	subs	r3, r2, r3
 800d55e:	00db      	lsls	r3, r3, #3
 800d560:	3332      	adds	r3, #50	; 0x32
 800d562:	4a67      	ldr	r2, [pc, #412]	; (800d700 <UART_SetConfig+0x38c>)
 800d564:	fba2 2303 	umull	r2, r3, r2, r3
 800d568:	095b      	lsrs	r3, r3, #5
 800d56a:	f003 0207 	and.w	r2, r3, #7
 800d56e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4432      	add	r2, r6
 800d574:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d576:	e0b9      	b.n	800d6ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d57a:	461c      	mov	r4, r3
 800d57c:	f04f 0500 	mov.w	r5, #0
 800d580:	4622      	mov	r2, r4
 800d582:	462b      	mov	r3, r5
 800d584:	1891      	adds	r1, r2, r2
 800d586:	6139      	str	r1, [r7, #16]
 800d588:	415b      	adcs	r3, r3
 800d58a:	617b      	str	r3, [r7, #20]
 800d58c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d590:	1912      	adds	r2, r2, r4
 800d592:	eb45 0303 	adc.w	r3, r5, r3
 800d596:	f04f 0000 	mov.w	r0, #0
 800d59a:	f04f 0100 	mov.w	r1, #0
 800d59e:	00d9      	lsls	r1, r3, #3
 800d5a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d5a4:	00d0      	lsls	r0, r2, #3
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	eb12 0804 	adds.w	r8, r2, r4
 800d5ae:	eb43 0905 	adc.w	r9, r3, r5
 800d5b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f04f 0100 	mov.w	r1, #0
 800d5bc:	f04f 0200 	mov.w	r2, #0
 800d5c0:	f04f 0300 	mov.w	r3, #0
 800d5c4:	008b      	lsls	r3, r1, #2
 800d5c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d5ca:	0082      	lsls	r2, r0, #2
 800d5cc:	4640      	mov	r0, r8
 800d5ce:	4649      	mov	r1, r9
 800d5d0:	f7f3 fb72 	bl	8000cb8 <__aeabi_uldivmod>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	4b49      	ldr	r3, [pc, #292]	; (800d700 <UART_SetConfig+0x38c>)
 800d5da:	fba3 2302 	umull	r2, r3, r3, r2
 800d5de:	095b      	lsrs	r3, r3, #5
 800d5e0:	011e      	lsls	r6, r3, #4
 800d5e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f04f 0100 	mov.w	r1, #0
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	1894      	adds	r4, r2, r2
 800d5f0:	60bc      	str	r4, [r7, #8]
 800d5f2:	415b      	adcs	r3, r3
 800d5f4:	60fb      	str	r3, [r7, #12]
 800d5f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d5fa:	1812      	adds	r2, r2, r0
 800d5fc:	eb41 0303 	adc.w	r3, r1, r3
 800d600:	f04f 0400 	mov.w	r4, #0
 800d604:	f04f 0500 	mov.w	r5, #0
 800d608:	00dd      	lsls	r5, r3, #3
 800d60a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d60e:	00d4      	lsls	r4, r2, #3
 800d610:	4622      	mov	r2, r4
 800d612:	462b      	mov	r3, r5
 800d614:	1814      	adds	r4, r2, r0
 800d616:	64bc      	str	r4, [r7, #72]	; 0x48
 800d618:	414b      	adcs	r3, r1
 800d61a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d61c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	4618      	mov	r0, r3
 800d622:	f04f 0100 	mov.w	r1, #0
 800d626:	f04f 0200 	mov.w	r2, #0
 800d62a:	f04f 0300 	mov.w	r3, #0
 800d62e:	008b      	lsls	r3, r1, #2
 800d630:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d634:	0082      	lsls	r2, r0, #2
 800d636:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d63a:	f7f3 fb3d 	bl	8000cb8 <__aeabi_uldivmod>
 800d63e:	4602      	mov	r2, r0
 800d640:	460b      	mov	r3, r1
 800d642:	4b2f      	ldr	r3, [pc, #188]	; (800d700 <UART_SetConfig+0x38c>)
 800d644:	fba3 1302 	umull	r1, r3, r3, r2
 800d648:	095b      	lsrs	r3, r3, #5
 800d64a:	2164      	movs	r1, #100	; 0x64
 800d64c:	fb01 f303 	mul.w	r3, r1, r3
 800d650:	1ad3      	subs	r3, r2, r3
 800d652:	011b      	lsls	r3, r3, #4
 800d654:	3332      	adds	r3, #50	; 0x32
 800d656:	4a2a      	ldr	r2, [pc, #168]	; (800d700 <UART_SetConfig+0x38c>)
 800d658:	fba2 2303 	umull	r2, r3, r2, r3
 800d65c:	095b      	lsrs	r3, r3, #5
 800d65e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d662:	441e      	add	r6, r3
 800d664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d666:	4618      	mov	r0, r3
 800d668:	f04f 0100 	mov.w	r1, #0
 800d66c:	4602      	mov	r2, r0
 800d66e:	460b      	mov	r3, r1
 800d670:	1894      	adds	r4, r2, r2
 800d672:	603c      	str	r4, [r7, #0]
 800d674:	415b      	adcs	r3, r3
 800d676:	607b      	str	r3, [r7, #4]
 800d678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d67c:	1812      	adds	r2, r2, r0
 800d67e:	eb41 0303 	adc.w	r3, r1, r3
 800d682:	f04f 0400 	mov.w	r4, #0
 800d686:	f04f 0500 	mov.w	r5, #0
 800d68a:	00dd      	lsls	r5, r3, #3
 800d68c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d690:	00d4      	lsls	r4, r2, #3
 800d692:	4622      	mov	r2, r4
 800d694:	462b      	mov	r3, r5
 800d696:	eb12 0a00 	adds.w	sl, r2, r0
 800d69a:	eb43 0b01 	adc.w	fp, r3, r1
 800d69e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f04f 0100 	mov.w	r1, #0
 800d6a8:	f04f 0200 	mov.w	r2, #0
 800d6ac:	f04f 0300 	mov.w	r3, #0
 800d6b0:	008b      	lsls	r3, r1, #2
 800d6b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d6b6:	0082      	lsls	r2, r0, #2
 800d6b8:	4650      	mov	r0, sl
 800d6ba:	4659      	mov	r1, fp
 800d6bc:	f7f3 fafc 	bl	8000cb8 <__aeabi_uldivmod>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	4b0e      	ldr	r3, [pc, #56]	; (800d700 <UART_SetConfig+0x38c>)
 800d6c6:	fba3 1302 	umull	r1, r3, r3, r2
 800d6ca:	095b      	lsrs	r3, r3, #5
 800d6cc:	2164      	movs	r1, #100	; 0x64
 800d6ce:	fb01 f303 	mul.w	r3, r1, r3
 800d6d2:	1ad3      	subs	r3, r2, r3
 800d6d4:	011b      	lsls	r3, r3, #4
 800d6d6:	3332      	adds	r3, #50	; 0x32
 800d6d8:	4a09      	ldr	r2, [pc, #36]	; (800d700 <UART_SetConfig+0x38c>)
 800d6da:	fba2 2303 	umull	r2, r3, r2, r3
 800d6de:	095b      	lsrs	r3, r3, #5
 800d6e0:	f003 020f 	and.w	r2, r3, #15
 800d6e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4432      	add	r2, r6
 800d6ea:	609a      	str	r2, [r3, #8]
}
 800d6ec:	bf00      	nop
 800d6ee:	377c      	adds	r7, #124	; 0x7c
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6f6:	bf00      	nop
 800d6f8:	40011000 	.word	0x40011000
 800d6fc:	40011400 	.word	0x40011400
 800d700:	51eb851f 	.word	0x51eb851f

0800d704 <atof>:
 800d704:	2100      	movs	r1, #0
 800d706:	f001 bd03 	b.w	800f110 <strtod>

0800d70a <atoi>:
 800d70a:	220a      	movs	r2, #10
 800d70c:	2100      	movs	r1, #0
 800d70e:	f001 bded 	b.w	800f2ec <strtol>
	...

0800d714 <__errno>:
 800d714:	4b01      	ldr	r3, [pc, #4]	; (800d71c <__errno+0x8>)
 800d716:	6818      	ldr	r0, [r3, #0]
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop
 800d71c:	20000040 	.word	0x20000040

0800d720 <__libc_init_array>:
 800d720:	b570      	push	{r4, r5, r6, lr}
 800d722:	4d0d      	ldr	r5, [pc, #52]	; (800d758 <__libc_init_array+0x38>)
 800d724:	4c0d      	ldr	r4, [pc, #52]	; (800d75c <__libc_init_array+0x3c>)
 800d726:	1b64      	subs	r4, r4, r5
 800d728:	10a4      	asrs	r4, r4, #2
 800d72a:	2600      	movs	r6, #0
 800d72c:	42a6      	cmp	r6, r4
 800d72e:	d109      	bne.n	800d744 <__libc_init_array+0x24>
 800d730:	4d0b      	ldr	r5, [pc, #44]	; (800d760 <__libc_init_array+0x40>)
 800d732:	4c0c      	ldr	r4, [pc, #48]	; (800d764 <__libc_init_array+0x44>)
 800d734:	f004 fcb6 	bl	80120a4 <_init>
 800d738:	1b64      	subs	r4, r4, r5
 800d73a:	10a4      	asrs	r4, r4, #2
 800d73c:	2600      	movs	r6, #0
 800d73e:	42a6      	cmp	r6, r4
 800d740:	d105      	bne.n	800d74e <__libc_init_array+0x2e>
 800d742:	bd70      	pop	{r4, r5, r6, pc}
 800d744:	f855 3b04 	ldr.w	r3, [r5], #4
 800d748:	4798      	blx	r3
 800d74a:	3601      	adds	r6, #1
 800d74c:	e7ee      	b.n	800d72c <__libc_init_array+0xc>
 800d74e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d752:	4798      	blx	r3
 800d754:	3601      	adds	r6, #1
 800d756:	e7f2      	b.n	800d73e <__libc_init_array+0x1e>
 800d758:	08025d58 	.word	0x08025d58
 800d75c:	08025d58 	.word	0x08025d58
 800d760:	08025d58 	.word	0x08025d58
 800d764:	08025d5c 	.word	0x08025d5c

0800d768 <memset>:
 800d768:	4402      	add	r2, r0
 800d76a:	4603      	mov	r3, r0
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d100      	bne.n	800d772 <memset+0xa>
 800d770:	4770      	bx	lr
 800d772:	f803 1b01 	strb.w	r1, [r3], #1
 800d776:	e7f9      	b.n	800d76c <memset+0x4>

0800d778 <__cvt>:
 800d778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d77c:	ec55 4b10 	vmov	r4, r5, d0
 800d780:	2d00      	cmp	r5, #0
 800d782:	460e      	mov	r6, r1
 800d784:	4619      	mov	r1, r3
 800d786:	462b      	mov	r3, r5
 800d788:	bfbb      	ittet	lt
 800d78a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d78e:	461d      	movlt	r5, r3
 800d790:	2300      	movge	r3, #0
 800d792:	232d      	movlt	r3, #45	; 0x2d
 800d794:	700b      	strb	r3, [r1, #0]
 800d796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d798:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d79c:	4691      	mov	r9, r2
 800d79e:	f023 0820 	bic.w	r8, r3, #32
 800d7a2:	bfbc      	itt	lt
 800d7a4:	4622      	movlt	r2, r4
 800d7a6:	4614      	movlt	r4, r2
 800d7a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d7ac:	d005      	beq.n	800d7ba <__cvt+0x42>
 800d7ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d7b2:	d100      	bne.n	800d7b6 <__cvt+0x3e>
 800d7b4:	3601      	adds	r6, #1
 800d7b6:	2102      	movs	r1, #2
 800d7b8:	e000      	b.n	800d7bc <__cvt+0x44>
 800d7ba:	2103      	movs	r1, #3
 800d7bc:	ab03      	add	r3, sp, #12
 800d7be:	9301      	str	r3, [sp, #4]
 800d7c0:	ab02      	add	r3, sp, #8
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	ec45 4b10 	vmov	d0, r4, r5
 800d7c8:	4653      	mov	r3, sl
 800d7ca:	4632      	mov	r2, r6
 800d7cc:	f001 fe44 	bl	800f458 <_dtoa_r>
 800d7d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d7d4:	4607      	mov	r7, r0
 800d7d6:	d102      	bne.n	800d7de <__cvt+0x66>
 800d7d8:	f019 0f01 	tst.w	r9, #1
 800d7dc:	d022      	beq.n	800d824 <__cvt+0xac>
 800d7de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d7e2:	eb07 0906 	add.w	r9, r7, r6
 800d7e6:	d110      	bne.n	800d80a <__cvt+0x92>
 800d7e8:	783b      	ldrb	r3, [r7, #0]
 800d7ea:	2b30      	cmp	r3, #48	; 0x30
 800d7ec:	d10a      	bne.n	800d804 <__cvt+0x8c>
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	4629      	mov	r1, r5
 800d7f6:	f7f3 f97f 	bl	8000af8 <__aeabi_dcmpeq>
 800d7fa:	b918      	cbnz	r0, 800d804 <__cvt+0x8c>
 800d7fc:	f1c6 0601 	rsb	r6, r6, #1
 800d800:	f8ca 6000 	str.w	r6, [sl]
 800d804:	f8da 3000 	ldr.w	r3, [sl]
 800d808:	4499      	add	r9, r3
 800d80a:	2200      	movs	r2, #0
 800d80c:	2300      	movs	r3, #0
 800d80e:	4620      	mov	r0, r4
 800d810:	4629      	mov	r1, r5
 800d812:	f7f3 f971 	bl	8000af8 <__aeabi_dcmpeq>
 800d816:	b108      	cbz	r0, 800d81c <__cvt+0xa4>
 800d818:	f8cd 900c 	str.w	r9, [sp, #12]
 800d81c:	2230      	movs	r2, #48	; 0x30
 800d81e:	9b03      	ldr	r3, [sp, #12]
 800d820:	454b      	cmp	r3, r9
 800d822:	d307      	bcc.n	800d834 <__cvt+0xbc>
 800d824:	9b03      	ldr	r3, [sp, #12]
 800d826:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d828:	1bdb      	subs	r3, r3, r7
 800d82a:	4638      	mov	r0, r7
 800d82c:	6013      	str	r3, [r2, #0]
 800d82e:	b004      	add	sp, #16
 800d830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d834:	1c59      	adds	r1, r3, #1
 800d836:	9103      	str	r1, [sp, #12]
 800d838:	701a      	strb	r2, [r3, #0]
 800d83a:	e7f0      	b.n	800d81e <__cvt+0xa6>

0800d83c <__exponent>:
 800d83c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d83e:	4603      	mov	r3, r0
 800d840:	2900      	cmp	r1, #0
 800d842:	bfb8      	it	lt
 800d844:	4249      	neglt	r1, r1
 800d846:	f803 2b02 	strb.w	r2, [r3], #2
 800d84a:	bfb4      	ite	lt
 800d84c:	222d      	movlt	r2, #45	; 0x2d
 800d84e:	222b      	movge	r2, #43	; 0x2b
 800d850:	2909      	cmp	r1, #9
 800d852:	7042      	strb	r2, [r0, #1]
 800d854:	dd2a      	ble.n	800d8ac <__exponent+0x70>
 800d856:	f10d 0407 	add.w	r4, sp, #7
 800d85a:	46a4      	mov	ip, r4
 800d85c:	270a      	movs	r7, #10
 800d85e:	46a6      	mov	lr, r4
 800d860:	460a      	mov	r2, r1
 800d862:	fb91 f6f7 	sdiv	r6, r1, r7
 800d866:	fb07 1516 	mls	r5, r7, r6, r1
 800d86a:	3530      	adds	r5, #48	; 0x30
 800d86c:	2a63      	cmp	r2, #99	; 0x63
 800d86e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d872:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d876:	4631      	mov	r1, r6
 800d878:	dcf1      	bgt.n	800d85e <__exponent+0x22>
 800d87a:	3130      	adds	r1, #48	; 0x30
 800d87c:	f1ae 0502 	sub.w	r5, lr, #2
 800d880:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d884:	1c44      	adds	r4, r0, #1
 800d886:	4629      	mov	r1, r5
 800d888:	4561      	cmp	r1, ip
 800d88a:	d30a      	bcc.n	800d8a2 <__exponent+0x66>
 800d88c:	f10d 0209 	add.w	r2, sp, #9
 800d890:	eba2 020e 	sub.w	r2, r2, lr
 800d894:	4565      	cmp	r5, ip
 800d896:	bf88      	it	hi
 800d898:	2200      	movhi	r2, #0
 800d89a:	4413      	add	r3, r2
 800d89c:	1a18      	subs	r0, r3, r0
 800d89e:	b003      	add	sp, #12
 800d8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d8aa:	e7ed      	b.n	800d888 <__exponent+0x4c>
 800d8ac:	2330      	movs	r3, #48	; 0x30
 800d8ae:	3130      	adds	r1, #48	; 0x30
 800d8b0:	7083      	strb	r3, [r0, #2]
 800d8b2:	70c1      	strb	r1, [r0, #3]
 800d8b4:	1d03      	adds	r3, r0, #4
 800d8b6:	e7f1      	b.n	800d89c <__exponent+0x60>

0800d8b8 <_printf_float>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	ed2d 8b02 	vpush	{d8}
 800d8c0:	b08d      	sub	sp, #52	; 0x34
 800d8c2:	460c      	mov	r4, r1
 800d8c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d8c8:	4616      	mov	r6, r2
 800d8ca:	461f      	mov	r7, r3
 800d8cc:	4605      	mov	r5, r0
 800d8ce:	f002 ff31 	bl	8010734 <_localeconv_r>
 800d8d2:	f8d0 a000 	ldr.w	sl, [r0]
 800d8d6:	4650      	mov	r0, sl
 800d8d8:	f7f2 fc8c 	bl	80001f4 <strlen>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	930a      	str	r3, [sp, #40]	; 0x28
 800d8e0:	6823      	ldr	r3, [r4, #0]
 800d8e2:	9305      	str	r3, [sp, #20]
 800d8e4:	f8d8 3000 	ldr.w	r3, [r8]
 800d8e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d8ec:	3307      	adds	r3, #7
 800d8ee:	f023 0307 	bic.w	r3, r3, #7
 800d8f2:	f103 0208 	add.w	r2, r3, #8
 800d8f6:	f8c8 2000 	str.w	r2, [r8]
 800d8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d902:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d906:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d90a:	9307      	str	r3, [sp, #28]
 800d90c:	f8cd 8018 	str.w	r8, [sp, #24]
 800d910:	ee08 0a10 	vmov	s16, r0
 800d914:	4b9f      	ldr	r3, [pc, #636]	; (800db94 <_printf_float+0x2dc>)
 800d916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d91a:	f04f 32ff 	mov.w	r2, #4294967295
 800d91e:	f7f3 f91d 	bl	8000b5c <__aeabi_dcmpun>
 800d922:	bb88      	cbnz	r0, 800d988 <_printf_float+0xd0>
 800d924:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d928:	4b9a      	ldr	r3, [pc, #616]	; (800db94 <_printf_float+0x2dc>)
 800d92a:	f04f 32ff 	mov.w	r2, #4294967295
 800d92e:	f7f3 f8f7 	bl	8000b20 <__aeabi_dcmple>
 800d932:	bb48      	cbnz	r0, 800d988 <_printf_float+0xd0>
 800d934:	2200      	movs	r2, #0
 800d936:	2300      	movs	r3, #0
 800d938:	4640      	mov	r0, r8
 800d93a:	4649      	mov	r1, r9
 800d93c:	f7f3 f8e6 	bl	8000b0c <__aeabi_dcmplt>
 800d940:	b110      	cbz	r0, 800d948 <_printf_float+0x90>
 800d942:	232d      	movs	r3, #45	; 0x2d
 800d944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d948:	4b93      	ldr	r3, [pc, #588]	; (800db98 <_printf_float+0x2e0>)
 800d94a:	4894      	ldr	r0, [pc, #592]	; (800db9c <_printf_float+0x2e4>)
 800d94c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d950:	bf94      	ite	ls
 800d952:	4698      	movls	r8, r3
 800d954:	4680      	movhi	r8, r0
 800d956:	2303      	movs	r3, #3
 800d958:	6123      	str	r3, [r4, #16]
 800d95a:	9b05      	ldr	r3, [sp, #20]
 800d95c:	f023 0204 	bic.w	r2, r3, #4
 800d960:	6022      	str	r2, [r4, #0]
 800d962:	f04f 0900 	mov.w	r9, #0
 800d966:	9700      	str	r7, [sp, #0]
 800d968:	4633      	mov	r3, r6
 800d96a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d96c:	4621      	mov	r1, r4
 800d96e:	4628      	mov	r0, r5
 800d970:	f000 f9d8 	bl	800dd24 <_printf_common>
 800d974:	3001      	adds	r0, #1
 800d976:	f040 8090 	bne.w	800da9a <_printf_float+0x1e2>
 800d97a:	f04f 30ff 	mov.w	r0, #4294967295
 800d97e:	b00d      	add	sp, #52	; 0x34
 800d980:	ecbd 8b02 	vpop	{d8}
 800d984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d988:	4642      	mov	r2, r8
 800d98a:	464b      	mov	r3, r9
 800d98c:	4640      	mov	r0, r8
 800d98e:	4649      	mov	r1, r9
 800d990:	f7f3 f8e4 	bl	8000b5c <__aeabi_dcmpun>
 800d994:	b140      	cbz	r0, 800d9a8 <_printf_float+0xf0>
 800d996:	464b      	mov	r3, r9
 800d998:	2b00      	cmp	r3, #0
 800d99a:	bfbc      	itt	lt
 800d99c:	232d      	movlt	r3, #45	; 0x2d
 800d99e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d9a2:	487f      	ldr	r0, [pc, #508]	; (800dba0 <_printf_float+0x2e8>)
 800d9a4:	4b7f      	ldr	r3, [pc, #508]	; (800dba4 <_printf_float+0x2ec>)
 800d9a6:	e7d1      	b.n	800d94c <_printf_float+0x94>
 800d9a8:	6863      	ldr	r3, [r4, #4]
 800d9aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d9ae:	9206      	str	r2, [sp, #24]
 800d9b0:	1c5a      	adds	r2, r3, #1
 800d9b2:	d13f      	bne.n	800da34 <_printf_float+0x17c>
 800d9b4:	2306      	movs	r3, #6
 800d9b6:	6063      	str	r3, [r4, #4]
 800d9b8:	9b05      	ldr	r3, [sp, #20]
 800d9ba:	6861      	ldr	r1, [r4, #4]
 800d9bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	9303      	str	r3, [sp, #12]
 800d9c4:	ab0a      	add	r3, sp, #40	; 0x28
 800d9c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d9ca:	ab09      	add	r3, sp, #36	; 0x24
 800d9cc:	ec49 8b10 	vmov	d0, r8, r9
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	6022      	str	r2, [r4, #0]
 800d9d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d9d8:	4628      	mov	r0, r5
 800d9da:	f7ff fecd 	bl	800d778 <__cvt>
 800d9de:	9b06      	ldr	r3, [sp, #24]
 800d9e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9e2:	2b47      	cmp	r3, #71	; 0x47
 800d9e4:	4680      	mov	r8, r0
 800d9e6:	d108      	bne.n	800d9fa <_printf_float+0x142>
 800d9e8:	1cc8      	adds	r0, r1, #3
 800d9ea:	db02      	blt.n	800d9f2 <_printf_float+0x13a>
 800d9ec:	6863      	ldr	r3, [r4, #4]
 800d9ee:	4299      	cmp	r1, r3
 800d9f0:	dd41      	ble.n	800da76 <_printf_float+0x1be>
 800d9f2:	f1ab 0b02 	sub.w	fp, fp, #2
 800d9f6:	fa5f fb8b 	uxtb.w	fp, fp
 800d9fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d9fe:	d820      	bhi.n	800da42 <_printf_float+0x18a>
 800da00:	3901      	subs	r1, #1
 800da02:	465a      	mov	r2, fp
 800da04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800da08:	9109      	str	r1, [sp, #36]	; 0x24
 800da0a:	f7ff ff17 	bl	800d83c <__exponent>
 800da0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da10:	1813      	adds	r3, r2, r0
 800da12:	2a01      	cmp	r2, #1
 800da14:	4681      	mov	r9, r0
 800da16:	6123      	str	r3, [r4, #16]
 800da18:	dc02      	bgt.n	800da20 <_printf_float+0x168>
 800da1a:	6822      	ldr	r2, [r4, #0]
 800da1c:	07d2      	lsls	r2, r2, #31
 800da1e:	d501      	bpl.n	800da24 <_printf_float+0x16c>
 800da20:	3301      	adds	r3, #1
 800da22:	6123      	str	r3, [r4, #16]
 800da24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d09c      	beq.n	800d966 <_printf_float+0xae>
 800da2c:	232d      	movs	r3, #45	; 0x2d
 800da2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da32:	e798      	b.n	800d966 <_printf_float+0xae>
 800da34:	9a06      	ldr	r2, [sp, #24]
 800da36:	2a47      	cmp	r2, #71	; 0x47
 800da38:	d1be      	bne.n	800d9b8 <_printf_float+0x100>
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1bc      	bne.n	800d9b8 <_printf_float+0x100>
 800da3e:	2301      	movs	r3, #1
 800da40:	e7b9      	b.n	800d9b6 <_printf_float+0xfe>
 800da42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800da46:	d118      	bne.n	800da7a <_printf_float+0x1c2>
 800da48:	2900      	cmp	r1, #0
 800da4a:	6863      	ldr	r3, [r4, #4]
 800da4c:	dd0b      	ble.n	800da66 <_printf_float+0x1ae>
 800da4e:	6121      	str	r1, [r4, #16]
 800da50:	b913      	cbnz	r3, 800da58 <_printf_float+0x1a0>
 800da52:	6822      	ldr	r2, [r4, #0]
 800da54:	07d0      	lsls	r0, r2, #31
 800da56:	d502      	bpl.n	800da5e <_printf_float+0x1a6>
 800da58:	3301      	adds	r3, #1
 800da5a:	440b      	add	r3, r1
 800da5c:	6123      	str	r3, [r4, #16]
 800da5e:	65a1      	str	r1, [r4, #88]	; 0x58
 800da60:	f04f 0900 	mov.w	r9, #0
 800da64:	e7de      	b.n	800da24 <_printf_float+0x16c>
 800da66:	b913      	cbnz	r3, 800da6e <_printf_float+0x1b6>
 800da68:	6822      	ldr	r2, [r4, #0]
 800da6a:	07d2      	lsls	r2, r2, #31
 800da6c:	d501      	bpl.n	800da72 <_printf_float+0x1ba>
 800da6e:	3302      	adds	r3, #2
 800da70:	e7f4      	b.n	800da5c <_printf_float+0x1a4>
 800da72:	2301      	movs	r3, #1
 800da74:	e7f2      	b.n	800da5c <_printf_float+0x1a4>
 800da76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800da7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da7c:	4299      	cmp	r1, r3
 800da7e:	db05      	blt.n	800da8c <_printf_float+0x1d4>
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	6121      	str	r1, [r4, #16]
 800da84:	07d8      	lsls	r0, r3, #31
 800da86:	d5ea      	bpl.n	800da5e <_printf_float+0x1a6>
 800da88:	1c4b      	adds	r3, r1, #1
 800da8a:	e7e7      	b.n	800da5c <_printf_float+0x1a4>
 800da8c:	2900      	cmp	r1, #0
 800da8e:	bfd4      	ite	le
 800da90:	f1c1 0202 	rsble	r2, r1, #2
 800da94:	2201      	movgt	r2, #1
 800da96:	4413      	add	r3, r2
 800da98:	e7e0      	b.n	800da5c <_printf_float+0x1a4>
 800da9a:	6823      	ldr	r3, [r4, #0]
 800da9c:	055a      	lsls	r2, r3, #21
 800da9e:	d407      	bmi.n	800dab0 <_printf_float+0x1f8>
 800daa0:	6923      	ldr	r3, [r4, #16]
 800daa2:	4642      	mov	r2, r8
 800daa4:	4631      	mov	r1, r6
 800daa6:	4628      	mov	r0, r5
 800daa8:	47b8      	blx	r7
 800daaa:	3001      	adds	r0, #1
 800daac:	d12c      	bne.n	800db08 <_printf_float+0x250>
 800daae:	e764      	b.n	800d97a <_printf_float+0xc2>
 800dab0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dab4:	f240 80e0 	bls.w	800dc78 <_printf_float+0x3c0>
 800dab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dabc:	2200      	movs	r2, #0
 800dabe:	2300      	movs	r3, #0
 800dac0:	f7f3 f81a 	bl	8000af8 <__aeabi_dcmpeq>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d034      	beq.n	800db32 <_printf_float+0x27a>
 800dac8:	4a37      	ldr	r2, [pc, #220]	; (800dba8 <_printf_float+0x2f0>)
 800daca:	2301      	movs	r3, #1
 800dacc:	4631      	mov	r1, r6
 800dace:	4628      	mov	r0, r5
 800dad0:	47b8      	blx	r7
 800dad2:	3001      	adds	r0, #1
 800dad4:	f43f af51 	beq.w	800d97a <_printf_float+0xc2>
 800dad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dadc:	429a      	cmp	r2, r3
 800dade:	db02      	blt.n	800dae6 <_printf_float+0x22e>
 800dae0:	6823      	ldr	r3, [r4, #0]
 800dae2:	07d8      	lsls	r0, r3, #31
 800dae4:	d510      	bpl.n	800db08 <_printf_float+0x250>
 800dae6:	ee18 3a10 	vmov	r3, s16
 800daea:	4652      	mov	r2, sl
 800daec:	4631      	mov	r1, r6
 800daee:	4628      	mov	r0, r5
 800daf0:	47b8      	blx	r7
 800daf2:	3001      	adds	r0, #1
 800daf4:	f43f af41 	beq.w	800d97a <_printf_float+0xc2>
 800daf8:	f04f 0800 	mov.w	r8, #0
 800dafc:	f104 091a 	add.w	r9, r4, #26
 800db00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db02:	3b01      	subs	r3, #1
 800db04:	4543      	cmp	r3, r8
 800db06:	dc09      	bgt.n	800db1c <_printf_float+0x264>
 800db08:	6823      	ldr	r3, [r4, #0]
 800db0a:	079b      	lsls	r3, r3, #30
 800db0c:	f100 8105 	bmi.w	800dd1a <_printf_float+0x462>
 800db10:	68e0      	ldr	r0, [r4, #12]
 800db12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db14:	4298      	cmp	r0, r3
 800db16:	bfb8      	it	lt
 800db18:	4618      	movlt	r0, r3
 800db1a:	e730      	b.n	800d97e <_printf_float+0xc6>
 800db1c:	2301      	movs	r3, #1
 800db1e:	464a      	mov	r2, r9
 800db20:	4631      	mov	r1, r6
 800db22:	4628      	mov	r0, r5
 800db24:	47b8      	blx	r7
 800db26:	3001      	adds	r0, #1
 800db28:	f43f af27 	beq.w	800d97a <_printf_float+0xc2>
 800db2c:	f108 0801 	add.w	r8, r8, #1
 800db30:	e7e6      	b.n	800db00 <_printf_float+0x248>
 800db32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db34:	2b00      	cmp	r3, #0
 800db36:	dc39      	bgt.n	800dbac <_printf_float+0x2f4>
 800db38:	4a1b      	ldr	r2, [pc, #108]	; (800dba8 <_printf_float+0x2f0>)
 800db3a:	2301      	movs	r3, #1
 800db3c:	4631      	mov	r1, r6
 800db3e:	4628      	mov	r0, r5
 800db40:	47b8      	blx	r7
 800db42:	3001      	adds	r0, #1
 800db44:	f43f af19 	beq.w	800d97a <_printf_float+0xc2>
 800db48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db4c:	4313      	orrs	r3, r2
 800db4e:	d102      	bne.n	800db56 <_printf_float+0x29e>
 800db50:	6823      	ldr	r3, [r4, #0]
 800db52:	07d9      	lsls	r1, r3, #31
 800db54:	d5d8      	bpl.n	800db08 <_printf_float+0x250>
 800db56:	ee18 3a10 	vmov	r3, s16
 800db5a:	4652      	mov	r2, sl
 800db5c:	4631      	mov	r1, r6
 800db5e:	4628      	mov	r0, r5
 800db60:	47b8      	blx	r7
 800db62:	3001      	adds	r0, #1
 800db64:	f43f af09 	beq.w	800d97a <_printf_float+0xc2>
 800db68:	f04f 0900 	mov.w	r9, #0
 800db6c:	f104 0a1a 	add.w	sl, r4, #26
 800db70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db72:	425b      	negs	r3, r3
 800db74:	454b      	cmp	r3, r9
 800db76:	dc01      	bgt.n	800db7c <_printf_float+0x2c4>
 800db78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db7a:	e792      	b.n	800daa2 <_printf_float+0x1ea>
 800db7c:	2301      	movs	r3, #1
 800db7e:	4652      	mov	r2, sl
 800db80:	4631      	mov	r1, r6
 800db82:	4628      	mov	r0, r5
 800db84:	47b8      	blx	r7
 800db86:	3001      	adds	r0, #1
 800db88:	f43f aef7 	beq.w	800d97a <_printf_float+0xc2>
 800db8c:	f109 0901 	add.w	r9, r9, #1
 800db90:	e7ee      	b.n	800db70 <_printf_float+0x2b8>
 800db92:	bf00      	nop
 800db94:	7fefffff 	.word	0x7fefffff
 800db98:	08025840 	.word	0x08025840
 800db9c:	08025844 	.word	0x08025844
 800dba0:	0802584c 	.word	0x0802584c
 800dba4:	08025848 	.word	0x08025848
 800dba8:	08025850 	.word	0x08025850
 800dbac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	bfa8      	it	ge
 800dbb4:	461a      	movge	r2, r3
 800dbb6:	2a00      	cmp	r2, #0
 800dbb8:	4691      	mov	r9, r2
 800dbba:	dc37      	bgt.n	800dc2c <_printf_float+0x374>
 800dbbc:	f04f 0b00 	mov.w	fp, #0
 800dbc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dbc4:	f104 021a 	add.w	r2, r4, #26
 800dbc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dbca:	9305      	str	r3, [sp, #20]
 800dbcc:	eba3 0309 	sub.w	r3, r3, r9
 800dbd0:	455b      	cmp	r3, fp
 800dbd2:	dc33      	bgt.n	800dc3c <_printf_float+0x384>
 800dbd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	db3b      	blt.n	800dc54 <_printf_float+0x39c>
 800dbdc:	6823      	ldr	r3, [r4, #0]
 800dbde:	07da      	lsls	r2, r3, #31
 800dbe0:	d438      	bmi.n	800dc54 <_printf_float+0x39c>
 800dbe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbe4:	9b05      	ldr	r3, [sp, #20]
 800dbe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbe8:	1ad3      	subs	r3, r2, r3
 800dbea:	eba2 0901 	sub.w	r9, r2, r1
 800dbee:	4599      	cmp	r9, r3
 800dbf0:	bfa8      	it	ge
 800dbf2:	4699      	movge	r9, r3
 800dbf4:	f1b9 0f00 	cmp.w	r9, #0
 800dbf8:	dc35      	bgt.n	800dc66 <_printf_float+0x3ae>
 800dbfa:	f04f 0800 	mov.w	r8, #0
 800dbfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc02:	f104 0a1a 	add.w	sl, r4, #26
 800dc06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc0a:	1a9b      	subs	r3, r3, r2
 800dc0c:	eba3 0309 	sub.w	r3, r3, r9
 800dc10:	4543      	cmp	r3, r8
 800dc12:	f77f af79 	ble.w	800db08 <_printf_float+0x250>
 800dc16:	2301      	movs	r3, #1
 800dc18:	4652      	mov	r2, sl
 800dc1a:	4631      	mov	r1, r6
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	47b8      	blx	r7
 800dc20:	3001      	adds	r0, #1
 800dc22:	f43f aeaa 	beq.w	800d97a <_printf_float+0xc2>
 800dc26:	f108 0801 	add.w	r8, r8, #1
 800dc2a:	e7ec      	b.n	800dc06 <_printf_float+0x34e>
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	4631      	mov	r1, r6
 800dc30:	4642      	mov	r2, r8
 800dc32:	4628      	mov	r0, r5
 800dc34:	47b8      	blx	r7
 800dc36:	3001      	adds	r0, #1
 800dc38:	d1c0      	bne.n	800dbbc <_printf_float+0x304>
 800dc3a:	e69e      	b.n	800d97a <_printf_float+0xc2>
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	4631      	mov	r1, r6
 800dc40:	4628      	mov	r0, r5
 800dc42:	9205      	str	r2, [sp, #20]
 800dc44:	47b8      	blx	r7
 800dc46:	3001      	adds	r0, #1
 800dc48:	f43f ae97 	beq.w	800d97a <_printf_float+0xc2>
 800dc4c:	9a05      	ldr	r2, [sp, #20]
 800dc4e:	f10b 0b01 	add.w	fp, fp, #1
 800dc52:	e7b9      	b.n	800dbc8 <_printf_float+0x310>
 800dc54:	ee18 3a10 	vmov	r3, s16
 800dc58:	4652      	mov	r2, sl
 800dc5a:	4631      	mov	r1, r6
 800dc5c:	4628      	mov	r0, r5
 800dc5e:	47b8      	blx	r7
 800dc60:	3001      	adds	r0, #1
 800dc62:	d1be      	bne.n	800dbe2 <_printf_float+0x32a>
 800dc64:	e689      	b.n	800d97a <_printf_float+0xc2>
 800dc66:	9a05      	ldr	r2, [sp, #20]
 800dc68:	464b      	mov	r3, r9
 800dc6a:	4442      	add	r2, r8
 800dc6c:	4631      	mov	r1, r6
 800dc6e:	4628      	mov	r0, r5
 800dc70:	47b8      	blx	r7
 800dc72:	3001      	adds	r0, #1
 800dc74:	d1c1      	bne.n	800dbfa <_printf_float+0x342>
 800dc76:	e680      	b.n	800d97a <_printf_float+0xc2>
 800dc78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc7a:	2a01      	cmp	r2, #1
 800dc7c:	dc01      	bgt.n	800dc82 <_printf_float+0x3ca>
 800dc7e:	07db      	lsls	r3, r3, #31
 800dc80:	d538      	bpl.n	800dcf4 <_printf_float+0x43c>
 800dc82:	2301      	movs	r3, #1
 800dc84:	4642      	mov	r2, r8
 800dc86:	4631      	mov	r1, r6
 800dc88:	4628      	mov	r0, r5
 800dc8a:	47b8      	blx	r7
 800dc8c:	3001      	adds	r0, #1
 800dc8e:	f43f ae74 	beq.w	800d97a <_printf_float+0xc2>
 800dc92:	ee18 3a10 	vmov	r3, s16
 800dc96:	4652      	mov	r2, sl
 800dc98:	4631      	mov	r1, r6
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	47b8      	blx	r7
 800dc9e:	3001      	adds	r0, #1
 800dca0:	f43f ae6b 	beq.w	800d97a <_printf_float+0xc2>
 800dca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dca8:	2200      	movs	r2, #0
 800dcaa:	2300      	movs	r3, #0
 800dcac:	f7f2 ff24 	bl	8000af8 <__aeabi_dcmpeq>
 800dcb0:	b9d8      	cbnz	r0, 800dcea <_printf_float+0x432>
 800dcb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcb4:	f108 0201 	add.w	r2, r8, #1
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	4631      	mov	r1, r6
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	47b8      	blx	r7
 800dcc0:	3001      	adds	r0, #1
 800dcc2:	d10e      	bne.n	800dce2 <_printf_float+0x42a>
 800dcc4:	e659      	b.n	800d97a <_printf_float+0xc2>
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	4652      	mov	r2, sl
 800dcca:	4631      	mov	r1, r6
 800dccc:	4628      	mov	r0, r5
 800dcce:	47b8      	blx	r7
 800dcd0:	3001      	adds	r0, #1
 800dcd2:	f43f ae52 	beq.w	800d97a <_printf_float+0xc2>
 800dcd6:	f108 0801 	add.w	r8, r8, #1
 800dcda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	4543      	cmp	r3, r8
 800dce0:	dcf1      	bgt.n	800dcc6 <_printf_float+0x40e>
 800dce2:	464b      	mov	r3, r9
 800dce4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dce8:	e6dc      	b.n	800daa4 <_printf_float+0x1ec>
 800dcea:	f04f 0800 	mov.w	r8, #0
 800dcee:	f104 0a1a 	add.w	sl, r4, #26
 800dcf2:	e7f2      	b.n	800dcda <_printf_float+0x422>
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	4642      	mov	r2, r8
 800dcf8:	e7df      	b.n	800dcba <_printf_float+0x402>
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	464a      	mov	r2, r9
 800dcfe:	4631      	mov	r1, r6
 800dd00:	4628      	mov	r0, r5
 800dd02:	47b8      	blx	r7
 800dd04:	3001      	adds	r0, #1
 800dd06:	f43f ae38 	beq.w	800d97a <_printf_float+0xc2>
 800dd0a:	f108 0801 	add.w	r8, r8, #1
 800dd0e:	68e3      	ldr	r3, [r4, #12]
 800dd10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd12:	1a5b      	subs	r3, r3, r1
 800dd14:	4543      	cmp	r3, r8
 800dd16:	dcf0      	bgt.n	800dcfa <_printf_float+0x442>
 800dd18:	e6fa      	b.n	800db10 <_printf_float+0x258>
 800dd1a:	f04f 0800 	mov.w	r8, #0
 800dd1e:	f104 0919 	add.w	r9, r4, #25
 800dd22:	e7f4      	b.n	800dd0e <_printf_float+0x456>

0800dd24 <_printf_common>:
 800dd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd28:	4616      	mov	r6, r2
 800dd2a:	4699      	mov	r9, r3
 800dd2c:	688a      	ldr	r2, [r1, #8]
 800dd2e:	690b      	ldr	r3, [r1, #16]
 800dd30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd34:	4293      	cmp	r3, r2
 800dd36:	bfb8      	it	lt
 800dd38:	4613      	movlt	r3, r2
 800dd3a:	6033      	str	r3, [r6, #0]
 800dd3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd40:	4607      	mov	r7, r0
 800dd42:	460c      	mov	r4, r1
 800dd44:	b10a      	cbz	r2, 800dd4a <_printf_common+0x26>
 800dd46:	3301      	adds	r3, #1
 800dd48:	6033      	str	r3, [r6, #0]
 800dd4a:	6823      	ldr	r3, [r4, #0]
 800dd4c:	0699      	lsls	r1, r3, #26
 800dd4e:	bf42      	ittt	mi
 800dd50:	6833      	ldrmi	r3, [r6, #0]
 800dd52:	3302      	addmi	r3, #2
 800dd54:	6033      	strmi	r3, [r6, #0]
 800dd56:	6825      	ldr	r5, [r4, #0]
 800dd58:	f015 0506 	ands.w	r5, r5, #6
 800dd5c:	d106      	bne.n	800dd6c <_printf_common+0x48>
 800dd5e:	f104 0a19 	add.w	sl, r4, #25
 800dd62:	68e3      	ldr	r3, [r4, #12]
 800dd64:	6832      	ldr	r2, [r6, #0]
 800dd66:	1a9b      	subs	r3, r3, r2
 800dd68:	42ab      	cmp	r3, r5
 800dd6a:	dc26      	bgt.n	800ddba <_printf_common+0x96>
 800dd6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd70:	1e13      	subs	r3, r2, #0
 800dd72:	6822      	ldr	r2, [r4, #0]
 800dd74:	bf18      	it	ne
 800dd76:	2301      	movne	r3, #1
 800dd78:	0692      	lsls	r2, r2, #26
 800dd7a:	d42b      	bmi.n	800ddd4 <_printf_common+0xb0>
 800dd7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd80:	4649      	mov	r1, r9
 800dd82:	4638      	mov	r0, r7
 800dd84:	47c0      	blx	r8
 800dd86:	3001      	adds	r0, #1
 800dd88:	d01e      	beq.n	800ddc8 <_printf_common+0xa4>
 800dd8a:	6823      	ldr	r3, [r4, #0]
 800dd8c:	68e5      	ldr	r5, [r4, #12]
 800dd8e:	6832      	ldr	r2, [r6, #0]
 800dd90:	f003 0306 	and.w	r3, r3, #6
 800dd94:	2b04      	cmp	r3, #4
 800dd96:	bf08      	it	eq
 800dd98:	1aad      	subeq	r5, r5, r2
 800dd9a:	68a3      	ldr	r3, [r4, #8]
 800dd9c:	6922      	ldr	r2, [r4, #16]
 800dd9e:	bf0c      	ite	eq
 800dda0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dda4:	2500      	movne	r5, #0
 800dda6:	4293      	cmp	r3, r2
 800dda8:	bfc4      	itt	gt
 800ddaa:	1a9b      	subgt	r3, r3, r2
 800ddac:	18ed      	addgt	r5, r5, r3
 800ddae:	2600      	movs	r6, #0
 800ddb0:	341a      	adds	r4, #26
 800ddb2:	42b5      	cmp	r5, r6
 800ddb4:	d11a      	bne.n	800ddec <_printf_common+0xc8>
 800ddb6:	2000      	movs	r0, #0
 800ddb8:	e008      	b.n	800ddcc <_printf_common+0xa8>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	4652      	mov	r2, sl
 800ddbe:	4649      	mov	r1, r9
 800ddc0:	4638      	mov	r0, r7
 800ddc2:	47c0      	blx	r8
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	d103      	bne.n	800ddd0 <_printf_common+0xac>
 800ddc8:	f04f 30ff 	mov.w	r0, #4294967295
 800ddcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd0:	3501      	adds	r5, #1
 800ddd2:	e7c6      	b.n	800dd62 <_printf_common+0x3e>
 800ddd4:	18e1      	adds	r1, r4, r3
 800ddd6:	1c5a      	adds	r2, r3, #1
 800ddd8:	2030      	movs	r0, #48	; 0x30
 800ddda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ddde:	4422      	add	r2, r4
 800dde0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dde4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dde8:	3302      	adds	r3, #2
 800ddea:	e7c7      	b.n	800dd7c <_printf_common+0x58>
 800ddec:	2301      	movs	r3, #1
 800ddee:	4622      	mov	r2, r4
 800ddf0:	4649      	mov	r1, r9
 800ddf2:	4638      	mov	r0, r7
 800ddf4:	47c0      	blx	r8
 800ddf6:	3001      	adds	r0, #1
 800ddf8:	d0e6      	beq.n	800ddc8 <_printf_common+0xa4>
 800ddfa:	3601      	adds	r6, #1
 800ddfc:	e7d9      	b.n	800ddb2 <_printf_common+0x8e>
	...

0800de00 <_printf_i>:
 800de00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de04:	460c      	mov	r4, r1
 800de06:	4691      	mov	r9, r2
 800de08:	7e27      	ldrb	r7, [r4, #24]
 800de0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800de0c:	2f78      	cmp	r7, #120	; 0x78
 800de0e:	4680      	mov	r8, r0
 800de10:	469a      	mov	sl, r3
 800de12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de16:	d807      	bhi.n	800de28 <_printf_i+0x28>
 800de18:	2f62      	cmp	r7, #98	; 0x62
 800de1a:	d80a      	bhi.n	800de32 <_printf_i+0x32>
 800de1c:	2f00      	cmp	r7, #0
 800de1e:	f000 80d8 	beq.w	800dfd2 <_printf_i+0x1d2>
 800de22:	2f58      	cmp	r7, #88	; 0x58
 800de24:	f000 80a3 	beq.w	800df6e <_printf_i+0x16e>
 800de28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800de2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de30:	e03a      	b.n	800dea8 <_printf_i+0xa8>
 800de32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de36:	2b15      	cmp	r3, #21
 800de38:	d8f6      	bhi.n	800de28 <_printf_i+0x28>
 800de3a:	a001      	add	r0, pc, #4	; (adr r0, 800de40 <_printf_i+0x40>)
 800de3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800de40:	0800de99 	.word	0x0800de99
 800de44:	0800dead 	.word	0x0800dead
 800de48:	0800de29 	.word	0x0800de29
 800de4c:	0800de29 	.word	0x0800de29
 800de50:	0800de29 	.word	0x0800de29
 800de54:	0800de29 	.word	0x0800de29
 800de58:	0800dead 	.word	0x0800dead
 800de5c:	0800de29 	.word	0x0800de29
 800de60:	0800de29 	.word	0x0800de29
 800de64:	0800de29 	.word	0x0800de29
 800de68:	0800de29 	.word	0x0800de29
 800de6c:	0800dfb9 	.word	0x0800dfb9
 800de70:	0800dedd 	.word	0x0800dedd
 800de74:	0800df9b 	.word	0x0800df9b
 800de78:	0800de29 	.word	0x0800de29
 800de7c:	0800de29 	.word	0x0800de29
 800de80:	0800dfdb 	.word	0x0800dfdb
 800de84:	0800de29 	.word	0x0800de29
 800de88:	0800dedd 	.word	0x0800dedd
 800de8c:	0800de29 	.word	0x0800de29
 800de90:	0800de29 	.word	0x0800de29
 800de94:	0800dfa3 	.word	0x0800dfa3
 800de98:	680b      	ldr	r3, [r1, #0]
 800de9a:	1d1a      	adds	r2, r3, #4
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	600a      	str	r2, [r1, #0]
 800dea0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dea8:	2301      	movs	r3, #1
 800deaa:	e0a3      	b.n	800dff4 <_printf_i+0x1f4>
 800deac:	6825      	ldr	r5, [r4, #0]
 800deae:	6808      	ldr	r0, [r1, #0]
 800deb0:	062e      	lsls	r6, r5, #24
 800deb2:	f100 0304 	add.w	r3, r0, #4
 800deb6:	d50a      	bpl.n	800dece <_printf_i+0xce>
 800deb8:	6805      	ldr	r5, [r0, #0]
 800deba:	600b      	str	r3, [r1, #0]
 800debc:	2d00      	cmp	r5, #0
 800debe:	da03      	bge.n	800dec8 <_printf_i+0xc8>
 800dec0:	232d      	movs	r3, #45	; 0x2d
 800dec2:	426d      	negs	r5, r5
 800dec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dec8:	485e      	ldr	r0, [pc, #376]	; (800e044 <_printf_i+0x244>)
 800deca:	230a      	movs	r3, #10
 800decc:	e019      	b.n	800df02 <_printf_i+0x102>
 800dece:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ded2:	6805      	ldr	r5, [r0, #0]
 800ded4:	600b      	str	r3, [r1, #0]
 800ded6:	bf18      	it	ne
 800ded8:	b22d      	sxthne	r5, r5
 800deda:	e7ef      	b.n	800debc <_printf_i+0xbc>
 800dedc:	680b      	ldr	r3, [r1, #0]
 800dede:	6825      	ldr	r5, [r4, #0]
 800dee0:	1d18      	adds	r0, r3, #4
 800dee2:	6008      	str	r0, [r1, #0]
 800dee4:	0628      	lsls	r0, r5, #24
 800dee6:	d501      	bpl.n	800deec <_printf_i+0xec>
 800dee8:	681d      	ldr	r5, [r3, #0]
 800deea:	e002      	b.n	800def2 <_printf_i+0xf2>
 800deec:	0669      	lsls	r1, r5, #25
 800deee:	d5fb      	bpl.n	800dee8 <_printf_i+0xe8>
 800def0:	881d      	ldrh	r5, [r3, #0]
 800def2:	4854      	ldr	r0, [pc, #336]	; (800e044 <_printf_i+0x244>)
 800def4:	2f6f      	cmp	r7, #111	; 0x6f
 800def6:	bf0c      	ite	eq
 800def8:	2308      	moveq	r3, #8
 800defa:	230a      	movne	r3, #10
 800defc:	2100      	movs	r1, #0
 800defe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800df02:	6866      	ldr	r6, [r4, #4]
 800df04:	60a6      	str	r6, [r4, #8]
 800df06:	2e00      	cmp	r6, #0
 800df08:	bfa2      	ittt	ge
 800df0a:	6821      	ldrge	r1, [r4, #0]
 800df0c:	f021 0104 	bicge.w	r1, r1, #4
 800df10:	6021      	strge	r1, [r4, #0]
 800df12:	b90d      	cbnz	r5, 800df18 <_printf_i+0x118>
 800df14:	2e00      	cmp	r6, #0
 800df16:	d04d      	beq.n	800dfb4 <_printf_i+0x1b4>
 800df18:	4616      	mov	r6, r2
 800df1a:	fbb5 f1f3 	udiv	r1, r5, r3
 800df1e:	fb03 5711 	mls	r7, r3, r1, r5
 800df22:	5dc7      	ldrb	r7, [r0, r7]
 800df24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df28:	462f      	mov	r7, r5
 800df2a:	42bb      	cmp	r3, r7
 800df2c:	460d      	mov	r5, r1
 800df2e:	d9f4      	bls.n	800df1a <_printf_i+0x11a>
 800df30:	2b08      	cmp	r3, #8
 800df32:	d10b      	bne.n	800df4c <_printf_i+0x14c>
 800df34:	6823      	ldr	r3, [r4, #0]
 800df36:	07df      	lsls	r7, r3, #31
 800df38:	d508      	bpl.n	800df4c <_printf_i+0x14c>
 800df3a:	6923      	ldr	r3, [r4, #16]
 800df3c:	6861      	ldr	r1, [r4, #4]
 800df3e:	4299      	cmp	r1, r3
 800df40:	bfde      	ittt	le
 800df42:	2330      	movle	r3, #48	; 0x30
 800df44:	f806 3c01 	strble.w	r3, [r6, #-1]
 800df48:	f106 36ff 	addle.w	r6, r6, #4294967295
 800df4c:	1b92      	subs	r2, r2, r6
 800df4e:	6122      	str	r2, [r4, #16]
 800df50:	f8cd a000 	str.w	sl, [sp]
 800df54:	464b      	mov	r3, r9
 800df56:	aa03      	add	r2, sp, #12
 800df58:	4621      	mov	r1, r4
 800df5a:	4640      	mov	r0, r8
 800df5c:	f7ff fee2 	bl	800dd24 <_printf_common>
 800df60:	3001      	adds	r0, #1
 800df62:	d14c      	bne.n	800dffe <_printf_i+0x1fe>
 800df64:	f04f 30ff 	mov.w	r0, #4294967295
 800df68:	b004      	add	sp, #16
 800df6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df6e:	4835      	ldr	r0, [pc, #212]	; (800e044 <_printf_i+0x244>)
 800df70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800df74:	6823      	ldr	r3, [r4, #0]
 800df76:	680e      	ldr	r6, [r1, #0]
 800df78:	061f      	lsls	r7, r3, #24
 800df7a:	f856 5b04 	ldr.w	r5, [r6], #4
 800df7e:	600e      	str	r6, [r1, #0]
 800df80:	d514      	bpl.n	800dfac <_printf_i+0x1ac>
 800df82:	07d9      	lsls	r1, r3, #31
 800df84:	bf44      	itt	mi
 800df86:	f043 0320 	orrmi.w	r3, r3, #32
 800df8a:	6023      	strmi	r3, [r4, #0]
 800df8c:	b91d      	cbnz	r5, 800df96 <_printf_i+0x196>
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	f023 0320 	bic.w	r3, r3, #32
 800df94:	6023      	str	r3, [r4, #0]
 800df96:	2310      	movs	r3, #16
 800df98:	e7b0      	b.n	800defc <_printf_i+0xfc>
 800df9a:	6823      	ldr	r3, [r4, #0]
 800df9c:	f043 0320 	orr.w	r3, r3, #32
 800dfa0:	6023      	str	r3, [r4, #0]
 800dfa2:	2378      	movs	r3, #120	; 0x78
 800dfa4:	4828      	ldr	r0, [pc, #160]	; (800e048 <_printf_i+0x248>)
 800dfa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dfaa:	e7e3      	b.n	800df74 <_printf_i+0x174>
 800dfac:	065e      	lsls	r6, r3, #25
 800dfae:	bf48      	it	mi
 800dfb0:	b2ad      	uxthmi	r5, r5
 800dfb2:	e7e6      	b.n	800df82 <_printf_i+0x182>
 800dfb4:	4616      	mov	r6, r2
 800dfb6:	e7bb      	b.n	800df30 <_printf_i+0x130>
 800dfb8:	680b      	ldr	r3, [r1, #0]
 800dfba:	6826      	ldr	r6, [r4, #0]
 800dfbc:	6960      	ldr	r0, [r4, #20]
 800dfbe:	1d1d      	adds	r5, r3, #4
 800dfc0:	600d      	str	r5, [r1, #0]
 800dfc2:	0635      	lsls	r5, r6, #24
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	d501      	bpl.n	800dfcc <_printf_i+0x1cc>
 800dfc8:	6018      	str	r0, [r3, #0]
 800dfca:	e002      	b.n	800dfd2 <_printf_i+0x1d2>
 800dfcc:	0671      	lsls	r1, r6, #25
 800dfce:	d5fb      	bpl.n	800dfc8 <_printf_i+0x1c8>
 800dfd0:	8018      	strh	r0, [r3, #0]
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	6123      	str	r3, [r4, #16]
 800dfd6:	4616      	mov	r6, r2
 800dfd8:	e7ba      	b.n	800df50 <_printf_i+0x150>
 800dfda:	680b      	ldr	r3, [r1, #0]
 800dfdc:	1d1a      	adds	r2, r3, #4
 800dfde:	600a      	str	r2, [r1, #0]
 800dfe0:	681e      	ldr	r6, [r3, #0]
 800dfe2:	6862      	ldr	r2, [r4, #4]
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	f7f2 f912 	bl	8000210 <memchr>
 800dfec:	b108      	cbz	r0, 800dff2 <_printf_i+0x1f2>
 800dfee:	1b80      	subs	r0, r0, r6
 800dff0:	6060      	str	r0, [r4, #4]
 800dff2:	6863      	ldr	r3, [r4, #4]
 800dff4:	6123      	str	r3, [r4, #16]
 800dff6:	2300      	movs	r3, #0
 800dff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dffc:	e7a8      	b.n	800df50 <_printf_i+0x150>
 800dffe:	6923      	ldr	r3, [r4, #16]
 800e000:	4632      	mov	r2, r6
 800e002:	4649      	mov	r1, r9
 800e004:	4640      	mov	r0, r8
 800e006:	47d0      	blx	sl
 800e008:	3001      	adds	r0, #1
 800e00a:	d0ab      	beq.n	800df64 <_printf_i+0x164>
 800e00c:	6823      	ldr	r3, [r4, #0]
 800e00e:	079b      	lsls	r3, r3, #30
 800e010:	d413      	bmi.n	800e03a <_printf_i+0x23a>
 800e012:	68e0      	ldr	r0, [r4, #12]
 800e014:	9b03      	ldr	r3, [sp, #12]
 800e016:	4298      	cmp	r0, r3
 800e018:	bfb8      	it	lt
 800e01a:	4618      	movlt	r0, r3
 800e01c:	e7a4      	b.n	800df68 <_printf_i+0x168>
 800e01e:	2301      	movs	r3, #1
 800e020:	4632      	mov	r2, r6
 800e022:	4649      	mov	r1, r9
 800e024:	4640      	mov	r0, r8
 800e026:	47d0      	blx	sl
 800e028:	3001      	adds	r0, #1
 800e02a:	d09b      	beq.n	800df64 <_printf_i+0x164>
 800e02c:	3501      	adds	r5, #1
 800e02e:	68e3      	ldr	r3, [r4, #12]
 800e030:	9903      	ldr	r1, [sp, #12]
 800e032:	1a5b      	subs	r3, r3, r1
 800e034:	42ab      	cmp	r3, r5
 800e036:	dcf2      	bgt.n	800e01e <_printf_i+0x21e>
 800e038:	e7eb      	b.n	800e012 <_printf_i+0x212>
 800e03a:	2500      	movs	r5, #0
 800e03c:	f104 0619 	add.w	r6, r4, #25
 800e040:	e7f5      	b.n	800e02e <_printf_i+0x22e>
 800e042:	bf00      	nop
 800e044:	08025852 	.word	0x08025852
 800e048:	08025863 	.word	0x08025863

0800e04c <_scanf_float>:
 800e04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e050:	b087      	sub	sp, #28
 800e052:	4617      	mov	r7, r2
 800e054:	9303      	str	r3, [sp, #12]
 800e056:	688b      	ldr	r3, [r1, #8]
 800e058:	1e5a      	subs	r2, r3, #1
 800e05a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e05e:	bf83      	ittte	hi
 800e060:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e064:	195b      	addhi	r3, r3, r5
 800e066:	9302      	strhi	r3, [sp, #8]
 800e068:	2300      	movls	r3, #0
 800e06a:	bf86      	itte	hi
 800e06c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e070:	608b      	strhi	r3, [r1, #8]
 800e072:	9302      	strls	r3, [sp, #8]
 800e074:	680b      	ldr	r3, [r1, #0]
 800e076:	468b      	mov	fp, r1
 800e078:	2500      	movs	r5, #0
 800e07a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e07e:	f84b 3b1c 	str.w	r3, [fp], #28
 800e082:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e086:	4680      	mov	r8, r0
 800e088:	460c      	mov	r4, r1
 800e08a:	465e      	mov	r6, fp
 800e08c:	46aa      	mov	sl, r5
 800e08e:	46a9      	mov	r9, r5
 800e090:	9501      	str	r5, [sp, #4]
 800e092:	68a2      	ldr	r2, [r4, #8]
 800e094:	b152      	cbz	r2, 800e0ac <_scanf_float+0x60>
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	2b4e      	cmp	r3, #78	; 0x4e
 800e09c:	d864      	bhi.n	800e168 <_scanf_float+0x11c>
 800e09e:	2b40      	cmp	r3, #64	; 0x40
 800e0a0:	d83c      	bhi.n	800e11c <_scanf_float+0xd0>
 800e0a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e0a6:	b2c8      	uxtb	r0, r1
 800e0a8:	280e      	cmp	r0, #14
 800e0aa:	d93a      	bls.n	800e122 <_scanf_float+0xd6>
 800e0ac:	f1b9 0f00 	cmp.w	r9, #0
 800e0b0:	d003      	beq.n	800e0ba <_scanf_float+0x6e>
 800e0b2:	6823      	ldr	r3, [r4, #0]
 800e0b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e0b8:	6023      	str	r3, [r4, #0]
 800e0ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0be:	f1ba 0f01 	cmp.w	sl, #1
 800e0c2:	f200 8113 	bhi.w	800e2ec <_scanf_float+0x2a0>
 800e0c6:	455e      	cmp	r6, fp
 800e0c8:	f200 8105 	bhi.w	800e2d6 <_scanf_float+0x28a>
 800e0cc:	2501      	movs	r5, #1
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	b007      	add	sp, #28
 800e0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e0da:	2a0d      	cmp	r2, #13
 800e0dc:	d8e6      	bhi.n	800e0ac <_scanf_float+0x60>
 800e0de:	a101      	add	r1, pc, #4	; (adr r1, 800e0e4 <_scanf_float+0x98>)
 800e0e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e0e4:	0800e223 	.word	0x0800e223
 800e0e8:	0800e0ad 	.word	0x0800e0ad
 800e0ec:	0800e0ad 	.word	0x0800e0ad
 800e0f0:	0800e0ad 	.word	0x0800e0ad
 800e0f4:	0800e283 	.word	0x0800e283
 800e0f8:	0800e25b 	.word	0x0800e25b
 800e0fc:	0800e0ad 	.word	0x0800e0ad
 800e100:	0800e0ad 	.word	0x0800e0ad
 800e104:	0800e231 	.word	0x0800e231
 800e108:	0800e0ad 	.word	0x0800e0ad
 800e10c:	0800e0ad 	.word	0x0800e0ad
 800e110:	0800e0ad 	.word	0x0800e0ad
 800e114:	0800e0ad 	.word	0x0800e0ad
 800e118:	0800e1e9 	.word	0x0800e1e9
 800e11c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e120:	e7db      	b.n	800e0da <_scanf_float+0x8e>
 800e122:	290e      	cmp	r1, #14
 800e124:	d8c2      	bhi.n	800e0ac <_scanf_float+0x60>
 800e126:	a001      	add	r0, pc, #4	; (adr r0, 800e12c <_scanf_float+0xe0>)
 800e128:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e12c:	0800e1db 	.word	0x0800e1db
 800e130:	0800e0ad 	.word	0x0800e0ad
 800e134:	0800e1db 	.word	0x0800e1db
 800e138:	0800e26f 	.word	0x0800e26f
 800e13c:	0800e0ad 	.word	0x0800e0ad
 800e140:	0800e189 	.word	0x0800e189
 800e144:	0800e1c5 	.word	0x0800e1c5
 800e148:	0800e1c5 	.word	0x0800e1c5
 800e14c:	0800e1c5 	.word	0x0800e1c5
 800e150:	0800e1c5 	.word	0x0800e1c5
 800e154:	0800e1c5 	.word	0x0800e1c5
 800e158:	0800e1c5 	.word	0x0800e1c5
 800e15c:	0800e1c5 	.word	0x0800e1c5
 800e160:	0800e1c5 	.word	0x0800e1c5
 800e164:	0800e1c5 	.word	0x0800e1c5
 800e168:	2b6e      	cmp	r3, #110	; 0x6e
 800e16a:	d809      	bhi.n	800e180 <_scanf_float+0x134>
 800e16c:	2b60      	cmp	r3, #96	; 0x60
 800e16e:	d8b2      	bhi.n	800e0d6 <_scanf_float+0x8a>
 800e170:	2b54      	cmp	r3, #84	; 0x54
 800e172:	d077      	beq.n	800e264 <_scanf_float+0x218>
 800e174:	2b59      	cmp	r3, #89	; 0x59
 800e176:	d199      	bne.n	800e0ac <_scanf_float+0x60>
 800e178:	2d07      	cmp	r5, #7
 800e17a:	d197      	bne.n	800e0ac <_scanf_float+0x60>
 800e17c:	2508      	movs	r5, #8
 800e17e:	e029      	b.n	800e1d4 <_scanf_float+0x188>
 800e180:	2b74      	cmp	r3, #116	; 0x74
 800e182:	d06f      	beq.n	800e264 <_scanf_float+0x218>
 800e184:	2b79      	cmp	r3, #121	; 0x79
 800e186:	e7f6      	b.n	800e176 <_scanf_float+0x12a>
 800e188:	6821      	ldr	r1, [r4, #0]
 800e18a:	05c8      	lsls	r0, r1, #23
 800e18c:	d51a      	bpl.n	800e1c4 <_scanf_float+0x178>
 800e18e:	9b02      	ldr	r3, [sp, #8]
 800e190:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e194:	6021      	str	r1, [r4, #0]
 800e196:	f109 0901 	add.w	r9, r9, #1
 800e19a:	b11b      	cbz	r3, 800e1a4 <_scanf_float+0x158>
 800e19c:	3b01      	subs	r3, #1
 800e19e:	3201      	adds	r2, #1
 800e1a0:	9302      	str	r3, [sp, #8]
 800e1a2:	60a2      	str	r2, [r4, #8]
 800e1a4:	68a3      	ldr	r3, [r4, #8]
 800e1a6:	3b01      	subs	r3, #1
 800e1a8:	60a3      	str	r3, [r4, #8]
 800e1aa:	6923      	ldr	r3, [r4, #16]
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	6123      	str	r3, [r4, #16]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	3b01      	subs	r3, #1
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	607b      	str	r3, [r7, #4]
 800e1b8:	f340 8084 	ble.w	800e2c4 <_scanf_float+0x278>
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	3301      	adds	r3, #1
 800e1c0:	603b      	str	r3, [r7, #0]
 800e1c2:	e766      	b.n	800e092 <_scanf_float+0x46>
 800e1c4:	eb1a 0f05 	cmn.w	sl, r5
 800e1c8:	f47f af70 	bne.w	800e0ac <_scanf_float+0x60>
 800e1cc:	6822      	ldr	r2, [r4, #0]
 800e1ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e1d2:	6022      	str	r2, [r4, #0]
 800e1d4:	f806 3b01 	strb.w	r3, [r6], #1
 800e1d8:	e7e4      	b.n	800e1a4 <_scanf_float+0x158>
 800e1da:	6822      	ldr	r2, [r4, #0]
 800e1dc:	0610      	lsls	r0, r2, #24
 800e1de:	f57f af65 	bpl.w	800e0ac <_scanf_float+0x60>
 800e1e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e1e6:	e7f4      	b.n	800e1d2 <_scanf_float+0x186>
 800e1e8:	f1ba 0f00 	cmp.w	sl, #0
 800e1ec:	d10e      	bne.n	800e20c <_scanf_float+0x1c0>
 800e1ee:	f1b9 0f00 	cmp.w	r9, #0
 800e1f2:	d10e      	bne.n	800e212 <_scanf_float+0x1c6>
 800e1f4:	6822      	ldr	r2, [r4, #0]
 800e1f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e1fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e1fe:	d108      	bne.n	800e212 <_scanf_float+0x1c6>
 800e200:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e204:	6022      	str	r2, [r4, #0]
 800e206:	f04f 0a01 	mov.w	sl, #1
 800e20a:	e7e3      	b.n	800e1d4 <_scanf_float+0x188>
 800e20c:	f1ba 0f02 	cmp.w	sl, #2
 800e210:	d055      	beq.n	800e2be <_scanf_float+0x272>
 800e212:	2d01      	cmp	r5, #1
 800e214:	d002      	beq.n	800e21c <_scanf_float+0x1d0>
 800e216:	2d04      	cmp	r5, #4
 800e218:	f47f af48 	bne.w	800e0ac <_scanf_float+0x60>
 800e21c:	3501      	adds	r5, #1
 800e21e:	b2ed      	uxtb	r5, r5
 800e220:	e7d8      	b.n	800e1d4 <_scanf_float+0x188>
 800e222:	f1ba 0f01 	cmp.w	sl, #1
 800e226:	f47f af41 	bne.w	800e0ac <_scanf_float+0x60>
 800e22a:	f04f 0a02 	mov.w	sl, #2
 800e22e:	e7d1      	b.n	800e1d4 <_scanf_float+0x188>
 800e230:	b97d      	cbnz	r5, 800e252 <_scanf_float+0x206>
 800e232:	f1b9 0f00 	cmp.w	r9, #0
 800e236:	f47f af3c 	bne.w	800e0b2 <_scanf_float+0x66>
 800e23a:	6822      	ldr	r2, [r4, #0]
 800e23c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e240:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e244:	f47f af39 	bne.w	800e0ba <_scanf_float+0x6e>
 800e248:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e24c:	6022      	str	r2, [r4, #0]
 800e24e:	2501      	movs	r5, #1
 800e250:	e7c0      	b.n	800e1d4 <_scanf_float+0x188>
 800e252:	2d03      	cmp	r5, #3
 800e254:	d0e2      	beq.n	800e21c <_scanf_float+0x1d0>
 800e256:	2d05      	cmp	r5, #5
 800e258:	e7de      	b.n	800e218 <_scanf_float+0x1cc>
 800e25a:	2d02      	cmp	r5, #2
 800e25c:	f47f af26 	bne.w	800e0ac <_scanf_float+0x60>
 800e260:	2503      	movs	r5, #3
 800e262:	e7b7      	b.n	800e1d4 <_scanf_float+0x188>
 800e264:	2d06      	cmp	r5, #6
 800e266:	f47f af21 	bne.w	800e0ac <_scanf_float+0x60>
 800e26a:	2507      	movs	r5, #7
 800e26c:	e7b2      	b.n	800e1d4 <_scanf_float+0x188>
 800e26e:	6822      	ldr	r2, [r4, #0]
 800e270:	0591      	lsls	r1, r2, #22
 800e272:	f57f af1b 	bpl.w	800e0ac <_scanf_float+0x60>
 800e276:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e27a:	6022      	str	r2, [r4, #0]
 800e27c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e280:	e7a8      	b.n	800e1d4 <_scanf_float+0x188>
 800e282:	6822      	ldr	r2, [r4, #0]
 800e284:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e288:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e28c:	d006      	beq.n	800e29c <_scanf_float+0x250>
 800e28e:	0550      	lsls	r0, r2, #21
 800e290:	f57f af0c 	bpl.w	800e0ac <_scanf_float+0x60>
 800e294:	f1b9 0f00 	cmp.w	r9, #0
 800e298:	f43f af0f 	beq.w	800e0ba <_scanf_float+0x6e>
 800e29c:	0591      	lsls	r1, r2, #22
 800e29e:	bf58      	it	pl
 800e2a0:	9901      	ldrpl	r1, [sp, #4]
 800e2a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e2a6:	bf58      	it	pl
 800e2a8:	eba9 0101 	subpl.w	r1, r9, r1
 800e2ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e2b0:	bf58      	it	pl
 800e2b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e2b6:	6022      	str	r2, [r4, #0]
 800e2b8:	f04f 0900 	mov.w	r9, #0
 800e2bc:	e78a      	b.n	800e1d4 <_scanf_float+0x188>
 800e2be:	f04f 0a03 	mov.w	sl, #3
 800e2c2:	e787      	b.n	800e1d4 <_scanf_float+0x188>
 800e2c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e2c8:	4639      	mov	r1, r7
 800e2ca:	4640      	mov	r0, r8
 800e2cc:	4798      	blx	r3
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	f43f aedf 	beq.w	800e092 <_scanf_float+0x46>
 800e2d4:	e6ea      	b.n	800e0ac <_scanf_float+0x60>
 800e2d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e2de:	463a      	mov	r2, r7
 800e2e0:	4640      	mov	r0, r8
 800e2e2:	4798      	blx	r3
 800e2e4:	6923      	ldr	r3, [r4, #16]
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	6123      	str	r3, [r4, #16]
 800e2ea:	e6ec      	b.n	800e0c6 <_scanf_float+0x7a>
 800e2ec:	1e6b      	subs	r3, r5, #1
 800e2ee:	2b06      	cmp	r3, #6
 800e2f0:	d825      	bhi.n	800e33e <_scanf_float+0x2f2>
 800e2f2:	2d02      	cmp	r5, #2
 800e2f4:	d836      	bhi.n	800e364 <_scanf_float+0x318>
 800e2f6:	455e      	cmp	r6, fp
 800e2f8:	f67f aee8 	bls.w	800e0cc <_scanf_float+0x80>
 800e2fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e300:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e304:	463a      	mov	r2, r7
 800e306:	4640      	mov	r0, r8
 800e308:	4798      	blx	r3
 800e30a:	6923      	ldr	r3, [r4, #16]
 800e30c:	3b01      	subs	r3, #1
 800e30e:	6123      	str	r3, [r4, #16]
 800e310:	e7f1      	b.n	800e2f6 <_scanf_float+0x2aa>
 800e312:	9802      	ldr	r0, [sp, #8]
 800e314:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e318:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e31c:	9002      	str	r0, [sp, #8]
 800e31e:	463a      	mov	r2, r7
 800e320:	4640      	mov	r0, r8
 800e322:	4798      	blx	r3
 800e324:	6923      	ldr	r3, [r4, #16]
 800e326:	3b01      	subs	r3, #1
 800e328:	6123      	str	r3, [r4, #16]
 800e32a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e32e:	fa5f fa8a 	uxtb.w	sl, sl
 800e332:	f1ba 0f02 	cmp.w	sl, #2
 800e336:	d1ec      	bne.n	800e312 <_scanf_float+0x2c6>
 800e338:	3d03      	subs	r5, #3
 800e33a:	b2ed      	uxtb	r5, r5
 800e33c:	1b76      	subs	r6, r6, r5
 800e33e:	6823      	ldr	r3, [r4, #0]
 800e340:	05da      	lsls	r2, r3, #23
 800e342:	d52f      	bpl.n	800e3a4 <_scanf_float+0x358>
 800e344:	055b      	lsls	r3, r3, #21
 800e346:	d510      	bpl.n	800e36a <_scanf_float+0x31e>
 800e348:	455e      	cmp	r6, fp
 800e34a:	f67f aebf 	bls.w	800e0cc <_scanf_float+0x80>
 800e34e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e352:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e356:	463a      	mov	r2, r7
 800e358:	4640      	mov	r0, r8
 800e35a:	4798      	blx	r3
 800e35c:	6923      	ldr	r3, [r4, #16]
 800e35e:	3b01      	subs	r3, #1
 800e360:	6123      	str	r3, [r4, #16]
 800e362:	e7f1      	b.n	800e348 <_scanf_float+0x2fc>
 800e364:	46aa      	mov	sl, r5
 800e366:	9602      	str	r6, [sp, #8]
 800e368:	e7df      	b.n	800e32a <_scanf_float+0x2de>
 800e36a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e36e:	6923      	ldr	r3, [r4, #16]
 800e370:	2965      	cmp	r1, #101	; 0x65
 800e372:	f103 33ff 	add.w	r3, r3, #4294967295
 800e376:	f106 35ff 	add.w	r5, r6, #4294967295
 800e37a:	6123      	str	r3, [r4, #16]
 800e37c:	d00c      	beq.n	800e398 <_scanf_float+0x34c>
 800e37e:	2945      	cmp	r1, #69	; 0x45
 800e380:	d00a      	beq.n	800e398 <_scanf_float+0x34c>
 800e382:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e386:	463a      	mov	r2, r7
 800e388:	4640      	mov	r0, r8
 800e38a:	4798      	blx	r3
 800e38c:	6923      	ldr	r3, [r4, #16]
 800e38e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e392:	3b01      	subs	r3, #1
 800e394:	1eb5      	subs	r5, r6, #2
 800e396:	6123      	str	r3, [r4, #16]
 800e398:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e39c:	463a      	mov	r2, r7
 800e39e:	4640      	mov	r0, r8
 800e3a0:	4798      	blx	r3
 800e3a2:	462e      	mov	r6, r5
 800e3a4:	6825      	ldr	r5, [r4, #0]
 800e3a6:	f015 0510 	ands.w	r5, r5, #16
 800e3aa:	d158      	bne.n	800e45e <_scanf_float+0x412>
 800e3ac:	7035      	strb	r5, [r6, #0]
 800e3ae:	6823      	ldr	r3, [r4, #0]
 800e3b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e3b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3b8:	d11c      	bne.n	800e3f4 <_scanf_float+0x3a8>
 800e3ba:	9b01      	ldr	r3, [sp, #4]
 800e3bc:	454b      	cmp	r3, r9
 800e3be:	eba3 0209 	sub.w	r2, r3, r9
 800e3c2:	d124      	bne.n	800e40e <_scanf_float+0x3c2>
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	4659      	mov	r1, fp
 800e3c8:	4640      	mov	r0, r8
 800e3ca:	f000 fe9b 	bl	800f104 <_strtod_r>
 800e3ce:	9b03      	ldr	r3, [sp, #12]
 800e3d0:	6821      	ldr	r1, [r4, #0]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f011 0f02 	tst.w	r1, #2
 800e3d8:	ec57 6b10 	vmov	r6, r7, d0
 800e3dc:	f103 0204 	add.w	r2, r3, #4
 800e3e0:	d020      	beq.n	800e424 <_scanf_float+0x3d8>
 800e3e2:	9903      	ldr	r1, [sp, #12]
 800e3e4:	600a      	str	r2, [r1, #0]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	e9c3 6700 	strd	r6, r7, [r3]
 800e3ec:	68e3      	ldr	r3, [r4, #12]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	60e3      	str	r3, [r4, #12]
 800e3f2:	e66c      	b.n	800e0ce <_scanf_float+0x82>
 800e3f4:	9b04      	ldr	r3, [sp, #16]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d0e4      	beq.n	800e3c4 <_scanf_float+0x378>
 800e3fa:	9905      	ldr	r1, [sp, #20]
 800e3fc:	230a      	movs	r3, #10
 800e3fe:	462a      	mov	r2, r5
 800e400:	3101      	adds	r1, #1
 800e402:	4640      	mov	r0, r8
 800e404:	f000 ff70 	bl	800f2e8 <_strtol_r>
 800e408:	9b04      	ldr	r3, [sp, #16]
 800e40a:	9e05      	ldr	r6, [sp, #20]
 800e40c:	1ac2      	subs	r2, r0, r3
 800e40e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e412:	429e      	cmp	r6, r3
 800e414:	bf28      	it	cs
 800e416:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e41a:	4912      	ldr	r1, [pc, #72]	; (800e464 <_scanf_float+0x418>)
 800e41c:	4630      	mov	r0, r6
 800e41e:	f000 f82b 	bl	800e478 <siprintf>
 800e422:	e7cf      	b.n	800e3c4 <_scanf_float+0x378>
 800e424:	f011 0f04 	tst.w	r1, #4
 800e428:	9903      	ldr	r1, [sp, #12]
 800e42a:	600a      	str	r2, [r1, #0]
 800e42c:	d1db      	bne.n	800e3e6 <_scanf_float+0x39a>
 800e42e:	f8d3 8000 	ldr.w	r8, [r3]
 800e432:	ee10 2a10 	vmov	r2, s0
 800e436:	ee10 0a10 	vmov	r0, s0
 800e43a:	463b      	mov	r3, r7
 800e43c:	4639      	mov	r1, r7
 800e43e:	f7f2 fb8d 	bl	8000b5c <__aeabi_dcmpun>
 800e442:	b128      	cbz	r0, 800e450 <_scanf_float+0x404>
 800e444:	4808      	ldr	r0, [pc, #32]	; (800e468 <_scanf_float+0x41c>)
 800e446:	f000 f811 	bl	800e46c <nanf>
 800e44a:	ed88 0a00 	vstr	s0, [r8]
 800e44e:	e7cd      	b.n	800e3ec <_scanf_float+0x3a0>
 800e450:	4630      	mov	r0, r6
 800e452:	4639      	mov	r1, r7
 800e454:	f7f2 fbe0 	bl	8000c18 <__aeabi_d2f>
 800e458:	f8c8 0000 	str.w	r0, [r8]
 800e45c:	e7c6      	b.n	800e3ec <_scanf_float+0x3a0>
 800e45e:	2500      	movs	r5, #0
 800e460:	e635      	b.n	800e0ce <_scanf_float+0x82>
 800e462:	bf00      	nop
 800e464:	08025874 	.word	0x08025874
 800e468:	08025983 	.word	0x08025983

0800e46c <nanf>:
 800e46c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e474 <nanf+0x8>
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	7fc00000 	.word	0x7fc00000

0800e478 <siprintf>:
 800e478:	b40e      	push	{r1, r2, r3}
 800e47a:	b500      	push	{lr}
 800e47c:	b09c      	sub	sp, #112	; 0x70
 800e47e:	ab1d      	add	r3, sp, #116	; 0x74
 800e480:	9002      	str	r0, [sp, #8]
 800e482:	9006      	str	r0, [sp, #24]
 800e484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e488:	4809      	ldr	r0, [pc, #36]	; (800e4b0 <siprintf+0x38>)
 800e48a:	9107      	str	r1, [sp, #28]
 800e48c:	9104      	str	r1, [sp, #16]
 800e48e:	4909      	ldr	r1, [pc, #36]	; (800e4b4 <siprintf+0x3c>)
 800e490:	f853 2b04 	ldr.w	r2, [r3], #4
 800e494:	9105      	str	r1, [sp, #20]
 800e496:	6800      	ldr	r0, [r0, #0]
 800e498:	9301      	str	r3, [sp, #4]
 800e49a:	a902      	add	r1, sp, #8
 800e49c:	f002 ff46 	bl	801132c <_svfiprintf_r>
 800e4a0:	9b02      	ldr	r3, [sp, #8]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	701a      	strb	r2, [r3, #0]
 800e4a6:	b01c      	add	sp, #112	; 0x70
 800e4a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4ac:	b003      	add	sp, #12
 800e4ae:	4770      	bx	lr
 800e4b0:	20000040 	.word	0x20000040
 800e4b4:	ffff0208 	.word	0xffff0208

0800e4b8 <sulp>:
 800e4b8:	b570      	push	{r4, r5, r6, lr}
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	460d      	mov	r5, r1
 800e4be:	ec45 4b10 	vmov	d0, r4, r5
 800e4c2:	4616      	mov	r6, r2
 800e4c4:	f002 fcce 	bl	8010e64 <__ulp>
 800e4c8:	ec51 0b10 	vmov	r0, r1, d0
 800e4cc:	b17e      	cbz	r6, 800e4ee <sulp+0x36>
 800e4ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e4d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	dd09      	ble.n	800e4ee <sulp+0x36>
 800e4da:	051b      	lsls	r3, r3, #20
 800e4dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e4e0:	2400      	movs	r4, #0
 800e4e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e4e6:	4622      	mov	r2, r4
 800e4e8:	462b      	mov	r3, r5
 800e4ea:	f7f2 f89d 	bl	8000628 <__aeabi_dmul>
 800e4ee:	bd70      	pop	{r4, r5, r6, pc}

0800e4f0 <_strtod_l>:
 800e4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f4:	b0a3      	sub	sp, #140	; 0x8c
 800e4f6:	461f      	mov	r7, r3
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	931e      	str	r3, [sp, #120]	; 0x78
 800e4fc:	4ba4      	ldr	r3, [pc, #656]	; (800e790 <_strtod_l+0x2a0>)
 800e4fe:	9219      	str	r2, [sp, #100]	; 0x64
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	9307      	str	r3, [sp, #28]
 800e504:	4604      	mov	r4, r0
 800e506:	4618      	mov	r0, r3
 800e508:	4688      	mov	r8, r1
 800e50a:	f7f1 fe73 	bl	80001f4 <strlen>
 800e50e:	f04f 0a00 	mov.w	sl, #0
 800e512:	4605      	mov	r5, r0
 800e514:	f04f 0b00 	mov.w	fp, #0
 800e518:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e51c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e51e:	781a      	ldrb	r2, [r3, #0]
 800e520:	2a2b      	cmp	r2, #43	; 0x2b
 800e522:	d04c      	beq.n	800e5be <_strtod_l+0xce>
 800e524:	d839      	bhi.n	800e59a <_strtod_l+0xaa>
 800e526:	2a0d      	cmp	r2, #13
 800e528:	d832      	bhi.n	800e590 <_strtod_l+0xa0>
 800e52a:	2a08      	cmp	r2, #8
 800e52c:	d832      	bhi.n	800e594 <_strtod_l+0xa4>
 800e52e:	2a00      	cmp	r2, #0
 800e530:	d03c      	beq.n	800e5ac <_strtod_l+0xbc>
 800e532:	2300      	movs	r3, #0
 800e534:	930e      	str	r3, [sp, #56]	; 0x38
 800e536:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e538:	7833      	ldrb	r3, [r6, #0]
 800e53a:	2b30      	cmp	r3, #48	; 0x30
 800e53c:	f040 80b4 	bne.w	800e6a8 <_strtod_l+0x1b8>
 800e540:	7873      	ldrb	r3, [r6, #1]
 800e542:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e546:	2b58      	cmp	r3, #88	; 0x58
 800e548:	d16c      	bne.n	800e624 <_strtod_l+0x134>
 800e54a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e54c:	9301      	str	r3, [sp, #4]
 800e54e:	ab1e      	add	r3, sp, #120	; 0x78
 800e550:	9702      	str	r7, [sp, #8]
 800e552:	9300      	str	r3, [sp, #0]
 800e554:	4a8f      	ldr	r2, [pc, #572]	; (800e794 <_strtod_l+0x2a4>)
 800e556:	ab1f      	add	r3, sp, #124	; 0x7c
 800e558:	a91d      	add	r1, sp, #116	; 0x74
 800e55a:	4620      	mov	r0, r4
 800e55c:	f001 fde2 	bl	8010124 <__gethex>
 800e560:	f010 0707 	ands.w	r7, r0, #7
 800e564:	4605      	mov	r5, r0
 800e566:	d005      	beq.n	800e574 <_strtod_l+0x84>
 800e568:	2f06      	cmp	r7, #6
 800e56a:	d12a      	bne.n	800e5c2 <_strtod_l+0xd2>
 800e56c:	3601      	adds	r6, #1
 800e56e:	2300      	movs	r3, #0
 800e570:	961d      	str	r6, [sp, #116]	; 0x74
 800e572:	930e      	str	r3, [sp, #56]	; 0x38
 800e574:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e576:	2b00      	cmp	r3, #0
 800e578:	f040 8596 	bne.w	800f0a8 <_strtod_l+0xbb8>
 800e57c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e57e:	b1db      	cbz	r3, 800e5b8 <_strtod_l+0xc8>
 800e580:	4652      	mov	r2, sl
 800e582:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e586:	ec43 2b10 	vmov	d0, r2, r3
 800e58a:	b023      	add	sp, #140	; 0x8c
 800e58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e590:	2a20      	cmp	r2, #32
 800e592:	d1ce      	bne.n	800e532 <_strtod_l+0x42>
 800e594:	3301      	adds	r3, #1
 800e596:	931d      	str	r3, [sp, #116]	; 0x74
 800e598:	e7c0      	b.n	800e51c <_strtod_l+0x2c>
 800e59a:	2a2d      	cmp	r2, #45	; 0x2d
 800e59c:	d1c9      	bne.n	800e532 <_strtod_l+0x42>
 800e59e:	2201      	movs	r2, #1
 800e5a0:	920e      	str	r2, [sp, #56]	; 0x38
 800e5a2:	1c5a      	adds	r2, r3, #1
 800e5a4:	921d      	str	r2, [sp, #116]	; 0x74
 800e5a6:	785b      	ldrb	r3, [r3, #1]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d1c4      	bne.n	800e536 <_strtod_l+0x46>
 800e5ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e5ae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f040 8576 	bne.w	800f0a4 <_strtod_l+0xbb4>
 800e5b8:	4652      	mov	r2, sl
 800e5ba:	465b      	mov	r3, fp
 800e5bc:	e7e3      	b.n	800e586 <_strtod_l+0x96>
 800e5be:	2200      	movs	r2, #0
 800e5c0:	e7ee      	b.n	800e5a0 <_strtod_l+0xb0>
 800e5c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e5c4:	b13a      	cbz	r2, 800e5d6 <_strtod_l+0xe6>
 800e5c6:	2135      	movs	r1, #53	; 0x35
 800e5c8:	a820      	add	r0, sp, #128	; 0x80
 800e5ca:	f002 fd56 	bl	801107a <__copybits>
 800e5ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f002 f91b 	bl	801080c <_Bfree>
 800e5d6:	3f01      	subs	r7, #1
 800e5d8:	2f05      	cmp	r7, #5
 800e5da:	d807      	bhi.n	800e5ec <_strtod_l+0xfc>
 800e5dc:	e8df f007 	tbb	[pc, r7]
 800e5e0:	1d180b0e 	.word	0x1d180b0e
 800e5e4:	030e      	.short	0x030e
 800e5e6:	f04f 0b00 	mov.w	fp, #0
 800e5ea:	46da      	mov	sl, fp
 800e5ec:	0728      	lsls	r0, r5, #28
 800e5ee:	d5c1      	bpl.n	800e574 <_strtod_l+0x84>
 800e5f0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e5f4:	e7be      	b.n	800e574 <_strtod_l+0x84>
 800e5f6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e5fa:	e7f7      	b.n	800e5ec <_strtod_l+0xfc>
 800e5fc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e600:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e602:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e606:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e60a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e60e:	e7ed      	b.n	800e5ec <_strtod_l+0xfc>
 800e610:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e798 <_strtod_l+0x2a8>
 800e614:	f04f 0a00 	mov.w	sl, #0
 800e618:	e7e8      	b.n	800e5ec <_strtod_l+0xfc>
 800e61a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e61e:	f04f 3aff 	mov.w	sl, #4294967295
 800e622:	e7e3      	b.n	800e5ec <_strtod_l+0xfc>
 800e624:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e626:	1c5a      	adds	r2, r3, #1
 800e628:	921d      	str	r2, [sp, #116]	; 0x74
 800e62a:	785b      	ldrb	r3, [r3, #1]
 800e62c:	2b30      	cmp	r3, #48	; 0x30
 800e62e:	d0f9      	beq.n	800e624 <_strtod_l+0x134>
 800e630:	2b00      	cmp	r3, #0
 800e632:	d09f      	beq.n	800e574 <_strtod_l+0x84>
 800e634:	2301      	movs	r3, #1
 800e636:	f04f 0900 	mov.w	r9, #0
 800e63a:	9304      	str	r3, [sp, #16]
 800e63c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e63e:	930a      	str	r3, [sp, #40]	; 0x28
 800e640:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e644:	464f      	mov	r7, r9
 800e646:	220a      	movs	r2, #10
 800e648:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e64a:	7806      	ldrb	r6, [r0, #0]
 800e64c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e650:	b2d9      	uxtb	r1, r3
 800e652:	2909      	cmp	r1, #9
 800e654:	d92a      	bls.n	800e6ac <_strtod_l+0x1bc>
 800e656:	9907      	ldr	r1, [sp, #28]
 800e658:	462a      	mov	r2, r5
 800e65a:	f003 f8d9 	bl	8011810 <strncmp>
 800e65e:	b398      	cbz	r0, 800e6c8 <_strtod_l+0x1d8>
 800e660:	2000      	movs	r0, #0
 800e662:	4633      	mov	r3, r6
 800e664:	463d      	mov	r5, r7
 800e666:	9007      	str	r0, [sp, #28]
 800e668:	4602      	mov	r2, r0
 800e66a:	2b65      	cmp	r3, #101	; 0x65
 800e66c:	d001      	beq.n	800e672 <_strtod_l+0x182>
 800e66e:	2b45      	cmp	r3, #69	; 0x45
 800e670:	d118      	bne.n	800e6a4 <_strtod_l+0x1b4>
 800e672:	b91d      	cbnz	r5, 800e67c <_strtod_l+0x18c>
 800e674:	9b04      	ldr	r3, [sp, #16]
 800e676:	4303      	orrs	r3, r0
 800e678:	d098      	beq.n	800e5ac <_strtod_l+0xbc>
 800e67a:	2500      	movs	r5, #0
 800e67c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e680:	f108 0301 	add.w	r3, r8, #1
 800e684:	931d      	str	r3, [sp, #116]	; 0x74
 800e686:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e68a:	2b2b      	cmp	r3, #43	; 0x2b
 800e68c:	d075      	beq.n	800e77a <_strtod_l+0x28a>
 800e68e:	2b2d      	cmp	r3, #45	; 0x2d
 800e690:	d07b      	beq.n	800e78a <_strtod_l+0x29a>
 800e692:	f04f 0c00 	mov.w	ip, #0
 800e696:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e69a:	2909      	cmp	r1, #9
 800e69c:	f240 8082 	bls.w	800e7a4 <_strtod_l+0x2b4>
 800e6a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e6a4:	2600      	movs	r6, #0
 800e6a6:	e09d      	b.n	800e7e4 <_strtod_l+0x2f4>
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	e7c4      	b.n	800e636 <_strtod_l+0x146>
 800e6ac:	2f08      	cmp	r7, #8
 800e6ae:	bfd8      	it	le
 800e6b0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e6b2:	f100 0001 	add.w	r0, r0, #1
 800e6b6:	bfda      	itte	le
 800e6b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e6bc:	9309      	strle	r3, [sp, #36]	; 0x24
 800e6be:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e6c2:	3701      	adds	r7, #1
 800e6c4:	901d      	str	r0, [sp, #116]	; 0x74
 800e6c6:	e7bf      	b.n	800e648 <_strtod_l+0x158>
 800e6c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6ca:	195a      	adds	r2, r3, r5
 800e6cc:	921d      	str	r2, [sp, #116]	; 0x74
 800e6ce:	5d5b      	ldrb	r3, [r3, r5]
 800e6d0:	2f00      	cmp	r7, #0
 800e6d2:	d037      	beq.n	800e744 <_strtod_l+0x254>
 800e6d4:	9007      	str	r0, [sp, #28]
 800e6d6:	463d      	mov	r5, r7
 800e6d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e6dc:	2a09      	cmp	r2, #9
 800e6de:	d912      	bls.n	800e706 <_strtod_l+0x216>
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	e7c2      	b.n	800e66a <_strtod_l+0x17a>
 800e6e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6e6:	1c5a      	adds	r2, r3, #1
 800e6e8:	921d      	str	r2, [sp, #116]	; 0x74
 800e6ea:	785b      	ldrb	r3, [r3, #1]
 800e6ec:	3001      	adds	r0, #1
 800e6ee:	2b30      	cmp	r3, #48	; 0x30
 800e6f0:	d0f8      	beq.n	800e6e4 <_strtod_l+0x1f4>
 800e6f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e6f6:	2a08      	cmp	r2, #8
 800e6f8:	f200 84db 	bhi.w	800f0b2 <_strtod_l+0xbc2>
 800e6fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e6fe:	9007      	str	r0, [sp, #28]
 800e700:	2000      	movs	r0, #0
 800e702:	920a      	str	r2, [sp, #40]	; 0x28
 800e704:	4605      	mov	r5, r0
 800e706:	3b30      	subs	r3, #48	; 0x30
 800e708:	f100 0201 	add.w	r2, r0, #1
 800e70c:	d014      	beq.n	800e738 <_strtod_l+0x248>
 800e70e:	9907      	ldr	r1, [sp, #28]
 800e710:	4411      	add	r1, r2
 800e712:	9107      	str	r1, [sp, #28]
 800e714:	462a      	mov	r2, r5
 800e716:	eb00 0e05 	add.w	lr, r0, r5
 800e71a:	210a      	movs	r1, #10
 800e71c:	4572      	cmp	r2, lr
 800e71e:	d113      	bne.n	800e748 <_strtod_l+0x258>
 800e720:	182a      	adds	r2, r5, r0
 800e722:	2a08      	cmp	r2, #8
 800e724:	f105 0501 	add.w	r5, r5, #1
 800e728:	4405      	add	r5, r0
 800e72a:	dc1c      	bgt.n	800e766 <_strtod_l+0x276>
 800e72c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e72e:	220a      	movs	r2, #10
 800e730:	fb02 3301 	mla	r3, r2, r1, r3
 800e734:	9309      	str	r3, [sp, #36]	; 0x24
 800e736:	2200      	movs	r2, #0
 800e738:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e73a:	1c59      	adds	r1, r3, #1
 800e73c:	911d      	str	r1, [sp, #116]	; 0x74
 800e73e:	785b      	ldrb	r3, [r3, #1]
 800e740:	4610      	mov	r0, r2
 800e742:	e7c9      	b.n	800e6d8 <_strtod_l+0x1e8>
 800e744:	4638      	mov	r0, r7
 800e746:	e7d2      	b.n	800e6ee <_strtod_l+0x1fe>
 800e748:	2a08      	cmp	r2, #8
 800e74a:	dc04      	bgt.n	800e756 <_strtod_l+0x266>
 800e74c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e74e:	434e      	muls	r6, r1
 800e750:	9609      	str	r6, [sp, #36]	; 0x24
 800e752:	3201      	adds	r2, #1
 800e754:	e7e2      	b.n	800e71c <_strtod_l+0x22c>
 800e756:	f102 0c01 	add.w	ip, r2, #1
 800e75a:	f1bc 0f10 	cmp.w	ip, #16
 800e75e:	bfd8      	it	le
 800e760:	fb01 f909 	mulle.w	r9, r1, r9
 800e764:	e7f5      	b.n	800e752 <_strtod_l+0x262>
 800e766:	2d10      	cmp	r5, #16
 800e768:	bfdc      	itt	le
 800e76a:	220a      	movle	r2, #10
 800e76c:	fb02 3909 	mlale	r9, r2, r9, r3
 800e770:	e7e1      	b.n	800e736 <_strtod_l+0x246>
 800e772:	2300      	movs	r3, #0
 800e774:	9307      	str	r3, [sp, #28]
 800e776:	2201      	movs	r2, #1
 800e778:	e77c      	b.n	800e674 <_strtod_l+0x184>
 800e77a:	f04f 0c00 	mov.w	ip, #0
 800e77e:	f108 0302 	add.w	r3, r8, #2
 800e782:	931d      	str	r3, [sp, #116]	; 0x74
 800e784:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e788:	e785      	b.n	800e696 <_strtod_l+0x1a6>
 800e78a:	f04f 0c01 	mov.w	ip, #1
 800e78e:	e7f6      	b.n	800e77e <_strtod_l+0x28e>
 800e790:	08025b6c 	.word	0x08025b6c
 800e794:	0802587c 	.word	0x0802587c
 800e798:	7ff00000 	.word	0x7ff00000
 800e79c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e79e:	1c59      	adds	r1, r3, #1
 800e7a0:	911d      	str	r1, [sp, #116]	; 0x74
 800e7a2:	785b      	ldrb	r3, [r3, #1]
 800e7a4:	2b30      	cmp	r3, #48	; 0x30
 800e7a6:	d0f9      	beq.n	800e79c <_strtod_l+0x2ac>
 800e7a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e7ac:	2908      	cmp	r1, #8
 800e7ae:	f63f af79 	bhi.w	800e6a4 <_strtod_l+0x1b4>
 800e7b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e7b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7b8:	9308      	str	r3, [sp, #32]
 800e7ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7bc:	1c59      	adds	r1, r3, #1
 800e7be:	911d      	str	r1, [sp, #116]	; 0x74
 800e7c0:	785b      	ldrb	r3, [r3, #1]
 800e7c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e7c6:	2e09      	cmp	r6, #9
 800e7c8:	d937      	bls.n	800e83a <_strtod_l+0x34a>
 800e7ca:	9e08      	ldr	r6, [sp, #32]
 800e7cc:	1b89      	subs	r1, r1, r6
 800e7ce:	2908      	cmp	r1, #8
 800e7d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e7d4:	dc02      	bgt.n	800e7dc <_strtod_l+0x2ec>
 800e7d6:	4576      	cmp	r6, lr
 800e7d8:	bfa8      	it	ge
 800e7da:	4676      	movge	r6, lr
 800e7dc:	f1bc 0f00 	cmp.w	ip, #0
 800e7e0:	d000      	beq.n	800e7e4 <_strtod_l+0x2f4>
 800e7e2:	4276      	negs	r6, r6
 800e7e4:	2d00      	cmp	r5, #0
 800e7e6:	d14f      	bne.n	800e888 <_strtod_l+0x398>
 800e7e8:	9904      	ldr	r1, [sp, #16]
 800e7ea:	4301      	orrs	r1, r0
 800e7ec:	f47f aec2 	bne.w	800e574 <_strtod_l+0x84>
 800e7f0:	2a00      	cmp	r2, #0
 800e7f2:	f47f aedb 	bne.w	800e5ac <_strtod_l+0xbc>
 800e7f6:	2b69      	cmp	r3, #105	; 0x69
 800e7f8:	d027      	beq.n	800e84a <_strtod_l+0x35a>
 800e7fa:	dc24      	bgt.n	800e846 <_strtod_l+0x356>
 800e7fc:	2b49      	cmp	r3, #73	; 0x49
 800e7fe:	d024      	beq.n	800e84a <_strtod_l+0x35a>
 800e800:	2b4e      	cmp	r3, #78	; 0x4e
 800e802:	f47f aed3 	bne.w	800e5ac <_strtod_l+0xbc>
 800e806:	499e      	ldr	r1, [pc, #632]	; (800ea80 <_strtod_l+0x590>)
 800e808:	a81d      	add	r0, sp, #116	; 0x74
 800e80a:	f001 fee3 	bl	80105d4 <__match>
 800e80e:	2800      	cmp	r0, #0
 800e810:	f43f aecc 	beq.w	800e5ac <_strtod_l+0xbc>
 800e814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	2b28      	cmp	r3, #40	; 0x28
 800e81a:	d12d      	bne.n	800e878 <_strtod_l+0x388>
 800e81c:	4999      	ldr	r1, [pc, #612]	; (800ea84 <_strtod_l+0x594>)
 800e81e:	aa20      	add	r2, sp, #128	; 0x80
 800e820:	a81d      	add	r0, sp, #116	; 0x74
 800e822:	f001 feeb 	bl	80105fc <__hexnan>
 800e826:	2805      	cmp	r0, #5
 800e828:	d126      	bne.n	800e878 <_strtod_l+0x388>
 800e82a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e82c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e830:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e834:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e838:	e69c      	b.n	800e574 <_strtod_l+0x84>
 800e83a:	210a      	movs	r1, #10
 800e83c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e840:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e844:	e7b9      	b.n	800e7ba <_strtod_l+0x2ca>
 800e846:	2b6e      	cmp	r3, #110	; 0x6e
 800e848:	e7db      	b.n	800e802 <_strtod_l+0x312>
 800e84a:	498f      	ldr	r1, [pc, #572]	; (800ea88 <_strtod_l+0x598>)
 800e84c:	a81d      	add	r0, sp, #116	; 0x74
 800e84e:	f001 fec1 	bl	80105d4 <__match>
 800e852:	2800      	cmp	r0, #0
 800e854:	f43f aeaa 	beq.w	800e5ac <_strtod_l+0xbc>
 800e858:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e85a:	498c      	ldr	r1, [pc, #560]	; (800ea8c <_strtod_l+0x59c>)
 800e85c:	3b01      	subs	r3, #1
 800e85e:	a81d      	add	r0, sp, #116	; 0x74
 800e860:	931d      	str	r3, [sp, #116]	; 0x74
 800e862:	f001 feb7 	bl	80105d4 <__match>
 800e866:	b910      	cbnz	r0, 800e86e <_strtod_l+0x37e>
 800e868:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e86a:	3301      	adds	r3, #1
 800e86c:	931d      	str	r3, [sp, #116]	; 0x74
 800e86e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ea9c <_strtod_l+0x5ac>
 800e872:	f04f 0a00 	mov.w	sl, #0
 800e876:	e67d      	b.n	800e574 <_strtod_l+0x84>
 800e878:	4885      	ldr	r0, [pc, #532]	; (800ea90 <_strtod_l+0x5a0>)
 800e87a:	f002 ffb1 	bl	80117e0 <nan>
 800e87e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e882:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e886:	e675      	b.n	800e574 <_strtod_l+0x84>
 800e888:	9b07      	ldr	r3, [sp, #28]
 800e88a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e88c:	1af3      	subs	r3, r6, r3
 800e88e:	2f00      	cmp	r7, #0
 800e890:	bf08      	it	eq
 800e892:	462f      	moveq	r7, r5
 800e894:	2d10      	cmp	r5, #16
 800e896:	9308      	str	r3, [sp, #32]
 800e898:	46a8      	mov	r8, r5
 800e89a:	bfa8      	it	ge
 800e89c:	f04f 0810 	movge.w	r8, #16
 800e8a0:	f7f1 fe48 	bl	8000534 <__aeabi_ui2d>
 800e8a4:	2d09      	cmp	r5, #9
 800e8a6:	4682      	mov	sl, r0
 800e8a8:	468b      	mov	fp, r1
 800e8aa:	dd13      	ble.n	800e8d4 <_strtod_l+0x3e4>
 800e8ac:	4b79      	ldr	r3, [pc, #484]	; (800ea94 <_strtod_l+0x5a4>)
 800e8ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e8b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e8b6:	f7f1 feb7 	bl	8000628 <__aeabi_dmul>
 800e8ba:	4682      	mov	sl, r0
 800e8bc:	4648      	mov	r0, r9
 800e8be:	468b      	mov	fp, r1
 800e8c0:	f7f1 fe38 	bl	8000534 <__aeabi_ui2d>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	4650      	mov	r0, sl
 800e8ca:	4659      	mov	r1, fp
 800e8cc:	f7f1 fcf6 	bl	80002bc <__adddf3>
 800e8d0:	4682      	mov	sl, r0
 800e8d2:	468b      	mov	fp, r1
 800e8d4:	2d0f      	cmp	r5, #15
 800e8d6:	dc38      	bgt.n	800e94a <_strtod_l+0x45a>
 800e8d8:	9b08      	ldr	r3, [sp, #32]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	f43f ae4a 	beq.w	800e574 <_strtod_l+0x84>
 800e8e0:	dd24      	ble.n	800e92c <_strtod_l+0x43c>
 800e8e2:	2b16      	cmp	r3, #22
 800e8e4:	dc0b      	bgt.n	800e8fe <_strtod_l+0x40e>
 800e8e6:	4d6b      	ldr	r5, [pc, #428]	; (800ea94 <_strtod_l+0x5a4>)
 800e8e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e8ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e8f0:	4652      	mov	r2, sl
 800e8f2:	465b      	mov	r3, fp
 800e8f4:	f7f1 fe98 	bl	8000628 <__aeabi_dmul>
 800e8f8:	4682      	mov	sl, r0
 800e8fa:	468b      	mov	fp, r1
 800e8fc:	e63a      	b.n	800e574 <_strtod_l+0x84>
 800e8fe:	9a08      	ldr	r2, [sp, #32]
 800e900:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e904:	4293      	cmp	r3, r2
 800e906:	db20      	blt.n	800e94a <_strtod_l+0x45a>
 800e908:	4c62      	ldr	r4, [pc, #392]	; (800ea94 <_strtod_l+0x5a4>)
 800e90a:	f1c5 050f 	rsb	r5, r5, #15
 800e90e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e912:	4652      	mov	r2, sl
 800e914:	465b      	mov	r3, fp
 800e916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e91a:	f7f1 fe85 	bl	8000628 <__aeabi_dmul>
 800e91e:	9b08      	ldr	r3, [sp, #32]
 800e920:	1b5d      	subs	r5, r3, r5
 800e922:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e926:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e92a:	e7e3      	b.n	800e8f4 <_strtod_l+0x404>
 800e92c:	9b08      	ldr	r3, [sp, #32]
 800e92e:	3316      	adds	r3, #22
 800e930:	db0b      	blt.n	800e94a <_strtod_l+0x45a>
 800e932:	9b07      	ldr	r3, [sp, #28]
 800e934:	4a57      	ldr	r2, [pc, #348]	; (800ea94 <_strtod_l+0x5a4>)
 800e936:	1b9e      	subs	r6, r3, r6
 800e938:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e93c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e940:	4650      	mov	r0, sl
 800e942:	4659      	mov	r1, fp
 800e944:	f7f1 ff9a 	bl	800087c <__aeabi_ddiv>
 800e948:	e7d6      	b.n	800e8f8 <_strtod_l+0x408>
 800e94a:	9b08      	ldr	r3, [sp, #32]
 800e94c:	eba5 0808 	sub.w	r8, r5, r8
 800e950:	4498      	add	r8, r3
 800e952:	f1b8 0f00 	cmp.w	r8, #0
 800e956:	dd71      	ble.n	800ea3c <_strtod_l+0x54c>
 800e958:	f018 030f 	ands.w	r3, r8, #15
 800e95c:	d00a      	beq.n	800e974 <_strtod_l+0x484>
 800e95e:	494d      	ldr	r1, [pc, #308]	; (800ea94 <_strtod_l+0x5a4>)
 800e960:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e964:	4652      	mov	r2, sl
 800e966:	465b      	mov	r3, fp
 800e968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e96c:	f7f1 fe5c 	bl	8000628 <__aeabi_dmul>
 800e970:	4682      	mov	sl, r0
 800e972:	468b      	mov	fp, r1
 800e974:	f038 080f 	bics.w	r8, r8, #15
 800e978:	d04d      	beq.n	800ea16 <_strtod_l+0x526>
 800e97a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e97e:	dd22      	ble.n	800e9c6 <_strtod_l+0x4d6>
 800e980:	2500      	movs	r5, #0
 800e982:	462e      	mov	r6, r5
 800e984:	9509      	str	r5, [sp, #36]	; 0x24
 800e986:	9507      	str	r5, [sp, #28]
 800e988:	2322      	movs	r3, #34	; 0x22
 800e98a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ea9c <_strtod_l+0x5ac>
 800e98e:	6023      	str	r3, [r4, #0]
 800e990:	f04f 0a00 	mov.w	sl, #0
 800e994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e996:	2b00      	cmp	r3, #0
 800e998:	f43f adec 	beq.w	800e574 <_strtod_l+0x84>
 800e99c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e99e:	4620      	mov	r0, r4
 800e9a0:	f001 ff34 	bl	801080c <_Bfree>
 800e9a4:	9907      	ldr	r1, [sp, #28]
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	f001 ff30 	bl	801080c <_Bfree>
 800e9ac:	4631      	mov	r1, r6
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f001 ff2c 	bl	801080c <_Bfree>
 800e9b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f001 ff28 	bl	801080c <_Bfree>
 800e9bc:	4629      	mov	r1, r5
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f001 ff24 	bl	801080c <_Bfree>
 800e9c4:	e5d6      	b.n	800e574 <_strtod_l+0x84>
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e9cc:	4650      	mov	r0, sl
 800e9ce:	4659      	mov	r1, fp
 800e9d0:	4699      	mov	r9, r3
 800e9d2:	f1b8 0f01 	cmp.w	r8, #1
 800e9d6:	dc21      	bgt.n	800ea1c <_strtod_l+0x52c>
 800e9d8:	b10b      	cbz	r3, 800e9de <_strtod_l+0x4ee>
 800e9da:	4682      	mov	sl, r0
 800e9dc:	468b      	mov	fp, r1
 800e9de:	4b2e      	ldr	r3, [pc, #184]	; (800ea98 <_strtod_l+0x5a8>)
 800e9e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e9e4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e9e8:	4652      	mov	r2, sl
 800e9ea:	465b      	mov	r3, fp
 800e9ec:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e9f0:	f7f1 fe1a 	bl	8000628 <__aeabi_dmul>
 800e9f4:	4b29      	ldr	r3, [pc, #164]	; (800ea9c <_strtod_l+0x5ac>)
 800e9f6:	460a      	mov	r2, r1
 800e9f8:	400b      	ands	r3, r1
 800e9fa:	4929      	ldr	r1, [pc, #164]	; (800eaa0 <_strtod_l+0x5b0>)
 800e9fc:	428b      	cmp	r3, r1
 800e9fe:	4682      	mov	sl, r0
 800ea00:	d8be      	bhi.n	800e980 <_strtod_l+0x490>
 800ea02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ea06:	428b      	cmp	r3, r1
 800ea08:	bf86      	itte	hi
 800ea0a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800eaa4 <_strtod_l+0x5b4>
 800ea0e:	f04f 3aff 	movhi.w	sl, #4294967295
 800ea12:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ea16:	2300      	movs	r3, #0
 800ea18:	9304      	str	r3, [sp, #16]
 800ea1a:	e081      	b.n	800eb20 <_strtod_l+0x630>
 800ea1c:	f018 0f01 	tst.w	r8, #1
 800ea20:	d007      	beq.n	800ea32 <_strtod_l+0x542>
 800ea22:	4b1d      	ldr	r3, [pc, #116]	; (800ea98 <_strtod_l+0x5a8>)
 800ea24:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ea28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2c:	f7f1 fdfc 	bl	8000628 <__aeabi_dmul>
 800ea30:	2301      	movs	r3, #1
 800ea32:	f109 0901 	add.w	r9, r9, #1
 800ea36:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ea3a:	e7ca      	b.n	800e9d2 <_strtod_l+0x4e2>
 800ea3c:	d0eb      	beq.n	800ea16 <_strtod_l+0x526>
 800ea3e:	f1c8 0800 	rsb	r8, r8, #0
 800ea42:	f018 020f 	ands.w	r2, r8, #15
 800ea46:	d00a      	beq.n	800ea5e <_strtod_l+0x56e>
 800ea48:	4b12      	ldr	r3, [pc, #72]	; (800ea94 <_strtod_l+0x5a4>)
 800ea4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea4e:	4650      	mov	r0, sl
 800ea50:	4659      	mov	r1, fp
 800ea52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea56:	f7f1 ff11 	bl	800087c <__aeabi_ddiv>
 800ea5a:	4682      	mov	sl, r0
 800ea5c:	468b      	mov	fp, r1
 800ea5e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ea62:	d0d8      	beq.n	800ea16 <_strtod_l+0x526>
 800ea64:	f1b8 0f1f 	cmp.w	r8, #31
 800ea68:	dd1e      	ble.n	800eaa8 <_strtod_l+0x5b8>
 800ea6a:	2500      	movs	r5, #0
 800ea6c:	462e      	mov	r6, r5
 800ea6e:	9509      	str	r5, [sp, #36]	; 0x24
 800ea70:	9507      	str	r5, [sp, #28]
 800ea72:	2322      	movs	r3, #34	; 0x22
 800ea74:	f04f 0a00 	mov.w	sl, #0
 800ea78:	f04f 0b00 	mov.w	fp, #0
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	e789      	b.n	800e994 <_strtod_l+0x4a4>
 800ea80:	0802584d 	.word	0x0802584d
 800ea84:	08025890 	.word	0x08025890
 800ea88:	08025845 	.word	0x08025845
 800ea8c:	08025a88 	.word	0x08025a88
 800ea90:	08025983 	.word	0x08025983
 800ea94:	08025c08 	.word	0x08025c08
 800ea98:	08025be0 	.word	0x08025be0
 800ea9c:	7ff00000 	.word	0x7ff00000
 800eaa0:	7ca00000 	.word	0x7ca00000
 800eaa4:	7fefffff 	.word	0x7fefffff
 800eaa8:	f018 0310 	ands.w	r3, r8, #16
 800eaac:	bf18      	it	ne
 800eaae:	236a      	movne	r3, #106	; 0x6a
 800eab0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ee68 <_strtod_l+0x978>
 800eab4:	9304      	str	r3, [sp, #16]
 800eab6:	4650      	mov	r0, sl
 800eab8:	4659      	mov	r1, fp
 800eaba:	2300      	movs	r3, #0
 800eabc:	f018 0f01 	tst.w	r8, #1
 800eac0:	d004      	beq.n	800eacc <_strtod_l+0x5dc>
 800eac2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800eac6:	f7f1 fdaf 	bl	8000628 <__aeabi_dmul>
 800eaca:	2301      	movs	r3, #1
 800eacc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ead0:	f109 0908 	add.w	r9, r9, #8
 800ead4:	d1f2      	bne.n	800eabc <_strtod_l+0x5cc>
 800ead6:	b10b      	cbz	r3, 800eadc <_strtod_l+0x5ec>
 800ead8:	4682      	mov	sl, r0
 800eada:	468b      	mov	fp, r1
 800eadc:	9b04      	ldr	r3, [sp, #16]
 800eade:	b1bb      	cbz	r3, 800eb10 <_strtod_l+0x620>
 800eae0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800eae4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	4659      	mov	r1, fp
 800eaec:	dd10      	ble.n	800eb10 <_strtod_l+0x620>
 800eaee:	2b1f      	cmp	r3, #31
 800eaf0:	f340 8128 	ble.w	800ed44 <_strtod_l+0x854>
 800eaf4:	2b34      	cmp	r3, #52	; 0x34
 800eaf6:	bfde      	ittt	le
 800eaf8:	3b20      	suble	r3, #32
 800eafa:	f04f 32ff 	movle.w	r2, #4294967295
 800eafe:	fa02 f303 	lslle.w	r3, r2, r3
 800eb02:	f04f 0a00 	mov.w	sl, #0
 800eb06:	bfcc      	ite	gt
 800eb08:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800eb0c:	ea03 0b01 	andle.w	fp, r3, r1
 800eb10:	2200      	movs	r2, #0
 800eb12:	2300      	movs	r3, #0
 800eb14:	4650      	mov	r0, sl
 800eb16:	4659      	mov	r1, fp
 800eb18:	f7f1 ffee 	bl	8000af8 <__aeabi_dcmpeq>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d1a4      	bne.n	800ea6a <_strtod_l+0x57a>
 800eb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb22:	9300      	str	r3, [sp, #0]
 800eb24:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eb26:	462b      	mov	r3, r5
 800eb28:	463a      	mov	r2, r7
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f001 feda 	bl	80108e4 <__s2b>
 800eb30:	9009      	str	r0, [sp, #36]	; 0x24
 800eb32:	2800      	cmp	r0, #0
 800eb34:	f43f af24 	beq.w	800e980 <_strtod_l+0x490>
 800eb38:	9b07      	ldr	r3, [sp, #28]
 800eb3a:	1b9e      	subs	r6, r3, r6
 800eb3c:	9b08      	ldr	r3, [sp, #32]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	bfb4      	ite	lt
 800eb42:	4633      	movlt	r3, r6
 800eb44:	2300      	movge	r3, #0
 800eb46:	9310      	str	r3, [sp, #64]	; 0x40
 800eb48:	9b08      	ldr	r3, [sp, #32]
 800eb4a:	2500      	movs	r5, #0
 800eb4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eb50:	9318      	str	r3, [sp, #96]	; 0x60
 800eb52:	462e      	mov	r6, r5
 800eb54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb56:	4620      	mov	r0, r4
 800eb58:	6859      	ldr	r1, [r3, #4]
 800eb5a:	f001 fe17 	bl	801078c <_Balloc>
 800eb5e:	9007      	str	r0, [sp, #28]
 800eb60:	2800      	cmp	r0, #0
 800eb62:	f43f af11 	beq.w	800e988 <_strtod_l+0x498>
 800eb66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb68:	691a      	ldr	r2, [r3, #16]
 800eb6a:	3202      	adds	r2, #2
 800eb6c:	f103 010c 	add.w	r1, r3, #12
 800eb70:	0092      	lsls	r2, r2, #2
 800eb72:	300c      	adds	r0, #12
 800eb74:	f001 fdfc 	bl	8010770 <memcpy>
 800eb78:	ec4b ab10 	vmov	d0, sl, fp
 800eb7c:	aa20      	add	r2, sp, #128	; 0x80
 800eb7e:	a91f      	add	r1, sp, #124	; 0x7c
 800eb80:	4620      	mov	r0, r4
 800eb82:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800eb86:	f002 f9e9 	bl	8010f5c <__d2b>
 800eb8a:	901e      	str	r0, [sp, #120]	; 0x78
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	f43f aefb 	beq.w	800e988 <_strtod_l+0x498>
 800eb92:	2101      	movs	r1, #1
 800eb94:	4620      	mov	r0, r4
 800eb96:	f001 ff3f 	bl	8010a18 <__i2b>
 800eb9a:	4606      	mov	r6, r0
 800eb9c:	2800      	cmp	r0, #0
 800eb9e:	f43f aef3 	beq.w	800e988 <_strtod_l+0x498>
 800eba2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eba4:	9904      	ldr	r1, [sp, #16]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	bfab      	itete	ge
 800ebaa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ebac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ebae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ebb0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ebb4:	bfac      	ite	ge
 800ebb6:	eb03 0902 	addge.w	r9, r3, r2
 800ebba:	1ad7      	sublt	r7, r2, r3
 800ebbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ebbe:	eba3 0801 	sub.w	r8, r3, r1
 800ebc2:	4490      	add	r8, r2
 800ebc4:	4ba3      	ldr	r3, [pc, #652]	; (800ee54 <_strtod_l+0x964>)
 800ebc6:	f108 38ff 	add.w	r8, r8, #4294967295
 800ebca:	4598      	cmp	r8, r3
 800ebcc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ebd0:	f280 80cc 	bge.w	800ed6c <_strtod_l+0x87c>
 800ebd4:	eba3 0308 	sub.w	r3, r3, r8
 800ebd8:	2b1f      	cmp	r3, #31
 800ebda:	eba2 0203 	sub.w	r2, r2, r3
 800ebde:	f04f 0101 	mov.w	r1, #1
 800ebe2:	f300 80b6 	bgt.w	800ed52 <_strtod_l+0x862>
 800ebe6:	fa01 f303 	lsl.w	r3, r1, r3
 800ebea:	9311      	str	r3, [sp, #68]	; 0x44
 800ebec:	2300      	movs	r3, #0
 800ebee:	930c      	str	r3, [sp, #48]	; 0x30
 800ebf0:	eb09 0802 	add.w	r8, r9, r2
 800ebf4:	9b04      	ldr	r3, [sp, #16]
 800ebf6:	45c1      	cmp	r9, r8
 800ebf8:	4417      	add	r7, r2
 800ebfa:	441f      	add	r7, r3
 800ebfc:	464b      	mov	r3, r9
 800ebfe:	bfa8      	it	ge
 800ec00:	4643      	movge	r3, r8
 800ec02:	42bb      	cmp	r3, r7
 800ec04:	bfa8      	it	ge
 800ec06:	463b      	movge	r3, r7
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	bfc2      	ittt	gt
 800ec0c:	eba8 0803 	subgt.w	r8, r8, r3
 800ec10:	1aff      	subgt	r7, r7, r3
 800ec12:	eba9 0903 	subgt.w	r9, r9, r3
 800ec16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	dd17      	ble.n	800ec4c <_strtod_l+0x75c>
 800ec1c:	4631      	mov	r1, r6
 800ec1e:	461a      	mov	r2, r3
 800ec20:	4620      	mov	r0, r4
 800ec22:	f001 ffb5 	bl	8010b90 <__pow5mult>
 800ec26:	4606      	mov	r6, r0
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	f43f aead 	beq.w	800e988 <_strtod_l+0x498>
 800ec2e:	4601      	mov	r1, r0
 800ec30:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ec32:	4620      	mov	r0, r4
 800ec34:	f001 ff06 	bl	8010a44 <__multiply>
 800ec38:	900f      	str	r0, [sp, #60]	; 0x3c
 800ec3a:	2800      	cmp	r0, #0
 800ec3c:	f43f aea4 	beq.w	800e988 <_strtod_l+0x498>
 800ec40:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ec42:	4620      	mov	r0, r4
 800ec44:	f001 fde2 	bl	801080c <_Bfree>
 800ec48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec4a:	931e      	str	r3, [sp, #120]	; 0x78
 800ec4c:	f1b8 0f00 	cmp.w	r8, #0
 800ec50:	f300 8091 	bgt.w	800ed76 <_strtod_l+0x886>
 800ec54:	9b08      	ldr	r3, [sp, #32]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	dd08      	ble.n	800ec6c <_strtod_l+0x77c>
 800ec5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ec5c:	9907      	ldr	r1, [sp, #28]
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f001 ff96 	bl	8010b90 <__pow5mult>
 800ec64:	9007      	str	r0, [sp, #28]
 800ec66:	2800      	cmp	r0, #0
 800ec68:	f43f ae8e 	beq.w	800e988 <_strtod_l+0x498>
 800ec6c:	2f00      	cmp	r7, #0
 800ec6e:	dd08      	ble.n	800ec82 <_strtod_l+0x792>
 800ec70:	9907      	ldr	r1, [sp, #28]
 800ec72:	463a      	mov	r2, r7
 800ec74:	4620      	mov	r0, r4
 800ec76:	f001 ffe5 	bl	8010c44 <__lshift>
 800ec7a:	9007      	str	r0, [sp, #28]
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	f43f ae83 	beq.w	800e988 <_strtod_l+0x498>
 800ec82:	f1b9 0f00 	cmp.w	r9, #0
 800ec86:	dd08      	ble.n	800ec9a <_strtod_l+0x7aa>
 800ec88:	4631      	mov	r1, r6
 800ec8a:	464a      	mov	r2, r9
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f001 ffd9 	bl	8010c44 <__lshift>
 800ec92:	4606      	mov	r6, r0
 800ec94:	2800      	cmp	r0, #0
 800ec96:	f43f ae77 	beq.w	800e988 <_strtod_l+0x498>
 800ec9a:	9a07      	ldr	r2, [sp, #28]
 800ec9c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f002 f858 	bl	8010d54 <__mdiff>
 800eca4:	4605      	mov	r5, r0
 800eca6:	2800      	cmp	r0, #0
 800eca8:	f43f ae6e 	beq.w	800e988 <_strtod_l+0x498>
 800ecac:	68c3      	ldr	r3, [r0, #12]
 800ecae:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	60c3      	str	r3, [r0, #12]
 800ecb4:	4631      	mov	r1, r6
 800ecb6:	f002 f831 	bl	8010d1c <__mcmp>
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	da65      	bge.n	800ed8a <_strtod_l+0x89a>
 800ecbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecc0:	ea53 030a 	orrs.w	r3, r3, sl
 800ecc4:	f040 8087 	bne.w	800edd6 <_strtod_l+0x8e6>
 800ecc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	f040 8082 	bne.w	800edd6 <_strtod_l+0x8e6>
 800ecd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ecd6:	0d1b      	lsrs	r3, r3, #20
 800ecd8:	051b      	lsls	r3, r3, #20
 800ecda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ecde:	d97a      	bls.n	800edd6 <_strtod_l+0x8e6>
 800ece0:	696b      	ldr	r3, [r5, #20]
 800ece2:	b913      	cbnz	r3, 800ecea <_strtod_l+0x7fa>
 800ece4:	692b      	ldr	r3, [r5, #16]
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	dd75      	ble.n	800edd6 <_strtod_l+0x8e6>
 800ecea:	4629      	mov	r1, r5
 800ecec:	2201      	movs	r2, #1
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f001 ffa8 	bl	8010c44 <__lshift>
 800ecf4:	4631      	mov	r1, r6
 800ecf6:	4605      	mov	r5, r0
 800ecf8:	f002 f810 	bl	8010d1c <__mcmp>
 800ecfc:	2800      	cmp	r0, #0
 800ecfe:	dd6a      	ble.n	800edd6 <_strtod_l+0x8e6>
 800ed00:	9904      	ldr	r1, [sp, #16]
 800ed02:	4a55      	ldr	r2, [pc, #340]	; (800ee58 <_strtod_l+0x968>)
 800ed04:	465b      	mov	r3, fp
 800ed06:	2900      	cmp	r1, #0
 800ed08:	f000 8085 	beq.w	800ee16 <_strtod_l+0x926>
 800ed0c:	ea02 010b 	and.w	r1, r2, fp
 800ed10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ed14:	dc7f      	bgt.n	800ee16 <_strtod_l+0x926>
 800ed16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ed1a:	f77f aeaa 	ble.w	800ea72 <_strtod_l+0x582>
 800ed1e:	4a4f      	ldr	r2, [pc, #316]	; (800ee5c <_strtod_l+0x96c>)
 800ed20:	2300      	movs	r3, #0
 800ed22:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ed26:	4650      	mov	r0, sl
 800ed28:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ed2c:	4659      	mov	r1, fp
 800ed2e:	f7f1 fc7b 	bl	8000628 <__aeabi_dmul>
 800ed32:	460b      	mov	r3, r1
 800ed34:	4303      	orrs	r3, r0
 800ed36:	bf08      	it	eq
 800ed38:	2322      	moveq	r3, #34	; 0x22
 800ed3a:	4682      	mov	sl, r0
 800ed3c:	468b      	mov	fp, r1
 800ed3e:	bf08      	it	eq
 800ed40:	6023      	streq	r3, [r4, #0]
 800ed42:	e62b      	b.n	800e99c <_strtod_l+0x4ac>
 800ed44:	f04f 32ff 	mov.w	r2, #4294967295
 800ed48:	fa02 f303 	lsl.w	r3, r2, r3
 800ed4c:	ea03 0a0a 	and.w	sl, r3, sl
 800ed50:	e6de      	b.n	800eb10 <_strtod_l+0x620>
 800ed52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ed56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ed5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ed5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ed62:	fa01 f308 	lsl.w	r3, r1, r8
 800ed66:	930c      	str	r3, [sp, #48]	; 0x30
 800ed68:	9111      	str	r1, [sp, #68]	; 0x44
 800ed6a:	e741      	b.n	800ebf0 <_strtod_l+0x700>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	930c      	str	r3, [sp, #48]	; 0x30
 800ed70:	2301      	movs	r3, #1
 800ed72:	9311      	str	r3, [sp, #68]	; 0x44
 800ed74:	e73c      	b.n	800ebf0 <_strtod_l+0x700>
 800ed76:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ed78:	4642      	mov	r2, r8
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	f001 ff62 	bl	8010c44 <__lshift>
 800ed80:	901e      	str	r0, [sp, #120]	; 0x78
 800ed82:	2800      	cmp	r0, #0
 800ed84:	f47f af66 	bne.w	800ec54 <_strtod_l+0x764>
 800ed88:	e5fe      	b.n	800e988 <_strtod_l+0x498>
 800ed8a:	465f      	mov	r7, fp
 800ed8c:	d16e      	bne.n	800ee6c <_strtod_l+0x97c>
 800ed8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed94:	b342      	cbz	r2, 800ede8 <_strtod_l+0x8f8>
 800ed96:	4a32      	ldr	r2, [pc, #200]	; (800ee60 <_strtod_l+0x970>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d128      	bne.n	800edee <_strtod_l+0x8fe>
 800ed9c:	9b04      	ldr	r3, [sp, #16]
 800ed9e:	4650      	mov	r0, sl
 800eda0:	b1eb      	cbz	r3, 800edde <_strtod_l+0x8ee>
 800eda2:	4a2d      	ldr	r2, [pc, #180]	; (800ee58 <_strtod_l+0x968>)
 800eda4:	403a      	ands	r2, r7
 800eda6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800edaa:	f04f 31ff 	mov.w	r1, #4294967295
 800edae:	d819      	bhi.n	800ede4 <_strtod_l+0x8f4>
 800edb0:	0d12      	lsrs	r2, r2, #20
 800edb2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800edb6:	fa01 f303 	lsl.w	r3, r1, r3
 800edba:	4298      	cmp	r0, r3
 800edbc:	d117      	bne.n	800edee <_strtod_l+0x8fe>
 800edbe:	4b29      	ldr	r3, [pc, #164]	; (800ee64 <_strtod_l+0x974>)
 800edc0:	429f      	cmp	r7, r3
 800edc2:	d102      	bne.n	800edca <_strtod_l+0x8da>
 800edc4:	3001      	adds	r0, #1
 800edc6:	f43f addf 	beq.w	800e988 <_strtod_l+0x498>
 800edca:	4b23      	ldr	r3, [pc, #140]	; (800ee58 <_strtod_l+0x968>)
 800edcc:	403b      	ands	r3, r7
 800edce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800edd2:	f04f 0a00 	mov.w	sl, #0
 800edd6:	9b04      	ldr	r3, [sp, #16]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d1a0      	bne.n	800ed1e <_strtod_l+0x82e>
 800eddc:	e5de      	b.n	800e99c <_strtod_l+0x4ac>
 800edde:	f04f 33ff 	mov.w	r3, #4294967295
 800ede2:	e7ea      	b.n	800edba <_strtod_l+0x8ca>
 800ede4:	460b      	mov	r3, r1
 800ede6:	e7e8      	b.n	800edba <_strtod_l+0x8ca>
 800ede8:	ea53 030a 	orrs.w	r3, r3, sl
 800edec:	d088      	beq.n	800ed00 <_strtod_l+0x810>
 800edee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edf0:	b1db      	cbz	r3, 800ee2a <_strtod_l+0x93a>
 800edf2:	423b      	tst	r3, r7
 800edf4:	d0ef      	beq.n	800edd6 <_strtod_l+0x8e6>
 800edf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edf8:	9a04      	ldr	r2, [sp, #16]
 800edfa:	4650      	mov	r0, sl
 800edfc:	4659      	mov	r1, fp
 800edfe:	b1c3      	cbz	r3, 800ee32 <_strtod_l+0x942>
 800ee00:	f7ff fb5a 	bl	800e4b8 <sulp>
 800ee04:	4602      	mov	r2, r0
 800ee06:	460b      	mov	r3, r1
 800ee08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee0c:	f7f1 fa56 	bl	80002bc <__adddf3>
 800ee10:	4682      	mov	sl, r0
 800ee12:	468b      	mov	fp, r1
 800ee14:	e7df      	b.n	800edd6 <_strtod_l+0x8e6>
 800ee16:	4013      	ands	r3, r2
 800ee18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ee1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ee20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ee24:	f04f 3aff 	mov.w	sl, #4294967295
 800ee28:	e7d5      	b.n	800edd6 <_strtod_l+0x8e6>
 800ee2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee2c:	ea13 0f0a 	tst.w	r3, sl
 800ee30:	e7e0      	b.n	800edf4 <_strtod_l+0x904>
 800ee32:	f7ff fb41 	bl	800e4b8 <sulp>
 800ee36:	4602      	mov	r2, r0
 800ee38:	460b      	mov	r3, r1
 800ee3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee3e:	f7f1 fa3b 	bl	80002b8 <__aeabi_dsub>
 800ee42:	2200      	movs	r2, #0
 800ee44:	2300      	movs	r3, #0
 800ee46:	4682      	mov	sl, r0
 800ee48:	468b      	mov	fp, r1
 800ee4a:	f7f1 fe55 	bl	8000af8 <__aeabi_dcmpeq>
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	d0c1      	beq.n	800edd6 <_strtod_l+0x8e6>
 800ee52:	e60e      	b.n	800ea72 <_strtod_l+0x582>
 800ee54:	fffffc02 	.word	0xfffffc02
 800ee58:	7ff00000 	.word	0x7ff00000
 800ee5c:	39500000 	.word	0x39500000
 800ee60:	000fffff 	.word	0x000fffff
 800ee64:	7fefffff 	.word	0x7fefffff
 800ee68:	080258a8 	.word	0x080258a8
 800ee6c:	4631      	mov	r1, r6
 800ee6e:	4628      	mov	r0, r5
 800ee70:	f002 f8d0 	bl	8011014 <__ratio>
 800ee74:	ec59 8b10 	vmov	r8, r9, d0
 800ee78:	ee10 0a10 	vmov	r0, s0
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee82:	4649      	mov	r1, r9
 800ee84:	f7f1 fe4c 	bl	8000b20 <__aeabi_dcmple>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	d07c      	beq.n	800ef86 <_strtod_l+0xa96>
 800ee8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d04c      	beq.n	800ef2c <_strtod_l+0xa3c>
 800ee92:	4b95      	ldr	r3, [pc, #596]	; (800f0e8 <_strtod_l+0xbf8>)
 800ee94:	2200      	movs	r2, #0
 800ee96:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ee9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f0e8 <_strtod_l+0xbf8>
 800ee9e:	f04f 0800 	mov.w	r8, #0
 800eea2:	4b92      	ldr	r3, [pc, #584]	; (800f0ec <_strtod_l+0xbfc>)
 800eea4:	403b      	ands	r3, r7
 800eea6:	9311      	str	r3, [sp, #68]	; 0x44
 800eea8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eeaa:	4b91      	ldr	r3, [pc, #580]	; (800f0f0 <_strtod_l+0xc00>)
 800eeac:	429a      	cmp	r2, r3
 800eeae:	f040 80b2 	bne.w	800f016 <_strtod_l+0xb26>
 800eeb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eeb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eeba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800eebe:	ec4b ab10 	vmov	d0, sl, fp
 800eec2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800eec6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eeca:	f001 ffcb 	bl	8010e64 <__ulp>
 800eece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eed2:	ec53 2b10 	vmov	r2, r3, d0
 800eed6:	f7f1 fba7 	bl	8000628 <__aeabi_dmul>
 800eeda:	4652      	mov	r2, sl
 800eedc:	465b      	mov	r3, fp
 800eede:	f7f1 f9ed 	bl	80002bc <__adddf3>
 800eee2:	460b      	mov	r3, r1
 800eee4:	4981      	ldr	r1, [pc, #516]	; (800f0ec <_strtod_l+0xbfc>)
 800eee6:	4a83      	ldr	r2, [pc, #524]	; (800f0f4 <_strtod_l+0xc04>)
 800eee8:	4019      	ands	r1, r3
 800eeea:	4291      	cmp	r1, r2
 800eeec:	4682      	mov	sl, r0
 800eeee:	d95e      	bls.n	800efae <_strtod_l+0xabe>
 800eef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eef2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d103      	bne.n	800ef02 <_strtod_l+0xa12>
 800eefa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eefc:	3301      	adds	r3, #1
 800eefe:	f43f ad43 	beq.w	800e988 <_strtod_l+0x498>
 800ef02:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f100 <_strtod_l+0xc10>
 800ef06:	f04f 3aff 	mov.w	sl, #4294967295
 800ef0a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f001 fc7d 	bl	801080c <_Bfree>
 800ef12:	9907      	ldr	r1, [sp, #28]
 800ef14:	4620      	mov	r0, r4
 800ef16:	f001 fc79 	bl	801080c <_Bfree>
 800ef1a:	4631      	mov	r1, r6
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	f001 fc75 	bl	801080c <_Bfree>
 800ef22:	4629      	mov	r1, r5
 800ef24:	4620      	mov	r0, r4
 800ef26:	f001 fc71 	bl	801080c <_Bfree>
 800ef2a:	e613      	b.n	800eb54 <_strtod_l+0x664>
 800ef2c:	f1ba 0f00 	cmp.w	sl, #0
 800ef30:	d11b      	bne.n	800ef6a <_strtod_l+0xa7a>
 800ef32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef36:	b9f3      	cbnz	r3, 800ef76 <_strtod_l+0xa86>
 800ef38:	4b6b      	ldr	r3, [pc, #428]	; (800f0e8 <_strtod_l+0xbf8>)
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	4640      	mov	r0, r8
 800ef3e:	4649      	mov	r1, r9
 800ef40:	f7f1 fde4 	bl	8000b0c <__aeabi_dcmplt>
 800ef44:	b9d0      	cbnz	r0, 800ef7c <_strtod_l+0xa8c>
 800ef46:	4640      	mov	r0, r8
 800ef48:	4649      	mov	r1, r9
 800ef4a:	4b6b      	ldr	r3, [pc, #428]	; (800f0f8 <_strtod_l+0xc08>)
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f7f1 fb6b 	bl	8000628 <__aeabi_dmul>
 800ef52:	4680      	mov	r8, r0
 800ef54:	4689      	mov	r9, r1
 800ef56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ef5a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ef5e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ef60:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ef64:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ef68:	e79b      	b.n	800eea2 <_strtod_l+0x9b2>
 800ef6a:	f1ba 0f01 	cmp.w	sl, #1
 800ef6e:	d102      	bne.n	800ef76 <_strtod_l+0xa86>
 800ef70:	2f00      	cmp	r7, #0
 800ef72:	f43f ad7e 	beq.w	800ea72 <_strtod_l+0x582>
 800ef76:	4b61      	ldr	r3, [pc, #388]	; (800f0fc <_strtod_l+0xc0c>)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	e78c      	b.n	800ee96 <_strtod_l+0x9a6>
 800ef7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f0f8 <_strtod_l+0xc08>
 800ef80:	f04f 0800 	mov.w	r8, #0
 800ef84:	e7e7      	b.n	800ef56 <_strtod_l+0xa66>
 800ef86:	4b5c      	ldr	r3, [pc, #368]	; (800f0f8 <_strtod_l+0xc08>)
 800ef88:	4640      	mov	r0, r8
 800ef8a:	4649      	mov	r1, r9
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	f7f1 fb4b 	bl	8000628 <__aeabi_dmul>
 800ef92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef94:	4680      	mov	r8, r0
 800ef96:	4689      	mov	r9, r1
 800ef98:	b933      	cbnz	r3, 800efa8 <_strtod_l+0xab8>
 800ef9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef9e:	9012      	str	r0, [sp, #72]	; 0x48
 800efa0:	9313      	str	r3, [sp, #76]	; 0x4c
 800efa2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800efa6:	e7dd      	b.n	800ef64 <_strtod_l+0xa74>
 800efa8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800efac:	e7f9      	b.n	800efa2 <_strtod_l+0xab2>
 800efae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800efb2:	9b04      	ldr	r3, [sp, #16]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d1a8      	bne.n	800ef0a <_strtod_l+0xa1a>
 800efb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800efbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800efbe:	0d1b      	lsrs	r3, r3, #20
 800efc0:	051b      	lsls	r3, r3, #20
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d1a1      	bne.n	800ef0a <_strtod_l+0xa1a>
 800efc6:	4640      	mov	r0, r8
 800efc8:	4649      	mov	r1, r9
 800efca:	f7f1 fe8d 	bl	8000ce8 <__aeabi_d2lz>
 800efce:	f7f1 fafd 	bl	80005cc <__aeabi_l2d>
 800efd2:	4602      	mov	r2, r0
 800efd4:	460b      	mov	r3, r1
 800efd6:	4640      	mov	r0, r8
 800efd8:	4649      	mov	r1, r9
 800efda:	f7f1 f96d 	bl	80002b8 <__aeabi_dsub>
 800efde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800efe0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800efe4:	ea43 030a 	orr.w	r3, r3, sl
 800efe8:	4313      	orrs	r3, r2
 800efea:	4680      	mov	r8, r0
 800efec:	4689      	mov	r9, r1
 800efee:	d053      	beq.n	800f098 <_strtod_l+0xba8>
 800eff0:	a335      	add	r3, pc, #212	; (adr r3, 800f0c8 <_strtod_l+0xbd8>)
 800eff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff6:	f7f1 fd89 	bl	8000b0c <__aeabi_dcmplt>
 800effa:	2800      	cmp	r0, #0
 800effc:	f47f acce 	bne.w	800e99c <_strtod_l+0x4ac>
 800f000:	a333      	add	r3, pc, #204	; (adr r3, 800f0d0 <_strtod_l+0xbe0>)
 800f002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f006:	4640      	mov	r0, r8
 800f008:	4649      	mov	r1, r9
 800f00a:	f7f1 fd9d 	bl	8000b48 <__aeabi_dcmpgt>
 800f00e:	2800      	cmp	r0, #0
 800f010:	f43f af7b 	beq.w	800ef0a <_strtod_l+0xa1a>
 800f014:	e4c2      	b.n	800e99c <_strtod_l+0x4ac>
 800f016:	9b04      	ldr	r3, [sp, #16]
 800f018:	b333      	cbz	r3, 800f068 <_strtod_l+0xb78>
 800f01a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f01c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f020:	d822      	bhi.n	800f068 <_strtod_l+0xb78>
 800f022:	a32d      	add	r3, pc, #180	; (adr r3, 800f0d8 <_strtod_l+0xbe8>)
 800f024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f028:	4640      	mov	r0, r8
 800f02a:	4649      	mov	r1, r9
 800f02c:	f7f1 fd78 	bl	8000b20 <__aeabi_dcmple>
 800f030:	b1a0      	cbz	r0, 800f05c <_strtod_l+0xb6c>
 800f032:	4649      	mov	r1, r9
 800f034:	4640      	mov	r0, r8
 800f036:	f7f1 fdcf 	bl	8000bd8 <__aeabi_d2uiz>
 800f03a:	2801      	cmp	r0, #1
 800f03c:	bf38      	it	cc
 800f03e:	2001      	movcc	r0, #1
 800f040:	f7f1 fa78 	bl	8000534 <__aeabi_ui2d>
 800f044:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f046:	4680      	mov	r8, r0
 800f048:	4689      	mov	r9, r1
 800f04a:	bb13      	cbnz	r3, 800f092 <_strtod_l+0xba2>
 800f04c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f050:	9014      	str	r0, [sp, #80]	; 0x50
 800f052:	9315      	str	r3, [sp, #84]	; 0x54
 800f054:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f058:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f05c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f05e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f060:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f064:	1a9b      	subs	r3, r3, r2
 800f066:	930d      	str	r3, [sp, #52]	; 0x34
 800f068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f06c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f070:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f074:	f001 fef6 	bl	8010e64 <__ulp>
 800f078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f07c:	ec53 2b10 	vmov	r2, r3, d0
 800f080:	f7f1 fad2 	bl	8000628 <__aeabi_dmul>
 800f084:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f088:	f7f1 f918 	bl	80002bc <__adddf3>
 800f08c:	4682      	mov	sl, r0
 800f08e:	468b      	mov	fp, r1
 800f090:	e78f      	b.n	800efb2 <_strtod_l+0xac2>
 800f092:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f096:	e7dd      	b.n	800f054 <_strtod_l+0xb64>
 800f098:	a311      	add	r3, pc, #68	; (adr r3, 800f0e0 <_strtod_l+0xbf0>)
 800f09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09e:	f7f1 fd35 	bl	8000b0c <__aeabi_dcmplt>
 800f0a2:	e7b4      	b.n	800f00e <_strtod_l+0xb1e>
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	930e      	str	r3, [sp, #56]	; 0x38
 800f0a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f0aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f0ac:	6013      	str	r3, [r2, #0]
 800f0ae:	f7ff ba65 	b.w	800e57c <_strtod_l+0x8c>
 800f0b2:	2b65      	cmp	r3, #101	; 0x65
 800f0b4:	f43f ab5d 	beq.w	800e772 <_strtod_l+0x282>
 800f0b8:	2b45      	cmp	r3, #69	; 0x45
 800f0ba:	f43f ab5a 	beq.w	800e772 <_strtod_l+0x282>
 800f0be:	2201      	movs	r2, #1
 800f0c0:	f7ff bb92 	b.w	800e7e8 <_strtod_l+0x2f8>
 800f0c4:	f3af 8000 	nop.w
 800f0c8:	94a03595 	.word	0x94a03595
 800f0cc:	3fdfffff 	.word	0x3fdfffff
 800f0d0:	35afe535 	.word	0x35afe535
 800f0d4:	3fe00000 	.word	0x3fe00000
 800f0d8:	ffc00000 	.word	0xffc00000
 800f0dc:	41dfffff 	.word	0x41dfffff
 800f0e0:	94a03595 	.word	0x94a03595
 800f0e4:	3fcfffff 	.word	0x3fcfffff
 800f0e8:	3ff00000 	.word	0x3ff00000
 800f0ec:	7ff00000 	.word	0x7ff00000
 800f0f0:	7fe00000 	.word	0x7fe00000
 800f0f4:	7c9fffff 	.word	0x7c9fffff
 800f0f8:	3fe00000 	.word	0x3fe00000
 800f0fc:	bff00000 	.word	0xbff00000
 800f100:	7fefffff 	.word	0x7fefffff

0800f104 <_strtod_r>:
 800f104:	4b01      	ldr	r3, [pc, #4]	; (800f10c <_strtod_r+0x8>)
 800f106:	f7ff b9f3 	b.w	800e4f0 <_strtod_l>
 800f10a:	bf00      	nop
 800f10c:	200000a8 	.word	0x200000a8

0800f110 <strtod>:
 800f110:	460a      	mov	r2, r1
 800f112:	4601      	mov	r1, r0
 800f114:	4802      	ldr	r0, [pc, #8]	; (800f120 <strtod+0x10>)
 800f116:	4b03      	ldr	r3, [pc, #12]	; (800f124 <strtod+0x14>)
 800f118:	6800      	ldr	r0, [r0, #0]
 800f11a:	f7ff b9e9 	b.w	800e4f0 <_strtod_l>
 800f11e:	bf00      	nop
 800f120:	20000040 	.word	0x20000040
 800f124:	200000a8 	.word	0x200000a8

0800f128 <strtok>:
 800f128:	4b16      	ldr	r3, [pc, #88]	; (800f184 <strtok+0x5c>)
 800f12a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f12c:	681e      	ldr	r6, [r3, #0]
 800f12e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800f130:	4605      	mov	r5, r0
 800f132:	b9fc      	cbnz	r4, 800f174 <strtok+0x4c>
 800f134:	2050      	movs	r0, #80	; 0x50
 800f136:	9101      	str	r1, [sp, #4]
 800f138:	f001 fb00 	bl	801073c <malloc>
 800f13c:	9901      	ldr	r1, [sp, #4]
 800f13e:	65b0      	str	r0, [r6, #88]	; 0x58
 800f140:	4602      	mov	r2, r0
 800f142:	b920      	cbnz	r0, 800f14e <strtok+0x26>
 800f144:	4b10      	ldr	r3, [pc, #64]	; (800f188 <strtok+0x60>)
 800f146:	4811      	ldr	r0, [pc, #68]	; (800f18c <strtok+0x64>)
 800f148:	2157      	movs	r1, #87	; 0x57
 800f14a:	f000 f8d9 	bl	800f300 <__assert_func>
 800f14e:	e9c0 4400 	strd	r4, r4, [r0]
 800f152:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f156:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f15a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f15e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f162:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f166:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f16a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f16e:	6184      	str	r4, [r0, #24]
 800f170:	7704      	strb	r4, [r0, #28]
 800f172:	6244      	str	r4, [r0, #36]	; 0x24
 800f174:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800f176:	2301      	movs	r3, #1
 800f178:	4628      	mov	r0, r5
 800f17a:	b002      	add	sp, #8
 800f17c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f180:	f000 b806 	b.w	800f190 <__strtok_r>
 800f184:	20000040 	.word	0x20000040
 800f188:	080258d0 	.word	0x080258d0
 800f18c:	080258e7 	.word	0x080258e7

0800f190 <__strtok_r>:
 800f190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f192:	b908      	cbnz	r0, 800f198 <__strtok_r+0x8>
 800f194:	6810      	ldr	r0, [r2, #0]
 800f196:	b188      	cbz	r0, 800f1bc <__strtok_r+0x2c>
 800f198:	4604      	mov	r4, r0
 800f19a:	4620      	mov	r0, r4
 800f19c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f1a0:	460f      	mov	r7, r1
 800f1a2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f1a6:	b91e      	cbnz	r6, 800f1b0 <__strtok_r+0x20>
 800f1a8:	b965      	cbnz	r5, 800f1c4 <__strtok_r+0x34>
 800f1aa:	6015      	str	r5, [r2, #0]
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	e005      	b.n	800f1bc <__strtok_r+0x2c>
 800f1b0:	42b5      	cmp	r5, r6
 800f1b2:	d1f6      	bne.n	800f1a2 <__strtok_r+0x12>
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d1f0      	bne.n	800f19a <__strtok_r+0xa>
 800f1b8:	6014      	str	r4, [r2, #0]
 800f1ba:	7003      	strb	r3, [r0, #0]
 800f1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1be:	461c      	mov	r4, r3
 800f1c0:	e00c      	b.n	800f1dc <__strtok_r+0x4c>
 800f1c2:	b915      	cbnz	r5, 800f1ca <__strtok_r+0x3a>
 800f1c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f1c8:	460e      	mov	r6, r1
 800f1ca:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f1ce:	42ab      	cmp	r3, r5
 800f1d0:	d1f7      	bne.n	800f1c2 <__strtok_r+0x32>
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d0f3      	beq.n	800f1be <__strtok_r+0x2e>
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f1dc:	6014      	str	r4, [r2, #0]
 800f1de:	e7ed      	b.n	800f1bc <__strtok_r+0x2c>

0800f1e0 <_strtol_l.isra.0>:
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1e6:	d001      	beq.n	800f1ec <_strtol_l.isra.0+0xc>
 800f1e8:	2b24      	cmp	r3, #36	; 0x24
 800f1ea:	d906      	bls.n	800f1fa <_strtol_l.isra.0+0x1a>
 800f1ec:	f7fe fa92 	bl	800d714 <__errno>
 800f1f0:	2316      	movs	r3, #22
 800f1f2:	6003      	str	r3, [r0, #0]
 800f1f4:	2000      	movs	r0, #0
 800f1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1fa:	4f3a      	ldr	r7, [pc, #232]	; (800f2e4 <_strtol_l.isra.0+0x104>)
 800f1fc:	468e      	mov	lr, r1
 800f1fe:	4676      	mov	r6, lr
 800f200:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f204:	5de5      	ldrb	r5, [r4, r7]
 800f206:	f015 0508 	ands.w	r5, r5, #8
 800f20a:	d1f8      	bne.n	800f1fe <_strtol_l.isra.0+0x1e>
 800f20c:	2c2d      	cmp	r4, #45	; 0x2d
 800f20e:	d134      	bne.n	800f27a <_strtol_l.isra.0+0x9a>
 800f210:	f89e 4000 	ldrb.w	r4, [lr]
 800f214:	f04f 0801 	mov.w	r8, #1
 800f218:	f106 0e02 	add.w	lr, r6, #2
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d05c      	beq.n	800f2da <_strtol_l.isra.0+0xfa>
 800f220:	2b10      	cmp	r3, #16
 800f222:	d10c      	bne.n	800f23e <_strtol_l.isra.0+0x5e>
 800f224:	2c30      	cmp	r4, #48	; 0x30
 800f226:	d10a      	bne.n	800f23e <_strtol_l.isra.0+0x5e>
 800f228:	f89e 4000 	ldrb.w	r4, [lr]
 800f22c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f230:	2c58      	cmp	r4, #88	; 0x58
 800f232:	d14d      	bne.n	800f2d0 <_strtol_l.isra.0+0xf0>
 800f234:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f238:	2310      	movs	r3, #16
 800f23a:	f10e 0e02 	add.w	lr, lr, #2
 800f23e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f242:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f246:	2600      	movs	r6, #0
 800f248:	fbbc f9f3 	udiv	r9, ip, r3
 800f24c:	4635      	mov	r5, r6
 800f24e:	fb03 ca19 	mls	sl, r3, r9, ip
 800f252:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f256:	2f09      	cmp	r7, #9
 800f258:	d818      	bhi.n	800f28c <_strtol_l.isra.0+0xac>
 800f25a:	463c      	mov	r4, r7
 800f25c:	42a3      	cmp	r3, r4
 800f25e:	dd24      	ble.n	800f2aa <_strtol_l.isra.0+0xca>
 800f260:	2e00      	cmp	r6, #0
 800f262:	db1f      	blt.n	800f2a4 <_strtol_l.isra.0+0xc4>
 800f264:	45a9      	cmp	r9, r5
 800f266:	d31d      	bcc.n	800f2a4 <_strtol_l.isra.0+0xc4>
 800f268:	d101      	bne.n	800f26e <_strtol_l.isra.0+0x8e>
 800f26a:	45a2      	cmp	sl, r4
 800f26c:	db1a      	blt.n	800f2a4 <_strtol_l.isra.0+0xc4>
 800f26e:	fb05 4503 	mla	r5, r5, r3, r4
 800f272:	2601      	movs	r6, #1
 800f274:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f278:	e7eb      	b.n	800f252 <_strtol_l.isra.0+0x72>
 800f27a:	2c2b      	cmp	r4, #43	; 0x2b
 800f27c:	bf08      	it	eq
 800f27e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f282:	46a8      	mov	r8, r5
 800f284:	bf08      	it	eq
 800f286:	f106 0e02 	addeq.w	lr, r6, #2
 800f28a:	e7c7      	b.n	800f21c <_strtol_l.isra.0+0x3c>
 800f28c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f290:	2f19      	cmp	r7, #25
 800f292:	d801      	bhi.n	800f298 <_strtol_l.isra.0+0xb8>
 800f294:	3c37      	subs	r4, #55	; 0x37
 800f296:	e7e1      	b.n	800f25c <_strtol_l.isra.0+0x7c>
 800f298:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f29c:	2f19      	cmp	r7, #25
 800f29e:	d804      	bhi.n	800f2aa <_strtol_l.isra.0+0xca>
 800f2a0:	3c57      	subs	r4, #87	; 0x57
 800f2a2:	e7db      	b.n	800f25c <_strtol_l.isra.0+0x7c>
 800f2a4:	f04f 36ff 	mov.w	r6, #4294967295
 800f2a8:	e7e4      	b.n	800f274 <_strtol_l.isra.0+0x94>
 800f2aa:	2e00      	cmp	r6, #0
 800f2ac:	da05      	bge.n	800f2ba <_strtol_l.isra.0+0xda>
 800f2ae:	2322      	movs	r3, #34	; 0x22
 800f2b0:	6003      	str	r3, [r0, #0]
 800f2b2:	4665      	mov	r5, ip
 800f2b4:	b942      	cbnz	r2, 800f2c8 <_strtol_l.isra.0+0xe8>
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	e79d      	b.n	800f1f6 <_strtol_l.isra.0+0x16>
 800f2ba:	f1b8 0f00 	cmp.w	r8, #0
 800f2be:	d000      	beq.n	800f2c2 <_strtol_l.isra.0+0xe2>
 800f2c0:	426d      	negs	r5, r5
 800f2c2:	2a00      	cmp	r2, #0
 800f2c4:	d0f7      	beq.n	800f2b6 <_strtol_l.isra.0+0xd6>
 800f2c6:	b10e      	cbz	r6, 800f2cc <_strtol_l.isra.0+0xec>
 800f2c8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800f2cc:	6011      	str	r1, [r2, #0]
 800f2ce:	e7f2      	b.n	800f2b6 <_strtol_l.isra.0+0xd6>
 800f2d0:	2430      	movs	r4, #48	; 0x30
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d1b3      	bne.n	800f23e <_strtol_l.isra.0+0x5e>
 800f2d6:	2308      	movs	r3, #8
 800f2d8:	e7b1      	b.n	800f23e <_strtol_l.isra.0+0x5e>
 800f2da:	2c30      	cmp	r4, #48	; 0x30
 800f2dc:	d0a4      	beq.n	800f228 <_strtol_l.isra.0+0x48>
 800f2de:	230a      	movs	r3, #10
 800f2e0:	e7ad      	b.n	800f23e <_strtol_l.isra.0+0x5e>
 800f2e2:	bf00      	nop
 800f2e4:	08025985 	.word	0x08025985

0800f2e8 <_strtol_r>:
 800f2e8:	f7ff bf7a 	b.w	800f1e0 <_strtol_l.isra.0>

0800f2ec <strtol>:
 800f2ec:	4613      	mov	r3, r2
 800f2ee:	460a      	mov	r2, r1
 800f2f0:	4601      	mov	r1, r0
 800f2f2:	4802      	ldr	r0, [pc, #8]	; (800f2fc <strtol+0x10>)
 800f2f4:	6800      	ldr	r0, [r0, #0]
 800f2f6:	f7ff bf73 	b.w	800f1e0 <_strtol_l.isra.0>
 800f2fa:	bf00      	nop
 800f2fc:	20000040 	.word	0x20000040

0800f300 <__assert_func>:
 800f300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f302:	4614      	mov	r4, r2
 800f304:	461a      	mov	r2, r3
 800f306:	4b09      	ldr	r3, [pc, #36]	; (800f32c <__assert_func+0x2c>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	4605      	mov	r5, r0
 800f30c:	68d8      	ldr	r0, [r3, #12]
 800f30e:	b14c      	cbz	r4, 800f324 <__assert_func+0x24>
 800f310:	4b07      	ldr	r3, [pc, #28]	; (800f330 <__assert_func+0x30>)
 800f312:	9100      	str	r1, [sp, #0]
 800f314:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f318:	4906      	ldr	r1, [pc, #24]	; (800f334 <__assert_func+0x34>)
 800f31a:	462b      	mov	r3, r5
 800f31c:	f000 fe88 	bl	8010030 <fiprintf>
 800f320:	f002 fb56 	bl	80119d0 <abort>
 800f324:	4b04      	ldr	r3, [pc, #16]	; (800f338 <__assert_func+0x38>)
 800f326:	461c      	mov	r4, r3
 800f328:	e7f3      	b.n	800f312 <__assert_func+0x12>
 800f32a:	bf00      	nop
 800f32c:	20000040 	.word	0x20000040
 800f330:	08025948 	.word	0x08025948
 800f334:	08025955 	.word	0x08025955
 800f338:	08025983 	.word	0x08025983

0800f33c <quorem>:
 800f33c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f340:	6903      	ldr	r3, [r0, #16]
 800f342:	690c      	ldr	r4, [r1, #16]
 800f344:	42a3      	cmp	r3, r4
 800f346:	4607      	mov	r7, r0
 800f348:	f2c0 8081 	blt.w	800f44e <quorem+0x112>
 800f34c:	3c01      	subs	r4, #1
 800f34e:	f101 0814 	add.w	r8, r1, #20
 800f352:	f100 0514 	add.w	r5, r0, #20
 800f356:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f35a:	9301      	str	r3, [sp, #4]
 800f35c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f360:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f364:	3301      	adds	r3, #1
 800f366:	429a      	cmp	r2, r3
 800f368:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f36c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f370:	fbb2 f6f3 	udiv	r6, r2, r3
 800f374:	d331      	bcc.n	800f3da <quorem+0x9e>
 800f376:	f04f 0e00 	mov.w	lr, #0
 800f37a:	4640      	mov	r0, r8
 800f37c:	46ac      	mov	ip, r5
 800f37e:	46f2      	mov	sl, lr
 800f380:	f850 2b04 	ldr.w	r2, [r0], #4
 800f384:	b293      	uxth	r3, r2
 800f386:	fb06 e303 	mla	r3, r6, r3, lr
 800f38a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f38e:	b29b      	uxth	r3, r3
 800f390:	ebaa 0303 	sub.w	r3, sl, r3
 800f394:	0c12      	lsrs	r2, r2, #16
 800f396:	f8dc a000 	ldr.w	sl, [ip]
 800f39a:	fb06 e202 	mla	r2, r6, r2, lr
 800f39e:	fa13 f38a 	uxtah	r3, r3, sl
 800f3a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f3a6:	fa1f fa82 	uxth.w	sl, r2
 800f3aa:	f8dc 2000 	ldr.w	r2, [ip]
 800f3ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f3b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3bc:	4581      	cmp	r9, r0
 800f3be:	f84c 3b04 	str.w	r3, [ip], #4
 800f3c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f3c6:	d2db      	bcs.n	800f380 <quorem+0x44>
 800f3c8:	f855 300b 	ldr.w	r3, [r5, fp]
 800f3cc:	b92b      	cbnz	r3, 800f3da <quorem+0x9e>
 800f3ce:	9b01      	ldr	r3, [sp, #4]
 800f3d0:	3b04      	subs	r3, #4
 800f3d2:	429d      	cmp	r5, r3
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	d32e      	bcc.n	800f436 <quorem+0xfa>
 800f3d8:	613c      	str	r4, [r7, #16]
 800f3da:	4638      	mov	r0, r7
 800f3dc:	f001 fc9e 	bl	8010d1c <__mcmp>
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	db24      	blt.n	800f42e <quorem+0xf2>
 800f3e4:	3601      	adds	r6, #1
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	f04f 0c00 	mov.w	ip, #0
 800f3ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800f3f0:	f8d0 e000 	ldr.w	lr, [r0]
 800f3f4:	b293      	uxth	r3, r2
 800f3f6:	ebac 0303 	sub.w	r3, ip, r3
 800f3fa:	0c12      	lsrs	r2, r2, #16
 800f3fc:	fa13 f38e 	uxtah	r3, r3, lr
 800f400:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f404:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f408:	b29b      	uxth	r3, r3
 800f40a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f40e:	45c1      	cmp	r9, r8
 800f410:	f840 3b04 	str.w	r3, [r0], #4
 800f414:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f418:	d2e8      	bcs.n	800f3ec <quorem+0xb0>
 800f41a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f41e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f422:	b922      	cbnz	r2, 800f42e <quorem+0xf2>
 800f424:	3b04      	subs	r3, #4
 800f426:	429d      	cmp	r5, r3
 800f428:	461a      	mov	r2, r3
 800f42a:	d30a      	bcc.n	800f442 <quorem+0x106>
 800f42c:	613c      	str	r4, [r7, #16]
 800f42e:	4630      	mov	r0, r6
 800f430:	b003      	add	sp, #12
 800f432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f436:	6812      	ldr	r2, [r2, #0]
 800f438:	3b04      	subs	r3, #4
 800f43a:	2a00      	cmp	r2, #0
 800f43c:	d1cc      	bne.n	800f3d8 <quorem+0x9c>
 800f43e:	3c01      	subs	r4, #1
 800f440:	e7c7      	b.n	800f3d2 <quorem+0x96>
 800f442:	6812      	ldr	r2, [r2, #0]
 800f444:	3b04      	subs	r3, #4
 800f446:	2a00      	cmp	r2, #0
 800f448:	d1f0      	bne.n	800f42c <quorem+0xf0>
 800f44a:	3c01      	subs	r4, #1
 800f44c:	e7eb      	b.n	800f426 <quorem+0xea>
 800f44e:	2000      	movs	r0, #0
 800f450:	e7ee      	b.n	800f430 <quorem+0xf4>
 800f452:	0000      	movs	r0, r0
 800f454:	0000      	movs	r0, r0
	...

0800f458 <_dtoa_r>:
 800f458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f45c:	ed2d 8b02 	vpush	{d8}
 800f460:	ec57 6b10 	vmov	r6, r7, d0
 800f464:	b095      	sub	sp, #84	; 0x54
 800f466:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f468:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f46c:	9105      	str	r1, [sp, #20]
 800f46e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f472:	4604      	mov	r4, r0
 800f474:	9209      	str	r2, [sp, #36]	; 0x24
 800f476:	930f      	str	r3, [sp, #60]	; 0x3c
 800f478:	b975      	cbnz	r5, 800f498 <_dtoa_r+0x40>
 800f47a:	2010      	movs	r0, #16
 800f47c:	f001 f95e 	bl	801073c <malloc>
 800f480:	4602      	mov	r2, r0
 800f482:	6260      	str	r0, [r4, #36]	; 0x24
 800f484:	b920      	cbnz	r0, 800f490 <_dtoa_r+0x38>
 800f486:	4bb2      	ldr	r3, [pc, #712]	; (800f750 <_dtoa_r+0x2f8>)
 800f488:	21ea      	movs	r1, #234	; 0xea
 800f48a:	48b2      	ldr	r0, [pc, #712]	; (800f754 <_dtoa_r+0x2fc>)
 800f48c:	f7ff ff38 	bl	800f300 <__assert_func>
 800f490:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f494:	6005      	str	r5, [r0, #0]
 800f496:	60c5      	str	r5, [r0, #12]
 800f498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f49a:	6819      	ldr	r1, [r3, #0]
 800f49c:	b151      	cbz	r1, 800f4b4 <_dtoa_r+0x5c>
 800f49e:	685a      	ldr	r2, [r3, #4]
 800f4a0:	604a      	str	r2, [r1, #4]
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	4093      	lsls	r3, r2
 800f4a6:	608b      	str	r3, [r1, #8]
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	f001 f9af 	bl	801080c <_Bfree>
 800f4ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	601a      	str	r2, [r3, #0]
 800f4b4:	1e3b      	subs	r3, r7, #0
 800f4b6:	bfb9      	ittee	lt
 800f4b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f4bc:	9303      	strlt	r3, [sp, #12]
 800f4be:	2300      	movge	r3, #0
 800f4c0:	f8c8 3000 	strge.w	r3, [r8]
 800f4c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f4c8:	4ba3      	ldr	r3, [pc, #652]	; (800f758 <_dtoa_r+0x300>)
 800f4ca:	bfbc      	itt	lt
 800f4cc:	2201      	movlt	r2, #1
 800f4ce:	f8c8 2000 	strlt.w	r2, [r8]
 800f4d2:	ea33 0309 	bics.w	r3, r3, r9
 800f4d6:	d11b      	bne.n	800f510 <_dtoa_r+0xb8>
 800f4d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f4da:	f242 730f 	movw	r3, #9999	; 0x270f
 800f4de:	6013      	str	r3, [r2, #0]
 800f4e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4e4:	4333      	orrs	r3, r6
 800f4e6:	f000 857a 	beq.w	800ffde <_dtoa_r+0xb86>
 800f4ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4ec:	b963      	cbnz	r3, 800f508 <_dtoa_r+0xb0>
 800f4ee:	4b9b      	ldr	r3, [pc, #620]	; (800f75c <_dtoa_r+0x304>)
 800f4f0:	e024      	b.n	800f53c <_dtoa_r+0xe4>
 800f4f2:	4b9b      	ldr	r3, [pc, #620]	; (800f760 <_dtoa_r+0x308>)
 800f4f4:	9300      	str	r3, [sp, #0]
 800f4f6:	3308      	adds	r3, #8
 800f4f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f4fa:	6013      	str	r3, [r2, #0]
 800f4fc:	9800      	ldr	r0, [sp, #0]
 800f4fe:	b015      	add	sp, #84	; 0x54
 800f500:	ecbd 8b02 	vpop	{d8}
 800f504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f508:	4b94      	ldr	r3, [pc, #592]	; (800f75c <_dtoa_r+0x304>)
 800f50a:	9300      	str	r3, [sp, #0]
 800f50c:	3303      	adds	r3, #3
 800f50e:	e7f3      	b.n	800f4f8 <_dtoa_r+0xa0>
 800f510:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f514:	2200      	movs	r2, #0
 800f516:	ec51 0b17 	vmov	r0, r1, d7
 800f51a:	2300      	movs	r3, #0
 800f51c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f520:	f7f1 faea 	bl	8000af8 <__aeabi_dcmpeq>
 800f524:	4680      	mov	r8, r0
 800f526:	b158      	cbz	r0, 800f540 <_dtoa_r+0xe8>
 800f528:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f52a:	2301      	movs	r3, #1
 800f52c:	6013      	str	r3, [r2, #0]
 800f52e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f530:	2b00      	cmp	r3, #0
 800f532:	f000 8551 	beq.w	800ffd8 <_dtoa_r+0xb80>
 800f536:	488b      	ldr	r0, [pc, #556]	; (800f764 <_dtoa_r+0x30c>)
 800f538:	6018      	str	r0, [r3, #0]
 800f53a:	1e43      	subs	r3, r0, #1
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	e7dd      	b.n	800f4fc <_dtoa_r+0xa4>
 800f540:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f544:	aa12      	add	r2, sp, #72	; 0x48
 800f546:	a913      	add	r1, sp, #76	; 0x4c
 800f548:	4620      	mov	r0, r4
 800f54a:	f001 fd07 	bl	8010f5c <__d2b>
 800f54e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f552:	4683      	mov	fp, r0
 800f554:	2d00      	cmp	r5, #0
 800f556:	d07c      	beq.n	800f652 <_dtoa_r+0x1fa>
 800f558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f55a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f55e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f562:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f566:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f56a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f56e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f572:	4b7d      	ldr	r3, [pc, #500]	; (800f768 <_dtoa_r+0x310>)
 800f574:	2200      	movs	r2, #0
 800f576:	4630      	mov	r0, r6
 800f578:	4639      	mov	r1, r7
 800f57a:	f7f0 fe9d 	bl	80002b8 <__aeabi_dsub>
 800f57e:	a36e      	add	r3, pc, #440	; (adr r3, 800f738 <_dtoa_r+0x2e0>)
 800f580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f584:	f7f1 f850 	bl	8000628 <__aeabi_dmul>
 800f588:	a36d      	add	r3, pc, #436	; (adr r3, 800f740 <_dtoa_r+0x2e8>)
 800f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58e:	f7f0 fe95 	bl	80002bc <__adddf3>
 800f592:	4606      	mov	r6, r0
 800f594:	4628      	mov	r0, r5
 800f596:	460f      	mov	r7, r1
 800f598:	f7f0 ffdc 	bl	8000554 <__aeabi_i2d>
 800f59c:	a36a      	add	r3, pc, #424	; (adr r3, 800f748 <_dtoa_r+0x2f0>)
 800f59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a2:	f7f1 f841 	bl	8000628 <__aeabi_dmul>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	4630      	mov	r0, r6
 800f5ac:	4639      	mov	r1, r7
 800f5ae:	f7f0 fe85 	bl	80002bc <__adddf3>
 800f5b2:	4606      	mov	r6, r0
 800f5b4:	460f      	mov	r7, r1
 800f5b6:	f7f1 fae7 	bl	8000b88 <__aeabi_d2iz>
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	4682      	mov	sl, r0
 800f5be:	2300      	movs	r3, #0
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	4639      	mov	r1, r7
 800f5c4:	f7f1 faa2 	bl	8000b0c <__aeabi_dcmplt>
 800f5c8:	b148      	cbz	r0, 800f5de <_dtoa_r+0x186>
 800f5ca:	4650      	mov	r0, sl
 800f5cc:	f7f0 ffc2 	bl	8000554 <__aeabi_i2d>
 800f5d0:	4632      	mov	r2, r6
 800f5d2:	463b      	mov	r3, r7
 800f5d4:	f7f1 fa90 	bl	8000af8 <__aeabi_dcmpeq>
 800f5d8:	b908      	cbnz	r0, 800f5de <_dtoa_r+0x186>
 800f5da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5de:	f1ba 0f16 	cmp.w	sl, #22
 800f5e2:	d854      	bhi.n	800f68e <_dtoa_r+0x236>
 800f5e4:	4b61      	ldr	r3, [pc, #388]	; (800f76c <_dtoa_r+0x314>)
 800f5e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5f2:	f7f1 fa8b 	bl	8000b0c <__aeabi_dcmplt>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	d04b      	beq.n	800f692 <_dtoa_r+0x23a>
 800f5fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5fe:	2300      	movs	r3, #0
 800f600:	930e      	str	r3, [sp, #56]	; 0x38
 800f602:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f604:	1b5d      	subs	r5, r3, r5
 800f606:	1e6b      	subs	r3, r5, #1
 800f608:	9304      	str	r3, [sp, #16]
 800f60a:	bf43      	ittte	mi
 800f60c:	2300      	movmi	r3, #0
 800f60e:	f1c5 0801 	rsbmi	r8, r5, #1
 800f612:	9304      	strmi	r3, [sp, #16]
 800f614:	f04f 0800 	movpl.w	r8, #0
 800f618:	f1ba 0f00 	cmp.w	sl, #0
 800f61c:	db3b      	blt.n	800f696 <_dtoa_r+0x23e>
 800f61e:	9b04      	ldr	r3, [sp, #16]
 800f620:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f624:	4453      	add	r3, sl
 800f626:	9304      	str	r3, [sp, #16]
 800f628:	2300      	movs	r3, #0
 800f62a:	9306      	str	r3, [sp, #24]
 800f62c:	9b05      	ldr	r3, [sp, #20]
 800f62e:	2b09      	cmp	r3, #9
 800f630:	d869      	bhi.n	800f706 <_dtoa_r+0x2ae>
 800f632:	2b05      	cmp	r3, #5
 800f634:	bfc4      	itt	gt
 800f636:	3b04      	subgt	r3, #4
 800f638:	9305      	strgt	r3, [sp, #20]
 800f63a:	9b05      	ldr	r3, [sp, #20]
 800f63c:	f1a3 0302 	sub.w	r3, r3, #2
 800f640:	bfcc      	ite	gt
 800f642:	2500      	movgt	r5, #0
 800f644:	2501      	movle	r5, #1
 800f646:	2b03      	cmp	r3, #3
 800f648:	d869      	bhi.n	800f71e <_dtoa_r+0x2c6>
 800f64a:	e8df f003 	tbb	[pc, r3]
 800f64e:	4e2c      	.short	0x4e2c
 800f650:	5a4c      	.short	0x5a4c
 800f652:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f656:	441d      	add	r5, r3
 800f658:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f65c:	2b20      	cmp	r3, #32
 800f65e:	bfc1      	itttt	gt
 800f660:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f664:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f668:	fa09 f303 	lslgt.w	r3, r9, r3
 800f66c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f670:	bfda      	itte	le
 800f672:	f1c3 0320 	rsble	r3, r3, #32
 800f676:	fa06 f003 	lslle.w	r0, r6, r3
 800f67a:	4318      	orrgt	r0, r3
 800f67c:	f7f0 ff5a 	bl	8000534 <__aeabi_ui2d>
 800f680:	2301      	movs	r3, #1
 800f682:	4606      	mov	r6, r0
 800f684:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f688:	3d01      	subs	r5, #1
 800f68a:	9310      	str	r3, [sp, #64]	; 0x40
 800f68c:	e771      	b.n	800f572 <_dtoa_r+0x11a>
 800f68e:	2301      	movs	r3, #1
 800f690:	e7b6      	b.n	800f600 <_dtoa_r+0x1a8>
 800f692:	900e      	str	r0, [sp, #56]	; 0x38
 800f694:	e7b5      	b.n	800f602 <_dtoa_r+0x1aa>
 800f696:	f1ca 0300 	rsb	r3, sl, #0
 800f69a:	9306      	str	r3, [sp, #24]
 800f69c:	2300      	movs	r3, #0
 800f69e:	eba8 080a 	sub.w	r8, r8, sl
 800f6a2:	930d      	str	r3, [sp, #52]	; 0x34
 800f6a4:	e7c2      	b.n	800f62c <_dtoa_r+0x1d4>
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	9308      	str	r3, [sp, #32]
 800f6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	dc39      	bgt.n	800f724 <_dtoa_r+0x2cc>
 800f6b0:	f04f 0901 	mov.w	r9, #1
 800f6b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800f6b8:	464b      	mov	r3, r9
 800f6ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f6be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	6042      	str	r2, [r0, #4]
 800f6c4:	2204      	movs	r2, #4
 800f6c6:	f102 0614 	add.w	r6, r2, #20
 800f6ca:	429e      	cmp	r6, r3
 800f6cc:	6841      	ldr	r1, [r0, #4]
 800f6ce:	d92f      	bls.n	800f730 <_dtoa_r+0x2d8>
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	f001 f85b 	bl	801078c <_Balloc>
 800f6d6:	9000      	str	r0, [sp, #0]
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	d14b      	bne.n	800f774 <_dtoa_r+0x31c>
 800f6dc:	4b24      	ldr	r3, [pc, #144]	; (800f770 <_dtoa_r+0x318>)
 800f6de:	4602      	mov	r2, r0
 800f6e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f6e4:	e6d1      	b.n	800f48a <_dtoa_r+0x32>
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	e7de      	b.n	800f6a8 <_dtoa_r+0x250>
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	9308      	str	r3, [sp, #32]
 800f6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6f0:	eb0a 0903 	add.w	r9, sl, r3
 800f6f4:	f109 0301 	add.w	r3, r9, #1
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	9301      	str	r3, [sp, #4]
 800f6fc:	bfb8      	it	lt
 800f6fe:	2301      	movlt	r3, #1
 800f700:	e7dd      	b.n	800f6be <_dtoa_r+0x266>
 800f702:	2301      	movs	r3, #1
 800f704:	e7f2      	b.n	800f6ec <_dtoa_r+0x294>
 800f706:	2501      	movs	r5, #1
 800f708:	2300      	movs	r3, #0
 800f70a:	9305      	str	r3, [sp, #20]
 800f70c:	9508      	str	r5, [sp, #32]
 800f70e:	f04f 39ff 	mov.w	r9, #4294967295
 800f712:	2200      	movs	r2, #0
 800f714:	f8cd 9004 	str.w	r9, [sp, #4]
 800f718:	2312      	movs	r3, #18
 800f71a:	9209      	str	r2, [sp, #36]	; 0x24
 800f71c:	e7cf      	b.n	800f6be <_dtoa_r+0x266>
 800f71e:	2301      	movs	r3, #1
 800f720:	9308      	str	r3, [sp, #32]
 800f722:	e7f4      	b.n	800f70e <_dtoa_r+0x2b6>
 800f724:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f728:	f8cd 9004 	str.w	r9, [sp, #4]
 800f72c:	464b      	mov	r3, r9
 800f72e:	e7c6      	b.n	800f6be <_dtoa_r+0x266>
 800f730:	3101      	adds	r1, #1
 800f732:	6041      	str	r1, [r0, #4]
 800f734:	0052      	lsls	r2, r2, #1
 800f736:	e7c6      	b.n	800f6c6 <_dtoa_r+0x26e>
 800f738:	636f4361 	.word	0x636f4361
 800f73c:	3fd287a7 	.word	0x3fd287a7
 800f740:	8b60c8b3 	.word	0x8b60c8b3
 800f744:	3fc68a28 	.word	0x3fc68a28
 800f748:	509f79fb 	.word	0x509f79fb
 800f74c:	3fd34413 	.word	0x3fd34413
 800f750:	080258d0 	.word	0x080258d0
 800f754:	08025a92 	.word	0x08025a92
 800f758:	7ff00000 	.word	0x7ff00000
 800f75c:	08025a8e 	.word	0x08025a8e
 800f760:	08025a85 	.word	0x08025a85
 800f764:	08025851 	.word	0x08025851
 800f768:	3ff80000 	.word	0x3ff80000
 800f76c:	08025c08 	.word	0x08025c08
 800f770:	08025af1 	.word	0x08025af1
 800f774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f776:	9a00      	ldr	r2, [sp, #0]
 800f778:	601a      	str	r2, [r3, #0]
 800f77a:	9b01      	ldr	r3, [sp, #4]
 800f77c:	2b0e      	cmp	r3, #14
 800f77e:	f200 80ad 	bhi.w	800f8dc <_dtoa_r+0x484>
 800f782:	2d00      	cmp	r5, #0
 800f784:	f000 80aa 	beq.w	800f8dc <_dtoa_r+0x484>
 800f788:	f1ba 0f00 	cmp.w	sl, #0
 800f78c:	dd36      	ble.n	800f7fc <_dtoa_r+0x3a4>
 800f78e:	4ac3      	ldr	r2, [pc, #780]	; (800fa9c <_dtoa_r+0x644>)
 800f790:	f00a 030f 	and.w	r3, sl, #15
 800f794:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f798:	ed93 7b00 	vldr	d7, [r3]
 800f79c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f7a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f7a4:	eeb0 8a47 	vmov.f32	s16, s14
 800f7a8:	eef0 8a67 	vmov.f32	s17, s15
 800f7ac:	d016      	beq.n	800f7dc <_dtoa_r+0x384>
 800f7ae:	4bbc      	ldr	r3, [pc, #752]	; (800faa0 <_dtoa_r+0x648>)
 800f7b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f7b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f7b8:	f7f1 f860 	bl	800087c <__aeabi_ddiv>
 800f7bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7c0:	f007 070f 	and.w	r7, r7, #15
 800f7c4:	2503      	movs	r5, #3
 800f7c6:	4eb6      	ldr	r6, [pc, #728]	; (800faa0 <_dtoa_r+0x648>)
 800f7c8:	b957      	cbnz	r7, 800f7e0 <_dtoa_r+0x388>
 800f7ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7ce:	ec53 2b18 	vmov	r2, r3, d8
 800f7d2:	f7f1 f853 	bl	800087c <__aeabi_ddiv>
 800f7d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7da:	e029      	b.n	800f830 <_dtoa_r+0x3d8>
 800f7dc:	2502      	movs	r5, #2
 800f7de:	e7f2      	b.n	800f7c6 <_dtoa_r+0x36e>
 800f7e0:	07f9      	lsls	r1, r7, #31
 800f7e2:	d508      	bpl.n	800f7f6 <_dtoa_r+0x39e>
 800f7e4:	ec51 0b18 	vmov	r0, r1, d8
 800f7e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f7ec:	f7f0 ff1c 	bl	8000628 <__aeabi_dmul>
 800f7f0:	ec41 0b18 	vmov	d8, r0, r1
 800f7f4:	3501      	adds	r5, #1
 800f7f6:	107f      	asrs	r7, r7, #1
 800f7f8:	3608      	adds	r6, #8
 800f7fa:	e7e5      	b.n	800f7c8 <_dtoa_r+0x370>
 800f7fc:	f000 80a6 	beq.w	800f94c <_dtoa_r+0x4f4>
 800f800:	f1ca 0600 	rsb	r6, sl, #0
 800f804:	4ba5      	ldr	r3, [pc, #660]	; (800fa9c <_dtoa_r+0x644>)
 800f806:	4fa6      	ldr	r7, [pc, #664]	; (800faa0 <_dtoa_r+0x648>)
 800f808:	f006 020f 	and.w	r2, r6, #15
 800f80c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f814:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f818:	f7f0 ff06 	bl	8000628 <__aeabi_dmul>
 800f81c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f820:	1136      	asrs	r6, r6, #4
 800f822:	2300      	movs	r3, #0
 800f824:	2502      	movs	r5, #2
 800f826:	2e00      	cmp	r6, #0
 800f828:	f040 8085 	bne.w	800f936 <_dtoa_r+0x4de>
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d1d2      	bne.n	800f7d6 <_dtoa_r+0x37e>
 800f830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f832:	2b00      	cmp	r3, #0
 800f834:	f000 808c 	beq.w	800f950 <_dtoa_r+0x4f8>
 800f838:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f83c:	4b99      	ldr	r3, [pc, #612]	; (800faa4 <_dtoa_r+0x64c>)
 800f83e:	2200      	movs	r2, #0
 800f840:	4630      	mov	r0, r6
 800f842:	4639      	mov	r1, r7
 800f844:	f7f1 f962 	bl	8000b0c <__aeabi_dcmplt>
 800f848:	2800      	cmp	r0, #0
 800f84a:	f000 8081 	beq.w	800f950 <_dtoa_r+0x4f8>
 800f84e:	9b01      	ldr	r3, [sp, #4]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d07d      	beq.n	800f950 <_dtoa_r+0x4f8>
 800f854:	f1b9 0f00 	cmp.w	r9, #0
 800f858:	dd3c      	ble.n	800f8d4 <_dtoa_r+0x47c>
 800f85a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f85e:	9307      	str	r3, [sp, #28]
 800f860:	2200      	movs	r2, #0
 800f862:	4b91      	ldr	r3, [pc, #580]	; (800faa8 <_dtoa_r+0x650>)
 800f864:	4630      	mov	r0, r6
 800f866:	4639      	mov	r1, r7
 800f868:	f7f0 fede 	bl	8000628 <__aeabi_dmul>
 800f86c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f870:	3501      	adds	r5, #1
 800f872:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f876:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f87a:	4628      	mov	r0, r5
 800f87c:	f7f0 fe6a 	bl	8000554 <__aeabi_i2d>
 800f880:	4632      	mov	r2, r6
 800f882:	463b      	mov	r3, r7
 800f884:	f7f0 fed0 	bl	8000628 <__aeabi_dmul>
 800f888:	4b88      	ldr	r3, [pc, #544]	; (800faac <_dtoa_r+0x654>)
 800f88a:	2200      	movs	r2, #0
 800f88c:	f7f0 fd16 	bl	80002bc <__adddf3>
 800f890:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f898:	9303      	str	r3, [sp, #12]
 800f89a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d15c      	bne.n	800f95a <_dtoa_r+0x502>
 800f8a0:	4b83      	ldr	r3, [pc, #524]	; (800fab0 <_dtoa_r+0x658>)
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	4639      	mov	r1, r7
 800f8a8:	f7f0 fd06 	bl	80002b8 <__aeabi_dsub>
 800f8ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	460f      	mov	r7, r1
 800f8b4:	f7f1 f948 	bl	8000b48 <__aeabi_dcmpgt>
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	f040 8296 	bne.w	800fdea <_dtoa_r+0x992>
 800f8be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8c8:	4639      	mov	r1, r7
 800f8ca:	f7f1 f91f 	bl	8000b0c <__aeabi_dcmplt>
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	f040 8288 	bne.w	800fde4 <_dtoa_r+0x98c>
 800f8d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f8d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f8dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f2c0 8158 	blt.w	800fb94 <_dtoa_r+0x73c>
 800f8e4:	f1ba 0f0e 	cmp.w	sl, #14
 800f8e8:	f300 8154 	bgt.w	800fb94 <_dtoa_r+0x73c>
 800f8ec:	4b6b      	ldr	r3, [pc, #428]	; (800fa9c <_dtoa_r+0x644>)
 800f8ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f8f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	f280 80e3 	bge.w	800fac4 <_dtoa_r+0x66c>
 800f8fe:	9b01      	ldr	r3, [sp, #4]
 800f900:	2b00      	cmp	r3, #0
 800f902:	f300 80df 	bgt.w	800fac4 <_dtoa_r+0x66c>
 800f906:	f040 826d 	bne.w	800fde4 <_dtoa_r+0x98c>
 800f90a:	4b69      	ldr	r3, [pc, #420]	; (800fab0 <_dtoa_r+0x658>)
 800f90c:	2200      	movs	r2, #0
 800f90e:	4640      	mov	r0, r8
 800f910:	4649      	mov	r1, r9
 800f912:	f7f0 fe89 	bl	8000628 <__aeabi_dmul>
 800f916:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f91a:	f7f1 f90b 	bl	8000b34 <__aeabi_dcmpge>
 800f91e:	9e01      	ldr	r6, [sp, #4]
 800f920:	4637      	mov	r7, r6
 800f922:	2800      	cmp	r0, #0
 800f924:	f040 8243 	bne.w	800fdae <_dtoa_r+0x956>
 800f928:	9d00      	ldr	r5, [sp, #0]
 800f92a:	2331      	movs	r3, #49	; 0x31
 800f92c:	f805 3b01 	strb.w	r3, [r5], #1
 800f930:	f10a 0a01 	add.w	sl, sl, #1
 800f934:	e23f      	b.n	800fdb6 <_dtoa_r+0x95e>
 800f936:	07f2      	lsls	r2, r6, #31
 800f938:	d505      	bpl.n	800f946 <_dtoa_r+0x4ee>
 800f93a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f93e:	f7f0 fe73 	bl	8000628 <__aeabi_dmul>
 800f942:	3501      	adds	r5, #1
 800f944:	2301      	movs	r3, #1
 800f946:	1076      	asrs	r6, r6, #1
 800f948:	3708      	adds	r7, #8
 800f94a:	e76c      	b.n	800f826 <_dtoa_r+0x3ce>
 800f94c:	2502      	movs	r5, #2
 800f94e:	e76f      	b.n	800f830 <_dtoa_r+0x3d8>
 800f950:	9b01      	ldr	r3, [sp, #4]
 800f952:	f8cd a01c 	str.w	sl, [sp, #28]
 800f956:	930c      	str	r3, [sp, #48]	; 0x30
 800f958:	e78d      	b.n	800f876 <_dtoa_r+0x41e>
 800f95a:	9900      	ldr	r1, [sp, #0]
 800f95c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f95e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f960:	4b4e      	ldr	r3, [pc, #312]	; (800fa9c <_dtoa_r+0x644>)
 800f962:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f966:	4401      	add	r1, r0
 800f968:	9102      	str	r1, [sp, #8]
 800f96a:	9908      	ldr	r1, [sp, #32]
 800f96c:	eeb0 8a47 	vmov.f32	s16, s14
 800f970:	eef0 8a67 	vmov.f32	s17, s15
 800f974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f978:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f97c:	2900      	cmp	r1, #0
 800f97e:	d045      	beq.n	800fa0c <_dtoa_r+0x5b4>
 800f980:	494c      	ldr	r1, [pc, #304]	; (800fab4 <_dtoa_r+0x65c>)
 800f982:	2000      	movs	r0, #0
 800f984:	f7f0 ff7a 	bl	800087c <__aeabi_ddiv>
 800f988:	ec53 2b18 	vmov	r2, r3, d8
 800f98c:	f7f0 fc94 	bl	80002b8 <__aeabi_dsub>
 800f990:	9d00      	ldr	r5, [sp, #0]
 800f992:	ec41 0b18 	vmov	d8, r0, r1
 800f996:	4639      	mov	r1, r7
 800f998:	4630      	mov	r0, r6
 800f99a:	f7f1 f8f5 	bl	8000b88 <__aeabi_d2iz>
 800f99e:	900c      	str	r0, [sp, #48]	; 0x30
 800f9a0:	f7f0 fdd8 	bl	8000554 <__aeabi_i2d>
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	460b      	mov	r3, r1
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	4639      	mov	r1, r7
 800f9ac:	f7f0 fc84 	bl	80002b8 <__aeabi_dsub>
 800f9b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9b2:	3330      	adds	r3, #48	; 0x30
 800f9b4:	f805 3b01 	strb.w	r3, [r5], #1
 800f9b8:	ec53 2b18 	vmov	r2, r3, d8
 800f9bc:	4606      	mov	r6, r0
 800f9be:	460f      	mov	r7, r1
 800f9c0:	f7f1 f8a4 	bl	8000b0c <__aeabi_dcmplt>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	d165      	bne.n	800fa94 <_dtoa_r+0x63c>
 800f9c8:	4632      	mov	r2, r6
 800f9ca:	463b      	mov	r3, r7
 800f9cc:	4935      	ldr	r1, [pc, #212]	; (800faa4 <_dtoa_r+0x64c>)
 800f9ce:	2000      	movs	r0, #0
 800f9d0:	f7f0 fc72 	bl	80002b8 <__aeabi_dsub>
 800f9d4:	ec53 2b18 	vmov	r2, r3, d8
 800f9d8:	f7f1 f898 	bl	8000b0c <__aeabi_dcmplt>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	f040 80b9 	bne.w	800fb54 <_dtoa_r+0x6fc>
 800f9e2:	9b02      	ldr	r3, [sp, #8]
 800f9e4:	429d      	cmp	r5, r3
 800f9e6:	f43f af75 	beq.w	800f8d4 <_dtoa_r+0x47c>
 800f9ea:	4b2f      	ldr	r3, [pc, #188]	; (800faa8 <_dtoa_r+0x650>)
 800f9ec:	ec51 0b18 	vmov	r0, r1, d8
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f7f0 fe19 	bl	8000628 <__aeabi_dmul>
 800f9f6:	4b2c      	ldr	r3, [pc, #176]	; (800faa8 <_dtoa_r+0x650>)
 800f9f8:	ec41 0b18 	vmov	d8, r0, r1
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	4630      	mov	r0, r6
 800fa00:	4639      	mov	r1, r7
 800fa02:	f7f0 fe11 	bl	8000628 <__aeabi_dmul>
 800fa06:	4606      	mov	r6, r0
 800fa08:	460f      	mov	r7, r1
 800fa0a:	e7c4      	b.n	800f996 <_dtoa_r+0x53e>
 800fa0c:	ec51 0b17 	vmov	r0, r1, d7
 800fa10:	f7f0 fe0a 	bl	8000628 <__aeabi_dmul>
 800fa14:	9b02      	ldr	r3, [sp, #8]
 800fa16:	9d00      	ldr	r5, [sp, #0]
 800fa18:	930c      	str	r3, [sp, #48]	; 0x30
 800fa1a:	ec41 0b18 	vmov	d8, r0, r1
 800fa1e:	4639      	mov	r1, r7
 800fa20:	4630      	mov	r0, r6
 800fa22:	f7f1 f8b1 	bl	8000b88 <__aeabi_d2iz>
 800fa26:	9011      	str	r0, [sp, #68]	; 0x44
 800fa28:	f7f0 fd94 	bl	8000554 <__aeabi_i2d>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	460b      	mov	r3, r1
 800fa30:	4630      	mov	r0, r6
 800fa32:	4639      	mov	r1, r7
 800fa34:	f7f0 fc40 	bl	80002b8 <__aeabi_dsub>
 800fa38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa3a:	3330      	adds	r3, #48	; 0x30
 800fa3c:	f805 3b01 	strb.w	r3, [r5], #1
 800fa40:	9b02      	ldr	r3, [sp, #8]
 800fa42:	429d      	cmp	r5, r3
 800fa44:	4606      	mov	r6, r0
 800fa46:	460f      	mov	r7, r1
 800fa48:	f04f 0200 	mov.w	r2, #0
 800fa4c:	d134      	bne.n	800fab8 <_dtoa_r+0x660>
 800fa4e:	4b19      	ldr	r3, [pc, #100]	; (800fab4 <_dtoa_r+0x65c>)
 800fa50:	ec51 0b18 	vmov	r0, r1, d8
 800fa54:	f7f0 fc32 	bl	80002bc <__adddf3>
 800fa58:	4602      	mov	r2, r0
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	4639      	mov	r1, r7
 800fa60:	f7f1 f872 	bl	8000b48 <__aeabi_dcmpgt>
 800fa64:	2800      	cmp	r0, #0
 800fa66:	d175      	bne.n	800fb54 <_dtoa_r+0x6fc>
 800fa68:	ec53 2b18 	vmov	r2, r3, d8
 800fa6c:	4911      	ldr	r1, [pc, #68]	; (800fab4 <_dtoa_r+0x65c>)
 800fa6e:	2000      	movs	r0, #0
 800fa70:	f7f0 fc22 	bl	80002b8 <__aeabi_dsub>
 800fa74:	4602      	mov	r2, r0
 800fa76:	460b      	mov	r3, r1
 800fa78:	4630      	mov	r0, r6
 800fa7a:	4639      	mov	r1, r7
 800fa7c:	f7f1 f846 	bl	8000b0c <__aeabi_dcmplt>
 800fa80:	2800      	cmp	r0, #0
 800fa82:	f43f af27 	beq.w	800f8d4 <_dtoa_r+0x47c>
 800fa86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa88:	1e6b      	subs	r3, r5, #1
 800fa8a:	930c      	str	r3, [sp, #48]	; 0x30
 800fa8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fa90:	2b30      	cmp	r3, #48	; 0x30
 800fa92:	d0f8      	beq.n	800fa86 <_dtoa_r+0x62e>
 800fa94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fa98:	e04a      	b.n	800fb30 <_dtoa_r+0x6d8>
 800fa9a:	bf00      	nop
 800fa9c:	08025c08 	.word	0x08025c08
 800faa0:	08025be0 	.word	0x08025be0
 800faa4:	3ff00000 	.word	0x3ff00000
 800faa8:	40240000 	.word	0x40240000
 800faac:	401c0000 	.word	0x401c0000
 800fab0:	40140000 	.word	0x40140000
 800fab4:	3fe00000 	.word	0x3fe00000
 800fab8:	4baf      	ldr	r3, [pc, #700]	; (800fd78 <_dtoa_r+0x920>)
 800faba:	f7f0 fdb5 	bl	8000628 <__aeabi_dmul>
 800fabe:	4606      	mov	r6, r0
 800fac0:	460f      	mov	r7, r1
 800fac2:	e7ac      	b.n	800fa1e <_dtoa_r+0x5c6>
 800fac4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fac8:	9d00      	ldr	r5, [sp, #0]
 800faca:	4642      	mov	r2, r8
 800facc:	464b      	mov	r3, r9
 800face:	4630      	mov	r0, r6
 800fad0:	4639      	mov	r1, r7
 800fad2:	f7f0 fed3 	bl	800087c <__aeabi_ddiv>
 800fad6:	f7f1 f857 	bl	8000b88 <__aeabi_d2iz>
 800fada:	9002      	str	r0, [sp, #8]
 800fadc:	f7f0 fd3a 	bl	8000554 <__aeabi_i2d>
 800fae0:	4642      	mov	r2, r8
 800fae2:	464b      	mov	r3, r9
 800fae4:	f7f0 fda0 	bl	8000628 <__aeabi_dmul>
 800fae8:	4602      	mov	r2, r0
 800faea:	460b      	mov	r3, r1
 800faec:	4630      	mov	r0, r6
 800faee:	4639      	mov	r1, r7
 800faf0:	f7f0 fbe2 	bl	80002b8 <__aeabi_dsub>
 800faf4:	9e02      	ldr	r6, [sp, #8]
 800faf6:	9f01      	ldr	r7, [sp, #4]
 800faf8:	3630      	adds	r6, #48	; 0x30
 800fafa:	f805 6b01 	strb.w	r6, [r5], #1
 800fafe:	9e00      	ldr	r6, [sp, #0]
 800fb00:	1bae      	subs	r6, r5, r6
 800fb02:	42b7      	cmp	r7, r6
 800fb04:	4602      	mov	r2, r0
 800fb06:	460b      	mov	r3, r1
 800fb08:	d137      	bne.n	800fb7a <_dtoa_r+0x722>
 800fb0a:	f7f0 fbd7 	bl	80002bc <__adddf3>
 800fb0e:	4642      	mov	r2, r8
 800fb10:	464b      	mov	r3, r9
 800fb12:	4606      	mov	r6, r0
 800fb14:	460f      	mov	r7, r1
 800fb16:	f7f1 f817 	bl	8000b48 <__aeabi_dcmpgt>
 800fb1a:	b9c8      	cbnz	r0, 800fb50 <_dtoa_r+0x6f8>
 800fb1c:	4642      	mov	r2, r8
 800fb1e:	464b      	mov	r3, r9
 800fb20:	4630      	mov	r0, r6
 800fb22:	4639      	mov	r1, r7
 800fb24:	f7f0 ffe8 	bl	8000af8 <__aeabi_dcmpeq>
 800fb28:	b110      	cbz	r0, 800fb30 <_dtoa_r+0x6d8>
 800fb2a:	9b02      	ldr	r3, [sp, #8]
 800fb2c:	07d9      	lsls	r1, r3, #31
 800fb2e:	d40f      	bmi.n	800fb50 <_dtoa_r+0x6f8>
 800fb30:	4620      	mov	r0, r4
 800fb32:	4659      	mov	r1, fp
 800fb34:	f000 fe6a 	bl	801080c <_Bfree>
 800fb38:	2300      	movs	r3, #0
 800fb3a:	702b      	strb	r3, [r5, #0]
 800fb3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb3e:	f10a 0001 	add.w	r0, sl, #1
 800fb42:	6018      	str	r0, [r3, #0]
 800fb44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	f43f acd8 	beq.w	800f4fc <_dtoa_r+0xa4>
 800fb4c:	601d      	str	r5, [r3, #0]
 800fb4e:	e4d5      	b.n	800f4fc <_dtoa_r+0xa4>
 800fb50:	f8cd a01c 	str.w	sl, [sp, #28]
 800fb54:	462b      	mov	r3, r5
 800fb56:	461d      	mov	r5, r3
 800fb58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb5c:	2a39      	cmp	r2, #57	; 0x39
 800fb5e:	d108      	bne.n	800fb72 <_dtoa_r+0x71a>
 800fb60:	9a00      	ldr	r2, [sp, #0]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d1f7      	bne.n	800fb56 <_dtoa_r+0x6fe>
 800fb66:	9a07      	ldr	r2, [sp, #28]
 800fb68:	9900      	ldr	r1, [sp, #0]
 800fb6a:	3201      	adds	r2, #1
 800fb6c:	9207      	str	r2, [sp, #28]
 800fb6e:	2230      	movs	r2, #48	; 0x30
 800fb70:	700a      	strb	r2, [r1, #0]
 800fb72:	781a      	ldrb	r2, [r3, #0]
 800fb74:	3201      	adds	r2, #1
 800fb76:	701a      	strb	r2, [r3, #0]
 800fb78:	e78c      	b.n	800fa94 <_dtoa_r+0x63c>
 800fb7a:	4b7f      	ldr	r3, [pc, #508]	; (800fd78 <_dtoa_r+0x920>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f7f0 fd53 	bl	8000628 <__aeabi_dmul>
 800fb82:	2200      	movs	r2, #0
 800fb84:	2300      	movs	r3, #0
 800fb86:	4606      	mov	r6, r0
 800fb88:	460f      	mov	r7, r1
 800fb8a:	f7f0 ffb5 	bl	8000af8 <__aeabi_dcmpeq>
 800fb8e:	2800      	cmp	r0, #0
 800fb90:	d09b      	beq.n	800faca <_dtoa_r+0x672>
 800fb92:	e7cd      	b.n	800fb30 <_dtoa_r+0x6d8>
 800fb94:	9a08      	ldr	r2, [sp, #32]
 800fb96:	2a00      	cmp	r2, #0
 800fb98:	f000 80c4 	beq.w	800fd24 <_dtoa_r+0x8cc>
 800fb9c:	9a05      	ldr	r2, [sp, #20]
 800fb9e:	2a01      	cmp	r2, #1
 800fba0:	f300 80a8 	bgt.w	800fcf4 <_dtoa_r+0x89c>
 800fba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fba6:	2a00      	cmp	r2, #0
 800fba8:	f000 80a0 	beq.w	800fcec <_dtoa_r+0x894>
 800fbac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fbb0:	9e06      	ldr	r6, [sp, #24]
 800fbb2:	4645      	mov	r5, r8
 800fbb4:	9a04      	ldr	r2, [sp, #16]
 800fbb6:	2101      	movs	r1, #1
 800fbb8:	441a      	add	r2, r3
 800fbba:	4620      	mov	r0, r4
 800fbbc:	4498      	add	r8, r3
 800fbbe:	9204      	str	r2, [sp, #16]
 800fbc0:	f000 ff2a 	bl	8010a18 <__i2b>
 800fbc4:	4607      	mov	r7, r0
 800fbc6:	2d00      	cmp	r5, #0
 800fbc8:	dd0b      	ble.n	800fbe2 <_dtoa_r+0x78a>
 800fbca:	9b04      	ldr	r3, [sp, #16]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	dd08      	ble.n	800fbe2 <_dtoa_r+0x78a>
 800fbd0:	42ab      	cmp	r3, r5
 800fbd2:	9a04      	ldr	r2, [sp, #16]
 800fbd4:	bfa8      	it	ge
 800fbd6:	462b      	movge	r3, r5
 800fbd8:	eba8 0803 	sub.w	r8, r8, r3
 800fbdc:	1aed      	subs	r5, r5, r3
 800fbde:	1ad3      	subs	r3, r2, r3
 800fbe0:	9304      	str	r3, [sp, #16]
 800fbe2:	9b06      	ldr	r3, [sp, #24]
 800fbe4:	b1fb      	cbz	r3, 800fc26 <_dtoa_r+0x7ce>
 800fbe6:	9b08      	ldr	r3, [sp, #32]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f000 809f 	beq.w	800fd2c <_dtoa_r+0x8d4>
 800fbee:	2e00      	cmp	r6, #0
 800fbf0:	dd11      	ble.n	800fc16 <_dtoa_r+0x7be>
 800fbf2:	4639      	mov	r1, r7
 800fbf4:	4632      	mov	r2, r6
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	f000 ffca 	bl	8010b90 <__pow5mult>
 800fbfc:	465a      	mov	r2, fp
 800fbfe:	4601      	mov	r1, r0
 800fc00:	4607      	mov	r7, r0
 800fc02:	4620      	mov	r0, r4
 800fc04:	f000 ff1e 	bl	8010a44 <__multiply>
 800fc08:	4659      	mov	r1, fp
 800fc0a:	9007      	str	r0, [sp, #28]
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	f000 fdfd 	bl	801080c <_Bfree>
 800fc12:	9b07      	ldr	r3, [sp, #28]
 800fc14:	469b      	mov	fp, r3
 800fc16:	9b06      	ldr	r3, [sp, #24]
 800fc18:	1b9a      	subs	r2, r3, r6
 800fc1a:	d004      	beq.n	800fc26 <_dtoa_r+0x7ce>
 800fc1c:	4659      	mov	r1, fp
 800fc1e:	4620      	mov	r0, r4
 800fc20:	f000 ffb6 	bl	8010b90 <__pow5mult>
 800fc24:	4683      	mov	fp, r0
 800fc26:	2101      	movs	r1, #1
 800fc28:	4620      	mov	r0, r4
 800fc2a:	f000 fef5 	bl	8010a18 <__i2b>
 800fc2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	4606      	mov	r6, r0
 800fc34:	dd7c      	ble.n	800fd30 <_dtoa_r+0x8d8>
 800fc36:	461a      	mov	r2, r3
 800fc38:	4601      	mov	r1, r0
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f000 ffa8 	bl	8010b90 <__pow5mult>
 800fc40:	9b05      	ldr	r3, [sp, #20]
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	4606      	mov	r6, r0
 800fc46:	dd76      	ble.n	800fd36 <_dtoa_r+0x8de>
 800fc48:	2300      	movs	r3, #0
 800fc4a:	9306      	str	r3, [sp, #24]
 800fc4c:	6933      	ldr	r3, [r6, #16]
 800fc4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fc52:	6918      	ldr	r0, [r3, #16]
 800fc54:	f000 fe90 	bl	8010978 <__hi0bits>
 800fc58:	f1c0 0020 	rsb	r0, r0, #32
 800fc5c:	9b04      	ldr	r3, [sp, #16]
 800fc5e:	4418      	add	r0, r3
 800fc60:	f010 001f 	ands.w	r0, r0, #31
 800fc64:	f000 8086 	beq.w	800fd74 <_dtoa_r+0x91c>
 800fc68:	f1c0 0320 	rsb	r3, r0, #32
 800fc6c:	2b04      	cmp	r3, #4
 800fc6e:	dd7f      	ble.n	800fd70 <_dtoa_r+0x918>
 800fc70:	f1c0 001c 	rsb	r0, r0, #28
 800fc74:	9b04      	ldr	r3, [sp, #16]
 800fc76:	4403      	add	r3, r0
 800fc78:	4480      	add	r8, r0
 800fc7a:	4405      	add	r5, r0
 800fc7c:	9304      	str	r3, [sp, #16]
 800fc7e:	f1b8 0f00 	cmp.w	r8, #0
 800fc82:	dd05      	ble.n	800fc90 <_dtoa_r+0x838>
 800fc84:	4659      	mov	r1, fp
 800fc86:	4642      	mov	r2, r8
 800fc88:	4620      	mov	r0, r4
 800fc8a:	f000 ffdb 	bl	8010c44 <__lshift>
 800fc8e:	4683      	mov	fp, r0
 800fc90:	9b04      	ldr	r3, [sp, #16]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	dd05      	ble.n	800fca2 <_dtoa_r+0x84a>
 800fc96:	4631      	mov	r1, r6
 800fc98:	461a      	mov	r2, r3
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	f000 ffd2 	bl	8010c44 <__lshift>
 800fca0:	4606      	mov	r6, r0
 800fca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d069      	beq.n	800fd7c <_dtoa_r+0x924>
 800fca8:	4631      	mov	r1, r6
 800fcaa:	4658      	mov	r0, fp
 800fcac:	f001 f836 	bl	8010d1c <__mcmp>
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	da63      	bge.n	800fd7c <_dtoa_r+0x924>
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	4659      	mov	r1, fp
 800fcb8:	220a      	movs	r2, #10
 800fcba:	4620      	mov	r0, r4
 800fcbc:	f000 fdc8 	bl	8010850 <__multadd>
 800fcc0:	9b08      	ldr	r3, [sp, #32]
 800fcc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcc6:	4683      	mov	fp, r0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	f000 818f 	beq.w	800ffec <_dtoa_r+0xb94>
 800fcce:	4639      	mov	r1, r7
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	220a      	movs	r2, #10
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	f000 fdbb 	bl	8010850 <__multadd>
 800fcda:	f1b9 0f00 	cmp.w	r9, #0
 800fcde:	4607      	mov	r7, r0
 800fce0:	f300 808e 	bgt.w	800fe00 <_dtoa_r+0x9a8>
 800fce4:	9b05      	ldr	r3, [sp, #20]
 800fce6:	2b02      	cmp	r3, #2
 800fce8:	dc50      	bgt.n	800fd8c <_dtoa_r+0x934>
 800fcea:	e089      	b.n	800fe00 <_dtoa_r+0x9a8>
 800fcec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fcee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fcf2:	e75d      	b.n	800fbb0 <_dtoa_r+0x758>
 800fcf4:	9b01      	ldr	r3, [sp, #4]
 800fcf6:	1e5e      	subs	r6, r3, #1
 800fcf8:	9b06      	ldr	r3, [sp, #24]
 800fcfa:	42b3      	cmp	r3, r6
 800fcfc:	bfbf      	itttt	lt
 800fcfe:	9b06      	ldrlt	r3, [sp, #24]
 800fd00:	9606      	strlt	r6, [sp, #24]
 800fd02:	1af2      	sublt	r2, r6, r3
 800fd04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fd06:	bfb6      	itet	lt
 800fd08:	189b      	addlt	r3, r3, r2
 800fd0a:	1b9e      	subge	r6, r3, r6
 800fd0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fd0e:	9b01      	ldr	r3, [sp, #4]
 800fd10:	bfb8      	it	lt
 800fd12:	2600      	movlt	r6, #0
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	bfb5      	itete	lt
 800fd18:	eba8 0503 	sublt.w	r5, r8, r3
 800fd1c:	9b01      	ldrge	r3, [sp, #4]
 800fd1e:	2300      	movlt	r3, #0
 800fd20:	4645      	movge	r5, r8
 800fd22:	e747      	b.n	800fbb4 <_dtoa_r+0x75c>
 800fd24:	9e06      	ldr	r6, [sp, #24]
 800fd26:	9f08      	ldr	r7, [sp, #32]
 800fd28:	4645      	mov	r5, r8
 800fd2a:	e74c      	b.n	800fbc6 <_dtoa_r+0x76e>
 800fd2c:	9a06      	ldr	r2, [sp, #24]
 800fd2e:	e775      	b.n	800fc1c <_dtoa_r+0x7c4>
 800fd30:	9b05      	ldr	r3, [sp, #20]
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	dc18      	bgt.n	800fd68 <_dtoa_r+0x910>
 800fd36:	9b02      	ldr	r3, [sp, #8]
 800fd38:	b9b3      	cbnz	r3, 800fd68 <_dtoa_r+0x910>
 800fd3a:	9b03      	ldr	r3, [sp, #12]
 800fd3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd40:	b9a3      	cbnz	r3, 800fd6c <_dtoa_r+0x914>
 800fd42:	9b03      	ldr	r3, [sp, #12]
 800fd44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd48:	0d1b      	lsrs	r3, r3, #20
 800fd4a:	051b      	lsls	r3, r3, #20
 800fd4c:	b12b      	cbz	r3, 800fd5a <_dtoa_r+0x902>
 800fd4e:	9b04      	ldr	r3, [sp, #16]
 800fd50:	3301      	adds	r3, #1
 800fd52:	9304      	str	r3, [sp, #16]
 800fd54:	f108 0801 	add.w	r8, r8, #1
 800fd58:	2301      	movs	r3, #1
 800fd5a:	9306      	str	r3, [sp, #24]
 800fd5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	f47f af74 	bne.w	800fc4c <_dtoa_r+0x7f4>
 800fd64:	2001      	movs	r0, #1
 800fd66:	e779      	b.n	800fc5c <_dtoa_r+0x804>
 800fd68:	2300      	movs	r3, #0
 800fd6a:	e7f6      	b.n	800fd5a <_dtoa_r+0x902>
 800fd6c:	9b02      	ldr	r3, [sp, #8]
 800fd6e:	e7f4      	b.n	800fd5a <_dtoa_r+0x902>
 800fd70:	d085      	beq.n	800fc7e <_dtoa_r+0x826>
 800fd72:	4618      	mov	r0, r3
 800fd74:	301c      	adds	r0, #28
 800fd76:	e77d      	b.n	800fc74 <_dtoa_r+0x81c>
 800fd78:	40240000 	.word	0x40240000
 800fd7c:	9b01      	ldr	r3, [sp, #4]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	dc38      	bgt.n	800fdf4 <_dtoa_r+0x99c>
 800fd82:	9b05      	ldr	r3, [sp, #20]
 800fd84:	2b02      	cmp	r3, #2
 800fd86:	dd35      	ble.n	800fdf4 <_dtoa_r+0x99c>
 800fd88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fd8c:	f1b9 0f00 	cmp.w	r9, #0
 800fd90:	d10d      	bne.n	800fdae <_dtoa_r+0x956>
 800fd92:	4631      	mov	r1, r6
 800fd94:	464b      	mov	r3, r9
 800fd96:	2205      	movs	r2, #5
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f000 fd59 	bl	8010850 <__multadd>
 800fd9e:	4601      	mov	r1, r0
 800fda0:	4606      	mov	r6, r0
 800fda2:	4658      	mov	r0, fp
 800fda4:	f000 ffba 	bl	8010d1c <__mcmp>
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	f73f adbd 	bgt.w	800f928 <_dtoa_r+0x4d0>
 800fdae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdb0:	9d00      	ldr	r5, [sp, #0]
 800fdb2:	ea6f 0a03 	mvn.w	sl, r3
 800fdb6:	f04f 0800 	mov.w	r8, #0
 800fdba:	4631      	mov	r1, r6
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	f000 fd25 	bl	801080c <_Bfree>
 800fdc2:	2f00      	cmp	r7, #0
 800fdc4:	f43f aeb4 	beq.w	800fb30 <_dtoa_r+0x6d8>
 800fdc8:	f1b8 0f00 	cmp.w	r8, #0
 800fdcc:	d005      	beq.n	800fdda <_dtoa_r+0x982>
 800fdce:	45b8      	cmp	r8, r7
 800fdd0:	d003      	beq.n	800fdda <_dtoa_r+0x982>
 800fdd2:	4641      	mov	r1, r8
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	f000 fd19 	bl	801080c <_Bfree>
 800fdda:	4639      	mov	r1, r7
 800fddc:	4620      	mov	r0, r4
 800fdde:	f000 fd15 	bl	801080c <_Bfree>
 800fde2:	e6a5      	b.n	800fb30 <_dtoa_r+0x6d8>
 800fde4:	2600      	movs	r6, #0
 800fde6:	4637      	mov	r7, r6
 800fde8:	e7e1      	b.n	800fdae <_dtoa_r+0x956>
 800fdea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fdec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fdf0:	4637      	mov	r7, r6
 800fdf2:	e599      	b.n	800f928 <_dtoa_r+0x4d0>
 800fdf4:	9b08      	ldr	r3, [sp, #32]
 800fdf6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	f000 80fd 	beq.w	800fffa <_dtoa_r+0xba2>
 800fe00:	2d00      	cmp	r5, #0
 800fe02:	dd05      	ble.n	800fe10 <_dtoa_r+0x9b8>
 800fe04:	4639      	mov	r1, r7
 800fe06:	462a      	mov	r2, r5
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f000 ff1b 	bl	8010c44 <__lshift>
 800fe0e:	4607      	mov	r7, r0
 800fe10:	9b06      	ldr	r3, [sp, #24]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d05c      	beq.n	800fed0 <_dtoa_r+0xa78>
 800fe16:	6879      	ldr	r1, [r7, #4]
 800fe18:	4620      	mov	r0, r4
 800fe1a:	f000 fcb7 	bl	801078c <_Balloc>
 800fe1e:	4605      	mov	r5, r0
 800fe20:	b928      	cbnz	r0, 800fe2e <_dtoa_r+0x9d6>
 800fe22:	4b80      	ldr	r3, [pc, #512]	; (8010024 <_dtoa_r+0xbcc>)
 800fe24:	4602      	mov	r2, r0
 800fe26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fe2a:	f7ff bb2e 	b.w	800f48a <_dtoa_r+0x32>
 800fe2e:	693a      	ldr	r2, [r7, #16]
 800fe30:	3202      	adds	r2, #2
 800fe32:	0092      	lsls	r2, r2, #2
 800fe34:	f107 010c 	add.w	r1, r7, #12
 800fe38:	300c      	adds	r0, #12
 800fe3a:	f000 fc99 	bl	8010770 <memcpy>
 800fe3e:	2201      	movs	r2, #1
 800fe40:	4629      	mov	r1, r5
 800fe42:	4620      	mov	r0, r4
 800fe44:	f000 fefe 	bl	8010c44 <__lshift>
 800fe48:	9b00      	ldr	r3, [sp, #0]
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	9301      	str	r3, [sp, #4]
 800fe4e:	9b00      	ldr	r3, [sp, #0]
 800fe50:	444b      	add	r3, r9
 800fe52:	9307      	str	r3, [sp, #28]
 800fe54:	9b02      	ldr	r3, [sp, #8]
 800fe56:	f003 0301 	and.w	r3, r3, #1
 800fe5a:	46b8      	mov	r8, r7
 800fe5c:	9306      	str	r3, [sp, #24]
 800fe5e:	4607      	mov	r7, r0
 800fe60:	9b01      	ldr	r3, [sp, #4]
 800fe62:	4631      	mov	r1, r6
 800fe64:	3b01      	subs	r3, #1
 800fe66:	4658      	mov	r0, fp
 800fe68:	9302      	str	r3, [sp, #8]
 800fe6a:	f7ff fa67 	bl	800f33c <quorem>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	3330      	adds	r3, #48	; 0x30
 800fe72:	9004      	str	r0, [sp, #16]
 800fe74:	4641      	mov	r1, r8
 800fe76:	4658      	mov	r0, fp
 800fe78:	9308      	str	r3, [sp, #32]
 800fe7a:	f000 ff4f 	bl	8010d1c <__mcmp>
 800fe7e:	463a      	mov	r2, r7
 800fe80:	4681      	mov	r9, r0
 800fe82:	4631      	mov	r1, r6
 800fe84:	4620      	mov	r0, r4
 800fe86:	f000 ff65 	bl	8010d54 <__mdiff>
 800fe8a:	68c2      	ldr	r2, [r0, #12]
 800fe8c:	9b08      	ldr	r3, [sp, #32]
 800fe8e:	4605      	mov	r5, r0
 800fe90:	bb02      	cbnz	r2, 800fed4 <_dtoa_r+0xa7c>
 800fe92:	4601      	mov	r1, r0
 800fe94:	4658      	mov	r0, fp
 800fe96:	f000 ff41 	bl	8010d1c <__mcmp>
 800fe9a:	9b08      	ldr	r3, [sp, #32]
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	4629      	mov	r1, r5
 800fea0:	4620      	mov	r0, r4
 800fea2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fea6:	f000 fcb1 	bl	801080c <_Bfree>
 800feaa:	9b05      	ldr	r3, [sp, #20]
 800feac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800feae:	9d01      	ldr	r5, [sp, #4]
 800feb0:	ea43 0102 	orr.w	r1, r3, r2
 800feb4:	9b06      	ldr	r3, [sp, #24]
 800feb6:	430b      	orrs	r3, r1
 800feb8:	9b08      	ldr	r3, [sp, #32]
 800feba:	d10d      	bne.n	800fed8 <_dtoa_r+0xa80>
 800febc:	2b39      	cmp	r3, #57	; 0x39
 800febe:	d029      	beq.n	800ff14 <_dtoa_r+0xabc>
 800fec0:	f1b9 0f00 	cmp.w	r9, #0
 800fec4:	dd01      	ble.n	800feca <_dtoa_r+0xa72>
 800fec6:	9b04      	ldr	r3, [sp, #16]
 800fec8:	3331      	adds	r3, #49	; 0x31
 800feca:	9a02      	ldr	r2, [sp, #8]
 800fecc:	7013      	strb	r3, [r2, #0]
 800fece:	e774      	b.n	800fdba <_dtoa_r+0x962>
 800fed0:	4638      	mov	r0, r7
 800fed2:	e7b9      	b.n	800fe48 <_dtoa_r+0x9f0>
 800fed4:	2201      	movs	r2, #1
 800fed6:	e7e2      	b.n	800fe9e <_dtoa_r+0xa46>
 800fed8:	f1b9 0f00 	cmp.w	r9, #0
 800fedc:	db06      	blt.n	800feec <_dtoa_r+0xa94>
 800fede:	9905      	ldr	r1, [sp, #20]
 800fee0:	ea41 0909 	orr.w	r9, r1, r9
 800fee4:	9906      	ldr	r1, [sp, #24]
 800fee6:	ea59 0101 	orrs.w	r1, r9, r1
 800feea:	d120      	bne.n	800ff2e <_dtoa_r+0xad6>
 800feec:	2a00      	cmp	r2, #0
 800feee:	ddec      	ble.n	800feca <_dtoa_r+0xa72>
 800fef0:	4659      	mov	r1, fp
 800fef2:	2201      	movs	r2, #1
 800fef4:	4620      	mov	r0, r4
 800fef6:	9301      	str	r3, [sp, #4]
 800fef8:	f000 fea4 	bl	8010c44 <__lshift>
 800fefc:	4631      	mov	r1, r6
 800fefe:	4683      	mov	fp, r0
 800ff00:	f000 ff0c 	bl	8010d1c <__mcmp>
 800ff04:	2800      	cmp	r0, #0
 800ff06:	9b01      	ldr	r3, [sp, #4]
 800ff08:	dc02      	bgt.n	800ff10 <_dtoa_r+0xab8>
 800ff0a:	d1de      	bne.n	800feca <_dtoa_r+0xa72>
 800ff0c:	07da      	lsls	r2, r3, #31
 800ff0e:	d5dc      	bpl.n	800feca <_dtoa_r+0xa72>
 800ff10:	2b39      	cmp	r3, #57	; 0x39
 800ff12:	d1d8      	bne.n	800fec6 <_dtoa_r+0xa6e>
 800ff14:	9a02      	ldr	r2, [sp, #8]
 800ff16:	2339      	movs	r3, #57	; 0x39
 800ff18:	7013      	strb	r3, [r2, #0]
 800ff1a:	462b      	mov	r3, r5
 800ff1c:	461d      	mov	r5, r3
 800ff1e:	3b01      	subs	r3, #1
 800ff20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ff24:	2a39      	cmp	r2, #57	; 0x39
 800ff26:	d050      	beq.n	800ffca <_dtoa_r+0xb72>
 800ff28:	3201      	adds	r2, #1
 800ff2a:	701a      	strb	r2, [r3, #0]
 800ff2c:	e745      	b.n	800fdba <_dtoa_r+0x962>
 800ff2e:	2a00      	cmp	r2, #0
 800ff30:	dd03      	ble.n	800ff3a <_dtoa_r+0xae2>
 800ff32:	2b39      	cmp	r3, #57	; 0x39
 800ff34:	d0ee      	beq.n	800ff14 <_dtoa_r+0xabc>
 800ff36:	3301      	adds	r3, #1
 800ff38:	e7c7      	b.n	800feca <_dtoa_r+0xa72>
 800ff3a:	9a01      	ldr	r2, [sp, #4]
 800ff3c:	9907      	ldr	r1, [sp, #28]
 800ff3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ff42:	428a      	cmp	r2, r1
 800ff44:	d02a      	beq.n	800ff9c <_dtoa_r+0xb44>
 800ff46:	4659      	mov	r1, fp
 800ff48:	2300      	movs	r3, #0
 800ff4a:	220a      	movs	r2, #10
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	f000 fc7f 	bl	8010850 <__multadd>
 800ff52:	45b8      	cmp	r8, r7
 800ff54:	4683      	mov	fp, r0
 800ff56:	f04f 0300 	mov.w	r3, #0
 800ff5a:	f04f 020a 	mov.w	r2, #10
 800ff5e:	4641      	mov	r1, r8
 800ff60:	4620      	mov	r0, r4
 800ff62:	d107      	bne.n	800ff74 <_dtoa_r+0xb1c>
 800ff64:	f000 fc74 	bl	8010850 <__multadd>
 800ff68:	4680      	mov	r8, r0
 800ff6a:	4607      	mov	r7, r0
 800ff6c:	9b01      	ldr	r3, [sp, #4]
 800ff6e:	3301      	adds	r3, #1
 800ff70:	9301      	str	r3, [sp, #4]
 800ff72:	e775      	b.n	800fe60 <_dtoa_r+0xa08>
 800ff74:	f000 fc6c 	bl	8010850 <__multadd>
 800ff78:	4639      	mov	r1, r7
 800ff7a:	4680      	mov	r8, r0
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	220a      	movs	r2, #10
 800ff80:	4620      	mov	r0, r4
 800ff82:	f000 fc65 	bl	8010850 <__multadd>
 800ff86:	4607      	mov	r7, r0
 800ff88:	e7f0      	b.n	800ff6c <_dtoa_r+0xb14>
 800ff8a:	f1b9 0f00 	cmp.w	r9, #0
 800ff8e:	9a00      	ldr	r2, [sp, #0]
 800ff90:	bfcc      	ite	gt
 800ff92:	464d      	movgt	r5, r9
 800ff94:	2501      	movle	r5, #1
 800ff96:	4415      	add	r5, r2
 800ff98:	f04f 0800 	mov.w	r8, #0
 800ff9c:	4659      	mov	r1, fp
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	9301      	str	r3, [sp, #4]
 800ffa4:	f000 fe4e 	bl	8010c44 <__lshift>
 800ffa8:	4631      	mov	r1, r6
 800ffaa:	4683      	mov	fp, r0
 800ffac:	f000 feb6 	bl	8010d1c <__mcmp>
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	dcb2      	bgt.n	800ff1a <_dtoa_r+0xac2>
 800ffb4:	d102      	bne.n	800ffbc <_dtoa_r+0xb64>
 800ffb6:	9b01      	ldr	r3, [sp, #4]
 800ffb8:	07db      	lsls	r3, r3, #31
 800ffba:	d4ae      	bmi.n	800ff1a <_dtoa_r+0xac2>
 800ffbc:	462b      	mov	r3, r5
 800ffbe:	461d      	mov	r5, r3
 800ffc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ffc4:	2a30      	cmp	r2, #48	; 0x30
 800ffc6:	d0fa      	beq.n	800ffbe <_dtoa_r+0xb66>
 800ffc8:	e6f7      	b.n	800fdba <_dtoa_r+0x962>
 800ffca:	9a00      	ldr	r2, [sp, #0]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d1a5      	bne.n	800ff1c <_dtoa_r+0xac4>
 800ffd0:	f10a 0a01 	add.w	sl, sl, #1
 800ffd4:	2331      	movs	r3, #49	; 0x31
 800ffd6:	e779      	b.n	800fecc <_dtoa_r+0xa74>
 800ffd8:	4b13      	ldr	r3, [pc, #76]	; (8010028 <_dtoa_r+0xbd0>)
 800ffda:	f7ff baaf 	b.w	800f53c <_dtoa_r+0xe4>
 800ffde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	f47f aa86 	bne.w	800f4f2 <_dtoa_r+0x9a>
 800ffe6:	4b11      	ldr	r3, [pc, #68]	; (801002c <_dtoa_r+0xbd4>)
 800ffe8:	f7ff baa8 	b.w	800f53c <_dtoa_r+0xe4>
 800ffec:	f1b9 0f00 	cmp.w	r9, #0
 800fff0:	dc03      	bgt.n	800fffa <_dtoa_r+0xba2>
 800fff2:	9b05      	ldr	r3, [sp, #20]
 800fff4:	2b02      	cmp	r3, #2
 800fff6:	f73f aec9 	bgt.w	800fd8c <_dtoa_r+0x934>
 800fffa:	9d00      	ldr	r5, [sp, #0]
 800fffc:	4631      	mov	r1, r6
 800fffe:	4658      	mov	r0, fp
 8010000:	f7ff f99c 	bl	800f33c <quorem>
 8010004:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010008:	f805 3b01 	strb.w	r3, [r5], #1
 801000c:	9a00      	ldr	r2, [sp, #0]
 801000e:	1aaa      	subs	r2, r5, r2
 8010010:	4591      	cmp	r9, r2
 8010012:	ddba      	ble.n	800ff8a <_dtoa_r+0xb32>
 8010014:	4659      	mov	r1, fp
 8010016:	2300      	movs	r3, #0
 8010018:	220a      	movs	r2, #10
 801001a:	4620      	mov	r0, r4
 801001c:	f000 fc18 	bl	8010850 <__multadd>
 8010020:	4683      	mov	fp, r0
 8010022:	e7eb      	b.n	800fffc <_dtoa_r+0xba4>
 8010024:	08025af1 	.word	0x08025af1
 8010028:	08025850 	.word	0x08025850
 801002c:	08025a85 	.word	0x08025a85

08010030 <fiprintf>:
 8010030:	b40e      	push	{r1, r2, r3}
 8010032:	b503      	push	{r0, r1, lr}
 8010034:	4601      	mov	r1, r0
 8010036:	ab03      	add	r3, sp, #12
 8010038:	4805      	ldr	r0, [pc, #20]	; (8010050 <fiprintf+0x20>)
 801003a:	f853 2b04 	ldr.w	r2, [r3], #4
 801003e:	6800      	ldr	r0, [r0, #0]
 8010040:	9301      	str	r3, [sp, #4]
 8010042:	f001 fa9d 	bl	8011580 <_vfiprintf_r>
 8010046:	b002      	add	sp, #8
 8010048:	f85d eb04 	ldr.w	lr, [sp], #4
 801004c:	b003      	add	sp, #12
 801004e:	4770      	bx	lr
 8010050:	20000040 	.word	0x20000040

08010054 <rshift>:
 8010054:	6903      	ldr	r3, [r0, #16]
 8010056:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801005a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801005e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010062:	f100 0414 	add.w	r4, r0, #20
 8010066:	dd45      	ble.n	80100f4 <rshift+0xa0>
 8010068:	f011 011f 	ands.w	r1, r1, #31
 801006c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010070:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010074:	d10c      	bne.n	8010090 <rshift+0x3c>
 8010076:	f100 0710 	add.w	r7, r0, #16
 801007a:	4629      	mov	r1, r5
 801007c:	42b1      	cmp	r1, r6
 801007e:	d334      	bcc.n	80100ea <rshift+0x96>
 8010080:	1a9b      	subs	r3, r3, r2
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	1eea      	subs	r2, r5, #3
 8010086:	4296      	cmp	r6, r2
 8010088:	bf38      	it	cc
 801008a:	2300      	movcc	r3, #0
 801008c:	4423      	add	r3, r4
 801008e:	e015      	b.n	80100bc <rshift+0x68>
 8010090:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010094:	f1c1 0820 	rsb	r8, r1, #32
 8010098:	40cf      	lsrs	r7, r1
 801009a:	f105 0e04 	add.w	lr, r5, #4
 801009e:	46a1      	mov	r9, r4
 80100a0:	4576      	cmp	r6, lr
 80100a2:	46f4      	mov	ip, lr
 80100a4:	d815      	bhi.n	80100d2 <rshift+0x7e>
 80100a6:	1a9b      	subs	r3, r3, r2
 80100a8:	009a      	lsls	r2, r3, #2
 80100aa:	3a04      	subs	r2, #4
 80100ac:	3501      	adds	r5, #1
 80100ae:	42ae      	cmp	r6, r5
 80100b0:	bf38      	it	cc
 80100b2:	2200      	movcc	r2, #0
 80100b4:	18a3      	adds	r3, r4, r2
 80100b6:	50a7      	str	r7, [r4, r2]
 80100b8:	b107      	cbz	r7, 80100bc <rshift+0x68>
 80100ba:	3304      	adds	r3, #4
 80100bc:	1b1a      	subs	r2, r3, r4
 80100be:	42a3      	cmp	r3, r4
 80100c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80100c4:	bf08      	it	eq
 80100c6:	2300      	moveq	r3, #0
 80100c8:	6102      	str	r2, [r0, #16]
 80100ca:	bf08      	it	eq
 80100cc:	6143      	streq	r3, [r0, #20]
 80100ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100d2:	f8dc c000 	ldr.w	ip, [ip]
 80100d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80100da:	ea4c 0707 	orr.w	r7, ip, r7
 80100de:	f849 7b04 	str.w	r7, [r9], #4
 80100e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80100e6:	40cf      	lsrs	r7, r1
 80100e8:	e7da      	b.n	80100a0 <rshift+0x4c>
 80100ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80100ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80100f2:	e7c3      	b.n	801007c <rshift+0x28>
 80100f4:	4623      	mov	r3, r4
 80100f6:	e7e1      	b.n	80100bc <rshift+0x68>

080100f8 <__hexdig_fun>:
 80100f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80100fc:	2b09      	cmp	r3, #9
 80100fe:	d802      	bhi.n	8010106 <__hexdig_fun+0xe>
 8010100:	3820      	subs	r0, #32
 8010102:	b2c0      	uxtb	r0, r0
 8010104:	4770      	bx	lr
 8010106:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801010a:	2b05      	cmp	r3, #5
 801010c:	d801      	bhi.n	8010112 <__hexdig_fun+0x1a>
 801010e:	3847      	subs	r0, #71	; 0x47
 8010110:	e7f7      	b.n	8010102 <__hexdig_fun+0xa>
 8010112:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010116:	2b05      	cmp	r3, #5
 8010118:	d801      	bhi.n	801011e <__hexdig_fun+0x26>
 801011a:	3827      	subs	r0, #39	; 0x27
 801011c:	e7f1      	b.n	8010102 <__hexdig_fun+0xa>
 801011e:	2000      	movs	r0, #0
 8010120:	4770      	bx	lr
	...

08010124 <__gethex>:
 8010124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010128:	ed2d 8b02 	vpush	{d8}
 801012c:	b089      	sub	sp, #36	; 0x24
 801012e:	ee08 0a10 	vmov	s16, r0
 8010132:	9304      	str	r3, [sp, #16]
 8010134:	4bbc      	ldr	r3, [pc, #752]	; (8010428 <__gethex+0x304>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	9301      	str	r3, [sp, #4]
 801013a:	4618      	mov	r0, r3
 801013c:	468b      	mov	fp, r1
 801013e:	4690      	mov	r8, r2
 8010140:	f7f0 f858 	bl	80001f4 <strlen>
 8010144:	9b01      	ldr	r3, [sp, #4]
 8010146:	f8db 2000 	ldr.w	r2, [fp]
 801014a:	4403      	add	r3, r0
 801014c:	4682      	mov	sl, r0
 801014e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010152:	9305      	str	r3, [sp, #20]
 8010154:	1c93      	adds	r3, r2, #2
 8010156:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801015a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801015e:	32fe      	adds	r2, #254	; 0xfe
 8010160:	18d1      	adds	r1, r2, r3
 8010162:	461f      	mov	r7, r3
 8010164:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010168:	9100      	str	r1, [sp, #0]
 801016a:	2830      	cmp	r0, #48	; 0x30
 801016c:	d0f8      	beq.n	8010160 <__gethex+0x3c>
 801016e:	f7ff ffc3 	bl	80100f8 <__hexdig_fun>
 8010172:	4604      	mov	r4, r0
 8010174:	2800      	cmp	r0, #0
 8010176:	d13a      	bne.n	80101ee <__gethex+0xca>
 8010178:	9901      	ldr	r1, [sp, #4]
 801017a:	4652      	mov	r2, sl
 801017c:	4638      	mov	r0, r7
 801017e:	f001 fb47 	bl	8011810 <strncmp>
 8010182:	4605      	mov	r5, r0
 8010184:	2800      	cmp	r0, #0
 8010186:	d168      	bne.n	801025a <__gethex+0x136>
 8010188:	f817 000a 	ldrb.w	r0, [r7, sl]
 801018c:	eb07 060a 	add.w	r6, r7, sl
 8010190:	f7ff ffb2 	bl	80100f8 <__hexdig_fun>
 8010194:	2800      	cmp	r0, #0
 8010196:	d062      	beq.n	801025e <__gethex+0x13a>
 8010198:	4633      	mov	r3, r6
 801019a:	7818      	ldrb	r0, [r3, #0]
 801019c:	2830      	cmp	r0, #48	; 0x30
 801019e:	461f      	mov	r7, r3
 80101a0:	f103 0301 	add.w	r3, r3, #1
 80101a4:	d0f9      	beq.n	801019a <__gethex+0x76>
 80101a6:	f7ff ffa7 	bl	80100f8 <__hexdig_fun>
 80101aa:	2301      	movs	r3, #1
 80101ac:	fab0 f480 	clz	r4, r0
 80101b0:	0964      	lsrs	r4, r4, #5
 80101b2:	4635      	mov	r5, r6
 80101b4:	9300      	str	r3, [sp, #0]
 80101b6:	463a      	mov	r2, r7
 80101b8:	4616      	mov	r6, r2
 80101ba:	3201      	adds	r2, #1
 80101bc:	7830      	ldrb	r0, [r6, #0]
 80101be:	f7ff ff9b 	bl	80100f8 <__hexdig_fun>
 80101c2:	2800      	cmp	r0, #0
 80101c4:	d1f8      	bne.n	80101b8 <__gethex+0x94>
 80101c6:	9901      	ldr	r1, [sp, #4]
 80101c8:	4652      	mov	r2, sl
 80101ca:	4630      	mov	r0, r6
 80101cc:	f001 fb20 	bl	8011810 <strncmp>
 80101d0:	b980      	cbnz	r0, 80101f4 <__gethex+0xd0>
 80101d2:	b94d      	cbnz	r5, 80101e8 <__gethex+0xc4>
 80101d4:	eb06 050a 	add.w	r5, r6, sl
 80101d8:	462a      	mov	r2, r5
 80101da:	4616      	mov	r6, r2
 80101dc:	3201      	adds	r2, #1
 80101de:	7830      	ldrb	r0, [r6, #0]
 80101e0:	f7ff ff8a 	bl	80100f8 <__hexdig_fun>
 80101e4:	2800      	cmp	r0, #0
 80101e6:	d1f8      	bne.n	80101da <__gethex+0xb6>
 80101e8:	1bad      	subs	r5, r5, r6
 80101ea:	00ad      	lsls	r5, r5, #2
 80101ec:	e004      	b.n	80101f8 <__gethex+0xd4>
 80101ee:	2400      	movs	r4, #0
 80101f0:	4625      	mov	r5, r4
 80101f2:	e7e0      	b.n	80101b6 <__gethex+0x92>
 80101f4:	2d00      	cmp	r5, #0
 80101f6:	d1f7      	bne.n	80101e8 <__gethex+0xc4>
 80101f8:	7833      	ldrb	r3, [r6, #0]
 80101fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80101fe:	2b50      	cmp	r3, #80	; 0x50
 8010200:	d13b      	bne.n	801027a <__gethex+0x156>
 8010202:	7873      	ldrb	r3, [r6, #1]
 8010204:	2b2b      	cmp	r3, #43	; 0x2b
 8010206:	d02c      	beq.n	8010262 <__gethex+0x13e>
 8010208:	2b2d      	cmp	r3, #45	; 0x2d
 801020a:	d02e      	beq.n	801026a <__gethex+0x146>
 801020c:	1c71      	adds	r1, r6, #1
 801020e:	f04f 0900 	mov.w	r9, #0
 8010212:	7808      	ldrb	r0, [r1, #0]
 8010214:	f7ff ff70 	bl	80100f8 <__hexdig_fun>
 8010218:	1e43      	subs	r3, r0, #1
 801021a:	b2db      	uxtb	r3, r3
 801021c:	2b18      	cmp	r3, #24
 801021e:	d82c      	bhi.n	801027a <__gethex+0x156>
 8010220:	f1a0 0210 	sub.w	r2, r0, #16
 8010224:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010228:	f7ff ff66 	bl	80100f8 <__hexdig_fun>
 801022c:	1e43      	subs	r3, r0, #1
 801022e:	b2db      	uxtb	r3, r3
 8010230:	2b18      	cmp	r3, #24
 8010232:	d91d      	bls.n	8010270 <__gethex+0x14c>
 8010234:	f1b9 0f00 	cmp.w	r9, #0
 8010238:	d000      	beq.n	801023c <__gethex+0x118>
 801023a:	4252      	negs	r2, r2
 801023c:	4415      	add	r5, r2
 801023e:	f8cb 1000 	str.w	r1, [fp]
 8010242:	b1e4      	cbz	r4, 801027e <__gethex+0x15a>
 8010244:	9b00      	ldr	r3, [sp, #0]
 8010246:	2b00      	cmp	r3, #0
 8010248:	bf14      	ite	ne
 801024a:	2700      	movne	r7, #0
 801024c:	2706      	moveq	r7, #6
 801024e:	4638      	mov	r0, r7
 8010250:	b009      	add	sp, #36	; 0x24
 8010252:	ecbd 8b02 	vpop	{d8}
 8010256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801025a:	463e      	mov	r6, r7
 801025c:	4625      	mov	r5, r4
 801025e:	2401      	movs	r4, #1
 8010260:	e7ca      	b.n	80101f8 <__gethex+0xd4>
 8010262:	f04f 0900 	mov.w	r9, #0
 8010266:	1cb1      	adds	r1, r6, #2
 8010268:	e7d3      	b.n	8010212 <__gethex+0xee>
 801026a:	f04f 0901 	mov.w	r9, #1
 801026e:	e7fa      	b.n	8010266 <__gethex+0x142>
 8010270:	230a      	movs	r3, #10
 8010272:	fb03 0202 	mla	r2, r3, r2, r0
 8010276:	3a10      	subs	r2, #16
 8010278:	e7d4      	b.n	8010224 <__gethex+0x100>
 801027a:	4631      	mov	r1, r6
 801027c:	e7df      	b.n	801023e <__gethex+0x11a>
 801027e:	1bf3      	subs	r3, r6, r7
 8010280:	3b01      	subs	r3, #1
 8010282:	4621      	mov	r1, r4
 8010284:	2b07      	cmp	r3, #7
 8010286:	dc0b      	bgt.n	80102a0 <__gethex+0x17c>
 8010288:	ee18 0a10 	vmov	r0, s16
 801028c:	f000 fa7e 	bl	801078c <_Balloc>
 8010290:	4604      	mov	r4, r0
 8010292:	b940      	cbnz	r0, 80102a6 <__gethex+0x182>
 8010294:	4b65      	ldr	r3, [pc, #404]	; (801042c <__gethex+0x308>)
 8010296:	4602      	mov	r2, r0
 8010298:	21de      	movs	r1, #222	; 0xde
 801029a:	4865      	ldr	r0, [pc, #404]	; (8010430 <__gethex+0x30c>)
 801029c:	f7ff f830 	bl	800f300 <__assert_func>
 80102a0:	3101      	adds	r1, #1
 80102a2:	105b      	asrs	r3, r3, #1
 80102a4:	e7ee      	b.n	8010284 <__gethex+0x160>
 80102a6:	f100 0914 	add.w	r9, r0, #20
 80102aa:	f04f 0b00 	mov.w	fp, #0
 80102ae:	f1ca 0301 	rsb	r3, sl, #1
 80102b2:	f8cd 9008 	str.w	r9, [sp, #8]
 80102b6:	f8cd b000 	str.w	fp, [sp]
 80102ba:	9306      	str	r3, [sp, #24]
 80102bc:	42b7      	cmp	r7, r6
 80102be:	d340      	bcc.n	8010342 <__gethex+0x21e>
 80102c0:	9802      	ldr	r0, [sp, #8]
 80102c2:	9b00      	ldr	r3, [sp, #0]
 80102c4:	f840 3b04 	str.w	r3, [r0], #4
 80102c8:	eba0 0009 	sub.w	r0, r0, r9
 80102cc:	1080      	asrs	r0, r0, #2
 80102ce:	0146      	lsls	r6, r0, #5
 80102d0:	6120      	str	r0, [r4, #16]
 80102d2:	4618      	mov	r0, r3
 80102d4:	f000 fb50 	bl	8010978 <__hi0bits>
 80102d8:	1a30      	subs	r0, r6, r0
 80102da:	f8d8 6000 	ldr.w	r6, [r8]
 80102de:	42b0      	cmp	r0, r6
 80102e0:	dd63      	ble.n	80103aa <__gethex+0x286>
 80102e2:	1b87      	subs	r7, r0, r6
 80102e4:	4639      	mov	r1, r7
 80102e6:	4620      	mov	r0, r4
 80102e8:	f000 feea 	bl	80110c0 <__any_on>
 80102ec:	4682      	mov	sl, r0
 80102ee:	b1a8      	cbz	r0, 801031c <__gethex+0x1f8>
 80102f0:	1e7b      	subs	r3, r7, #1
 80102f2:	1159      	asrs	r1, r3, #5
 80102f4:	f003 021f 	and.w	r2, r3, #31
 80102f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80102fc:	f04f 0a01 	mov.w	sl, #1
 8010300:	fa0a f202 	lsl.w	r2, sl, r2
 8010304:	420a      	tst	r2, r1
 8010306:	d009      	beq.n	801031c <__gethex+0x1f8>
 8010308:	4553      	cmp	r3, sl
 801030a:	dd05      	ble.n	8010318 <__gethex+0x1f4>
 801030c:	1eb9      	subs	r1, r7, #2
 801030e:	4620      	mov	r0, r4
 8010310:	f000 fed6 	bl	80110c0 <__any_on>
 8010314:	2800      	cmp	r0, #0
 8010316:	d145      	bne.n	80103a4 <__gethex+0x280>
 8010318:	f04f 0a02 	mov.w	sl, #2
 801031c:	4639      	mov	r1, r7
 801031e:	4620      	mov	r0, r4
 8010320:	f7ff fe98 	bl	8010054 <rshift>
 8010324:	443d      	add	r5, r7
 8010326:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801032a:	42ab      	cmp	r3, r5
 801032c:	da4c      	bge.n	80103c8 <__gethex+0x2a4>
 801032e:	ee18 0a10 	vmov	r0, s16
 8010332:	4621      	mov	r1, r4
 8010334:	f000 fa6a 	bl	801080c <_Bfree>
 8010338:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801033a:	2300      	movs	r3, #0
 801033c:	6013      	str	r3, [r2, #0]
 801033e:	27a3      	movs	r7, #163	; 0xa3
 8010340:	e785      	b.n	801024e <__gethex+0x12a>
 8010342:	1e73      	subs	r3, r6, #1
 8010344:	9a05      	ldr	r2, [sp, #20]
 8010346:	9303      	str	r3, [sp, #12]
 8010348:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801034c:	4293      	cmp	r3, r2
 801034e:	d019      	beq.n	8010384 <__gethex+0x260>
 8010350:	f1bb 0f20 	cmp.w	fp, #32
 8010354:	d107      	bne.n	8010366 <__gethex+0x242>
 8010356:	9b02      	ldr	r3, [sp, #8]
 8010358:	9a00      	ldr	r2, [sp, #0]
 801035a:	f843 2b04 	str.w	r2, [r3], #4
 801035e:	9302      	str	r3, [sp, #8]
 8010360:	2300      	movs	r3, #0
 8010362:	9300      	str	r3, [sp, #0]
 8010364:	469b      	mov	fp, r3
 8010366:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801036a:	f7ff fec5 	bl	80100f8 <__hexdig_fun>
 801036e:	9b00      	ldr	r3, [sp, #0]
 8010370:	f000 000f 	and.w	r0, r0, #15
 8010374:	fa00 f00b 	lsl.w	r0, r0, fp
 8010378:	4303      	orrs	r3, r0
 801037a:	9300      	str	r3, [sp, #0]
 801037c:	f10b 0b04 	add.w	fp, fp, #4
 8010380:	9b03      	ldr	r3, [sp, #12]
 8010382:	e00d      	b.n	80103a0 <__gethex+0x27c>
 8010384:	9b03      	ldr	r3, [sp, #12]
 8010386:	9a06      	ldr	r2, [sp, #24]
 8010388:	4413      	add	r3, r2
 801038a:	42bb      	cmp	r3, r7
 801038c:	d3e0      	bcc.n	8010350 <__gethex+0x22c>
 801038e:	4618      	mov	r0, r3
 8010390:	9901      	ldr	r1, [sp, #4]
 8010392:	9307      	str	r3, [sp, #28]
 8010394:	4652      	mov	r2, sl
 8010396:	f001 fa3b 	bl	8011810 <strncmp>
 801039a:	9b07      	ldr	r3, [sp, #28]
 801039c:	2800      	cmp	r0, #0
 801039e:	d1d7      	bne.n	8010350 <__gethex+0x22c>
 80103a0:	461e      	mov	r6, r3
 80103a2:	e78b      	b.n	80102bc <__gethex+0x198>
 80103a4:	f04f 0a03 	mov.w	sl, #3
 80103a8:	e7b8      	b.n	801031c <__gethex+0x1f8>
 80103aa:	da0a      	bge.n	80103c2 <__gethex+0x29e>
 80103ac:	1a37      	subs	r7, r6, r0
 80103ae:	4621      	mov	r1, r4
 80103b0:	ee18 0a10 	vmov	r0, s16
 80103b4:	463a      	mov	r2, r7
 80103b6:	f000 fc45 	bl	8010c44 <__lshift>
 80103ba:	1bed      	subs	r5, r5, r7
 80103bc:	4604      	mov	r4, r0
 80103be:	f100 0914 	add.w	r9, r0, #20
 80103c2:	f04f 0a00 	mov.w	sl, #0
 80103c6:	e7ae      	b.n	8010326 <__gethex+0x202>
 80103c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80103cc:	42a8      	cmp	r0, r5
 80103ce:	dd72      	ble.n	80104b6 <__gethex+0x392>
 80103d0:	1b45      	subs	r5, r0, r5
 80103d2:	42ae      	cmp	r6, r5
 80103d4:	dc36      	bgt.n	8010444 <__gethex+0x320>
 80103d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80103da:	2b02      	cmp	r3, #2
 80103dc:	d02a      	beq.n	8010434 <__gethex+0x310>
 80103de:	2b03      	cmp	r3, #3
 80103e0:	d02c      	beq.n	801043c <__gethex+0x318>
 80103e2:	2b01      	cmp	r3, #1
 80103e4:	d115      	bne.n	8010412 <__gethex+0x2ee>
 80103e6:	42ae      	cmp	r6, r5
 80103e8:	d113      	bne.n	8010412 <__gethex+0x2ee>
 80103ea:	2e01      	cmp	r6, #1
 80103ec:	d10b      	bne.n	8010406 <__gethex+0x2e2>
 80103ee:	9a04      	ldr	r2, [sp, #16]
 80103f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80103f4:	6013      	str	r3, [r2, #0]
 80103f6:	2301      	movs	r3, #1
 80103f8:	6123      	str	r3, [r4, #16]
 80103fa:	f8c9 3000 	str.w	r3, [r9]
 80103fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010400:	2762      	movs	r7, #98	; 0x62
 8010402:	601c      	str	r4, [r3, #0]
 8010404:	e723      	b.n	801024e <__gethex+0x12a>
 8010406:	1e71      	subs	r1, r6, #1
 8010408:	4620      	mov	r0, r4
 801040a:	f000 fe59 	bl	80110c0 <__any_on>
 801040e:	2800      	cmp	r0, #0
 8010410:	d1ed      	bne.n	80103ee <__gethex+0x2ca>
 8010412:	ee18 0a10 	vmov	r0, s16
 8010416:	4621      	mov	r1, r4
 8010418:	f000 f9f8 	bl	801080c <_Bfree>
 801041c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801041e:	2300      	movs	r3, #0
 8010420:	6013      	str	r3, [r2, #0]
 8010422:	2750      	movs	r7, #80	; 0x50
 8010424:	e713      	b.n	801024e <__gethex+0x12a>
 8010426:	bf00      	nop
 8010428:	08025b6c 	.word	0x08025b6c
 801042c:	08025af1 	.word	0x08025af1
 8010430:	08025b02 	.word	0x08025b02
 8010434:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1eb      	bne.n	8010412 <__gethex+0x2ee>
 801043a:	e7d8      	b.n	80103ee <__gethex+0x2ca>
 801043c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801043e:	2b00      	cmp	r3, #0
 8010440:	d1d5      	bne.n	80103ee <__gethex+0x2ca>
 8010442:	e7e6      	b.n	8010412 <__gethex+0x2ee>
 8010444:	1e6f      	subs	r7, r5, #1
 8010446:	f1ba 0f00 	cmp.w	sl, #0
 801044a:	d131      	bne.n	80104b0 <__gethex+0x38c>
 801044c:	b127      	cbz	r7, 8010458 <__gethex+0x334>
 801044e:	4639      	mov	r1, r7
 8010450:	4620      	mov	r0, r4
 8010452:	f000 fe35 	bl	80110c0 <__any_on>
 8010456:	4682      	mov	sl, r0
 8010458:	117b      	asrs	r3, r7, #5
 801045a:	2101      	movs	r1, #1
 801045c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010460:	f007 071f 	and.w	r7, r7, #31
 8010464:	fa01 f707 	lsl.w	r7, r1, r7
 8010468:	421f      	tst	r7, r3
 801046a:	4629      	mov	r1, r5
 801046c:	4620      	mov	r0, r4
 801046e:	bf18      	it	ne
 8010470:	f04a 0a02 	orrne.w	sl, sl, #2
 8010474:	1b76      	subs	r6, r6, r5
 8010476:	f7ff fded 	bl	8010054 <rshift>
 801047a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801047e:	2702      	movs	r7, #2
 8010480:	f1ba 0f00 	cmp.w	sl, #0
 8010484:	d048      	beq.n	8010518 <__gethex+0x3f4>
 8010486:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801048a:	2b02      	cmp	r3, #2
 801048c:	d015      	beq.n	80104ba <__gethex+0x396>
 801048e:	2b03      	cmp	r3, #3
 8010490:	d017      	beq.n	80104c2 <__gethex+0x39e>
 8010492:	2b01      	cmp	r3, #1
 8010494:	d109      	bne.n	80104aa <__gethex+0x386>
 8010496:	f01a 0f02 	tst.w	sl, #2
 801049a:	d006      	beq.n	80104aa <__gethex+0x386>
 801049c:	f8d9 0000 	ldr.w	r0, [r9]
 80104a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80104a4:	f01a 0f01 	tst.w	sl, #1
 80104a8:	d10e      	bne.n	80104c8 <__gethex+0x3a4>
 80104aa:	f047 0710 	orr.w	r7, r7, #16
 80104ae:	e033      	b.n	8010518 <__gethex+0x3f4>
 80104b0:	f04f 0a01 	mov.w	sl, #1
 80104b4:	e7d0      	b.n	8010458 <__gethex+0x334>
 80104b6:	2701      	movs	r7, #1
 80104b8:	e7e2      	b.n	8010480 <__gethex+0x35c>
 80104ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104bc:	f1c3 0301 	rsb	r3, r3, #1
 80104c0:	9315      	str	r3, [sp, #84]	; 0x54
 80104c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d0f0      	beq.n	80104aa <__gethex+0x386>
 80104c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80104cc:	f104 0314 	add.w	r3, r4, #20
 80104d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80104d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80104d8:	f04f 0c00 	mov.w	ip, #0
 80104dc:	4618      	mov	r0, r3
 80104de:	f853 2b04 	ldr.w	r2, [r3], #4
 80104e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80104e6:	d01c      	beq.n	8010522 <__gethex+0x3fe>
 80104e8:	3201      	adds	r2, #1
 80104ea:	6002      	str	r2, [r0, #0]
 80104ec:	2f02      	cmp	r7, #2
 80104ee:	f104 0314 	add.w	r3, r4, #20
 80104f2:	d13f      	bne.n	8010574 <__gethex+0x450>
 80104f4:	f8d8 2000 	ldr.w	r2, [r8]
 80104f8:	3a01      	subs	r2, #1
 80104fa:	42b2      	cmp	r2, r6
 80104fc:	d10a      	bne.n	8010514 <__gethex+0x3f0>
 80104fe:	1171      	asrs	r1, r6, #5
 8010500:	2201      	movs	r2, #1
 8010502:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010506:	f006 061f 	and.w	r6, r6, #31
 801050a:	fa02 f606 	lsl.w	r6, r2, r6
 801050e:	421e      	tst	r6, r3
 8010510:	bf18      	it	ne
 8010512:	4617      	movne	r7, r2
 8010514:	f047 0720 	orr.w	r7, r7, #32
 8010518:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801051a:	601c      	str	r4, [r3, #0]
 801051c:	9b04      	ldr	r3, [sp, #16]
 801051e:	601d      	str	r5, [r3, #0]
 8010520:	e695      	b.n	801024e <__gethex+0x12a>
 8010522:	4299      	cmp	r1, r3
 8010524:	f843 cc04 	str.w	ip, [r3, #-4]
 8010528:	d8d8      	bhi.n	80104dc <__gethex+0x3b8>
 801052a:	68a3      	ldr	r3, [r4, #8]
 801052c:	459b      	cmp	fp, r3
 801052e:	db19      	blt.n	8010564 <__gethex+0x440>
 8010530:	6861      	ldr	r1, [r4, #4]
 8010532:	ee18 0a10 	vmov	r0, s16
 8010536:	3101      	adds	r1, #1
 8010538:	f000 f928 	bl	801078c <_Balloc>
 801053c:	4681      	mov	r9, r0
 801053e:	b918      	cbnz	r0, 8010548 <__gethex+0x424>
 8010540:	4b1a      	ldr	r3, [pc, #104]	; (80105ac <__gethex+0x488>)
 8010542:	4602      	mov	r2, r0
 8010544:	2184      	movs	r1, #132	; 0x84
 8010546:	e6a8      	b.n	801029a <__gethex+0x176>
 8010548:	6922      	ldr	r2, [r4, #16]
 801054a:	3202      	adds	r2, #2
 801054c:	f104 010c 	add.w	r1, r4, #12
 8010550:	0092      	lsls	r2, r2, #2
 8010552:	300c      	adds	r0, #12
 8010554:	f000 f90c 	bl	8010770 <memcpy>
 8010558:	4621      	mov	r1, r4
 801055a:	ee18 0a10 	vmov	r0, s16
 801055e:	f000 f955 	bl	801080c <_Bfree>
 8010562:	464c      	mov	r4, r9
 8010564:	6923      	ldr	r3, [r4, #16]
 8010566:	1c5a      	adds	r2, r3, #1
 8010568:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801056c:	6122      	str	r2, [r4, #16]
 801056e:	2201      	movs	r2, #1
 8010570:	615a      	str	r2, [r3, #20]
 8010572:	e7bb      	b.n	80104ec <__gethex+0x3c8>
 8010574:	6922      	ldr	r2, [r4, #16]
 8010576:	455a      	cmp	r2, fp
 8010578:	dd0b      	ble.n	8010592 <__gethex+0x46e>
 801057a:	2101      	movs	r1, #1
 801057c:	4620      	mov	r0, r4
 801057e:	f7ff fd69 	bl	8010054 <rshift>
 8010582:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010586:	3501      	adds	r5, #1
 8010588:	42ab      	cmp	r3, r5
 801058a:	f6ff aed0 	blt.w	801032e <__gethex+0x20a>
 801058e:	2701      	movs	r7, #1
 8010590:	e7c0      	b.n	8010514 <__gethex+0x3f0>
 8010592:	f016 061f 	ands.w	r6, r6, #31
 8010596:	d0fa      	beq.n	801058e <__gethex+0x46a>
 8010598:	449a      	add	sl, r3
 801059a:	f1c6 0620 	rsb	r6, r6, #32
 801059e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80105a2:	f000 f9e9 	bl	8010978 <__hi0bits>
 80105a6:	42b0      	cmp	r0, r6
 80105a8:	dbe7      	blt.n	801057a <__gethex+0x456>
 80105aa:	e7f0      	b.n	801058e <__gethex+0x46a>
 80105ac:	08025af1 	.word	0x08025af1

080105b0 <L_shift>:
 80105b0:	f1c2 0208 	rsb	r2, r2, #8
 80105b4:	0092      	lsls	r2, r2, #2
 80105b6:	b570      	push	{r4, r5, r6, lr}
 80105b8:	f1c2 0620 	rsb	r6, r2, #32
 80105bc:	6843      	ldr	r3, [r0, #4]
 80105be:	6804      	ldr	r4, [r0, #0]
 80105c0:	fa03 f506 	lsl.w	r5, r3, r6
 80105c4:	432c      	orrs	r4, r5
 80105c6:	40d3      	lsrs	r3, r2
 80105c8:	6004      	str	r4, [r0, #0]
 80105ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80105ce:	4288      	cmp	r0, r1
 80105d0:	d3f4      	bcc.n	80105bc <L_shift+0xc>
 80105d2:	bd70      	pop	{r4, r5, r6, pc}

080105d4 <__match>:
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	6803      	ldr	r3, [r0, #0]
 80105d8:	3301      	adds	r3, #1
 80105da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105de:	b914      	cbnz	r4, 80105e6 <__match+0x12>
 80105e0:	6003      	str	r3, [r0, #0]
 80105e2:	2001      	movs	r0, #1
 80105e4:	bd30      	pop	{r4, r5, pc}
 80105e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80105ee:	2d19      	cmp	r5, #25
 80105f0:	bf98      	it	ls
 80105f2:	3220      	addls	r2, #32
 80105f4:	42a2      	cmp	r2, r4
 80105f6:	d0f0      	beq.n	80105da <__match+0x6>
 80105f8:	2000      	movs	r0, #0
 80105fa:	e7f3      	b.n	80105e4 <__match+0x10>

080105fc <__hexnan>:
 80105fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010600:	680b      	ldr	r3, [r1, #0]
 8010602:	6801      	ldr	r1, [r0, #0]
 8010604:	115e      	asrs	r6, r3, #5
 8010606:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801060a:	f013 031f 	ands.w	r3, r3, #31
 801060e:	b087      	sub	sp, #28
 8010610:	bf18      	it	ne
 8010612:	3604      	addne	r6, #4
 8010614:	2500      	movs	r5, #0
 8010616:	1f37      	subs	r7, r6, #4
 8010618:	4682      	mov	sl, r0
 801061a:	4690      	mov	r8, r2
 801061c:	9301      	str	r3, [sp, #4]
 801061e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010622:	46b9      	mov	r9, r7
 8010624:	463c      	mov	r4, r7
 8010626:	9502      	str	r5, [sp, #8]
 8010628:	46ab      	mov	fp, r5
 801062a:	784a      	ldrb	r2, [r1, #1]
 801062c:	1c4b      	adds	r3, r1, #1
 801062e:	9303      	str	r3, [sp, #12]
 8010630:	b342      	cbz	r2, 8010684 <__hexnan+0x88>
 8010632:	4610      	mov	r0, r2
 8010634:	9105      	str	r1, [sp, #20]
 8010636:	9204      	str	r2, [sp, #16]
 8010638:	f7ff fd5e 	bl	80100f8 <__hexdig_fun>
 801063c:	2800      	cmp	r0, #0
 801063e:	d14f      	bne.n	80106e0 <__hexnan+0xe4>
 8010640:	9a04      	ldr	r2, [sp, #16]
 8010642:	9905      	ldr	r1, [sp, #20]
 8010644:	2a20      	cmp	r2, #32
 8010646:	d818      	bhi.n	801067a <__hexnan+0x7e>
 8010648:	9b02      	ldr	r3, [sp, #8]
 801064a:	459b      	cmp	fp, r3
 801064c:	dd13      	ble.n	8010676 <__hexnan+0x7a>
 801064e:	454c      	cmp	r4, r9
 8010650:	d206      	bcs.n	8010660 <__hexnan+0x64>
 8010652:	2d07      	cmp	r5, #7
 8010654:	dc04      	bgt.n	8010660 <__hexnan+0x64>
 8010656:	462a      	mov	r2, r5
 8010658:	4649      	mov	r1, r9
 801065a:	4620      	mov	r0, r4
 801065c:	f7ff ffa8 	bl	80105b0 <L_shift>
 8010660:	4544      	cmp	r4, r8
 8010662:	d950      	bls.n	8010706 <__hexnan+0x10a>
 8010664:	2300      	movs	r3, #0
 8010666:	f1a4 0904 	sub.w	r9, r4, #4
 801066a:	f844 3c04 	str.w	r3, [r4, #-4]
 801066e:	f8cd b008 	str.w	fp, [sp, #8]
 8010672:	464c      	mov	r4, r9
 8010674:	461d      	mov	r5, r3
 8010676:	9903      	ldr	r1, [sp, #12]
 8010678:	e7d7      	b.n	801062a <__hexnan+0x2e>
 801067a:	2a29      	cmp	r2, #41	; 0x29
 801067c:	d156      	bne.n	801072c <__hexnan+0x130>
 801067e:	3102      	adds	r1, #2
 8010680:	f8ca 1000 	str.w	r1, [sl]
 8010684:	f1bb 0f00 	cmp.w	fp, #0
 8010688:	d050      	beq.n	801072c <__hexnan+0x130>
 801068a:	454c      	cmp	r4, r9
 801068c:	d206      	bcs.n	801069c <__hexnan+0xa0>
 801068e:	2d07      	cmp	r5, #7
 8010690:	dc04      	bgt.n	801069c <__hexnan+0xa0>
 8010692:	462a      	mov	r2, r5
 8010694:	4649      	mov	r1, r9
 8010696:	4620      	mov	r0, r4
 8010698:	f7ff ff8a 	bl	80105b0 <L_shift>
 801069c:	4544      	cmp	r4, r8
 801069e:	d934      	bls.n	801070a <__hexnan+0x10e>
 80106a0:	f1a8 0204 	sub.w	r2, r8, #4
 80106a4:	4623      	mov	r3, r4
 80106a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80106aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80106ae:	429f      	cmp	r7, r3
 80106b0:	d2f9      	bcs.n	80106a6 <__hexnan+0xaa>
 80106b2:	1b3b      	subs	r3, r7, r4
 80106b4:	f023 0303 	bic.w	r3, r3, #3
 80106b8:	3304      	adds	r3, #4
 80106ba:	3401      	adds	r4, #1
 80106bc:	3e03      	subs	r6, #3
 80106be:	42b4      	cmp	r4, r6
 80106c0:	bf88      	it	hi
 80106c2:	2304      	movhi	r3, #4
 80106c4:	4443      	add	r3, r8
 80106c6:	2200      	movs	r2, #0
 80106c8:	f843 2b04 	str.w	r2, [r3], #4
 80106cc:	429f      	cmp	r7, r3
 80106ce:	d2fb      	bcs.n	80106c8 <__hexnan+0xcc>
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	b91b      	cbnz	r3, 80106dc <__hexnan+0xe0>
 80106d4:	4547      	cmp	r7, r8
 80106d6:	d127      	bne.n	8010728 <__hexnan+0x12c>
 80106d8:	2301      	movs	r3, #1
 80106da:	603b      	str	r3, [r7, #0]
 80106dc:	2005      	movs	r0, #5
 80106de:	e026      	b.n	801072e <__hexnan+0x132>
 80106e0:	3501      	adds	r5, #1
 80106e2:	2d08      	cmp	r5, #8
 80106e4:	f10b 0b01 	add.w	fp, fp, #1
 80106e8:	dd06      	ble.n	80106f8 <__hexnan+0xfc>
 80106ea:	4544      	cmp	r4, r8
 80106ec:	d9c3      	bls.n	8010676 <__hexnan+0x7a>
 80106ee:	2300      	movs	r3, #0
 80106f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80106f4:	2501      	movs	r5, #1
 80106f6:	3c04      	subs	r4, #4
 80106f8:	6822      	ldr	r2, [r4, #0]
 80106fa:	f000 000f 	and.w	r0, r0, #15
 80106fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010702:	6022      	str	r2, [r4, #0]
 8010704:	e7b7      	b.n	8010676 <__hexnan+0x7a>
 8010706:	2508      	movs	r5, #8
 8010708:	e7b5      	b.n	8010676 <__hexnan+0x7a>
 801070a:	9b01      	ldr	r3, [sp, #4]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d0df      	beq.n	80106d0 <__hexnan+0xd4>
 8010710:	f04f 32ff 	mov.w	r2, #4294967295
 8010714:	f1c3 0320 	rsb	r3, r3, #32
 8010718:	fa22 f303 	lsr.w	r3, r2, r3
 801071c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010720:	401a      	ands	r2, r3
 8010722:	f846 2c04 	str.w	r2, [r6, #-4]
 8010726:	e7d3      	b.n	80106d0 <__hexnan+0xd4>
 8010728:	3f04      	subs	r7, #4
 801072a:	e7d1      	b.n	80106d0 <__hexnan+0xd4>
 801072c:	2004      	movs	r0, #4
 801072e:	b007      	add	sp, #28
 8010730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010734 <_localeconv_r>:
 8010734:	4800      	ldr	r0, [pc, #0]	; (8010738 <_localeconv_r+0x4>)
 8010736:	4770      	bx	lr
 8010738:	20000198 	.word	0x20000198

0801073c <malloc>:
 801073c:	4b02      	ldr	r3, [pc, #8]	; (8010748 <malloc+0xc>)
 801073e:	4601      	mov	r1, r0
 8010740:	6818      	ldr	r0, [r3, #0]
 8010742:	f000 bd3d 	b.w	80111c0 <_malloc_r>
 8010746:	bf00      	nop
 8010748:	20000040 	.word	0x20000040

0801074c <__ascii_mbtowc>:
 801074c:	b082      	sub	sp, #8
 801074e:	b901      	cbnz	r1, 8010752 <__ascii_mbtowc+0x6>
 8010750:	a901      	add	r1, sp, #4
 8010752:	b142      	cbz	r2, 8010766 <__ascii_mbtowc+0x1a>
 8010754:	b14b      	cbz	r3, 801076a <__ascii_mbtowc+0x1e>
 8010756:	7813      	ldrb	r3, [r2, #0]
 8010758:	600b      	str	r3, [r1, #0]
 801075a:	7812      	ldrb	r2, [r2, #0]
 801075c:	1e10      	subs	r0, r2, #0
 801075e:	bf18      	it	ne
 8010760:	2001      	movne	r0, #1
 8010762:	b002      	add	sp, #8
 8010764:	4770      	bx	lr
 8010766:	4610      	mov	r0, r2
 8010768:	e7fb      	b.n	8010762 <__ascii_mbtowc+0x16>
 801076a:	f06f 0001 	mvn.w	r0, #1
 801076e:	e7f8      	b.n	8010762 <__ascii_mbtowc+0x16>

08010770 <memcpy>:
 8010770:	440a      	add	r2, r1
 8010772:	4291      	cmp	r1, r2
 8010774:	f100 33ff 	add.w	r3, r0, #4294967295
 8010778:	d100      	bne.n	801077c <memcpy+0xc>
 801077a:	4770      	bx	lr
 801077c:	b510      	push	{r4, lr}
 801077e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010786:	4291      	cmp	r1, r2
 8010788:	d1f9      	bne.n	801077e <memcpy+0xe>
 801078a:	bd10      	pop	{r4, pc}

0801078c <_Balloc>:
 801078c:	b570      	push	{r4, r5, r6, lr}
 801078e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010790:	4604      	mov	r4, r0
 8010792:	460d      	mov	r5, r1
 8010794:	b976      	cbnz	r6, 80107b4 <_Balloc+0x28>
 8010796:	2010      	movs	r0, #16
 8010798:	f7ff ffd0 	bl	801073c <malloc>
 801079c:	4602      	mov	r2, r0
 801079e:	6260      	str	r0, [r4, #36]	; 0x24
 80107a0:	b920      	cbnz	r0, 80107ac <_Balloc+0x20>
 80107a2:	4b18      	ldr	r3, [pc, #96]	; (8010804 <_Balloc+0x78>)
 80107a4:	4818      	ldr	r0, [pc, #96]	; (8010808 <_Balloc+0x7c>)
 80107a6:	2166      	movs	r1, #102	; 0x66
 80107a8:	f7fe fdaa 	bl	800f300 <__assert_func>
 80107ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80107b0:	6006      	str	r6, [r0, #0]
 80107b2:	60c6      	str	r6, [r0, #12]
 80107b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80107b6:	68f3      	ldr	r3, [r6, #12]
 80107b8:	b183      	cbz	r3, 80107dc <_Balloc+0x50>
 80107ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80107bc:	68db      	ldr	r3, [r3, #12]
 80107be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80107c2:	b9b8      	cbnz	r0, 80107f4 <_Balloc+0x68>
 80107c4:	2101      	movs	r1, #1
 80107c6:	fa01 f605 	lsl.w	r6, r1, r5
 80107ca:	1d72      	adds	r2, r6, #5
 80107cc:	0092      	lsls	r2, r2, #2
 80107ce:	4620      	mov	r0, r4
 80107d0:	f000 fc97 	bl	8011102 <_calloc_r>
 80107d4:	b160      	cbz	r0, 80107f0 <_Balloc+0x64>
 80107d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80107da:	e00e      	b.n	80107fa <_Balloc+0x6e>
 80107dc:	2221      	movs	r2, #33	; 0x21
 80107de:	2104      	movs	r1, #4
 80107e0:	4620      	mov	r0, r4
 80107e2:	f000 fc8e 	bl	8011102 <_calloc_r>
 80107e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80107e8:	60f0      	str	r0, [r6, #12]
 80107ea:	68db      	ldr	r3, [r3, #12]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d1e4      	bne.n	80107ba <_Balloc+0x2e>
 80107f0:	2000      	movs	r0, #0
 80107f2:	bd70      	pop	{r4, r5, r6, pc}
 80107f4:	6802      	ldr	r2, [r0, #0]
 80107f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80107fa:	2300      	movs	r3, #0
 80107fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010800:	e7f7      	b.n	80107f2 <_Balloc+0x66>
 8010802:	bf00      	nop
 8010804:	080258d0 	.word	0x080258d0
 8010808:	08025b80 	.word	0x08025b80

0801080c <_Bfree>:
 801080c:	b570      	push	{r4, r5, r6, lr}
 801080e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010810:	4605      	mov	r5, r0
 8010812:	460c      	mov	r4, r1
 8010814:	b976      	cbnz	r6, 8010834 <_Bfree+0x28>
 8010816:	2010      	movs	r0, #16
 8010818:	f7ff ff90 	bl	801073c <malloc>
 801081c:	4602      	mov	r2, r0
 801081e:	6268      	str	r0, [r5, #36]	; 0x24
 8010820:	b920      	cbnz	r0, 801082c <_Bfree+0x20>
 8010822:	4b09      	ldr	r3, [pc, #36]	; (8010848 <_Bfree+0x3c>)
 8010824:	4809      	ldr	r0, [pc, #36]	; (801084c <_Bfree+0x40>)
 8010826:	218a      	movs	r1, #138	; 0x8a
 8010828:	f7fe fd6a 	bl	800f300 <__assert_func>
 801082c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010830:	6006      	str	r6, [r0, #0]
 8010832:	60c6      	str	r6, [r0, #12]
 8010834:	b13c      	cbz	r4, 8010846 <_Bfree+0x3a>
 8010836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010838:	6862      	ldr	r2, [r4, #4]
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010840:	6021      	str	r1, [r4, #0]
 8010842:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010846:	bd70      	pop	{r4, r5, r6, pc}
 8010848:	080258d0 	.word	0x080258d0
 801084c:	08025b80 	.word	0x08025b80

08010850 <__multadd>:
 8010850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010854:	690e      	ldr	r6, [r1, #16]
 8010856:	4607      	mov	r7, r0
 8010858:	4698      	mov	r8, r3
 801085a:	460c      	mov	r4, r1
 801085c:	f101 0014 	add.w	r0, r1, #20
 8010860:	2300      	movs	r3, #0
 8010862:	6805      	ldr	r5, [r0, #0]
 8010864:	b2a9      	uxth	r1, r5
 8010866:	fb02 8101 	mla	r1, r2, r1, r8
 801086a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801086e:	0c2d      	lsrs	r5, r5, #16
 8010870:	fb02 c505 	mla	r5, r2, r5, ip
 8010874:	b289      	uxth	r1, r1
 8010876:	3301      	adds	r3, #1
 8010878:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801087c:	429e      	cmp	r6, r3
 801087e:	f840 1b04 	str.w	r1, [r0], #4
 8010882:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010886:	dcec      	bgt.n	8010862 <__multadd+0x12>
 8010888:	f1b8 0f00 	cmp.w	r8, #0
 801088c:	d022      	beq.n	80108d4 <__multadd+0x84>
 801088e:	68a3      	ldr	r3, [r4, #8]
 8010890:	42b3      	cmp	r3, r6
 8010892:	dc19      	bgt.n	80108c8 <__multadd+0x78>
 8010894:	6861      	ldr	r1, [r4, #4]
 8010896:	4638      	mov	r0, r7
 8010898:	3101      	adds	r1, #1
 801089a:	f7ff ff77 	bl	801078c <_Balloc>
 801089e:	4605      	mov	r5, r0
 80108a0:	b928      	cbnz	r0, 80108ae <__multadd+0x5e>
 80108a2:	4602      	mov	r2, r0
 80108a4:	4b0d      	ldr	r3, [pc, #52]	; (80108dc <__multadd+0x8c>)
 80108a6:	480e      	ldr	r0, [pc, #56]	; (80108e0 <__multadd+0x90>)
 80108a8:	21b5      	movs	r1, #181	; 0xb5
 80108aa:	f7fe fd29 	bl	800f300 <__assert_func>
 80108ae:	6922      	ldr	r2, [r4, #16]
 80108b0:	3202      	adds	r2, #2
 80108b2:	f104 010c 	add.w	r1, r4, #12
 80108b6:	0092      	lsls	r2, r2, #2
 80108b8:	300c      	adds	r0, #12
 80108ba:	f7ff ff59 	bl	8010770 <memcpy>
 80108be:	4621      	mov	r1, r4
 80108c0:	4638      	mov	r0, r7
 80108c2:	f7ff ffa3 	bl	801080c <_Bfree>
 80108c6:	462c      	mov	r4, r5
 80108c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80108cc:	3601      	adds	r6, #1
 80108ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80108d2:	6126      	str	r6, [r4, #16]
 80108d4:	4620      	mov	r0, r4
 80108d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108da:	bf00      	nop
 80108dc:	08025af1 	.word	0x08025af1
 80108e0:	08025b80 	.word	0x08025b80

080108e4 <__s2b>:
 80108e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108e8:	460c      	mov	r4, r1
 80108ea:	4615      	mov	r5, r2
 80108ec:	461f      	mov	r7, r3
 80108ee:	2209      	movs	r2, #9
 80108f0:	3308      	adds	r3, #8
 80108f2:	4606      	mov	r6, r0
 80108f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80108f8:	2100      	movs	r1, #0
 80108fa:	2201      	movs	r2, #1
 80108fc:	429a      	cmp	r2, r3
 80108fe:	db09      	blt.n	8010914 <__s2b+0x30>
 8010900:	4630      	mov	r0, r6
 8010902:	f7ff ff43 	bl	801078c <_Balloc>
 8010906:	b940      	cbnz	r0, 801091a <__s2b+0x36>
 8010908:	4602      	mov	r2, r0
 801090a:	4b19      	ldr	r3, [pc, #100]	; (8010970 <__s2b+0x8c>)
 801090c:	4819      	ldr	r0, [pc, #100]	; (8010974 <__s2b+0x90>)
 801090e:	21ce      	movs	r1, #206	; 0xce
 8010910:	f7fe fcf6 	bl	800f300 <__assert_func>
 8010914:	0052      	lsls	r2, r2, #1
 8010916:	3101      	adds	r1, #1
 8010918:	e7f0      	b.n	80108fc <__s2b+0x18>
 801091a:	9b08      	ldr	r3, [sp, #32]
 801091c:	6143      	str	r3, [r0, #20]
 801091e:	2d09      	cmp	r5, #9
 8010920:	f04f 0301 	mov.w	r3, #1
 8010924:	6103      	str	r3, [r0, #16]
 8010926:	dd16      	ble.n	8010956 <__s2b+0x72>
 8010928:	f104 0909 	add.w	r9, r4, #9
 801092c:	46c8      	mov	r8, r9
 801092e:	442c      	add	r4, r5
 8010930:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010934:	4601      	mov	r1, r0
 8010936:	3b30      	subs	r3, #48	; 0x30
 8010938:	220a      	movs	r2, #10
 801093a:	4630      	mov	r0, r6
 801093c:	f7ff ff88 	bl	8010850 <__multadd>
 8010940:	45a0      	cmp	r8, r4
 8010942:	d1f5      	bne.n	8010930 <__s2b+0x4c>
 8010944:	f1a5 0408 	sub.w	r4, r5, #8
 8010948:	444c      	add	r4, r9
 801094a:	1b2d      	subs	r5, r5, r4
 801094c:	1963      	adds	r3, r4, r5
 801094e:	42bb      	cmp	r3, r7
 8010950:	db04      	blt.n	801095c <__s2b+0x78>
 8010952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010956:	340a      	adds	r4, #10
 8010958:	2509      	movs	r5, #9
 801095a:	e7f6      	b.n	801094a <__s2b+0x66>
 801095c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010960:	4601      	mov	r1, r0
 8010962:	3b30      	subs	r3, #48	; 0x30
 8010964:	220a      	movs	r2, #10
 8010966:	4630      	mov	r0, r6
 8010968:	f7ff ff72 	bl	8010850 <__multadd>
 801096c:	e7ee      	b.n	801094c <__s2b+0x68>
 801096e:	bf00      	nop
 8010970:	08025af1 	.word	0x08025af1
 8010974:	08025b80 	.word	0x08025b80

08010978 <__hi0bits>:
 8010978:	0c03      	lsrs	r3, r0, #16
 801097a:	041b      	lsls	r3, r3, #16
 801097c:	b9d3      	cbnz	r3, 80109b4 <__hi0bits+0x3c>
 801097e:	0400      	lsls	r0, r0, #16
 8010980:	2310      	movs	r3, #16
 8010982:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010986:	bf04      	itt	eq
 8010988:	0200      	lsleq	r0, r0, #8
 801098a:	3308      	addeq	r3, #8
 801098c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010990:	bf04      	itt	eq
 8010992:	0100      	lsleq	r0, r0, #4
 8010994:	3304      	addeq	r3, #4
 8010996:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801099a:	bf04      	itt	eq
 801099c:	0080      	lsleq	r0, r0, #2
 801099e:	3302      	addeq	r3, #2
 80109a0:	2800      	cmp	r0, #0
 80109a2:	db05      	blt.n	80109b0 <__hi0bits+0x38>
 80109a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80109a8:	f103 0301 	add.w	r3, r3, #1
 80109ac:	bf08      	it	eq
 80109ae:	2320      	moveq	r3, #32
 80109b0:	4618      	mov	r0, r3
 80109b2:	4770      	bx	lr
 80109b4:	2300      	movs	r3, #0
 80109b6:	e7e4      	b.n	8010982 <__hi0bits+0xa>

080109b8 <__lo0bits>:
 80109b8:	6803      	ldr	r3, [r0, #0]
 80109ba:	f013 0207 	ands.w	r2, r3, #7
 80109be:	4601      	mov	r1, r0
 80109c0:	d00b      	beq.n	80109da <__lo0bits+0x22>
 80109c2:	07da      	lsls	r2, r3, #31
 80109c4:	d424      	bmi.n	8010a10 <__lo0bits+0x58>
 80109c6:	0798      	lsls	r0, r3, #30
 80109c8:	bf49      	itett	mi
 80109ca:	085b      	lsrmi	r3, r3, #1
 80109cc:	089b      	lsrpl	r3, r3, #2
 80109ce:	2001      	movmi	r0, #1
 80109d0:	600b      	strmi	r3, [r1, #0]
 80109d2:	bf5c      	itt	pl
 80109d4:	600b      	strpl	r3, [r1, #0]
 80109d6:	2002      	movpl	r0, #2
 80109d8:	4770      	bx	lr
 80109da:	b298      	uxth	r0, r3
 80109dc:	b9b0      	cbnz	r0, 8010a0c <__lo0bits+0x54>
 80109de:	0c1b      	lsrs	r3, r3, #16
 80109e0:	2010      	movs	r0, #16
 80109e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80109e6:	bf04      	itt	eq
 80109e8:	0a1b      	lsreq	r3, r3, #8
 80109ea:	3008      	addeq	r0, #8
 80109ec:	071a      	lsls	r2, r3, #28
 80109ee:	bf04      	itt	eq
 80109f0:	091b      	lsreq	r3, r3, #4
 80109f2:	3004      	addeq	r0, #4
 80109f4:	079a      	lsls	r2, r3, #30
 80109f6:	bf04      	itt	eq
 80109f8:	089b      	lsreq	r3, r3, #2
 80109fa:	3002      	addeq	r0, #2
 80109fc:	07da      	lsls	r2, r3, #31
 80109fe:	d403      	bmi.n	8010a08 <__lo0bits+0x50>
 8010a00:	085b      	lsrs	r3, r3, #1
 8010a02:	f100 0001 	add.w	r0, r0, #1
 8010a06:	d005      	beq.n	8010a14 <__lo0bits+0x5c>
 8010a08:	600b      	str	r3, [r1, #0]
 8010a0a:	4770      	bx	lr
 8010a0c:	4610      	mov	r0, r2
 8010a0e:	e7e8      	b.n	80109e2 <__lo0bits+0x2a>
 8010a10:	2000      	movs	r0, #0
 8010a12:	4770      	bx	lr
 8010a14:	2020      	movs	r0, #32
 8010a16:	4770      	bx	lr

08010a18 <__i2b>:
 8010a18:	b510      	push	{r4, lr}
 8010a1a:	460c      	mov	r4, r1
 8010a1c:	2101      	movs	r1, #1
 8010a1e:	f7ff feb5 	bl	801078c <_Balloc>
 8010a22:	4602      	mov	r2, r0
 8010a24:	b928      	cbnz	r0, 8010a32 <__i2b+0x1a>
 8010a26:	4b05      	ldr	r3, [pc, #20]	; (8010a3c <__i2b+0x24>)
 8010a28:	4805      	ldr	r0, [pc, #20]	; (8010a40 <__i2b+0x28>)
 8010a2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010a2e:	f7fe fc67 	bl	800f300 <__assert_func>
 8010a32:	2301      	movs	r3, #1
 8010a34:	6144      	str	r4, [r0, #20]
 8010a36:	6103      	str	r3, [r0, #16]
 8010a38:	bd10      	pop	{r4, pc}
 8010a3a:	bf00      	nop
 8010a3c:	08025af1 	.word	0x08025af1
 8010a40:	08025b80 	.word	0x08025b80

08010a44 <__multiply>:
 8010a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a48:	4614      	mov	r4, r2
 8010a4a:	690a      	ldr	r2, [r1, #16]
 8010a4c:	6923      	ldr	r3, [r4, #16]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	bfb8      	it	lt
 8010a52:	460b      	movlt	r3, r1
 8010a54:	460d      	mov	r5, r1
 8010a56:	bfbc      	itt	lt
 8010a58:	4625      	movlt	r5, r4
 8010a5a:	461c      	movlt	r4, r3
 8010a5c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010a60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010a64:	68ab      	ldr	r3, [r5, #8]
 8010a66:	6869      	ldr	r1, [r5, #4]
 8010a68:	eb0a 0709 	add.w	r7, sl, r9
 8010a6c:	42bb      	cmp	r3, r7
 8010a6e:	b085      	sub	sp, #20
 8010a70:	bfb8      	it	lt
 8010a72:	3101      	addlt	r1, #1
 8010a74:	f7ff fe8a 	bl	801078c <_Balloc>
 8010a78:	b930      	cbnz	r0, 8010a88 <__multiply+0x44>
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	4b42      	ldr	r3, [pc, #264]	; (8010b88 <__multiply+0x144>)
 8010a7e:	4843      	ldr	r0, [pc, #268]	; (8010b8c <__multiply+0x148>)
 8010a80:	f240 115d 	movw	r1, #349	; 0x15d
 8010a84:	f7fe fc3c 	bl	800f300 <__assert_func>
 8010a88:	f100 0614 	add.w	r6, r0, #20
 8010a8c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010a90:	4633      	mov	r3, r6
 8010a92:	2200      	movs	r2, #0
 8010a94:	4543      	cmp	r3, r8
 8010a96:	d31e      	bcc.n	8010ad6 <__multiply+0x92>
 8010a98:	f105 0c14 	add.w	ip, r5, #20
 8010a9c:	f104 0314 	add.w	r3, r4, #20
 8010aa0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010aa4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010aa8:	9202      	str	r2, [sp, #8]
 8010aaa:	ebac 0205 	sub.w	r2, ip, r5
 8010aae:	3a15      	subs	r2, #21
 8010ab0:	f022 0203 	bic.w	r2, r2, #3
 8010ab4:	3204      	adds	r2, #4
 8010ab6:	f105 0115 	add.w	r1, r5, #21
 8010aba:	458c      	cmp	ip, r1
 8010abc:	bf38      	it	cc
 8010abe:	2204      	movcc	r2, #4
 8010ac0:	9201      	str	r2, [sp, #4]
 8010ac2:	9a02      	ldr	r2, [sp, #8]
 8010ac4:	9303      	str	r3, [sp, #12]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d808      	bhi.n	8010adc <__multiply+0x98>
 8010aca:	2f00      	cmp	r7, #0
 8010acc:	dc55      	bgt.n	8010b7a <__multiply+0x136>
 8010ace:	6107      	str	r7, [r0, #16]
 8010ad0:	b005      	add	sp, #20
 8010ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad6:	f843 2b04 	str.w	r2, [r3], #4
 8010ada:	e7db      	b.n	8010a94 <__multiply+0x50>
 8010adc:	f8b3 a000 	ldrh.w	sl, [r3]
 8010ae0:	f1ba 0f00 	cmp.w	sl, #0
 8010ae4:	d020      	beq.n	8010b28 <__multiply+0xe4>
 8010ae6:	f105 0e14 	add.w	lr, r5, #20
 8010aea:	46b1      	mov	r9, r6
 8010aec:	2200      	movs	r2, #0
 8010aee:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010af2:	f8d9 b000 	ldr.w	fp, [r9]
 8010af6:	b2a1      	uxth	r1, r4
 8010af8:	fa1f fb8b 	uxth.w	fp, fp
 8010afc:	fb0a b101 	mla	r1, sl, r1, fp
 8010b00:	4411      	add	r1, r2
 8010b02:	f8d9 2000 	ldr.w	r2, [r9]
 8010b06:	0c24      	lsrs	r4, r4, #16
 8010b08:	0c12      	lsrs	r2, r2, #16
 8010b0a:	fb0a 2404 	mla	r4, sl, r4, r2
 8010b0e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010b12:	b289      	uxth	r1, r1
 8010b14:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010b18:	45f4      	cmp	ip, lr
 8010b1a:	f849 1b04 	str.w	r1, [r9], #4
 8010b1e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010b22:	d8e4      	bhi.n	8010aee <__multiply+0xaa>
 8010b24:	9901      	ldr	r1, [sp, #4]
 8010b26:	5072      	str	r2, [r6, r1]
 8010b28:	9a03      	ldr	r2, [sp, #12]
 8010b2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010b2e:	3304      	adds	r3, #4
 8010b30:	f1b9 0f00 	cmp.w	r9, #0
 8010b34:	d01f      	beq.n	8010b76 <__multiply+0x132>
 8010b36:	6834      	ldr	r4, [r6, #0]
 8010b38:	f105 0114 	add.w	r1, r5, #20
 8010b3c:	46b6      	mov	lr, r6
 8010b3e:	f04f 0a00 	mov.w	sl, #0
 8010b42:	880a      	ldrh	r2, [r1, #0]
 8010b44:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010b48:	fb09 b202 	mla	r2, r9, r2, fp
 8010b4c:	4492      	add	sl, r2
 8010b4e:	b2a4      	uxth	r4, r4
 8010b50:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010b54:	f84e 4b04 	str.w	r4, [lr], #4
 8010b58:	f851 4b04 	ldr.w	r4, [r1], #4
 8010b5c:	f8be 2000 	ldrh.w	r2, [lr]
 8010b60:	0c24      	lsrs	r4, r4, #16
 8010b62:	fb09 2404 	mla	r4, r9, r4, r2
 8010b66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010b6a:	458c      	cmp	ip, r1
 8010b6c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010b70:	d8e7      	bhi.n	8010b42 <__multiply+0xfe>
 8010b72:	9a01      	ldr	r2, [sp, #4]
 8010b74:	50b4      	str	r4, [r6, r2]
 8010b76:	3604      	adds	r6, #4
 8010b78:	e7a3      	b.n	8010ac2 <__multiply+0x7e>
 8010b7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d1a5      	bne.n	8010ace <__multiply+0x8a>
 8010b82:	3f01      	subs	r7, #1
 8010b84:	e7a1      	b.n	8010aca <__multiply+0x86>
 8010b86:	bf00      	nop
 8010b88:	08025af1 	.word	0x08025af1
 8010b8c:	08025b80 	.word	0x08025b80

08010b90 <__pow5mult>:
 8010b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b94:	4615      	mov	r5, r2
 8010b96:	f012 0203 	ands.w	r2, r2, #3
 8010b9a:	4606      	mov	r6, r0
 8010b9c:	460f      	mov	r7, r1
 8010b9e:	d007      	beq.n	8010bb0 <__pow5mult+0x20>
 8010ba0:	4c25      	ldr	r4, [pc, #148]	; (8010c38 <__pow5mult+0xa8>)
 8010ba2:	3a01      	subs	r2, #1
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010baa:	f7ff fe51 	bl	8010850 <__multadd>
 8010bae:	4607      	mov	r7, r0
 8010bb0:	10ad      	asrs	r5, r5, #2
 8010bb2:	d03d      	beq.n	8010c30 <__pow5mult+0xa0>
 8010bb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010bb6:	b97c      	cbnz	r4, 8010bd8 <__pow5mult+0x48>
 8010bb8:	2010      	movs	r0, #16
 8010bba:	f7ff fdbf 	bl	801073c <malloc>
 8010bbe:	4602      	mov	r2, r0
 8010bc0:	6270      	str	r0, [r6, #36]	; 0x24
 8010bc2:	b928      	cbnz	r0, 8010bd0 <__pow5mult+0x40>
 8010bc4:	4b1d      	ldr	r3, [pc, #116]	; (8010c3c <__pow5mult+0xac>)
 8010bc6:	481e      	ldr	r0, [pc, #120]	; (8010c40 <__pow5mult+0xb0>)
 8010bc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010bcc:	f7fe fb98 	bl	800f300 <__assert_func>
 8010bd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010bd4:	6004      	str	r4, [r0, #0]
 8010bd6:	60c4      	str	r4, [r0, #12]
 8010bd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010bdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010be0:	b94c      	cbnz	r4, 8010bf6 <__pow5mult+0x66>
 8010be2:	f240 2171 	movw	r1, #625	; 0x271
 8010be6:	4630      	mov	r0, r6
 8010be8:	f7ff ff16 	bl	8010a18 <__i2b>
 8010bec:	2300      	movs	r3, #0
 8010bee:	f8c8 0008 	str.w	r0, [r8, #8]
 8010bf2:	4604      	mov	r4, r0
 8010bf4:	6003      	str	r3, [r0, #0]
 8010bf6:	f04f 0900 	mov.w	r9, #0
 8010bfa:	07eb      	lsls	r3, r5, #31
 8010bfc:	d50a      	bpl.n	8010c14 <__pow5mult+0x84>
 8010bfe:	4639      	mov	r1, r7
 8010c00:	4622      	mov	r2, r4
 8010c02:	4630      	mov	r0, r6
 8010c04:	f7ff ff1e 	bl	8010a44 <__multiply>
 8010c08:	4639      	mov	r1, r7
 8010c0a:	4680      	mov	r8, r0
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	f7ff fdfd 	bl	801080c <_Bfree>
 8010c12:	4647      	mov	r7, r8
 8010c14:	106d      	asrs	r5, r5, #1
 8010c16:	d00b      	beq.n	8010c30 <__pow5mult+0xa0>
 8010c18:	6820      	ldr	r0, [r4, #0]
 8010c1a:	b938      	cbnz	r0, 8010c2c <__pow5mult+0x9c>
 8010c1c:	4622      	mov	r2, r4
 8010c1e:	4621      	mov	r1, r4
 8010c20:	4630      	mov	r0, r6
 8010c22:	f7ff ff0f 	bl	8010a44 <__multiply>
 8010c26:	6020      	str	r0, [r4, #0]
 8010c28:	f8c0 9000 	str.w	r9, [r0]
 8010c2c:	4604      	mov	r4, r0
 8010c2e:	e7e4      	b.n	8010bfa <__pow5mult+0x6a>
 8010c30:	4638      	mov	r0, r7
 8010c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c36:	bf00      	nop
 8010c38:	08025cd0 	.word	0x08025cd0
 8010c3c:	080258d0 	.word	0x080258d0
 8010c40:	08025b80 	.word	0x08025b80

08010c44 <__lshift>:
 8010c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c48:	460c      	mov	r4, r1
 8010c4a:	6849      	ldr	r1, [r1, #4]
 8010c4c:	6923      	ldr	r3, [r4, #16]
 8010c4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010c52:	68a3      	ldr	r3, [r4, #8]
 8010c54:	4607      	mov	r7, r0
 8010c56:	4691      	mov	r9, r2
 8010c58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010c5c:	f108 0601 	add.w	r6, r8, #1
 8010c60:	42b3      	cmp	r3, r6
 8010c62:	db0b      	blt.n	8010c7c <__lshift+0x38>
 8010c64:	4638      	mov	r0, r7
 8010c66:	f7ff fd91 	bl	801078c <_Balloc>
 8010c6a:	4605      	mov	r5, r0
 8010c6c:	b948      	cbnz	r0, 8010c82 <__lshift+0x3e>
 8010c6e:	4602      	mov	r2, r0
 8010c70:	4b28      	ldr	r3, [pc, #160]	; (8010d14 <__lshift+0xd0>)
 8010c72:	4829      	ldr	r0, [pc, #164]	; (8010d18 <__lshift+0xd4>)
 8010c74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010c78:	f7fe fb42 	bl	800f300 <__assert_func>
 8010c7c:	3101      	adds	r1, #1
 8010c7e:	005b      	lsls	r3, r3, #1
 8010c80:	e7ee      	b.n	8010c60 <__lshift+0x1c>
 8010c82:	2300      	movs	r3, #0
 8010c84:	f100 0114 	add.w	r1, r0, #20
 8010c88:	f100 0210 	add.w	r2, r0, #16
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	4553      	cmp	r3, sl
 8010c90:	db33      	blt.n	8010cfa <__lshift+0xb6>
 8010c92:	6920      	ldr	r0, [r4, #16]
 8010c94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010c98:	f104 0314 	add.w	r3, r4, #20
 8010c9c:	f019 091f 	ands.w	r9, r9, #31
 8010ca0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ca4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010ca8:	d02b      	beq.n	8010d02 <__lshift+0xbe>
 8010caa:	f1c9 0e20 	rsb	lr, r9, #32
 8010cae:	468a      	mov	sl, r1
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	6818      	ldr	r0, [r3, #0]
 8010cb4:	fa00 f009 	lsl.w	r0, r0, r9
 8010cb8:	4302      	orrs	r2, r0
 8010cba:	f84a 2b04 	str.w	r2, [sl], #4
 8010cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cc2:	459c      	cmp	ip, r3
 8010cc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8010cc8:	d8f3      	bhi.n	8010cb2 <__lshift+0x6e>
 8010cca:	ebac 0304 	sub.w	r3, ip, r4
 8010cce:	3b15      	subs	r3, #21
 8010cd0:	f023 0303 	bic.w	r3, r3, #3
 8010cd4:	3304      	adds	r3, #4
 8010cd6:	f104 0015 	add.w	r0, r4, #21
 8010cda:	4584      	cmp	ip, r0
 8010cdc:	bf38      	it	cc
 8010cde:	2304      	movcc	r3, #4
 8010ce0:	50ca      	str	r2, [r1, r3]
 8010ce2:	b10a      	cbz	r2, 8010ce8 <__lshift+0xa4>
 8010ce4:	f108 0602 	add.w	r6, r8, #2
 8010ce8:	3e01      	subs	r6, #1
 8010cea:	4638      	mov	r0, r7
 8010cec:	612e      	str	r6, [r5, #16]
 8010cee:	4621      	mov	r1, r4
 8010cf0:	f7ff fd8c 	bl	801080c <_Bfree>
 8010cf4:	4628      	mov	r0, r5
 8010cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8010cfe:	3301      	adds	r3, #1
 8010d00:	e7c5      	b.n	8010c8e <__lshift+0x4a>
 8010d02:	3904      	subs	r1, #4
 8010d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d08:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d0c:	459c      	cmp	ip, r3
 8010d0e:	d8f9      	bhi.n	8010d04 <__lshift+0xc0>
 8010d10:	e7ea      	b.n	8010ce8 <__lshift+0xa4>
 8010d12:	bf00      	nop
 8010d14:	08025af1 	.word	0x08025af1
 8010d18:	08025b80 	.word	0x08025b80

08010d1c <__mcmp>:
 8010d1c:	b530      	push	{r4, r5, lr}
 8010d1e:	6902      	ldr	r2, [r0, #16]
 8010d20:	690c      	ldr	r4, [r1, #16]
 8010d22:	1b12      	subs	r2, r2, r4
 8010d24:	d10e      	bne.n	8010d44 <__mcmp+0x28>
 8010d26:	f100 0314 	add.w	r3, r0, #20
 8010d2a:	3114      	adds	r1, #20
 8010d2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010d30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010d34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010d38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010d3c:	42a5      	cmp	r5, r4
 8010d3e:	d003      	beq.n	8010d48 <__mcmp+0x2c>
 8010d40:	d305      	bcc.n	8010d4e <__mcmp+0x32>
 8010d42:	2201      	movs	r2, #1
 8010d44:	4610      	mov	r0, r2
 8010d46:	bd30      	pop	{r4, r5, pc}
 8010d48:	4283      	cmp	r3, r0
 8010d4a:	d3f3      	bcc.n	8010d34 <__mcmp+0x18>
 8010d4c:	e7fa      	b.n	8010d44 <__mcmp+0x28>
 8010d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8010d52:	e7f7      	b.n	8010d44 <__mcmp+0x28>

08010d54 <__mdiff>:
 8010d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d58:	460c      	mov	r4, r1
 8010d5a:	4606      	mov	r6, r0
 8010d5c:	4611      	mov	r1, r2
 8010d5e:	4620      	mov	r0, r4
 8010d60:	4617      	mov	r7, r2
 8010d62:	f7ff ffdb 	bl	8010d1c <__mcmp>
 8010d66:	1e05      	subs	r5, r0, #0
 8010d68:	d110      	bne.n	8010d8c <__mdiff+0x38>
 8010d6a:	4629      	mov	r1, r5
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	f7ff fd0d 	bl	801078c <_Balloc>
 8010d72:	b930      	cbnz	r0, 8010d82 <__mdiff+0x2e>
 8010d74:	4b39      	ldr	r3, [pc, #228]	; (8010e5c <__mdiff+0x108>)
 8010d76:	4602      	mov	r2, r0
 8010d78:	f240 2132 	movw	r1, #562	; 0x232
 8010d7c:	4838      	ldr	r0, [pc, #224]	; (8010e60 <__mdiff+0x10c>)
 8010d7e:	f7fe fabf 	bl	800f300 <__assert_func>
 8010d82:	2301      	movs	r3, #1
 8010d84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010d88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d8c:	bfa4      	itt	ge
 8010d8e:	463b      	movge	r3, r7
 8010d90:	4627      	movge	r7, r4
 8010d92:	4630      	mov	r0, r6
 8010d94:	6879      	ldr	r1, [r7, #4]
 8010d96:	bfa6      	itte	ge
 8010d98:	461c      	movge	r4, r3
 8010d9a:	2500      	movge	r5, #0
 8010d9c:	2501      	movlt	r5, #1
 8010d9e:	f7ff fcf5 	bl	801078c <_Balloc>
 8010da2:	b920      	cbnz	r0, 8010dae <__mdiff+0x5a>
 8010da4:	4b2d      	ldr	r3, [pc, #180]	; (8010e5c <__mdiff+0x108>)
 8010da6:	4602      	mov	r2, r0
 8010da8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010dac:	e7e6      	b.n	8010d7c <__mdiff+0x28>
 8010dae:	693e      	ldr	r6, [r7, #16]
 8010db0:	60c5      	str	r5, [r0, #12]
 8010db2:	6925      	ldr	r5, [r4, #16]
 8010db4:	f107 0114 	add.w	r1, r7, #20
 8010db8:	f104 0914 	add.w	r9, r4, #20
 8010dbc:	f100 0e14 	add.w	lr, r0, #20
 8010dc0:	f107 0210 	add.w	r2, r7, #16
 8010dc4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010dc8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010dcc:	46f2      	mov	sl, lr
 8010dce:	2700      	movs	r7, #0
 8010dd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8010dd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010dd8:	fa1f f883 	uxth.w	r8, r3
 8010ddc:	fa17 f78b 	uxtah	r7, r7, fp
 8010de0:	0c1b      	lsrs	r3, r3, #16
 8010de2:	eba7 0808 	sub.w	r8, r7, r8
 8010de6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010dea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010dee:	fa1f f888 	uxth.w	r8, r8
 8010df2:	141f      	asrs	r7, r3, #16
 8010df4:	454d      	cmp	r5, r9
 8010df6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010dfa:	f84a 3b04 	str.w	r3, [sl], #4
 8010dfe:	d8e7      	bhi.n	8010dd0 <__mdiff+0x7c>
 8010e00:	1b2b      	subs	r3, r5, r4
 8010e02:	3b15      	subs	r3, #21
 8010e04:	f023 0303 	bic.w	r3, r3, #3
 8010e08:	3304      	adds	r3, #4
 8010e0a:	3415      	adds	r4, #21
 8010e0c:	42a5      	cmp	r5, r4
 8010e0e:	bf38      	it	cc
 8010e10:	2304      	movcc	r3, #4
 8010e12:	4419      	add	r1, r3
 8010e14:	4473      	add	r3, lr
 8010e16:	469e      	mov	lr, r3
 8010e18:	460d      	mov	r5, r1
 8010e1a:	4565      	cmp	r5, ip
 8010e1c:	d30e      	bcc.n	8010e3c <__mdiff+0xe8>
 8010e1e:	f10c 0203 	add.w	r2, ip, #3
 8010e22:	1a52      	subs	r2, r2, r1
 8010e24:	f022 0203 	bic.w	r2, r2, #3
 8010e28:	3903      	subs	r1, #3
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	bf38      	it	cc
 8010e2e:	2200      	movcc	r2, #0
 8010e30:	441a      	add	r2, r3
 8010e32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010e36:	b17b      	cbz	r3, 8010e58 <__mdiff+0x104>
 8010e38:	6106      	str	r6, [r0, #16]
 8010e3a:	e7a5      	b.n	8010d88 <__mdiff+0x34>
 8010e3c:	f855 8b04 	ldr.w	r8, [r5], #4
 8010e40:	fa17 f488 	uxtah	r4, r7, r8
 8010e44:	1422      	asrs	r2, r4, #16
 8010e46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010e4a:	b2a4      	uxth	r4, r4
 8010e4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010e50:	f84e 4b04 	str.w	r4, [lr], #4
 8010e54:	1417      	asrs	r7, r2, #16
 8010e56:	e7e0      	b.n	8010e1a <__mdiff+0xc6>
 8010e58:	3e01      	subs	r6, #1
 8010e5a:	e7ea      	b.n	8010e32 <__mdiff+0xde>
 8010e5c:	08025af1 	.word	0x08025af1
 8010e60:	08025b80 	.word	0x08025b80

08010e64 <__ulp>:
 8010e64:	b082      	sub	sp, #8
 8010e66:	ed8d 0b00 	vstr	d0, [sp]
 8010e6a:	9b01      	ldr	r3, [sp, #4]
 8010e6c:	4912      	ldr	r1, [pc, #72]	; (8010eb8 <__ulp+0x54>)
 8010e6e:	4019      	ands	r1, r3
 8010e70:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010e74:	2900      	cmp	r1, #0
 8010e76:	dd05      	ble.n	8010e84 <__ulp+0x20>
 8010e78:	2200      	movs	r2, #0
 8010e7a:	460b      	mov	r3, r1
 8010e7c:	ec43 2b10 	vmov	d0, r2, r3
 8010e80:	b002      	add	sp, #8
 8010e82:	4770      	bx	lr
 8010e84:	4249      	negs	r1, r1
 8010e86:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010e8a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010e8e:	f04f 0200 	mov.w	r2, #0
 8010e92:	f04f 0300 	mov.w	r3, #0
 8010e96:	da04      	bge.n	8010ea2 <__ulp+0x3e>
 8010e98:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010e9c:	fa41 f300 	asr.w	r3, r1, r0
 8010ea0:	e7ec      	b.n	8010e7c <__ulp+0x18>
 8010ea2:	f1a0 0114 	sub.w	r1, r0, #20
 8010ea6:	291e      	cmp	r1, #30
 8010ea8:	bfda      	itte	le
 8010eaa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010eae:	fa20 f101 	lsrle.w	r1, r0, r1
 8010eb2:	2101      	movgt	r1, #1
 8010eb4:	460a      	mov	r2, r1
 8010eb6:	e7e1      	b.n	8010e7c <__ulp+0x18>
 8010eb8:	7ff00000 	.word	0x7ff00000

08010ebc <__b2d>:
 8010ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ebe:	6905      	ldr	r5, [r0, #16]
 8010ec0:	f100 0714 	add.w	r7, r0, #20
 8010ec4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010ec8:	1f2e      	subs	r6, r5, #4
 8010eca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010ece:	4620      	mov	r0, r4
 8010ed0:	f7ff fd52 	bl	8010978 <__hi0bits>
 8010ed4:	f1c0 0320 	rsb	r3, r0, #32
 8010ed8:	280a      	cmp	r0, #10
 8010eda:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010f58 <__b2d+0x9c>
 8010ede:	600b      	str	r3, [r1, #0]
 8010ee0:	dc14      	bgt.n	8010f0c <__b2d+0x50>
 8010ee2:	f1c0 0e0b 	rsb	lr, r0, #11
 8010ee6:	fa24 f10e 	lsr.w	r1, r4, lr
 8010eea:	42b7      	cmp	r7, r6
 8010eec:	ea41 030c 	orr.w	r3, r1, ip
 8010ef0:	bf34      	ite	cc
 8010ef2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010ef6:	2100      	movcs	r1, #0
 8010ef8:	3015      	adds	r0, #21
 8010efa:	fa04 f000 	lsl.w	r0, r4, r0
 8010efe:	fa21 f10e 	lsr.w	r1, r1, lr
 8010f02:	ea40 0201 	orr.w	r2, r0, r1
 8010f06:	ec43 2b10 	vmov	d0, r2, r3
 8010f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f0c:	42b7      	cmp	r7, r6
 8010f0e:	bf3a      	itte	cc
 8010f10:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010f14:	f1a5 0608 	subcc.w	r6, r5, #8
 8010f18:	2100      	movcs	r1, #0
 8010f1a:	380b      	subs	r0, #11
 8010f1c:	d017      	beq.n	8010f4e <__b2d+0x92>
 8010f1e:	f1c0 0c20 	rsb	ip, r0, #32
 8010f22:	fa04 f500 	lsl.w	r5, r4, r0
 8010f26:	42be      	cmp	r6, r7
 8010f28:	fa21 f40c 	lsr.w	r4, r1, ip
 8010f2c:	ea45 0504 	orr.w	r5, r5, r4
 8010f30:	bf8c      	ite	hi
 8010f32:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010f36:	2400      	movls	r4, #0
 8010f38:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010f3c:	fa01 f000 	lsl.w	r0, r1, r0
 8010f40:	fa24 f40c 	lsr.w	r4, r4, ip
 8010f44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010f48:	ea40 0204 	orr.w	r2, r0, r4
 8010f4c:	e7db      	b.n	8010f06 <__b2d+0x4a>
 8010f4e:	ea44 030c 	orr.w	r3, r4, ip
 8010f52:	460a      	mov	r2, r1
 8010f54:	e7d7      	b.n	8010f06 <__b2d+0x4a>
 8010f56:	bf00      	nop
 8010f58:	3ff00000 	.word	0x3ff00000

08010f5c <__d2b>:
 8010f5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010f60:	4689      	mov	r9, r1
 8010f62:	2101      	movs	r1, #1
 8010f64:	ec57 6b10 	vmov	r6, r7, d0
 8010f68:	4690      	mov	r8, r2
 8010f6a:	f7ff fc0f 	bl	801078c <_Balloc>
 8010f6e:	4604      	mov	r4, r0
 8010f70:	b930      	cbnz	r0, 8010f80 <__d2b+0x24>
 8010f72:	4602      	mov	r2, r0
 8010f74:	4b25      	ldr	r3, [pc, #148]	; (801100c <__d2b+0xb0>)
 8010f76:	4826      	ldr	r0, [pc, #152]	; (8011010 <__d2b+0xb4>)
 8010f78:	f240 310a 	movw	r1, #778	; 0x30a
 8010f7c:	f7fe f9c0 	bl	800f300 <__assert_func>
 8010f80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010f84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010f88:	bb35      	cbnz	r5, 8010fd8 <__d2b+0x7c>
 8010f8a:	2e00      	cmp	r6, #0
 8010f8c:	9301      	str	r3, [sp, #4]
 8010f8e:	d028      	beq.n	8010fe2 <__d2b+0x86>
 8010f90:	4668      	mov	r0, sp
 8010f92:	9600      	str	r6, [sp, #0]
 8010f94:	f7ff fd10 	bl	80109b8 <__lo0bits>
 8010f98:	9900      	ldr	r1, [sp, #0]
 8010f9a:	b300      	cbz	r0, 8010fde <__d2b+0x82>
 8010f9c:	9a01      	ldr	r2, [sp, #4]
 8010f9e:	f1c0 0320 	rsb	r3, r0, #32
 8010fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8010fa6:	430b      	orrs	r3, r1
 8010fa8:	40c2      	lsrs	r2, r0
 8010faa:	6163      	str	r3, [r4, #20]
 8010fac:	9201      	str	r2, [sp, #4]
 8010fae:	9b01      	ldr	r3, [sp, #4]
 8010fb0:	61a3      	str	r3, [r4, #24]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	bf14      	ite	ne
 8010fb6:	2202      	movne	r2, #2
 8010fb8:	2201      	moveq	r2, #1
 8010fba:	6122      	str	r2, [r4, #16]
 8010fbc:	b1d5      	cbz	r5, 8010ff4 <__d2b+0x98>
 8010fbe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010fc2:	4405      	add	r5, r0
 8010fc4:	f8c9 5000 	str.w	r5, [r9]
 8010fc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010fcc:	f8c8 0000 	str.w	r0, [r8]
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	b003      	add	sp, #12
 8010fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010fdc:	e7d5      	b.n	8010f8a <__d2b+0x2e>
 8010fde:	6161      	str	r1, [r4, #20]
 8010fe0:	e7e5      	b.n	8010fae <__d2b+0x52>
 8010fe2:	a801      	add	r0, sp, #4
 8010fe4:	f7ff fce8 	bl	80109b8 <__lo0bits>
 8010fe8:	9b01      	ldr	r3, [sp, #4]
 8010fea:	6163      	str	r3, [r4, #20]
 8010fec:	2201      	movs	r2, #1
 8010fee:	6122      	str	r2, [r4, #16]
 8010ff0:	3020      	adds	r0, #32
 8010ff2:	e7e3      	b.n	8010fbc <__d2b+0x60>
 8010ff4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010ff8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010ffc:	f8c9 0000 	str.w	r0, [r9]
 8011000:	6918      	ldr	r0, [r3, #16]
 8011002:	f7ff fcb9 	bl	8010978 <__hi0bits>
 8011006:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801100a:	e7df      	b.n	8010fcc <__d2b+0x70>
 801100c:	08025af1 	.word	0x08025af1
 8011010:	08025b80 	.word	0x08025b80

08011014 <__ratio>:
 8011014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011018:	4688      	mov	r8, r1
 801101a:	4669      	mov	r1, sp
 801101c:	4681      	mov	r9, r0
 801101e:	f7ff ff4d 	bl	8010ebc <__b2d>
 8011022:	a901      	add	r1, sp, #4
 8011024:	4640      	mov	r0, r8
 8011026:	ec55 4b10 	vmov	r4, r5, d0
 801102a:	f7ff ff47 	bl	8010ebc <__b2d>
 801102e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011032:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011036:	eba3 0c02 	sub.w	ip, r3, r2
 801103a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801103e:	1a9b      	subs	r3, r3, r2
 8011040:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011044:	ec51 0b10 	vmov	r0, r1, d0
 8011048:	2b00      	cmp	r3, #0
 801104a:	bfd6      	itet	le
 801104c:	460a      	movle	r2, r1
 801104e:	462a      	movgt	r2, r5
 8011050:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011054:	468b      	mov	fp, r1
 8011056:	462f      	mov	r7, r5
 8011058:	bfd4      	ite	le
 801105a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801105e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011062:	4620      	mov	r0, r4
 8011064:	ee10 2a10 	vmov	r2, s0
 8011068:	465b      	mov	r3, fp
 801106a:	4639      	mov	r1, r7
 801106c:	f7ef fc06 	bl	800087c <__aeabi_ddiv>
 8011070:	ec41 0b10 	vmov	d0, r0, r1
 8011074:	b003      	add	sp, #12
 8011076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801107a <__copybits>:
 801107a:	3901      	subs	r1, #1
 801107c:	b570      	push	{r4, r5, r6, lr}
 801107e:	1149      	asrs	r1, r1, #5
 8011080:	6914      	ldr	r4, [r2, #16]
 8011082:	3101      	adds	r1, #1
 8011084:	f102 0314 	add.w	r3, r2, #20
 8011088:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801108c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011090:	1f05      	subs	r5, r0, #4
 8011092:	42a3      	cmp	r3, r4
 8011094:	d30c      	bcc.n	80110b0 <__copybits+0x36>
 8011096:	1aa3      	subs	r3, r4, r2
 8011098:	3b11      	subs	r3, #17
 801109a:	f023 0303 	bic.w	r3, r3, #3
 801109e:	3211      	adds	r2, #17
 80110a0:	42a2      	cmp	r2, r4
 80110a2:	bf88      	it	hi
 80110a4:	2300      	movhi	r3, #0
 80110a6:	4418      	add	r0, r3
 80110a8:	2300      	movs	r3, #0
 80110aa:	4288      	cmp	r0, r1
 80110ac:	d305      	bcc.n	80110ba <__copybits+0x40>
 80110ae:	bd70      	pop	{r4, r5, r6, pc}
 80110b0:	f853 6b04 	ldr.w	r6, [r3], #4
 80110b4:	f845 6f04 	str.w	r6, [r5, #4]!
 80110b8:	e7eb      	b.n	8011092 <__copybits+0x18>
 80110ba:	f840 3b04 	str.w	r3, [r0], #4
 80110be:	e7f4      	b.n	80110aa <__copybits+0x30>

080110c0 <__any_on>:
 80110c0:	f100 0214 	add.w	r2, r0, #20
 80110c4:	6900      	ldr	r0, [r0, #16]
 80110c6:	114b      	asrs	r3, r1, #5
 80110c8:	4298      	cmp	r0, r3
 80110ca:	b510      	push	{r4, lr}
 80110cc:	db11      	blt.n	80110f2 <__any_on+0x32>
 80110ce:	dd0a      	ble.n	80110e6 <__any_on+0x26>
 80110d0:	f011 011f 	ands.w	r1, r1, #31
 80110d4:	d007      	beq.n	80110e6 <__any_on+0x26>
 80110d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80110da:	fa24 f001 	lsr.w	r0, r4, r1
 80110de:	fa00 f101 	lsl.w	r1, r0, r1
 80110e2:	428c      	cmp	r4, r1
 80110e4:	d10b      	bne.n	80110fe <__any_on+0x3e>
 80110e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80110ea:	4293      	cmp	r3, r2
 80110ec:	d803      	bhi.n	80110f6 <__any_on+0x36>
 80110ee:	2000      	movs	r0, #0
 80110f0:	bd10      	pop	{r4, pc}
 80110f2:	4603      	mov	r3, r0
 80110f4:	e7f7      	b.n	80110e6 <__any_on+0x26>
 80110f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80110fa:	2900      	cmp	r1, #0
 80110fc:	d0f5      	beq.n	80110ea <__any_on+0x2a>
 80110fe:	2001      	movs	r0, #1
 8011100:	e7f6      	b.n	80110f0 <__any_on+0x30>

08011102 <_calloc_r>:
 8011102:	b513      	push	{r0, r1, r4, lr}
 8011104:	434a      	muls	r2, r1
 8011106:	4611      	mov	r1, r2
 8011108:	9201      	str	r2, [sp, #4]
 801110a:	f000 f859 	bl	80111c0 <_malloc_r>
 801110e:	4604      	mov	r4, r0
 8011110:	b118      	cbz	r0, 801111a <_calloc_r+0x18>
 8011112:	9a01      	ldr	r2, [sp, #4]
 8011114:	2100      	movs	r1, #0
 8011116:	f7fc fb27 	bl	800d768 <memset>
 801111a:	4620      	mov	r0, r4
 801111c:	b002      	add	sp, #8
 801111e:	bd10      	pop	{r4, pc}

08011120 <_free_r>:
 8011120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011122:	2900      	cmp	r1, #0
 8011124:	d048      	beq.n	80111b8 <_free_r+0x98>
 8011126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801112a:	9001      	str	r0, [sp, #4]
 801112c:	2b00      	cmp	r3, #0
 801112e:	f1a1 0404 	sub.w	r4, r1, #4
 8011132:	bfb8      	it	lt
 8011134:	18e4      	addlt	r4, r4, r3
 8011136:	f000 fe8b 	bl	8011e50 <__malloc_lock>
 801113a:	4a20      	ldr	r2, [pc, #128]	; (80111bc <_free_r+0x9c>)
 801113c:	9801      	ldr	r0, [sp, #4]
 801113e:	6813      	ldr	r3, [r2, #0]
 8011140:	4615      	mov	r5, r2
 8011142:	b933      	cbnz	r3, 8011152 <_free_r+0x32>
 8011144:	6063      	str	r3, [r4, #4]
 8011146:	6014      	str	r4, [r2, #0]
 8011148:	b003      	add	sp, #12
 801114a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801114e:	f000 be85 	b.w	8011e5c <__malloc_unlock>
 8011152:	42a3      	cmp	r3, r4
 8011154:	d90b      	bls.n	801116e <_free_r+0x4e>
 8011156:	6821      	ldr	r1, [r4, #0]
 8011158:	1862      	adds	r2, r4, r1
 801115a:	4293      	cmp	r3, r2
 801115c:	bf04      	itt	eq
 801115e:	681a      	ldreq	r2, [r3, #0]
 8011160:	685b      	ldreq	r3, [r3, #4]
 8011162:	6063      	str	r3, [r4, #4]
 8011164:	bf04      	itt	eq
 8011166:	1852      	addeq	r2, r2, r1
 8011168:	6022      	streq	r2, [r4, #0]
 801116a:	602c      	str	r4, [r5, #0]
 801116c:	e7ec      	b.n	8011148 <_free_r+0x28>
 801116e:	461a      	mov	r2, r3
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	b10b      	cbz	r3, 8011178 <_free_r+0x58>
 8011174:	42a3      	cmp	r3, r4
 8011176:	d9fa      	bls.n	801116e <_free_r+0x4e>
 8011178:	6811      	ldr	r1, [r2, #0]
 801117a:	1855      	adds	r5, r2, r1
 801117c:	42a5      	cmp	r5, r4
 801117e:	d10b      	bne.n	8011198 <_free_r+0x78>
 8011180:	6824      	ldr	r4, [r4, #0]
 8011182:	4421      	add	r1, r4
 8011184:	1854      	adds	r4, r2, r1
 8011186:	42a3      	cmp	r3, r4
 8011188:	6011      	str	r1, [r2, #0]
 801118a:	d1dd      	bne.n	8011148 <_free_r+0x28>
 801118c:	681c      	ldr	r4, [r3, #0]
 801118e:	685b      	ldr	r3, [r3, #4]
 8011190:	6053      	str	r3, [r2, #4]
 8011192:	4421      	add	r1, r4
 8011194:	6011      	str	r1, [r2, #0]
 8011196:	e7d7      	b.n	8011148 <_free_r+0x28>
 8011198:	d902      	bls.n	80111a0 <_free_r+0x80>
 801119a:	230c      	movs	r3, #12
 801119c:	6003      	str	r3, [r0, #0]
 801119e:	e7d3      	b.n	8011148 <_free_r+0x28>
 80111a0:	6825      	ldr	r5, [r4, #0]
 80111a2:	1961      	adds	r1, r4, r5
 80111a4:	428b      	cmp	r3, r1
 80111a6:	bf04      	itt	eq
 80111a8:	6819      	ldreq	r1, [r3, #0]
 80111aa:	685b      	ldreq	r3, [r3, #4]
 80111ac:	6063      	str	r3, [r4, #4]
 80111ae:	bf04      	itt	eq
 80111b0:	1949      	addeq	r1, r1, r5
 80111b2:	6021      	streq	r1, [r4, #0]
 80111b4:	6054      	str	r4, [r2, #4]
 80111b6:	e7c7      	b.n	8011148 <_free_r+0x28>
 80111b8:	b003      	add	sp, #12
 80111ba:	bd30      	pop	{r4, r5, pc}
 80111bc:	20000280 	.word	0x20000280

080111c0 <_malloc_r>:
 80111c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111c2:	1ccd      	adds	r5, r1, #3
 80111c4:	f025 0503 	bic.w	r5, r5, #3
 80111c8:	3508      	adds	r5, #8
 80111ca:	2d0c      	cmp	r5, #12
 80111cc:	bf38      	it	cc
 80111ce:	250c      	movcc	r5, #12
 80111d0:	2d00      	cmp	r5, #0
 80111d2:	4606      	mov	r6, r0
 80111d4:	db01      	blt.n	80111da <_malloc_r+0x1a>
 80111d6:	42a9      	cmp	r1, r5
 80111d8:	d903      	bls.n	80111e2 <_malloc_r+0x22>
 80111da:	230c      	movs	r3, #12
 80111dc:	6033      	str	r3, [r6, #0]
 80111de:	2000      	movs	r0, #0
 80111e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111e2:	f000 fe35 	bl	8011e50 <__malloc_lock>
 80111e6:	4921      	ldr	r1, [pc, #132]	; (801126c <_malloc_r+0xac>)
 80111e8:	680a      	ldr	r2, [r1, #0]
 80111ea:	4614      	mov	r4, r2
 80111ec:	b99c      	cbnz	r4, 8011216 <_malloc_r+0x56>
 80111ee:	4f20      	ldr	r7, [pc, #128]	; (8011270 <_malloc_r+0xb0>)
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	b923      	cbnz	r3, 80111fe <_malloc_r+0x3e>
 80111f4:	4621      	mov	r1, r4
 80111f6:	4630      	mov	r0, r6
 80111f8:	f000 fafa 	bl	80117f0 <_sbrk_r>
 80111fc:	6038      	str	r0, [r7, #0]
 80111fe:	4629      	mov	r1, r5
 8011200:	4630      	mov	r0, r6
 8011202:	f000 faf5 	bl	80117f0 <_sbrk_r>
 8011206:	1c43      	adds	r3, r0, #1
 8011208:	d123      	bne.n	8011252 <_malloc_r+0x92>
 801120a:	230c      	movs	r3, #12
 801120c:	6033      	str	r3, [r6, #0]
 801120e:	4630      	mov	r0, r6
 8011210:	f000 fe24 	bl	8011e5c <__malloc_unlock>
 8011214:	e7e3      	b.n	80111de <_malloc_r+0x1e>
 8011216:	6823      	ldr	r3, [r4, #0]
 8011218:	1b5b      	subs	r3, r3, r5
 801121a:	d417      	bmi.n	801124c <_malloc_r+0x8c>
 801121c:	2b0b      	cmp	r3, #11
 801121e:	d903      	bls.n	8011228 <_malloc_r+0x68>
 8011220:	6023      	str	r3, [r4, #0]
 8011222:	441c      	add	r4, r3
 8011224:	6025      	str	r5, [r4, #0]
 8011226:	e004      	b.n	8011232 <_malloc_r+0x72>
 8011228:	6863      	ldr	r3, [r4, #4]
 801122a:	42a2      	cmp	r2, r4
 801122c:	bf0c      	ite	eq
 801122e:	600b      	streq	r3, [r1, #0]
 8011230:	6053      	strne	r3, [r2, #4]
 8011232:	4630      	mov	r0, r6
 8011234:	f000 fe12 	bl	8011e5c <__malloc_unlock>
 8011238:	f104 000b 	add.w	r0, r4, #11
 801123c:	1d23      	adds	r3, r4, #4
 801123e:	f020 0007 	bic.w	r0, r0, #7
 8011242:	1ac2      	subs	r2, r0, r3
 8011244:	d0cc      	beq.n	80111e0 <_malloc_r+0x20>
 8011246:	1a1b      	subs	r3, r3, r0
 8011248:	50a3      	str	r3, [r4, r2]
 801124a:	e7c9      	b.n	80111e0 <_malloc_r+0x20>
 801124c:	4622      	mov	r2, r4
 801124e:	6864      	ldr	r4, [r4, #4]
 8011250:	e7cc      	b.n	80111ec <_malloc_r+0x2c>
 8011252:	1cc4      	adds	r4, r0, #3
 8011254:	f024 0403 	bic.w	r4, r4, #3
 8011258:	42a0      	cmp	r0, r4
 801125a:	d0e3      	beq.n	8011224 <_malloc_r+0x64>
 801125c:	1a21      	subs	r1, r4, r0
 801125e:	4630      	mov	r0, r6
 8011260:	f000 fac6 	bl	80117f0 <_sbrk_r>
 8011264:	3001      	adds	r0, #1
 8011266:	d1dd      	bne.n	8011224 <_malloc_r+0x64>
 8011268:	e7cf      	b.n	801120a <_malloc_r+0x4a>
 801126a:	bf00      	nop
 801126c:	20000280 	.word	0x20000280
 8011270:	20000284 	.word	0x20000284

08011274 <__ssputs_r>:
 8011274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011278:	688e      	ldr	r6, [r1, #8]
 801127a:	429e      	cmp	r6, r3
 801127c:	4682      	mov	sl, r0
 801127e:	460c      	mov	r4, r1
 8011280:	4690      	mov	r8, r2
 8011282:	461f      	mov	r7, r3
 8011284:	d838      	bhi.n	80112f8 <__ssputs_r+0x84>
 8011286:	898a      	ldrh	r2, [r1, #12]
 8011288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801128c:	d032      	beq.n	80112f4 <__ssputs_r+0x80>
 801128e:	6825      	ldr	r5, [r4, #0]
 8011290:	6909      	ldr	r1, [r1, #16]
 8011292:	eba5 0901 	sub.w	r9, r5, r1
 8011296:	6965      	ldr	r5, [r4, #20]
 8011298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801129c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80112a0:	3301      	adds	r3, #1
 80112a2:	444b      	add	r3, r9
 80112a4:	106d      	asrs	r5, r5, #1
 80112a6:	429d      	cmp	r5, r3
 80112a8:	bf38      	it	cc
 80112aa:	461d      	movcc	r5, r3
 80112ac:	0553      	lsls	r3, r2, #21
 80112ae:	d531      	bpl.n	8011314 <__ssputs_r+0xa0>
 80112b0:	4629      	mov	r1, r5
 80112b2:	f7ff ff85 	bl	80111c0 <_malloc_r>
 80112b6:	4606      	mov	r6, r0
 80112b8:	b950      	cbnz	r0, 80112d0 <__ssputs_r+0x5c>
 80112ba:	230c      	movs	r3, #12
 80112bc:	f8ca 3000 	str.w	r3, [sl]
 80112c0:	89a3      	ldrh	r3, [r4, #12]
 80112c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112c6:	81a3      	strh	r3, [r4, #12]
 80112c8:	f04f 30ff 	mov.w	r0, #4294967295
 80112cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112d0:	6921      	ldr	r1, [r4, #16]
 80112d2:	464a      	mov	r2, r9
 80112d4:	f7ff fa4c 	bl	8010770 <memcpy>
 80112d8:	89a3      	ldrh	r3, [r4, #12]
 80112da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80112de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112e2:	81a3      	strh	r3, [r4, #12]
 80112e4:	6126      	str	r6, [r4, #16]
 80112e6:	6165      	str	r5, [r4, #20]
 80112e8:	444e      	add	r6, r9
 80112ea:	eba5 0509 	sub.w	r5, r5, r9
 80112ee:	6026      	str	r6, [r4, #0]
 80112f0:	60a5      	str	r5, [r4, #8]
 80112f2:	463e      	mov	r6, r7
 80112f4:	42be      	cmp	r6, r7
 80112f6:	d900      	bls.n	80112fa <__ssputs_r+0x86>
 80112f8:	463e      	mov	r6, r7
 80112fa:	4632      	mov	r2, r6
 80112fc:	6820      	ldr	r0, [r4, #0]
 80112fe:	4641      	mov	r1, r8
 8011300:	f000 fd8c 	bl	8011e1c <memmove>
 8011304:	68a3      	ldr	r3, [r4, #8]
 8011306:	6822      	ldr	r2, [r4, #0]
 8011308:	1b9b      	subs	r3, r3, r6
 801130a:	4432      	add	r2, r6
 801130c:	60a3      	str	r3, [r4, #8]
 801130e:	6022      	str	r2, [r4, #0]
 8011310:	2000      	movs	r0, #0
 8011312:	e7db      	b.n	80112cc <__ssputs_r+0x58>
 8011314:	462a      	mov	r2, r5
 8011316:	f000 fda7 	bl	8011e68 <_realloc_r>
 801131a:	4606      	mov	r6, r0
 801131c:	2800      	cmp	r0, #0
 801131e:	d1e1      	bne.n	80112e4 <__ssputs_r+0x70>
 8011320:	6921      	ldr	r1, [r4, #16]
 8011322:	4650      	mov	r0, sl
 8011324:	f7ff fefc 	bl	8011120 <_free_r>
 8011328:	e7c7      	b.n	80112ba <__ssputs_r+0x46>
	...

0801132c <_svfiprintf_r>:
 801132c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011330:	4698      	mov	r8, r3
 8011332:	898b      	ldrh	r3, [r1, #12]
 8011334:	061b      	lsls	r3, r3, #24
 8011336:	b09d      	sub	sp, #116	; 0x74
 8011338:	4607      	mov	r7, r0
 801133a:	460d      	mov	r5, r1
 801133c:	4614      	mov	r4, r2
 801133e:	d50e      	bpl.n	801135e <_svfiprintf_r+0x32>
 8011340:	690b      	ldr	r3, [r1, #16]
 8011342:	b963      	cbnz	r3, 801135e <_svfiprintf_r+0x32>
 8011344:	2140      	movs	r1, #64	; 0x40
 8011346:	f7ff ff3b 	bl	80111c0 <_malloc_r>
 801134a:	6028      	str	r0, [r5, #0]
 801134c:	6128      	str	r0, [r5, #16]
 801134e:	b920      	cbnz	r0, 801135a <_svfiprintf_r+0x2e>
 8011350:	230c      	movs	r3, #12
 8011352:	603b      	str	r3, [r7, #0]
 8011354:	f04f 30ff 	mov.w	r0, #4294967295
 8011358:	e0d1      	b.n	80114fe <_svfiprintf_r+0x1d2>
 801135a:	2340      	movs	r3, #64	; 0x40
 801135c:	616b      	str	r3, [r5, #20]
 801135e:	2300      	movs	r3, #0
 8011360:	9309      	str	r3, [sp, #36]	; 0x24
 8011362:	2320      	movs	r3, #32
 8011364:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011368:	f8cd 800c 	str.w	r8, [sp, #12]
 801136c:	2330      	movs	r3, #48	; 0x30
 801136e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011518 <_svfiprintf_r+0x1ec>
 8011372:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011376:	f04f 0901 	mov.w	r9, #1
 801137a:	4623      	mov	r3, r4
 801137c:	469a      	mov	sl, r3
 801137e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011382:	b10a      	cbz	r2, 8011388 <_svfiprintf_r+0x5c>
 8011384:	2a25      	cmp	r2, #37	; 0x25
 8011386:	d1f9      	bne.n	801137c <_svfiprintf_r+0x50>
 8011388:	ebba 0b04 	subs.w	fp, sl, r4
 801138c:	d00b      	beq.n	80113a6 <_svfiprintf_r+0x7a>
 801138e:	465b      	mov	r3, fp
 8011390:	4622      	mov	r2, r4
 8011392:	4629      	mov	r1, r5
 8011394:	4638      	mov	r0, r7
 8011396:	f7ff ff6d 	bl	8011274 <__ssputs_r>
 801139a:	3001      	adds	r0, #1
 801139c:	f000 80aa 	beq.w	80114f4 <_svfiprintf_r+0x1c8>
 80113a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113a2:	445a      	add	r2, fp
 80113a4:	9209      	str	r2, [sp, #36]	; 0x24
 80113a6:	f89a 3000 	ldrb.w	r3, [sl]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	f000 80a2 	beq.w	80114f4 <_svfiprintf_r+0x1c8>
 80113b0:	2300      	movs	r3, #0
 80113b2:	f04f 32ff 	mov.w	r2, #4294967295
 80113b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113ba:	f10a 0a01 	add.w	sl, sl, #1
 80113be:	9304      	str	r3, [sp, #16]
 80113c0:	9307      	str	r3, [sp, #28]
 80113c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113c6:	931a      	str	r3, [sp, #104]	; 0x68
 80113c8:	4654      	mov	r4, sl
 80113ca:	2205      	movs	r2, #5
 80113cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113d0:	4851      	ldr	r0, [pc, #324]	; (8011518 <_svfiprintf_r+0x1ec>)
 80113d2:	f7ee ff1d 	bl	8000210 <memchr>
 80113d6:	9a04      	ldr	r2, [sp, #16]
 80113d8:	b9d8      	cbnz	r0, 8011412 <_svfiprintf_r+0xe6>
 80113da:	06d0      	lsls	r0, r2, #27
 80113dc:	bf44      	itt	mi
 80113de:	2320      	movmi	r3, #32
 80113e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113e4:	0711      	lsls	r1, r2, #28
 80113e6:	bf44      	itt	mi
 80113e8:	232b      	movmi	r3, #43	; 0x2b
 80113ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113ee:	f89a 3000 	ldrb.w	r3, [sl]
 80113f2:	2b2a      	cmp	r3, #42	; 0x2a
 80113f4:	d015      	beq.n	8011422 <_svfiprintf_r+0xf6>
 80113f6:	9a07      	ldr	r2, [sp, #28]
 80113f8:	4654      	mov	r4, sl
 80113fa:	2000      	movs	r0, #0
 80113fc:	f04f 0c0a 	mov.w	ip, #10
 8011400:	4621      	mov	r1, r4
 8011402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011406:	3b30      	subs	r3, #48	; 0x30
 8011408:	2b09      	cmp	r3, #9
 801140a:	d94e      	bls.n	80114aa <_svfiprintf_r+0x17e>
 801140c:	b1b0      	cbz	r0, 801143c <_svfiprintf_r+0x110>
 801140e:	9207      	str	r2, [sp, #28]
 8011410:	e014      	b.n	801143c <_svfiprintf_r+0x110>
 8011412:	eba0 0308 	sub.w	r3, r0, r8
 8011416:	fa09 f303 	lsl.w	r3, r9, r3
 801141a:	4313      	orrs	r3, r2
 801141c:	9304      	str	r3, [sp, #16]
 801141e:	46a2      	mov	sl, r4
 8011420:	e7d2      	b.n	80113c8 <_svfiprintf_r+0x9c>
 8011422:	9b03      	ldr	r3, [sp, #12]
 8011424:	1d19      	adds	r1, r3, #4
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	9103      	str	r1, [sp, #12]
 801142a:	2b00      	cmp	r3, #0
 801142c:	bfbb      	ittet	lt
 801142e:	425b      	neglt	r3, r3
 8011430:	f042 0202 	orrlt.w	r2, r2, #2
 8011434:	9307      	strge	r3, [sp, #28]
 8011436:	9307      	strlt	r3, [sp, #28]
 8011438:	bfb8      	it	lt
 801143a:	9204      	strlt	r2, [sp, #16]
 801143c:	7823      	ldrb	r3, [r4, #0]
 801143e:	2b2e      	cmp	r3, #46	; 0x2e
 8011440:	d10c      	bne.n	801145c <_svfiprintf_r+0x130>
 8011442:	7863      	ldrb	r3, [r4, #1]
 8011444:	2b2a      	cmp	r3, #42	; 0x2a
 8011446:	d135      	bne.n	80114b4 <_svfiprintf_r+0x188>
 8011448:	9b03      	ldr	r3, [sp, #12]
 801144a:	1d1a      	adds	r2, r3, #4
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	9203      	str	r2, [sp, #12]
 8011450:	2b00      	cmp	r3, #0
 8011452:	bfb8      	it	lt
 8011454:	f04f 33ff 	movlt.w	r3, #4294967295
 8011458:	3402      	adds	r4, #2
 801145a:	9305      	str	r3, [sp, #20]
 801145c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011528 <_svfiprintf_r+0x1fc>
 8011460:	7821      	ldrb	r1, [r4, #0]
 8011462:	2203      	movs	r2, #3
 8011464:	4650      	mov	r0, sl
 8011466:	f7ee fed3 	bl	8000210 <memchr>
 801146a:	b140      	cbz	r0, 801147e <_svfiprintf_r+0x152>
 801146c:	2340      	movs	r3, #64	; 0x40
 801146e:	eba0 000a 	sub.w	r0, r0, sl
 8011472:	fa03 f000 	lsl.w	r0, r3, r0
 8011476:	9b04      	ldr	r3, [sp, #16]
 8011478:	4303      	orrs	r3, r0
 801147a:	3401      	adds	r4, #1
 801147c:	9304      	str	r3, [sp, #16]
 801147e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011482:	4826      	ldr	r0, [pc, #152]	; (801151c <_svfiprintf_r+0x1f0>)
 8011484:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011488:	2206      	movs	r2, #6
 801148a:	f7ee fec1 	bl	8000210 <memchr>
 801148e:	2800      	cmp	r0, #0
 8011490:	d038      	beq.n	8011504 <_svfiprintf_r+0x1d8>
 8011492:	4b23      	ldr	r3, [pc, #140]	; (8011520 <_svfiprintf_r+0x1f4>)
 8011494:	bb1b      	cbnz	r3, 80114de <_svfiprintf_r+0x1b2>
 8011496:	9b03      	ldr	r3, [sp, #12]
 8011498:	3307      	adds	r3, #7
 801149a:	f023 0307 	bic.w	r3, r3, #7
 801149e:	3308      	adds	r3, #8
 80114a0:	9303      	str	r3, [sp, #12]
 80114a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114a4:	4433      	add	r3, r6
 80114a6:	9309      	str	r3, [sp, #36]	; 0x24
 80114a8:	e767      	b.n	801137a <_svfiprintf_r+0x4e>
 80114aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80114ae:	460c      	mov	r4, r1
 80114b0:	2001      	movs	r0, #1
 80114b2:	e7a5      	b.n	8011400 <_svfiprintf_r+0xd4>
 80114b4:	2300      	movs	r3, #0
 80114b6:	3401      	adds	r4, #1
 80114b8:	9305      	str	r3, [sp, #20]
 80114ba:	4619      	mov	r1, r3
 80114bc:	f04f 0c0a 	mov.w	ip, #10
 80114c0:	4620      	mov	r0, r4
 80114c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114c6:	3a30      	subs	r2, #48	; 0x30
 80114c8:	2a09      	cmp	r2, #9
 80114ca:	d903      	bls.n	80114d4 <_svfiprintf_r+0x1a8>
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d0c5      	beq.n	801145c <_svfiprintf_r+0x130>
 80114d0:	9105      	str	r1, [sp, #20]
 80114d2:	e7c3      	b.n	801145c <_svfiprintf_r+0x130>
 80114d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80114d8:	4604      	mov	r4, r0
 80114da:	2301      	movs	r3, #1
 80114dc:	e7f0      	b.n	80114c0 <_svfiprintf_r+0x194>
 80114de:	ab03      	add	r3, sp, #12
 80114e0:	9300      	str	r3, [sp, #0]
 80114e2:	462a      	mov	r2, r5
 80114e4:	4b0f      	ldr	r3, [pc, #60]	; (8011524 <_svfiprintf_r+0x1f8>)
 80114e6:	a904      	add	r1, sp, #16
 80114e8:	4638      	mov	r0, r7
 80114ea:	f7fc f9e5 	bl	800d8b8 <_printf_float>
 80114ee:	1c42      	adds	r2, r0, #1
 80114f0:	4606      	mov	r6, r0
 80114f2:	d1d6      	bne.n	80114a2 <_svfiprintf_r+0x176>
 80114f4:	89ab      	ldrh	r3, [r5, #12]
 80114f6:	065b      	lsls	r3, r3, #25
 80114f8:	f53f af2c 	bmi.w	8011354 <_svfiprintf_r+0x28>
 80114fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114fe:	b01d      	add	sp, #116	; 0x74
 8011500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011504:	ab03      	add	r3, sp, #12
 8011506:	9300      	str	r3, [sp, #0]
 8011508:	462a      	mov	r2, r5
 801150a:	4b06      	ldr	r3, [pc, #24]	; (8011524 <_svfiprintf_r+0x1f8>)
 801150c:	a904      	add	r1, sp, #16
 801150e:	4638      	mov	r0, r7
 8011510:	f7fc fc76 	bl	800de00 <_printf_i>
 8011514:	e7eb      	b.n	80114ee <_svfiprintf_r+0x1c2>
 8011516:	bf00      	nop
 8011518:	08025cdc 	.word	0x08025cdc
 801151c:	08025ce6 	.word	0x08025ce6
 8011520:	0800d8b9 	.word	0x0800d8b9
 8011524:	08011275 	.word	0x08011275
 8011528:	08025ce2 	.word	0x08025ce2

0801152c <__sfputc_r>:
 801152c:	6893      	ldr	r3, [r2, #8]
 801152e:	3b01      	subs	r3, #1
 8011530:	2b00      	cmp	r3, #0
 8011532:	b410      	push	{r4}
 8011534:	6093      	str	r3, [r2, #8]
 8011536:	da08      	bge.n	801154a <__sfputc_r+0x1e>
 8011538:	6994      	ldr	r4, [r2, #24]
 801153a:	42a3      	cmp	r3, r4
 801153c:	db01      	blt.n	8011542 <__sfputc_r+0x16>
 801153e:	290a      	cmp	r1, #10
 8011540:	d103      	bne.n	801154a <__sfputc_r+0x1e>
 8011542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011546:	f000 b975 	b.w	8011834 <__swbuf_r>
 801154a:	6813      	ldr	r3, [r2, #0]
 801154c:	1c58      	adds	r0, r3, #1
 801154e:	6010      	str	r0, [r2, #0]
 8011550:	7019      	strb	r1, [r3, #0]
 8011552:	4608      	mov	r0, r1
 8011554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011558:	4770      	bx	lr

0801155a <__sfputs_r>:
 801155a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801155c:	4606      	mov	r6, r0
 801155e:	460f      	mov	r7, r1
 8011560:	4614      	mov	r4, r2
 8011562:	18d5      	adds	r5, r2, r3
 8011564:	42ac      	cmp	r4, r5
 8011566:	d101      	bne.n	801156c <__sfputs_r+0x12>
 8011568:	2000      	movs	r0, #0
 801156a:	e007      	b.n	801157c <__sfputs_r+0x22>
 801156c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011570:	463a      	mov	r2, r7
 8011572:	4630      	mov	r0, r6
 8011574:	f7ff ffda 	bl	801152c <__sfputc_r>
 8011578:	1c43      	adds	r3, r0, #1
 801157a:	d1f3      	bne.n	8011564 <__sfputs_r+0xa>
 801157c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011580 <_vfiprintf_r>:
 8011580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011584:	460d      	mov	r5, r1
 8011586:	b09d      	sub	sp, #116	; 0x74
 8011588:	4614      	mov	r4, r2
 801158a:	4698      	mov	r8, r3
 801158c:	4606      	mov	r6, r0
 801158e:	b118      	cbz	r0, 8011598 <_vfiprintf_r+0x18>
 8011590:	6983      	ldr	r3, [r0, #24]
 8011592:	b90b      	cbnz	r3, 8011598 <_vfiprintf_r+0x18>
 8011594:	f000 fb3e 	bl	8011c14 <__sinit>
 8011598:	4b89      	ldr	r3, [pc, #548]	; (80117c0 <_vfiprintf_r+0x240>)
 801159a:	429d      	cmp	r5, r3
 801159c:	d11b      	bne.n	80115d6 <_vfiprintf_r+0x56>
 801159e:	6875      	ldr	r5, [r6, #4]
 80115a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115a2:	07d9      	lsls	r1, r3, #31
 80115a4:	d405      	bmi.n	80115b2 <_vfiprintf_r+0x32>
 80115a6:	89ab      	ldrh	r3, [r5, #12]
 80115a8:	059a      	lsls	r2, r3, #22
 80115aa:	d402      	bmi.n	80115b2 <_vfiprintf_r+0x32>
 80115ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115ae:	f000 fbcf 	bl	8011d50 <__retarget_lock_acquire_recursive>
 80115b2:	89ab      	ldrh	r3, [r5, #12]
 80115b4:	071b      	lsls	r3, r3, #28
 80115b6:	d501      	bpl.n	80115bc <_vfiprintf_r+0x3c>
 80115b8:	692b      	ldr	r3, [r5, #16]
 80115ba:	b9eb      	cbnz	r3, 80115f8 <_vfiprintf_r+0x78>
 80115bc:	4629      	mov	r1, r5
 80115be:	4630      	mov	r0, r6
 80115c0:	f000 f998 	bl	80118f4 <__swsetup_r>
 80115c4:	b1c0      	cbz	r0, 80115f8 <_vfiprintf_r+0x78>
 80115c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115c8:	07dc      	lsls	r4, r3, #31
 80115ca:	d50e      	bpl.n	80115ea <_vfiprintf_r+0x6a>
 80115cc:	f04f 30ff 	mov.w	r0, #4294967295
 80115d0:	b01d      	add	sp, #116	; 0x74
 80115d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d6:	4b7b      	ldr	r3, [pc, #492]	; (80117c4 <_vfiprintf_r+0x244>)
 80115d8:	429d      	cmp	r5, r3
 80115da:	d101      	bne.n	80115e0 <_vfiprintf_r+0x60>
 80115dc:	68b5      	ldr	r5, [r6, #8]
 80115de:	e7df      	b.n	80115a0 <_vfiprintf_r+0x20>
 80115e0:	4b79      	ldr	r3, [pc, #484]	; (80117c8 <_vfiprintf_r+0x248>)
 80115e2:	429d      	cmp	r5, r3
 80115e4:	bf08      	it	eq
 80115e6:	68f5      	ldreq	r5, [r6, #12]
 80115e8:	e7da      	b.n	80115a0 <_vfiprintf_r+0x20>
 80115ea:	89ab      	ldrh	r3, [r5, #12]
 80115ec:	0598      	lsls	r0, r3, #22
 80115ee:	d4ed      	bmi.n	80115cc <_vfiprintf_r+0x4c>
 80115f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115f2:	f000 fbae 	bl	8011d52 <__retarget_lock_release_recursive>
 80115f6:	e7e9      	b.n	80115cc <_vfiprintf_r+0x4c>
 80115f8:	2300      	movs	r3, #0
 80115fa:	9309      	str	r3, [sp, #36]	; 0x24
 80115fc:	2320      	movs	r3, #32
 80115fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011602:	f8cd 800c 	str.w	r8, [sp, #12]
 8011606:	2330      	movs	r3, #48	; 0x30
 8011608:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80117cc <_vfiprintf_r+0x24c>
 801160c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011610:	f04f 0901 	mov.w	r9, #1
 8011614:	4623      	mov	r3, r4
 8011616:	469a      	mov	sl, r3
 8011618:	f813 2b01 	ldrb.w	r2, [r3], #1
 801161c:	b10a      	cbz	r2, 8011622 <_vfiprintf_r+0xa2>
 801161e:	2a25      	cmp	r2, #37	; 0x25
 8011620:	d1f9      	bne.n	8011616 <_vfiprintf_r+0x96>
 8011622:	ebba 0b04 	subs.w	fp, sl, r4
 8011626:	d00b      	beq.n	8011640 <_vfiprintf_r+0xc0>
 8011628:	465b      	mov	r3, fp
 801162a:	4622      	mov	r2, r4
 801162c:	4629      	mov	r1, r5
 801162e:	4630      	mov	r0, r6
 8011630:	f7ff ff93 	bl	801155a <__sfputs_r>
 8011634:	3001      	adds	r0, #1
 8011636:	f000 80aa 	beq.w	801178e <_vfiprintf_r+0x20e>
 801163a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801163c:	445a      	add	r2, fp
 801163e:	9209      	str	r2, [sp, #36]	; 0x24
 8011640:	f89a 3000 	ldrb.w	r3, [sl]
 8011644:	2b00      	cmp	r3, #0
 8011646:	f000 80a2 	beq.w	801178e <_vfiprintf_r+0x20e>
 801164a:	2300      	movs	r3, #0
 801164c:	f04f 32ff 	mov.w	r2, #4294967295
 8011650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011654:	f10a 0a01 	add.w	sl, sl, #1
 8011658:	9304      	str	r3, [sp, #16]
 801165a:	9307      	str	r3, [sp, #28]
 801165c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011660:	931a      	str	r3, [sp, #104]	; 0x68
 8011662:	4654      	mov	r4, sl
 8011664:	2205      	movs	r2, #5
 8011666:	f814 1b01 	ldrb.w	r1, [r4], #1
 801166a:	4858      	ldr	r0, [pc, #352]	; (80117cc <_vfiprintf_r+0x24c>)
 801166c:	f7ee fdd0 	bl	8000210 <memchr>
 8011670:	9a04      	ldr	r2, [sp, #16]
 8011672:	b9d8      	cbnz	r0, 80116ac <_vfiprintf_r+0x12c>
 8011674:	06d1      	lsls	r1, r2, #27
 8011676:	bf44      	itt	mi
 8011678:	2320      	movmi	r3, #32
 801167a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801167e:	0713      	lsls	r3, r2, #28
 8011680:	bf44      	itt	mi
 8011682:	232b      	movmi	r3, #43	; 0x2b
 8011684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011688:	f89a 3000 	ldrb.w	r3, [sl]
 801168c:	2b2a      	cmp	r3, #42	; 0x2a
 801168e:	d015      	beq.n	80116bc <_vfiprintf_r+0x13c>
 8011690:	9a07      	ldr	r2, [sp, #28]
 8011692:	4654      	mov	r4, sl
 8011694:	2000      	movs	r0, #0
 8011696:	f04f 0c0a 	mov.w	ip, #10
 801169a:	4621      	mov	r1, r4
 801169c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116a0:	3b30      	subs	r3, #48	; 0x30
 80116a2:	2b09      	cmp	r3, #9
 80116a4:	d94e      	bls.n	8011744 <_vfiprintf_r+0x1c4>
 80116a6:	b1b0      	cbz	r0, 80116d6 <_vfiprintf_r+0x156>
 80116a8:	9207      	str	r2, [sp, #28]
 80116aa:	e014      	b.n	80116d6 <_vfiprintf_r+0x156>
 80116ac:	eba0 0308 	sub.w	r3, r0, r8
 80116b0:	fa09 f303 	lsl.w	r3, r9, r3
 80116b4:	4313      	orrs	r3, r2
 80116b6:	9304      	str	r3, [sp, #16]
 80116b8:	46a2      	mov	sl, r4
 80116ba:	e7d2      	b.n	8011662 <_vfiprintf_r+0xe2>
 80116bc:	9b03      	ldr	r3, [sp, #12]
 80116be:	1d19      	adds	r1, r3, #4
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	9103      	str	r1, [sp, #12]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	bfbb      	ittet	lt
 80116c8:	425b      	neglt	r3, r3
 80116ca:	f042 0202 	orrlt.w	r2, r2, #2
 80116ce:	9307      	strge	r3, [sp, #28]
 80116d0:	9307      	strlt	r3, [sp, #28]
 80116d2:	bfb8      	it	lt
 80116d4:	9204      	strlt	r2, [sp, #16]
 80116d6:	7823      	ldrb	r3, [r4, #0]
 80116d8:	2b2e      	cmp	r3, #46	; 0x2e
 80116da:	d10c      	bne.n	80116f6 <_vfiprintf_r+0x176>
 80116dc:	7863      	ldrb	r3, [r4, #1]
 80116de:	2b2a      	cmp	r3, #42	; 0x2a
 80116e0:	d135      	bne.n	801174e <_vfiprintf_r+0x1ce>
 80116e2:	9b03      	ldr	r3, [sp, #12]
 80116e4:	1d1a      	adds	r2, r3, #4
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	9203      	str	r2, [sp, #12]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	bfb8      	it	lt
 80116ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80116f2:	3402      	adds	r4, #2
 80116f4:	9305      	str	r3, [sp, #20]
 80116f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80117dc <_vfiprintf_r+0x25c>
 80116fa:	7821      	ldrb	r1, [r4, #0]
 80116fc:	2203      	movs	r2, #3
 80116fe:	4650      	mov	r0, sl
 8011700:	f7ee fd86 	bl	8000210 <memchr>
 8011704:	b140      	cbz	r0, 8011718 <_vfiprintf_r+0x198>
 8011706:	2340      	movs	r3, #64	; 0x40
 8011708:	eba0 000a 	sub.w	r0, r0, sl
 801170c:	fa03 f000 	lsl.w	r0, r3, r0
 8011710:	9b04      	ldr	r3, [sp, #16]
 8011712:	4303      	orrs	r3, r0
 8011714:	3401      	adds	r4, #1
 8011716:	9304      	str	r3, [sp, #16]
 8011718:	f814 1b01 	ldrb.w	r1, [r4], #1
 801171c:	482c      	ldr	r0, [pc, #176]	; (80117d0 <_vfiprintf_r+0x250>)
 801171e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011722:	2206      	movs	r2, #6
 8011724:	f7ee fd74 	bl	8000210 <memchr>
 8011728:	2800      	cmp	r0, #0
 801172a:	d03f      	beq.n	80117ac <_vfiprintf_r+0x22c>
 801172c:	4b29      	ldr	r3, [pc, #164]	; (80117d4 <_vfiprintf_r+0x254>)
 801172e:	bb1b      	cbnz	r3, 8011778 <_vfiprintf_r+0x1f8>
 8011730:	9b03      	ldr	r3, [sp, #12]
 8011732:	3307      	adds	r3, #7
 8011734:	f023 0307 	bic.w	r3, r3, #7
 8011738:	3308      	adds	r3, #8
 801173a:	9303      	str	r3, [sp, #12]
 801173c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801173e:	443b      	add	r3, r7
 8011740:	9309      	str	r3, [sp, #36]	; 0x24
 8011742:	e767      	b.n	8011614 <_vfiprintf_r+0x94>
 8011744:	fb0c 3202 	mla	r2, ip, r2, r3
 8011748:	460c      	mov	r4, r1
 801174a:	2001      	movs	r0, #1
 801174c:	e7a5      	b.n	801169a <_vfiprintf_r+0x11a>
 801174e:	2300      	movs	r3, #0
 8011750:	3401      	adds	r4, #1
 8011752:	9305      	str	r3, [sp, #20]
 8011754:	4619      	mov	r1, r3
 8011756:	f04f 0c0a 	mov.w	ip, #10
 801175a:	4620      	mov	r0, r4
 801175c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011760:	3a30      	subs	r2, #48	; 0x30
 8011762:	2a09      	cmp	r2, #9
 8011764:	d903      	bls.n	801176e <_vfiprintf_r+0x1ee>
 8011766:	2b00      	cmp	r3, #0
 8011768:	d0c5      	beq.n	80116f6 <_vfiprintf_r+0x176>
 801176a:	9105      	str	r1, [sp, #20]
 801176c:	e7c3      	b.n	80116f6 <_vfiprintf_r+0x176>
 801176e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011772:	4604      	mov	r4, r0
 8011774:	2301      	movs	r3, #1
 8011776:	e7f0      	b.n	801175a <_vfiprintf_r+0x1da>
 8011778:	ab03      	add	r3, sp, #12
 801177a:	9300      	str	r3, [sp, #0]
 801177c:	462a      	mov	r2, r5
 801177e:	4b16      	ldr	r3, [pc, #88]	; (80117d8 <_vfiprintf_r+0x258>)
 8011780:	a904      	add	r1, sp, #16
 8011782:	4630      	mov	r0, r6
 8011784:	f7fc f898 	bl	800d8b8 <_printf_float>
 8011788:	4607      	mov	r7, r0
 801178a:	1c78      	adds	r0, r7, #1
 801178c:	d1d6      	bne.n	801173c <_vfiprintf_r+0x1bc>
 801178e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011790:	07d9      	lsls	r1, r3, #31
 8011792:	d405      	bmi.n	80117a0 <_vfiprintf_r+0x220>
 8011794:	89ab      	ldrh	r3, [r5, #12]
 8011796:	059a      	lsls	r2, r3, #22
 8011798:	d402      	bmi.n	80117a0 <_vfiprintf_r+0x220>
 801179a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801179c:	f000 fad9 	bl	8011d52 <__retarget_lock_release_recursive>
 80117a0:	89ab      	ldrh	r3, [r5, #12]
 80117a2:	065b      	lsls	r3, r3, #25
 80117a4:	f53f af12 	bmi.w	80115cc <_vfiprintf_r+0x4c>
 80117a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117aa:	e711      	b.n	80115d0 <_vfiprintf_r+0x50>
 80117ac:	ab03      	add	r3, sp, #12
 80117ae:	9300      	str	r3, [sp, #0]
 80117b0:	462a      	mov	r2, r5
 80117b2:	4b09      	ldr	r3, [pc, #36]	; (80117d8 <_vfiprintf_r+0x258>)
 80117b4:	a904      	add	r1, sp, #16
 80117b6:	4630      	mov	r0, r6
 80117b8:	f7fc fb22 	bl	800de00 <_printf_i>
 80117bc:	e7e4      	b.n	8011788 <_vfiprintf_r+0x208>
 80117be:	bf00      	nop
 80117c0:	08025d10 	.word	0x08025d10
 80117c4:	08025d30 	.word	0x08025d30
 80117c8:	08025cf0 	.word	0x08025cf0
 80117cc:	08025cdc 	.word	0x08025cdc
 80117d0:	08025ce6 	.word	0x08025ce6
 80117d4:	0800d8b9 	.word	0x0800d8b9
 80117d8:	0801155b 	.word	0x0801155b
 80117dc:	08025ce2 	.word	0x08025ce2

080117e0 <nan>:
 80117e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80117e8 <nan+0x8>
 80117e4:	4770      	bx	lr
 80117e6:	bf00      	nop
 80117e8:	00000000 	.word	0x00000000
 80117ec:	7ff80000 	.word	0x7ff80000

080117f0 <_sbrk_r>:
 80117f0:	b538      	push	{r3, r4, r5, lr}
 80117f2:	4d06      	ldr	r5, [pc, #24]	; (801180c <_sbrk_r+0x1c>)
 80117f4:	2300      	movs	r3, #0
 80117f6:	4604      	mov	r4, r0
 80117f8:	4608      	mov	r0, r1
 80117fa:	602b      	str	r3, [r5, #0]
 80117fc:	f7f4 fe96 	bl	800652c <_sbrk>
 8011800:	1c43      	adds	r3, r0, #1
 8011802:	d102      	bne.n	801180a <_sbrk_r+0x1a>
 8011804:	682b      	ldr	r3, [r5, #0]
 8011806:	b103      	cbz	r3, 801180a <_sbrk_r+0x1a>
 8011808:	6023      	str	r3, [r4, #0]
 801180a:	bd38      	pop	{r3, r4, r5, pc}
 801180c:	200007f8 	.word	0x200007f8

08011810 <strncmp>:
 8011810:	b510      	push	{r4, lr}
 8011812:	b16a      	cbz	r2, 8011830 <strncmp+0x20>
 8011814:	3901      	subs	r1, #1
 8011816:	1884      	adds	r4, r0, r2
 8011818:	f810 3b01 	ldrb.w	r3, [r0], #1
 801181c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011820:	4293      	cmp	r3, r2
 8011822:	d103      	bne.n	801182c <strncmp+0x1c>
 8011824:	42a0      	cmp	r0, r4
 8011826:	d001      	beq.n	801182c <strncmp+0x1c>
 8011828:	2b00      	cmp	r3, #0
 801182a:	d1f5      	bne.n	8011818 <strncmp+0x8>
 801182c:	1a98      	subs	r0, r3, r2
 801182e:	bd10      	pop	{r4, pc}
 8011830:	4610      	mov	r0, r2
 8011832:	e7fc      	b.n	801182e <strncmp+0x1e>

08011834 <__swbuf_r>:
 8011834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011836:	460e      	mov	r6, r1
 8011838:	4614      	mov	r4, r2
 801183a:	4605      	mov	r5, r0
 801183c:	b118      	cbz	r0, 8011846 <__swbuf_r+0x12>
 801183e:	6983      	ldr	r3, [r0, #24]
 8011840:	b90b      	cbnz	r3, 8011846 <__swbuf_r+0x12>
 8011842:	f000 f9e7 	bl	8011c14 <__sinit>
 8011846:	4b21      	ldr	r3, [pc, #132]	; (80118cc <__swbuf_r+0x98>)
 8011848:	429c      	cmp	r4, r3
 801184a:	d12b      	bne.n	80118a4 <__swbuf_r+0x70>
 801184c:	686c      	ldr	r4, [r5, #4]
 801184e:	69a3      	ldr	r3, [r4, #24]
 8011850:	60a3      	str	r3, [r4, #8]
 8011852:	89a3      	ldrh	r3, [r4, #12]
 8011854:	071a      	lsls	r2, r3, #28
 8011856:	d52f      	bpl.n	80118b8 <__swbuf_r+0x84>
 8011858:	6923      	ldr	r3, [r4, #16]
 801185a:	b36b      	cbz	r3, 80118b8 <__swbuf_r+0x84>
 801185c:	6923      	ldr	r3, [r4, #16]
 801185e:	6820      	ldr	r0, [r4, #0]
 8011860:	1ac0      	subs	r0, r0, r3
 8011862:	6963      	ldr	r3, [r4, #20]
 8011864:	b2f6      	uxtb	r6, r6
 8011866:	4283      	cmp	r3, r0
 8011868:	4637      	mov	r7, r6
 801186a:	dc04      	bgt.n	8011876 <__swbuf_r+0x42>
 801186c:	4621      	mov	r1, r4
 801186e:	4628      	mov	r0, r5
 8011870:	f000 f93c 	bl	8011aec <_fflush_r>
 8011874:	bb30      	cbnz	r0, 80118c4 <__swbuf_r+0x90>
 8011876:	68a3      	ldr	r3, [r4, #8]
 8011878:	3b01      	subs	r3, #1
 801187a:	60a3      	str	r3, [r4, #8]
 801187c:	6823      	ldr	r3, [r4, #0]
 801187e:	1c5a      	adds	r2, r3, #1
 8011880:	6022      	str	r2, [r4, #0]
 8011882:	701e      	strb	r6, [r3, #0]
 8011884:	6963      	ldr	r3, [r4, #20]
 8011886:	3001      	adds	r0, #1
 8011888:	4283      	cmp	r3, r0
 801188a:	d004      	beq.n	8011896 <__swbuf_r+0x62>
 801188c:	89a3      	ldrh	r3, [r4, #12]
 801188e:	07db      	lsls	r3, r3, #31
 8011890:	d506      	bpl.n	80118a0 <__swbuf_r+0x6c>
 8011892:	2e0a      	cmp	r6, #10
 8011894:	d104      	bne.n	80118a0 <__swbuf_r+0x6c>
 8011896:	4621      	mov	r1, r4
 8011898:	4628      	mov	r0, r5
 801189a:	f000 f927 	bl	8011aec <_fflush_r>
 801189e:	b988      	cbnz	r0, 80118c4 <__swbuf_r+0x90>
 80118a0:	4638      	mov	r0, r7
 80118a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118a4:	4b0a      	ldr	r3, [pc, #40]	; (80118d0 <__swbuf_r+0x9c>)
 80118a6:	429c      	cmp	r4, r3
 80118a8:	d101      	bne.n	80118ae <__swbuf_r+0x7a>
 80118aa:	68ac      	ldr	r4, [r5, #8]
 80118ac:	e7cf      	b.n	801184e <__swbuf_r+0x1a>
 80118ae:	4b09      	ldr	r3, [pc, #36]	; (80118d4 <__swbuf_r+0xa0>)
 80118b0:	429c      	cmp	r4, r3
 80118b2:	bf08      	it	eq
 80118b4:	68ec      	ldreq	r4, [r5, #12]
 80118b6:	e7ca      	b.n	801184e <__swbuf_r+0x1a>
 80118b8:	4621      	mov	r1, r4
 80118ba:	4628      	mov	r0, r5
 80118bc:	f000 f81a 	bl	80118f4 <__swsetup_r>
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d0cb      	beq.n	801185c <__swbuf_r+0x28>
 80118c4:	f04f 37ff 	mov.w	r7, #4294967295
 80118c8:	e7ea      	b.n	80118a0 <__swbuf_r+0x6c>
 80118ca:	bf00      	nop
 80118cc:	08025d10 	.word	0x08025d10
 80118d0:	08025d30 	.word	0x08025d30
 80118d4:	08025cf0 	.word	0x08025cf0

080118d8 <__ascii_wctomb>:
 80118d8:	b149      	cbz	r1, 80118ee <__ascii_wctomb+0x16>
 80118da:	2aff      	cmp	r2, #255	; 0xff
 80118dc:	bf85      	ittet	hi
 80118de:	238a      	movhi	r3, #138	; 0x8a
 80118e0:	6003      	strhi	r3, [r0, #0]
 80118e2:	700a      	strbls	r2, [r1, #0]
 80118e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80118e8:	bf98      	it	ls
 80118ea:	2001      	movls	r0, #1
 80118ec:	4770      	bx	lr
 80118ee:	4608      	mov	r0, r1
 80118f0:	4770      	bx	lr
	...

080118f4 <__swsetup_r>:
 80118f4:	4b32      	ldr	r3, [pc, #200]	; (80119c0 <__swsetup_r+0xcc>)
 80118f6:	b570      	push	{r4, r5, r6, lr}
 80118f8:	681d      	ldr	r5, [r3, #0]
 80118fa:	4606      	mov	r6, r0
 80118fc:	460c      	mov	r4, r1
 80118fe:	b125      	cbz	r5, 801190a <__swsetup_r+0x16>
 8011900:	69ab      	ldr	r3, [r5, #24]
 8011902:	b913      	cbnz	r3, 801190a <__swsetup_r+0x16>
 8011904:	4628      	mov	r0, r5
 8011906:	f000 f985 	bl	8011c14 <__sinit>
 801190a:	4b2e      	ldr	r3, [pc, #184]	; (80119c4 <__swsetup_r+0xd0>)
 801190c:	429c      	cmp	r4, r3
 801190e:	d10f      	bne.n	8011930 <__swsetup_r+0x3c>
 8011910:	686c      	ldr	r4, [r5, #4]
 8011912:	89a3      	ldrh	r3, [r4, #12]
 8011914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011918:	0719      	lsls	r1, r3, #28
 801191a:	d42c      	bmi.n	8011976 <__swsetup_r+0x82>
 801191c:	06dd      	lsls	r5, r3, #27
 801191e:	d411      	bmi.n	8011944 <__swsetup_r+0x50>
 8011920:	2309      	movs	r3, #9
 8011922:	6033      	str	r3, [r6, #0]
 8011924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011928:	81a3      	strh	r3, [r4, #12]
 801192a:	f04f 30ff 	mov.w	r0, #4294967295
 801192e:	e03e      	b.n	80119ae <__swsetup_r+0xba>
 8011930:	4b25      	ldr	r3, [pc, #148]	; (80119c8 <__swsetup_r+0xd4>)
 8011932:	429c      	cmp	r4, r3
 8011934:	d101      	bne.n	801193a <__swsetup_r+0x46>
 8011936:	68ac      	ldr	r4, [r5, #8]
 8011938:	e7eb      	b.n	8011912 <__swsetup_r+0x1e>
 801193a:	4b24      	ldr	r3, [pc, #144]	; (80119cc <__swsetup_r+0xd8>)
 801193c:	429c      	cmp	r4, r3
 801193e:	bf08      	it	eq
 8011940:	68ec      	ldreq	r4, [r5, #12]
 8011942:	e7e6      	b.n	8011912 <__swsetup_r+0x1e>
 8011944:	0758      	lsls	r0, r3, #29
 8011946:	d512      	bpl.n	801196e <__swsetup_r+0x7a>
 8011948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801194a:	b141      	cbz	r1, 801195e <__swsetup_r+0x6a>
 801194c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011950:	4299      	cmp	r1, r3
 8011952:	d002      	beq.n	801195a <__swsetup_r+0x66>
 8011954:	4630      	mov	r0, r6
 8011956:	f7ff fbe3 	bl	8011120 <_free_r>
 801195a:	2300      	movs	r3, #0
 801195c:	6363      	str	r3, [r4, #52]	; 0x34
 801195e:	89a3      	ldrh	r3, [r4, #12]
 8011960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011964:	81a3      	strh	r3, [r4, #12]
 8011966:	2300      	movs	r3, #0
 8011968:	6063      	str	r3, [r4, #4]
 801196a:	6923      	ldr	r3, [r4, #16]
 801196c:	6023      	str	r3, [r4, #0]
 801196e:	89a3      	ldrh	r3, [r4, #12]
 8011970:	f043 0308 	orr.w	r3, r3, #8
 8011974:	81a3      	strh	r3, [r4, #12]
 8011976:	6923      	ldr	r3, [r4, #16]
 8011978:	b94b      	cbnz	r3, 801198e <__swsetup_r+0x9a>
 801197a:	89a3      	ldrh	r3, [r4, #12]
 801197c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011984:	d003      	beq.n	801198e <__swsetup_r+0x9a>
 8011986:	4621      	mov	r1, r4
 8011988:	4630      	mov	r0, r6
 801198a:	f000 fa07 	bl	8011d9c <__smakebuf_r>
 801198e:	89a0      	ldrh	r0, [r4, #12]
 8011990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011994:	f010 0301 	ands.w	r3, r0, #1
 8011998:	d00a      	beq.n	80119b0 <__swsetup_r+0xbc>
 801199a:	2300      	movs	r3, #0
 801199c:	60a3      	str	r3, [r4, #8]
 801199e:	6963      	ldr	r3, [r4, #20]
 80119a0:	425b      	negs	r3, r3
 80119a2:	61a3      	str	r3, [r4, #24]
 80119a4:	6923      	ldr	r3, [r4, #16]
 80119a6:	b943      	cbnz	r3, 80119ba <__swsetup_r+0xc6>
 80119a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80119ac:	d1ba      	bne.n	8011924 <__swsetup_r+0x30>
 80119ae:	bd70      	pop	{r4, r5, r6, pc}
 80119b0:	0781      	lsls	r1, r0, #30
 80119b2:	bf58      	it	pl
 80119b4:	6963      	ldrpl	r3, [r4, #20]
 80119b6:	60a3      	str	r3, [r4, #8]
 80119b8:	e7f4      	b.n	80119a4 <__swsetup_r+0xb0>
 80119ba:	2000      	movs	r0, #0
 80119bc:	e7f7      	b.n	80119ae <__swsetup_r+0xba>
 80119be:	bf00      	nop
 80119c0:	20000040 	.word	0x20000040
 80119c4:	08025d10 	.word	0x08025d10
 80119c8:	08025d30 	.word	0x08025d30
 80119cc:	08025cf0 	.word	0x08025cf0

080119d0 <abort>:
 80119d0:	b508      	push	{r3, lr}
 80119d2:	2006      	movs	r0, #6
 80119d4:	f000 fa96 	bl	8011f04 <raise>
 80119d8:	2001      	movs	r0, #1
 80119da:	f7f4 fd2f 	bl	800643c <_exit>
	...

080119e0 <__sflush_r>:
 80119e0:	898a      	ldrh	r2, [r1, #12]
 80119e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119e6:	4605      	mov	r5, r0
 80119e8:	0710      	lsls	r0, r2, #28
 80119ea:	460c      	mov	r4, r1
 80119ec:	d458      	bmi.n	8011aa0 <__sflush_r+0xc0>
 80119ee:	684b      	ldr	r3, [r1, #4]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	dc05      	bgt.n	8011a00 <__sflush_r+0x20>
 80119f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	dc02      	bgt.n	8011a00 <__sflush_r+0x20>
 80119fa:	2000      	movs	r0, #0
 80119fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a02:	2e00      	cmp	r6, #0
 8011a04:	d0f9      	beq.n	80119fa <__sflush_r+0x1a>
 8011a06:	2300      	movs	r3, #0
 8011a08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a0c:	682f      	ldr	r7, [r5, #0]
 8011a0e:	602b      	str	r3, [r5, #0]
 8011a10:	d032      	beq.n	8011a78 <__sflush_r+0x98>
 8011a12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a14:	89a3      	ldrh	r3, [r4, #12]
 8011a16:	075a      	lsls	r2, r3, #29
 8011a18:	d505      	bpl.n	8011a26 <__sflush_r+0x46>
 8011a1a:	6863      	ldr	r3, [r4, #4]
 8011a1c:	1ac0      	subs	r0, r0, r3
 8011a1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a20:	b10b      	cbz	r3, 8011a26 <__sflush_r+0x46>
 8011a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a24:	1ac0      	subs	r0, r0, r3
 8011a26:	2300      	movs	r3, #0
 8011a28:	4602      	mov	r2, r0
 8011a2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a2c:	6a21      	ldr	r1, [r4, #32]
 8011a2e:	4628      	mov	r0, r5
 8011a30:	47b0      	blx	r6
 8011a32:	1c43      	adds	r3, r0, #1
 8011a34:	89a3      	ldrh	r3, [r4, #12]
 8011a36:	d106      	bne.n	8011a46 <__sflush_r+0x66>
 8011a38:	6829      	ldr	r1, [r5, #0]
 8011a3a:	291d      	cmp	r1, #29
 8011a3c:	d82c      	bhi.n	8011a98 <__sflush_r+0xb8>
 8011a3e:	4a2a      	ldr	r2, [pc, #168]	; (8011ae8 <__sflush_r+0x108>)
 8011a40:	40ca      	lsrs	r2, r1
 8011a42:	07d6      	lsls	r6, r2, #31
 8011a44:	d528      	bpl.n	8011a98 <__sflush_r+0xb8>
 8011a46:	2200      	movs	r2, #0
 8011a48:	6062      	str	r2, [r4, #4]
 8011a4a:	04d9      	lsls	r1, r3, #19
 8011a4c:	6922      	ldr	r2, [r4, #16]
 8011a4e:	6022      	str	r2, [r4, #0]
 8011a50:	d504      	bpl.n	8011a5c <__sflush_r+0x7c>
 8011a52:	1c42      	adds	r2, r0, #1
 8011a54:	d101      	bne.n	8011a5a <__sflush_r+0x7a>
 8011a56:	682b      	ldr	r3, [r5, #0]
 8011a58:	b903      	cbnz	r3, 8011a5c <__sflush_r+0x7c>
 8011a5a:	6560      	str	r0, [r4, #84]	; 0x54
 8011a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a5e:	602f      	str	r7, [r5, #0]
 8011a60:	2900      	cmp	r1, #0
 8011a62:	d0ca      	beq.n	80119fa <__sflush_r+0x1a>
 8011a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a68:	4299      	cmp	r1, r3
 8011a6a:	d002      	beq.n	8011a72 <__sflush_r+0x92>
 8011a6c:	4628      	mov	r0, r5
 8011a6e:	f7ff fb57 	bl	8011120 <_free_r>
 8011a72:	2000      	movs	r0, #0
 8011a74:	6360      	str	r0, [r4, #52]	; 0x34
 8011a76:	e7c1      	b.n	80119fc <__sflush_r+0x1c>
 8011a78:	6a21      	ldr	r1, [r4, #32]
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	4628      	mov	r0, r5
 8011a7e:	47b0      	blx	r6
 8011a80:	1c41      	adds	r1, r0, #1
 8011a82:	d1c7      	bne.n	8011a14 <__sflush_r+0x34>
 8011a84:	682b      	ldr	r3, [r5, #0]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d0c4      	beq.n	8011a14 <__sflush_r+0x34>
 8011a8a:	2b1d      	cmp	r3, #29
 8011a8c:	d001      	beq.n	8011a92 <__sflush_r+0xb2>
 8011a8e:	2b16      	cmp	r3, #22
 8011a90:	d101      	bne.n	8011a96 <__sflush_r+0xb6>
 8011a92:	602f      	str	r7, [r5, #0]
 8011a94:	e7b1      	b.n	80119fa <__sflush_r+0x1a>
 8011a96:	89a3      	ldrh	r3, [r4, #12]
 8011a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a9c:	81a3      	strh	r3, [r4, #12]
 8011a9e:	e7ad      	b.n	80119fc <__sflush_r+0x1c>
 8011aa0:	690f      	ldr	r7, [r1, #16]
 8011aa2:	2f00      	cmp	r7, #0
 8011aa4:	d0a9      	beq.n	80119fa <__sflush_r+0x1a>
 8011aa6:	0793      	lsls	r3, r2, #30
 8011aa8:	680e      	ldr	r6, [r1, #0]
 8011aaa:	bf08      	it	eq
 8011aac:	694b      	ldreq	r3, [r1, #20]
 8011aae:	600f      	str	r7, [r1, #0]
 8011ab0:	bf18      	it	ne
 8011ab2:	2300      	movne	r3, #0
 8011ab4:	eba6 0807 	sub.w	r8, r6, r7
 8011ab8:	608b      	str	r3, [r1, #8]
 8011aba:	f1b8 0f00 	cmp.w	r8, #0
 8011abe:	dd9c      	ble.n	80119fa <__sflush_r+0x1a>
 8011ac0:	6a21      	ldr	r1, [r4, #32]
 8011ac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011ac4:	4643      	mov	r3, r8
 8011ac6:	463a      	mov	r2, r7
 8011ac8:	4628      	mov	r0, r5
 8011aca:	47b0      	blx	r6
 8011acc:	2800      	cmp	r0, #0
 8011ace:	dc06      	bgt.n	8011ade <__sflush_r+0xfe>
 8011ad0:	89a3      	ldrh	r3, [r4, #12]
 8011ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ad6:	81a3      	strh	r3, [r4, #12]
 8011ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8011adc:	e78e      	b.n	80119fc <__sflush_r+0x1c>
 8011ade:	4407      	add	r7, r0
 8011ae0:	eba8 0800 	sub.w	r8, r8, r0
 8011ae4:	e7e9      	b.n	8011aba <__sflush_r+0xda>
 8011ae6:	bf00      	nop
 8011ae8:	20400001 	.word	0x20400001

08011aec <_fflush_r>:
 8011aec:	b538      	push	{r3, r4, r5, lr}
 8011aee:	690b      	ldr	r3, [r1, #16]
 8011af0:	4605      	mov	r5, r0
 8011af2:	460c      	mov	r4, r1
 8011af4:	b913      	cbnz	r3, 8011afc <_fflush_r+0x10>
 8011af6:	2500      	movs	r5, #0
 8011af8:	4628      	mov	r0, r5
 8011afa:	bd38      	pop	{r3, r4, r5, pc}
 8011afc:	b118      	cbz	r0, 8011b06 <_fflush_r+0x1a>
 8011afe:	6983      	ldr	r3, [r0, #24]
 8011b00:	b90b      	cbnz	r3, 8011b06 <_fflush_r+0x1a>
 8011b02:	f000 f887 	bl	8011c14 <__sinit>
 8011b06:	4b14      	ldr	r3, [pc, #80]	; (8011b58 <_fflush_r+0x6c>)
 8011b08:	429c      	cmp	r4, r3
 8011b0a:	d11b      	bne.n	8011b44 <_fflush_r+0x58>
 8011b0c:	686c      	ldr	r4, [r5, #4]
 8011b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d0ef      	beq.n	8011af6 <_fflush_r+0xa>
 8011b16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011b18:	07d0      	lsls	r0, r2, #31
 8011b1a:	d404      	bmi.n	8011b26 <_fflush_r+0x3a>
 8011b1c:	0599      	lsls	r1, r3, #22
 8011b1e:	d402      	bmi.n	8011b26 <_fflush_r+0x3a>
 8011b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b22:	f000 f915 	bl	8011d50 <__retarget_lock_acquire_recursive>
 8011b26:	4628      	mov	r0, r5
 8011b28:	4621      	mov	r1, r4
 8011b2a:	f7ff ff59 	bl	80119e0 <__sflush_r>
 8011b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b30:	07da      	lsls	r2, r3, #31
 8011b32:	4605      	mov	r5, r0
 8011b34:	d4e0      	bmi.n	8011af8 <_fflush_r+0xc>
 8011b36:	89a3      	ldrh	r3, [r4, #12]
 8011b38:	059b      	lsls	r3, r3, #22
 8011b3a:	d4dd      	bmi.n	8011af8 <_fflush_r+0xc>
 8011b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b3e:	f000 f908 	bl	8011d52 <__retarget_lock_release_recursive>
 8011b42:	e7d9      	b.n	8011af8 <_fflush_r+0xc>
 8011b44:	4b05      	ldr	r3, [pc, #20]	; (8011b5c <_fflush_r+0x70>)
 8011b46:	429c      	cmp	r4, r3
 8011b48:	d101      	bne.n	8011b4e <_fflush_r+0x62>
 8011b4a:	68ac      	ldr	r4, [r5, #8]
 8011b4c:	e7df      	b.n	8011b0e <_fflush_r+0x22>
 8011b4e:	4b04      	ldr	r3, [pc, #16]	; (8011b60 <_fflush_r+0x74>)
 8011b50:	429c      	cmp	r4, r3
 8011b52:	bf08      	it	eq
 8011b54:	68ec      	ldreq	r4, [r5, #12]
 8011b56:	e7da      	b.n	8011b0e <_fflush_r+0x22>
 8011b58:	08025d10 	.word	0x08025d10
 8011b5c:	08025d30 	.word	0x08025d30
 8011b60:	08025cf0 	.word	0x08025cf0

08011b64 <std>:
 8011b64:	2300      	movs	r3, #0
 8011b66:	b510      	push	{r4, lr}
 8011b68:	4604      	mov	r4, r0
 8011b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8011b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b72:	6083      	str	r3, [r0, #8]
 8011b74:	8181      	strh	r1, [r0, #12]
 8011b76:	6643      	str	r3, [r0, #100]	; 0x64
 8011b78:	81c2      	strh	r2, [r0, #14]
 8011b7a:	6183      	str	r3, [r0, #24]
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	2208      	movs	r2, #8
 8011b80:	305c      	adds	r0, #92	; 0x5c
 8011b82:	f7fb fdf1 	bl	800d768 <memset>
 8011b86:	4b05      	ldr	r3, [pc, #20]	; (8011b9c <std+0x38>)
 8011b88:	6263      	str	r3, [r4, #36]	; 0x24
 8011b8a:	4b05      	ldr	r3, [pc, #20]	; (8011ba0 <std+0x3c>)
 8011b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b8e:	4b05      	ldr	r3, [pc, #20]	; (8011ba4 <std+0x40>)
 8011b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b92:	4b05      	ldr	r3, [pc, #20]	; (8011ba8 <std+0x44>)
 8011b94:	6224      	str	r4, [r4, #32]
 8011b96:	6323      	str	r3, [r4, #48]	; 0x30
 8011b98:	bd10      	pop	{r4, pc}
 8011b9a:	bf00      	nop
 8011b9c:	08011f3d 	.word	0x08011f3d
 8011ba0:	08011f5f 	.word	0x08011f5f
 8011ba4:	08011f97 	.word	0x08011f97
 8011ba8:	08011fbb 	.word	0x08011fbb

08011bac <_cleanup_r>:
 8011bac:	4901      	ldr	r1, [pc, #4]	; (8011bb4 <_cleanup_r+0x8>)
 8011bae:	f000 b8af 	b.w	8011d10 <_fwalk_reent>
 8011bb2:	bf00      	nop
 8011bb4:	08011aed 	.word	0x08011aed

08011bb8 <__sfmoreglue>:
 8011bb8:	b570      	push	{r4, r5, r6, lr}
 8011bba:	1e4a      	subs	r2, r1, #1
 8011bbc:	2568      	movs	r5, #104	; 0x68
 8011bbe:	4355      	muls	r5, r2
 8011bc0:	460e      	mov	r6, r1
 8011bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011bc6:	f7ff fafb 	bl	80111c0 <_malloc_r>
 8011bca:	4604      	mov	r4, r0
 8011bcc:	b140      	cbz	r0, 8011be0 <__sfmoreglue+0x28>
 8011bce:	2100      	movs	r1, #0
 8011bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8011bd4:	300c      	adds	r0, #12
 8011bd6:	60a0      	str	r0, [r4, #8]
 8011bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011bdc:	f7fb fdc4 	bl	800d768 <memset>
 8011be0:	4620      	mov	r0, r4
 8011be2:	bd70      	pop	{r4, r5, r6, pc}

08011be4 <__sfp_lock_acquire>:
 8011be4:	4801      	ldr	r0, [pc, #4]	; (8011bec <__sfp_lock_acquire+0x8>)
 8011be6:	f000 b8b3 	b.w	8011d50 <__retarget_lock_acquire_recursive>
 8011bea:	bf00      	nop
 8011bec:	200007f4 	.word	0x200007f4

08011bf0 <__sfp_lock_release>:
 8011bf0:	4801      	ldr	r0, [pc, #4]	; (8011bf8 <__sfp_lock_release+0x8>)
 8011bf2:	f000 b8ae 	b.w	8011d52 <__retarget_lock_release_recursive>
 8011bf6:	bf00      	nop
 8011bf8:	200007f4 	.word	0x200007f4

08011bfc <__sinit_lock_acquire>:
 8011bfc:	4801      	ldr	r0, [pc, #4]	; (8011c04 <__sinit_lock_acquire+0x8>)
 8011bfe:	f000 b8a7 	b.w	8011d50 <__retarget_lock_acquire_recursive>
 8011c02:	bf00      	nop
 8011c04:	200007ef 	.word	0x200007ef

08011c08 <__sinit_lock_release>:
 8011c08:	4801      	ldr	r0, [pc, #4]	; (8011c10 <__sinit_lock_release+0x8>)
 8011c0a:	f000 b8a2 	b.w	8011d52 <__retarget_lock_release_recursive>
 8011c0e:	bf00      	nop
 8011c10:	200007ef 	.word	0x200007ef

08011c14 <__sinit>:
 8011c14:	b510      	push	{r4, lr}
 8011c16:	4604      	mov	r4, r0
 8011c18:	f7ff fff0 	bl	8011bfc <__sinit_lock_acquire>
 8011c1c:	69a3      	ldr	r3, [r4, #24]
 8011c1e:	b11b      	cbz	r3, 8011c28 <__sinit+0x14>
 8011c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c24:	f7ff bff0 	b.w	8011c08 <__sinit_lock_release>
 8011c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8011c2e:	4b13      	ldr	r3, [pc, #76]	; (8011c7c <__sinit+0x68>)
 8011c30:	4a13      	ldr	r2, [pc, #76]	; (8011c80 <__sinit+0x6c>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8011c36:	42a3      	cmp	r3, r4
 8011c38:	bf04      	itt	eq
 8011c3a:	2301      	moveq	r3, #1
 8011c3c:	61a3      	streq	r3, [r4, #24]
 8011c3e:	4620      	mov	r0, r4
 8011c40:	f000 f820 	bl	8011c84 <__sfp>
 8011c44:	6060      	str	r0, [r4, #4]
 8011c46:	4620      	mov	r0, r4
 8011c48:	f000 f81c 	bl	8011c84 <__sfp>
 8011c4c:	60a0      	str	r0, [r4, #8]
 8011c4e:	4620      	mov	r0, r4
 8011c50:	f000 f818 	bl	8011c84 <__sfp>
 8011c54:	2200      	movs	r2, #0
 8011c56:	60e0      	str	r0, [r4, #12]
 8011c58:	2104      	movs	r1, #4
 8011c5a:	6860      	ldr	r0, [r4, #4]
 8011c5c:	f7ff ff82 	bl	8011b64 <std>
 8011c60:	68a0      	ldr	r0, [r4, #8]
 8011c62:	2201      	movs	r2, #1
 8011c64:	2109      	movs	r1, #9
 8011c66:	f7ff ff7d 	bl	8011b64 <std>
 8011c6a:	68e0      	ldr	r0, [r4, #12]
 8011c6c:	2202      	movs	r2, #2
 8011c6e:	2112      	movs	r1, #18
 8011c70:	f7ff ff78 	bl	8011b64 <std>
 8011c74:	2301      	movs	r3, #1
 8011c76:	61a3      	str	r3, [r4, #24]
 8011c78:	e7d2      	b.n	8011c20 <__sinit+0xc>
 8011c7a:	bf00      	nop
 8011c7c:	0802583c 	.word	0x0802583c
 8011c80:	08011bad 	.word	0x08011bad

08011c84 <__sfp>:
 8011c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c86:	4607      	mov	r7, r0
 8011c88:	f7ff ffac 	bl	8011be4 <__sfp_lock_acquire>
 8011c8c:	4b1e      	ldr	r3, [pc, #120]	; (8011d08 <__sfp+0x84>)
 8011c8e:	681e      	ldr	r6, [r3, #0]
 8011c90:	69b3      	ldr	r3, [r6, #24]
 8011c92:	b913      	cbnz	r3, 8011c9a <__sfp+0x16>
 8011c94:	4630      	mov	r0, r6
 8011c96:	f7ff ffbd 	bl	8011c14 <__sinit>
 8011c9a:	3648      	adds	r6, #72	; 0x48
 8011c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011ca0:	3b01      	subs	r3, #1
 8011ca2:	d503      	bpl.n	8011cac <__sfp+0x28>
 8011ca4:	6833      	ldr	r3, [r6, #0]
 8011ca6:	b30b      	cbz	r3, 8011cec <__sfp+0x68>
 8011ca8:	6836      	ldr	r6, [r6, #0]
 8011caa:	e7f7      	b.n	8011c9c <__sfp+0x18>
 8011cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011cb0:	b9d5      	cbnz	r5, 8011ce8 <__sfp+0x64>
 8011cb2:	4b16      	ldr	r3, [pc, #88]	; (8011d0c <__sfp+0x88>)
 8011cb4:	60e3      	str	r3, [r4, #12]
 8011cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011cba:	6665      	str	r5, [r4, #100]	; 0x64
 8011cbc:	f000 f847 	bl	8011d4e <__retarget_lock_init_recursive>
 8011cc0:	f7ff ff96 	bl	8011bf0 <__sfp_lock_release>
 8011cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011ccc:	6025      	str	r5, [r4, #0]
 8011cce:	61a5      	str	r5, [r4, #24]
 8011cd0:	2208      	movs	r2, #8
 8011cd2:	4629      	mov	r1, r5
 8011cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011cd8:	f7fb fd46 	bl	800d768 <memset>
 8011cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ce8:	3468      	adds	r4, #104	; 0x68
 8011cea:	e7d9      	b.n	8011ca0 <__sfp+0x1c>
 8011cec:	2104      	movs	r1, #4
 8011cee:	4638      	mov	r0, r7
 8011cf0:	f7ff ff62 	bl	8011bb8 <__sfmoreglue>
 8011cf4:	4604      	mov	r4, r0
 8011cf6:	6030      	str	r0, [r6, #0]
 8011cf8:	2800      	cmp	r0, #0
 8011cfa:	d1d5      	bne.n	8011ca8 <__sfp+0x24>
 8011cfc:	f7ff ff78 	bl	8011bf0 <__sfp_lock_release>
 8011d00:	230c      	movs	r3, #12
 8011d02:	603b      	str	r3, [r7, #0]
 8011d04:	e7ee      	b.n	8011ce4 <__sfp+0x60>
 8011d06:	bf00      	nop
 8011d08:	0802583c 	.word	0x0802583c
 8011d0c:	ffff0001 	.word	0xffff0001

08011d10 <_fwalk_reent>:
 8011d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d14:	4606      	mov	r6, r0
 8011d16:	4688      	mov	r8, r1
 8011d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011d1c:	2700      	movs	r7, #0
 8011d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d22:	f1b9 0901 	subs.w	r9, r9, #1
 8011d26:	d505      	bpl.n	8011d34 <_fwalk_reent+0x24>
 8011d28:	6824      	ldr	r4, [r4, #0]
 8011d2a:	2c00      	cmp	r4, #0
 8011d2c:	d1f7      	bne.n	8011d1e <_fwalk_reent+0xe>
 8011d2e:	4638      	mov	r0, r7
 8011d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d34:	89ab      	ldrh	r3, [r5, #12]
 8011d36:	2b01      	cmp	r3, #1
 8011d38:	d907      	bls.n	8011d4a <_fwalk_reent+0x3a>
 8011d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d3e:	3301      	adds	r3, #1
 8011d40:	d003      	beq.n	8011d4a <_fwalk_reent+0x3a>
 8011d42:	4629      	mov	r1, r5
 8011d44:	4630      	mov	r0, r6
 8011d46:	47c0      	blx	r8
 8011d48:	4307      	orrs	r7, r0
 8011d4a:	3568      	adds	r5, #104	; 0x68
 8011d4c:	e7e9      	b.n	8011d22 <_fwalk_reent+0x12>

08011d4e <__retarget_lock_init_recursive>:
 8011d4e:	4770      	bx	lr

08011d50 <__retarget_lock_acquire_recursive>:
 8011d50:	4770      	bx	lr

08011d52 <__retarget_lock_release_recursive>:
 8011d52:	4770      	bx	lr

08011d54 <__swhatbuf_r>:
 8011d54:	b570      	push	{r4, r5, r6, lr}
 8011d56:	460e      	mov	r6, r1
 8011d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d5c:	2900      	cmp	r1, #0
 8011d5e:	b096      	sub	sp, #88	; 0x58
 8011d60:	4614      	mov	r4, r2
 8011d62:	461d      	mov	r5, r3
 8011d64:	da07      	bge.n	8011d76 <__swhatbuf_r+0x22>
 8011d66:	2300      	movs	r3, #0
 8011d68:	602b      	str	r3, [r5, #0]
 8011d6a:	89b3      	ldrh	r3, [r6, #12]
 8011d6c:	061a      	lsls	r2, r3, #24
 8011d6e:	d410      	bmi.n	8011d92 <__swhatbuf_r+0x3e>
 8011d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d74:	e00e      	b.n	8011d94 <__swhatbuf_r+0x40>
 8011d76:	466a      	mov	r2, sp
 8011d78:	f000 f946 	bl	8012008 <_fstat_r>
 8011d7c:	2800      	cmp	r0, #0
 8011d7e:	dbf2      	blt.n	8011d66 <__swhatbuf_r+0x12>
 8011d80:	9a01      	ldr	r2, [sp, #4]
 8011d82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d8a:	425a      	negs	r2, r3
 8011d8c:	415a      	adcs	r2, r3
 8011d8e:	602a      	str	r2, [r5, #0]
 8011d90:	e7ee      	b.n	8011d70 <__swhatbuf_r+0x1c>
 8011d92:	2340      	movs	r3, #64	; 0x40
 8011d94:	2000      	movs	r0, #0
 8011d96:	6023      	str	r3, [r4, #0]
 8011d98:	b016      	add	sp, #88	; 0x58
 8011d9a:	bd70      	pop	{r4, r5, r6, pc}

08011d9c <__smakebuf_r>:
 8011d9c:	898b      	ldrh	r3, [r1, #12]
 8011d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011da0:	079d      	lsls	r5, r3, #30
 8011da2:	4606      	mov	r6, r0
 8011da4:	460c      	mov	r4, r1
 8011da6:	d507      	bpl.n	8011db8 <__smakebuf_r+0x1c>
 8011da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011dac:	6023      	str	r3, [r4, #0]
 8011dae:	6123      	str	r3, [r4, #16]
 8011db0:	2301      	movs	r3, #1
 8011db2:	6163      	str	r3, [r4, #20]
 8011db4:	b002      	add	sp, #8
 8011db6:	bd70      	pop	{r4, r5, r6, pc}
 8011db8:	ab01      	add	r3, sp, #4
 8011dba:	466a      	mov	r2, sp
 8011dbc:	f7ff ffca 	bl	8011d54 <__swhatbuf_r>
 8011dc0:	9900      	ldr	r1, [sp, #0]
 8011dc2:	4605      	mov	r5, r0
 8011dc4:	4630      	mov	r0, r6
 8011dc6:	f7ff f9fb 	bl	80111c0 <_malloc_r>
 8011dca:	b948      	cbnz	r0, 8011de0 <__smakebuf_r+0x44>
 8011dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dd0:	059a      	lsls	r2, r3, #22
 8011dd2:	d4ef      	bmi.n	8011db4 <__smakebuf_r+0x18>
 8011dd4:	f023 0303 	bic.w	r3, r3, #3
 8011dd8:	f043 0302 	orr.w	r3, r3, #2
 8011ddc:	81a3      	strh	r3, [r4, #12]
 8011dde:	e7e3      	b.n	8011da8 <__smakebuf_r+0xc>
 8011de0:	4b0d      	ldr	r3, [pc, #52]	; (8011e18 <__smakebuf_r+0x7c>)
 8011de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8011de4:	89a3      	ldrh	r3, [r4, #12]
 8011de6:	6020      	str	r0, [r4, #0]
 8011de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dec:	81a3      	strh	r3, [r4, #12]
 8011dee:	9b00      	ldr	r3, [sp, #0]
 8011df0:	6163      	str	r3, [r4, #20]
 8011df2:	9b01      	ldr	r3, [sp, #4]
 8011df4:	6120      	str	r0, [r4, #16]
 8011df6:	b15b      	cbz	r3, 8011e10 <__smakebuf_r+0x74>
 8011df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	f000 f915 	bl	801202c <_isatty_r>
 8011e02:	b128      	cbz	r0, 8011e10 <__smakebuf_r+0x74>
 8011e04:	89a3      	ldrh	r3, [r4, #12]
 8011e06:	f023 0303 	bic.w	r3, r3, #3
 8011e0a:	f043 0301 	orr.w	r3, r3, #1
 8011e0e:	81a3      	strh	r3, [r4, #12]
 8011e10:	89a0      	ldrh	r0, [r4, #12]
 8011e12:	4305      	orrs	r5, r0
 8011e14:	81a5      	strh	r5, [r4, #12]
 8011e16:	e7cd      	b.n	8011db4 <__smakebuf_r+0x18>
 8011e18:	08011bad 	.word	0x08011bad

08011e1c <memmove>:
 8011e1c:	4288      	cmp	r0, r1
 8011e1e:	b510      	push	{r4, lr}
 8011e20:	eb01 0402 	add.w	r4, r1, r2
 8011e24:	d902      	bls.n	8011e2c <memmove+0x10>
 8011e26:	4284      	cmp	r4, r0
 8011e28:	4623      	mov	r3, r4
 8011e2a:	d807      	bhi.n	8011e3c <memmove+0x20>
 8011e2c:	1e43      	subs	r3, r0, #1
 8011e2e:	42a1      	cmp	r1, r4
 8011e30:	d008      	beq.n	8011e44 <memmove+0x28>
 8011e32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e3a:	e7f8      	b.n	8011e2e <memmove+0x12>
 8011e3c:	4402      	add	r2, r0
 8011e3e:	4601      	mov	r1, r0
 8011e40:	428a      	cmp	r2, r1
 8011e42:	d100      	bne.n	8011e46 <memmove+0x2a>
 8011e44:	bd10      	pop	{r4, pc}
 8011e46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e4e:	e7f7      	b.n	8011e40 <memmove+0x24>

08011e50 <__malloc_lock>:
 8011e50:	4801      	ldr	r0, [pc, #4]	; (8011e58 <__malloc_lock+0x8>)
 8011e52:	f7ff bf7d 	b.w	8011d50 <__retarget_lock_acquire_recursive>
 8011e56:	bf00      	nop
 8011e58:	200007f0 	.word	0x200007f0

08011e5c <__malloc_unlock>:
 8011e5c:	4801      	ldr	r0, [pc, #4]	; (8011e64 <__malloc_unlock+0x8>)
 8011e5e:	f7ff bf78 	b.w	8011d52 <__retarget_lock_release_recursive>
 8011e62:	bf00      	nop
 8011e64:	200007f0 	.word	0x200007f0

08011e68 <_realloc_r>:
 8011e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e6a:	4607      	mov	r7, r0
 8011e6c:	4614      	mov	r4, r2
 8011e6e:	460e      	mov	r6, r1
 8011e70:	b921      	cbnz	r1, 8011e7c <_realloc_r+0x14>
 8011e72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011e76:	4611      	mov	r1, r2
 8011e78:	f7ff b9a2 	b.w	80111c0 <_malloc_r>
 8011e7c:	b922      	cbnz	r2, 8011e88 <_realloc_r+0x20>
 8011e7e:	f7ff f94f 	bl	8011120 <_free_r>
 8011e82:	4625      	mov	r5, r4
 8011e84:	4628      	mov	r0, r5
 8011e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e88:	f000 f8f2 	bl	8012070 <_malloc_usable_size_r>
 8011e8c:	42a0      	cmp	r0, r4
 8011e8e:	d20f      	bcs.n	8011eb0 <_realloc_r+0x48>
 8011e90:	4621      	mov	r1, r4
 8011e92:	4638      	mov	r0, r7
 8011e94:	f7ff f994 	bl	80111c0 <_malloc_r>
 8011e98:	4605      	mov	r5, r0
 8011e9a:	2800      	cmp	r0, #0
 8011e9c:	d0f2      	beq.n	8011e84 <_realloc_r+0x1c>
 8011e9e:	4631      	mov	r1, r6
 8011ea0:	4622      	mov	r2, r4
 8011ea2:	f7fe fc65 	bl	8010770 <memcpy>
 8011ea6:	4631      	mov	r1, r6
 8011ea8:	4638      	mov	r0, r7
 8011eaa:	f7ff f939 	bl	8011120 <_free_r>
 8011eae:	e7e9      	b.n	8011e84 <_realloc_r+0x1c>
 8011eb0:	4635      	mov	r5, r6
 8011eb2:	e7e7      	b.n	8011e84 <_realloc_r+0x1c>

08011eb4 <_raise_r>:
 8011eb4:	291f      	cmp	r1, #31
 8011eb6:	b538      	push	{r3, r4, r5, lr}
 8011eb8:	4604      	mov	r4, r0
 8011eba:	460d      	mov	r5, r1
 8011ebc:	d904      	bls.n	8011ec8 <_raise_r+0x14>
 8011ebe:	2316      	movs	r3, #22
 8011ec0:	6003      	str	r3, [r0, #0]
 8011ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ec6:	bd38      	pop	{r3, r4, r5, pc}
 8011ec8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011eca:	b112      	cbz	r2, 8011ed2 <_raise_r+0x1e>
 8011ecc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ed0:	b94b      	cbnz	r3, 8011ee6 <_raise_r+0x32>
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	f000 f830 	bl	8011f38 <_getpid_r>
 8011ed8:	462a      	mov	r2, r5
 8011eda:	4601      	mov	r1, r0
 8011edc:	4620      	mov	r0, r4
 8011ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ee2:	f000 b817 	b.w	8011f14 <_kill_r>
 8011ee6:	2b01      	cmp	r3, #1
 8011ee8:	d00a      	beq.n	8011f00 <_raise_r+0x4c>
 8011eea:	1c59      	adds	r1, r3, #1
 8011eec:	d103      	bne.n	8011ef6 <_raise_r+0x42>
 8011eee:	2316      	movs	r3, #22
 8011ef0:	6003      	str	r3, [r0, #0]
 8011ef2:	2001      	movs	r0, #1
 8011ef4:	e7e7      	b.n	8011ec6 <_raise_r+0x12>
 8011ef6:	2400      	movs	r4, #0
 8011ef8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011efc:	4628      	mov	r0, r5
 8011efe:	4798      	blx	r3
 8011f00:	2000      	movs	r0, #0
 8011f02:	e7e0      	b.n	8011ec6 <_raise_r+0x12>

08011f04 <raise>:
 8011f04:	4b02      	ldr	r3, [pc, #8]	; (8011f10 <raise+0xc>)
 8011f06:	4601      	mov	r1, r0
 8011f08:	6818      	ldr	r0, [r3, #0]
 8011f0a:	f7ff bfd3 	b.w	8011eb4 <_raise_r>
 8011f0e:	bf00      	nop
 8011f10:	20000040 	.word	0x20000040

08011f14 <_kill_r>:
 8011f14:	b538      	push	{r3, r4, r5, lr}
 8011f16:	4d07      	ldr	r5, [pc, #28]	; (8011f34 <_kill_r+0x20>)
 8011f18:	2300      	movs	r3, #0
 8011f1a:	4604      	mov	r4, r0
 8011f1c:	4608      	mov	r0, r1
 8011f1e:	4611      	mov	r1, r2
 8011f20:	602b      	str	r3, [r5, #0]
 8011f22:	f7f4 fa7b 	bl	800641c <_kill>
 8011f26:	1c43      	adds	r3, r0, #1
 8011f28:	d102      	bne.n	8011f30 <_kill_r+0x1c>
 8011f2a:	682b      	ldr	r3, [r5, #0]
 8011f2c:	b103      	cbz	r3, 8011f30 <_kill_r+0x1c>
 8011f2e:	6023      	str	r3, [r4, #0]
 8011f30:	bd38      	pop	{r3, r4, r5, pc}
 8011f32:	bf00      	nop
 8011f34:	200007f8 	.word	0x200007f8

08011f38 <_getpid_r>:
 8011f38:	f7f4 ba68 	b.w	800640c <_getpid>

08011f3c <__sread>:
 8011f3c:	b510      	push	{r4, lr}
 8011f3e:	460c      	mov	r4, r1
 8011f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f44:	f000 f89c 	bl	8012080 <_read_r>
 8011f48:	2800      	cmp	r0, #0
 8011f4a:	bfab      	itete	ge
 8011f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8011f50:	181b      	addge	r3, r3, r0
 8011f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011f56:	bfac      	ite	ge
 8011f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8011f5a:	81a3      	strhlt	r3, [r4, #12]
 8011f5c:	bd10      	pop	{r4, pc}

08011f5e <__swrite>:
 8011f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f62:	461f      	mov	r7, r3
 8011f64:	898b      	ldrh	r3, [r1, #12]
 8011f66:	05db      	lsls	r3, r3, #23
 8011f68:	4605      	mov	r5, r0
 8011f6a:	460c      	mov	r4, r1
 8011f6c:	4616      	mov	r6, r2
 8011f6e:	d505      	bpl.n	8011f7c <__swrite+0x1e>
 8011f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f74:	2302      	movs	r3, #2
 8011f76:	2200      	movs	r2, #0
 8011f78:	f000 f868 	bl	801204c <_lseek_r>
 8011f7c:	89a3      	ldrh	r3, [r4, #12]
 8011f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011f86:	81a3      	strh	r3, [r4, #12]
 8011f88:	4632      	mov	r2, r6
 8011f8a:	463b      	mov	r3, r7
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f92:	f000 b817 	b.w	8011fc4 <_write_r>

08011f96 <__sseek>:
 8011f96:	b510      	push	{r4, lr}
 8011f98:	460c      	mov	r4, r1
 8011f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f9e:	f000 f855 	bl	801204c <_lseek_r>
 8011fa2:	1c43      	adds	r3, r0, #1
 8011fa4:	89a3      	ldrh	r3, [r4, #12]
 8011fa6:	bf15      	itete	ne
 8011fa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011faa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011fae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011fb2:	81a3      	strheq	r3, [r4, #12]
 8011fb4:	bf18      	it	ne
 8011fb6:	81a3      	strhne	r3, [r4, #12]
 8011fb8:	bd10      	pop	{r4, pc}

08011fba <__sclose>:
 8011fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fbe:	f000 b813 	b.w	8011fe8 <_close_r>
	...

08011fc4 <_write_r>:
 8011fc4:	b538      	push	{r3, r4, r5, lr}
 8011fc6:	4d07      	ldr	r5, [pc, #28]	; (8011fe4 <_write_r+0x20>)
 8011fc8:	4604      	mov	r4, r0
 8011fca:	4608      	mov	r0, r1
 8011fcc:	4611      	mov	r1, r2
 8011fce:	2200      	movs	r2, #0
 8011fd0:	602a      	str	r2, [r5, #0]
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	f7f4 fa59 	bl	800648a <_write>
 8011fd8:	1c43      	adds	r3, r0, #1
 8011fda:	d102      	bne.n	8011fe2 <_write_r+0x1e>
 8011fdc:	682b      	ldr	r3, [r5, #0]
 8011fde:	b103      	cbz	r3, 8011fe2 <_write_r+0x1e>
 8011fe0:	6023      	str	r3, [r4, #0]
 8011fe2:	bd38      	pop	{r3, r4, r5, pc}
 8011fe4:	200007f8 	.word	0x200007f8

08011fe8 <_close_r>:
 8011fe8:	b538      	push	{r3, r4, r5, lr}
 8011fea:	4d06      	ldr	r5, [pc, #24]	; (8012004 <_close_r+0x1c>)
 8011fec:	2300      	movs	r3, #0
 8011fee:	4604      	mov	r4, r0
 8011ff0:	4608      	mov	r0, r1
 8011ff2:	602b      	str	r3, [r5, #0]
 8011ff4:	f7f4 fa65 	bl	80064c2 <_close>
 8011ff8:	1c43      	adds	r3, r0, #1
 8011ffa:	d102      	bne.n	8012002 <_close_r+0x1a>
 8011ffc:	682b      	ldr	r3, [r5, #0]
 8011ffe:	b103      	cbz	r3, 8012002 <_close_r+0x1a>
 8012000:	6023      	str	r3, [r4, #0]
 8012002:	bd38      	pop	{r3, r4, r5, pc}
 8012004:	200007f8 	.word	0x200007f8

08012008 <_fstat_r>:
 8012008:	b538      	push	{r3, r4, r5, lr}
 801200a:	4d07      	ldr	r5, [pc, #28]	; (8012028 <_fstat_r+0x20>)
 801200c:	2300      	movs	r3, #0
 801200e:	4604      	mov	r4, r0
 8012010:	4608      	mov	r0, r1
 8012012:	4611      	mov	r1, r2
 8012014:	602b      	str	r3, [r5, #0]
 8012016:	f7f4 fa60 	bl	80064da <_fstat>
 801201a:	1c43      	adds	r3, r0, #1
 801201c:	d102      	bne.n	8012024 <_fstat_r+0x1c>
 801201e:	682b      	ldr	r3, [r5, #0]
 8012020:	b103      	cbz	r3, 8012024 <_fstat_r+0x1c>
 8012022:	6023      	str	r3, [r4, #0]
 8012024:	bd38      	pop	{r3, r4, r5, pc}
 8012026:	bf00      	nop
 8012028:	200007f8 	.word	0x200007f8

0801202c <_isatty_r>:
 801202c:	b538      	push	{r3, r4, r5, lr}
 801202e:	4d06      	ldr	r5, [pc, #24]	; (8012048 <_isatty_r+0x1c>)
 8012030:	2300      	movs	r3, #0
 8012032:	4604      	mov	r4, r0
 8012034:	4608      	mov	r0, r1
 8012036:	602b      	str	r3, [r5, #0]
 8012038:	f7f4 fa5f 	bl	80064fa <_isatty>
 801203c:	1c43      	adds	r3, r0, #1
 801203e:	d102      	bne.n	8012046 <_isatty_r+0x1a>
 8012040:	682b      	ldr	r3, [r5, #0]
 8012042:	b103      	cbz	r3, 8012046 <_isatty_r+0x1a>
 8012044:	6023      	str	r3, [r4, #0]
 8012046:	bd38      	pop	{r3, r4, r5, pc}
 8012048:	200007f8 	.word	0x200007f8

0801204c <_lseek_r>:
 801204c:	b538      	push	{r3, r4, r5, lr}
 801204e:	4d07      	ldr	r5, [pc, #28]	; (801206c <_lseek_r+0x20>)
 8012050:	4604      	mov	r4, r0
 8012052:	4608      	mov	r0, r1
 8012054:	4611      	mov	r1, r2
 8012056:	2200      	movs	r2, #0
 8012058:	602a      	str	r2, [r5, #0]
 801205a:	461a      	mov	r2, r3
 801205c:	f7f4 fa58 	bl	8006510 <_lseek>
 8012060:	1c43      	adds	r3, r0, #1
 8012062:	d102      	bne.n	801206a <_lseek_r+0x1e>
 8012064:	682b      	ldr	r3, [r5, #0]
 8012066:	b103      	cbz	r3, 801206a <_lseek_r+0x1e>
 8012068:	6023      	str	r3, [r4, #0]
 801206a:	bd38      	pop	{r3, r4, r5, pc}
 801206c:	200007f8 	.word	0x200007f8

08012070 <_malloc_usable_size_r>:
 8012070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012074:	1f18      	subs	r0, r3, #4
 8012076:	2b00      	cmp	r3, #0
 8012078:	bfbc      	itt	lt
 801207a:	580b      	ldrlt	r3, [r1, r0]
 801207c:	18c0      	addlt	r0, r0, r3
 801207e:	4770      	bx	lr

08012080 <_read_r>:
 8012080:	b538      	push	{r3, r4, r5, lr}
 8012082:	4d07      	ldr	r5, [pc, #28]	; (80120a0 <_read_r+0x20>)
 8012084:	4604      	mov	r4, r0
 8012086:	4608      	mov	r0, r1
 8012088:	4611      	mov	r1, r2
 801208a:	2200      	movs	r2, #0
 801208c:	602a      	str	r2, [r5, #0]
 801208e:	461a      	mov	r2, r3
 8012090:	f7f4 f9de 	bl	8006450 <_read>
 8012094:	1c43      	adds	r3, r0, #1
 8012096:	d102      	bne.n	801209e <_read_r+0x1e>
 8012098:	682b      	ldr	r3, [r5, #0]
 801209a:	b103      	cbz	r3, 801209e <_read_r+0x1e>
 801209c:	6023      	str	r3, [r4, #0]
 801209e:	bd38      	pop	{r3, r4, r5, pc}
 80120a0:	200007f8 	.word	0x200007f8

080120a4 <_init>:
 80120a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120a6:	bf00      	nop
 80120a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120aa:	bc08      	pop	{r3}
 80120ac:	469e      	mov	lr, r3
 80120ae:	4770      	bx	lr

080120b0 <_fini>:
 80120b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120b2:	bf00      	nop
 80120b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120b6:	bc08      	pop	{r3}
 80120b8:	469e      	mov	lr, r3
 80120ba:	4770      	bx	lr
