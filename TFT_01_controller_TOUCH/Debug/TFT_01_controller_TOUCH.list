
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013b80  080108a0  080108a0  000208a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024420  08024420  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08024420  08024420  00034420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024428  08024428  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024428  08024428  00034428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802442c  0802442c  0003442c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08024430  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000214  08024644  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  08024644  000406dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000215ab  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004874  00000000  00000000  000617ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  00066068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00006ef6  00000000  00000000  00067858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023555  00000000  00000000  0006e74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00096db6  00000000  00000000  00091ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00128a59  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001658  00000000  00000000  00128ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077c4  00000000  00000000  0012a108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010884 	.word	0x08010884

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	08010884 	.word	0x08010884

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000027c 	.word	0x2000027c

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	2000027c 	.word	0x2000027c

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	2000027c 	.word	0x2000027c

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	2000027c 	.word	0x2000027c

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	2000027c 	.word	0x2000027c

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000027c 	.word	0x2000027c

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f004 f8f2 	bl	8005e18 <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	20000280 	.word	0x20000280

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f005 f823 	bl	8006cf8 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f005 f81d 	bl	8006cf8 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f005 f812 	bl	8006cf8 <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f004 ffff 	bl	8006cf8 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f004 fff9 	bl	8006cf8 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f004 ffed 	bl	8006cf8 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f004 ffe3 	bl	8006cf8 <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f004 fee8 	bl	8006cf8 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f004 fee2 	bl	8006cf8 <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f004 feab 	bl	8006cf8 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	20000280 	.word	0x20000280

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f004 fe8b 	bl	8006cf8 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f004 fe82 	bl	8006cf8 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000280 	.word	0x20000280
 8002054:	080137fc 	.word	0x080137fc
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f004 fe45 	bl	8006cf8 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f007 ffbe 	bl	8009ffe <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f004 fe35 	bl	8006cf8 <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000284 	.word	0x20000284
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002ad 	.word	0x200002ad

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f003 fd92 	bl	8005e00 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f004 fcc9 	bl	8006cc8 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f003 fd5d 	bl	8005e00 <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f003 fd57 	bl	8005e00 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f004 fc8b 	bl	8006cc8 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f003 fd1f 	bl	8005e00 <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 fecc 	bl	8006184 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 feb7 	bl	8006166 <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f003 fe86 	bl	8006116 <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002ad 	.word	0x200002ad
 8002420:	200002b0 	.word	0x200002b0
 8002424:	200002ac 	.word	0x200002ac
 8002428:	20000284 	.word	0x20000284
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f003 fe76 	bl	8006132 <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002ad 	.word	0x200002ad

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f004 fc3d 	bl	8006cf8 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f003 fcbf 	bl	8005e18 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002ad 	.word	0x200002ad
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <MX_DMA_Init+0x4c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a0f      	ldr	r2, [pc, #60]	; (8002540 <MX_DMA_Init+0x4c>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <MX_DMA_Init+0x4c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2010      	movs	r0, #16
 800251c:	f003 fddf 	bl	80060de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002520:	2010      	movs	r0, #16
 8002522:	f003 fdf8 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	2011      	movs	r0, #17
 800252c:	f003 fdd7 	bl	80060de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002530:	2011      	movs	r0, #17
 8002532:	f003 fdf0 	bl	8006116 <HAL_NVIC_EnableIRQ>

}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800

08002544 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 800254c:	4a09      	ldr	r2, [pc, #36]	; (8002574 <DS3231_Init+0x30>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002552:	2000      	movs	r0, #0
 8002554:	f000 f8ca 	bl	80026ec <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002558:	2000      	movs	r0, #0
 800255a:	f000 f88e 	bl	800267a <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800255e:	f000 f8e7 	bl	8002730 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002562:	f000 f8ad 	bl	80026c0 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002566:	2001      	movs	r0, #1
 8002568:	f000 f846 	bl	80025f8 <DS3231_SetInterruptMode>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200002b4 	.word	0x200002b4

08002578 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af02      	add	r7, sp, #8
 800257e:	4603      	mov	r3, r0
 8002580:	460a      	mov	r2, r1
 8002582:	71fb      	strb	r3, [r7, #7]
 8002584:	4613      	mov	r3, r2
 8002586:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	733b      	strb	r3, [r7, #12]
 800258c:	79bb      	ldrb	r3, [r7, #6]
 800258e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <DS3231_SetRegByte+0x38>)
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	f107 020c 	add.w	r2, r7, #12
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2302      	movs	r3, #2
 80025a0:	21d0      	movs	r1, #208	; 0xd0
 80025a2:	f004 fd39 	bl	8007018 <HAL_I2C_Master_Transmit>
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200002b4 	.word	0x200002b4

080025b4 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <DS3231_GetRegByte+0x40>)
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	1dfa      	adds	r2, r7, #7
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2301      	movs	r3, #1
 80025cc:	21d0      	movs	r1, #208	; 0xd0
 80025ce:	f004 fd23 	bl	8007018 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <DS3231_GetRegByte+0x40>)
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	f107 020f 	add.w	r2, r7, #15
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2301      	movs	r3, #1
 80025e2:	21d0      	movs	r1, #208	; 0xd0
 80025e4:	f004 fe16 	bl	8007214 <HAL_I2C_Master_Receive>
	return val;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200002b4 	.word	0x200002b4

080025f8 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002602:	200e      	movs	r0, #14
 8002604:	f7ff ffd6 	bl	80025b4 <DS3231_GetRegByte>
 8002608:	4603      	mov	r3, r0
 800260a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800260c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002610:	f023 0304 	bic.w	r3, r3, #4
 8002614:	b25a      	sxtb	r2, r3
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	b25b      	sxtb	r3, r3
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	b25b      	sxtb	r3, r3
 8002622:	4313      	orrs	r3, r2
 8002624:	b25b      	sxtb	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	4619      	mov	r1, r3
 800262a:	200e      	movs	r0, #14
 800262c:	f7ff ffa4 	bl	8002578 <DS3231_SetRegByte>
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002642:	200e      	movs	r0, #14
 8002644:	f7ff ffb6 	bl	80025b4 <DS3231_GetRegByte>
 8002648:	4603      	mov	r3, r0
 800264a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 800264c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002654:	b25b      	sxtb	r3, r3
 8002656:	79fa      	ldrb	r2, [r7, #7]
 8002658:	2a00      	cmp	r2, #0
 800265a:	d102      	bne.n	8002662 <DS3231_EnableOscillator+0x2a>
 800265c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002660:	e000      	b.n	8002664 <DS3231_EnableOscillator+0x2c>
 8002662:	2200      	movs	r2, #0
 8002664:	4313      	orrs	r3, r2
 8002666:	b25b      	sxtb	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4619      	mov	r1, r3
 800266c:	200e      	movs	r0, #14
 800266e:	f7ff ff83 	bl	8002578 <DS3231_SetRegByte>
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002684:	200e      	movs	r0, #14
 8002686:	f7ff ff95 	bl	80025b4 <DS3231_GetRegByte>
 800268a:	4603      	mov	r3, r0
 800268c:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 800268e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002692:	f023 0302 	bic.w	r3, r3, #2
 8002696:	b25a      	sxtb	r2, r3
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	b25b      	sxtb	r3, r3
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	b25b      	sxtb	r3, r3
 80026a4:	4313      	orrs	r3, r2
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4619      	mov	r1, r3
 80026ac:	200e      	movs	r0, #14
 80026ae:	f7ff ff63 	bl	8002578 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f7ff ffa0 	bl	80025f8 <DS3231_SetInterruptMode>
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80026c6:	200f      	movs	r0, #15
 80026c8:	f7ff ff74 	bl	80025b4 <DS3231_GetRegByte>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f023 0302 	bic.w	r3, r3, #2
 80026d2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f023 0302 	bic.w	r3, r3, #2
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4619      	mov	r1, r3
 80026de:	200f      	movs	r0, #15
 80026e0:	f7ff ff4a 	bl	8002578 <DS3231_SetRegByte>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80026f6:	200e      	movs	r0, #14
 80026f8:	f7ff ff5c 	bl	80025b4 <DS3231_GetRegByte>
 80026fc:	4603      	mov	r3, r0
 80026fe:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	b25a      	sxtb	r2, r3
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	b25b      	sxtb	r3, r3
 8002714:	4313      	orrs	r3, r2
 8002716:	b25b      	sxtb	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4619      	mov	r1, r3
 800271c:	200e      	movs	r0, #14
 800271e:	f7ff ff2b 	bl	8002578 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002722:	2001      	movs	r0, #1
 8002724:	f7ff ff68 	bl	80025f8 <DS3231_SetInterruptMode>
}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002736:	200f      	movs	r0, #15
 8002738:	f7ff ff3c 	bl	80025b4 <DS3231_GetRegByte>
 800273c:	4603      	mov	r3, r0
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	4619      	mov	r1, r3
 800274e:	200f      	movs	r0, #15
 8002750:	f7ff ff12 	bl	8002578 <DS3231_SetRegByte>
}
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002760:	2002      	movs	r0, #2
 8002762:	f7ff ff27 	bl	80025b4 <DS3231_GetRegByte>
 8002766:	4603      	mov	r3, r0
 8002768:	4618      	mov	r0, r3
 800276a:	f000 f848 	bl	80027fe <DS3231_DecodeBCD>
 800276e:	4603      	mov	r3, r0
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}

08002774 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002778:	2001      	movs	r0, #1
 800277a:	f7ff ff1b 	bl	80025b4 <DS3231_GetRegByte>
 800277e:	4603      	mov	r3, r0
 8002780:	4618      	mov	r0, r3
 8002782:	f000 f83c 	bl	80027fe <DS3231_DecodeBCD>
 8002786:	4603      	mov	r3, r0
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}

0800278c <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800279c:	b2db      	uxtb	r3, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f846 	bl	8002830 <DS3231_EncodeBCD>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4619      	mov	r1, r3
 80027a8:	2002      	movs	r0, #2
 80027aa:	f7ff fee5 	bl	8002578 <DS3231_SetRegByte>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f834 	bl	8002830 <DS3231_EncodeBCD>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4619      	mov	r1, r3
 80027cc:	2001      	movs	r0, #1
 80027ce:	f7ff fed3 	bl	8002578 <DS3231_SetRegByte>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f822 	bl	8002830 <DS3231_EncodeBCD>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4619      	mov	r1, r3
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7ff fec1 	bl	8002578 <DS3231_SetRegByte>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	0092      	lsls	r2, r2, #2
 8002812:	4413      	add	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	b2db      	uxtb	r3, r3
 8002820:	4413      	add	r3, r2
 8002822:	b2db      	uxtb	r3, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 800283a:	79fa      	ldrb	r2, [r7, #7]
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <DS3231_EncodeBCD+0x40>)
 800283e:	fba3 1302 	umull	r1, r3, r3, r2
 8002842:	08d9      	lsrs	r1, r3, #3
 8002844:	460b      	mov	r3, r1
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	b2da      	uxtb	r2, r3
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	4907      	ldr	r1, [pc, #28]	; (8002870 <DS3231_EncodeBCD+0x40>)
 8002854:	fba1 1303 	umull	r1, r3, r1, r3
 8002858:	08db      	lsrs	r3, r3, #3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	b2db      	uxtb	r3, r3
 8002860:	4413      	add	r3, r2
 8002862:	b2db      	uxtb	r3, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	cccccccd 	.word	0xcccccccd

08002874 <system_init>:
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
uint8_t system_init(){
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800287a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800287e:	f7ff fb3b 	bl	8001ef8 <ILI9341_ClearDisplay>
	  ILI9341_DrawImage(40, 50, logo, 240, 140);
 8002882:	238c      	movs	r3, #140	; 0x8c
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	23f0      	movs	r3, #240	; 0xf0
 8002888:	4a6b      	ldr	r2, [pc, #428]	; (8002a38 <system_init+0x1c4>)
 800288a:	2132      	movs	r1, #50	; 0x32
 800288c:	2028      	movs	r0, #40	; 0x28
 800288e:	f7ff fb08 	bl	8001ea2 <ILI9341_DrawImage>
//	  GFX_Image(40, 50, logo, 240, 140); //usunieta wolniejsza wersja rysowania

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002892:	486a      	ldr	r0, [pc, #424]	; (8002a3c <system_init+0x1c8>)
 8002894:	f7fe ff2c 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 8002898:	4969      	ldr	r1, [pc, #420]	; (8002a40 <system_init+0x1cc>)
 800289a:	486a      	ldr	r0, [pc, #424]	; (8002a44 <system_init+0x1d0>)
 800289c:	f00a f9da 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, 60, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 80028a0:	2300      	movs	r3, #0
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	2300      	movs	r3, #0
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2300      	movs	r3, #0
 80028aa:	2214      	movs	r2, #20
 80028ac:	213c      	movs	r1, #60	; 0x3c
 80028ae:	4865      	ldr	r0, [pc, #404]	; (8002a44 <system_init+0x1d0>)
 80028b0:	f7ff f938 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  GFX_DrawRoundRectangle(60, 200, 20, 20, 5, ILI9341_RED);
 80028b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	2305      	movs	r3, #5
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2314      	movs	r3, #20
 80028c0:	2214      	movs	r2, #20
 80028c2:	21c8      	movs	r1, #200	; 0xc8
 80028c4:	203c      	movs	r0, #60	; 0x3c
 80028c6:	f7fe fe45 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 200, 20, 20, 5, ILI9341_RED);
 80028ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	2305      	movs	r3, #5
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2314      	movs	r3, #20
 80028d6:	2214      	movs	r2, #20
 80028d8:	21c8      	movs	r1, #200	; 0xc8
 80028da:	205a      	movs	r0, #90	; 0x5a
 80028dc:	f7fe fe3a 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 200, 20, 20, 5, ILI9341_RED);
 80028e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	2305      	movs	r3, #5
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2314      	movs	r3, #20
 80028ec:	2214      	movs	r2, #20
 80028ee:	21c8      	movs	r1, #200	; 0xc8
 80028f0:	2078      	movs	r0, #120	; 0x78
 80028f2:	f7fe fe2f 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 200, 20, 20, 5, ILI9341_RED);
 80028f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	2305      	movs	r3, #5
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2314      	movs	r3, #20
 8002902:	2214      	movs	r2, #20
 8002904:	21c8      	movs	r1, #200	; 0xc8
 8002906:	2096      	movs	r0, #150	; 0x96
 8002908:	f7fe fe24 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 200, 20, 20, 5, ILI9341_RED);
 800290c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	2305      	movs	r3, #5
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	2314      	movs	r3, #20
 8002918:	2214      	movs	r2, #20
 800291a:	21c8      	movs	r1, #200	; 0xc8
 800291c:	20b4      	movs	r0, #180	; 0xb4
 800291e:	f7fe fe19 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 200, 20, 20, 5, ILI9341_RED);
 8002922:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	2305      	movs	r3, #5
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2314      	movs	r3, #20
 800292e:	2214      	movs	r2, #20
 8002930:	21c8      	movs	r1, #200	; 0xc8
 8002932:	20d2      	movs	r0, #210	; 0xd2
 8002934:	f7fe fe0e 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 200, 20, 20, 5, ILI9341_RED);
 8002938:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	2305      	movs	r3, #5
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	2314      	movs	r3, #20
 8002944:	2214      	movs	r2, #20
 8002946:	21c8      	movs	r1, #200	; 0xc8
 8002948:	20f0      	movs	r0, #240	; 0xf0
 800294a:	f7fe fe03 	bl	8001554 <GFX_DrawRoundRectangle>
	  	  HAL_Delay(200);
 800294e:	20c8      	movs	r0, #200	; 0xc8
 8002950:	f003 fa62 	bl	8005e18 <HAL_Delay>

	  GFX_DrawFillRoundRectangle(60, 200, 20, 20, 5, ILI9341_GREEN);
 8002954:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2305      	movs	r3, #5
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2314      	movs	r3, #20
 8002960:	2214      	movs	r2, #20
 8002962:	21c8      	movs	r1, #200	; 0xc8
 8002964:	203c      	movs	r0, #60	; 0x3c
 8002966:	f7fe fe72 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(100);
 800296a:	2064      	movs	r0, #100	; 0x64
 800296c:	f003 fa54 	bl	8005e18 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(90, 200, 20, 20, 5, ILI9341_GREEN);
 8002970:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	2305      	movs	r3, #5
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2314      	movs	r3, #20
 800297c:	2214      	movs	r2, #20
 800297e:	21c8      	movs	r1, #200	; 0xc8
 8002980:	205a      	movs	r0, #90	; 0x5a
 8002982:	f7fe fe64 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_TEMP_1);	// ASK for current temperature
 8002986:	2003      	movs	r0, #3
 8002988:	f002 faea 	bl	8004f60 <SendComand>
	  	  HAL_Delay(100);
 800298c:	2064      	movs	r0, #100	; 0x64
 800298e:	f003 fa43 	bl	8005e18 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(120, 200, 20, 20, 5, ILI9341_GREEN);
 8002992:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	2305      	movs	r3, #5
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2314      	movs	r3, #20
 800299e:	2214      	movs	r2, #20
 80029a0:	21c8      	movs	r1, #200	; 0xc8
 80029a2:	2078      	movs	r0, #120	; 0x78
 80029a4:	f7fe fe53 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 80029a8:	2004      	movs	r0, #4
 80029aa:	f002 fad9 	bl	8004f60 <SendComand>
	  	  HAL_Delay(100);
 80029ae:	2064      	movs	r0, #100	; 0x64
 80029b0:	f003 fa32 	bl	8005e18 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(150, 200, 20, 20, 5, ILI9341_GREEN);
 80029b4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	2305      	movs	r3, #5
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	2314      	movs	r3, #20
 80029c0:	2214      	movs	r2, #20
 80029c2:	21c8      	movs	r1, #200	; 0xc8
 80029c4:	2096      	movs	r0, #150	; 0x96
 80029c6:	f7fe fe42 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80029ca:	2015      	movs	r0, #21
 80029cc:	f002 fac8 	bl	8004f60 <SendComand>
	  	  HAL_Delay(100);
 80029d0:	2064      	movs	r0, #100	; 0x64
 80029d2:	f003 fa21 	bl	8005e18 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(180, 200, 20, 20, 5, ILI9341_GREEN);
 80029d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	2305      	movs	r3, #5
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	2314      	movs	r3, #20
 80029e2:	2214      	movs	r2, #20
 80029e4:	21c8      	movs	r1, #200	; 0xc8
 80029e6:	20b4      	movs	r0, #180	; 0xb4
 80029e8:	f7fe fe31 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 80029ec:	2016      	movs	r0, #22
 80029ee:	f002 fab7 	bl	8004f60 <SendComand>
	  	  HAL_Delay(100);
 80029f2:	2064      	movs	r0, #100	; 0x64
 80029f4:	f003 fa10 	bl	8005e18 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(210, 200, 20, 20, 5, ILI9341_GREEN);
 80029f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	2305      	movs	r3, #5
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2314      	movs	r3, #20
 8002a04:	2214      	movs	r2, #20
 8002a06:	21c8      	movs	r1, #200	; 0xc8
 8002a08:	20d2      	movs	r0, #210	; 0xd2
 8002a0a:	f7fe fe20 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(100);
 8002a0e:	2064      	movs	r0, #100	; 0x64
 8002a10:	f003 fa02 	bl	8005e18 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(240, 200, 20, 20, 5, ILI9341_GREEN);
 8002a14:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a18:	9301      	str	r3, [sp, #4]
 8002a1a:	2305      	movs	r3, #5
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	2314      	movs	r3, #20
 8002a20:	2214      	movs	r2, #20
 8002a22:	21c8      	movs	r1, #200	; 0xc8
 8002a24:	20f0      	movs	r0, #240	; 0xf0
 8002a26:	f7fe fe12 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(200);
 8002a2a:	20c8      	movs	r0, #200	; 0xc8
 8002a2c:	f003 f9f4 	bl	8005e18 <HAL_Delay>

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8002a30:	2301      	movs	r3, #1
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	0801386c 	.word	0x0801386c
 8002a3c:	080137f0 	.word	0x080137f0
 8002a40:	080108a0 	.word	0x080108a0
 8002a44:	200002b8 	.word	0x200002b8

08002a48 <showCurrentParameters>:

//
// Display current PARAMETERS screen
//
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002a52:	edc7 0a04 	vstr	s1, [r7, #16]
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	ed87 1a01 	vstr	s2, [r7, #4]
 8002a5e:	72fb      	strb	r3, [r7, #11]
	  SendComand(UCMD_TEMP_1);
 8002a60:	2003      	movs	r0, #3
 8002a62:	f002 fa7d 	bl	8004f60 <SendComand>
	  SendComand(UCMD_PRES_1);
 8002a66:	2004      	movs	r0, #4
 8002a68:	f002 fa7a 	bl	8004f60 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8002a6c:	f7ff fe76 	bl	800275c <DS3231_GetHour>
 8002a70:	4603      	mov	r3, r0
 8002a72:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8002a74:	f7ff fe7e 	bl	8002774 <DS3231_GetMinute>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	77bb      	strb	r3, [r7, #30]

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002a7c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002a80:	f7ff fa3a 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002a84:	4880      	ldr	r0, [pc, #512]	; (8002c88 <showCurrentParameters+0x240>)
 8002a86:	f7fe fe33 	bl	80016f0 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8002a8a:	4980      	ldr	r1, [pc, #512]	; (8002c8c <showCurrentParameters+0x244>)
 8002a8c:	4880      	ldr	r0, [pc, #512]	; (8002c90 <showCurrentParameters+0x248>)
 8002a8e:	f00a f8e1 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002a92:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002aa0:	220a      	movs	r2, #10
 8002aa2:	212f      	movs	r1, #47	; 0x2f
 8002aa4:	487a      	ldr	r0, [pc, #488]	; (8002c90 <showCurrentParameters+0x248>)
 8002aa6:	f7ff f83d 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002aaa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2329      	movs	r3, #41	; 0x29
 8002ab2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ab6:	2129      	movs	r1, #41	; 0x29
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f7fe fb69 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002abe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	232b      	movs	r3, #43	; 0x2b
 8002ac6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002aca:	212b      	movs	r1, #43	; 0x2b
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fe fb5f 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8002ad2:	7ffb      	ldrb	r3, [r7, #31]
 8002ad4:	2b09      	cmp	r3, #9
 8002ad6:	d809      	bhi.n	8002aec <showCurrentParameters+0xa4>
 8002ad8:	7fbb      	ldrb	r3, [r7, #30]
 8002ada:	2b09      	cmp	r3, #9
 8002adc:	d806      	bhi.n	8002aec <showCurrentParameters+0xa4>
 8002ade:	7ffa      	ldrb	r2, [r7, #31]
 8002ae0:	7fbb      	ldrb	r3, [r7, #30]
 8002ae2:	496c      	ldr	r1, [pc, #432]	; (8002c94 <showCurrentParameters+0x24c>)
 8002ae4:	486a      	ldr	r0, [pc, #424]	; (8002c90 <showCurrentParameters+0x248>)
 8002ae6:	f00a f8b5 	bl	800cc54 <siprintf>
 8002aea:	e019      	b.n	8002b20 <showCurrentParameters+0xd8>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 8002aec:	7ffb      	ldrb	r3, [r7, #31]
 8002aee:	2b09      	cmp	r3, #9
 8002af0:	d806      	bhi.n	8002b00 <showCurrentParameters+0xb8>
 8002af2:	7ffa      	ldrb	r2, [r7, #31]
 8002af4:	7fbb      	ldrb	r3, [r7, #30]
 8002af6:	4968      	ldr	r1, [pc, #416]	; (8002c98 <showCurrentParameters+0x250>)
 8002af8:	4865      	ldr	r0, [pc, #404]	; (8002c90 <showCurrentParameters+0x248>)
 8002afa:	f00a f8ab 	bl	800cc54 <siprintf>
 8002afe:	e00f      	b.n	8002b20 <showCurrentParameters+0xd8>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 8002b00:	7fbb      	ldrb	r3, [r7, #30]
 8002b02:	2b09      	cmp	r3, #9
 8002b04:	d806      	bhi.n	8002b14 <showCurrentParameters+0xcc>
 8002b06:	7ffa      	ldrb	r2, [r7, #31]
 8002b08:	7fbb      	ldrb	r3, [r7, #30]
 8002b0a:	4964      	ldr	r1, [pc, #400]	; (8002c9c <showCurrentParameters+0x254>)
 8002b0c:	4860      	ldr	r0, [pc, #384]	; (8002c90 <showCurrentParameters+0x248>)
 8002b0e:	f00a f8a1 	bl	800cc54 <siprintf>
 8002b12:	e005      	b.n	8002b20 <showCurrentParameters+0xd8>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 8002b14:	7ffa      	ldrb	r2, [r7, #31]
 8002b16:	7fbb      	ldrb	r3, [r7, #30]
 8002b18:	4961      	ldr	r1, [pc, #388]	; (8002ca0 <showCurrentParameters+0x258>)
 8002b1a:	485d      	ldr	r0, [pc, #372]	; (8002c90 <showCurrentParameters+0x248>)
 8002b1c:	f00a f89a 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002b20:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	2300      	movs	r3, #0
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2232      	movs	r2, #50	; 0x32
 8002b2e:	2114      	movs	r1, #20
 8002b30:	4857      	ldr	r0, [pc, #348]	; (8002c90 <showCurrentParameters+0x248>)
 8002b32:	f7fe fff7 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 8002b36:	4b5b      	ldr	r3, [pc, #364]	; (8002ca4 <showCurrentParameters+0x25c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fd1c 	bl	8000578 <__aeabi_f2d>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4958      	ldr	r1, [pc, #352]	; (8002ca8 <showCurrentParameters+0x260>)
 8002b46:	4852      	ldr	r0, [pc, #328]	; (8002c90 <showCurrentParameters+0x248>)
 8002b48:	f00a f884 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002b4c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	2301      	movs	r3, #1
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	2300      	movs	r3, #0
 8002b58:	2250      	movs	r2, #80	; 0x50
 8002b5a:	2114      	movs	r1, #20
 8002b5c:	484c      	ldr	r0, [pc, #304]	; (8002c90 <showCurrentParameters+0x248>)
 8002b5e:	f7fe ffe1 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8002b62:	4b52      	ldr	r3, [pc, #328]	; (8002cac <showCurrentParameters+0x264>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fd06 	bl	8000578 <__aeabi_f2d>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	494f      	ldr	r1, [pc, #316]	; (8002cb0 <showCurrentParameters+0x268>)
 8002b72:	4847      	ldr	r0, [pc, #284]	; (8002c90 <showCurrentParameters+0x248>)
 8002b74:	f00a f86e 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002b78:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	2300      	movs	r3, #0
 8002b84:	226e      	movs	r2, #110	; 0x6e
 8002b86:	2114      	movs	r1, #20
 8002b88:	4841      	ldr	r0, [pc, #260]	; (8002c90 <showCurrentParameters+0x248>)
 8002b8a:	f7fe ffcb 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: %d", CWaterLvl);
 8002b8e:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <showCurrentParameters+0x26c>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	4948      	ldr	r1, [pc, #288]	; (8002cb8 <showCurrentParameters+0x270>)
 8002b96:	483e      	ldr	r0, [pc, #248]	; (8002c90 <showCurrentParameters+0x248>)
 8002b98:	f00a f85c 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002b9c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	228c      	movs	r2, #140	; 0x8c
 8002baa:	2114      	movs	r1, #20
 8002bac:	4838      	ldr	r0, [pc, #224]	; (8002c90 <showCurrentParameters+0x248>)
 8002bae:	f7fe ffb9 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8002bb2:	4b42      	ldr	r3, [pc, #264]	; (8002cbc <showCurrentParameters+0x274>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fcde 	bl	8000578 <__aeabi_f2d>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	493f      	ldr	r1, [pc, #252]	; (8002cc0 <showCurrentParameters+0x278>)
 8002bc2:	4833      	ldr	r0, [pc, #204]	; (8002c90 <showCurrentParameters+0x248>)
 8002bc4:	f00a f846 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002bc8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	22aa      	movs	r2, #170	; 0xaa
 8002bd6:	2114      	movs	r1, #20
 8002bd8:	482d      	ldr	r0, [pc, #180]	; (8002c90 <showCurrentParameters+0x248>)
 8002bda:	f7fe ffa3 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8002bde:	4839      	ldr	r0, [pc, #228]	; (8002cc4 <showCurrentParameters+0x27c>)
 8002be0:	f7fe fd86 	bl	80016f0 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002be4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	2305      	movs	r3, #5
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2314      	movs	r3, #20
 8002bf0:	2264      	movs	r2, #100	; 0x64
 8002bf2:	21d8      	movs	r1, #216	; 0xd8
 8002bf4:	20dc      	movs	r0, #220	; 0xdc
 8002bf6:	f7fe fd2a 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 8002bfa:	4933      	ldr	r1, [pc, #204]	; (8002cc8 <showCurrentParameters+0x280>)
 8002bfc:	4824      	ldr	r0, [pc, #144]	; (8002c90 <showCurrentParameters+0x248>)
 8002bfe:	f00a f829 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002c02:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	22da      	movs	r2, #218	; 0xda
 8002c10:	21df      	movs	r1, #223	; 0xdf
 8002c12:	481f      	ldr	r0, [pc, #124]	; (8002c90 <showCurrentParameters+0x248>)
 8002c14:	f7fe ff86 	bl	8001b24 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002c18:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c1c:	9301      	str	r3, [sp, #4]
 8002c1e:	2305      	movs	r3, #5
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2314      	movs	r3, #20
 8002c24:	2264      	movs	r2, #100	; 0x64
 8002c26:	21d8      	movs	r1, #216	; 0xd8
 8002c28:	200a      	movs	r0, #10
 8002c2a:	f7fe fd10 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 8002c2e:	4927      	ldr	r1, [pc, #156]	; (8002ccc <showCurrentParameters+0x284>)
 8002c30:	4817      	ldr	r0, [pc, #92]	; (8002c90 <showCurrentParameters+0x248>)
 8002c32:	f00a f80f 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002c36:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2300      	movs	r3, #0
 8002c42:	22da      	movs	r2, #218	; 0xda
 8002c44:	2114      	movs	r1, #20
 8002c46:	4812      	ldr	r0, [pc, #72]	; (8002c90 <showCurrentParameters+0x248>)
 8002c48:	f7fe ff6c 	bl	8001b24 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8002c4c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	2305      	movs	r3, #5
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	2314      	movs	r3, #20
 8002c58:	225a      	movs	r2, #90	; 0x5a
 8002c5a:	21d8      	movs	r1, #216	; 0xd8
 8002c5c:	2078      	movs	r0, #120	; 0x78
 8002c5e:	f7fe fcf6 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8002c62:	491b      	ldr	r1, [pc, #108]	; (8002cd0 <showCurrentParameters+0x288>)
 8002c64:	480a      	ldr	r0, [pc, #40]	; (8002c90 <showCurrentParameters+0x248>)
 8002c66:	f009 fff5 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002c6a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	2300      	movs	r3, #0
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2300      	movs	r3, #0
 8002c76:	22da      	movs	r2, #218	; 0xda
 8002c78:	2184      	movs	r1, #132	; 0x84
 8002c7a:	4805      	ldr	r0, [pc, #20]	; (8002c90 <showCurrentParameters+0x248>)
 8002c7c:	f7fe ff52 	bl	8001b24 <EF_PutString>
}
 8002c80:	bf00      	nop
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	080137f0 	.word	0x080137f0
 8002c8c:	080108b4 	.word	0x080108b4
 8002c90:	200002b8 	.word	0x200002b8
 8002c94:	080108c4 	.word	0x080108c4
 8002c98:	080108d4 	.word	0x080108d4
 8002c9c:	080108e4 	.word	0x080108e4
 8002ca0:	080108f4 	.word	0x080108f4
 8002ca4:	20000254 	.word	0x20000254
 8002ca8:	08010904 	.word	0x08010904
 8002cac:	2000025c 	.word	0x2000025c
 8002cb0:	08010918 	.word	0x08010918
 8002cb4:	20000260 	.word	0x20000260
 8002cb8:	0801092c 	.word	0x0801092c
 8002cbc:	20000258 	.word	0x20000258
 8002cc0:	0801093c 	.word	0x0801093c
 8002cc4:	08011878 	.word	0x08011878
 8002cc8:	08010954 	.word	0x08010954
 8002ccc:	08010960 	.word	0x08010960
 8002cd0:	0801096c 	.word	0x0801096c

08002cd4 <showControlPanel>:

//
// Display control panel to change SWITCH STATE
//
void showControlPanel()
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8002cda:	2015      	movs	r0, #21
 8002cdc:	f002 f940 	bl	8004f60 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002ce0:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002ce4:	f7ff f908 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002ce8:	48a9      	ldr	r0, [pc, #676]	; (8002f90 <showControlPanel+0x2bc>)
 8002cea:	f7fe fd01 	bl	80016f0 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 8002cee:	49a9      	ldr	r1, [pc, #676]	; (8002f94 <showControlPanel+0x2c0>)
 8002cf0:	48a9      	ldr	r0, [pc, #676]	; (8002f98 <showControlPanel+0x2c4>)
 8002cf2:	f009 ffaf 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002cf6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	231f      	movs	r3, #31
 8002d02:	220a      	movs	r2, #10
 8002d04:	2123      	movs	r1, #35	; 0x23
 8002d06:	48a4      	ldr	r0, [pc, #656]	; (8002f98 <showControlPanel+0x2c4>)
 8002d08:	f7fe ff0c 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002d0c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	2329      	movs	r3, #41	; 0x29
 8002d14:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d18:	2129      	movs	r1, #41	; 0x29
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f7fe fa38 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002d20:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	232b      	movs	r3, #43	; 0x2b
 8002d28:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d2c:	212b      	movs	r1, #43	; 0x2b
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f7fe fa2e 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 8002d34:	4999      	ldr	r1, [pc, #612]	; (8002f9c <showControlPanel+0x2c8>)
 8002d36:	4898      	ldr	r0, [pc, #608]	; (8002f98 <showControlPanel+0x2c4>)
 8002d38:	f009 ff8c 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002d3c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d40:	9301      	str	r3, [sp, #4]
 8002d42:	2300      	movs	r3, #0
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	2300      	movs	r3, #0
 8002d48:	223c      	movs	r2, #60	; 0x3c
 8002d4a:	2114      	movs	r1, #20
 8002d4c:	4892      	ldr	r0, [pc, #584]	; (8002f98 <showControlPanel+0x2c4>)
 8002d4e:	f7fe fee9 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 8002d52:	4993      	ldr	r1, [pc, #588]	; (8002fa0 <showControlPanel+0x2cc>)
 8002d54:	4890      	ldr	r0, [pc, #576]	; (8002f98 <showControlPanel+0x2c4>)
 8002d56:	f009 ff7d 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002d5a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	2301      	movs	r3, #1
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2300      	movs	r3, #0
 8002d66:	225a      	movs	r2, #90	; 0x5a
 8002d68:	2114      	movs	r1, #20
 8002d6a:	488b      	ldr	r0, [pc, #556]	; (8002f98 <showControlPanel+0x2c4>)
 8002d6c:	f7fe feda 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8002d70:	498c      	ldr	r1, [pc, #560]	; (8002fa4 <showControlPanel+0x2d0>)
 8002d72:	4889      	ldr	r0, [pc, #548]	; (8002f98 <showControlPanel+0x2c4>)
 8002d74:	f009 ff6e 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002d78:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	2300      	movs	r3, #0
 8002d84:	2278      	movs	r2, #120	; 0x78
 8002d86:	2114      	movs	r1, #20
 8002d88:	4883      	ldr	r0, [pc, #524]	; (8002f98 <showControlPanel+0x2c4>)
 8002d8a:	f7fe fecb 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8002d8e:	4986      	ldr	r1, [pc, #536]	; (8002fa8 <showControlPanel+0x2d4>)
 8002d90:	4881      	ldr	r0, [pc, #516]	; (8002f98 <showControlPanel+0x2c4>)
 8002d92:	f009 ff5f 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002d96:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d9a:	9301      	str	r3, [sp, #4]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2300      	movs	r3, #0
 8002da2:	2296      	movs	r2, #150	; 0x96
 8002da4:	2114      	movs	r1, #20
 8002da6:	487c      	ldr	r0, [pc, #496]	; (8002f98 <showControlPanel+0x2c4>)
 8002da8:	f7fe febc 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8002dac:	487f      	ldr	r0, [pc, #508]	; (8002fac <showControlPanel+0x2d8>)
 8002dae:	f7fe fc9f 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002db2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	2305      	movs	r3, #5
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2314      	movs	r3, #20
 8002dbe:	2264      	movs	r2, #100	; 0x64
 8002dc0:	21d8      	movs	r1, #216	; 0xd8
 8002dc2:	20dc      	movs	r0, #220	; 0xdc
 8002dc4:	f7fe fc43 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8002dc8:	4979      	ldr	r1, [pc, #484]	; (8002fb0 <showControlPanel+0x2dc>)
 8002dca:	4873      	ldr	r0, [pc, #460]	; (8002f98 <showControlPanel+0x2c4>)
 8002dcc:	f009 ff42 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002dd0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	22da      	movs	r2, #218	; 0xda
 8002dde:	21df      	movs	r1, #223	; 0xdf
 8002de0:	486d      	ldr	r0, [pc, #436]	; (8002f98 <showControlPanel+0x2c4>)
 8002de2:	f7fe fe9f 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002de6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	2305      	movs	r3, #5
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2314      	movs	r3, #20
 8002df2:	2264      	movs	r2, #100	; 0x64
 8002df4:	21d8      	movs	r1, #216	; 0xd8
 8002df6:	200a      	movs	r0, #10
 8002df8:	f7fe fc29 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 8002dfc:	496d      	ldr	r1, [pc, #436]	; (8002fb4 <showControlPanel+0x2e0>)
 8002dfe:	4866      	ldr	r0, [pc, #408]	; (8002f98 <showControlPanel+0x2c4>)
 8002e00:	f009 ff28 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002e04:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	22da      	movs	r2, #218	; 0xda
 8002e12:	2114      	movs	r1, #20
 8002e14:	4860      	ldr	r0, [pc, #384]	; (8002f98 <showControlPanel+0x2c4>)
 8002e16:	f7fe fe85 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8002e1a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	2305      	movs	r3, #5
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	2314      	movs	r3, #20
 8002e26:	225a      	movs	r2, #90	; 0x5a
 8002e28:	21d8      	movs	r1, #216	; 0xd8
 8002e2a:	2078      	movs	r0, #120	; 0x78
 8002e2c:	f7fe fc0f 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 8002e30:	4961      	ldr	r1, [pc, #388]	; (8002fb8 <showControlPanel+0x2e4>)
 8002e32:	4859      	ldr	r0, [pc, #356]	; (8002f98 <showControlPanel+0x2c4>)
 8002e34:	f009 ff0e 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002e38:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2300      	movs	r3, #0
 8002e44:	22da      	movs	r2, #218	; 0xda
 8002e46:	217e      	movs	r1, #126	; 0x7e
 8002e48:	4853      	ldr	r0, [pc, #332]	; (8002f98 <showControlPanel+0x2c4>)
 8002e4a:	f7fe fe6b 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002e4e:	4850      	ldr	r0, [pc, #320]	; (8002f90 <showControlPanel+0x2bc>)
 8002e50:	f7fe fc4e 	bl	80016f0 <EF_SetFont>
	  //
	  // Draw current state of switches button
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8002e54:	4855      	ldr	r0, [pc, #340]	; (8002fac <showControlPanel+0x2d8>)
 8002e56:	f7fe fc4b 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8002e5a:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <showControlPanel+0x2e8>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01c      	beq.n	8002e9c <showControlPanel+0x1c8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8002e62:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	2305      	movs	r3, #5
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2315      	movs	r3, #21
 8002e6e:	2221      	movs	r2, #33	; 0x21
 8002e70:	2141      	movs	r1, #65	; 0x41
 8002e72:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002e76:	f7fe fbea 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8002e7a:	4951      	ldr	r1, [pc, #324]	; (8002fc0 <showControlPanel+0x2ec>)
 8002e7c:	4846      	ldr	r0, [pc, #280]	; (8002f98 <showControlPanel+0x2c4>)
 8002e7e:	f009 fee9 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8002e82:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2243      	movs	r2, #67	; 0x43
 8002e90:	f240 1111 	movw	r1, #273	; 0x111
 8002e94:	4840      	ldr	r0, [pc, #256]	; (8002f98 <showControlPanel+0x2c4>)
 8002e96:	f7fe fe45 	bl	8001b24 <EF_PutString>
 8002e9a:	e01b      	b.n	8002ed4 <showControlPanel+0x200>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8002e9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2305      	movs	r3, #5
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2315      	movs	r3, #21
 8002ea8:	2221      	movs	r2, #33	; 0x21
 8002eaa:	2141      	movs	r1, #65	; 0x41
 8002eac:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002eb0:	f7fe fbcd 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8002eb4:	4943      	ldr	r1, [pc, #268]	; (8002fc4 <showControlPanel+0x2f0>)
 8002eb6:	4838      	ldr	r0, [pc, #224]	; (8002f98 <showControlPanel+0x2c4>)
 8002eb8:	f009 fecc 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002ebc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	2243      	movs	r2, #67	; 0x43
 8002eca:	f240 1111 	movw	r1, #273	; 0x111
 8002ece:	4832      	ldr	r0, [pc, #200]	; (8002f98 <showControlPanel+0x2c4>)
 8002ed0:	f7fe fe28 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8002ed4:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <showControlPanel+0x2e8>)
 8002ed6:	785b      	ldrb	r3, [r3, #1]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01c      	beq.n	8002f16 <showControlPanel+0x242>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8002edc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	2305      	movs	r3, #5
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	2315      	movs	r3, #21
 8002ee8:	2221      	movs	r2, #33	; 0x21
 8002eea:	215f      	movs	r1, #95	; 0x5f
 8002eec:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002ef0:	f7fe fbad 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8002ef4:	4932      	ldr	r1, [pc, #200]	; (8002fc0 <showControlPanel+0x2ec>)
 8002ef6:	4828      	ldr	r0, [pc, #160]	; (8002f98 <showControlPanel+0x2c4>)
 8002ef8:	f009 feac 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8002efc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	2300      	movs	r3, #0
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2300      	movs	r3, #0
 8002f08:	2261      	movs	r2, #97	; 0x61
 8002f0a:	f240 1111 	movw	r1, #273	; 0x111
 8002f0e:	4822      	ldr	r0, [pc, #136]	; (8002f98 <showControlPanel+0x2c4>)
 8002f10:	f7fe fe08 	bl	8001b24 <EF_PutString>
 8002f14:	e01b      	b.n	8002f4e <showControlPanel+0x27a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8002f16:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f1a:	9301      	str	r3, [sp, #4]
 8002f1c:	2305      	movs	r3, #5
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2315      	movs	r3, #21
 8002f22:	2221      	movs	r2, #33	; 0x21
 8002f24:	215f      	movs	r1, #95	; 0x5f
 8002f26:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002f2a:	f7fe fb90 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8002f2e:	4925      	ldr	r1, [pc, #148]	; (8002fc4 <showControlPanel+0x2f0>)
 8002f30:	4819      	ldr	r0, [pc, #100]	; (8002f98 <showControlPanel+0x2c4>)
 8002f32:	f009 fe8f 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002f36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2300      	movs	r3, #0
 8002f42:	2261      	movs	r2, #97	; 0x61
 8002f44:	f240 1111 	movw	r1, #273	; 0x111
 8002f48:	4813      	ldr	r0, [pc, #76]	; (8002f98 <showControlPanel+0x2c4>)
 8002f4a:	f7fe fdeb 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8002f4e:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <showControlPanel+0x2e8>)
 8002f50:	789b      	ldrb	r3, [r3, #2]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d038      	beq.n	8002fc8 <showControlPanel+0x2f4>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8002f56:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	2305      	movs	r3, #5
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2315      	movs	r3, #21
 8002f62:	2221      	movs	r2, #33	; 0x21
 8002f64:	217d      	movs	r1, #125	; 0x7d
 8002f66:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002f6a:	f7fe fb70 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8002f6e:	4914      	ldr	r1, [pc, #80]	; (8002fc0 <showControlPanel+0x2ec>)
 8002f70:	4809      	ldr	r0, [pc, #36]	; (8002f98 <showControlPanel+0x2c4>)
 8002f72:	f009 fe6f 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8002f76:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2300      	movs	r3, #0
 8002f82:	227f      	movs	r2, #127	; 0x7f
 8002f84:	f240 1111 	movw	r1, #273	; 0x111
 8002f88:	4803      	ldr	r0, [pc, #12]	; (8002f98 <showControlPanel+0x2c4>)
 8002f8a:	f7fe fdcb 	bl	8001b24 <EF_PutString>
 8002f8e:	e037      	b.n	8003000 <showControlPanel+0x32c>
 8002f90:	080137f0 	.word	0x080137f0
 8002f94:	08010974 	.word	0x08010974
 8002f98:	200002b8 	.word	0x200002b8
 8002f9c:	08010988 	.word	0x08010988
 8002fa0:	0801099c 	.word	0x0801099c
 8002fa4:	080109b0 	.word	0x080109b0
 8002fa8:	080109c4 	.word	0x080109c4
 8002fac:	08011878 	.word	0x08011878
 8002fb0:	080109d8 	.word	0x080109d8
 8002fb4:	080109e4 	.word	0x080109e4
 8002fb8:	080109ec 	.word	0x080109ec
 8002fbc:	20000264 	.word	0x20000264
 8002fc0:	080109f8 	.word	0x080109f8
 8002fc4:	080109fc 	.word	0x080109fc
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8002fc8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	2305      	movs	r3, #5
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2315      	movs	r3, #21
 8002fd4:	2221      	movs	r2, #33	; 0x21
 8002fd6:	217d      	movs	r1, #125	; 0x7d
 8002fd8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002fdc:	f7fe fb37 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8002fe0:	4927      	ldr	r1, [pc, #156]	; (8003080 <showControlPanel+0x3ac>)
 8002fe2:	4828      	ldr	r0, [pc, #160]	; (8003084 <showControlPanel+0x3b0>)
 8002fe4:	f009 fe36 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002fe8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	227f      	movs	r2, #127	; 0x7f
 8002ff6:	f240 1111 	movw	r1, #273	; 0x111
 8002ffa:	4822      	ldr	r0, [pc, #136]	; (8003084 <showControlPanel+0x3b0>)
 8002ffc:	f7fe fd92 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8003000:	4b21      	ldr	r3, [pc, #132]	; (8003088 <showControlPanel+0x3b4>)
 8003002:	78db      	ldrb	r3, [r3, #3]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01c      	beq.n	8003042 <showControlPanel+0x36e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003008:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	2305      	movs	r3, #5
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	2315      	movs	r3, #21
 8003014:	2221      	movs	r2, #33	; 0x21
 8003016:	219b      	movs	r1, #155	; 0x9b
 8003018:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800301c:	f7fe fb17 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003020:	491a      	ldr	r1, [pc, #104]	; (800308c <showControlPanel+0x3b8>)
 8003022:	4818      	ldr	r0, [pc, #96]	; (8003084 <showControlPanel+0x3b0>)
 8003024:	f009 fe16 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003028:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	2300      	movs	r3, #0
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2300      	movs	r3, #0
 8003034:	229d      	movs	r2, #157	; 0x9d
 8003036:	f240 1111 	movw	r1, #273	; 0x111
 800303a:	4812      	ldr	r0, [pc, #72]	; (8003084 <showControlPanel+0x3b0>)
 800303c:	f7fe fd72 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8003040:	e01b      	b.n	800307a <showControlPanel+0x3a6>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003042:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2305      	movs	r3, #5
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2315      	movs	r3, #21
 800304e:	2221      	movs	r2, #33	; 0x21
 8003050:	219b      	movs	r1, #155	; 0x9b
 8003052:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003056:	f7fe fafa 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800305a:	4909      	ldr	r1, [pc, #36]	; (8003080 <showControlPanel+0x3ac>)
 800305c:	4809      	ldr	r0, [pc, #36]	; (8003084 <showControlPanel+0x3b0>)
 800305e:	f009 fdf9 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003062:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	2300      	movs	r3, #0
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2300      	movs	r3, #0
 800306e:	229d      	movs	r2, #157	; 0x9d
 8003070:	f240 1111 	movw	r1, #273	; 0x111
 8003074:	4803      	ldr	r0, [pc, #12]	; (8003084 <showControlPanel+0x3b0>)
 8003076:	f7fe fd55 	bl	8001b24 <EF_PutString>
}
 800307a:	bf00      	nop
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	080109fc 	.word	0x080109fc
 8003084:	200002b8 	.word	0x200002b8
 8003088:	20000264 	.word	0x20000264
 800308c:	080109f8 	.word	0x080109f8

08003090 <showLightsControlPanel>:

//
// Display screen to change LIGHTS
//
void showLightsControlPanel()
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003096:	2016      	movs	r0, #22
 8003098:	f001 ff62 	bl	8004f60 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800309c:	f24c 6018 	movw	r0, #50712	; 0xc618
 80030a0:	f7fe ff2a 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80030a4:	48c1      	ldr	r0, [pc, #772]	; (80033ac <showLightsControlPanel+0x31c>)
 80030a6:	f7fe fb23 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 80030aa:	49c1      	ldr	r1, [pc, #772]	; (80033b0 <showLightsControlPanel+0x320>)
 80030ac:	48c1      	ldr	r0, [pc, #772]	; (80033b4 <showLightsControlPanel+0x324>)
 80030ae:	f009 fdd1 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80030b2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80030b6:	9301      	str	r3, [sp, #4]
 80030b8:	2300      	movs	r3, #0
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80030c0:	220a      	movs	r2, #10
 80030c2:	2146      	movs	r1, #70	; 0x46
 80030c4:	48bb      	ldr	r0, [pc, #748]	; (80033b4 <showLightsControlPanel+0x324>)
 80030c6:	f7fe fd2d 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80030ca:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	2329      	movs	r3, #41	; 0x29
 80030d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030d6:	2129      	movs	r1, #41	; 0x29
 80030d8:	2000      	movs	r0, #0
 80030da:	f7fe f859 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80030de:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	232b      	movs	r3, #43	; 0x2b
 80030e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030ea:	212b      	movs	r1, #43	; 0x2b
 80030ec:	2000      	movs	r0, #0
 80030ee:	f7fe f84f 	bl	8001190 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 80030f2:	49b1      	ldr	r1, [pc, #708]	; (80033b8 <showLightsControlPanel+0x328>)
 80030f4:	48af      	ldr	r0, [pc, #700]	; (80033b4 <showLightsControlPanel+0x324>)
 80030f6:	f009 fdad 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80030fa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	2300      	movs	r3, #0
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2300      	movs	r3, #0
 8003106:	223c      	movs	r2, #60	; 0x3c
 8003108:	2114      	movs	r1, #20
 800310a:	48aa      	ldr	r0, [pc, #680]	; (80033b4 <showLightsControlPanel+0x324>)
 800310c:	f7fe fd0a 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 8003110:	49aa      	ldr	r1, [pc, #680]	; (80033bc <showLightsControlPanel+0x32c>)
 8003112:	48a8      	ldr	r0, [pc, #672]	; (80033b4 <showLightsControlPanel+0x324>)
 8003114:	f009 fd9e 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003118:	f24c 6318 	movw	r3, #50712	; 0xc618
 800311c:	9301      	str	r3, [sp, #4]
 800311e:	2301      	movs	r3, #1
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	2300      	movs	r3, #0
 8003124:	225a      	movs	r2, #90	; 0x5a
 8003126:	2114      	movs	r1, #20
 8003128:	48a2      	ldr	r0, [pc, #648]	; (80033b4 <showLightsControlPanel+0x324>)
 800312a:	f7fe fcfb 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 800312e:	49a4      	ldr	r1, [pc, #656]	; (80033c0 <showLightsControlPanel+0x330>)
 8003130:	48a0      	ldr	r0, [pc, #640]	; (80033b4 <showLightsControlPanel+0x324>)
 8003132:	f009 fd8f 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003136:	f24c 6318 	movw	r3, #50712	; 0xc618
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	2300      	movs	r3, #0
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	2300      	movs	r3, #0
 8003142:	2278      	movs	r2, #120	; 0x78
 8003144:	2114      	movs	r1, #20
 8003146:	489b      	ldr	r0, [pc, #620]	; (80033b4 <showLightsControlPanel+0x324>)
 8003148:	f7fe fcec 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 800314c:	499d      	ldr	r1, [pc, #628]	; (80033c4 <showLightsControlPanel+0x334>)
 800314e:	4899      	ldr	r0, [pc, #612]	; (80033b4 <showLightsControlPanel+0x324>)
 8003150:	f009 fd80 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003154:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	2300      	movs	r3, #0
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	2300      	movs	r3, #0
 8003160:	2296      	movs	r2, #150	; 0x96
 8003162:	2114      	movs	r1, #20
 8003164:	4893      	ldr	r0, [pc, #588]	; (80033b4 <showLightsControlPanel+0x324>)
 8003166:	f7fe fcdd 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 800316a:	4897      	ldr	r0, [pc, #604]	; (80033c8 <showLightsControlPanel+0x338>)
 800316c:	f7fe fac0 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003170:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2305      	movs	r3, #5
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2314      	movs	r3, #20
 800317c:	2264      	movs	r2, #100	; 0x64
 800317e:	21d8      	movs	r1, #216	; 0xd8
 8003180:	20dc      	movs	r0, #220	; 0xdc
 8003182:	f7fe fa64 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8003186:	4991      	ldr	r1, [pc, #580]	; (80033cc <showLightsControlPanel+0x33c>)
 8003188:	488a      	ldr	r0, [pc, #552]	; (80033b4 <showLightsControlPanel+0x324>)
 800318a:	f009 fd63 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800318e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	2300      	movs	r3, #0
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	2300      	movs	r3, #0
 800319a:	22da      	movs	r2, #218	; 0xda
 800319c:	21e6      	movs	r1, #230	; 0xe6
 800319e:	4885      	ldr	r0, [pc, #532]	; (80033b4 <showLightsControlPanel+0x324>)
 80031a0:	f7fe fcc0 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80031a4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	2305      	movs	r3, #5
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	2314      	movs	r3, #20
 80031b0:	2264      	movs	r2, #100	; 0x64
 80031b2:	21d8      	movs	r1, #216	; 0xd8
 80031b4:	200a      	movs	r0, #10
 80031b6:	f7fe fa4a 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 80031ba:	4985      	ldr	r1, [pc, #532]	; (80033d0 <showLightsControlPanel+0x340>)
 80031bc:	487d      	ldr	r0, [pc, #500]	; (80033b4 <showLightsControlPanel+0x324>)
 80031be:	f009 fd49 	bl	800cc54 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80031c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	2300      	movs	r3, #0
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2300      	movs	r3, #0
 80031ce:	22da      	movs	r2, #218	; 0xda
 80031d0:	210d      	movs	r1, #13
 80031d2:	4878      	ldr	r0, [pc, #480]	; (80033b4 <showLightsControlPanel+0x324>)
 80031d4:	f7fe fca6 	bl	8001b24 <EF_PutString>
	  //
	  // Draw current state of lights button
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 80031d8:	487b      	ldr	r0, [pc, #492]	; (80033c8 <showLightsControlPanel+0x338>)
 80031da:	f7fe fa89 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 80031de:	4b7d      	ldr	r3, [pc, #500]	; (80033d4 <showLightsControlPanel+0x344>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01a      	beq.n	800321c <showLightsControlPanel+0x18c>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80031e6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	2305      	movs	r3, #5
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2315      	movs	r3, #21
 80031f2:	2221      	movs	r2, #33	; 0x21
 80031f4:	2141      	movs	r1, #65	; 0x41
 80031f6:	20c8      	movs	r0, #200	; 0xc8
 80031f8:	f7fe fa29 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80031fc:	4976      	ldr	r1, [pc, #472]	; (80033d8 <showLightsControlPanel+0x348>)
 80031fe:	486d      	ldr	r0, [pc, #436]	; (80033b4 <showLightsControlPanel+0x324>)
 8003200:	f009 fd28 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003204:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	2300      	movs	r3, #0
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	2300      	movs	r3, #0
 8003210:	2243      	movs	r2, #67	; 0x43
 8003212:	21cb      	movs	r1, #203	; 0xcb
 8003214:	4867      	ldr	r0, [pc, #412]	; (80033b4 <showLightsControlPanel+0x324>)
 8003216:	f7fe fc85 	bl	8001b24 <EF_PutString>
 800321a:	e019      	b.n	8003250 <showLightsControlPanel+0x1c0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800321c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	2305      	movs	r3, #5
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	2315      	movs	r3, #21
 8003228:	2221      	movs	r2, #33	; 0x21
 800322a:	2141      	movs	r1, #65	; 0x41
 800322c:	20c8      	movs	r0, #200	; 0xc8
 800322e:	f7fe fa0e 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003232:	496a      	ldr	r1, [pc, #424]	; (80033dc <showLightsControlPanel+0x34c>)
 8003234:	485f      	ldr	r0, [pc, #380]	; (80033b4 <showLightsControlPanel+0x324>)
 8003236:	f009 fd0d 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800323a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800323e:	9301      	str	r3, [sp, #4]
 8003240:	2300      	movs	r3, #0
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2300      	movs	r3, #0
 8003246:	2243      	movs	r2, #67	; 0x43
 8003248:	21cb      	movs	r1, #203	; 0xcb
 800324a:	485a      	ldr	r0, [pc, #360]	; (80033b4 <showLightsControlPanel+0x324>)
 800324c:	f7fe fc6a 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 8003250:	4b60      	ldr	r3, [pc, #384]	; (80033d4 <showLightsControlPanel+0x344>)
 8003252:	785b      	ldrb	r3, [r3, #1]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01a      	beq.n	800328e <showLightsControlPanel+0x1fe>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003258:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2305      	movs	r3, #5
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2315      	movs	r3, #21
 8003264:	2221      	movs	r2, #33	; 0x21
 8003266:	215f      	movs	r1, #95	; 0x5f
 8003268:	20c8      	movs	r0, #200	; 0xc8
 800326a:	f7fe f9f0 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800326e:	495a      	ldr	r1, [pc, #360]	; (80033d8 <showLightsControlPanel+0x348>)
 8003270:	4850      	ldr	r0, [pc, #320]	; (80033b4 <showLightsControlPanel+0x324>)
 8003272:	f009 fcef 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003276:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	2300      	movs	r3, #0
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2300      	movs	r3, #0
 8003282:	2261      	movs	r2, #97	; 0x61
 8003284:	21cb      	movs	r1, #203	; 0xcb
 8003286:	484b      	ldr	r0, [pc, #300]	; (80033b4 <showLightsControlPanel+0x324>)
 8003288:	f7fe fc4c 	bl	8001b24 <EF_PutString>
 800328c:	e019      	b.n	80032c2 <showLightsControlPanel+0x232>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800328e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	2305      	movs	r3, #5
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	2315      	movs	r3, #21
 800329a:	2221      	movs	r2, #33	; 0x21
 800329c:	215f      	movs	r1, #95	; 0x5f
 800329e:	20c8      	movs	r0, #200	; 0xc8
 80032a0:	f7fe f9d5 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80032a4:	494d      	ldr	r1, [pc, #308]	; (80033dc <showLightsControlPanel+0x34c>)
 80032a6:	4843      	ldr	r0, [pc, #268]	; (80033b4 <showLightsControlPanel+0x324>)
 80032a8:	f009 fcd4 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80032ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	2300      	movs	r3, #0
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2300      	movs	r3, #0
 80032b8:	2261      	movs	r2, #97	; 0x61
 80032ba:	21cb      	movs	r1, #203	; 0xcb
 80032bc:	483d      	ldr	r0, [pc, #244]	; (80033b4 <showLightsControlPanel+0x324>)
 80032be:	f7fe fc31 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 80032c2:	4b44      	ldr	r3, [pc, #272]	; (80033d4 <showLightsControlPanel+0x344>)
 80032c4:	789b      	ldrb	r3, [r3, #2]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01a      	beq.n	8003300 <showLightsControlPanel+0x270>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80032ca:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	2305      	movs	r3, #5
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	2315      	movs	r3, #21
 80032d6:	2221      	movs	r2, #33	; 0x21
 80032d8:	217d      	movs	r1, #125	; 0x7d
 80032da:	20c8      	movs	r0, #200	; 0xc8
 80032dc:	f7fe f9b7 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80032e0:	493d      	ldr	r1, [pc, #244]	; (80033d8 <showLightsControlPanel+0x348>)
 80032e2:	4834      	ldr	r0, [pc, #208]	; (80033b4 <showLightsControlPanel+0x324>)
 80032e4:	f009 fcb6 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80032e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	2300      	movs	r3, #0
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	2300      	movs	r3, #0
 80032f4:	227f      	movs	r2, #127	; 0x7f
 80032f6:	21cb      	movs	r1, #203	; 0xcb
 80032f8:	482e      	ldr	r0, [pc, #184]	; (80033b4 <showLightsControlPanel+0x324>)
 80032fa:	f7fe fc13 	bl	8001b24 <EF_PutString>
 80032fe:	e019      	b.n	8003334 <showLightsControlPanel+0x2a4>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003300:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	2305      	movs	r3, #5
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	2315      	movs	r3, #21
 800330c:	2221      	movs	r2, #33	; 0x21
 800330e:	217d      	movs	r1, #125	; 0x7d
 8003310:	20c8      	movs	r0, #200	; 0xc8
 8003312:	f7fe f99c 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003316:	4931      	ldr	r1, [pc, #196]	; (80033dc <showLightsControlPanel+0x34c>)
 8003318:	4826      	ldr	r0, [pc, #152]	; (80033b4 <showLightsControlPanel+0x324>)
 800331a:	f009 fc9b 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800331e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	2300      	movs	r3, #0
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	2300      	movs	r3, #0
 800332a:	227f      	movs	r2, #127	; 0x7f
 800332c:	21cb      	movs	r1, #203	; 0xcb
 800332e:	4821      	ldr	r0, [pc, #132]	; (80033b4 <showLightsControlPanel+0x324>)
 8003330:	f7fe fbf8 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8003334:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <showLightsControlPanel+0x344>)
 8003336:	78db      	ldrb	r3, [r3, #3]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01a      	beq.n	8003372 <showLightsControlPanel+0x2e2>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800333c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	2305      	movs	r3, #5
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2315      	movs	r3, #21
 8003348:	2221      	movs	r2, #33	; 0x21
 800334a:	219b      	movs	r1, #155	; 0x9b
 800334c:	20c8      	movs	r0, #200	; 0xc8
 800334e:	f7fe f97e 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003352:	4921      	ldr	r1, [pc, #132]	; (80033d8 <showLightsControlPanel+0x348>)
 8003354:	4817      	ldr	r0, [pc, #92]	; (80033b4 <showLightsControlPanel+0x324>)
 8003356:	f009 fc7d 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800335a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	2300      	movs	r3, #0
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	2300      	movs	r3, #0
 8003366:	229d      	movs	r2, #157	; 0x9d
 8003368:	21cb      	movs	r1, #203	; 0xcb
 800336a:	4812      	ldr	r0, [pc, #72]	; (80033b4 <showLightsControlPanel+0x324>)
 800336c:	f7fe fbda 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8003370:	e019      	b.n	80033a6 <showLightsControlPanel+0x316>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003372:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	2305      	movs	r3, #5
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	2315      	movs	r3, #21
 800337e:	2221      	movs	r2, #33	; 0x21
 8003380:	219b      	movs	r1, #155	; 0x9b
 8003382:	20c8      	movs	r0, #200	; 0xc8
 8003384:	f7fe f963 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003388:	4914      	ldr	r1, [pc, #80]	; (80033dc <showLightsControlPanel+0x34c>)
 800338a:	480a      	ldr	r0, [pc, #40]	; (80033b4 <showLightsControlPanel+0x324>)
 800338c:	f009 fc62 	bl	800cc54 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003390:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	2300      	movs	r3, #0
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	2300      	movs	r3, #0
 800339c:	229d      	movs	r2, #157	; 0x9d
 800339e:	21cb      	movs	r1, #203	; 0xcb
 80033a0:	4804      	ldr	r0, [pc, #16]	; (80033b4 <showLightsControlPanel+0x324>)
 80033a2:	f7fe fbbf 	bl	8001b24 <EF_PutString>
}
 80033a6:	bf00      	nop
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	080137f0 	.word	0x080137f0
 80033b0:	08010a00 	.word	0x08010a00
 80033b4:	200002b8 	.word	0x200002b8
 80033b8:	08010a10 	.word	0x08010a10
 80033bc:	08010a20 	.word	0x08010a20
 80033c0:	08010a30 	.word	0x08010a30
 80033c4:	08010a40 	.word	0x08010a40
 80033c8:	08011878 	.word	0x08011878
 80033cc:	08010a50 	.word	0x08010a50
 80033d0:	08010a58 	.word	0x08010a58
 80033d4:	20000268 	.word	0x20000268
 80033d8:	080109f8 	.word	0x080109f8
 80033dc:	080109fc 	.word	0x080109fc

080033e0 <showClockSetPanel>:

//
// Display screen to change current CLOCK
//
void showClockSetPanel()
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80033e6:	f24c 6018 	movw	r0, #50712	; 0xc618
 80033ea:	f7fe fd85 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80033ee:	487d      	ldr	r0, [pc, #500]	; (80035e4 <showClockSetPanel+0x204>)
 80033f0:	f7fe f97e 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 80033f4:	f7ff f9b2 	bl	800275c <DS3231_GetHour>
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 80033fc:	f7ff f9ba 	bl	8002774 <DS3231_GetMinute>
 8003400:	4603      	mov	r3, r0
 8003402:	71bb      	strb	r3, [r7, #6]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003404:	4978      	ldr	r1, [pc, #480]	; (80035e8 <showClockSetPanel+0x208>)
 8003406:	4879      	ldr	r0, [pc, #484]	; (80035ec <showClockSetPanel+0x20c>)
 8003408:	f009 fc24 	bl	800cc54 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800340c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003410:	9301      	str	r3, [sp, #4]
 8003412:	2300      	movs	r3, #0
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800341a:	220a      	movs	r2, #10
 800341c:	212f      	movs	r1, #47	; 0x2f
 800341e:	4873      	ldr	r0, [pc, #460]	; (80035ec <showClockSetPanel+0x20c>)
 8003420:	f7fe fb80 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003424:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	2329      	movs	r3, #41	; 0x29
 800342c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003430:	2129      	movs	r1, #41	; 0x29
 8003432:	2000      	movs	r0, #0
 8003434:	f7fd feac 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003438:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	232b      	movs	r3, #43	; 0x2b
 8003440:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003444:	212b      	movs	r1, #43	; 0x2b
 8003446:	2000      	movs	r0, #0
 8003448:	f7fd fea2 	bl	8001190 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	461a      	mov	r2, r3
 8003450:	4967      	ldr	r1, [pc, #412]	; (80035f0 <showClockSetPanel+0x210>)
 8003452:	4866      	ldr	r0, [pc, #408]	; (80035ec <showClockSetPanel+0x20c>)
 8003454:	f009 fbfe 	bl	800cc54 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003458:	f24c 6318 	movw	r3, #50712	; 0xc618
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	2300      	movs	r3, #0
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2300      	movs	r3, #0
 8003464:	2246      	movs	r2, #70	; 0x46
 8003466:	2114      	movs	r1, #20
 8003468:	4860      	ldr	r0, [pc, #384]	; (80035ec <showClockSetPanel+0x20c>)
 800346a:	f7fe fb5b 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 800346e:	79bb      	ldrb	r3, [r7, #6]
 8003470:	461a      	mov	r2, r3
 8003472:	4960      	ldr	r1, [pc, #384]	; (80035f4 <showClockSetPanel+0x214>)
 8003474:	485d      	ldr	r0, [pc, #372]	; (80035ec <showClockSetPanel+0x20c>)
 8003476:	f009 fbed 	bl	800cc54 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800347a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	2301      	movs	r3, #1
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2300      	movs	r3, #0
 8003486:	226e      	movs	r2, #110	; 0x6e
 8003488:	2114      	movs	r1, #20
 800348a:	4858      	ldr	r0, [pc, #352]	; (80035ec <showClockSetPanel+0x20c>)
 800348c:	f7fe fb4a 	bl	8001b24 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003490:	4859      	ldr	r0, [pc, #356]	; (80035f8 <showClockSetPanel+0x218>)
 8003492:	f7fe f92d 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003496:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	2305      	movs	r3, #5
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	2315      	movs	r3, #21
 80034a2:	221e      	movs	r2, #30
 80034a4:	214b      	movs	r1, #75	; 0x4b
 80034a6:	20f0      	movs	r0, #240	; 0xf0
 80034a8:	f7fe f8d1 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80034ac:	4953      	ldr	r1, [pc, #332]	; (80035fc <showClockSetPanel+0x21c>)
 80034ae:	484f      	ldr	r0, [pc, #316]	; (80035ec <showClockSetPanel+0x20c>)
 80034b0:	f009 fbd0 	bl	800cc54 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80034b4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	2300      	movs	r3, #0
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	2300      	movs	r3, #0
 80034c0:	224d      	movs	r2, #77	; 0x4d
 80034c2:	21f3      	movs	r1, #243	; 0xf3
 80034c4:	4849      	ldr	r0, [pc, #292]	; (80035ec <showClockSetPanel+0x20c>)
 80034c6:	f7fe fb2d 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80034ca:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	2305      	movs	r3, #5
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	2315      	movs	r3, #21
 80034d6:	221e      	movs	r2, #30
 80034d8:	214b      	movs	r1, #75	; 0x4b
 80034da:	f44f 708c 	mov.w	r0, #280	; 0x118
 80034de:	f7fe f8b6 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 80034e2:	4947      	ldr	r1, [pc, #284]	; (8003600 <showClockSetPanel+0x220>)
 80034e4:	4841      	ldr	r0, [pc, #260]	; (80035ec <showClockSetPanel+0x20c>)
 80034e6:	f009 fbb5 	bl	800cc54 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80034ea:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	2300      	movs	r3, #0
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	2300      	movs	r3, #0
 80034f6:	224d      	movs	r2, #77	; 0x4d
 80034f8:	f240 111d 	movw	r1, #285	; 0x11d
 80034fc:	483b      	ldr	r0, [pc, #236]	; (80035ec <showClockSetPanel+0x20c>)
 80034fe:	f7fe fb11 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003502:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	2305      	movs	r3, #5
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	2315      	movs	r3, #21
 800350e:	221e      	movs	r2, #30
 8003510:	2173      	movs	r1, #115	; 0x73
 8003512:	20f0      	movs	r0, #240	; 0xf0
 8003514:	f7fe f89b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003518:	4938      	ldr	r1, [pc, #224]	; (80035fc <showClockSetPanel+0x21c>)
 800351a:	4834      	ldr	r0, [pc, #208]	; (80035ec <showClockSetPanel+0x20c>)
 800351c:	f009 fb9a 	bl	800cc54 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003520:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	2300      	movs	r3, #0
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	2300      	movs	r3, #0
 800352c:	2275      	movs	r2, #117	; 0x75
 800352e:	21f5      	movs	r1, #245	; 0xf5
 8003530:	482e      	ldr	r0, [pc, #184]	; (80035ec <showClockSetPanel+0x20c>)
 8003532:	f7fe faf7 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003536:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	2305      	movs	r3, #5
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2315      	movs	r3, #21
 8003542:	221e      	movs	r2, #30
 8003544:	2173      	movs	r1, #115	; 0x73
 8003546:	f44f 708c 	mov.w	r0, #280	; 0x118
 800354a:	f7fe f880 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 800354e:	492d      	ldr	r1, [pc, #180]	; (8003604 <showClockSetPanel+0x224>)
 8003550:	4826      	ldr	r0, [pc, #152]	; (80035ec <showClockSetPanel+0x20c>)
 8003552:	f009 fb7f 	bl	800cc54 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003556:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	2300      	movs	r3, #0
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	2275      	movs	r2, #117	; 0x75
 8003564:	f240 111b 	movw	r1, #283	; 0x11b
 8003568:	4820      	ldr	r0, [pc, #128]	; (80035ec <showClockSetPanel+0x20c>)
 800356a:	f7fe fadb 	bl	8001b24 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 800356e:	4822      	ldr	r0, [pc, #136]	; (80035f8 <showClockSetPanel+0x218>)
 8003570:	f7fe f8be 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003574:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	2305      	movs	r3, #5
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	2314      	movs	r3, #20
 8003580:	2264      	movs	r2, #100	; 0x64
 8003582:	21d8      	movs	r1, #216	; 0xd8
 8003584:	20dc      	movs	r0, #220	; 0xdc
 8003586:	f7fe f862 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 800358a:	491f      	ldr	r1, [pc, #124]	; (8003608 <showClockSetPanel+0x228>)
 800358c:	4817      	ldr	r0, [pc, #92]	; (80035ec <showClockSetPanel+0x20c>)
 800358e:	f009 fb61 	bl	800cc54 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003592:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	2300      	movs	r3, #0
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2300      	movs	r3, #0
 800359e:	22da      	movs	r2, #218	; 0xda
 80035a0:	21e6      	movs	r1, #230	; 0xe6
 80035a2:	4812      	ldr	r0, [pc, #72]	; (80035ec <showClockSetPanel+0x20c>)
 80035a4:	f7fe fabe 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80035a8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	2305      	movs	r3, #5
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2314      	movs	r3, #20
 80035b4:	2264      	movs	r2, #100	; 0x64
 80035b6:	21d8      	movs	r1, #216	; 0xd8
 80035b8:	200a      	movs	r0, #10
 80035ba:	f7fe f848 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80035be:	4913      	ldr	r1, [pc, #76]	; (800360c <showClockSetPanel+0x22c>)
 80035c0:	480a      	ldr	r0, [pc, #40]	; (80035ec <showClockSetPanel+0x20c>)
 80035c2:	f009 fb47 	bl	800cc54 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80035c6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	2300      	movs	r3, #0
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	2300      	movs	r3, #0
 80035d2:	22da      	movs	r2, #218	; 0xda
 80035d4:	210d      	movs	r1, #13
 80035d6:	4805      	ldr	r0, [pc, #20]	; (80035ec <showClockSetPanel+0x20c>)
 80035d8:	f7fe faa4 	bl	8001b24 <EF_PutString>
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	080137f0 	.word	0x080137f0
 80035e8:	08010a64 	.word	0x08010a64
 80035ec:	200002b8 	.word	0x200002b8
 80035f0:	08010a74 	.word	0x08010a74
 80035f4:	08010a80 	.word	0x08010a80
 80035f8:	08011878 	.word	0x08011878
 80035fc:	08010a90 	.word	0x08010a90
 8003600:	08010a94 	.word	0x08010a94
 8003604:	08010a98 	.word	0x08010a98
 8003608:	08010a9c 	.word	0x08010a9c
 800360c:	08010aa4 	.word	0x08010aa4

08003610 <showPreparedActivitiesPanel>:

//
// Display screen with Activities
//
void showPreparedActivitiesPanel()
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003616:	f24c 6018 	movw	r0, #50712	; 0xc618
 800361a:	f7fe fc6d 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 800361e:	485d      	ldr	r0, [pc, #372]	; (8003794 <showPreparedActivitiesPanel+0x184>)
 8003620:	f7fe f866 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003624:	495c      	ldr	r1, [pc, #368]	; (8003798 <showPreparedActivitiesPanel+0x188>)
 8003626:	485d      	ldr	r0, [pc, #372]	; (800379c <showPreparedActivitiesPanel+0x18c>)
 8003628:	f009 fb14 	bl	800cc54 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800362c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	2300      	movs	r3, #0
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	231f      	movs	r3, #31
 8003638:	220a      	movs	r2, #10
 800363a:	212f      	movs	r1, #47	; 0x2f
 800363c:	4857      	ldr	r0, [pc, #348]	; (800379c <showPreparedActivitiesPanel+0x18c>)
 800363e:	f7fe fa71 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003642:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2329      	movs	r3, #41	; 0x29
 800364a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800364e:	2129      	movs	r1, #41	; 0x29
 8003650:	2000      	movs	r0, #0
 8003652:	f7fd fd9d 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003656:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	232b      	movs	r3, #43	; 0x2b
 800365e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003662:	212b      	movs	r1, #43	; 0x2b
 8003664:	2000      	movs	r0, #0
 8003666:	f7fd fd93 	bl	8001190 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 800366a:	484d      	ldr	r0, [pc, #308]	; (80037a0 <showPreparedActivitiesPanel+0x190>)
 800366c:	f7fe f840 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003670:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	2305      	movs	r3, #5
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	2314      	movs	r3, #20
 800367c:	2264      	movs	r2, #100	; 0x64
 800367e:	21d8      	movs	r1, #216	; 0xd8
 8003680:	200a      	movs	r0, #10
 8003682:	f7fd ffe4 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003686:	4947      	ldr	r1, [pc, #284]	; (80037a4 <showPreparedActivitiesPanel+0x194>)
 8003688:	4844      	ldr	r0, [pc, #272]	; (800379c <showPreparedActivitiesPanel+0x18c>)
 800368a:	f009 fae3 	bl	800cc54 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800368e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	2300      	movs	r3, #0
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2300      	movs	r3, #0
 800369a:	22da      	movs	r2, #218	; 0xda
 800369c:	210d      	movs	r1, #13
 800369e:	483f      	ldr	r0, [pc, #252]	; (800379c <showPreparedActivitiesPanel+0x18c>)
 80036a0:	f7fe fa40 	bl	8001b24 <EF_PutString>

	EF_SetFont(&arialBlack_20ptFontInfo);
 80036a4:	483b      	ldr	r0, [pc, #236]	; (8003794 <showPreparedActivitiesPanel+0x184>)
 80036a6:	f7fe f823 	bl	80016f0 <EF_SetFont>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 80036aa:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <showPreparedActivitiesPanel+0x198>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d01a      	beq.n	80036e8 <showPreparedActivitiesPanel+0xd8>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80036b2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80036b6:	9301      	str	r3, [sp, #4]
 80036b8:	230a      	movs	r3, #10
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	2328      	movs	r3, #40	; 0x28
 80036be:	2278      	movs	r2, #120	; 0x78
 80036c0:	213c      	movs	r1, #60	; 0x3c
 80036c2:	2064      	movs	r0, #100	; 0x64
 80036c4:	f7fd ffc3 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE - ON");
 80036c8:	4938      	ldr	r1, [pc, #224]	; (80037ac <showPreparedActivitiesPanel+0x19c>)
 80036ca:	4834      	ldr	r0, [pc, #208]	; (800379c <showPreparedActivitiesPanel+0x18c>)
 80036cc:	f009 fac2 	bl	800cc54 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80036d0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	2300      	movs	r3, #0
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	2300      	movs	r3, #0
 80036dc:	223e      	movs	r2, #62	; 0x3e
 80036de:	2167      	movs	r1, #103	; 0x67
 80036e0:	482e      	ldr	r0, [pc, #184]	; (800379c <showPreparedActivitiesPanel+0x18c>)
 80036e2:	f7fe fa1f 	bl	8001b24 <EF_PutString>
 80036e6:	e019      	b.n	800371c <showPreparedActivitiesPanel+0x10c>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80036e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	230a      	movs	r3, #10
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2328      	movs	r3, #40	; 0x28
 80036f4:	2278      	movs	r2, #120	; 0x78
 80036f6:	213c      	movs	r1, #60	; 0x3c
 80036f8:	2064      	movs	r0, #100	; 0x64
 80036fa:	f7fd ffa8 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE - OFF");
 80036fe:	492c      	ldr	r1, [pc, #176]	; (80037b0 <showPreparedActivitiesPanel+0x1a0>)
 8003700:	4826      	ldr	r0, [pc, #152]	; (800379c <showPreparedActivitiesPanel+0x18c>)
 8003702:	f009 faa7 	bl	800cc54 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003706:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	2300      	movs	r3, #0
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2300      	movs	r3, #0
 8003712:	223e      	movs	r2, #62	; 0x3e
 8003714:	2167      	movs	r1, #103	; 0x67
 8003716:	4821      	ldr	r0, [pc, #132]	; (800379c <showPreparedActivitiesPanel+0x18c>)
 8003718:	f7fe fa04 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 800371c:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <showPreparedActivitiesPanel+0x198>)
 800371e:	785b      	ldrb	r3, [r3, #1]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01a      	beq.n	800375a <showPreparedActivitiesPanel+0x14a>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003724:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	230a      	movs	r3, #10
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	2328      	movs	r3, #40	; 0x28
 8003730:	2278      	movs	r2, #120	; 0x78
 8003732:	2178      	movs	r1, #120	; 0x78
 8003734:	2064      	movs	r0, #100	; 0x64
 8003736:	f7fd ff8a 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE - ON");
 800373a:	491e      	ldr	r1, [pc, #120]	; (80037b4 <showPreparedActivitiesPanel+0x1a4>)
 800373c:	4817      	ldr	r0, [pc, #92]	; (800379c <showPreparedActivitiesPanel+0x18c>)
 800373e:	f009 fa89 	bl	800cc54 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003742:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	2300      	movs	r3, #0
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	2300      	movs	r3, #0
 800374e:	227a      	movs	r2, #122	; 0x7a
 8003750:	2167      	movs	r1, #103	; 0x67
 8003752:	4812      	ldr	r0, [pc, #72]	; (800379c <showPreparedActivitiesPanel+0x18c>)
 8003754:	f7fe f9e6 	bl	8001b24 <EF_PutString>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "CZYSZCZENIE - OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8003758:	e019      	b.n	800378e <showPreparedActivitiesPanel+0x17e>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800375a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	230a      	movs	r3, #10
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	2328      	movs	r3, #40	; 0x28
 8003766:	2278      	movs	r2, #120	; 0x78
 8003768:	2178      	movs	r1, #120	; 0x78
 800376a:	2064      	movs	r0, #100	; 0x64
 800376c:	f7fd ff6f 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE - OFF");
 8003770:	4911      	ldr	r1, [pc, #68]	; (80037b8 <showPreparedActivitiesPanel+0x1a8>)
 8003772:	480a      	ldr	r0, [pc, #40]	; (800379c <showPreparedActivitiesPanel+0x18c>)
 8003774:	f009 fa6e 	bl	800cc54 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003778:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	2300      	movs	r3, #0
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	2300      	movs	r3, #0
 8003784:	227a      	movs	r2, #122	; 0x7a
 8003786:	2167      	movs	r1, #103	; 0x67
 8003788:	4804      	ldr	r0, [pc, #16]	; (800379c <showPreparedActivitiesPanel+0x18c>)
 800378a:	f7fe f9cb 	bl	8001b24 <EF_PutString>
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	080137f0 	.word	0x080137f0
 8003798:	08010aac 	.word	0x08010aac
 800379c:	200002b8 	.word	0x200002b8
 80037a0:	08011878 	.word	0x08011878
 80037a4:	08010aa4 	.word	0x08010aa4
 80037a8:	2000026c 	.word	0x2000026c
 80037ac:	08010abc 	.word	0x08010abc
 80037b0:	08010acc 	.word	0x08010acc
 80037b4:	08010adc 	.word	0x08010adc
 80037b8:	08010af0 	.word	0x08010af0

080037bc <ChangeHourOnScreen>:

//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 80037c2:	f7fe ffcb 	bl	800275c <DS3231_GetHour>
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 80037ca:	f7fe ffd3 	bl	8002774 <DS3231_GetMinute>
 80037ce:	4603      	mov	r3, r0
 80037d0:	71bb      	strb	r3, [r7, #6]

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 80037d2:	4b29      	ldr	r3, [pc, #164]	; (8003878 <ChangeHourOnScreen+0xbc>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	79fa      	ldrb	r2, [r7, #7]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d021      	beq.n	8003820 <ChangeHourOnScreen+0x64>
	  {
		  if(State == MENUTFT_PARAMETERS)
 80037dc:	4b27      	ldr	r3, [pc, #156]	; (800387c <ChangeHourOnScreen+0xc0>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d11d      	bne.n	8003820 <ChangeHourOnScreen+0x64>
		  {
			  if(CHour < 10)
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	2b09      	cmp	r3, #9
 80037e8:	d806      	bhi.n	80037f8 <ChangeHourOnScreen+0x3c>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	461a      	mov	r2, r3
 80037ee:	4924      	ldr	r1, [pc, #144]	; (8003880 <ChangeHourOnScreen+0xc4>)
 80037f0:	4824      	ldr	r0, [pc, #144]	; (8003884 <ChangeHourOnScreen+0xc8>)
 80037f2:	f009 fa2f 	bl	800cc54 <siprintf>
 80037f6:	e005      	b.n	8003804 <ChangeHourOnScreen+0x48>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	461a      	mov	r2, r3
 80037fc:	4922      	ldr	r1, [pc, #136]	; (8003888 <ChangeHourOnScreen+0xcc>)
 80037fe:	4821      	ldr	r0, [pc, #132]	; (8003884 <ChangeHourOnScreen+0xc8>)
 8003800:	f009 fa28 	bl	800cc54 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003804:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2301      	movs	r3, #1
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	2232      	movs	r2, #50	; 0x32
 8003812:	2161      	movs	r1, #97	; 0x61
 8003814:	481b      	ldr	r0, [pc, #108]	; (8003884 <ChangeHourOnScreen+0xc8>)
 8003816:	f7fe f985 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 800381a:	4a17      	ldr	r2, [pc, #92]	; (8003878 <ChangeHourOnScreen+0xbc>)
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8003820:	4b1a      	ldr	r3, [pc, #104]	; (800388c <ChangeHourOnScreen+0xd0>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	79ba      	ldrb	r2, [r7, #6]
 8003826:	429a      	cmp	r2, r3
 8003828:	d021      	beq.n	800386e <ChangeHourOnScreen+0xb2>
	  {
		  if(State == MENUTFT_PARAMETERS)
 800382a:	4b14      	ldr	r3, [pc, #80]	; (800387c <ChangeHourOnScreen+0xc0>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d11d      	bne.n	800386e <ChangeHourOnScreen+0xb2>
		  {
			  if(CMinute < 10)
 8003832:	79bb      	ldrb	r3, [r7, #6]
 8003834:	2b09      	cmp	r3, #9
 8003836:	d806      	bhi.n	8003846 <ChangeHourOnScreen+0x8a>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8003838:	79bb      	ldrb	r3, [r7, #6]
 800383a:	461a      	mov	r2, r3
 800383c:	4914      	ldr	r1, [pc, #80]	; (8003890 <ChangeHourOnScreen+0xd4>)
 800383e:	4811      	ldr	r0, [pc, #68]	; (8003884 <ChangeHourOnScreen+0xc8>)
 8003840:	f009 fa08 	bl	800cc54 <siprintf>
 8003844:	e005      	b.n	8003852 <ChangeHourOnScreen+0x96>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8003846:	79bb      	ldrb	r3, [r7, #6]
 8003848:	461a      	mov	r2, r3
 800384a:	4912      	ldr	r1, [pc, #72]	; (8003894 <ChangeHourOnScreen+0xd8>)
 800384c:	480d      	ldr	r0, [pc, #52]	; (8003884 <ChangeHourOnScreen+0xc8>)
 800384e:	f009 fa01 	bl	800cc54 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 128 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003852:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	2301      	movs	r3, #1
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	2300      	movs	r3, #0
 800385e:	2232      	movs	r2, #50	; 0x32
 8003860:	2194      	movs	r1, #148	; 0x94
 8003862:	4808      	ldr	r0, [pc, #32]	; (8003884 <ChangeHourOnScreen+0xc8>)
 8003864:	f7fe f95e 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 8003868:	4a08      	ldr	r2, [pc, #32]	; (800388c <ChangeHourOnScreen+0xd0>)
 800386a:	79bb      	ldrb	r3, [r7, #6]
 800386c:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000246 	.word	0x20000246
 800387c:	20000250 	.word	0x20000250
 8003880:	08010b04 	.word	0x08010b04
 8003884:	200002b8 	.word	0x200002b8
 8003888:	08010b0c 	.word	0x08010b0c
 800388c:	20000247 	.word	0x20000247
 8003890:	08010b10 	.word	0x08010b10
 8003894:	08010b18 	.word	0x08010b18

08003898 <predefinedActivityCzyszczenie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10c      	bne.n	80038c6 <predefinedActivityCzyszczenie+0x2e>
	{
		SendComand(UCMD_RELAY_1_ON);
 80038ac:	2005      	movs	r0, #5
 80038ae:	f001 fb57 	bl	8004f60 <SendComand>
		SendComand(UCMD_RELAY_2_ON);
 80038b2:	2007      	movs	r0, #7
 80038b4:	f001 fb54 	bl	8004f60 <SendComand>
		SendComand(UCMD_RELAY_3_ON);
 80038b8:	2009      	movs	r0, #9
 80038ba:	f001 fb51 	bl	8004f60 <SendComand>
		SendComand(UCMD_RELAY_4_ON);
 80038be:	200b      	movs	r0, #11
 80038c0:	f001 fb4e 	bl	8004f60 <SendComand>
		SendComand(UCMD_LIGHT_1_ON);
		SendComand(UCMD_LIGHT_2_ON);
		SendComand(UCMD_LIGHT_3_ON);
		SendComand(UCMD_LIGHT_4_ON);
	}
}
 80038c4:	e017      	b.n	80038f6 <predefinedActivityCzyszczenie+0x5e>
		SendComand(UCMD_RELAY_1_OFF);
 80038c6:	2006      	movs	r0, #6
 80038c8:	f001 fb4a 	bl	8004f60 <SendComand>
		SendComand(UCMD_RELAY_2_OFF);
 80038cc:	2008      	movs	r0, #8
 80038ce:	f001 fb47 	bl	8004f60 <SendComand>
		SendComand(UCMD_RELAY_3_OFF);
 80038d2:	200a      	movs	r0, #10
 80038d4:	f001 fb44 	bl	8004f60 <SendComand>
		SendComand(UCMD_RELAY_4_OFF);
 80038d8:	200c      	movs	r0, #12
 80038da:	f001 fb41 	bl	8004f60 <SendComand>
		SendComand(UCMD_LIGHT_1_ON);
 80038de:	200d      	movs	r0, #13
 80038e0:	f001 fb3e 	bl	8004f60 <SendComand>
		SendComand(UCMD_LIGHT_2_ON);
 80038e4:	200f      	movs	r0, #15
 80038e6:	f001 fb3b 	bl	8004f60 <SendComand>
		SendComand(UCMD_LIGHT_3_ON);
 80038ea:	2011      	movs	r0, #17
 80038ec:	f001 fb38 	bl	8004f60 <SendComand>
		SendComand(UCMD_LIGHT_4_ON);
 80038f0:	2013      	movs	r0, #19
 80038f2:	f001 fb35 	bl	8004f60 <SendComand>
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10c      	bne.n	800392e <predefinedActivityKarmienie+0x2e>
	{
		SendComand(UCMD_RELAY_1_ON);
 8003914:	2005      	movs	r0, #5
 8003916:	f001 fb23 	bl	8004f60 <SendComand>
		SendComand(UCMD_RELAY_2_ON);
 800391a:	2007      	movs	r0, #7
 800391c:	f001 fb20 	bl	8004f60 <SendComand>
		SendComand(UCMD_RELAY_3_ON);
 8003920:	2009      	movs	r0, #9
 8003922:	f001 fb1d 	bl	8004f60 <SendComand>
		SendComand(UCMD_RELAY_4_ON);
 8003926:	200b      	movs	r0, #11
 8003928:	f001 fb1a 	bl	8004f60 <SendComand>
		SendComand(UCMD_RELAY_3_OFF);
		SendComand(UCMD_RELAY_4_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 800392c:	e00e      	b.n	800394c <predefinedActivityKarmienie+0x4c>
		SendComand(UCMD_RELAY_1_OFF);
 800392e:	2006      	movs	r0, #6
 8003930:	f001 fb16 	bl	8004f60 <SendComand>
		SendComand(UCMD_RELAY_2_OFF);
 8003934:	2008      	movs	r0, #8
 8003936:	f001 fb13 	bl	8004f60 <SendComand>
		SendComand(UCMD_RELAY_3_OFF);
 800393a:	200a      	movs	r0, #10
 800393c:	f001 fb10 	bl	8004f60 <SendComand>
		SendComand(UCMD_RELAY_4_OFF);
 8003940:	200c      	movs	r0, #12
 8003942:	f001 fb0d 	bl	8004f60 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8003946:	4803      	ldr	r0, [pc, #12]	; (8003954 <predefinedActivityKarmienie+0x54>)
 8003948:	f006 ff34 	bl	800a7b4 <HAL_TIM_Base_Start_IT>
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000534 	.word	0x20000534

08003958 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800395e:	f107 0314 	add.w	r3, r7, #20
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	605a      	str	r2, [r3, #4]
 8003968:	609a      	str	r2, [r3, #8]
 800396a:	60da      	str	r2, [r3, #12]
 800396c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	4b3f      	ldr	r3, [pc, #252]	; (8003a70 <MX_GPIO_Init+0x118>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	4a3e      	ldr	r2, [pc, #248]	; (8003a70 <MX_GPIO_Init+0x118>)
 8003978:	f043 0304 	orr.w	r3, r3, #4
 800397c:	6313      	str	r3, [r2, #48]	; 0x30
 800397e:	4b3c      	ldr	r3, [pc, #240]	; (8003a70 <MX_GPIO_Init+0x118>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	4b38      	ldr	r3, [pc, #224]	; (8003a70 <MX_GPIO_Init+0x118>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	4a37      	ldr	r2, [pc, #220]	; (8003a70 <MX_GPIO_Init+0x118>)
 8003994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003998:	6313      	str	r3, [r2, #48]	; 0x30
 800399a:	4b35      	ldr	r3, [pc, #212]	; (8003a70 <MX_GPIO_Init+0x118>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <MX_GPIO_Init+0x118>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	4a30      	ldr	r2, [pc, #192]	; (8003a70 <MX_GPIO_Init+0x118>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6313      	str	r3, [r2, #48]	; 0x30
 80039b6:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <MX_GPIO_Init+0x118>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <MX_GPIO_Init+0x118>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	4a29      	ldr	r2, [pc, #164]	; (8003a70 <MX_GPIO_Init+0x118>)
 80039cc:	f043 0302 	orr.w	r3, r3, #2
 80039d0:	6313      	str	r3, [r2, #48]	; 0x30
 80039d2:	4b27      	ldr	r3, [pc, #156]	; (8003a70 <MX_GPIO_Init+0x118>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 80039de:	2200      	movs	r2, #0
 80039e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039e4:	4823      	ldr	r0, [pc, #140]	; (8003a74 <MX_GPIO_Init+0x11c>)
 80039e6:	f003 f987 	bl	8006cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 80039ea:	2200      	movs	r2, #0
 80039ec:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 80039f0:	4821      	ldr	r0, [pc, #132]	; (8003a78 <MX_GPIO_Init+0x120>)
 80039f2:	f003 f981 	bl	8006cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 80039f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039fc:	2301      	movs	r3, #1
 80039fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a04:	2300      	movs	r3, #0
 8003a06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4819      	ldr	r0, [pc, #100]	; (8003a74 <MX_GPIO_Init+0x11c>)
 8003a10:	f002 ffd6 	bl	80069c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTC_IRQ_Pin;
 8003a14:	2310      	movs	r3, #16
 8003a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003a22:	f107 0314 	add.w	r3, r7, #20
 8003a26:	4619      	mov	r1, r3
 8003a28:	4814      	ldr	r0, [pc, #80]	; (8003a7c <MX_GPIO_Init+0x124>)
 8003a2a:	f002 ffc9 	bl	80069c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8003a2e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8003a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a34:	2301      	movs	r3, #1
 8003a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a40:	f107 0314 	add.w	r3, r7, #20
 8003a44:	4619      	mov	r1, r3
 8003a46:	480c      	ldr	r0, [pc, #48]	; (8003a78 <MX_GPIO_Init+0x120>)
 8003a48:	f002 ffba 	bl	80069c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a52:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003a5c:	f107 0314 	add.w	r3, r7, #20
 8003a60:	4619      	mov	r1, r3
 8003a62:	4806      	ldr	r0, [pc, #24]	; (8003a7c <MX_GPIO_Init+0x124>)
 8003a64:	f002 ffac 	bl	80069c0 <HAL_GPIO_Init>

}
 8003a68:	bf00      	nop
 8003a6a:	3728      	adds	r7, #40	; 0x28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40020800 	.word	0x40020800
 8003a78:	40020400 	.word	0x40020400
 8003a7c:	40020000 	.word	0x40020000

08003a80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <MX_I2C1_Init+0x50>)
 8003a86:	4a13      	ldr	r2, [pc, #76]	; (8003ad4 <MX_I2C1_Init+0x54>)
 8003a88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003a8a:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <MX_I2C1_Init+0x50>)
 8003a8c:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <MX_I2C1_Init+0x58>)
 8003a8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a90:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <MX_I2C1_Init+0x50>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <MX_I2C1_Init+0x50>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <MX_I2C1_Init+0x50>)
 8003a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003aa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <MX_I2C1_Init+0x50>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003aaa:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <MX_I2C1_Init+0x50>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ab0:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <MX_I2C1_Init+0x50>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <MX_I2C1_Init+0x50>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003abc:	4804      	ldr	r0, [pc, #16]	; (8003ad0 <MX_I2C1_Init+0x50>)
 8003abe:	f003 f967 	bl	8006d90 <HAL_I2C_Init>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ac8:	f000 f982 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003acc:	bf00      	nop
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	200002d8 	.word	0x200002d8
 8003ad4:	40005400 	.word	0x40005400
 8003ad8:	000186a0 	.word	0x000186a0

08003adc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	; 0x28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	60da      	str	r2, [r3, #12]
 8003af2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <HAL_I2C_MspInit+0x94>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d133      	bne.n	8003b66 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <HAL_I2C_MspInit+0x98>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	4a1b      	ldr	r2, [pc, #108]	; (8003b74 <HAL_I2C_MspInit+0x98>)
 8003b08:	f043 0302 	orr.w	r3, r3, #2
 8003b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0e:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_I2C_MspInit+0x98>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b1a:	23c0      	movs	r3, #192	; 0xc0
 8003b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b1e:	2312      	movs	r3, #18
 8003b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b26:	2303      	movs	r3, #3
 8003b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2e:	f107 0314 	add.w	r3, r7, #20
 8003b32:	4619      	mov	r1, r3
 8003b34:	4810      	ldr	r0, [pc, #64]	; (8003b78 <HAL_I2C_MspInit+0x9c>)
 8003b36:	f002 ff43 	bl	80069c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <HAL_I2C_MspInit+0x98>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <HAL_I2C_MspInit+0x98>)
 8003b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <HAL_I2C_MspInit+0x98>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003b56:	2200      	movs	r2, #0
 8003b58:	2100      	movs	r1, #0
 8003b5a:	2020      	movs	r0, #32
 8003b5c:	f002 fabf 	bl	80060de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b60:	2020      	movs	r0, #32
 8003b62:	f002 fad8 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003b66:	bf00      	nop
 8003b68:	3728      	adds	r7, #40	; 0x28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40005400 	.word	0x40005400
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40020400 	.word	0x40020400

08003b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b80:	f002 f8d8 	bl	8005d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b84:	f000 f846 	bl	8003c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b88:	f7ff fee6 	bl	8003958 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003b8c:	f001 fb2a 	bl	80051e4 <MX_SPI1_Init>
  MX_DMA_Init();
 8003b90:	f7fe fcb0 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003b94:	f001 ffce 	bl	8005b34 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8003b98:	f001 fb5a 	bl	8005250 <MX_SPI3_Init>
  MX_I2C1_Init();
 8003b9c:	f7ff ff70 	bl	8003a80 <MX_I2C1_Init>
  MX_TIM11_Init();
 8003ba0:	f001 fdbc 	bl	800571c <MX_TIM11_Init>
  MX_TIM10_Init();
 8003ba4:	f001 fd96 	bl	80056d4 <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003ba8:	f000 f89c 	bl	8003ce4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 8003bac:	4813      	ldr	r0, [pc, #76]	; (8003bfc <main+0x80>)
 8003bae:	f006 fe01 	bl	800a7b4 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 8003bb2:	4813      	ldr	r0, [pc, #76]	; (8003c00 <main+0x84>)
 8003bb4:	f7fe f9fe 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8003bb8:	4912      	ldr	r1, [pc, #72]	; (8003c04 <main+0x88>)
 8003bba:	4813      	ldr	r0, [pc, #76]	; (8003c08 <main+0x8c>)
 8003bbc:	f001 ff6b 	bl	8005a96 <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 8003bc0:	2117      	movs	r1, #23
 8003bc2:	4812      	ldr	r0, [pc, #72]	; (8003c0c <main+0x90>)
 8003bc4:	f7fe fc46 	bl	8002454 <XPT2046_Init>
  // RTC Initialization
  DS3231_Init(&hi2c1);
 8003bc8:	4811      	ldr	r0, [pc, #68]	; (8003c10 <main+0x94>)
 8003bca:	f7fe fcbb 	bl	8002544 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f7fe fd12 	bl	80025f8 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	f7fe fd2f 	bl	8002638 <DS3231_EnableOscillator>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8003bda:	480b      	ldr	r0, [pc, #44]	; (8003c08 <main+0x8c>)
 8003bdc:	f001 ff0f 	bl	80059fe <UARTDMA_IsDataReceivedReady>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <main+0x70>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8003be6:	4808      	ldr	r0, [pc, #32]	; (8003c08 <main+0x8c>)
 8003be8:	f000 ff78 	bl	8004adc <UART_ParseLine>
	  }

	  //
	  // TRANSMIT
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8003bec:	4806      	ldr	r0, [pc, #24]	; (8003c08 <main+0x8c>)
 8003bee:	f001 ff18 	bl	8005a22 <UARTDMA_TransmitEvent>

	  //
	  // TOUCH
	  //
	  XPT2046_Task();
 8003bf2:	f7fe fb5d 	bl	80022b0 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  MenuTFT();
 8003bf6:	f000 f8f1 	bl	8003ddc <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8003bfa:	e7ee      	b.n	8003bda <main+0x5e>
 8003bfc:	2000057c 	.word	0x2000057c
 8003c00:	200004dc 	.word	0x200004dc
 8003c04:	20000684 	.word	0x20000684
 8003c08:	2000032c 	.word	0x2000032c
 8003c0c:	20000484 	.word	0x20000484
 8003c10:	200002d8 	.word	0x200002d8

08003c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b094      	sub	sp, #80	; 0x50
 8003c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c1a:	f107 0320 	add.w	r3, r7, #32
 8003c1e:	2230      	movs	r2, #48	; 0x30
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f008 f98e 	bl	800bf44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c28:	f107 030c 	add.w	r3, r7, #12
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	4b27      	ldr	r3, [pc, #156]	; (8003cdc <SystemClock_Config+0xc8>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	4a26      	ldr	r2, [pc, #152]	; (8003cdc <SystemClock_Config+0xc8>)
 8003c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c46:	6413      	str	r3, [r2, #64]	; 0x40
 8003c48:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <SystemClock_Config+0xc8>)
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c54:	2300      	movs	r3, #0
 8003c56:	607b      	str	r3, [r7, #4]
 8003c58:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <SystemClock_Config+0xcc>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a20      	ldr	r2, [pc, #128]	; (8003ce0 <SystemClock_Config+0xcc>)
 8003c5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <SystemClock_Config+0xcc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c6c:	607b      	str	r3, [r7, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c70:	2301      	movs	r3, #1
 8003c72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003c84:	230c      	movs	r3, #12
 8003c86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003c88:	2360      	movs	r3, #96	; 0x60
 8003c8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003c90:	2304      	movs	r3, #4
 8003c92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c94:	f107 0320 	add.w	r3, r7, #32
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f005 fcdf 	bl	800965c <HAL_RCC_OscConfig>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003ca4:	f000 f894 	bl	8003dd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ca8:	230f      	movs	r3, #15
 8003caa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cac:	2302      	movs	r3, #2
 8003cae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003cbe:	f107 030c 	add.w	r3, r7, #12
 8003cc2:	2103      	movs	r1, #3
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f005 ff41 	bl	8009b4c <HAL_RCC_ClockConfig>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003cd0:	f000 f87e 	bl	8003dd0 <Error_Handler>
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	3750      	adds	r7, #80	; 0x50
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	40007000 	.word	0x40007000

08003ce4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2100      	movs	r1, #0
 8003cec:	200a      	movs	r0, #10
 8003cee:	f002 f9f6 	bl	80060de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003cf2:	200a      	movs	r0, #10
 8003cf4:	f002 fa0f 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	2017      	movs	r0, #23
 8003cfe:	f002 f9ee 	bl	80060de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d02:	2017      	movs	r0, #23
 8003d04:	f002 fa07 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	201f      	movs	r0, #31
 8003d0e:	f002 f9e6 	bl	80060de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003d12:	201f      	movs	r0, #31
 8003d14:	f002 f9ff 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	2026      	movs	r0, #38	; 0x26
 8003d1e:	f002 f9de 	bl	80060de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d22:	2026      	movs	r0, #38	; 0x26
 8003d24:	f002 f9f7 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	2033      	movs	r0, #51	; 0x33
 8003d2e:	f002 f9d6 	bl	80060de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003d32:	2033      	movs	r0, #51	; 0x33
 8003d34:	f002 f9ef 	bl	8006116 <HAL_NVIC_EnableIRQ>
}
 8003d38:	bf00      	nop
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a12      	ldr	r2, [pc, #72]	; (8003d94 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d101      	bne.n	8003d52 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen();
 8003d4e:	f7ff fd35 	bl	80037bc <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a10      	ldr	r2, [pc, #64]	; (8003d98 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d117      	bne.n	8003d8c <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S)
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d90d      	bls.n	8003d80 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin);
 8003d64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d68:	480d      	ldr	r0, [pc, #52]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003d6a:	f002 ffde 	bl	8006d2a <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f7ff fdc6 	bl	8003900 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8003d7a:	480a      	ldr	r0, [pc, #40]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003d7c:	f006 fd7c 	bl	800a878 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	3301      	adds	r3, #1
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d8a:	701a      	strb	r2, [r3, #0]
	}
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40014800 	.word	0x40014800
 8003d98:	40014400 	.word	0x40014400
 8003d9c:	20000248 	.word	0x20000248
 8003da0:	40020800 	.word	0x40020800
 8003da4:	20000534 	.word	0x20000534

08003da8 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin)
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db8:	d101      	bne.n	8003dbe <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8003dba:	f7fe fb3f 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == RTC_IRQ_Pin) // Interrupt from RTC - alarm one per minute
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d101      	bne.n	8003dc8 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8003dc4:	f7fe fc7c 	bl	80026c0 <DS3231_ClearAlarm2Flag>

	}
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dd4:	b672      	cpsid	i
}
 8003dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003dd8:	e7fe      	b.n	8003dd8 <Error_Handler+0x8>
	...

08003ddc <MenuTFT>:
uint32_t TimerTouch = 0; // Timer to debouncing function

MenuTFTState State = MENUTFT_INIT; // Initialization state for MenuTFT State Machine

void MenuTFT(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
	switch(State)
 8003de0:	4b34      	ldr	r3, [pc, #208]	; (8003eb4 <MenuTFT+0xd8>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d862      	bhi.n	8003eae <MenuTFT+0xd2>
 8003de8:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <MenuTFT+0x14>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e09 	.word	0x08003e09
 8003df4:	08003e1b 	.word	0x08003e1b
 8003df8:	08003e4f 	.word	0x08003e4f
 8003dfc:	08003e7f 	.word	0x08003e7f
 8003e00:	08003e97 	.word	0x08003e97
 8003e04:	08003e67 	.word	0x08003e67
	{
	case MENUTFT_INIT:
		system_init();
 8003e08:	f7fe fd34 	bl	8002874 <system_init>
		State = MENUTFT_PARAMETERS;
 8003e0c:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <MenuTFT+0xd8>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <MenuTFT+0xdc>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]
		break;
 8003e18:	e049      	b.n	8003eae <MenuTFT+0xd2>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1)
 8003e1a:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <MenuTFT+0xdc>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d112      	bne.n	8003e48 <MenuTFT+0x6c>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8003e22:	4b26      	ldr	r3, [pc, #152]	; (8003ebc <MenuTFT+0xe0>)
 8003e24:	edd3 7a00 	vldr	s15, [r3]
 8003e28:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <MenuTFT+0xe4>)
 8003e2a:	ed93 7a00 	vldr	s14, [r3]
 8003e2e:	eeb0 1a47 	vmov.f32	s2, s14
 8003e32:	2100      	movs	r1, #0
 8003e34:	2000      	movs	r0, #0
 8003e36:	eddf 0a23 	vldr	s1, [pc, #140]	; 8003ec4 <MenuTFT+0xe8>
 8003e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e3e:	f7fe fe03 	bl	8002a48 <showCurrentParameters>
			StateChangeFlag = 0;
 8003e42:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <MenuTFT+0xdc>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8003e48:	f000 f83e 	bl	8003ec8 <TouchParametersActivity>
		break;
 8003e4c:	e02f      	b.n	8003eae <MenuTFT+0xd2>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1)
 8003e4e:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <MenuTFT+0xdc>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d104      	bne.n	8003e60 <MenuTFT+0x84>
		{
			showControlPanel();
 8003e56:	f7fe ff3d 	bl	8002cd4 <showControlPanel>
			StateChangeFlag = 0;
 8003e5a:	4b17      	ldr	r3, [pc, #92]	; (8003eb8 <MenuTFT+0xdc>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8003e60:	f000 f892 	bl	8003f88 <TouchSwitchActivity>
		break;
 8003e64:	e023      	b.n	8003eae <MenuTFT+0xd2>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1)
 8003e66:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <MenuTFT+0xdc>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d104      	bne.n	8003e78 <MenuTFT+0x9c>
		{
			showLightsControlPanel();
 8003e6e:	f7ff f90f 	bl	8003090 <showLightsControlPanel>
			StateChangeFlag = 0;
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <MenuTFT+0xdc>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 8003e78:	f000 fa62 	bl	8004340 <TouchLightsActivity>
		break;
 8003e7c:	e017      	b.n	8003eae <MenuTFT+0xd2>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1)
 8003e7e:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <MenuTFT+0xdc>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d104      	bne.n	8003e90 <MenuTFT+0xb4>
		{
			showClockSetPanel();
 8003e86:	f7ff faab 	bl	80033e0 <showClockSetPanel>
			StateChangeFlag = 0;
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <MenuTFT+0xdc>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8003e90:	f000 fc0c 	bl	80046ac <TouchClockActivity>
		break;
 8003e94:	e00b      	b.n	8003eae <MenuTFT+0xd2>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1)
 8003e96:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <MenuTFT+0xdc>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d104      	bne.n	8003ea8 <MenuTFT+0xcc>
		{
			showPreparedActivitiesPanel();
 8003e9e:	f7ff fbb7 	bl	8003610 <showPreparedActivitiesPanel>
			StateChangeFlag =0;
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <MenuTFT+0xdc>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 8003ea8:	f000 fd32 	bl	8004910 <TouchPredefinedActivityActivity>
		break;
 8003eac:	bf00      	nop
	}
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000250 	.word	0x20000250
 8003eb8:	20000249 	.word	0x20000249
 8003ebc:	20000254 	.word	0x20000254
 8003ec0:	20000258 	.word	0x20000258
 8003ec4:	00000000 	.word	0x00000000

08003ec8 <TouchParametersActivity>:


void TouchParametersActivity(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8003ece:	f7fe f9dd 	bl	800228c <XPT2046_IsTouched>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d04c      	beq.n	8003f72 <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8003ed8:	f001 ff92 	bl	8005e00 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <TouchParametersActivity+0xb4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ee8:	d343      	bcc.n	8003f72 <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8003eea:	1d3a      	adds	r2, r7, #4
 8003eec:	1dbb      	adds	r3, r7, #6
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe f98d 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	2b09      	cmp	r3, #9
 8003efa:	d90f      	bls.n	8003f1c <TouchParametersActivity+0x54>
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	2b6e      	cmp	r3, #110	; 0x6e
 8003f00:	d80c      	bhi.n	8003f1c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8003f02:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8003f04:	2bd7      	cmp	r3, #215	; 0xd7
 8003f06:	d909      	bls.n	8003f1c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8003f08:	88bb      	ldrh	r3, [r7, #4]
 8003f0a:	2bec      	cmp	r3, #236	; 0xec
 8003f0c:	d806      	bhi.n	8003f1c <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 8003f0e:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <TouchParametersActivity+0xb8>)
 8003f10:	2205      	movs	r2, #5
 8003f12:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8003f14:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <TouchParametersActivity+0xbc>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	e025      	b.n	8003f68 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	2bdb      	cmp	r3, #219	; 0xdb
 8003f20:	d910      	bls.n	8003f44 <TouchParametersActivity+0x7c>
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f28:	d80c      	bhi.n	8003f44 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8003f2a:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8003f2c:	2bd7      	cmp	r3, #215	; 0xd7
 8003f2e:	d909      	bls.n	8003f44 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8003f30:	88bb      	ldrh	r3, [r7, #4]
 8003f32:	2bec      	cmp	r3, #236	; 0xec
 8003f34:	d806      	bhi.n	8003f44 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8003f36:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <TouchParametersActivity+0xb8>)
 8003f38:	2202      	movs	r2, #2
 8003f3a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8003f3c:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <TouchParametersActivity+0xbc>)
 8003f3e:	2201      	movs	r2, #1
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	e011      	b.n	8003f68 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	2b77      	cmp	r3, #119	; 0x77
 8003f48:	d90e      	bls.n	8003f68 <TouchParametersActivity+0xa0>
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	2bd2      	cmp	r3, #210	; 0xd2
 8003f4e:	d80b      	bhi.n	8003f68 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8003f50:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8003f52:	2bd7      	cmp	r3, #215	; 0xd7
 8003f54:	d908      	bls.n	8003f68 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8003f56:	88bb      	ldrh	r3, [r7, #4]
 8003f58:	2bec      	cmp	r3, #236	; 0xec
 8003f5a:	d805      	bhi.n	8003f68 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8003f5c:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <TouchParametersActivity+0xb8>)
 8003f5e:	2203      	movs	r2, #3
 8003f60:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8003f62:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <TouchParametersActivity+0xbc>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8003f68:	f001 ff4a 	bl	8005e00 <HAL_GetTick>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4a03      	ldr	r2, [pc, #12]	; (8003f7c <TouchParametersActivity+0xb4>)
 8003f70:	6013      	str	r3, [r2, #0]
		}
	}
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	2000024c 	.word	0x2000024c
 8003f80:	20000250 	.word	0x20000250
 8003f84:	20000249 	.word	0x20000249

08003f88 <TouchSwitchActivity>:

void TouchSwitchActivity(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8003f8e:	f7fe f97d 	bl	800228c <XPT2046_IsTouched>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 81c3 	beq.w	8004320 <TouchSwitchActivity+0x398>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8003f9a:	f001 ff31 	bl	8005e00 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	4ba8      	ldr	r3, [pc, #672]	; (8004244 <TouchSwitchActivity+0x2bc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003faa:	f0c0 81b9 	bcc.w	8004320 <TouchSwitchActivity+0x398>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8003fae:	1cba      	adds	r2, r7, #2
 8003fb0:	1d3b      	adds	r3, r7, #4
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe f92b 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8003fba:	88bb      	ldrh	r3, [r7, #4]
 8003fbc:	2b09      	cmp	r3, #9
 8003fbe:	d90f      	bls.n	8003fe0 <TouchSwitchActivity+0x58>
 8003fc0:	88bb      	ldrh	r3, [r7, #4]
 8003fc2:	2b6e      	cmp	r3, #110	; 0x6e
 8003fc4:	d80c      	bhi.n	8003fe0 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8003fc6:	887b      	ldrh	r3, [r7, #2]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8003fc8:	2bd7      	cmp	r3, #215	; 0xd7
 8003fca:	d909      	bls.n	8003fe0 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8003fcc:	887b      	ldrh	r3, [r7, #2]
 8003fce:	2bec      	cmp	r3, #236	; 0xec
 8003fd0:	d806      	bhi.n	8003fe0 <TouchSwitchActivity+0x58>
			{
				State = MENUTFT_PARAMETERS;
 8003fd2:	4b9d      	ldr	r3, [pc, #628]	; (8004248 <TouchSwitchActivity+0x2c0>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8003fd8:	4b9c      	ldr	r3, [pc, #624]	; (800424c <TouchSwitchActivity+0x2c4>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	e19a      	b.n	8004316 <TouchSwitchActivity+0x38e>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8003fe0:	88bb      	ldrh	r3, [r7, #4]
 8003fe2:	2bdb      	cmp	r3, #219	; 0xdb
 8003fe4:	d910      	bls.n	8004008 <TouchSwitchActivity+0x80>
 8003fe6:	88bb      	ldrh	r3, [r7, #4]
 8003fe8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003fec:	d80c      	bhi.n	8004008 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8003fee:	887b      	ldrh	r3, [r7, #2]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8003ff0:	2bd7      	cmp	r3, #215	; 0xd7
 8003ff2:	d909      	bls.n	8004008 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8003ff4:	887b      	ldrh	r3, [r7, #2]
 8003ff6:	2bec      	cmp	r3, #236	; 0xec
 8003ff8:	d806      	bhi.n	8004008 <TouchSwitchActivity+0x80>
			{
				State = MENUTFT_LIGHTS;
 8003ffa:	4b93      	ldr	r3, [pc, #588]	; (8004248 <TouchSwitchActivity+0x2c0>)
 8003ffc:	2205      	movs	r2, #5
 8003ffe:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004000:	4b92      	ldr	r3, [pc, #584]	; (800424c <TouchSwitchActivity+0x2c4>)
 8004002:	2201      	movs	r2, #1
 8004004:	701a      	strb	r2, [r3, #0]
 8004006:	e186      	b.n	8004316 <TouchSwitchActivity+0x38e>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004008:	88bb      	ldrh	r3, [r7, #4]
 800400a:	2b77      	cmp	r3, #119	; 0x77
 800400c:	d90f      	bls.n	800402e <TouchSwitchActivity+0xa6>
 800400e:	88bb      	ldrh	r3, [r7, #4]
 8004010:	2bd2      	cmp	r3, #210	; 0xd2
 8004012:	d80c      	bhi.n	800402e <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004014:	887b      	ldrh	r3, [r7, #2]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004016:	2bd7      	cmp	r3, #215	; 0xd7
 8004018:	d909      	bls.n	800402e <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800401a:	887b      	ldrh	r3, [r7, #2]
 800401c:	2bec      	cmp	r3, #236	; 0xec
 800401e:	d806      	bhi.n	800402e <TouchSwitchActivity+0xa6>
			{
				State = MENUTFT_ACTIVITIES;
 8004020:	4b89      	ldr	r3, [pc, #548]	; (8004248 <TouchSwitchActivity+0x2c0>)
 8004022:	2204      	movs	r2, #4
 8004024:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004026:	4b89      	ldr	r3, [pc, #548]	; (800424c <TouchSwitchActivity+0x2c4>)
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e173      	b.n	8004316 <TouchSwitchActivity+0x38e>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 800402e:	88bb      	ldrh	r3, [r7, #4]
 8004030:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004034:	f0c0 816f 	bcc.w	8004316 <TouchSwitchActivity+0x38e>
 8004038:	88bb      	ldrh	r3, [r7, #4]
 800403a:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800403e:	f080 816a 	bcs.w	8004316 <TouchSwitchActivity+0x38e>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8004042:	4883      	ldr	r0, [pc, #524]	; (8004250 <TouchSwitchActivity+0x2c8>)
 8004044:	f7fd fb54 	bl	80016f0 <EF_SetFont>
				uint8_t Len = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	71fb      	strb	r3, [r7, #7]
				if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))	//FIRST SWITCH
 800404c:	887b      	ldrh	r3, [r7, #2]
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	d950      	bls.n	80040f4 <TouchSwitchActivity+0x16c>
 8004052:	887b      	ldrh	r3, [r7, #2]
 8004054:	2b56      	cmp	r3, #86	; 0x56
 8004056:	d84d      	bhi.n	80040f4 <TouchSwitchActivity+0x16c>
				{
					if(SwitchesButtonState[0] >= 1) // if is ON
 8004058:	4b7e      	ldr	r3, [pc, #504]	; (8004254 <TouchSwitchActivity+0x2cc>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d024      	beq.n	80040aa <TouchSwitchActivity+0x122>
					{
						SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8004060:	2006      	movs	r0, #6
 8004062:	f000 ff7d 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004066:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800406a:	9301      	str	r3, [sp, #4]
 800406c:	2305      	movs	r3, #5
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	2315      	movs	r3, #21
 8004072:	2221      	movs	r2, #33	; 0x21
 8004074:	2141      	movs	r1, #65	; 0x41
 8004076:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800407a:	f7fd fae8 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 800407e:	4976      	ldr	r1, [pc, #472]	; (8004258 <TouchSwitchActivity+0x2d0>)
 8004080:	4876      	ldr	r0, [pc, #472]	; (800425c <TouchSwitchActivity+0x2d4>)
 8004082:	f008 fde7 	bl	800cc54 <siprintf>
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800408a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800408e:	9301      	str	r3, [sp, #4]
 8004090:	2300      	movs	r3, #0
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	2300      	movs	r3, #0
 8004096:	2243      	movs	r2, #67	; 0x43
 8004098:	f240 1111 	movw	r1, #273	; 0x111
 800409c:	486f      	ldr	r0, [pc, #444]	; (800425c <TouchSwitchActivity+0x2d4>)
 800409e:	f7fd fd41 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 0;
 80040a2:	4b6c      	ldr	r3, [pc, #432]	; (8004254 <TouchSwitchActivity+0x2cc>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]
					if(SwitchesButtonState[0] >= 1) // if is ON
 80040a8:	e12f      	b.n	800430a <TouchSwitchActivity+0x382>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 80040aa:	2005      	movs	r0, #5
 80040ac:	f000 ff58 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80040b0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	2305      	movs	r3, #5
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	2315      	movs	r3, #21
 80040bc:	2221      	movs	r2, #33	; 0x21
 80040be:	2141      	movs	r1, #65	; 0x41
 80040c0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80040c4:	f7fd fac3 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 80040c8:	4965      	ldr	r1, [pc, #404]	; (8004260 <TouchSwitchActivity+0x2d8>)
 80040ca:	4864      	ldr	r0, [pc, #400]	; (800425c <TouchSwitchActivity+0x2d4>)
 80040cc:	f008 fdc2 	bl	800cc54 <siprintf>
 80040d0:	4603      	mov	r3, r0
 80040d2:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80040d4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80040d8:	9301      	str	r3, [sp, #4]
 80040da:	2300      	movs	r3, #0
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	2300      	movs	r3, #0
 80040e0:	2243      	movs	r2, #67	; 0x43
 80040e2:	f240 1111 	movw	r1, #273	; 0x111
 80040e6:	485d      	ldr	r0, [pc, #372]	; (800425c <TouchSwitchActivity+0x2d4>)
 80040e8:	f7fd fd1c 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 1;
 80040ec:	4b59      	ldr	r3, [pc, #356]	; (8004254 <TouchSwitchActivity+0x2cc>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
					if(SwitchesButtonState[0] >= 1) // if is ON
 80040f2:	e10a      	b.n	800430a <TouchSwitchActivity+0x382>
					}

				}
				else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))	//SECOND SWITCH
 80040f4:	887b      	ldrh	r3, [r7, #2]
 80040f6:	2b5e      	cmp	r3, #94	; 0x5e
 80040f8:	d950      	bls.n	800419c <TouchSwitchActivity+0x214>
 80040fa:	887b      	ldrh	r3, [r7, #2]
 80040fc:	2b74      	cmp	r3, #116	; 0x74
 80040fe:	d84d      	bhi.n	800419c <TouchSwitchActivity+0x214>
				{
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004100:	4b54      	ldr	r3, [pc, #336]	; (8004254 <TouchSwitchActivity+0x2cc>)
 8004102:	785b      	ldrb	r3, [r3, #1]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d024      	beq.n	8004152 <TouchSwitchActivity+0x1ca>
					{
						SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8004108:	2008      	movs	r0, #8
 800410a:	f000 ff29 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800410e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	2305      	movs	r3, #5
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2315      	movs	r3, #21
 800411a:	2221      	movs	r2, #33	; 0x21
 800411c:	215f      	movs	r1, #95	; 0x5f
 800411e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004122:	f7fd fa94 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 8004126:	494c      	ldr	r1, [pc, #304]	; (8004258 <TouchSwitchActivity+0x2d0>)
 8004128:	484c      	ldr	r0, [pc, #304]	; (800425c <TouchSwitchActivity+0x2d4>)
 800412a:	f008 fd93 	bl	800cc54 <siprintf>
 800412e:	4603      	mov	r3, r0
 8004130:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004132:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	2300      	movs	r3, #0
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2300      	movs	r3, #0
 800413e:	2261      	movs	r2, #97	; 0x61
 8004140:	f240 1111 	movw	r1, #273	; 0x111
 8004144:	4845      	ldr	r0, [pc, #276]	; (800425c <TouchSwitchActivity+0x2d4>)
 8004146:	f7fd fced 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 0;
 800414a:	4b42      	ldr	r3, [pc, #264]	; (8004254 <TouchSwitchActivity+0x2cc>)
 800414c:	2200      	movs	r2, #0
 800414e:	705a      	strb	r2, [r3, #1]
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004150:	e0db      	b.n	800430a <TouchSwitchActivity+0x382>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8004152:	2007      	movs	r0, #7
 8004154:	f000 ff04 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004158:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	2305      	movs	r3, #5
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	2315      	movs	r3, #21
 8004164:	2221      	movs	r2, #33	; 0x21
 8004166:	215f      	movs	r1, #95	; 0x5f
 8004168:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800416c:	f7fd fa6f 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 8004170:	493b      	ldr	r1, [pc, #236]	; (8004260 <TouchSwitchActivity+0x2d8>)
 8004172:	483a      	ldr	r0, [pc, #232]	; (800425c <TouchSwitchActivity+0x2d4>)
 8004174:	f008 fd6e 	bl	800cc54 <siprintf>
 8004178:	4603      	mov	r3, r0
 800417a:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800417c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	2300      	movs	r3, #0
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	2300      	movs	r3, #0
 8004188:	2261      	movs	r2, #97	; 0x61
 800418a:	f240 1111 	movw	r1, #273	; 0x111
 800418e:	4833      	ldr	r0, [pc, #204]	; (800425c <TouchSwitchActivity+0x2d4>)
 8004190:	f7fd fcc8 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 1;
 8004194:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <TouchSwitchActivity+0x2cc>)
 8004196:	2201      	movs	r2, #1
 8004198:	705a      	strb	r2, [r3, #1]
					if(SwitchesButtonState[1] >= 1) // if is ON
 800419a:	e0b6      	b.n	800430a <TouchSwitchActivity+0x382>
					}
				}
				else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))	//THIRD SWITCH
 800419c:	887b      	ldrh	r3, [r7, #2]
 800419e:	2b7c      	cmp	r3, #124	; 0x7c
 80041a0:	d960      	bls.n	8004264 <TouchSwitchActivity+0x2dc>
 80041a2:	887b      	ldrh	r3, [r7, #2]
 80041a4:	2b92      	cmp	r3, #146	; 0x92
 80041a6:	d85d      	bhi.n	8004264 <TouchSwitchActivity+0x2dc>
				{
					if(SwitchesButtonState[2] >= 1) // if is ON
 80041a8:	4b2a      	ldr	r3, [pc, #168]	; (8004254 <TouchSwitchActivity+0x2cc>)
 80041aa:	789b      	ldrb	r3, [r3, #2]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d024      	beq.n	80041fa <TouchSwitchActivity+0x272>
					{
						SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 80041b0:	200a      	movs	r0, #10
 80041b2:	f000 fed5 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80041b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	2305      	movs	r3, #5
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2315      	movs	r3, #21
 80041c2:	2221      	movs	r2, #33	; 0x21
 80041c4:	217d      	movs	r1, #125	; 0x7d
 80041c6:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80041ca:	f7fd fa40 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 80041ce:	4922      	ldr	r1, [pc, #136]	; (8004258 <TouchSwitchActivity+0x2d0>)
 80041d0:	4822      	ldr	r0, [pc, #136]	; (800425c <TouchSwitchActivity+0x2d4>)
 80041d2:	f008 fd3f 	bl	800cc54 <siprintf>
 80041d6:	4603      	mov	r3, r0
 80041d8:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80041da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	2300      	movs	r3, #0
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	2300      	movs	r3, #0
 80041e6:	227f      	movs	r2, #127	; 0x7f
 80041e8:	f240 1111 	movw	r1, #273	; 0x111
 80041ec:	481b      	ldr	r0, [pc, #108]	; (800425c <TouchSwitchActivity+0x2d4>)
 80041ee:	f7fd fc99 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 0;
 80041f2:	4b18      	ldr	r3, [pc, #96]	; (8004254 <TouchSwitchActivity+0x2cc>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	709a      	strb	r2, [r3, #2]
					if(SwitchesButtonState[2] >= 1) // if is ON
 80041f8:	e087      	b.n	800430a <TouchSwitchActivity+0x382>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 80041fa:	2009      	movs	r0, #9
 80041fc:	f000 feb0 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004200:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	2305      	movs	r3, #5
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	2315      	movs	r3, #21
 800420c:	2221      	movs	r2, #33	; 0x21
 800420e:	217d      	movs	r1, #125	; 0x7d
 8004210:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004214:	f7fd fa1b 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 8004218:	4911      	ldr	r1, [pc, #68]	; (8004260 <TouchSwitchActivity+0x2d8>)
 800421a:	4810      	ldr	r0, [pc, #64]	; (800425c <TouchSwitchActivity+0x2d4>)
 800421c:	f008 fd1a 	bl	800cc54 <siprintf>
 8004220:	4603      	mov	r3, r0
 8004222:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004224:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	2300      	movs	r3, #0
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	2300      	movs	r3, #0
 8004230:	227f      	movs	r2, #127	; 0x7f
 8004232:	f240 1111 	movw	r1, #273	; 0x111
 8004236:	4809      	ldr	r0, [pc, #36]	; (800425c <TouchSwitchActivity+0x2d4>)
 8004238:	f7fd fc74 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 1;
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <TouchSwitchActivity+0x2cc>)
 800423e:	2201      	movs	r2, #1
 8004240:	709a      	strb	r2, [r3, #2]
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004242:	e062      	b.n	800430a <TouchSwitchActivity+0x382>
 8004244:	2000024c 	.word	0x2000024c
 8004248:	20000250 	.word	0x20000250
 800424c:	20000249 	.word	0x20000249
 8004250:	08011878 	.word	0x08011878
 8004254:	20000264 	.word	0x20000264
 8004258:	08010b20 	.word	0x08010b20
 800425c:	200002b8 	.word	0x200002b8
 8004260:	08010b24 	.word	0x08010b24
					}
				}
				else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))	//FOURTH SWITCH
 8004264:	887b      	ldrh	r3, [r7, #2]
 8004266:	2b9a      	cmp	r3, #154	; 0x9a
 8004268:	d94f      	bls.n	800430a <TouchSwitchActivity+0x382>
 800426a:	887b      	ldrh	r3, [r7, #2]
 800426c:	2bb0      	cmp	r3, #176	; 0xb0
 800426e:	d84c      	bhi.n	800430a <TouchSwitchActivity+0x382>
				{
					if(SwitchesButtonState[3] >= 1) // if is ON
 8004270:	4b2d      	ldr	r3, [pc, #180]	; (8004328 <TouchSwitchActivity+0x3a0>)
 8004272:	78db      	ldrb	r3, [r3, #3]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d024      	beq.n	80042c2 <TouchSwitchActivity+0x33a>
					{
						SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8004278:	200c      	movs	r0, #12
 800427a:	f000 fe71 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800427e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	2305      	movs	r3, #5
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	2315      	movs	r3, #21
 800428a:	2221      	movs	r2, #33	; 0x21
 800428c:	219b      	movs	r1, #155	; 0x9b
 800428e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004292:	f7fd f9dc 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 8004296:	4925      	ldr	r1, [pc, #148]	; (800432c <TouchSwitchActivity+0x3a4>)
 8004298:	4825      	ldr	r0, [pc, #148]	; (8004330 <TouchSwitchActivity+0x3a8>)
 800429a:	f008 fcdb 	bl	800cc54 <siprintf>
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80042a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	2300      	movs	r3, #0
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	2300      	movs	r3, #0
 80042ae:	229d      	movs	r2, #157	; 0x9d
 80042b0:	f240 1111 	movw	r1, #273	; 0x111
 80042b4:	481e      	ldr	r0, [pc, #120]	; (8004330 <TouchSwitchActivity+0x3a8>)
 80042b6:	f7fd fc35 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 0;
 80042ba:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <TouchSwitchActivity+0x3a0>)
 80042bc:	2200      	movs	r2, #0
 80042be:	70da      	strb	r2, [r3, #3]
 80042c0:	e023      	b.n	800430a <TouchSwitchActivity+0x382>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 80042c2:	200b      	movs	r0, #11
 80042c4:	f000 fe4c 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80042c8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	2305      	movs	r3, #5
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	2315      	movs	r3, #21
 80042d4:	2221      	movs	r2, #33	; 0x21
 80042d6:	219b      	movs	r1, #155	; 0x9b
 80042d8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80042dc:	f7fd f9b7 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 80042e0:	4914      	ldr	r1, [pc, #80]	; (8004334 <TouchSwitchActivity+0x3ac>)
 80042e2:	4813      	ldr	r0, [pc, #76]	; (8004330 <TouchSwitchActivity+0x3a8>)
 80042e4:	f008 fcb6 	bl	800cc54 <siprintf>
 80042e8:	4603      	mov	r3, r0
 80042ea:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80042ec:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80042f0:	9301      	str	r3, [sp, #4]
 80042f2:	2300      	movs	r3, #0
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	2300      	movs	r3, #0
 80042f8:	229d      	movs	r2, #157	; 0x9d
 80042fa:	f240 1111 	movw	r1, #273	; 0x111
 80042fe:	480c      	ldr	r0, [pc, #48]	; (8004330 <TouchSwitchActivity+0x3a8>)
 8004300:	f7fd fc10 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 1;
 8004304:	4b08      	ldr	r3, [pc, #32]	; (8004328 <TouchSwitchActivity+0x3a0>)
 8004306:	2201      	movs	r2, #1
 8004308:	70da      	strb	r2, [r3, #3]
					}
				}
				Len++;
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	3301      	adds	r3, #1
 800430e:	71fb      	strb	r3, [r7, #7]
				EF_SetFont(&arialBlack_20ptFontInfo);
 8004310:	4809      	ldr	r0, [pc, #36]	; (8004338 <TouchSwitchActivity+0x3b0>)
 8004312:	f7fd f9ed 	bl	80016f0 <EF_SetFont>
			}
			TimerTouch = HAL_GetTick();
 8004316:	f001 fd73 	bl	8005e00 <HAL_GetTick>
 800431a:	4603      	mov	r3, r0
 800431c:	4a07      	ldr	r2, [pc, #28]	; (800433c <TouchSwitchActivity+0x3b4>)
 800431e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000264 	.word	0x20000264
 800432c:	08010b20 	.word	0x08010b20
 8004330:	200002b8 	.word	0x200002b8
 8004334:	08010b24 	.word	0x08010b24
 8004338:	080137f0 	.word	0x080137f0
 800433c:	2000024c 	.word	0x2000024c

08004340 <TouchLightsActivity>:

void TouchLightsActivity(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8004346:	f7fd ffa1 	bl	800228c <XPT2046_IsTouched>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 819e 	beq.w	800468e <TouchLightsActivity+0x34e>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004352:	f001 fd55 	bl	8005e00 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	4bae      	ldr	r3, [pc, #696]	; (8004614 <TouchLightsActivity+0x2d4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004362:	f0c0 8194 	bcc.w	800468e <TouchLightsActivity+0x34e>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004366:	1cba      	adds	r2, r7, #2
 8004368:	1d3b      	adds	r3, r7, #4
 800436a:	4611      	mov	r1, r2
 800436c:	4618      	mov	r0, r3
 800436e:	f7fd ff4f 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004372:	88bb      	ldrh	r3, [r7, #4]
 8004374:	2b09      	cmp	r3, #9
 8004376:	d90f      	bls.n	8004398 <TouchLightsActivity+0x58>
 8004378:	88bb      	ldrh	r3, [r7, #4]
 800437a:	2b6e      	cmp	r3, #110	; 0x6e
 800437c:	d80c      	bhi.n	8004398 <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800437e:	887b      	ldrh	r3, [r7, #2]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004380:	2bd7      	cmp	r3, #215	; 0xd7
 8004382:	d909      	bls.n	8004398 <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004384:	887b      	ldrh	r3, [r7, #2]
 8004386:	2bec      	cmp	r3, #236	; 0xec
 8004388:	d806      	bhi.n	8004398 <TouchLightsActivity+0x58>
			{
				State = MENUTFT_SWITCH;
 800438a:	4ba3      	ldr	r3, [pc, #652]	; (8004618 <TouchLightsActivity+0x2d8>)
 800438c:	2202      	movs	r2, #2
 800438e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004390:	4ba2      	ldr	r3, [pc, #648]	; (800461c <TouchLightsActivity+0x2dc>)
 8004392:	2201      	movs	r2, #1
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	e175      	b.n	8004684 <TouchLightsActivity+0x344>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004398:	88bb      	ldrh	r3, [r7, #4]
 800439a:	2bdb      	cmp	r3, #219	; 0xdb
 800439c:	d910      	bls.n	80043c0 <TouchLightsActivity+0x80>
 800439e:	88bb      	ldrh	r3, [r7, #4]
 80043a0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80043a4:	d80c      	bhi.n	80043c0 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80043a6:	887b      	ldrh	r3, [r7, #2]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80043a8:	2bd7      	cmp	r3, #215	; 0xd7
 80043aa:	d909      	bls.n	80043c0 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80043ac:	887b      	ldrh	r3, [r7, #2]
 80043ae:	2bec      	cmp	r3, #236	; 0xec
 80043b0:	d806      	bhi.n	80043c0 <TouchLightsActivity+0x80>
			{
				State = MENUTFT_PARAMETERS;
 80043b2:	4b99      	ldr	r3, [pc, #612]	; (8004618 <TouchLightsActivity+0x2d8>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80043b8:	4b98      	ldr	r3, [pc, #608]	; (800461c <TouchLightsActivity+0x2dc>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	e161      	b.n	8004684 <TouchLightsActivity+0x344>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 80043c0:	88bb      	ldrh	r3, [r7, #4]
 80043c2:	2bc7      	cmp	r3, #199	; 0xc7
 80043c4:	f240 815e 	bls.w	8004684 <TouchLightsActivity+0x344>
 80043c8:	88bb      	ldrh	r3, [r7, #4]
 80043ca:	2be9      	cmp	r3, #233	; 0xe9
 80043cc:	f200 815a 	bhi.w	8004684 <TouchLightsActivity+0x344>
			{
				EF_SetFont(&arial_11ptFontInfo);
 80043d0:	4893      	ldr	r0, [pc, #588]	; (8004620 <TouchLightsActivity+0x2e0>)
 80043d2:	f7fd f98d 	bl	80016f0 <EF_SetFont>
				uint8_t Len = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	71fb      	strb	r3, [r7, #7]
				if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H))) // FIRST LIGHT
 80043da:	887b      	ldrh	r3, [r7, #2]
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d94c      	bls.n	800447a <TouchLightsActivity+0x13a>
 80043e0:	887b      	ldrh	r3, [r7, #2]
 80043e2:	2b56      	cmp	r3, #86	; 0x56
 80043e4:	d849      	bhi.n	800447a <TouchLightsActivity+0x13a>
				{
					if(LightsButtonState[0] >= 1) // if is ON
 80043e6:	4b8f      	ldr	r3, [pc, #572]	; (8004624 <TouchLightsActivity+0x2e4>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d022      	beq.n	8004434 <TouchLightsActivity+0xf4>
					{
						SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 80043ee:	200e      	movs	r0, #14
 80043f0:	f000 fdb6 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80043f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043f8:	9301      	str	r3, [sp, #4]
 80043fa:	2305      	movs	r3, #5
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	2315      	movs	r3, #21
 8004400:	2221      	movs	r2, #33	; 0x21
 8004402:	2141      	movs	r1, #65	; 0x41
 8004404:	20c8      	movs	r0, #200	; 0xc8
 8004406:	f7fd f922 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 800440a:	4987      	ldr	r1, [pc, #540]	; (8004628 <TouchLightsActivity+0x2e8>)
 800440c:	4887      	ldr	r0, [pc, #540]	; (800462c <TouchLightsActivity+0x2ec>)
 800440e:	f008 fc21 	bl	800cc54 <siprintf>
 8004412:	4603      	mov	r3, r0
 8004414:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004416:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	2300      	movs	r3, #0
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2300      	movs	r3, #0
 8004422:	2243      	movs	r2, #67	; 0x43
 8004424:	21cb      	movs	r1, #203	; 0xcb
 8004426:	4881      	ldr	r0, [pc, #516]	; (800462c <TouchLightsActivity+0x2ec>)
 8004428:	f7fd fb7c 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 0;
 800442c:	4b7d      	ldr	r3, [pc, #500]	; (8004624 <TouchLightsActivity+0x2e4>)
 800442e:	2200      	movs	r2, #0
 8004430:	701a      	strb	r2, [r3, #0]
					if(LightsButtonState[0] >= 1) // if is ON
 8004432:	e121      	b.n	8004678 <TouchLightsActivity+0x338>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8004434:	200d      	movs	r0, #13
 8004436:	f000 fd93 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800443a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	2305      	movs	r3, #5
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	2315      	movs	r3, #21
 8004446:	2221      	movs	r2, #33	; 0x21
 8004448:	2141      	movs	r1, #65	; 0x41
 800444a:	20c8      	movs	r0, #200	; 0xc8
 800444c:	f7fd f8ff 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 8004450:	4977      	ldr	r1, [pc, #476]	; (8004630 <TouchLightsActivity+0x2f0>)
 8004452:	4876      	ldr	r0, [pc, #472]	; (800462c <TouchLightsActivity+0x2ec>)
 8004454:	f008 fbfe 	bl	800cc54 <siprintf>
 8004458:	4603      	mov	r3, r0
 800445a:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800445c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	2300      	movs	r3, #0
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	2300      	movs	r3, #0
 8004468:	2243      	movs	r2, #67	; 0x43
 800446a:	21cb      	movs	r1, #203	; 0xcb
 800446c:	486f      	ldr	r0, [pc, #444]	; (800462c <TouchLightsActivity+0x2ec>)
 800446e:	f7fd fb59 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 1;
 8004472:	4b6c      	ldr	r3, [pc, #432]	; (8004624 <TouchLightsActivity+0x2e4>)
 8004474:	2201      	movs	r2, #1
 8004476:	701a      	strb	r2, [r3, #0]
					if(LightsButtonState[0] >= 1) // if is ON
 8004478:	e0fe      	b.n	8004678 <TouchLightsActivity+0x338>
					}
				}
				else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H))) // SECOND LIGHT
 800447a:	887b      	ldrh	r3, [r7, #2]
 800447c:	2b5e      	cmp	r3, #94	; 0x5e
 800447e:	d94c      	bls.n	800451a <TouchLightsActivity+0x1da>
 8004480:	887b      	ldrh	r3, [r7, #2]
 8004482:	2b74      	cmp	r3, #116	; 0x74
 8004484:	d849      	bhi.n	800451a <TouchLightsActivity+0x1da>
				{
					if(LightsButtonState[1] >= 1) // if is ON
 8004486:	4b67      	ldr	r3, [pc, #412]	; (8004624 <TouchLightsActivity+0x2e4>)
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d022      	beq.n	80044d4 <TouchLightsActivity+0x194>
					{
						SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 800448e:	2010      	movs	r0, #16
 8004490:	f000 fd66 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004494:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	2305      	movs	r3, #5
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	2315      	movs	r3, #21
 80044a0:	2221      	movs	r2, #33	; 0x21
 80044a2:	215f      	movs	r1, #95	; 0x5f
 80044a4:	20c8      	movs	r0, #200	; 0xc8
 80044a6:	f7fd f8d2 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 80044aa:	495f      	ldr	r1, [pc, #380]	; (8004628 <TouchLightsActivity+0x2e8>)
 80044ac:	485f      	ldr	r0, [pc, #380]	; (800462c <TouchLightsActivity+0x2ec>)
 80044ae:	f008 fbd1 	bl	800cc54 <siprintf>
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80044b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	2300      	movs	r3, #0
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2300      	movs	r3, #0
 80044c2:	2261      	movs	r2, #97	; 0x61
 80044c4:	21cb      	movs	r1, #203	; 0xcb
 80044c6:	4859      	ldr	r0, [pc, #356]	; (800462c <TouchLightsActivity+0x2ec>)
 80044c8:	f7fd fb2c 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 0;
 80044cc:	4b55      	ldr	r3, [pc, #340]	; (8004624 <TouchLightsActivity+0x2e4>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	705a      	strb	r2, [r3, #1]
					if(LightsButtonState[1] >= 1) // if is ON
 80044d2:	e0d1      	b.n	8004678 <TouchLightsActivity+0x338>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 80044d4:	200f      	movs	r0, #15
 80044d6:	f000 fd43 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80044da:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	2305      	movs	r3, #5
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	2315      	movs	r3, #21
 80044e6:	2221      	movs	r2, #33	; 0x21
 80044e8:	215f      	movs	r1, #95	; 0x5f
 80044ea:	20c8      	movs	r0, #200	; 0xc8
 80044ec:	f7fd f8af 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 80044f0:	494f      	ldr	r1, [pc, #316]	; (8004630 <TouchLightsActivity+0x2f0>)
 80044f2:	484e      	ldr	r0, [pc, #312]	; (800462c <TouchLightsActivity+0x2ec>)
 80044f4:	f008 fbae 	bl	800cc54 <siprintf>
 80044f8:	4603      	mov	r3, r0
 80044fa:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80044fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	2300      	movs	r3, #0
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	2300      	movs	r3, #0
 8004508:	2261      	movs	r2, #97	; 0x61
 800450a:	21cb      	movs	r1, #203	; 0xcb
 800450c:	4847      	ldr	r0, [pc, #284]	; (800462c <TouchLightsActivity+0x2ec>)
 800450e:	f7fd fb09 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 1;
 8004512:	4b44      	ldr	r3, [pc, #272]	; (8004624 <TouchLightsActivity+0x2e4>)
 8004514:	2201      	movs	r2, #1
 8004516:	705a      	strb	r2, [r3, #1]
					if(LightsButtonState[1] >= 1) // if is ON
 8004518:	e0ae      	b.n	8004678 <TouchLightsActivity+0x338>
					}
				}
				else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H))) // THIRD LIGHT
 800451a:	887b      	ldrh	r3, [r7, #2]
 800451c:	2b7c      	cmp	r3, #124	; 0x7c
 800451e:	d94c      	bls.n	80045ba <TouchLightsActivity+0x27a>
 8004520:	887b      	ldrh	r3, [r7, #2]
 8004522:	2b92      	cmp	r3, #146	; 0x92
 8004524:	d849      	bhi.n	80045ba <TouchLightsActivity+0x27a>
				{
					if(LightsButtonState[2] >= 1) // if is ON
 8004526:	4b3f      	ldr	r3, [pc, #252]	; (8004624 <TouchLightsActivity+0x2e4>)
 8004528:	789b      	ldrb	r3, [r3, #2]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d022      	beq.n	8004574 <TouchLightsActivity+0x234>
					{
						SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 800452e:	2012      	movs	r0, #18
 8004530:	f000 fd16 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004534:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	2305      	movs	r3, #5
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	2315      	movs	r3, #21
 8004540:	2221      	movs	r2, #33	; 0x21
 8004542:	217d      	movs	r1, #125	; 0x7d
 8004544:	20c8      	movs	r0, #200	; 0xc8
 8004546:	f7fd f882 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 800454a:	4937      	ldr	r1, [pc, #220]	; (8004628 <TouchLightsActivity+0x2e8>)
 800454c:	4837      	ldr	r0, [pc, #220]	; (800462c <TouchLightsActivity+0x2ec>)
 800454e:	f008 fb81 	bl	800cc54 <siprintf>
 8004552:	4603      	mov	r3, r0
 8004554:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004556:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	2300      	movs	r3, #0
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	2300      	movs	r3, #0
 8004562:	227f      	movs	r2, #127	; 0x7f
 8004564:	21cb      	movs	r1, #203	; 0xcb
 8004566:	4831      	ldr	r0, [pc, #196]	; (800462c <TouchLightsActivity+0x2ec>)
 8004568:	f7fd fadc 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 0;
 800456c:	4b2d      	ldr	r3, [pc, #180]	; (8004624 <TouchLightsActivity+0x2e4>)
 800456e:	2200      	movs	r2, #0
 8004570:	709a      	strb	r2, [r3, #2]
					if(LightsButtonState[2] >= 1) // if is ON
 8004572:	e081      	b.n	8004678 <TouchLightsActivity+0x338>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8004574:	2011      	movs	r0, #17
 8004576:	f000 fcf3 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800457a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	2305      	movs	r3, #5
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	2315      	movs	r3, #21
 8004586:	2221      	movs	r2, #33	; 0x21
 8004588:	217d      	movs	r1, #125	; 0x7d
 800458a:	20c8      	movs	r0, #200	; 0xc8
 800458c:	f7fd f85f 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 8004590:	4927      	ldr	r1, [pc, #156]	; (8004630 <TouchLightsActivity+0x2f0>)
 8004592:	4826      	ldr	r0, [pc, #152]	; (800462c <TouchLightsActivity+0x2ec>)
 8004594:	f008 fb5e 	bl	800cc54 <siprintf>
 8004598:	4603      	mov	r3, r0
 800459a:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800459c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	2300      	movs	r3, #0
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2300      	movs	r3, #0
 80045a8:	227f      	movs	r2, #127	; 0x7f
 80045aa:	21cb      	movs	r1, #203	; 0xcb
 80045ac:	481f      	ldr	r0, [pc, #124]	; (800462c <TouchLightsActivity+0x2ec>)
 80045ae:	f7fd fab9 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 1;
 80045b2:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <TouchLightsActivity+0x2e4>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	709a      	strb	r2, [r3, #2]
					if(LightsButtonState[2] >= 1) // if is ON
 80045b8:	e05e      	b.n	8004678 <TouchLightsActivity+0x338>
					}
				}
				else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H))) // FOURTH LIGHT
 80045ba:	887b      	ldrh	r3, [r7, #2]
 80045bc:	2b9a      	cmp	r3, #154	; 0x9a
 80045be:	d95b      	bls.n	8004678 <TouchLightsActivity+0x338>
 80045c0:	887b      	ldrh	r3, [r7, #2]
 80045c2:	2bb0      	cmp	r3, #176	; 0xb0
 80045c4:	d858      	bhi.n	8004678 <TouchLightsActivity+0x338>
				{
					if(LightsButtonState[3] >= 1) // if is ON
 80045c6:	4b17      	ldr	r3, [pc, #92]	; (8004624 <TouchLightsActivity+0x2e4>)
 80045c8:	78db      	ldrb	r3, [r3, #3]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d032      	beq.n	8004634 <TouchLightsActivity+0x2f4>
					{
						SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 80045ce:	2014      	movs	r0, #20
 80045d0:	f000 fcc6 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80045d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045d8:	9301      	str	r3, [sp, #4]
 80045da:	2305      	movs	r3, #5
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	2315      	movs	r3, #21
 80045e0:	2221      	movs	r2, #33	; 0x21
 80045e2:	219b      	movs	r1, #155	; 0x9b
 80045e4:	20c8      	movs	r0, #200	; 0xc8
 80045e6:	f7fd f832 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 80045ea:	490f      	ldr	r1, [pc, #60]	; (8004628 <TouchLightsActivity+0x2e8>)
 80045ec:	480f      	ldr	r0, [pc, #60]	; (800462c <TouchLightsActivity+0x2ec>)
 80045ee:	f008 fb31 	bl	800cc54 <siprintf>
 80045f2:	4603      	mov	r3, r0
 80045f4:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80045f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	2300      	movs	r3, #0
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	2300      	movs	r3, #0
 8004602:	229d      	movs	r2, #157	; 0x9d
 8004604:	21cb      	movs	r1, #203	; 0xcb
 8004606:	4809      	ldr	r0, [pc, #36]	; (800462c <TouchLightsActivity+0x2ec>)
 8004608:	f7fd fa8c 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 0;
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <TouchLightsActivity+0x2e4>)
 800460e:	2200      	movs	r2, #0
 8004610:	70da      	strb	r2, [r3, #3]
 8004612:	e031      	b.n	8004678 <TouchLightsActivity+0x338>
 8004614:	2000024c 	.word	0x2000024c
 8004618:	20000250 	.word	0x20000250
 800461c:	20000249 	.word	0x20000249
 8004620:	08011878 	.word	0x08011878
 8004624:	20000268 	.word	0x20000268
 8004628:	08010b20 	.word	0x08010b20
 800462c:	200002b8 	.word	0x200002b8
 8004630:	08010b24 	.word	0x08010b24
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8004634:	2013      	movs	r0, #19
 8004636:	f000 fc93 	bl	8004f60 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800463a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	2305      	movs	r3, #5
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2315      	movs	r3, #21
 8004646:	2221      	movs	r2, #33	; 0x21
 8004648:	219b      	movs	r1, #155	; 0x9b
 800464a:	20c8      	movs	r0, #200	; 0xc8
 800464c:	f7fc ffff 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 8004650:	4911      	ldr	r1, [pc, #68]	; (8004698 <TouchLightsActivity+0x358>)
 8004652:	4812      	ldr	r0, [pc, #72]	; (800469c <TouchLightsActivity+0x35c>)
 8004654:	f008 fafe 	bl	800cc54 <siprintf>
 8004658:	4603      	mov	r3, r0
 800465a:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800465c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004660:	9301      	str	r3, [sp, #4]
 8004662:	2300      	movs	r3, #0
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	2300      	movs	r3, #0
 8004668:	229d      	movs	r2, #157	; 0x9d
 800466a:	21cb      	movs	r1, #203	; 0xcb
 800466c:	480b      	ldr	r0, [pc, #44]	; (800469c <TouchLightsActivity+0x35c>)
 800466e:	f7fd fa59 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 1;
 8004672:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <TouchLightsActivity+0x360>)
 8004674:	2201      	movs	r2, #1
 8004676:	70da      	strb	r2, [r3, #3]
					}
				}
				Len++;
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	3301      	adds	r3, #1
 800467c:	71fb      	strb	r3, [r7, #7]
				EF_SetFont(&arialBlack_20ptFontInfo);
 800467e:	4809      	ldr	r0, [pc, #36]	; (80046a4 <TouchLightsActivity+0x364>)
 8004680:	f7fd f836 	bl	80016f0 <EF_SetFont>
			}

			TimerTouch = HAL_GetTick();
 8004684:	f001 fbbc 	bl	8005e00 <HAL_GetTick>
 8004688:	4603      	mov	r3, r0
 800468a:	4a07      	ldr	r2, [pc, #28]	; (80046a8 <TouchLightsActivity+0x368>)
 800468c:	6013      	str	r3, [r2, #0]
		}
	}
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	08010b24 	.word	0x08010b24
 800469c:	200002b8 	.word	0x200002b8
 80046a0:	20000268 	.word	0x20000268
 80046a4:	080137f0 	.word	0x080137f0
 80046a8:	2000024c 	.word	0x2000024c

080046ac <TouchClockActivity>:

void TouchClockActivity(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 80046b2:	f7fd fdeb 	bl	800228c <XPT2046_IsTouched>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 8113 	beq.w	80048e4 <TouchClockActivity+0x238>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80046be:	488b      	ldr	r0, [pc, #556]	; (80048ec <TouchClockActivity+0x240>)
 80046c0:	f7fd f816 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80046c4:	f001 fb9c 	bl	8005e00 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b89      	ldr	r3, [pc, #548]	; (80048f0 <TouchClockActivity+0x244>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d4:	f0c0 8106 	bcc.w	80048e4 <TouchClockActivity+0x238>
			{
				uint16_t x, y; // Touch points


				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80046d8:	1cba      	adds	r2, r7, #2
 80046da:	1d3b      	adds	r3, r7, #4
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fd fd96 	bl	8002210 <XPT2046_GetTouchPoint>

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80046e4:	88bb      	ldrh	r3, [r7, #4]
 80046e6:	2b09      	cmp	r3, #9
 80046e8:	d90f      	bls.n	800470a <TouchClockActivity+0x5e>
 80046ea:	88bb      	ldrh	r3, [r7, #4]
 80046ec:	2b6e      	cmp	r3, #110	; 0x6e
 80046ee:	d80c      	bhi.n	800470a <TouchClockActivity+0x5e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80046f0:	887b      	ldrh	r3, [r7, #2]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80046f2:	2bd7      	cmp	r3, #215	; 0xd7
 80046f4:	d909      	bls.n	800470a <TouchClockActivity+0x5e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80046f6:	887b      	ldrh	r3, [r7, #2]
 80046f8:	2bec      	cmp	r3, #236	; 0xec
 80046fa:	d806      	bhi.n	800470a <TouchClockActivity+0x5e>
				{
					State = MENUTFT_PARAMETERS;
 80046fc:	4b7d      	ldr	r3, [pc, #500]	; (80048f4 <TouchClockActivity+0x248>)
 80046fe:	2201      	movs	r2, #1
 8004700:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8004702:	4b7d      	ldr	r3, [pc, #500]	; (80048f8 <TouchClockActivity+0x24c>)
 8004704:	2201      	movs	r2, #1
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	e0e7      	b.n	80048da <TouchClockActivity+0x22e>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800470a:	88bb      	ldrh	r3, [r7, #4]
 800470c:	2bdb      	cmp	r3, #219	; 0xdb
 800470e:	d927      	bls.n	8004760 <TouchClockActivity+0xb4>
 8004710:	88bb      	ldrh	r3, [r7, #4]
 8004712:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004716:	d823      	bhi.n	8004760 <TouchClockActivity+0xb4>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004718:	887b      	ldrh	r3, [r7, #2]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800471a:	2bd7      	cmp	r3, #215	; 0xd7
 800471c:	d920      	bls.n	8004760 <TouchClockActivity+0xb4>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800471e:	887b      	ldrh	r3, [r7, #2]
 8004720:	2bec      	cmp	r3, #236	; 0xec
 8004722:	d81d      	bhi.n	8004760 <TouchClockActivity+0xb4>
				{
					DS3231_SetHour(Hours);
 8004724:	4b75      	ldr	r3, [pc, #468]	; (80048fc <TouchClockActivity+0x250>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe f82f 	bl	800278c <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 800472e:	4b74      	ldr	r3, [pc, #464]	; (8004900 <TouchClockActivity+0x254>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe f83f 	bl	80027b6 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 8004738:	2032      	movs	r0, #50	; 0x32
 800473a:	f7fe f84e 	bl	80027da <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 800473e:	4971      	ldr	r1, [pc, #452]	; (8004904 <TouchClockActivity+0x258>)
 8004740:	4871      	ldr	r0, [pc, #452]	; (8004908 <TouchClockActivity+0x25c>)
 8004742:	f008 fa87 	bl	800cc54 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 8004746:	f24c 6318 	movw	r3, #50712	; 0xc618
 800474a:	9301      	str	r3, [sp, #4]
 800474c:	2301      	movs	r3, #1
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004754:	220a      	movs	r2, #10
 8004756:	212f      	movs	r1, #47	; 0x2f
 8004758:	486b      	ldr	r0, [pc, #428]	; (8004908 <TouchClockActivity+0x25c>)
 800475a:	f7fd f9e3 	bl	8001b24 <EF_PutString>
 800475e:	e0bc      	b.n	80048da <TouchClockActivity+0x22e>
				}

				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 8004760:	88bb      	ldrh	r3, [r7, #4]
 8004762:	2bef      	cmp	r3, #239	; 0xef
 8004764:	d95a      	bls.n	800481c <TouchClockActivity+0x170>
 8004766:	88bb      	ldrh	r3, [r7, #4]
 8004768:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800476c:	d856      	bhi.n	800481c <TouchClockActivity+0x170>
				{
					uint8_t Len = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	71fb      	strb	r3, [r7, #7]
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8004772:	887b      	ldrh	r3, [r7, #2]
 8004774:	2b4a      	cmp	r3, #74	; 0x4a
 8004776:	d925      	bls.n	80047c4 <TouchClockActivity+0x118>
 8004778:	887b      	ldrh	r3, [r7, #2]
 800477a:	2b60      	cmp	r3, #96	; 0x60
 800477c:	d822      	bhi.n	80047c4 <TouchClockActivity+0x118>
					{
						if(Hours < 24)
 800477e:	4b5f      	ldr	r3, [pc, #380]	; (80048fc <TouchClockActivity+0x250>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b17      	cmp	r3, #23
 8004784:	d806      	bhi.n	8004794 <TouchClockActivity+0xe8>
						{
							Hours++;
 8004786:	4b5d      	ldr	r3, [pc, #372]	; (80048fc <TouchClockActivity+0x250>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	b2da      	uxtb	r2, r3
 800478e:	4b5b      	ldr	r3, [pc, #364]	; (80048fc <TouchClockActivity+0x250>)
 8004790:	701a      	strb	r2, [r3, #0]
 8004792:	e002      	b.n	800479a <TouchClockActivity+0xee>
						}
						else
						{
							Hours = 1;
 8004794:	4b59      	ldr	r3, [pc, #356]	; (80048fc <TouchClockActivity+0x250>)
 8004796:	2201      	movs	r2, #1
 8004798:	701a      	strb	r2, [r3, #0]
						}
						Len = sprintf((char*)Msg, " %d  ", Hours);
 800479a:	4b58      	ldr	r3, [pc, #352]	; (80048fc <TouchClockActivity+0x250>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	495a      	ldr	r1, [pc, #360]	; (800490c <TouchClockActivity+0x260>)
 80047a2:	4859      	ldr	r0, [pc, #356]	; (8004908 <TouchClockActivity+0x25c>)
 80047a4:	f008 fa56 	bl	800cc54 <siprintf>
 80047a8:	4603      	mov	r3, r0
 80047aa:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80047ac:	f24c 6318 	movw	r3, #50712	; 0xc618
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	2301      	movs	r3, #1
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	2300      	movs	r3, #0
 80047b8:	2246      	movs	r2, #70	; 0x46
 80047ba:	21a0      	movs	r1, #160	; 0xa0
 80047bc:	4852      	ldr	r0, [pc, #328]	; (8004908 <TouchClockActivity+0x25c>)
 80047be:	f7fd f9b1 	bl	8001b24 <EF_PutString>
 80047c2:	e027      	b.n	8004814 <TouchClockActivity+0x168>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 80047c4:	887b      	ldrh	r3, [r7, #2]
 80047c6:	2b72      	cmp	r3, #114	; 0x72
 80047c8:	d924      	bls.n	8004814 <TouchClockActivity+0x168>
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	2b88      	cmp	r3, #136	; 0x88
 80047ce:	d821      	bhi.n	8004814 <TouchClockActivity+0x168>
					{
						if(Minutes < 59)
 80047d0:	4b4b      	ldr	r3, [pc, #300]	; (8004900 <TouchClockActivity+0x254>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b3a      	cmp	r3, #58	; 0x3a
 80047d6:	d806      	bhi.n	80047e6 <TouchClockActivity+0x13a>
						{
							Minutes++;
 80047d8:	4b49      	ldr	r3, [pc, #292]	; (8004900 <TouchClockActivity+0x254>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	4b47      	ldr	r3, [pc, #284]	; (8004900 <TouchClockActivity+0x254>)
 80047e2:	701a      	strb	r2, [r3, #0]
 80047e4:	e002      	b.n	80047ec <TouchClockActivity+0x140>
						}
						else
						{
							Minutes = 0;
 80047e6:	4b46      	ldr	r3, [pc, #280]	; (8004900 <TouchClockActivity+0x254>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
						}
						Len = sprintf((char*)Msg, " %d  ", Minutes);
 80047ec:	4b44      	ldr	r3, [pc, #272]	; (8004900 <TouchClockActivity+0x254>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	4946      	ldr	r1, [pc, #280]	; (800490c <TouchClockActivity+0x260>)
 80047f4:	4844      	ldr	r0, [pc, #272]	; (8004908 <TouchClockActivity+0x25c>)
 80047f6:	f008 fa2d 	bl	800cc54 <siprintf>
 80047fa:	4603      	mov	r3, r0
 80047fc:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80047fe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004802:	9301      	str	r3, [sp, #4]
 8004804:	2301      	movs	r3, #1
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	2300      	movs	r3, #0
 800480a:	226e      	movs	r2, #110	; 0x6e
 800480c:	21a0      	movs	r1, #160	; 0xa0
 800480e:	483e      	ldr	r0, [pc, #248]	; (8004908 <TouchClockActivity+0x25c>)
 8004810:	f7fd f988 	bl	8001b24 <EF_PutString>
					}
					Len++;
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	3301      	adds	r3, #1
 8004818:	71fb      	strb	r3, [r7, #7]
				{
 800481a:	e05e      	b.n	80048da <TouchClockActivity+0x22e>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 800481c:	88bb      	ldrh	r3, [r7, #4]
 800481e:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8004822:	d35a      	bcc.n	80048da <TouchClockActivity+0x22e>
 8004824:	88bb      	ldrh	r3, [r7, #4]
 8004826:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800482a:	d856      	bhi.n	80048da <TouchClockActivity+0x22e>
				{
					uint8_t Len = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	71bb      	strb	r3, [r7, #6]
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8004830:	887b      	ldrh	r3, [r7, #2]
 8004832:	2b4a      	cmp	r3, #74	; 0x4a
 8004834:	d925      	bls.n	8004882 <TouchClockActivity+0x1d6>
 8004836:	887b      	ldrh	r3, [r7, #2]
 8004838:	2b60      	cmp	r3, #96	; 0x60
 800483a:	d822      	bhi.n	8004882 <TouchClockActivity+0x1d6>
					{
						if(Hours < 19)
 800483c:	4b2f      	ldr	r3, [pc, #188]	; (80048fc <TouchClockActivity+0x250>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b12      	cmp	r3, #18
 8004842:	d806      	bhi.n	8004852 <TouchClockActivity+0x1a6>
						{
							Hours = Hours + 6;
 8004844:	4b2d      	ldr	r3, [pc, #180]	; (80048fc <TouchClockActivity+0x250>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	3306      	adds	r3, #6
 800484a:	b2da      	uxtb	r2, r3
 800484c:	4b2b      	ldr	r3, [pc, #172]	; (80048fc <TouchClockActivity+0x250>)
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	e002      	b.n	8004858 <TouchClockActivity+0x1ac>
						}
						else
						{
							Hours = 1;
 8004852:	4b2a      	ldr	r3, [pc, #168]	; (80048fc <TouchClockActivity+0x250>)
 8004854:	2201      	movs	r2, #1
 8004856:	701a      	strb	r2, [r3, #0]
						}
						Len = sprintf((char*)Msg, " %d  ", Hours);
 8004858:	4b28      	ldr	r3, [pc, #160]	; (80048fc <TouchClockActivity+0x250>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	492b      	ldr	r1, [pc, #172]	; (800490c <TouchClockActivity+0x260>)
 8004860:	4829      	ldr	r0, [pc, #164]	; (8004908 <TouchClockActivity+0x25c>)
 8004862:	f008 f9f7 	bl	800cc54 <siprintf>
 8004866:	4603      	mov	r3, r0
 8004868:	71bb      	strb	r3, [r7, #6]
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800486a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	2301      	movs	r3, #1
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	2300      	movs	r3, #0
 8004876:	2246      	movs	r2, #70	; 0x46
 8004878:	21a0      	movs	r1, #160	; 0xa0
 800487a:	4823      	ldr	r0, [pc, #140]	; (8004908 <TouchClockActivity+0x25c>)
 800487c:	f7fd f952 	bl	8001b24 <EF_PutString>
 8004880:	e025      	b.n	80048ce <TouchClockActivity+0x222>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8004882:	887b      	ldrh	r3, [r7, #2]
 8004884:	2b72      	cmp	r3, #114	; 0x72
 8004886:	d922      	bls.n	80048ce <TouchClockActivity+0x222>
 8004888:	887b      	ldrh	r3, [r7, #2]
 800488a:	2b88      	cmp	r3, #136	; 0x88
 800488c:	d81f      	bhi.n	80048ce <TouchClockActivity+0x222>
					{
						if(Minutes < 49)
 800488e:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <TouchClockActivity+0x254>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b30      	cmp	r3, #48	; 0x30
 8004894:	d806      	bhi.n	80048a4 <TouchClockActivity+0x1f8>
						{
							Minutes = Minutes +10;
 8004896:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <TouchClockActivity+0x254>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	330a      	adds	r3, #10
 800489c:	b2da      	uxtb	r2, r3
 800489e:	4b18      	ldr	r3, [pc, #96]	; (8004900 <TouchClockActivity+0x254>)
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	e002      	b.n	80048aa <TouchClockActivity+0x1fe>
						}
						else
						{
							Minutes = 0;
 80048a4:	4b16      	ldr	r3, [pc, #88]	; (8004900 <TouchClockActivity+0x254>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <TouchClockActivity+0x254>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	4916      	ldr	r1, [pc, #88]	; (800490c <TouchClockActivity+0x260>)
 80048b2:	4815      	ldr	r0, [pc, #84]	; (8004908 <TouchClockActivity+0x25c>)
 80048b4:	f008 f9ce 	bl	800cc54 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80048b8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	2301      	movs	r3, #1
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	2300      	movs	r3, #0
 80048c4:	226e      	movs	r2, #110	; 0x6e
 80048c6:	21a0      	movs	r1, #160	; 0xa0
 80048c8:	480f      	ldr	r0, [pc, #60]	; (8004908 <TouchClockActivity+0x25c>)
 80048ca:	f7fd f92b 	bl	8001b24 <EF_PutString>

					}
					Len++;
 80048ce:	79bb      	ldrb	r3, [r7, #6]
 80048d0:	3301      	adds	r3, #1
 80048d2:	71bb      	strb	r3, [r7, #6]
					EF_SetFont(&arialBlack_20ptFontInfo);
 80048d4:	4805      	ldr	r0, [pc, #20]	; (80048ec <TouchClockActivity+0x240>)
 80048d6:	f7fc ff0b 	bl	80016f0 <EF_SetFont>
				}

				TimerTouch = HAL_GetTick();
 80048da:	f001 fa91 	bl	8005e00 <HAL_GetTick>
 80048de:	4603      	mov	r3, r0
 80048e0:	4a03      	ldr	r2, [pc, #12]	; (80048f0 <TouchClockActivity+0x244>)
 80048e2:	6013      	str	r3, [r2, #0]
			}
		}
}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	080137f0 	.word	0x080137f0
 80048f0:	2000024c 	.word	0x2000024c
 80048f4:	20000250 	.word	0x20000250
 80048f8:	20000249 	.word	0x20000249
 80048fc:	20000030 	.word	0x20000030
 8004900:	20000031 	.word	0x20000031
 8004904:	08010b28 	.word	0x08010b28
 8004908:	200002b8 	.word	0x200002b8
 800490c:	08010b38 	.word	0x08010b38

08004910 <TouchPredefinedActivityActivity>:

void TouchPredefinedActivityActivity()
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 8004916:	f7fd fcb9 	bl	800228c <XPT2046_IsTouched>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80c7 	beq.w	8004ab0 <TouchPredefinedActivityActivity+0x1a0>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004922:	f001 fa6d 	bl	8005e00 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	4b63      	ldr	r3, [pc, #396]	; (8004ab8 <TouchPredefinedActivityActivity+0x1a8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004932:	f0c0 80bd 	bcc.w	8004ab0 <TouchPredefinedActivityActivity+0x1a0>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004936:	1d3a      	adds	r2, r7, #4
 8004938:	1dbb      	adds	r3, r7, #6
 800493a:	4611      	mov	r1, r2
 800493c:	4618      	mov	r0, r3
 800493e:	f7fd fc67 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	2b09      	cmp	r3, #9
 8004946:	d90f      	bls.n	8004968 <TouchPredefinedActivityActivity+0x58>
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	2b6e      	cmp	r3, #110	; 0x6e
 800494c:	d80c      	bhi.n	8004968 <TouchPredefinedActivityActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800494e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004950:	2bd7      	cmp	r3, #215	; 0xd7
 8004952:	d909      	bls.n	8004968 <TouchPredefinedActivityActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004954:	88bb      	ldrh	r3, [r7, #4]
 8004956:	2bec      	cmp	r3, #236	; 0xec
 8004958:	d806      	bhi.n	8004968 <TouchPredefinedActivityActivity+0x58>
			{
				State = MENUTFT_SWITCH;
 800495a:	4b58      	ldr	r3, [pc, #352]	; (8004abc <TouchPredefinedActivityActivity+0x1ac>)
 800495c:	2202      	movs	r2, #2
 800495e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004960:	4b57      	ldr	r3, [pc, #348]	; (8004ac0 <TouchPredefinedActivityActivity+0x1b0>)
 8004962:	2201      	movs	r2, #1
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	e09e      	b.n	8004aa6 <TouchPredefinedActivityActivity+0x196>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	2b63      	cmp	r3, #99	; 0x63
 800496c:	f240 809b 	bls.w	8004aa6 <TouchPredefinedActivityActivity+0x196>
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	2bdc      	cmp	r3, #220	; 0xdc
 8004974:	f200 8097 	bhi.w	8004aa6 <TouchPredefinedActivityActivity+0x196>
			{
				if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8004978:	88bb      	ldrh	r3, [r7, #4]
 800497a:	2b3b      	cmp	r3, #59	; 0x3b
 800497c:	d948      	bls.n	8004a10 <TouchPredefinedActivityActivity+0x100>
 800497e:	88bb      	ldrh	r3, [r7, #4]
 8004980:	2b64      	cmp	r3, #100	; 0x64
 8004982:	d845      	bhi.n	8004a10 <TouchPredefinedActivityActivity+0x100>
				{
					if(ActivityButtonState[0] >= 1) // if is ON
 8004984:	4b4f      	ldr	r3, [pc, #316]	; (8004ac4 <TouchPredefinedActivityActivity+0x1b4>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d020      	beq.n	80049ce <TouchPredefinedActivityActivity+0xbe>
					{
						ActivityButtonState[0] = 0;
 800498c:	4b4d      	ldr	r3, [pc, #308]	; (8004ac4 <TouchPredefinedActivityActivity+0x1b4>)
 800498e:	2200      	movs	r2, #0
 8004990:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004992:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	230a      	movs	r3, #10
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	2328      	movs	r3, #40	; 0x28
 800499e:	2278      	movs	r2, #120	; 0x78
 80049a0:	213c      	movs	r1, #60	; 0x3c
 80049a2:	2064      	movs	r0, #100	; 0x64
 80049a4:	f7fc fe53 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE - OFF");
 80049a8:	4947      	ldr	r1, [pc, #284]	; (8004ac8 <TouchPredefinedActivityActivity+0x1b8>)
 80049aa:	4848      	ldr	r0, [pc, #288]	; (8004acc <TouchPredefinedActivityActivity+0x1bc>)
 80049ac:	f008 f952 	bl	800cc54 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80049b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	2300      	movs	r3, #0
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	2300      	movs	r3, #0
 80049bc:	223e      	movs	r2, #62	; 0x3e
 80049be:	2167      	movs	r1, #103	; 0x67
 80049c0:	4842      	ldr	r0, [pc, #264]	; (8004acc <TouchPredefinedActivityActivity+0x1bc>)
 80049c2:	f7fd f8af 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(0); // Turn Activity OFF
 80049c6:	2000      	movs	r0, #0
 80049c8:	f7fe ff9a 	bl	8003900 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 80049cc:	e06b      	b.n	8004aa6 <TouchPredefinedActivityActivity+0x196>
					}
					else // if is OFF
					{
						ActivityButtonState[0] = 1;
 80049ce:	4b3d      	ldr	r3, [pc, #244]	; (8004ac4 <TouchPredefinedActivityActivity+0x1b4>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80049d4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80049d8:	9301      	str	r3, [sp, #4]
 80049da:	230a      	movs	r3, #10
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	2328      	movs	r3, #40	; 0x28
 80049e0:	2278      	movs	r2, #120	; 0x78
 80049e2:	213c      	movs	r1, #60	; 0x3c
 80049e4:	2064      	movs	r0, #100	; 0x64
 80049e6:	f7fc fe32 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE - ON");
 80049ea:	4939      	ldr	r1, [pc, #228]	; (8004ad0 <TouchPredefinedActivityActivity+0x1c0>)
 80049ec:	4837      	ldr	r0, [pc, #220]	; (8004acc <TouchPredefinedActivityActivity+0x1bc>)
 80049ee:	f008 f931 	bl	800cc54 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80049f2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	2300      	movs	r3, #0
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	2300      	movs	r3, #0
 80049fe:	223e      	movs	r2, #62	; 0x3e
 8004a00:	2167      	movs	r1, #103	; 0x67
 8004a02:	4832      	ldr	r0, [pc, #200]	; (8004acc <TouchPredefinedActivityActivity+0x1bc>)
 8004a04:	f7fd f88e 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(1);
 8004a08:	2001      	movs	r0, #1
 8004a0a:	f7fe ff79 	bl	8003900 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8004a0e:	e04a      	b.n	8004aa6 <TouchPredefinedActivityActivity+0x196>
					}

				}

				else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 8004a10:	88bb      	ldrh	r3, [r7, #4]
 8004a12:	2b77      	cmp	r3, #119	; 0x77
 8004a14:	d947      	bls.n	8004aa6 <TouchPredefinedActivityActivity+0x196>
 8004a16:	88bb      	ldrh	r3, [r7, #4]
 8004a18:	2ba0      	cmp	r3, #160	; 0xa0
 8004a1a:	d844      	bhi.n	8004aa6 <TouchPredefinedActivityActivity+0x196>
				{
					if(ActivityButtonState[1] >= 1) // if is ON
 8004a1c:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <TouchPredefinedActivityActivity+0x1b4>)
 8004a1e:	785b      	ldrb	r3, [r3, #1]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d020      	beq.n	8004a66 <TouchPredefinedActivityActivity+0x156>
					{
						ActivityButtonState[1] = 0;
 8004a24:	4b27      	ldr	r3, [pc, #156]	; (8004ac4 <TouchPredefinedActivityActivity+0x1b4>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004a2a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	230a      	movs	r3, #10
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	2328      	movs	r3, #40	; 0x28
 8004a36:	2278      	movs	r2, #120	; 0x78
 8004a38:	2178      	movs	r1, #120	; 0x78
 8004a3a:	2064      	movs	r0, #100	; 0x64
 8004a3c:	f7fc fe07 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE - OFF");
 8004a40:	4924      	ldr	r1, [pc, #144]	; (8004ad4 <TouchPredefinedActivityActivity+0x1c4>)
 8004a42:	4822      	ldr	r0, [pc, #136]	; (8004acc <TouchPredefinedActivityActivity+0x1bc>)
 8004a44:	f008 f906 	bl	800cc54 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004a48:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	2300      	movs	r3, #0
 8004a54:	227a      	movs	r2, #122	; 0x7a
 8004a56:	2167      	movs	r1, #103	; 0x67
 8004a58:	481c      	ldr	r0, [pc, #112]	; (8004acc <TouchPredefinedActivityActivity+0x1bc>)
 8004a5a:	f7fd f863 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(0);
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f7fe ff1a 	bl	8003898 <predefinedActivityCzyszczenie>
 8004a64:	e01f      	b.n	8004aa6 <TouchPredefinedActivityActivity+0x196>
					}
					else // if is OFF
					{
						ActivityButtonState[1] = 1;
 8004a66:	4b17      	ldr	r3, [pc, #92]	; (8004ac4 <TouchPredefinedActivityActivity+0x1b4>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004a6c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	230a      	movs	r3, #10
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	2328      	movs	r3, #40	; 0x28
 8004a78:	2278      	movs	r2, #120	; 0x78
 8004a7a:	2178      	movs	r1, #120	; 0x78
 8004a7c:	2064      	movs	r0, #100	; 0x64
 8004a7e:	f7fc fde6 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE - ON");
 8004a82:	4915      	ldr	r1, [pc, #84]	; (8004ad8 <TouchPredefinedActivityActivity+0x1c8>)
 8004a84:	4811      	ldr	r0, [pc, #68]	; (8004acc <TouchPredefinedActivityActivity+0x1bc>)
 8004a86:	f008 f8e5 	bl	800cc54 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004a8a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004a8e:	9301      	str	r3, [sp, #4]
 8004a90:	2300      	movs	r3, #0
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	2300      	movs	r3, #0
 8004a96:	227a      	movs	r2, #122	; 0x7a
 8004a98:	2167      	movs	r1, #103	; 0x67
 8004a9a:	480c      	ldr	r0, [pc, #48]	; (8004acc <TouchPredefinedActivityActivity+0x1bc>)
 8004a9c:	f7fd f842 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(1);
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	f7fe fef9 	bl	8003898 <predefinedActivityCzyszczenie>

				}
			}


			TimerTouch = HAL_GetTick();
 8004aa6:	f001 f9ab 	bl	8005e00 <HAL_GetTick>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4a02      	ldr	r2, [pc, #8]	; (8004ab8 <TouchPredefinedActivityActivity+0x1a8>)
 8004aae:	6013      	str	r3, [r2, #0]
		}
	}


}
 8004ab0:	bf00      	nop
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	2000024c 	.word	0x2000024c
 8004abc:	20000250 	.word	0x20000250
 8004ac0:	20000249 	.word	0x20000249
 8004ac4:	2000026c 	.word	0x2000026c
 8004ac8:	08010b40 	.word	0x08010b40
 8004acc:	200002b8 	.word	0x200002b8
 8004ad0:	08010b50 	.word	0x08010b50
 8004ad4:	08010b60 	.word	0x08010b60
 8004ad8:	08010b74 	.word	0x08010b74

08004adc <UART_ParseLine>:
 * 		ASTATESTATUS=?\n	// Podaj stan wszystkich przekaznikow
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b094      	sub	sp, #80	; 0x50
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8004ae4:	f107 0308 	add.w	r3, r7, #8
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 ff30 	bl	8005950 <UARTDMA_GetLineFromReceiveBuffer>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d155      	bne.n	8004ba2 <UART_ParseLine+0xc6>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8004af6:	f107 0308 	add.w	r3, r7, #8
 8004afa:	492c      	ldr	r1, [pc, #176]	; (8004bac <UART_ParseLine+0xd0>)
 8004afc:	4618      	mov	r0, r3
 8004afe:	f008 ff03 	bl	800d908 <strtok>
 8004b02:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8004b04:	492a      	ldr	r1, [pc, #168]	; (8004bb0 <UART_ParseLine+0xd4>)
 8004b06:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004b08:	f7fb fb6a 	bl	80001e0 <strcmp>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d102      	bne.n	8004b18 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8004b12:	f000 f85d 	bl	8004bd0 <UART_ParseLED>
		  UART_ParseAnswLightsStateStatus();
	  }

	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8004b16:	e044      	b.n	8004ba2 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8004b18:	4926      	ldr	r1, [pc, #152]	; (8004bb4 <UART_ParseLine+0xd8>)
 8004b1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004b1c:	f7fb fb60 	bl	80001e0 <strcmp>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d102      	bne.n	8004b2c <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8004b26:	f000 f8a1 	bl	8004c6c <UART_ParseAnswStatus>
}
 8004b2a:	e03a      	b.n	8004ba2 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 8004b2c:	4922      	ldr	r1, [pc, #136]	; (8004bb8 <UART_ParseLine+0xdc>)
 8004b2e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004b30:	f7fb fb56 	bl	80001e0 <strcmp>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 8004b3a:	f000 f89f 	bl	8004c7c <UART_ParseAnswTemp>
}
 8004b3e:	e030      	b.n	8004ba2 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8004b40:	491e      	ldr	r1, [pc, #120]	; (8004bbc <UART_ParseLine+0xe0>)
 8004b42:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004b44:	f7fb fb4c 	bl	80001e0 <strcmp>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8004b4e:	f000 f8e3 	bl	8004d18 <UART_ParseAnswPres>
}
 8004b52:	e026      	b.n	8004ba2 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8004b54:	491a      	ldr	r1, [pc, #104]	; (8004bc0 <UART_ParseLine+0xe4>)
 8004b56:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004b58:	f7fb fb42 	bl	80001e0 <strcmp>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d102      	bne.n	8004b68 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8004b62:	f000 f927 	bl	8004db4 <UART_ParseAnswChangeRelayState>
}
 8004b66:	e01c      	b.n	8004ba2 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8004b68:	4916      	ldr	r1, [pc, #88]	; (8004bc4 <UART_ParseLine+0xe8>)
 8004b6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004b6c:	f7fb fb38 	bl	80001e0 <strcmp>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 8004b76:	f000 f924 	bl	8004dc2 <UART_ParseAnswChangeLightState>
}
 8004b7a:	e012      	b.n	8004ba2 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASTATESTATUS") == 0) // Answear about current Switch Status
 8004b7c:	4912      	ldr	r1, [pc, #72]	; (8004bc8 <UART_ParseLine+0xec>)
 8004b7e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004b80:	f7fb fb2e 	bl	80001e0 <strcmp>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d102      	bne.n	8004b90 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 8004b8a:	f000 f921 	bl	8004dd0 <UART_ParseAnswRelayStateStatus>
}
 8004b8e:	e008      	b.n	8004ba2 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ALIGHTSSTATUS=?\n") == 0) // Answear about current Switch Status
 8004b90:	490e      	ldr	r1, [pc, #56]	; (8004bcc <UART_ParseLine+0xf0>)
 8004b92:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004b94:	f7fb fb24 	bl	80001e0 <strcmp>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <UART_ParseLine+0xc6>
		  UART_ParseAnswLightsStateStatus();
 8004b9e:	f000 f97b 	bl	8004e98 <UART_ParseAnswLightsStateStatus>
}
 8004ba2:	bf00      	nop
 8004ba4:	3750      	adds	r7, #80	; 0x50
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	08010b88 	.word	0x08010b88
 8004bb0:	08010b8c 	.word	0x08010b8c
 8004bb4:	08010b90 	.word	0x08010b90
 8004bb8:	08010b98 	.word	0x08010b98
 8004bbc:	08010ba0 	.word	0x08010ba0
 8004bc0:	08010ba8 	.word	0x08010ba8
 8004bc4:	08010bb4 	.word	0x08010bb4
 8004bc8:	08010bc0 	.word	0x08010bc0
 8004bcc:	08010bd0 	.word	0x08010bd0

08004bd0 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsowanie testowej funkcji od LED
// "LED=1\n"
void UART_ParseLED()
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8004bd6:	491f      	ldr	r1, [pc, #124]	; (8004c54 <UART_ParseLED+0x84>)
 8004bd8:	2000      	movs	r0, #0
 8004bda:	f008 fe95 	bl	800d908 <strtok>
 8004bde:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d031      	beq.n	8004c4c <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b2f      	cmp	r3, #47	; 0x2f
 8004bee:	d903      	bls.n	8004bf8 <UART_ParseLED+0x28>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b39      	cmp	r3, #57	; 0x39
 8004bf6:	d904      	bls.n	8004c02 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8004bf8:	4917      	ldr	r1, [pc, #92]	; (8004c58 <UART_ParseLED+0x88>)
 8004bfa:	4818      	ldr	r0, [pc, #96]	; (8004c5c <UART_ParseLED+0x8c>)
 8004bfc:	f000 fed9 	bl	80059b2 <UARTDMA_Print>
			return;	// And exit parsing
 8004c00:	e024      	b.n	8004c4c <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f007 f96f 	bl	800bee6 <atoi>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d10a      	bne.n	8004c28 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8004c12:	2200      	movs	r2, #0
 8004c14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c18:	4811      	ldr	r0, [pc, #68]	; (8004c60 <UART_ParseLED+0x90>)
 8004c1a:	f002 f86d 	bl	8006cf8 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8004c1e:	4911      	ldr	r1, [pc, #68]	; (8004c64 <UART_ParseLED+0x94>)
 8004c20:	480e      	ldr	r0, [pc, #56]	; (8004c5c <UART_ParseLED+0x8c>)
 8004c22:	f000 fec6 	bl	80059b2 <UARTDMA_Print>
 8004c26:	e011      	b.n	8004c4c <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c34:	480a      	ldr	r0, [pc, #40]	; (8004c60 <UART_ParseLED+0x90>)
 8004c36:	f002 f85f 	bl	8006cf8 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 8004c3a:	490b      	ldr	r1, [pc, #44]	; (8004c68 <UART_ParseLED+0x98>)
 8004c3c:	4807      	ldr	r0, [pc, #28]	; (8004c5c <UART_ParseLED+0x8c>)
 8004c3e:	f000 feb8 	bl	80059b2 <UARTDMA_Print>
 8004c42:	e003      	b.n	8004c4c <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8004c44:	4904      	ldr	r1, [pc, #16]	; (8004c58 <UART_ParseLED+0x88>)
 8004c46:	4805      	ldr	r0, [pc, #20]	; (8004c5c <UART_ParseLED+0x8c>)
 8004c48:	f000 feb3 	bl	80059b2 <UARTDMA_Print>
		}
	}
}
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	08010be4 	.word	0x08010be4
 8004c58:	08010be8 	.word	0x08010be8
 8004c5c:	2000032c 	.word	0x2000032c
 8004c60:	40020800 	.word	0x40020800
 8004c64:	08010bf8 	.word	0x08010bf8
 8004c68:	08010c04 	.word	0x08010c04

08004c6c <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
	//TODO: Dodac obsluge statusu urzadzenia
}
 8004c70:	bf00      	nop
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000"
void UART_ParseAnswTemp()
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8004c82:	491e      	ldr	r1, [pc, #120]	; (8004cfc <UART_ParseAnswTemp+0x80>)
 8004c84:	2000      	movs	r0, #0
 8004c86:	f008 fe3f 	bl	800d908 <strtok>
 8004c8a:	6038      	str	r0, [r7, #0]
	uint8_t Len;
	if(strlen(ParsePointer) > 0) // If string exists
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d02e      	beq.n	8004cf2 <UART_ParseAnswTemp+0x76>
	{
		CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8004c94:	6838      	ldr	r0, [r7, #0]
 8004c96:	f007 f923 	bl	800bee0 <atof>
 8004c9a:	ec53 2b10 	vmov	r2, r3, d0
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	f7fb ffb9 	bl	8000c18 <__aeabi_d2f>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4a15      	ldr	r2, [pc, #84]	; (8004d00 <UART_ParseAnswTemp+0x84>)
 8004caa:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Temp
		if(State == MENUTFT_PARAMETERS)
 8004cac:	4b15      	ldr	r3, [pc, #84]	; (8004d04 <UART_ParseAnswTemp+0x88>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d117      	bne.n	8004ce4 <UART_ParseAnswTemp+0x68>
		{
			Len = sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 8004cb4:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <UART_ParseAnswTemp+0x84>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fb fc5d 	bl	8000578 <__aeabi_f2d>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4911      	ldr	r1, [pc, #68]	; (8004d08 <UART_ParseAnswTemp+0x8c>)
 8004cc4:	4811      	ldr	r0, [pc, #68]	; (8004d0c <UART_ParseAnswTemp+0x90>)
 8004cc6:	f007 ffc5 	bl	800cc54 <siprintf>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	71fb      	strb	r3, [r7, #7]
			EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004cce:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	2250      	movs	r2, #80	; 0x50
 8004cdc:	2114      	movs	r1, #20
 8004cde:	480b      	ldr	r0, [pc, #44]	; (8004d0c <UART_ParseAnswTemp+0x90>)
 8004ce0:	f7fc ff20 	bl	8001b24 <EF_PutString>
		}
		UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
 8004ce4:	490a      	ldr	r1, [pc, #40]	; (8004d10 <UART_ParseAnswTemp+0x94>)
 8004ce6:	480b      	ldr	r0, [pc, #44]	; (8004d14 <UART_ParseAnswTemp+0x98>)
 8004ce8:	f000 fe63 	bl	80059b2 <UARTDMA_Print>
		Len++;
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	71fb      	strb	r3, [r7, #7]
	}
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	08010be4 	.word	0x08010be4
 8004d00:	20000254 	.word	0x20000254
 8004d04:	20000250 	.word	0x20000250
 8004d08:	08010c10 	.word	0x08010c10
 8004d0c:	200002b8 	.word	0x200002b8
 8004d10:	08010c24 	.word	0x08010c24
 8004d14:	2000032c 	.word	0x2000032c

08004d18 <UART_ParseAnswPres>:

//
// Parsing information about current presure
//"APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8004d1e:	491e      	ldr	r1, [pc, #120]	; (8004d98 <UART_ParseAnswPres+0x80>)
 8004d20:	2000      	movs	r0, #0
 8004d22:	f008 fdf1 	bl	800d908 <strtok>
 8004d26:	6038      	str	r0, [r7, #0]
	uint8_t Len;
	if(strlen(ParsePointer) > 0) // If string exists
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d02e      	beq.n	8004d8e <UART_ParseAnswPres+0x76>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8004d30:	6838      	ldr	r0, [r7, #0]
 8004d32:	f007 f8d5 	bl	800bee0 <atof>
 8004d36:	ec53 2b10 	vmov	r2, r3, d0
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	f7fb ff6b 	bl	8000c18 <__aeabi_d2f>
 8004d42:	4603      	mov	r3, r0
 8004d44:	4a15      	ldr	r2, [pc, #84]	; (8004d9c <UART_ParseAnswPres+0x84>)
 8004d46:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8004d48:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <UART_ParseAnswPres+0x88>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d117      	bne.n	8004d80 <UART_ParseAnswPres+0x68>
		{
			Len = sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8004d50:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <UART_ParseAnswPres+0x84>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fb fc0f 	bl	8000578 <__aeabi_f2d>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4911      	ldr	r1, [pc, #68]	; (8004da4 <UART_ParseAnswPres+0x8c>)
 8004d60:	4811      	ldr	r0, [pc, #68]	; (8004da8 <UART_ParseAnswPres+0x90>)
 8004d62:	f007 ff77 	bl	800cc54 <siprintf>
 8004d66:	4603      	mov	r3, r0
 8004d68:	71fb      	strb	r3, [r7, #7]
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004d6a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004d6e:	9301      	str	r3, [sp, #4]
 8004d70:	2301      	movs	r3, #1
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	2300      	movs	r3, #0
 8004d76:	22aa      	movs	r2, #170	; 0xaa
 8004d78:	2114      	movs	r1, #20
 8004d7a:	480b      	ldr	r0, [pc, #44]	; (8004da8 <UART_ParseAnswPres+0x90>)
 8004d7c:	f7fc fed2 	bl	8001b24 <EF_PutString>
		}
		UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
 8004d80:	490a      	ldr	r1, [pc, #40]	; (8004dac <UART_ParseAnswPres+0x94>)
 8004d82:	480b      	ldr	r0, [pc, #44]	; (8004db0 <UART_ParseAnswPres+0x98>)
 8004d84:	f000 fe15 	bl	80059b2 <UARTDMA_Print>
		Len++;
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	71fb      	strb	r3, [r7, #7]
	}
}
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	08010be4 	.word	0x08010be4
 8004d9c:	20000258 	.word	0x20000258
 8004da0:	20000250 	.word	0x20000250
 8004da4:	08010c30 	.word	0x08010c30
 8004da8:	200002b8 	.word	0x200002b8
 8004dac:	08010c48 	.word	0x08010c48
 8004db0:	2000032c 	.word	0x2000032c

08004db4 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
	//TODO!
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	af00      	add	r7, sp, #0
	//TODO!
}
 8004dc6:	bf00      	nop
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8004dd0:	b590      	push	{r4, r7, lr}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

		for(i = 0; i<4; i++) // 4 parameters are expected
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	71fb      	strb	r3, [r7, #7]
 8004dda:	e04a      	b.n	8004e72 <UART_ParseAnswRelayStateStatus+0xa2>
		{
			char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8004ddc:	4928      	ldr	r1, [pc, #160]	; (8004e80 <UART_ParseAnswRelayStateStatus+0xb0>)
 8004dde:	2000      	movs	r0, #0
 8004de0:	f008 fd92 	bl	800d908 <strtok>
 8004de4:	6038      	str	r0, [r7, #0]

			if(strlen(ParsePointer) > 0) // If string exists
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d035      	beq.n	8004e5a <UART_ParseAnswRelayStateStatus+0x8a>
			{
				for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8004dee:	2300      	movs	r3, #0
 8004df0:	71bb      	strb	r3, [r7, #6]
 8004df2:	e02b      	b.n	8004e4c <UART_ParseAnswRelayStateStatus+0x7c>
				{
					if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8004df4:	79bb      	ldrb	r3, [r7, #6]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	4413      	add	r3, r2
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b2f      	cmp	r3, #47	; 0x2f
 8004dfe:	d905      	bls.n	8004e0c <UART_ParseAnswRelayStateStatus+0x3c>
 8004e00:	79bb      	ldrb	r3, [r7, #6]
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	4413      	add	r3, r2
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b39      	cmp	r3, #57	; 0x39
 8004e0a:	d90e      	bls.n	8004e2a <UART_ParseAnswRelayStateStatus+0x5a>
 8004e0c:	79bb      	ldrb	r3, [r7, #6]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	4413      	add	r3, r2
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b2e      	cmp	r3, #46	; 0x2e
 8004e16:	d008      	beq.n	8004e2a <UART_ParseAnswRelayStateStatus+0x5a>
					{
						sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8004e18:	491a      	ldr	r1, [pc, #104]	; (8004e84 <UART_ParseAnswRelayStateStatus+0xb4>)
 8004e1a:	481b      	ldr	r0, [pc, #108]	; (8004e88 <UART_ParseAnswRelayStateStatus+0xb8>)
 8004e1c:	f007 ff1a 	bl	800cc54 <siprintf>
						UARTDMA_Print(&huartdma2, Message); // Print message
 8004e20:	4919      	ldr	r1, [pc, #100]	; (8004e88 <UART_ParseAnswRelayStateStatus+0xb8>)
 8004e22:	481a      	ldr	r0, [pc, #104]	; (8004e8c <UART_ParseAnswRelayStateStatus+0xbc>)
 8004e24:	f000 fdc5 	bl	80059b2 <UARTDMA_Print>
						return;	// And exit parsing
 8004e28:	e026      	b.n	8004e78 <UART_ParseAnswRelayStateStatus+0xa8>
					}

					SwitchesButtonState[i] = atof(ParsePointer); // If there are no chars, change string to integer
 8004e2a:	6838      	ldr	r0, [r7, #0]
 8004e2c:	f007 f858 	bl	800bee0 <atof>
 8004e30:	ec53 2b10 	vmov	r2, r3, d0
 8004e34:	79fc      	ldrb	r4, [r7, #7]
 8004e36:	4610      	mov	r0, r2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	f7fb fecd 	bl	8000bd8 <__aeabi_d2uiz>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <UART_ParseAnswRelayStateStatus+0xc0>)
 8004e44:	551a      	strb	r2, [r3, r4]
				for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8004e46:	79bb      	ldrb	r3, [r7, #6]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	71bb      	strb	r3, [r7, #6]
 8004e4c:	79bb      	ldrb	r3, [r7, #6]
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	4413      	add	r3, r2
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1cd      	bne.n	8004df4 <UART_ParseAnswRelayStateStatus+0x24>
 8004e58:	e008      	b.n	8004e6c <UART_ParseAnswRelayStateStatus+0x9c>
				}
			}
			else
			{
				sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8004e5a:	490e      	ldr	r1, [pc, #56]	; (8004e94 <UART_ParseAnswRelayStateStatus+0xc4>)
 8004e5c:	480a      	ldr	r0, [pc, #40]	; (8004e88 <UART_ParseAnswRelayStateStatus+0xb8>)
 8004e5e:	f007 fef9 	bl	800cc54 <siprintf>
				UARTDMA_Print(&huartdma2, Message); // Print message
 8004e62:	4909      	ldr	r1, [pc, #36]	; (8004e88 <UART_ParseAnswRelayStateStatus+0xb8>)
 8004e64:	4809      	ldr	r0, [pc, #36]	; (8004e8c <UART_ParseAnswRelayStateStatus+0xbc>)
 8004e66:	f000 fda4 	bl	80059b2 <UARTDMA_Print>
				return;	// And exit parsing
 8004e6a:	e005      	b.n	8004e78 <UART_ParseAnswRelayStateStatus+0xa8>
		for(i = 0; i<4; i++) // 4 parameters are expected
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	71fb      	strb	r3, [r7, #7]
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d9b1      	bls.n	8004ddc <UART_ParseAnswRelayStateStatus+0xc>
			}
		}
}
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd90      	pop	{r4, r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	08010be4 	.word	0x08010be4
 8004e84:	08010c54 	.word	0x08010c54
 8004e88:	20000440 	.word	0x20000440
 8004e8c:	2000032c 	.word	0x2000032c
 8004e90:	20000264 	.word	0x20000264
 8004e94:	08010c68 	.word	0x08010c68

08004e98 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

			for(i = 0; i<4; i++) // 4 parameters are expected
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	71fb      	strb	r3, [r7, #7]
 8004ea2:	e04a      	b.n	8004f3a <UART_ParseAnswLightsStateStatus+0xa2>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8004ea4:	4928      	ldr	r1, [pc, #160]	; (8004f48 <UART_ParseAnswLightsStateStatus+0xb0>)
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	f008 fd2e 	bl	800d908 <strtok>
 8004eac:	6038      	str	r0, [r7, #0]

				if(strlen(ParsePointer) > 0) // If string exists
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d035      	beq.n	8004f22 <UART_ParseAnswLightsStateStatus+0x8a>
				{
					for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	71bb      	strb	r3, [r7, #6]
 8004eba:	e02b      	b.n	8004f14 <UART_ParseAnswLightsStateStatus+0x7c>
					{
						if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8004ebc:	79bb      	ldrb	r3, [r7, #6]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b2f      	cmp	r3, #47	; 0x2f
 8004ec6:	d905      	bls.n	8004ed4 <UART_ParseAnswLightsStateStatus+0x3c>
 8004ec8:	79bb      	ldrb	r3, [r7, #6]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	4413      	add	r3, r2
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b39      	cmp	r3, #57	; 0x39
 8004ed2:	d90e      	bls.n	8004ef2 <UART_ParseAnswLightsStateStatus+0x5a>
 8004ed4:	79bb      	ldrb	r3, [r7, #6]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	4413      	add	r3, r2
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b2e      	cmp	r3, #46	; 0x2e
 8004ede:	d008      	beq.n	8004ef2 <UART_ParseAnswLightsStateStatus+0x5a>
						{
							sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8004ee0:	491a      	ldr	r1, [pc, #104]	; (8004f4c <UART_ParseAnswLightsStateStatus+0xb4>)
 8004ee2:	481b      	ldr	r0, [pc, #108]	; (8004f50 <UART_ParseAnswLightsStateStatus+0xb8>)
 8004ee4:	f007 feb6 	bl	800cc54 <siprintf>
							UARTDMA_Print(&huartdma2, Message); // Print message
 8004ee8:	4919      	ldr	r1, [pc, #100]	; (8004f50 <UART_ParseAnswLightsStateStatus+0xb8>)
 8004eea:	481a      	ldr	r0, [pc, #104]	; (8004f54 <UART_ParseAnswLightsStateStatus+0xbc>)
 8004eec:	f000 fd61 	bl	80059b2 <UARTDMA_Print>
							return;	// And exit parsing
 8004ef0:	e026      	b.n	8004f40 <UART_ParseAnswLightsStateStatus+0xa8>
						}

						LightsButtonState[i] = atof(ParsePointer); // If there are no chars, change string to integer
 8004ef2:	6838      	ldr	r0, [r7, #0]
 8004ef4:	f006 fff4 	bl	800bee0 <atof>
 8004ef8:	ec53 2b10 	vmov	r2, r3, d0
 8004efc:	79fc      	ldrb	r4, [r7, #7]
 8004efe:	4610      	mov	r0, r2
 8004f00:	4619      	mov	r1, r3
 8004f02:	f7fb fe69 	bl	8000bd8 <__aeabi_d2uiz>
 8004f06:	4603      	mov	r3, r0
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <UART_ParseAnswLightsStateStatus+0xc0>)
 8004f0c:	551a      	strb	r2, [r3, r4]
					for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8004f0e:	79bb      	ldrb	r3, [r7, #6]
 8004f10:	3301      	adds	r3, #1
 8004f12:	71bb      	strb	r3, [r7, #6]
 8004f14:	79bb      	ldrb	r3, [r7, #6]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	4413      	add	r3, r2
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1cd      	bne.n	8004ebc <UART_ParseAnswLightsStateStatus+0x24>
 8004f20:	e008      	b.n	8004f34 <UART_ParseAnswLightsStateStatus+0x9c>
					}
				}
				else
				{
					sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8004f22:	490e      	ldr	r1, [pc, #56]	; (8004f5c <UART_ParseAnswLightsStateStatus+0xc4>)
 8004f24:	480a      	ldr	r0, [pc, #40]	; (8004f50 <UART_ParseAnswLightsStateStatus+0xb8>)
 8004f26:	f007 fe95 	bl	800cc54 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8004f2a:	4909      	ldr	r1, [pc, #36]	; (8004f50 <UART_ParseAnswLightsStateStatus+0xb8>)
 8004f2c:	4809      	ldr	r0, [pc, #36]	; (8004f54 <UART_ParseAnswLightsStateStatus+0xbc>)
 8004f2e:	f000 fd40 	bl	80059b2 <UARTDMA_Print>
					return;	// And exit parsing
 8004f32:	e005      	b.n	8004f40 <UART_ParseAnswLightsStateStatus+0xa8>
			for(i = 0; i<4; i++) // 4 parameters are expected
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	3301      	adds	r3, #1
 8004f38:	71fb      	strb	r3, [r7, #7]
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d9b1      	bls.n	8004ea4 <UART_ParseAnswLightsStateStatus+0xc>
				}
			}
}
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd90      	pop	{r4, r7, pc}
 8004f46:	bf00      	nop
 8004f48:	08010be4 	.word	0x08010be4
 8004f4c:	08010c54 	.word	0x08010c54
 8004f50:	20000440 	.word	0x20000440
 8004f54:	2000032c 	.word	0x2000032c
 8004f58:	20000268 	.word	0x20000268
 8004f5c:	08010c68 	.word	0x08010c68

08004f60 <SendComand>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////// ASK FOR INFORMATION //////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	4603      	mov	r3, r0
 8004f68:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	2b16      	cmp	r3, #22
 8004f72:	f200 80a4 	bhi.w	80050be <SendComand+0x15e>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <SendComand+0x1c>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004fd9 	.word	0x08004fd9
 8004f80:	08004fe3 	.word	0x08004fe3
 8004f84:	08004fed 	.word	0x08004fed
 8004f88:	08004ff7 	.word	0x08004ff7
 8004f8c:	08005001 	.word	0x08005001
 8004f90:	0800500b 	.word	0x0800500b
 8004f94:	08005015 	.word	0x08005015
 8004f98:	0800501f 	.word	0x0800501f
 8004f9c:	08005029 	.word	0x08005029
 8004fa0:	08005033 	.word	0x08005033
 8004fa4:	0800503d 	.word	0x0800503d
 8004fa8:	08005047 	.word	0x08005047
 8004fac:	08005051 	.word	0x08005051
 8004fb0:	08005065 	.word	0x08005065
 8004fb4:	0800506f 	.word	0x0800506f
 8004fb8:	08005079 	.word	0x08005079
 8004fbc:	08005083 	.word	0x08005083
 8004fc0:	0800508d 	.word	0x0800508d
 8004fc4:	08005097 	.word	0x08005097
 8004fc8:	080050a1 	.word	0x080050a1
 8004fcc:	080050ab 	.word	0x080050ab
 8004fd0:	0800505b 	.word	0x0800505b
 8004fd4:	080050b5 	.word	0x080050b5
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8004fd8:	493b      	ldr	r1, [pc, #236]	; (80050c8 <SendComand+0x168>)
 8004fda:	483c      	ldr	r0, [pc, #240]	; (80050cc <SendComand+0x16c>)
 8004fdc:	f000 fce9 	bl	80059b2 <UARTDMA_Print>
			break;
 8004fe0:	e06d      	b.n	80050be <SendComand+0x15e>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8004fe2:	493b      	ldr	r1, [pc, #236]	; (80050d0 <SendComand+0x170>)
 8004fe4:	4839      	ldr	r0, [pc, #228]	; (80050cc <SendComand+0x16c>)
 8004fe6:	f000 fce4 	bl	80059b2 <UARTDMA_Print>
			break;
 8004fea:	e068      	b.n	80050be <SendComand+0x15e>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8004fec:	4939      	ldr	r1, [pc, #228]	; (80050d4 <SendComand+0x174>)
 8004fee:	4837      	ldr	r0, [pc, #220]	; (80050cc <SendComand+0x16c>)
 8004ff0:	f000 fcdf 	bl	80059b2 <UARTDMA_Print>
			break;
 8004ff4:	e063      	b.n	80050be <SendComand+0x15e>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8004ff6:	4938      	ldr	r1, [pc, #224]	; (80050d8 <SendComand+0x178>)
 8004ff8:	4834      	ldr	r0, [pc, #208]	; (80050cc <SendComand+0x16c>)
 8004ffa:	f000 fcda 	bl	80059b2 <UARTDMA_Print>
			break;
 8004ffe:	e05e      	b.n	80050be <SendComand+0x15e>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8005000:	4936      	ldr	r1, [pc, #216]	; (80050dc <SendComand+0x17c>)
 8005002:	4832      	ldr	r0, [pc, #200]	; (80050cc <SendComand+0x16c>)
 8005004:	f000 fcd5 	bl	80059b2 <UARTDMA_Print>
			break;
 8005008:	e059      	b.n	80050be <SendComand+0x15e>
		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 800500a:	4935      	ldr	r1, [pc, #212]	; (80050e0 <SendComand+0x180>)
 800500c:	482f      	ldr	r0, [pc, #188]	; (80050cc <SendComand+0x16c>)
 800500e:	f000 fcd0 	bl	80059b2 <UARTDMA_Print>
			break;
 8005012:	e054      	b.n	80050be <SendComand+0x15e>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8005014:	4933      	ldr	r1, [pc, #204]	; (80050e4 <SendComand+0x184>)
 8005016:	482d      	ldr	r0, [pc, #180]	; (80050cc <SendComand+0x16c>)
 8005018:	f000 fccb 	bl	80059b2 <UARTDMA_Print>
			break;
 800501c:	e04f      	b.n	80050be <SendComand+0x15e>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 800501e:	4932      	ldr	r1, [pc, #200]	; (80050e8 <SendComand+0x188>)
 8005020:	482a      	ldr	r0, [pc, #168]	; (80050cc <SendComand+0x16c>)
 8005022:	f000 fcc6 	bl	80059b2 <UARTDMA_Print>
			break;
 8005026:	e04a      	b.n	80050be <SendComand+0x15e>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8005028:	4930      	ldr	r1, [pc, #192]	; (80050ec <SendComand+0x18c>)
 800502a:	4828      	ldr	r0, [pc, #160]	; (80050cc <SendComand+0x16c>)
 800502c:	f000 fcc1 	bl	80059b2 <UARTDMA_Print>
			break;
 8005030:	e045      	b.n	80050be <SendComand+0x15e>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8005032:	492f      	ldr	r1, [pc, #188]	; (80050f0 <SendComand+0x190>)
 8005034:	4825      	ldr	r0, [pc, #148]	; (80050cc <SendComand+0x16c>)
 8005036:	f000 fcbc 	bl	80059b2 <UARTDMA_Print>
			break;
 800503a:	e040      	b.n	80050be <SendComand+0x15e>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 800503c:	492d      	ldr	r1, [pc, #180]	; (80050f4 <SendComand+0x194>)
 800503e:	4823      	ldr	r0, [pc, #140]	; (80050cc <SendComand+0x16c>)
 8005040:	f000 fcb7 	bl	80059b2 <UARTDMA_Print>
			break;
 8005044:	e03b      	b.n	80050be <SendComand+0x15e>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8005046:	492c      	ldr	r1, [pc, #176]	; (80050f8 <SendComand+0x198>)
 8005048:	4820      	ldr	r0, [pc, #128]	; (80050cc <SendComand+0x16c>)
 800504a:	f000 fcb2 	bl	80059b2 <UARTDMA_Print>
			break;
 800504e:	e036      	b.n	80050be <SendComand+0x15e>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8005050:	492a      	ldr	r1, [pc, #168]	; (80050fc <SendComand+0x19c>)
 8005052:	481e      	ldr	r0, [pc, #120]	; (80050cc <SendComand+0x16c>)
 8005054:	f000 fcad 	bl	80059b2 <UARTDMA_Print>
			break;
 8005058:	e031      	b.n	80050be <SendComand+0x15e>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "STATESTATUS=?\n");
 800505a:	4929      	ldr	r1, [pc, #164]	; (8005100 <SendComand+0x1a0>)
 800505c:	481b      	ldr	r0, [pc, #108]	; (80050cc <SendComand+0x16c>)
 800505e:	f000 fca8 	bl	80059b2 <UARTDMA_Print>
			break;
 8005062:	e02c      	b.n	80050be <SendComand+0x15e>
		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8005064:	4927      	ldr	r1, [pc, #156]	; (8005104 <SendComand+0x1a4>)
 8005066:	4819      	ldr	r0, [pc, #100]	; (80050cc <SendComand+0x16c>)
 8005068:	f000 fca3 	bl	80059b2 <UARTDMA_Print>
			break;
 800506c:	e027      	b.n	80050be <SendComand+0x15e>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 800506e:	4926      	ldr	r1, [pc, #152]	; (8005108 <SendComand+0x1a8>)
 8005070:	4816      	ldr	r0, [pc, #88]	; (80050cc <SendComand+0x16c>)
 8005072:	f000 fc9e 	bl	80059b2 <UARTDMA_Print>
			break;
 8005076:	e022      	b.n	80050be <SendComand+0x15e>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8005078:	4924      	ldr	r1, [pc, #144]	; (800510c <SendComand+0x1ac>)
 800507a:	4814      	ldr	r0, [pc, #80]	; (80050cc <SendComand+0x16c>)
 800507c:	f000 fc99 	bl	80059b2 <UARTDMA_Print>
			break;
 8005080:	e01d      	b.n	80050be <SendComand+0x15e>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8005082:	4923      	ldr	r1, [pc, #140]	; (8005110 <SendComand+0x1b0>)
 8005084:	4811      	ldr	r0, [pc, #68]	; (80050cc <SendComand+0x16c>)
 8005086:	f000 fc94 	bl	80059b2 <UARTDMA_Print>
			break;
 800508a:	e018      	b.n	80050be <SendComand+0x15e>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 800508c:	4921      	ldr	r1, [pc, #132]	; (8005114 <SendComand+0x1b4>)
 800508e:	480f      	ldr	r0, [pc, #60]	; (80050cc <SendComand+0x16c>)
 8005090:	f000 fc8f 	bl	80059b2 <UARTDMA_Print>
			break;
 8005094:	e013      	b.n	80050be <SendComand+0x15e>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8005096:	4920      	ldr	r1, [pc, #128]	; (8005118 <SendComand+0x1b8>)
 8005098:	480c      	ldr	r0, [pc, #48]	; (80050cc <SendComand+0x16c>)
 800509a:	f000 fc8a 	bl	80059b2 <UARTDMA_Print>
			break;
 800509e:	e00e      	b.n	80050be <SendComand+0x15e>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 80050a0:	491e      	ldr	r1, [pc, #120]	; (800511c <SendComand+0x1bc>)
 80050a2:	480a      	ldr	r0, [pc, #40]	; (80050cc <SendComand+0x16c>)
 80050a4:	f000 fc85 	bl	80059b2 <UARTDMA_Print>
			break;
 80050a8:	e009      	b.n	80050be <SendComand+0x15e>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 80050aa:	491d      	ldr	r1, [pc, #116]	; (8005120 <SendComand+0x1c0>)
 80050ac:	4807      	ldr	r0, [pc, #28]	; (80050cc <SendComand+0x16c>)
 80050ae:	f000 fc80 	bl	80059b2 <UARTDMA_Print>
			break;
 80050b2:	e004      	b.n	80050be <SendComand+0x15e>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "LIGHTSSTATUS=?\n");
 80050b4:	491b      	ldr	r1, [pc, #108]	; (8005124 <SendComand+0x1c4>)
 80050b6:	4805      	ldr	r0, [pc, #20]	; (80050cc <SendComand+0x16c>)
 80050b8:	f000 fc7b 	bl	80059b2 <UARTDMA_Print>
			break;
 80050bc:	bf00      	nop
		}

	return 1;
 80050be:	2301      	movs	r3, #1
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	08010c84 	.word	0x08010c84
 80050cc:	2000032c 	.word	0x2000032c
 80050d0:	08010c8c 	.word	0x08010c8c
 80050d4:	08010c94 	.word	0x08010c94
 80050d8:	08010ca0 	.word	0x08010ca0
 80050dc:	08010ca8 	.word	0x08010ca8
 80050e0:	08010cb0 	.word	0x08010cb0
 80050e4:	08010cc0 	.word	0x08010cc0
 80050e8:	08010cd0 	.word	0x08010cd0
 80050ec:	08010ce0 	.word	0x08010ce0
 80050f0:	08010cf0 	.word	0x08010cf0
 80050f4:	08010d00 	.word	0x08010d00
 80050f8:	08010d10 	.word	0x08010d10
 80050fc:	08010d20 	.word	0x08010d20
 8005100:	08010d30 	.word	0x08010d30
 8005104:	08010d40 	.word	0x08010d40
 8005108:	08010d50 	.word	0x08010d50
 800510c:	08010d60 	.word	0x08010d60
 8005110:	08010d70 	.word	0x08010d70
 8005114:	08010d80 	.word	0x08010d80
 8005118:	08010d90 	.word	0x08010d90
 800511c:	08010da0 	.word	0x08010da0
 8005120:	08010db0 	.word	0x08010db0
 8005124:	08010dc0 	.word	0x08010dc0

08005128 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	781a      	ldrb	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	785b      	ldrb	r3, [r3, #1]
 800513a:	429a      	cmp	r2, r3
 800513c:	d101      	bne.n	8005142 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 800513e:	2301      	movs	r3, #1
 8005140:	e018      	b.n	8005174 <RB_Read+0x4c>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	785b      	ldrb	r3, [r3, #1]
 8005146:	461a      	mov	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4413      	add	r3, r2
 800514c:	789a      	ldrb	r2, [r3, #2]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	785b      	ldrb	r3, [r3, #1]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	4b09      	ldr	r3, [pc, #36]	; (8005180 <RB_Read+0x58>)
 800515a:	fb83 1302 	smull	r1, r3, r3, r2
 800515e:	1159      	asrs	r1, r3, #5
 8005160:	17d3      	asrs	r3, r2, #31
 8005162:	1ac9      	subs	r1, r1, r3
 8005164:	460b      	mov	r3, r1
 8005166:	019b      	lsls	r3, r3, #6
 8005168:	440b      	add	r3, r1
 800516a:	1ad1      	subs	r1, r2, r3
 800516c:	b2ca      	uxtb	r2, r1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	7e07e07f 	.word	0x7e07e07f

08005184 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <RB_Write+0x5c>)
 8005198:	fb83 1302 	smull	r1, r3, r3, r2
 800519c:	1159      	asrs	r1, r3, #5
 800519e:	17d3      	asrs	r3, r2, #31
 80051a0:	1ac9      	subs	r1, r1, r3
 80051a2:	460b      	mov	r3, r1
 80051a4:	019b      	lsls	r3, r3, #6
 80051a6:	440b      	add	r3, r1
 80051a8:	1ad1      	subs	r1, r2, r3
 80051aa:	460b      	mov	r3, r1
 80051ac:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	785b      	ldrb	r3, [r3, #1]
 80051b2:	7bfa      	ldrb	r2, [r7, #15]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d101      	bne.n	80051bc <RB_Write+0x38>
	{
		return RB_ERROR; // No free space error
 80051b8:	2301      	movs	r3, #1
 80051ba:	e00a      	b.n	80051d2 <RB_Write+0x4e>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	78fa      	ldrb	r2, [r7, #3]
 80051c8:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	7bfa      	ldrb	r2, [r7, #15]
 80051ce:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	7e07e07f 	.word	0x7e07e07f

080051e4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80051e8:	4b17      	ldr	r3, [pc, #92]	; (8005248 <MX_SPI1_Init+0x64>)
 80051ea:	4a18      	ldr	r2, [pc, #96]	; (800524c <MX_SPI1_Init+0x68>)
 80051ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80051ee:	4b16      	ldr	r3, [pc, #88]	; (8005248 <MX_SPI1_Init+0x64>)
 80051f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80051f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80051f6:	4b14      	ldr	r3, [pc, #80]	; (8005248 <MX_SPI1_Init+0x64>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80051fc:	4b12      	ldr	r3, [pc, #72]	; (8005248 <MX_SPI1_Init+0x64>)
 80051fe:	2200      	movs	r2, #0
 8005200:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005202:	4b11      	ldr	r3, [pc, #68]	; (8005248 <MX_SPI1_Init+0x64>)
 8005204:	2200      	movs	r2, #0
 8005206:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005208:	4b0f      	ldr	r3, [pc, #60]	; (8005248 <MX_SPI1_Init+0x64>)
 800520a:	2200      	movs	r2, #0
 800520c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800520e:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <MX_SPI1_Init+0x64>)
 8005210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005214:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005216:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <MX_SPI1_Init+0x64>)
 8005218:	2210      	movs	r2, #16
 800521a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800521c:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <MX_SPI1_Init+0x64>)
 800521e:	2200      	movs	r2, #0
 8005220:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005222:	4b09      	ldr	r3, [pc, #36]	; (8005248 <MX_SPI1_Init+0x64>)
 8005224:	2200      	movs	r2, #0
 8005226:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005228:	4b07      	ldr	r3, [pc, #28]	; (8005248 <MX_SPI1_Init+0x64>)
 800522a:	2200      	movs	r2, #0
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800522e:	4b06      	ldr	r3, [pc, #24]	; (8005248 <MX_SPI1_Init+0x64>)
 8005230:	220a      	movs	r2, #10
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005234:	4804      	ldr	r0, [pc, #16]	; (8005248 <MX_SPI1_Init+0x64>)
 8005236:	f004 fe59 	bl	8009eec <HAL_SPI_Init>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005240:	f7fe fdc6 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005244:	bf00      	nop
 8005246:	bd80      	pop	{r7, pc}
 8005248:	200004dc 	.word	0x200004dc
 800524c:	40013000 	.word	0x40013000

08005250 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005254:	4b17      	ldr	r3, [pc, #92]	; (80052b4 <MX_SPI3_Init+0x64>)
 8005256:	4a18      	ldr	r2, [pc, #96]	; (80052b8 <MX_SPI3_Init+0x68>)
 8005258:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800525a:	4b16      	ldr	r3, [pc, #88]	; (80052b4 <MX_SPI3_Init+0x64>)
 800525c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005260:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005262:	4b14      	ldr	r3, [pc, #80]	; (80052b4 <MX_SPI3_Init+0x64>)
 8005264:	2200      	movs	r2, #0
 8005266:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005268:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <MX_SPI3_Init+0x64>)
 800526a:	2200      	movs	r2, #0
 800526c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800526e:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <MX_SPI3_Init+0x64>)
 8005270:	2200      	movs	r2, #0
 8005272:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005274:	4b0f      	ldr	r3, [pc, #60]	; (80052b4 <MX_SPI3_Init+0x64>)
 8005276:	2200      	movs	r2, #0
 8005278:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800527a:	4b0e      	ldr	r3, [pc, #56]	; (80052b4 <MX_SPI3_Init+0x64>)
 800527c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005280:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005282:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <MX_SPI3_Init+0x64>)
 8005284:	2220      	movs	r2, #32
 8005286:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005288:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <MX_SPI3_Init+0x64>)
 800528a:	2200      	movs	r2, #0
 800528c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800528e:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <MX_SPI3_Init+0x64>)
 8005290:	2200      	movs	r2, #0
 8005292:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005294:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <MX_SPI3_Init+0x64>)
 8005296:	2200      	movs	r2, #0
 8005298:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <MX_SPI3_Init+0x64>)
 800529c:	220a      	movs	r2, #10
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80052a0:	4804      	ldr	r0, [pc, #16]	; (80052b4 <MX_SPI3_Init+0x64>)
 80052a2:	f004 fe23 	bl	8009eec <HAL_SPI_Init>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80052ac:	f7fe fd90 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80052b0:	bf00      	nop
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	20000484 	.word	0x20000484
 80052b8:	40003c00 	.word	0x40003c00

080052bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08c      	sub	sp, #48	; 0x30
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c4:	f107 031c 	add.w	r3, r7, #28
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	605a      	str	r2, [r3, #4]
 80052ce:	609a      	str	r2, [r3, #8]
 80052d0:	60da      	str	r2, [r3, #12]
 80052d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a32      	ldr	r2, [pc, #200]	; (80053a4 <HAL_SPI_MspInit+0xe8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d12c      	bne.n	8005338 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	4b31      	ldr	r3, [pc, #196]	; (80053a8 <HAL_SPI_MspInit+0xec>)
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	4a30      	ldr	r2, [pc, #192]	; (80053a8 <HAL_SPI_MspInit+0xec>)
 80052e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052ec:	6453      	str	r3, [r2, #68]	; 0x44
 80052ee:	4b2e      	ldr	r3, [pc, #184]	; (80053a8 <HAL_SPI_MspInit+0xec>)
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	4b2a      	ldr	r3, [pc, #168]	; (80053a8 <HAL_SPI_MspInit+0xec>)
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	4a29      	ldr	r2, [pc, #164]	; (80053a8 <HAL_SPI_MspInit+0xec>)
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	6313      	str	r3, [r2, #48]	; 0x30
 800530a:	4b27      	ldr	r3, [pc, #156]	; (80053a8 <HAL_SPI_MspInit+0xec>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005316:	23e0      	movs	r3, #224	; 0xe0
 8005318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800531a:	2302      	movs	r3, #2
 800531c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005322:	2303      	movs	r3, #3
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005326:	2305      	movs	r3, #5
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800532a:	f107 031c 	add.w	r3, r7, #28
 800532e:	4619      	mov	r1, r3
 8005330:	481e      	ldr	r0, [pc, #120]	; (80053ac <HAL_SPI_MspInit+0xf0>)
 8005332:	f001 fb45 	bl	80069c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005336:	e030      	b.n	800539a <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1c      	ldr	r2, [pc, #112]	; (80053b0 <HAL_SPI_MspInit+0xf4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d12b      	bne.n	800539a <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <HAL_SPI_MspInit+0xec>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	4a17      	ldr	r2, [pc, #92]	; (80053a8 <HAL_SPI_MspInit+0xec>)
 800534c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005350:	6413      	str	r3, [r2, #64]	; 0x40
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <HAL_SPI_MspInit+0xec>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <HAL_SPI_MspInit+0xec>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	4a10      	ldr	r2, [pc, #64]	; (80053a8 <HAL_SPI_MspInit+0xec>)
 8005368:	f043 0302 	orr.w	r3, r3, #2
 800536c:	6313      	str	r3, [r2, #48]	; 0x30
 800536e:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <HAL_SPI_MspInit+0xec>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800537a:	2338      	movs	r3, #56	; 0x38
 800537c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800537e:	2302      	movs	r3, #2
 8005380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005382:	2300      	movs	r3, #0
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005386:	2303      	movs	r3, #3
 8005388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800538a:	2306      	movs	r3, #6
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800538e:	f107 031c 	add.w	r3, r7, #28
 8005392:	4619      	mov	r1, r3
 8005394:	4807      	ldr	r0, [pc, #28]	; (80053b4 <HAL_SPI_MspInit+0xf8>)
 8005396:	f001 fb13 	bl	80069c0 <HAL_GPIO_Init>
}
 800539a:	bf00      	nop
 800539c:	3730      	adds	r7, #48	; 0x30
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40013000 	.word	0x40013000
 80053a8:	40023800 	.word	0x40023800
 80053ac:	40020000 	.word	0x40020000
 80053b0:	40003c00 	.word	0x40003c00
 80053b4:	40020400 	.word	0x40020400

080053b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053be:	2300      	movs	r3, #0
 80053c0:	607b      	str	r3, [r7, #4]
 80053c2:	4b10      	ldr	r3, [pc, #64]	; (8005404 <HAL_MspInit+0x4c>)
 80053c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c6:	4a0f      	ldr	r2, [pc, #60]	; (8005404 <HAL_MspInit+0x4c>)
 80053c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053cc:	6453      	str	r3, [r2, #68]	; 0x44
 80053ce:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <HAL_MspInit+0x4c>)
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d6:	607b      	str	r3, [r7, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053da:	2300      	movs	r3, #0
 80053dc:	603b      	str	r3, [r7, #0]
 80053de:	4b09      	ldr	r3, [pc, #36]	; (8005404 <HAL_MspInit+0x4c>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	4a08      	ldr	r2, [pc, #32]	; (8005404 <HAL_MspInit+0x4c>)
 80053e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <HAL_MspInit+0x4c>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40023800 	.word	0x40023800

08005408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800540c:	e7fe      	b.n	800540c <NMI_Handler+0x4>

0800540e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800540e:	b480      	push	{r7}
 8005410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005412:	e7fe      	b.n	8005412 <HardFault_Handler+0x4>

08005414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005418:	e7fe      	b.n	8005418 <MemManage_Handler+0x4>

0800541a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800541a:	b480      	push	{r7}
 800541c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800541e:	e7fe      	b.n	800541e <BusFault_Handler+0x4>

08005420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005424:	e7fe      	b.n	8005424 <UsageFault_Handler+0x4>

08005426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005426:	b480      	push	{r7}
 8005428:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800542a:	bf00      	nop
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005438:	bf00      	nop
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005442:	b480      	push	{r7}
 8005444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005446:	bf00      	nop
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005454:	f000 fcc0 	bl	8005dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005458:	bf00      	nop
 800545a:	bd80      	pop	{r7, pc}

0800545c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IRQ_Pin);
 8005460:	2010      	movs	r0, #16
 8005462:	f001 fc7d 	bl	8006d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005466:	bf00      	nop
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 8005470:	4802      	ldr	r0, [pc, #8]	; (800547c <DMA1_Stream5_IRQHandler+0x10>)
 8005472:	f000 f9e9 	bl	8005848 <UARTDMA_DmaReceiveIrqHandler>
	return;
 8005476:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	2000032c 	.word	0x2000032c

08005480 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005484:	4802      	ldr	r0, [pc, #8]	; (8005490 <DMA1_Stream6_IRQHandler+0x10>)
 8005486:	f001 f823 	bl	80064d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800548a:	bf00      	nop
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20000624 	.word	0x20000624

08005494 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8005498:	f44f 7080 	mov.w	r0, #256	; 0x100
 800549c:	f001 fc60 	bl	8006d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80054a0:	bf00      	nop
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80054a8:	4802      	ldr	r0, [pc, #8]	; (80054b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80054aa:	f005 fa14 	bl	800a8d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80054ae:	bf00      	nop
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000534 	.word	0x20000534

080054b8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80054bc:	4802      	ldr	r0, [pc, #8]	; (80054c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80054be:	f005 fa0a 	bl	800a8d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80054c2:	bf00      	nop
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	2000057c 	.word	0x2000057c

080054cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80054d0:	4802      	ldr	r0, [pc, #8]	; (80054dc <I2C1_EV_IRQHandler+0x10>)
 80054d2:	f002 f8c5 	bl	8007660 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80054d6:	bf00      	nop
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	200002d8 	.word	0x200002d8

080054e0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80054e4:	4802      	ldr	r0, [pc, #8]	; (80054f0 <I2C1_ER_IRQHandler+0x10>)
 80054e6:	f002 fa2c 	bl	8007942 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80054ea:	bf00      	nop
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	200002d8 	.word	0x200002d8

080054f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 80054f8:	4803      	ldr	r0, [pc, #12]	; (8005508 <USART2_IRQHandler+0x14>)
 80054fa:	f000 f97b 	bl	80057f4 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80054fe:	4803      	ldr	r0, [pc, #12]	; (800550c <USART2_IRQHandler+0x18>)
 8005500:	f005 fcaa 	bl	800ae58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005504:	bf00      	nop
 8005506:	bd80      	pop	{r7, pc}
 8005508:	2000032c 	.word	0x2000032c
 800550c:	20000684 	.word	0x20000684

08005510 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8005514:	4802      	ldr	r0, [pc, #8]	; (8005520 <SPI3_IRQHandler+0x10>)
 8005516:	f004 ff15 	bl	800a344 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20000484 	.word	0x20000484

08005524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
	return 1;
 8005528:	2301      	movs	r3, #1
}
 800552a:	4618      	mov	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <_kill>:

int _kill(int pid, int sig)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800553e:	f006 fcd7 	bl	800bef0 <__errno>
 8005542:	4603      	mov	r3, r0
 8005544:	2216      	movs	r2, #22
 8005546:	601a      	str	r2, [r3, #0]
	return -1;
 8005548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <_exit>:

void _exit (int status)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800555c:	f04f 31ff 	mov.w	r1, #4294967295
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff ffe7 	bl	8005534 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005566:	e7fe      	b.n	8005566 <_exit+0x12>

08005568 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	e00a      	b.n	8005590 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800557a:	f3af 8000 	nop.w
 800557e:	4601      	mov	r1, r0
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	60ba      	str	r2, [r7, #8]
 8005586:	b2ca      	uxtb	r2, r1
 8005588:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	3301      	adds	r3, #1
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	429a      	cmp	r2, r3
 8005596:	dbf0      	blt.n	800557a <_read+0x12>
	}

return len;
 8005598:	687b      	ldr	r3, [r7, #4]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b086      	sub	sp, #24
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	e009      	b.n	80055c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	60ba      	str	r2, [r7, #8]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	3301      	adds	r3, #1
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	dbf1      	blt.n	80055b4 <_write+0x12>
	}
	return len;
 80055d0:	687b      	ldr	r3, [r7, #4]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <_close>:

int _close(int file)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
	return -1;
 80055e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005602:	605a      	str	r2, [r3, #4]
	return 0;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <_isatty>:

int _isatty(int file)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
	return 1;
 800561a:	2301      	movs	r3, #1
}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
	return 0;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800564c:	4a14      	ldr	r2, [pc, #80]	; (80056a0 <_sbrk+0x5c>)
 800564e:	4b15      	ldr	r3, [pc, #84]	; (80056a4 <_sbrk+0x60>)
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005658:	4b13      	ldr	r3, [pc, #76]	; (80056a8 <_sbrk+0x64>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005660:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <_sbrk+0x64>)
 8005662:	4a12      	ldr	r2, [pc, #72]	; (80056ac <_sbrk+0x68>)
 8005664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005666:	4b10      	ldr	r3, [pc, #64]	; (80056a8 <_sbrk+0x64>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4413      	add	r3, r2
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	429a      	cmp	r2, r3
 8005672:	d207      	bcs.n	8005684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005674:	f006 fc3c 	bl	800bef0 <__errno>
 8005678:	4603      	mov	r3, r0
 800567a:	220c      	movs	r2, #12
 800567c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800567e:	f04f 33ff 	mov.w	r3, #4294967295
 8005682:	e009      	b.n	8005698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005684:	4b08      	ldr	r3, [pc, #32]	; (80056a8 <_sbrk+0x64>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800568a:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <_sbrk+0x64>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4413      	add	r3, r2
 8005692:	4a05      	ldr	r2, [pc, #20]	; (80056a8 <_sbrk+0x64>)
 8005694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005696:	68fb      	ldr	r3, [r7, #12]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20020000 	.word	0x20020000
 80056a4:	00000400 	.word	0x00000400
 80056a8:	20000270 	.word	0x20000270
 80056ac:	200006e0 	.word	0x200006e0

080056b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056b4:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <SystemInit+0x20>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	4a05      	ldr	r2, [pc, #20]	; (80056d0 <SystemInit+0x20>)
 80056bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056c4:	bf00      	nop
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	e000ed00 	.word	0xe000ed00

080056d4 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80056d8:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <MX_TIM10_Init+0x40>)
 80056da:	4a0f      	ldr	r2, [pc, #60]	; (8005718 <MX_TIM10_Init+0x44>)
 80056dc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80056de:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <MX_TIM10_Init+0x40>)
 80056e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80056e4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <MX_TIM10_Init+0x40>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80056ec:	4b09      	ldr	r3, [pc, #36]	; (8005714 <MX_TIM10_Init+0x40>)
 80056ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80056f2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056f4:	4b07      	ldr	r3, [pc, #28]	; (8005714 <MX_TIM10_Init+0x40>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056fa:	4b06      	ldr	r3, [pc, #24]	; (8005714 <MX_TIM10_Init+0x40>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005700:	4804      	ldr	r0, [pc, #16]	; (8005714 <MX_TIM10_Init+0x40>)
 8005702:	f005 f807 	bl	800a714 <HAL_TIM_Base_Init>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800570c:	f7fe fb60 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005710:	bf00      	nop
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000534 	.word	0x20000534
 8005718:	40014400 	.word	0x40014400

0800571c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005720:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <MX_TIM11_Init+0x44>)
 8005722:	4a10      	ldr	r2, [pc, #64]	; (8005764 <MX_TIM11_Init+0x48>)
 8005724:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8005726:	4b0e      	ldr	r3, [pc, #56]	; (8005760 <MX_TIM11_Init+0x44>)
 8005728:	f643 2297 	movw	r2, #14999	; 0x3a97
 800572c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800572e:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <MX_TIM11_Init+0x44>)
 8005730:	2200      	movs	r2, #0
 8005732:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 8005734:	4b0a      	ldr	r3, [pc, #40]	; (8005760 <MX_TIM11_Init+0x44>)
 8005736:	f247 522f 	movw	r2, #29999	; 0x752f
 800573a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800573c:	4b08      	ldr	r3, [pc, #32]	; (8005760 <MX_TIM11_Init+0x44>)
 800573e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005742:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005744:	4b06      	ldr	r3, [pc, #24]	; (8005760 <MX_TIM11_Init+0x44>)
 8005746:	2200      	movs	r2, #0
 8005748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800574a:	4805      	ldr	r0, [pc, #20]	; (8005760 <MX_TIM11_Init+0x44>)
 800574c:	f004 ffe2 	bl	800a714 <HAL_TIM_Base_Init>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 8005756:	f7fe fb3b 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	2000057c 	.word	0x2000057c
 8005764:	40014800 	.word	0x40014800

08005768 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a1c      	ldr	r2, [pc, #112]	; (80057e8 <HAL_TIM_Base_MspInit+0x80>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d116      	bne.n	80057a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	4b1b      	ldr	r3, [pc, #108]	; (80057ec <HAL_TIM_Base_MspInit+0x84>)
 8005780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005782:	4a1a      	ldr	r2, [pc, #104]	; (80057ec <HAL_TIM_Base_MspInit+0x84>)
 8005784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005788:	6453      	str	r3, [r2, #68]	; 0x44
 800578a:	4b18      	ldr	r3, [pc, #96]	; (80057ec <HAL_TIM_Base_MspInit+0x84>)
 800578c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005796:	2200      	movs	r2, #0
 8005798:	2100      	movs	r1, #0
 800579a:	2019      	movs	r0, #25
 800579c:	f000 fc9f 	bl	80060de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80057a0:	2019      	movs	r0, #25
 80057a2:	f000 fcb8 	bl	8006116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80057a6:	e01a      	b.n	80057de <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a10      	ldr	r2, [pc, #64]	; (80057f0 <HAL_TIM_Base_MspInit+0x88>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d115      	bne.n	80057de <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	60bb      	str	r3, [r7, #8]
 80057b6:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <HAL_TIM_Base_MspInit+0x84>)
 80057b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ba:	4a0c      	ldr	r2, [pc, #48]	; (80057ec <HAL_TIM_Base_MspInit+0x84>)
 80057bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057c0:	6453      	str	r3, [r2, #68]	; 0x44
 80057c2:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <HAL_TIM_Base_MspInit+0x84>)
 80057c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ca:	60bb      	str	r3, [r7, #8]
 80057cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80057ce:	2200      	movs	r2, #0
 80057d0:	2100      	movs	r1, #0
 80057d2:	201a      	movs	r0, #26
 80057d4:	f000 fc83 	bl	80060de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80057d8:	201a      	movs	r0, #26
 80057da:	f000 fc9c 	bl	8006116 <HAL_NVIC_EnableIRQ>
}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40014400 	.word	0x40014400
 80057ec:	40023800 	.word	0x40023800
 80057f0:	40014800 	.word	0x40014800

080057f4 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	2b00      	cmp	r3, #0
 800580a:	d017      	beq.n	800583c <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0201 	bic.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	60fb      	str	r3, [r7, #12]
	}
}
 800583c:	bf00      	nop
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005858:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	d056      	beq.n	800591a <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005874:	2220      	movs	r2, #32
 8005876:	409a      	lsls	r2, r3
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	b29b      	uxth	r3, r3
 8005888:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 800588c:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3304      	adds	r3, #4
 8005892:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8005894:	2300      	movs	r3, #0
 8005896:	82fb      	strh	r3, [r7, #22]
 8005898:	e01a      	b.n	80058d0 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f103 0045 	add.w	r0, r3, #69	; 0x45
 80058a0:	8afb      	ldrh	r3, [r7, #22]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	4413      	add	r3, r2
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	4619      	mov	r1, r3
 80058aa:	f7ff fc6b 	bl	8005184 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 80058ae:	8afb      	ldrh	r3, [r7, #22]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	4413      	add	r3, r2
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b0a      	cmp	r3, #10
 80058b8:	d107      	bne.n	80058ca <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80058c0:	3301      	adds	r3, #1
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 80058ca:	8afb      	ldrh	r3, [r7, #22]
 80058cc:	3301      	adds	r3, #1
 80058ce:	82fb      	strh	r3, [r7, #22]
 80058d0:	8afa      	ldrh	r2, [r7, #22]
 80058d2:	89fb      	ldrh	r3, [r7, #14]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d3e0      	bcc.n	800589a <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e0:	223f      	movs	r2, #63	; 0x3f
 80058e2:	409a      	lsls	r2, r3
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	1d1a      	adds	r2, r3, #4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2241      	movs	r2, #65	; 0x41
 8005900:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0201 	orr.w	r2, r2, #1
 8005918:	601a      	str	r2, [r3, #0]
	}
}
 800591a:	bf00      	nop
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	460b      	mov	r3, r1
 800592c:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	33ca      	adds	r3, #202	; 0xca
 8005932:	78fa      	ldrb	r2, [r7, #3]
 8005934:	4611      	mov	r1, r2
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fc24 	bl	8005184 <RB_Write>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <UARTDMA_PutCharToTxBuffer+0x24>
	{
		return 1; // Error code
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <UARTDMA_PutCharToTxBuffer+0x26>
	}
	return 0; // Success code
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01f      	beq.n	80059a8 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8005968:	e013      	b.n	8005992 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b0a      	cmp	r3, #10
 8005970:	d10c      	bne.n	800598c <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800597e:	3b01      	subs	r3, #1
 8005980:	b2da      	uxtb	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				return 0; // Exit if end line
 8005988:	2300      	movs	r3, #0
 800598a:	e00e      	b.n	80059aa <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3301      	adds	r3, #1
 8005990:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3345      	adds	r3, #69	; 0x45
 8005996:	68f9      	ldr	r1, [r7, #12]
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff fbc5 	bl	8005128 <RB_Read>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0e2      	beq.n	800596a <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 80059a4:	2300      	movs	r3, #0
 80059a6:	e000      	b.n	80059aa <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 80059a8:	2301      	movs	r3, #1
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80059c0:	e012      	b.n	80059e8 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 80059c2:	7afb      	ldrb	r3, [r7, #11]
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7ff ffab 	bl	8005922 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 80059d2:	7afb      	ldrb	r3, [r7, #11]
 80059d4:	2b0a      	cmp	r3, #10
 80059d6:	d107      	bne.n	80059e8 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80059de:	3301      	adds	r3, #1
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	72fb      	strb	r3, [r7, #11]
 80059ee:	7afb      	ldrb	r3, [r7, #11]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e6      	bne.n	80059c2 <UARTDMA_Print+0x10>
		}
	}
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d027      	beq.n	8005a8e <UARTDMA_TransmitEvent+0x6c>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8005a3e:	e013      	b.n	8005a68 <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8005a40:	7b7b      	ldrb	r3, [r7, #13]
 8005a42:	2b0a      	cmp	r3, #10
 8005a44:	d107      	bne.n	8005a56 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 8005a56:	89fb      	ldrh	r3, [r7, #14]
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	81fa      	strh	r2, [r7, #14]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	7b7a      	ldrb	r2, [r7, #13]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	440b      	add	r3, r1
 8005a64:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	33ca      	adds	r3, #202	; 0xca
 8005a6c:	f107 020d 	add.w	r2, r7, #13
 8005a70:	4611      	mov	r1, r2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff fb58 	bl	8005128 <RB_Read>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0e0      	beq.n	8005a40 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3389      	adds	r3, #137	; 0x89
 8005a86:	89fa      	ldrh	r2, [r7, #14]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f005 f937 	bl	800acfc <HAL_UART_Transmit_DMA>
	}
}
 8005a8e:	bf00      	nop
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0210 	orr.w	r2, r2, #16
 8005ab8:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0210 	orr.w	r2, r2, #16
 8005ad0:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0210 	orr.w	r2, r2, #16
 8005ae8:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3304      	adds	r3, #4
 8005af2:	2241      	movs	r2, #65	; 0x41
 8005af4:	4619      	mov	r1, r3
 8005af6:	f005 f97f 	bl	800adf8 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0208 	bic.w	r2, r2, #8
 8005b10:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0208 	bic.w	r2, r2, #8
 8005b28:	601a      	str	r2, [r3, #0]
}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b38:	4b11      	ldr	r3, [pc, #68]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b3a:	4a12      	ldr	r2, [pc, #72]	; (8005b84 <MX_USART2_UART_Init+0x50>)
 8005b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005b3e:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b46:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b4c:	4b0c      	ldr	r3, [pc, #48]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b52:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b58:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b5a:	220c      	movs	r2, #12
 8005b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b5e:	4b08      	ldr	r3, [pc, #32]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b64:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b6a:	4805      	ldr	r0, [pc, #20]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b6c:	f005 f878 	bl	800ac60 <HAL_UART_Init>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005b76:	f7fe f92b 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005b7a:	bf00      	nop
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000684 	.word	0x20000684
 8005b84:	40004400 	.word	0x40004400

08005b88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	; 0x28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b90:	f107 0314 	add.w	r3, r7, #20
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	609a      	str	r2, [r3, #8]
 8005b9c:	60da      	str	r2, [r3, #12]
 8005b9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a47      	ldr	r2, [pc, #284]	; (8005cc4 <HAL_UART_MspInit+0x13c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	f040 8088 	bne.w	8005cbc <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005bac:	2300      	movs	r3, #0
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	4b45      	ldr	r3, [pc, #276]	; (8005cc8 <HAL_UART_MspInit+0x140>)
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	4a44      	ldr	r2, [pc, #272]	; (8005cc8 <HAL_UART_MspInit+0x140>)
 8005bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bba:	6413      	str	r3, [r2, #64]	; 0x40
 8005bbc:	4b42      	ldr	r3, [pc, #264]	; (8005cc8 <HAL_UART_MspInit+0x140>)
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	4b3e      	ldr	r3, [pc, #248]	; (8005cc8 <HAL_UART_MspInit+0x140>)
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	4a3d      	ldr	r2, [pc, #244]	; (8005cc8 <HAL_UART_MspInit+0x140>)
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8005bd8:	4b3b      	ldr	r3, [pc, #236]	; (8005cc8 <HAL_UART_MspInit+0x140>)
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005be4:	230c      	movs	r3, #12
 8005be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be8:	2302      	movs	r3, #2
 8005bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005bf4:	2307      	movs	r3, #7
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bf8:	f107 0314 	add.w	r3, r7, #20
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4833      	ldr	r0, [pc, #204]	; (8005ccc <HAL_UART_MspInit+0x144>)
 8005c00:	f000 fede 	bl	80069c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005c04:	4b32      	ldr	r3, [pc, #200]	; (8005cd0 <HAL_UART_MspInit+0x148>)
 8005c06:	4a33      	ldr	r2, [pc, #204]	; (8005cd4 <HAL_UART_MspInit+0x14c>)
 8005c08:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005c0a:	4b31      	ldr	r3, [pc, #196]	; (8005cd0 <HAL_UART_MspInit+0x148>)
 8005c0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c10:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c12:	4b2f      	ldr	r3, [pc, #188]	; (8005cd0 <HAL_UART_MspInit+0x148>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c18:	4b2d      	ldr	r3, [pc, #180]	; (8005cd0 <HAL_UART_MspInit+0x148>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c1e:	4b2c      	ldr	r3, [pc, #176]	; (8005cd0 <HAL_UART_MspInit+0x148>)
 8005c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c24:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c26:	4b2a      	ldr	r3, [pc, #168]	; (8005cd0 <HAL_UART_MspInit+0x148>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c2c:	4b28      	ldr	r3, [pc, #160]	; (8005cd0 <HAL_UART_MspInit+0x148>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005c32:	4b27      	ldr	r3, [pc, #156]	; (8005cd0 <HAL_UART_MspInit+0x148>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005c38:	4b25      	ldr	r3, [pc, #148]	; (8005cd0 <HAL_UART_MspInit+0x148>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c3e:	4b24      	ldr	r3, [pc, #144]	; (8005cd0 <HAL_UART_MspInit+0x148>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005c44:	4822      	ldr	r0, [pc, #136]	; (8005cd0 <HAL_UART_MspInit+0x148>)
 8005c46:	f000 faab 	bl	80061a0 <HAL_DMA_Init>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005c50:	f7fe f8be 	bl	8003dd0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a1e      	ldr	r2, [pc, #120]	; (8005cd0 <HAL_UART_MspInit+0x148>)
 8005c58:	639a      	str	r2, [r3, #56]	; 0x38
 8005c5a:	4a1d      	ldr	r2, [pc, #116]	; (8005cd0 <HAL_UART_MspInit+0x148>)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005c60:	4b1d      	ldr	r3, [pc, #116]	; (8005cd8 <HAL_UART_MspInit+0x150>)
 8005c62:	4a1e      	ldr	r2, [pc, #120]	; (8005cdc <HAL_UART_MspInit+0x154>)
 8005c64:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005c66:	4b1c      	ldr	r3, [pc, #112]	; (8005cd8 <HAL_UART_MspInit+0x150>)
 8005c68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c6c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c6e:	4b1a      	ldr	r3, [pc, #104]	; (8005cd8 <HAL_UART_MspInit+0x150>)
 8005c70:	2240      	movs	r2, #64	; 0x40
 8005c72:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c74:	4b18      	ldr	r3, [pc, #96]	; (8005cd8 <HAL_UART_MspInit+0x150>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c7a:	4b17      	ldr	r3, [pc, #92]	; (8005cd8 <HAL_UART_MspInit+0x150>)
 8005c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c80:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c82:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <HAL_UART_MspInit+0x150>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c88:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <HAL_UART_MspInit+0x150>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <HAL_UART_MspInit+0x150>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005c94:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <HAL_UART_MspInit+0x150>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c9a:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <HAL_UART_MspInit+0x150>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005ca0:	480d      	ldr	r0, [pc, #52]	; (8005cd8 <HAL_UART_MspInit+0x150>)
 8005ca2:	f000 fa7d 	bl	80061a0 <HAL_DMA_Init>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8005cac:	f7fe f890 	bl	8003dd0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a09      	ldr	r2, [pc, #36]	; (8005cd8 <HAL_UART_MspInit+0x150>)
 8005cb4:	635a      	str	r2, [r3, #52]	; 0x34
 8005cb6:	4a08      	ldr	r2, [pc, #32]	; (8005cd8 <HAL_UART_MspInit+0x150>)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005cbc:	bf00      	nop
 8005cbe:	3728      	adds	r7, #40	; 0x28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40004400 	.word	0x40004400
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	40020000 	.word	0x40020000
 8005cd0:	200005c4 	.word	0x200005c4
 8005cd4:	40026088 	.word	0x40026088
 8005cd8:	20000624 	.word	0x20000624
 8005cdc:	400260a0 	.word	0x400260a0

08005ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ce4:	480d      	ldr	r0, [pc, #52]	; (8005d1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005ce6:	490e      	ldr	r1, [pc, #56]	; (8005d20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005ce8:	4a0e      	ldr	r2, [pc, #56]	; (8005d24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005cec:	e002      	b.n	8005cf4 <LoopCopyDataInit>

08005cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005cf2:	3304      	adds	r3, #4

08005cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005cf8:	d3f9      	bcc.n	8005cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005cfa:	4a0b      	ldr	r2, [pc, #44]	; (8005d28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005cfc:	4c0b      	ldr	r4, [pc, #44]	; (8005d2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8005cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d00:	e001      	b.n	8005d06 <LoopFillZerobss>

08005d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d04:	3204      	adds	r2, #4

08005d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d08:	d3fb      	bcc.n	8005d02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005d0a:	f7ff fcd1 	bl	80056b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d0e:	f006 f8f5 	bl	800befc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d12:	f7fd ff33 	bl	8003b7c <main>
  bx  lr    
 8005d16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005d18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d20:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8005d24:	08024430 	.word	0x08024430
  ldr r2, =_sbss
 8005d28:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8005d2c:	200006dc 	.word	0x200006dc

08005d30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d30:	e7fe      	b.n	8005d30 <ADC_IRQHandler>
	...

08005d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d38:	4b0e      	ldr	r3, [pc, #56]	; (8005d74 <HAL_Init+0x40>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a0d      	ldr	r2, [pc, #52]	; (8005d74 <HAL_Init+0x40>)
 8005d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d44:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <HAL_Init+0x40>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a0a      	ldr	r2, [pc, #40]	; (8005d74 <HAL_Init+0x40>)
 8005d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d50:	4b08      	ldr	r3, [pc, #32]	; (8005d74 <HAL_Init+0x40>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a07      	ldr	r2, [pc, #28]	; (8005d74 <HAL_Init+0x40>)
 8005d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d5c:	2003      	movs	r0, #3
 8005d5e:	f000 f9b3 	bl	80060c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d62:	2000      	movs	r0, #0
 8005d64:	f000 f808 	bl	8005d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d68:	f7ff fb26 	bl	80053b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40023c00 	.word	0x40023c00

08005d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d80:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <HAL_InitTick+0x54>)
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	4b12      	ldr	r3, [pc, #72]	; (8005dd0 <HAL_InitTick+0x58>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f9d9 	bl	800614e <HAL_SYSTICK_Config>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e00e      	b.n	8005dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b0f      	cmp	r3, #15
 8005daa:	d80a      	bhi.n	8005dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005dac:	2200      	movs	r2, #0
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295
 8005db4:	f000 f993 	bl	80060de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005db8:	4a06      	ldr	r2, [pc, #24]	; (8005dd4 <HAL_InitTick+0x5c>)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e000      	b.n	8005dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20000034 	.word	0x20000034
 8005dd0:	2000003c 	.word	0x2000003c
 8005dd4:	20000038 	.word	0x20000038

08005dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <HAL_IncTick+0x20>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	461a      	mov	r2, r3
 8005de2:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <HAL_IncTick+0x24>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4413      	add	r3, r2
 8005de8:	4a04      	ldr	r2, [pc, #16]	; (8005dfc <HAL_IncTick+0x24>)
 8005dea:	6013      	str	r3, [r2, #0]
}
 8005dec:	bf00      	nop
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	2000003c 	.word	0x2000003c
 8005dfc:	200006c8 	.word	0x200006c8

08005e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  return uwTick;
 8005e04:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <HAL_GetTick+0x14>)
 8005e06:	681b      	ldr	r3, [r3, #0]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	200006c8 	.word	0x200006c8

08005e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e20:	f7ff ffee 	bl	8005e00 <HAL_GetTick>
 8005e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e30:	d005      	beq.n	8005e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e32:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <HAL_Delay+0x44>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005e3e:	bf00      	nop
 8005e40:	f7ff ffde 	bl	8005e00 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d8f7      	bhi.n	8005e40 <HAL_Delay+0x28>
  {
  }
}
 8005e50:	bf00      	nop
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	2000003c 	.word	0x2000003c

08005e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e70:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e92:	4a04      	ldr	r2, [pc, #16]	; (8005ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	60d3      	str	r3, [r2, #12]
}
 8005e98:	bf00      	nop
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	e000ed00 	.word	0xe000ed00

08005ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005eac:	4b04      	ldr	r3, [pc, #16]	; (8005ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	0a1b      	lsrs	r3, r3, #8
 8005eb2:	f003 0307 	and.w	r3, r3, #7
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	e000ed00 	.word	0xe000ed00

08005ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	4603      	mov	r3, r0
 8005ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	db0b      	blt.n	8005eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	f003 021f 	and.w	r2, r3, #31
 8005edc:	4907      	ldr	r1, [pc, #28]	; (8005efc <__NVIC_EnableIRQ+0x38>)
 8005ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8005eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	e000e100 	.word	0xe000e100

08005f00 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	db12      	blt.n	8005f38 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	f003 021f 	and.w	r2, r3, #31
 8005f18:	490a      	ldr	r1, [pc, #40]	; (8005f44 <__NVIC_DisableIRQ+0x44>)
 8005f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	2001      	movs	r0, #1
 8005f22:	fa00 f202 	lsl.w	r2, r0, r2
 8005f26:	3320      	adds	r3, #32
 8005f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005f2c:	f3bf 8f4f 	dsb	sy
}
 8005f30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f32:	f3bf 8f6f 	isb	sy
}
 8005f36:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	e000e100 	.word	0xe000e100

08005f48 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	db0e      	blt.n	8005f78 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8005f5a:	4a0b      	ldr	r2, [pc, #44]	; (8005f88 <__NVIC_GetPendingIRQ+0x40>)
 8005f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	3340      	adds	r3, #64	; 0x40
 8005f64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	e000      	b.n	8005f7a <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8005f78:	2300      	movs	r3, #0
  }
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	e000e100 	.word	0xe000e100

08005f8c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	4603      	mov	r3, r0
 8005f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	db0c      	blt.n	8005fb8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	f003 021f 	and.w	r2, r3, #31
 8005fa4:	4907      	ldr	r1, [pc, #28]	; (8005fc4 <__NVIC_ClearPendingIRQ+0x38>)
 8005fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	2001      	movs	r0, #1
 8005fae:	fa00 f202 	lsl.w	r2, r0, r2
 8005fb2:	3360      	adds	r3, #96	; 0x60
 8005fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	e000e100 	.word	0xe000e100

08005fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	6039      	str	r1, [r7, #0]
 8005fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	db0a      	blt.n	8005ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	490c      	ldr	r1, [pc, #48]	; (8006014 <__NVIC_SetPriority+0x4c>)
 8005fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe6:	0112      	lsls	r2, r2, #4
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	440b      	add	r3, r1
 8005fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ff0:	e00a      	b.n	8006008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	4908      	ldr	r1, [pc, #32]	; (8006018 <__NVIC_SetPriority+0x50>)
 8005ff8:	79fb      	ldrb	r3, [r7, #7]
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	3b04      	subs	r3, #4
 8006000:	0112      	lsls	r2, r2, #4
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	440b      	add	r3, r1
 8006006:	761a      	strb	r2, [r3, #24]
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	e000e100 	.word	0xe000e100
 8006018:	e000ed00 	.word	0xe000ed00

0800601c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800601c:	b480      	push	{r7}
 800601e:	b089      	sub	sp, #36	; 0x24
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	f1c3 0307 	rsb	r3, r3, #7
 8006036:	2b04      	cmp	r3, #4
 8006038:	bf28      	it	cs
 800603a:	2304      	movcs	r3, #4
 800603c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	3304      	adds	r3, #4
 8006042:	2b06      	cmp	r3, #6
 8006044:	d902      	bls.n	800604c <NVIC_EncodePriority+0x30>
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	3b03      	subs	r3, #3
 800604a:	e000      	b.n	800604e <NVIC_EncodePriority+0x32>
 800604c:	2300      	movs	r3, #0
 800604e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006050:	f04f 32ff 	mov.w	r2, #4294967295
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	43da      	mvns	r2, r3
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	401a      	ands	r2, r3
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006064:	f04f 31ff 	mov.w	r1, #4294967295
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	fa01 f303 	lsl.w	r3, r1, r3
 800606e:	43d9      	mvns	r1, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006074:	4313      	orrs	r3, r2
         );
}
 8006076:	4618      	mov	r0, r3
 8006078:	3724      	adds	r7, #36	; 0x24
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
	...

08006084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	3b01      	subs	r3, #1
 8006090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006094:	d301      	bcc.n	800609a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006096:	2301      	movs	r3, #1
 8006098:	e00f      	b.n	80060ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800609a:	4a0a      	ldr	r2, [pc, #40]	; (80060c4 <SysTick_Config+0x40>)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3b01      	subs	r3, #1
 80060a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060a2:	210f      	movs	r1, #15
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295
 80060a8:	f7ff ff8e 	bl	8005fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <SysTick_Config+0x40>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060b2:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <SysTick_Config+0x40>)
 80060b4:	2207      	movs	r2, #7
 80060b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	e000e010 	.word	0xe000e010

080060c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff fec5 	bl	8005e60 <__NVIC_SetPriorityGrouping>
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060de:	b580      	push	{r7, lr}
 80060e0:	b086      	sub	sp, #24
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	4603      	mov	r3, r0
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	607a      	str	r2, [r7, #4]
 80060ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060f0:	f7ff feda 	bl	8005ea8 <__NVIC_GetPriorityGrouping>
 80060f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	6978      	ldr	r0, [r7, #20]
 80060fc:	f7ff ff8e 	bl	800601c <NVIC_EncodePriority>
 8006100:	4602      	mov	r2, r0
 8006102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006106:	4611      	mov	r1, r2
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff ff5d 	bl	8005fc8 <__NVIC_SetPriority>
}
 800610e:	bf00      	nop
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	4603      	mov	r3, r0
 800611e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff fecd 	bl	8005ec4 <__NVIC_EnableIRQ>
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	4603      	mov	r3, r0
 800613a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800613c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fedd 	bl	8005f00 <__NVIC_DisableIRQ>
}
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff ff94 	bl	8006084 <SysTick_Config>
 800615c:	4603      	mov	r3, r0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	4603      	mov	r3, r0
 800616e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8006170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff fee7 	bl	8005f48 <__NVIC_GetPendingIRQ>
 800617a:	4603      	mov	r3, r0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	4603      	mov	r3, r0
 800618c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800618e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff fefa 	bl	8005f8c <__NVIC_ClearPendingIRQ>
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80061ac:	f7ff fe28 	bl	8005e00 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e099      	b.n	80062f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0201 	bic.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061dc:	e00f      	b.n	80061fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061de:	f7ff fe0f 	bl	8005e00 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b05      	cmp	r3, #5
 80061ea:	d908      	bls.n	80061fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2203      	movs	r2, #3
 80061f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e078      	b.n	80062f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e8      	bne.n	80061de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	4b38      	ldr	r3, [pc, #224]	; (80062f8 <HAL_DMA_Init+0x158>)
 8006218:	4013      	ands	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800622a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006236:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006242:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	2b04      	cmp	r3, #4
 8006256:	d107      	bne.n	8006268 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006260:	4313      	orrs	r3, r2
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f023 0307 	bic.w	r3, r3, #7
 800627e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	2b04      	cmp	r3, #4
 8006290:	d117      	bne.n	80062c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00e      	beq.n	80062c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fb0f 	bl	80068c8 <DMA_CheckFifoParam>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2240      	movs	r2, #64	; 0x40
 80062b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80062be:	2301      	movs	r3, #1
 80062c0:	e016      	b.n	80062f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fac6 	bl	800685c <DMA_CalcBaseAndBitshift>
 80062d0:	4603      	mov	r3, r0
 80062d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d8:	223f      	movs	r2, #63	; 0x3f
 80062da:	409a      	lsls	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	f010803f 	.word	0xf010803f

080062fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006312:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800631a:	2b01      	cmp	r3, #1
 800631c:	d101      	bne.n	8006322 <HAL_DMA_Start_IT+0x26>
 800631e:	2302      	movs	r3, #2
 8006320:	e040      	b.n	80063a4 <HAL_DMA_Start_IT+0xa8>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b01      	cmp	r3, #1
 8006334:	d12f      	bne.n	8006396 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2202      	movs	r2, #2
 800633a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 fa58 	bl	8006800 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006354:	223f      	movs	r2, #63	; 0x3f
 8006356:	409a      	lsls	r2, r3
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0216 	orr.w	r2, r2, #22
 800636a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0208 	orr.w	r2, r2, #8
 8006382:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	e005      	b.n	80063a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800639e:	2302      	movs	r3, #2
 80063a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80063ba:	f7ff fd21 	bl	8005e00 <HAL_GetTick>
 80063be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d008      	beq.n	80063de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2280      	movs	r2, #128	; 0x80
 80063d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e052      	b.n	8006484 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0216 	bic.w	r2, r2, #22
 80063ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695a      	ldr	r2, [r3, #20]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	d103      	bne.n	800640e <HAL_DMA_Abort+0x62>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800640a:	2b00      	cmp	r3, #0
 800640c:	d007      	beq.n	800641e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0208 	bic.w	r2, r2, #8
 800641c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0201 	bic.w	r2, r2, #1
 800642c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800642e:	e013      	b.n	8006458 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006430:	f7ff fce6 	bl	8005e00 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b05      	cmp	r3, #5
 800643c:	d90c      	bls.n	8006458 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2203      	movs	r2, #3
 8006448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e015      	b.n	8006484 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e4      	bne.n	8006430 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646a:	223f      	movs	r2, #63	; 0x3f
 800646c:	409a      	lsls	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d004      	beq.n	80064aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2280      	movs	r2, #128	; 0x80
 80064a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e00c      	b.n	80064c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2205      	movs	r2, #5
 80064ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0201 	bic.w	r2, r2, #1
 80064c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80064dc:	4b92      	ldr	r3, [pc, #584]	; (8006728 <HAL_DMA_IRQHandler+0x258>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a92      	ldr	r2, [pc, #584]	; (800672c <HAL_DMA_IRQHandler+0x25c>)
 80064e2:	fba2 2303 	umull	r2, r3, r2, r3
 80064e6:	0a9b      	lsrs	r3, r3, #10
 80064e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fa:	2208      	movs	r2, #8
 80064fc:	409a      	lsls	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4013      	ands	r3, r2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d01a      	beq.n	800653c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d013      	beq.n	800653c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0204 	bic.w	r2, r2, #4
 8006522:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006528:	2208      	movs	r2, #8
 800652a:	409a      	lsls	r2, r3
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006534:	f043 0201 	orr.w	r2, r3, #1
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006540:	2201      	movs	r2, #1
 8006542:	409a      	lsls	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4013      	ands	r3, r2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d012      	beq.n	8006572 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655e:	2201      	movs	r2, #1
 8006560:	409a      	lsls	r2, r3
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656a:	f043 0202 	orr.w	r2, r3, #2
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006576:	2204      	movs	r2, #4
 8006578:	409a      	lsls	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4013      	ands	r3, r2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d012      	beq.n	80065a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00b      	beq.n	80065a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006594:	2204      	movs	r2, #4
 8006596:	409a      	lsls	r2, r3
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a0:	f043 0204 	orr.w	r2, r3, #4
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ac:	2210      	movs	r2, #16
 80065ae:	409a      	lsls	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d043      	beq.n	8006640 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d03c      	beq.n	8006640 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ca:	2210      	movs	r2, #16
 80065cc:	409a      	lsls	r2, r3
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d018      	beq.n	8006612 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d108      	bne.n	8006600 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d024      	beq.n	8006640 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
 80065fe:	e01f      	b.n	8006640 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01b      	beq.n	8006640 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	4798      	blx	r3
 8006610:	e016      	b.n	8006640 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661c:	2b00      	cmp	r3, #0
 800661e:	d107      	bne.n	8006630 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0208 	bic.w	r2, r2, #8
 800662e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006644:	2220      	movs	r2, #32
 8006646:	409a      	lsls	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 808e 	beq.w	800676e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0310 	and.w	r3, r3, #16
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8086 	beq.w	800676e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006666:	2220      	movs	r2, #32
 8006668:	409a      	lsls	r2, r3
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b05      	cmp	r3, #5
 8006678:	d136      	bne.n	80066e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0216 	bic.w	r2, r2, #22
 8006688:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	695a      	ldr	r2, [r3, #20]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006698:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d103      	bne.n	80066aa <HAL_DMA_IRQHandler+0x1da>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d007      	beq.n	80066ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0208 	bic.w	r2, r2, #8
 80066b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066be:	223f      	movs	r2, #63	; 0x3f
 80066c0:	409a      	lsls	r2, r3
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d07d      	beq.n	80067da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	4798      	blx	r3
        }
        return;
 80066e6:	e078      	b.n	80067da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d01c      	beq.n	8006730 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d108      	bne.n	8006716 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006708:	2b00      	cmp	r3, #0
 800670a:	d030      	beq.n	800676e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	4798      	blx	r3
 8006714:	e02b      	b.n	800676e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671a:	2b00      	cmp	r3, #0
 800671c:	d027      	beq.n	800676e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	4798      	blx	r3
 8006726:	e022      	b.n	800676e <HAL_DMA_IRQHandler+0x29e>
 8006728:	20000034 	.word	0x20000034
 800672c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10f      	bne.n	800675e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0210 	bic.w	r2, r2, #16
 800674c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006772:	2b00      	cmp	r3, #0
 8006774:	d032      	beq.n	80067dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d022      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2205      	movs	r2, #5
 8006786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0201 	bic.w	r2, r2, #1
 8006798:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	3301      	adds	r3, #1
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d307      	bcc.n	80067b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1f2      	bne.n	800679a <HAL_DMA_IRQHandler+0x2ca>
 80067b4:	e000      	b.n	80067b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80067b6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4798      	blx	r3
 80067d8:	e000      	b.n	80067dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80067da:	bf00      	nop
    }
  }
}
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop

080067e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067f2:	b2db      	uxtb	r3, r3
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800681c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	2b40      	cmp	r3, #64	; 0x40
 800682c:	d108      	bne.n	8006840 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800683e:	e007      	b.n	8006850 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	60da      	str	r2, [r3, #12]
}
 8006850:	bf00      	nop
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	b2db      	uxtb	r3, r3
 800686a:	3b10      	subs	r3, #16
 800686c:	4a14      	ldr	r2, [pc, #80]	; (80068c0 <DMA_CalcBaseAndBitshift+0x64>)
 800686e:	fba2 2303 	umull	r2, r3, r2, r3
 8006872:	091b      	lsrs	r3, r3, #4
 8006874:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006876:	4a13      	ldr	r2, [pc, #76]	; (80068c4 <DMA_CalcBaseAndBitshift+0x68>)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b03      	cmp	r3, #3
 8006888:	d909      	bls.n	800689e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006892:	f023 0303 	bic.w	r3, r3, #3
 8006896:	1d1a      	adds	r2, r3, #4
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	659a      	str	r2, [r3, #88]	; 0x58
 800689c:	e007      	b.n	80068ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80068a6:	f023 0303 	bic.w	r3, r3, #3
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	aaaaaaab 	.word	0xaaaaaaab
 80068c4:	08023f04 	.word	0x08023f04

080068c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d11f      	bne.n	8006922 <DMA_CheckFifoParam+0x5a>
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d856      	bhi.n	8006996 <DMA_CheckFifoParam+0xce>
 80068e8:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <DMA_CheckFifoParam+0x28>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	08006901 	.word	0x08006901
 80068f4:	08006913 	.word	0x08006913
 80068f8:	08006901 	.word	0x08006901
 80068fc:	08006997 	.word	0x08006997
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d046      	beq.n	800699a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006910:	e043      	b.n	800699a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800691a:	d140      	bne.n	800699e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006920:	e03d      	b.n	800699e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692a:	d121      	bne.n	8006970 <DMA_CheckFifoParam+0xa8>
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b03      	cmp	r3, #3
 8006930:	d837      	bhi.n	80069a2 <DMA_CheckFifoParam+0xda>
 8006932:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <DMA_CheckFifoParam+0x70>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	08006949 	.word	0x08006949
 800693c:	0800694f 	.word	0x0800694f
 8006940:	08006949 	.word	0x08006949
 8006944:	08006961 	.word	0x08006961
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
      break;
 800694c:	e030      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d025      	beq.n	80069a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800695e:	e022      	b.n	80069a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006968:	d11f      	bne.n	80069aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800696e:	e01c      	b.n	80069aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b02      	cmp	r3, #2
 8006974:	d903      	bls.n	800697e <DMA_CheckFifoParam+0xb6>
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b03      	cmp	r3, #3
 800697a:	d003      	beq.n	8006984 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800697c:	e018      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	73fb      	strb	r3, [r7, #15]
      break;
 8006982:	e015      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00e      	beq.n	80069ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
      break;
 8006994:	e00b      	b.n	80069ae <DMA_CheckFifoParam+0xe6>
      break;
 8006996:	bf00      	nop
 8006998:	e00a      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
      break;
 800699a:	bf00      	nop
 800699c:	e008      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
      break;
 800699e:	bf00      	nop
 80069a0:	e006      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
      break;
 80069a2:	bf00      	nop
 80069a4:	e004      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
      break;
 80069a6:	bf00      	nop
 80069a8:	e002      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80069aa:	bf00      	nop
 80069ac:	e000      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
      break;
 80069ae:	bf00      	nop
    }
  } 
  
  return status; 
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop

080069c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b089      	sub	sp, #36	; 0x24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069d6:	2300      	movs	r3, #0
 80069d8:	61fb      	str	r3, [r7, #28]
 80069da:	e159      	b.n	8006c90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069dc:	2201      	movs	r2, #1
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4013      	ands	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	f040 8148 	bne.w	8006c8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d005      	beq.n	8006a12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d130      	bne.n	8006a74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	2203      	movs	r2, #3
 8006a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a22:	43db      	mvns	r3, r3
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	4013      	ands	r3, r2
 8006a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a48:	2201      	movs	r2, #1
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a50:	43db      	mvns	r3, r3
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	4013      	ands	r3, r2
 8006a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	091b      	lsrs	r3, r3, #4
 8006a5e:	f003 0201 	and.w	r2, r3, #1
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	fa02 f303 	lsl.w	r3, r2, r3
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f003 0303 	and.w	r3, r3, #3
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d017      	beq.n	8006ab0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	43db      	mvns	r3, r3
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	4013      	ands	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d123      	bne.n	8006b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	08da      	lsrs	r2, r3, #3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	3208      	adds	r2, #8
 8006ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	220f      	movs	r2, #15
 8006ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	4013      	ands	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	fa02 f303 	lsl.w	r3, r2, r3
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	08da      	lsrs	r2, r3, #3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3208      	adds	r2, #8
 8006afe:	69b9      	ldr	r1, [r7, #24]
 8006b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	2203      	movs	r2, #3
 8006b10:	fa02 f303 	lsl.w	r3, r2, r3
 8006b14:	43db      	mvns	r3, r3
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f003 0203 	and.w	r2, r3, #3
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 80a2 	beq.w	8006c8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	4b57      	ldr	r3, [pc, #348]	; (8006ca8 <HAL_GPIO_Init+0x2e8>)
 8006b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4e:	4a56      	ldr	r2, [pc, #344]	; (8006ca8 <HAL_GPIO_Init+0x2e8>)
 8006b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b54:	6453      	str	r3, [r2, #68]	; 0x44
 8006b56:	4b54      	ldr	r3, [pc, #336]	; (8006ca8 <HAL_GPIO_Init+0x2e8>)
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b62:	4a52      	ldr	r2, [pc, #328]	; (8006cac <HAL_GPIO_Init+0x2ec>)
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	089b      	lsrs	r3, r3, #2
 8006b68:	3302      	adds	r3, #2
 8006b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	220f      	movs	r2, #15
 8006b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7e:	43db      	mvns	r3, r3
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	4013      	ands	r3, r2
 8006b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a49      	ldr	r2, [pc, #292]	; (8006cb0 <HAL_GPIO_Init+0x2f0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d019      	beq.n	8006bc2 <HAL_GPIO_Init+0x202>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a48      	ldr	r2, [pc, #288]	; (8006cb4 <HAL_GPIO_Init+0x2f4>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <HAL_GPIO_Init+0x1fe>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a47      	ldr	r2, [pc, #284]	; (8006cb8 <HAL_GPIO_Init+0x2f8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00d      	beq.n	8006bba <HAL_GPIO_Init+0x1fa>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a46      	ldr	r2, [pc, #280]	; (8006cbc <HAL_GPIO_Init+0x2fc>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d007      	beq.n	8006bb6 <HAL_GPIO_Init+0x1f6>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a45      	ldr	r2, [pc, #276]	; (8006cc0 <HAL_GPIO_Init+0x300>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d101      	bne.n	8006bb2 <HAL_GPIO_Init+0x1f2>
 8006bae:	2304      	movs	r3, #4
 8006bb0:	e008      	b.n	8006bc4 <HAL_GPIO_Init+0x204>
 8006bb2:	2307      	movs	r3, #7
 8006bb4:	e006      	b.n	8006bc4 <HAL_GPIO_Init+0x204>
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e004      	b.n	8006bc4 <HAL_GPIO_Init+0x204>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e002      	b.n	8006bc4 <HAL_GPIO_Init+0x204>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <HAL_GPIO_Init+0x204>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	69fa      	ldr	r2, [r7, #28]
 8006bc6:	f002 0203 	and.w	r2, r2, #3
 8006bca:	0092      	lsls	r2, r2, #2
 8006bcc:	4093      	lsls	r3, r2
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bd4:	4935      	ldr	r1, [pc, #212]	; (8006cac <HAL_GPIO_Init+0x2ec>)
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	089b      	lsrs	r3, r3, #2
 8006bda:	3302      	adds	r3, #2
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006be2:	4b38      	ldr	r3, [pc, #224]	; (8006cc4 <HAL_GPIO_Init+0x304>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	43db      	mvns	r3, r3
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c06:	4a2f      	ldr	r2, [pc, #188]	; (8006cc4 <HAL_GPIO_Init+0x304>)
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006c0c:	4b2d      	ldr	r3, [pc, #180]	; (8006cc4 <HAL_GPIO_Init+0x304>)
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	43db      	mvns	r3, r3
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c30:	4a24      	ldr	r2, [pc, #144]	; (8006cc4 <HAL_GPIO_Init+0x304>)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c36:	4b23      	ldr	r3, [pc, #140]	; (8006cc4 <HAL_GPIO_Init+0x304>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	43db      	mvns	r3, r3
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	4013      	ands	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c5a:	4a1a      	ldr	r2, [pc, #104]	; (8006cc4 <HAL_GPIO_Init+0x304>)
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c60:	4b18      	ldr	r3, [pc, #96]	; (8006cc4 <HAL_GPIO_Init+0x304>)
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c84:	4a0f      	ldr	r2, [pc, #60]	; (8006cc4 <HAL_GPIO_Init+0x304>)
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	2b0f      	cmp	r3, #15
 8006c94:	f67f aea2 	bls.w	80069dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	3724      	adds	r7, #36	; 0x24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	40013800 	.word	0x40013800
 8006cb0:	40020000 	.word	0x40020000
 8006cb4:	40020400 	.word	0x40020400
 8006cb8:	40020800 	.word	0x40020800
 8006cbc:	40020c00 	.word	0x40020c00
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	40013c00 	.word	0x40013c00

08006cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	887b      	ldrh	r3, [r7, #2]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
 8006ce4:	e001      	b.n	8006cea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	807b      	strh	r3, [r7, #2]
 8006d04:	4613      	mov	r3, r2
 8006d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d08:	787b      	ldrb	r3, [r7, #1]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d0e:	887a      	ldrh	r2, [r7, #2]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d14:	e003      	b.n	8006d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d16:	887b      	ldrh	r3, [r7, #2]
 8006d18:	041a      	lsls	r2, r3, #16
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	619a      	str	r2, [r3, #24]
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006d3c:	887a      	ldrh	r2, [r7, #2]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4013      	ands	r3, r2
 8006d42:	041a      	lsls	r2, r3, #16
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	43d9      	mvns	r1, r3
 8006d48:	887b      	ldrh	r3, [r7, #2]
 8006d4a:	400b      	ands	r3, r1
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	619a      	str	r2, [r3, #24]
}
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
	...

08006d60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006d6a:	4b08      	ldr	r3, [pc, #32]	; (8006d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d6c:	695a      	ldr	r2, [r3, #20]
 8006d6e:	88fb      	ldrh	r3, [r7, #6]
 8006d70:	4013      	ands	r3, r2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d006      	beq.n	8006d84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d76:	4a05      	ldr	r2, [pc, #20]	; (8006d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d78:	88fb      	ldrh	r3, [r7, #6]
 8006d7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d7c:	88fb      	ldrh	r3, [r7, #6]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fd f812 	bl	8003da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40013c00 	.word	0x40013c00

08006d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e12b      	b.n	8006ffa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fc fe90 	bl	8003adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2224      	movs	r2, #36	; 0x24
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0201 	bic.w	r2, r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006de2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006df2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006df4:	f003 f852 	bl	8009e9c <HAL_RCC_GetPCLK1Freq>
 8006df8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	4a81      	ldr	r2, [pc, #516]	; (8007004 <HAL_I2C_Init+0x274>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d807      	bhi.n	8006e14 <HAL_I2C_Init+0x84>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4a80      	ldr	r2, [pc, #512]	; (8007008 <HAL_I2C_Init+0x278>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	bf94      	ite	ls
 8006e0c:	2301      	movls	r3, #1
 8006e0e:	2300      	movhi	r3, #0
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	e006      	b.n	8006e22 <HAL_I2C_Init+0x92>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4a7d      	ldr	r2, [pc, #500]	; (800700c <HAL_I2C_Init+0x27c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	bf94      	ite	ls
 8006e1c:	2301      	movls	r3, #1
 8006e1e:	2300      	movhi	r3, #0
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e0e7      	b.n	8006ffa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4a78      	ldr	r2, [pc, #480]	; (8007010 <HAL_I2C_Init+0x280>)
 8006e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e32:	0c9b      	lsrs	r3, r3, #18
 8006e34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	4a6a      	ldr	r2, [pc, #424]	; (8007004 <HAL_I2C_Init+0x274>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d802      	bhi.n	8006e64 <HAL_I2C_Init+0xd4>
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	3301      	adds	r3, #1
 8006e62:	e009      	b.n	8006e78 <HAL_I2C_Init+0xe8>
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	4a69      	ldr	r2, [pc, #420]	; (8007014 <HAL_I2C_Init+0x284>)
 8006e70:	fba2 2303 	umull	r2, r3, r2, r3
 8006e74:	099b      	lsrs	r3, r3, #6
 8006e76:	3301      	adds	r3, #1
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6812      	ldr	r2, [r2, #0]
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006e8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	495c      	ldr	r1, [pc, #368]	; (8007004 <HAL_I2C_Init+0x274>)
 8006e94:	428b      	cmp	r3, r1
 8006e96:	d819      	bhi.n	8006ecc <HAL_I2C_Init+0x13c>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	1e59      	subs	r1, r3, #1
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ea6:	1c59      	adds	r1, r3, #1
 8006ea8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006eac:	400b      	ands	r3, r1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <HAL_I2C_Init+0x138>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	1e59      	subs	r1, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ec6:	e051      	b.n	8006f6c <HAL_I2C_Init+0x1dc>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	e04f      	b.n	8006f6c <HAL_I2C_Init+0x1dc>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d111      	bne.n	8006ef8 <HAL_I2C_Init+0x168>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	1e58      	subs	r0, r3, #1
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6859      	ldr	r1, [r3, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	440b      	add	r3, r1
 8006ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bf0c      	ite	eq
 8006ef0:	2301      	moveq	r3, #1
 8006ef2:	2300      	movne	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	e012      	b.n	8006f1e <HAL_I2C_Init+0x18e>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	1e58      	subs	r0, r3, #1
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6859      	ldr	r1, [r3, #4]
 8006f00:	460b      	mov	r3, r1
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	0099      	lsls	r1, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f0e:	3301      	adds	r3, #1
 8006f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bf0c      	ite	eq
 8006f18:	2301      	moveq	r3, #1
 8006f1a:	2300      	movne	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <HAL_I2C_Init+0x196>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e022      	b.n	8006f6c <HAL_I2C_Init+0x1dc>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10e      	bne.n	8006f4c <HAL_I2C_Init+0x1bc>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1e58      	subs	r0, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6859      	ldr	r1, [r3, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	440b      	add	r3, r1
 8006f3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f40:	3301      	adds	r3, #1
 8006f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f4a:	e00f      	b.n	8006f6c <HAL_I2C_Init+0x1dc>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	1e58      	subs	r0, r3, #1
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6859      	ldr	r1, [r3, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	0099      	lsls	r1, r3, #2
 8006f5c:	440b      	add	r3, r1
 8006f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f62:	3301      	adds	r3, #1
 8006f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	6809      	ldr	r1, [r1, #0]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69da      	ldr	r2, [r3, #28]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	6911      	ldr	r1, [r2, #16]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	68d2      	ldr	r2, [r2, #12]
 8006fa6:	4311      	orrs	r1, r2
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6812      	ldr	r2, [r2, #0]
 8006fac:	430b      	orrs	r3, r1
 8006fae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695a      	ldr	r2, [r3, #20]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0201 	orr.w	r2, r2, #1
 8006fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	000186a0 	.word	0x000186a0
 8007008:	001e847f 	.word	0x001e847f
 800700c:	003d08ff 	.word	0x003d08ff
 8007010:	431bde83 	.word	0x431bde83
 8007014:	10624dd3 	.word	0x10624dd3

08007018 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af02      	add	r7, sp, #8
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	607a      	str	r2, [r7, #4]
 8007022:	461a      	mov	r2, r3
 8007024:	460b      	mov	r3, r1
 8007026:	817b      	strh	r3, [r7, #10]
 8007028:	4613      	mov	r3, r2
 800702a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800702c:	f7fe fee8 	bl	8005e00 <HAL_GetTick>
 8007030:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b20      	cmp	r3, #32
 800703c:	f040 80e0 	bne.w	8007200 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	2319      	movs	r3, #25
 8007046:	2201      	movs	r2, #1
 8007048:	4970      	ldr	r1, [pc, #448]	; (800720c <HAL_I2C_Master_Transmit+0x1f4>)
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f002 f8dc 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007056:	2302      	movs	r3, #2
 8007058:	e0d3      	b.n	8007202 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007060:	2b01      	cmp	r3, #1
 8007062:	d101      	bne.n	8007068 <HAL_I2C_Master_Transmit+0x50>
 8007064:	2302      	movs	r3, #2
 8007066:	e0cc      	b.n	8007202 <HAL_I2C_Master_Transmit+0x1ea>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b01      	cmp	r3, #1
 800707c:	d007      	beq.n	800708e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f042 0201 	orr.w	r2, r2, #1
 800708c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800709c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2221      	movs	r2, #33	; 0x21
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2210      	movs	r2, #16
 80070aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	893a      	ldrh	r2, [r7, #8]
 80070be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4a50      	ldr	r2, [pc, #320]	; (8007210 <HAL_I2C_Master_Transmit+0x1f8>)
 80070ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80070d0:	8979      	ldrh	r1, [r7, #10]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	6a3a      	ldr	r2, [r7, #32]
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f001 fe9e 	bl	8008e18 <I2C_MasterRequestWrite>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e08d      	b.n	8007202 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070e6:	2300      	movs	r3, #0
 80070e8:	613b      	str	r3, [r7, #16]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80070fc:	e066      	b.n	80071cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	6a39      	ldr	r1, [r7, #32]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f002 f956 	bl	80093b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00d      	beq.n	800712a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	2b04      	cmp	r3, #4
 8007114:	d107      	bne.n	8007126 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007124:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e06b      	b.n	8007202 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	781a      	ldrb	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007144:	b29b      	uxth	r3, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b04      	cmp	r3, #4
 8007166:	d11b      	bne.n	80071a0 <HAL_I2C_Master_Transmit+0x188>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800716c:	2b00      	cmp	r3, #0
 800716e:	d017      	beq.n	80071a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007198:	3b01      	subs	r3, #1
 800719a:	b29a      	uxth	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	6a39      	ldr	r1, [r7, #32]
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f002 f946 	bl	8009436 <I2C_WaitOnBTFFlagUntilTimeout>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00d      	beq.n	80071cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b4:	2b04      	cmp	r3, #4
 80071b6:	d107      	bne.n	80071c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e01a      	b.n	8007202 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d194      	bne.n	80070fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	e000      	b.n	8007202 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007200:	2302      	movs	r3, #2
  }
}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	00100002 	.word	0x00100002
 8007210:	ffff0000 	.word	0xffff0000

08007214 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08c      	sub	sp, #48	; 0x30
 8007218:	af02      	add	r7, sp, #8
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	607a      	str	r2, [r7, #4]
 800721e:	461a      	mov	r2, r3
 8007220:	460b      	mov	r3, r1
 8007222:	817b      	strh	r3, [r7, #10]
 8007224:	4613      	mov	r3, r2
 8007226:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007228:	f7fe fdea 	bl	8005e00 <HAL_GetTick>
 800722c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b20      	cmp	r3, #32
 8007238:	f040 820b 	bne.w	8007652 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	2319      	movs	r3, #25
 8007242:	2201      	movs	r2, #1
 8007244:	497c      	ldr	r1, [pc, #496]	; (8007438 <HAL_I2C_Master_Receive+0x224>)
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f001 ffde 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007252:	2302      	movs	r3, #2
 8007254:	e1fe      	b.n	8007654 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800725c:	2b01      	cmp	r3, #1
 800725e:	d101      	bne.n	8007264 <HAL_I2C_Master_Receive+0x50>
 8007260:	2302      	movs	r3, #2
 8007262:	e1f7      	b.n	8007654 <HAL_I2C_Master_Receive+0x440>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b01      	cmp	r3, #1
 8007278:	d007      	beq.n	800728a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0201 	orr.w	r2, r2, #1
 8007288:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007298:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2222      	movs	r2, #34	; 0x22
 800729e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2210      	movs	r2, #16
 80072a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	893a      	ldrh	r2, [r7, #8]
 80072ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4a5c      	ldr	r2, [pc, #368]	; (800743c <HAL_I2C_Master_Receive+0x228>)
 80072ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80072cc:	8979      	ldrh	r1, [r7, #10]
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f001 fe22 	bl	8008f1c <I2C_MasterRequestRead>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e1b8      	b.n	8007654 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d113      	bne.n	8007312 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ea:	2300      	movs	r3, #0
 80072ec:	623b      	str	r3, [r7, #32]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	623b      	str	r3, [r7, #32]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	623b      	str	r3, [r7, #32]
 80072fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	e18c      	b.n	800762c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007316:	2b01      	cmp	r3, #1
 8007318:	d11b      	bne.n	8007352 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800732a:	2300      	movs	r3, #0
 800732c:	61fb      	str	r3, [r7, #28]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	61fb      	str	r3, [r7, #28]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	61fb      	str	r3, [r7, #28]
 800733e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	e16c      	b.n	800762c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007356:	2b02      	cmp	r3, #2
 8007358:	d11b      	bne.n	8007392 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007368:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007378:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800737a:	2300      	movs	r3, #0
 800737c:	61bb      	str	r3, [r7, #24]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	e14c      	b.n	800762c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80073b8:	e138      	b.n	800762c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073be:	2b03      	cmp	r3, #3
 80073c0:	f200 80f1 	bhi.w	80075a6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d123      	bne.n	8007414 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f002 f8a3 	bl	800951c <I2C_WaitOnRXNEFlagUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e139      	b.n	8007654 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691a      	ldr	r2, [r3, #16]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	1c5a      	adds	r2, r3, #1
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007408:	b29b      	uxth	r3, r3
 800740a:	3b01      	subs	r3, #1
 800740c:	b29a      	uxth	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007412:	e10b      	b.n	800762c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007418:	2b02      	cmp	r3, #2
 800741a:	d14e      	bne.n	80074ba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	2200      	movs	r2, #0
 8007424:	4906      	ldr	r1, [pc, #24]	; (8007440 <HAL_I2C_Master_Receive+0x22c>)
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f001 feee 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d008      	beq.n	8007444 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e10e      	b.n	8007654 <HAL_I2C_Master_Receive+0x440>
 8007436:	bf00      	nop
 8007438:	00100002 	.word	0x00100002
 800743c:	ffff0000 	.word	0xffff0000
 8007440:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691a      	ldr	r2, [r3, #16]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800747c:	b29b      	uxth	r3, r3
 800747e:	3b01      	subs	r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691a      	ldr	r2, [r3, #16]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a2:	3b01      	subs	r3, #1
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	3b01      	subs	r3, #1
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074b8:	e0b8      	b.n	800762c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	2200      	movs	r2, #0
 80074c2:	4966      	ldr	r1, [pc, #408]	; (800765c <HAL_I2C_Master_Receive+0x448>)
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f001 fe9f 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0bf      	b.n	8007654 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	691a      	ldr	r2, [r3, #16]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007500:	3b01      	subs	r3, #1
 8007502:	b29a      	uxth	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750c:	b29b      	uxth	r3, r3
 800750e:	3b01      	subs	r3, #1
 8007510:	b29a      	uxth	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	2200      	movs	r2, #0
 800751e:	494f      	ldr	r1, [pc, #316]	; (800765c <HAL_I2C_Master_Receive+0x448>)
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f001 fe71 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e091      	b.n	8007654 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800753e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755c:	3b01      	subs	r3, #1
 800755e:	b29a      	uxth	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007568:	b29b      	uxth	r3, r3
 800756a:	3b01      	subs	r3, #1
 800756c:	b29a      	uxth	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800758e:	3b01      	subs	r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800759a:	b29b      	uxth	r3, r3
 800759c:	3b01      	subs	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075a4:	e042      	b.n	800762c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f001 ffb6 	bl	800951c <I2C_WaitOnRXNEFlagUntilTimeout>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e04c      	b.n	8007654 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	691a      	ldr	r2, [r3, #16]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d6:	3b01      	subs	r3, #1
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d118      	bne.n	800762c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	b2d2      	uxtb	r2, r2
 8007606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007616:	3b01      	subs	r3, #1
 8007618:	b29a      	uxth	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007622:	b29b      	uxth	r3, r3
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007630:	2b00      	cmp	r3, #0
 8007632:	f47f aec2 	bne.w	80073ba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2220      	movs	r2, #32
 800763a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	e000      	b.n	8007654 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007652:	2302      	movs	r3, #2
  }
}
 8007654:	4618      	mov	r0, r3
 8007656:	3728      	adds	r7, #40	; 0x28
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	00010004 	.word	0x00010004

08007660 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007680:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007688:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800768a:	7bfb      	ldrb	r3, [r7, #15]
 800768c:	2b10      	cmp	r3, #16
 800768e:	d003      	beq.n	8007698 <HAL_I2C_EV_IRQHandler+0x38>
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	2b40      	cmp	r3, #64	; 0x40
 8007694:	f040 80c1 	bne.w	800781a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10d      	bne.n	80076ce <HAL_I2C_EV_IRQHandler+0x6e>
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80076b8:	d003      	beq.n	80076c2 <HAL_I2C_EV_IRQHandler+0x62>
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80076c0:	d101      	bne.n	80076c6 <HAL_I2C_EV_IRQHandler+0x66>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e000      	b.n	80076c8 <HAL_I2C_EV_IRQHandler+0x68>
 80076c6:	2300      	movs	r3, #0
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	f000 8132 	beq.w	8007932 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00c      	beq.n	80076f2 <HAL_I2C_EV_IRQHandler+0x92>
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	0a5b      	lsrs	r3, r3, #9
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d006      	beq.n	80076f2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 ff9e 	bl	8009626 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fd79 	bl	80081e2 <I2C_Master_SB>
 80076f0:	e092      	b.n	8007818 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	08db      	lsrs	r3, r3, #3
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <HAL_I2C_EV_IRQHandler+0xb2>
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	0a5b      	lsrs	r3, r3, #9
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fdef 	bl	80082ee <I2C_Master_ADD10>
 8007710:	e082      	b.n	8007818 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	085b      	lsrs	r3, r3, #1
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d009      	beq.n	8007732 <HAL_I2C_EV_IRQHandler+0xd2>
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	0a5b      	lsrs	r3, r3, #9
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fe09 	bl	8008342 <I2C_Master_ADDR>
 8007730:	e072      	b.n	8007818 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	089b      	lsrs	r3, r3, #2
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d03b      	beq.n	80077b6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800774c:	f000 80f3 	beq.w	8007936 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	09db      	lsrs	r3, r3, #7
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00f      	beq.n	800777c <HAL_I2C_EV_IRQHandler+0x11c>
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	0a9b      	lsrs	r3, r3, #10
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d009      	beq.n	800777c <HAL_I2C_EV_IRQHandler+0x11c>
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	089b      	lsrs	r3, r3, #2
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d103      	bne.n	800777c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f9f3 	bl	8007b60 <I2C_MasterTransmit_TXE>
 800777a:	e04d      	b.n	8007818 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	089b      	lsrs	r3, r3, #2
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80d6 	beq.w	8007936 <HAL_I2C_EV_IRQHandler+0x2d6>
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	0a5b      	lsrs	r3, r3, #9
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 80cf 	beq.w	8007936 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	2b21      	cmp	r3, #33	; 0x21
 800779c:	d103      	bne.n	80077a6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fa7a 	bl	8007c98 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077a4:	e0c7      	b.n	8007936 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
 80077a8:	2b40      	cmp	r3, #64	; 0x40
 80077aa:	f040 80c4 	bne.w	8007936 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fae8 	bl	8007d84 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077b4:	e0bf      	b.n	8007936 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077c4:	f000 80b7 	beq.w	8007936 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	099b      	lsrs	r3, r3, #6
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00f      	beq.n	80077f4 <HAL_I2C_EV_IRQHandler+0x194>
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	0a9b      	lsrs	r3, r3, #10
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d009      	beq.n	80077f4 <HAL_I2C_EV_IRQHandler+0x194>
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	089b      	lsrs	r3, r3, #2
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d103      	bne.n	80077f4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fb5d 	bl	8007eac <I2C_MasterReceive_RXNE>
 80077f2:	e011      	b.n	8007818 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	089b      	lsrs	r3, r3, #2
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 809a 	beq.w	8007936 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	0a5b      	lsrs	r3, r3, #9
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 8093 	beq.w	8007936 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fbfc 	bl	800800e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007816:	e08e      	b.n	8007936 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007818:	e08d      	b.n	8007936 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781e:	2b00      	cmp	r3, #0
 8007820:	d004      	beq.n	800782c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	61fb      	str	r3, [r7, #28]
 800782a:	e007      	b.n	800783c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	085b      	lsrs	r3, r3, #1
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d012      	beq.n	800786e <HAL_I2C_EV_IRQHandler+0x20e>
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	0a5b      	lsrs	r3, r3, #9
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00c      	beq.n	800786e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007864:	69b9      	ldr	r1, [r7, #24]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 ffba 	bl	80087e0 <I2C_Slave_ADDR>
 800786c:	e066      	b.n	800793c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	091b      	lsrs	r3, r3, #4
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d009      	beq.n	800788e <HAL_I2C_EV_IRQHandler+0x22e>
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	0a5b      	lsrs	r3, r3, #9
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fff4 	bl	8008874 <I2C_Slave_STOPF>
 800788c:	e056      	b.n	800793c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	2b21      	cmp	r3, #33	; 0x21
 8007892:	d002      	beq.n	800789a <HAL_I2C_EV_IRQHandler+0x23a>
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	2b29      	cmp	r3, #41	; 0x29
 8007898:	d125      	bne.n	80078e6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	09db      	lsrs	r3, r3, #7
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00f      	beq.n	80078c6 <HAL_I2C_EV_IRQHandler+0x266>
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	0a9b      	lsrs	r3, r3, #10
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d009      	beq.n	80078c6 <HAL_I2C_EV_IRQHandler+0x266>
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	089b      	lsrs	r3, r3, #2
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d103      	bne.n	80078c6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fed0 	bl	8008664 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078c4:	e039      	b.n	800793a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	089b      	lsrs	r3, r3, #2
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d033      	beq.n	800793a <HAL_I2C_EV_IRQHandler+0x2da>
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	0a5b      	lsrs	r3, r3, #9
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d02d      	beq.n	800793a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fefd 	bl	80086de <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078e4:	e029      	b.n	800793a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	099b      	lsrs	r3, r3, #6
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00f      	beq.n	8007912 <HAL_I2C_EV_IRQHandler+0x2b2>
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	0a9b      	lsrs	r3, r3, #10
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d009      	beq.n	8007912 <HAL_I2C_EV_IRQHandler+0x2b2>
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	089b      	lsrs	r3, r3, #2
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d103      	bne.n	8007912 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 ff08 	bl	8008720 <I2C_SlaveReceive_RXNE>
 8007910:	e014      	b.n	800793c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	089b      	lsrs	r3, r3, #2
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00e      	beq.n	800793c <HAL_I2C_EV_IRQHandler+0x2dc>
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	0a5b      	lsrs	r3, r3, #9
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d008      	beq.n	800793c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 ff36 	bl	800879c <I2C_SlaveReceive_BTF>
 8007930:	e004      	b.n	800793c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007932:	bf00      	nop
 8007934:	e002      	b.n	800793c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007936:	bf00      	nop
 8007938:	e000      	b.n	800793c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800793a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b08a      	sub	sp, #40	; 0x28
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800795a:	2300      	movs	r3, #0
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007964:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	0a1b      	lsrs	r3, r3, #8
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00e      	beq.n	8007990 <HAL_I2C_ER_IRQHandler+0x4e>
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	0a1b      	lsrs	r3, r3, #8
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d008      	beq.n	8007990 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	f043 0301 	orr.w	r3, r3, #1
 8007984:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800798e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	0a5b      	lsrs	r3, r3, #9
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00e      	beq.n	80079ba <HAL_I2C_ER_IRQHandler+0x78>
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	0a1b      	lsrs	r3, r3, #8
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d008      	beq.n	80079ba <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	f043 0302 	orr.w	r3, r3, #2
 80079ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80079b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	0a9b      	lsrs	r3, r3, #10
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d03f      	beq.n	8007a46 <HAL_I2C_ER_IRQHandler+0x104>
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	0a1b      	lsrs	r3, r3, #8
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d039      	beq.n	8007a46 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80079d2:	7efb      	ldrb	r3, [r7, #27]
 80079d4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079da:	b29b      	uxth	r3, r3
 80079dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80079ec:	7ebb      	ldrb	r3, [r7, #26]
 80079ee:	2b20      	cmp	r3, #32
 80079f0:	d112      	bne.n	8007a18 <HAL_I2C_ER_IRQHandler+0xd6>
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10f      	bne.n	8007a18 <HAL_I2C_ER_IRQHandler+0xd6>
 80079f8:	7cfb      	ldrb	r3, [r7, #19]
 80079fa:	2b21      	cmp	r3, #33	; 0x21
 80079fc:	d008      	beq.n	8007a10 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80079fe:	7cfb      	ldrb	r3, [r7, #19]
 8007a00:	2b29      	cmp	r3, #41	; 0x29
 8007a02:	d005      	beq.n	8007a10 <HAL_I2C_ER_IRQHandler+0xce>
 8007a04:	7cfb      	ldrb	r3, [r7, #19]
 8007a06:	2b28      	cmp	r3, #40	; 0x28
 8007a08:	d106      	bne.n	8007a18 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b21      	cmp	r3, #33	; 0x21
 8007a0e:	d103      	bne.n	8007a18 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 f85f 	bl	8008ad4 <I2C_Slave_AF>
 8007a16:	e016      	b.n	8007a46 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a20:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	f043 0304 	orr.w	r3, r3, #4
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007a2a:	7efb      	ldrb	r3, [r7, #27]
 8007a2c:	2b10      	cmp	r3, #16
 8007a2e:	d002      	beq.n	8007a36 <HAL_I2C_ER_IRQHandler+0xf4>
 8007a30:	7efb      	ldrb	r3, [r7, #27]
 8007a32:	2b40      	cmp	r3, #64	; 0x40
 8007a34:	d107      	bne.n	8007a46 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a44:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	0adb      	lsrs	r3, r3, #11
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00e      	beq.n	8007a70 <HAL_I2C_ER_IRQHandler+0x12e>
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	0a1b      	lsrs	r3, r3, #8
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d008      	beq.n	8007a70 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	f043 0308 	orr.w	r3, r3, #8
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007a6e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d008      	beq.n	8007a88 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f001 f896 	bl	8008bb4 <I2C_ITError>
  }
}
 8007a88:	bf00      	nop
 8007a8a:	3728      	adds	r7, #40	; 0x28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
 8007aec:	4613      	mov	r3, r2
 8007aee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d150      	bne.n	8007c28 <I2C_MasterTransmit_TXE+0xc8>
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	2b21      	cmp	r3, #33	; 0x21
 8007b8a:	d14d      	bne.n	8007c28 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d01d      	beq.n	8007bce <I2C_MasterTransmit_TXE+0x6e>
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b20      	cmp	r3, #32
 8007b96:	d01a      	beq.n	8007bce <I2C_MasterTransmit_TXE+0x6e>
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b9e:	d016      	beq.n	8007bce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2211      	movs	r2, #17
 8007bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7ff ff62 	bl	8007a90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007bcc:	e060      	b.n	8007c90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bdc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b40      	cmp	r3, #64	; 0x40
 8007c06:	d107      	bne.n	8007c18 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7ff ff7d 	bl	8007b10 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007c16:	e03b      	b.n	8007c90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7ff ff35 	bl	8007a90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007c26:	e033      	b.n	8007c90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	2b21      	cmp	r3, #33	; 0x21
 8007c2c:	d005      	beq.n	8007c3a <I2C_MasterTransmit_TXE+0xda>
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	2b40      	cmp	r3, #64	; 0x40
 8007c32:	d12d      	bne.n	8007c90 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	2b22      	cmp	r3, #34	; 0x22
 8007c38:	d12a      	bne.n	8007c90 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d108      	bne.n	8007c56 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c52:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007c54:	e01c      	b.n	8007c90 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d103      	bne.n	8007c6a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f88e 	bl	8007d84 <I2C_MemoryTransmit_TXE_BTF>
}
 8007c68:	e012      	b.n	8007c90 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	781a      	ldrb	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	1c5a      	adds	r2, r3, #1
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007c8e:	e7ff      	b.n	8007c90 <I2C_MasterTransmit_TXE+0x130>
 8007c90:	bf00      	nop
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b21      	cmp	r3, #33	; 0x21
 8007cb0:	d164      	bne.n	8007d7c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d012      	beq.n	8007ce2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	781a      	ldrb	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007ce0:	e04c      	b.n	8007d7c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d01d      	beq.n	8007d24 <I2C_MasterTransmit_BTF+0x8c>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	d01a      	beq.n	8007d24 <I2C_MasterTransmit_BTF+0x8c>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cf4:	d016      	beq.n	8007d24 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d04:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2211      	movs	r2, #17
 8007d0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff feb7 	bl	8007a90 <HAL_I2C_MasterTxCpltCallback>
}
 8007d22:	e02b      	b.n	8007d7c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685a      	ldr	r2, [r3, #4]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d32:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d42:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	d107      	bne.n	8007d6e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7ff fed2 	bl	8007b10 <HAL_I2C_MemTxCpltCallback>
}
 8007d6c:	e006      	b.n	8007d7c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7ff fe8a 	bl	8007a90 <HAL_I2C_MasterTxCpltCallback>
}
 8007d7c:	bf00      	nop
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d92:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d11d      	bne.n	8007dd8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d10b      	bne.n	8007dbc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db4:	1c9a      	adds	r2, r3, #2
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007dba:	e073      	b.n	8007ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	121b      	asrs	r3, r3, #8
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007dd6:	e065      	b.n	8007ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d10b      	bne.n	8007df8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007df6:	e055      	b.n	8007ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d151      	bne.n	8007ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	2b22      	cmp	r3, #34	; 0x22
 8007e04:	d10d      	bne.n	8007e22 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e14:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1a:	1c5a      	adds	r2, r3, #1
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007e20:	e040      	b.n	8007ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d015      	beq.n	8007e58 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	2b21      	cmp	r3, #33	; 0x21
 8007e30:	d112      	bne.n	8007e58 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	781a      	ldrb	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007e56:	e025      	b.n	8007ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d120      	bne.n	8007ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	2b21      	cmp	r3, #33	; 0x21
 8007e66:	d11d      	bne.n	8007ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e76:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7ff fe36 	bl	8007b10 <HAL_I2C_MemTxCpltCallback>
}
 8007ea4:	bf00      	nop
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b22      	cmp	r3, #34	; 0x22
 8007ebe:	f040 80a2 	bne.w	8008006 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d921      	bls.n	8007f14 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	691a      	ldr	r2, [r3, #16]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	b2d2      	uxtb	r2, r2
 8007edc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	f040 8082 	bne.w	8008006 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f10:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007f12:	e078      	b.n	8008006 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d074      	beq.n	8008006 <I2C_MasterReceive_RXNE+0x15a>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d002      	beq.n	8007f28 <I2C_MasterReceive_RXNE+0x7c>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d16e      	bne.n	8008006 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 fac5 	bl	80094b8 <I2C_WaitOnSTOPRequestThroughIT>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d142      	bne.n	8007fba <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f42:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f52:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	691a      	ldr	r2, [r3, #16]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	b2d2      	uxtb	r2, r2
 8007f60:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	3b01      	subs	r3, #1
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b40      	cmp	r3, #64	; 0x40
 8007f8c:	d10a      	bne.n	8007fa4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fdc1 	bl	8007b24 <HAL_I2C_MemRxCpltCallback>
}
 8007fa2:	e030      	b.n	8008006 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2212      	movs	r2, #18
 8007fb0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7ff fd76 	bl	8007aa4 <HAL_I2C_MasterRxCpltCallback>
}
 8007fb8:	e025      	b.n	8008006 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fc8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	691a      	ldr	r2, [r3, #16]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	b2d2      	uxtb	r2, r2
 8007fd6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff fd99 	bl	8007b38 <HAL_I2C_ErrorCallback>
}
 8008006:	bf00      	nop
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b084      	sub	sp, #16
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008020:	b29b      	uxth	r3, r3
 8008022:	2b04      	cmp	r3, #4
 8008024:	d11b      	bne.n	800805e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008034:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691a      	ldr	r2, [r3, #16]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	b2d2      	uxtb	r2, r2
 8008042:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008052:	b29b      	uxth	r3, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	b29a      	uxth	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800805c:	e0bd      	b.n	80081da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008062:	b29b      	uxth	r3, r3
 8008064:	2b03      	cmp	r3, #3
 8008066:	d129      	bne.n	80080bc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008076:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2b04      	cmp	r3, #4
 800807c:	d00a      	beq.n	8008094 <I2C_MasterReceive_BTF+0x86>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b02      	cmp	r3, #2
 8008082:	d007      	beq.n	8008094 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008092:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691a      	ldr	r2, [r3, #16]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	b2d2      	uxtb	r2, r2
 80080a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80080ba:	e08e      	b.n	80081da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d176      	bne.n	80081b4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d002      	beq.n	80080d2 <I2C_MasterReceive_BTF+0xc4>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b10      	cmp	r3, #16
 80080d0:	d108      	bne.n	80080e4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080e0:	601a      	str	r2, [r3, #0]
 80080e2:	e019      	b.n	8008118 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d002      	beq.n	80080f0 <I2C_MasterReceive_BTF+0xe2>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d108      	bne.n	8008102 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	e00a      	b.n	8008118 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b10      	cmp	r3, #16
 8008106:	d007      	beq.n	8008118 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008116:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691a      	ldr	r2, [r3, #16]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	b2d2      	uxtb	r2, r2
 8008124:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008134:	b29b      	uxth	r3, r3
 8008136:	3b01      	subs	r3, #1
 8008138:	b29a      	uxth	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	691a      	ldr	r2, [r3, #16]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	b2d2      	uxtb	r2, r2
 800814a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29a      	uxth	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008172:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2220      	movs	r2, #32
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b40      	cmp	r3, #64	; 0x40
 8008186:	d10a      	bne.n	800819e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff fcc4 	bl	8007b24 <HAL_I2C_MemRxCpltCallback>
}
 800819c:	e01d      	b.n	80081da <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2212      	movs	r2, #18
 80081aa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff fc79 	bl	8007aa4 <HAL_I2C_MasterRxCpltCallback>
}
 80081b2:	e012      	b.n	80081da <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	691a      	ldr	r2, [r3, #16]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081be:	b2d2      	uxtb	r2, r2
 80081c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	3b01      	subs	r3, #1
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80081da:	bf00      	nop
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b40      	cmp	r3, #64	; 0x40
 80081f4:	d117      	bne.n	8008226 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008202:	b2db      	uxtb	r3, r3
 8008204:	461a      	mov	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800820e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008210:	e067      	b.n	80082e2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008216:	b2db      	uxtb	r3, r3
 8008218:	f043 0301 	orr.w	r3, r3, #1
 800821c:	b2da      	uxtb	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	611a      	str	r2, [r3, #16]
}
 8008224:	e05d      	b.n	80082e2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800822e:	d133      	bne.n	8008298 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b21      	cmp	r3, #33	; 0x21
 800823a:	d109      	bne.n	8008250 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008240:	b2db      	uxtb	r3, r3
 8008242:	461a      	mov	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800824c:	611a      	str	r2, [r3, #16]
 800824e:	e008      	b.n	8008262 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008254:	b2db      	uxtb	r3, r3
 8008256:	f043 0301 	orr.w	r3, r3, #1
 800825a:	b2da      	uxtb	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008266:	2b00      	cmp	r3, #0
 8008268:	d004      	beq.n	8008274 <I2C_Master_SB+0x92>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d108      	bne.n	8008286 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008278:	2b00      	cmp	r3, #0
 800827a:	d032      	beq.n	80082e2 <I2C_Master_SB+0x100>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008282:	2b00      	cmp	r3, #0
 8008284:	d02d      	beq.n	80082e2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008294:	605a      	str	r2, [r3, #4]
}
 8008296:	e024      	b.n	80082e2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10e      	bne.n	80082be <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	11db      	asrs	r3, r3, #7
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	f003 0306 	and.w	r3, r3, #6
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	f063 030f 	orn	r3, r3, #15
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	611a      	str	r2, [r3, #16]
}
 80082bc:	e011      	b.n	80082e2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d10d      	bne.n	80082e2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	11db      	asrs	r3, r3, #7
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	f003 0306 	and.w	r3, r3, #6
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	f063 030e 	orn	r3, r3, #14
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	611a      	str	r2, [r3, #16]
}
 80082e2:	bf00      	nop
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008306:	2b00      	cmp	r3, #0
 8008308:	d004      	beq.n	8008314 <I2C_Master_ADD10+0x26>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800830e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008310:	2b00      	cmp	r3, #0
 8008312:	d108      	bne.n	8008326 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00c      	beq.n	8008336 <I2C_Master_ADD10+0x48>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008322:	2b00      	cmp	r3, #0
 8008324:	d007      	beq.n	8008336 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008334:	605a      	str	r2, [r3, #4]
  }
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008342:	b480      	push	{r7}
 8008344:	b091      	sub	sp, #68	; 0x44
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008350:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008358:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b22      	cmp	r3, #34	; 0x22
 800836a:	f040 8169 	bne.w	8008640 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10f      	bne.n	8008396 <I2C_Master_ADDR+0x54>
 8008376:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d10b      	bne.n	8008396 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800837e:	2300      	movs	r3, #0
 8008380:	633b      	str	r3, [r7, #48]	; 0x30
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	633b      	str	r3, [r7, #48]	; 0x30
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	633b      	str	r3, [r7, #48]	; 0x30
 8008392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008394:	e160      	b.n	8008658 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800839a:	2b00      	cmp	r3, #0
 800839c:	d11d      	bne.n	80083da <I2C_Master_ADDR+0x98>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80083a6:	d118      	bne.n	80083da <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083a8:	2300      	movs	r3, #0
 80083aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083cc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	651a      	str	r2, [r3, #80]	; 0x50
 80083d8:	e13e      	b.n	8008658 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083de:	b29b      	uxth	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d113      	bne.n	800840c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083e4:	2300      	movs	r3, #0
 80083e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	e115      	b.n	8008638 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008410:	b29b      	uxth	r3, r3
 8008412:	2b01      	cmp	r3, #1
 8008414:	f040 808a 	bne.w	800852c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800841e:	d137      	bne.n	8008490 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800842e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800843a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800843e:	d113      	bne.n	8008468 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800844e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008450:	2300      	movs	r3, #0
 8008452:	627b      	str	r3, [r7, #36]	; 0x24
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	627b      	str	r3, [r7, #36]	; 0x24
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	627b      	str	r3, [r7, #36]	; 0x24
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	e0e7      	b.n	8008638 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008468:	2300      	movs	r3, #0
 800846a:	623b      	str	r3, [r7, #32]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	623b      	str	r3, [r7, #32]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	623b      	str	r3, [r7, #32]
 800847c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	e0d3      	b.n	8008638 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008492:	2b08      	cmp	r3, #8
 8008494:	d02e      	beq.n	80084f4 <I2C_Master_ADDR+0x1b2>
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008498:	2b20      	cmp	r3, #32
 800849a:	d02b      	beq.n	80084f4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800849c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849e:	2b12      	cmp	r3, #18
 80084a0:	d102      	bne.n	80084a8 <I2C_Master_ADDR+0x166>
 80084a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d125      	bne.n	80084f4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	2b04      	cmp	r3, #4
 80084ac:	d00e      	beq.n	80084cc <I2C_Master_ADDR+0x18a>
 80084ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d00b      	beq.n	80084cc <I2C_Master_ADDR+0x18a>
 80084b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b6:	2b10      	cmp	r3, #16
 80084b8:	d008      	beq.n	80084cc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	e007      	b.n	80084dc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084da:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084dc:	2300      	movs	r3, #0
 80084de:	61fb      	str	r3, [r7, #28]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	61fb      	str	r3, [r7, #28]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	61fb      	str	r3, [r7, #28]
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	e0a1      	b.n	8008638 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008502:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008504:	2300      	movs	r3, #0
 8008506:	61bb      	str	r3, [r7, #24]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	61bb      	str	r3, [r7, #24]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	61bb      	str	r3, [r7, #24]
 8008518:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	e085      	b.n	8008638 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008530:	b29b      	uxth	r3, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d14d      	bne.n	80085d2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008538:	2b04      	cmp	r3, #4
 800853a:	d016      	beq.n	800856a <I2C_Master_ADDR+0x228>
 800853c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853e:	2b02      	cmp	r3, #2
 8008540:	d013      	beq.n	800856a <I2C_Master_ADDR+0x228>
 8008542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008544:	2b10      	cmp	r3, #16
 8008546:	d010      	beq.n	800856a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008556:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	e007      	b.n	800857a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008578:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008588:	d117      	bne.n	80085ba <I2C_Master_ADDR+0x278>
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008590:	d00b      	beq.n	80085aa <I2C_Master_ADDR+0x268>
 8008592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008594:	2b01      	cmp	r3, #1
 8008596:	d008      	beq.n	80085aa <I2C_Master_ADDR+0x268>
 8008598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859a:	2b08      	cmp	r3, #8
 800859c:	d005      	beq.n	80085aa <I2C_Master_ADDR+0x268>
 800859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a0:	2b10      	cmp	r3, #16
 80085a2:	d002      	beq.n	80085aa <I2C_Master_ADDR+0x268>
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	d107      	bne.n	80085ba <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085ba:	2300      	movs	r3, #0
 80085bc:	617b      	str	r3, [r7, #20]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	617b      	str	r3, [r7, #20]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	e032      	b.n	8008638 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085e0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085f0:	d117      	bne.n	8008622 <I2C_Master_ADDR+0x2e0>
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80085f8:	d00b      	beq.n	8008612 <I2C_Master_ADDR+0x2d0>
 80085fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d008      	beq.n	8008612 <I2C_Master_ADDR+0x2d0>
 8008600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008602:	2b08      	cmp	r3, #8
 8008604:	d005      	beq.n	8008612 <I2C_Master_ADDR+0x2d0>
 8008606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008608:	2b10      	cmp	r3, #16
 800860a:	d002      	beq.n	8008612 <I2C_Master_ADDR+0x2d0>
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	2b20      	cmp	r3, #32
 8008610:	d107      	bne.n	8008622 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	685a      	ldr	r2, [r3, #4]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008620:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008622:	2300      	movs	r3, #0
 8008624:	613b      	str	r3, [r7, #16]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	613b      	str	r3, [r7, #16]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	613b      	str	r3, [r7, #16]
 8008636:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800863e:	e00b      	b.n	8008658 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008640:	2300      	movs	r3, #0
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]
}
 8008656:	e7ff      	b.n	8008658 <I2C_Master_ADDR+0x316>
 8008658:	bf00      	nop
 800865a:	3744      	adds	r7, #68	; 0x44
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008672:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d02b      	beq.n	80086d6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	781a      	ldrb	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008698:	b29b      	uxth	r3, r3
 800869a:	3b01      	subs	r3, #1
 800869c:	b29a      	uxth	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d114      	bne.n	80086d6 <I2C_SlaveTransmit_TXE+0x72>
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	2b29      	cmp	r3, #41	; 0x29
 80086b0:	d111      	bne.n	80086d6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2221      	movs	r2, #33	; 0x21
 80086c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2228      	movs	r2, #40	; 0x28
 80086cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff f9f1 	bl	8007ab8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80086d6:	bf00      	nop
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d011      	beq.n	8008714 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f4:	781a      	ldrb	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	1c5a      	adds	r2, r3, #1
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800870a:	b29b      	uxth	r3, r3
 800870c:	3b01      	subs	r3, #1
 800870e:	b29a      	uxth	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800872e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008734:	b29b      	uxth	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d02c      	beq.n	8008794 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	691a      	ldr	r2, [r3, #16]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	b2d2      	uxtb	r2, r2
 8008746:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008756:	b29b      	uxth	r3, r3
 8008758:	3b01      	subs	r3, #1
 800875a:	b29a      	uxth	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008764:	b29b      	uxth	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d114      	bne.n	8008794 <I2C_SlaveReceive_RXNE+0x74>
 800876a:	7bfb      	ldrb	r3, [r7, #15]
 800876c:	2b2a      	cmp	r3, #42	; 0x2a
 800876e:	d111      	bne.n	8008794 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800877e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2222      	movs	r2, #34	; 0x22
 8008784:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2228      	movs	r2, #40	; 0x28
 800878a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff f99c 	bl	8007acc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008794:	bf00      	nop
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d012      	beq.n	80087d4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	691a      	ldr	r2, [r3, #16]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b8:	b2d2      	uxtb	r2, r2
 80087ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	3b01      	subs	r3, #1
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80087fa:	2b28      	cmp	r3, #40	; 0x28
 80087fc:	d127      	bne.n	800884e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800880c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	089b      	lsrs	r3, r3, #2
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800881a:	2301      	movs	r3, #1
 800881c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	09db      	lsrs	r3, r3, #7
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d103      	bne.n	8008832 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	81bb      	strh	r3, [r7, #12]
 8008830:	e002      	b.n	8008838 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008840:	89ba      	ldrh	r2, [r7, #12]
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7ff f94a 	bl	8007ae0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800884c:	e00e      	b.n	800886c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800884e:	2300      	movs	r3, #0
 8008850:	60bb      	str	r3, [r7, #8]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	60bb      	str	r3, [r7, #8]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	60bb      	str	r3, [r7, #8]
 8008862:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800886c:	bf00      	nop
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008882:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008892:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008894:	2300      	movs	r3, #0
 8008896:	60bb      	str	r3, [r7, #8]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	60bb      	str	r3, [r7, #8]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f042 0201 	orr.w	r2, r2, #1
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088c0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088d0:	d172      	bne.n	80089b8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
 80088d4:	2b22      	cmp	r3, #34	; 0x22
 80088d6:	d002      	beq.n	80088de <I2C_Slave_STOPF+0x6a>
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	2b2a      	cmp	r3, #42	; 0x2a
 80088dc:	d135      	bne.n	800894a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d005      	beq.n	8008902 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	f043 0204 	orr.w	r2, r3, #4
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008910:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008916:	4618      	mov	r0, r3
 8008918:	f7fd ff64 	bl	80067e4 <HAL_DMA_GetState>
 800891c:	4603      	mov	r3, r0
 800891e:	2b01      	cmp	r3, #1
 8008920:	d049      	beq.n	80089b6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008926:	4a69      	ldr	r2, [pc, #420]	; (8008acc <I2C_Slave_STOPF+0x258>)
 8008928:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892e:	4618      	mov	r0, r3
 8008930:	f7fd fdac 	bl	800648c <HAL_DMA_Abort_IT>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d03d      	beq.n	80089b6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008948:	e035      	b.n	80089b6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	b29a      	uxth	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800895c:	b29b      	uxth	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d005      	beq.n	800896e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008966:	f043 0204 	orr.w	r2, r3, #4
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800897c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008982:	4618      	mov	r0, r3
 8008984:	f7fd ff2e 	bl	80067e4 <HAL_DMA_GetState>
 8008988:	4603      	mov	r3, r0
 800898a:	2b01      	cmp	r3, #1
 800898c:	d014      	beq.n	80089b8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008992:	4a4e      	ldr	r2, [pc, #312]	; (8008acc <I2C_Slave_STOPF+0x258>)
 8008994:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899a:	4618      	mov	r0, r3
 800899c:	f7fd fd76 	bl	800648c <HAL_DMA_Abort_IT>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d008      	beq.n	80089b8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80089b0:	4610      	mov	r0, r2
 80089b2:	4798      	blx	r3
 80089b4:	e000      	b.n	80089b8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80089b6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089bc:	b29b      	uxth	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d03e      	beq.n	8008a40 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b04      	cmp	r3, #4
 80089ce:	d112      	bne.n	80089f6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	691a      	ldr	r2, [r3, #16]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	b2d2      	uxtb	r2, r2
 80089dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e2:	1c5a      	adds	r2, r3, #1
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	3b01      	subs	r3, #1
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a00:	2b40      	cmp	r3, #64	; 0x40
 8008a02:	d112      	bne.n	8008a2a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	b2d2      	uxtb	r2, r2
 8008a10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	1c5a      	adds	r2, r3, #1
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	3b01      	subs	r3, #1
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a38:	f043 0204 	orr.w	r2, r3, #4
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f8b3 	bl	8008bb4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008a4e:	e039      	b.n	8008ac4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	2b2a      	cmp	r3, #42	; 0x2a
 8008a54:	d109      	bne.n	8008a6a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2228      	movs	r2, #40	; 0x28
 8008a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7ff f831 	bl	8007acc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b28      	cmp	r3, #40	; 0x28
 8008a74:	d111      	bne.n	8008a9a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a15      	ldr	r2, [pc, #84]	; (8008ad0 <I2C_Slave_STOPF+0x25c>)
 8008a7a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2220      	movs	r2, #32
 8008a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff f832 	bl	8007afc <HAL_I2C_ListenCpltCallback>
}
 8008a98:	e014      	b.n	8008ac4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9e:	2b22      	cmp	r3, #34	; 0x22
 8008aa0:	d002      	beq.n	8008aa8 <I2C_Slave_STOPF+0x234>
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
 8008aa4:	2b22      	cmp	r3, #34	; 0x22
 8008aa6:	d10d      	bne.n	8008ac4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff f804 	bl	8007acc <HAL_I2C_SlaveRxCpltCallback>
}
 8008ac4:	bf00      	nop
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	080090b9 	.word	0x080090b9
 8008ad0:	ffff0000 	.word	0xffff0000

08008ad4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b08      	cmp	r3, #8
 8008aee:	d002      	beq.n	8008af6 <I2C_Slave_AF+0x22>
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2b20      	cmp	r3, #32
 8008af4:	d129      	bne.n	8008b4a <I2C_Slave_AF+0x76>
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	2b28      	cmp	r3, #40	; 0x28
 8008afa:	d126      	bne.n	8008b4a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a2c      	ldr	r2, [pc, #176]	; (8008bb0 <I2C_Slave_AF+0xdc>)
 8008b00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b10:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b1a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b2a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2220      	movs	r2, #32
 8008b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7fe ffda 	bl	8007afc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008b48:	e02e      	b.n	8008ba8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	2b21      	cmp	r3, #33	; 0x21
 8008b4e:	d126      	bne.n	8008b9e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a17      	ldr	r2, [pc, #92]	; (8008bb0 <I2C_Slave_AF+0xdc>)
 8008b54:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2221      	movs	r2, #33	; 0x21
 8008b5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b7a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b84:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b94:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7fe ff8e 	bl	8007ab8 <HAL_I2C_SlaveTxCpltCallback>
}
 8008b9c:	e004      	b.n	8008ba8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ba6:	615a      	str	r2, [r3, #20]
}
 8008ba8:	bf00      	nop
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	ffff0000 	.word	0xffff0000

08008bb4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bc2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	2b10      	cmp	r3, #16
 8008bd0:	d002      	beq.n	8008bd8 <I2C_ITError+0x24>
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	2b40      	cmp	r3, #64	; 0x40
 8008bd6:	d10a      	bne.n	8008bee <I2C_ITError+0x3a>
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	2b22      	cmp	r3, #34	; 0x22
 8008bdc:	d107      	bne.n	8008bee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
 8008bf0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008bf4:	2b28      	cmp	r3, #40	; 0x28
 8008bf6:	d107      	bne.n	8008c08 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2228      	movs	r2, #40	; 0x28
 8008c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008c06:	e015      	b.n	8008c34 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c16:	d00a      	beq.n	8008c2e <I2C_ITError+0x7a>
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	2b60      	cmp	r3, #96	; 0x60
 8008c1c:	d007      	beq.n	8008c2e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2220      	movs	r2, #32
 8008c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c42:	d162      	bne.n	8008d0a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c52:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d020      	beq.n	8008ca4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c66:	4a6a      	ldr	r2, [pc, #424]	; (8008e10 <I2C_ITError+0x25c>)
 8008c68:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fd fc0c 	bl	800648c <HAL_DMA_Abort_IT>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 8089 	beq.w	8008d8e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 0201 	bic.w	r2, r2, #1
 8008c8a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2220      	movs	r2, #32
 8008c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	4798      	blx	r3
 8008ca2:	e074      	b.n	8008d8e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca8:	4a59      	ldr	r2, [pc, #356]	; (8008e10 <I2C_ITError+0x25c>)
 8008caa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fd fbeb 	bl	800648c <HAL_DMA_Abort_IT>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d068      	beq.n	8008d8e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc6:	2b40      	cmp	r3, #64	; 0x40
 8008cc8:	d10b      	bne.n	8008ce2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	691a      	ldr	r2, [r3, #16]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	b2d2      	uxtb	r2, r2
 8008cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cdc:	1c5a      	adds	r2, r3, #1
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0201 	bic.w	r2, r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d04:	4610      	mov	r0, r2
 8008d06:	4798      	blx	r3
 8008d08:	e041      	b.n	8008d8e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b60      	cmp	r3, #96	; 0x60
 8008d14:	d125      	bne.n	8008d62 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2e:	2b40      	cmp	r3, #64	; 0x40
 8008d30:	d10b      	bne.n	8008d4a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3c:	b2d2      	uxtb	r2, r2
 8008d3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	1c5a      	adds	r2, r3, #1
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f022 0201 	bic.w	r2, r2, #1
 8008d58:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7fe fef6 	bl	8007b4c <HAL_I2C_AbortCpltCallback>
 8008d60:	e015      	b.n	8008d8e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d6c:	2b40      	cmp	r3, #64	; 0x40
 8008d6e:	d10b      	bne.n	8008d88 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	691a      	ldr	r2, [r3, #16]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7a:	b2d2      	uxtb	r2, r2
 8008d7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7fe fed5 	bl	8007b38 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d92:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10e      	bne.n	8008dbc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d109      	bne.n	8008dbc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d104      	bne.n	8008dbc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d007      	beq.n	8008dcc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008dca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dd2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd8:	f003 0304 	and.w	r3, r3, #4
 8008ddc:	2b04      	cmp	r3, #4
 8008dde:	d113      	bne.n	8008e08 <I2C_ITError+0x254>
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
 8008de2:	2b28      	cmp	r3, #40	; 0x28
 8008de4:	d110      	bne.n	8008e08 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a0a      	ldr	r2, [pc, #40]	; (8008e14 <I2C_ITError+0x260>)
 8008dea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2220      	movs	r2, #32
 8008df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7fe fe7a 	bl	8007afc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008e08:	bf00      	nop
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	080090b9 	.word	0x080090b9
 8008e14:	ffff0000 	.word	0xffff0000

08008e18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b088      	sub	sp, #32
 8008e1c:	af02      	add	r7, sp, #8
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	607a      	str	r2, [r7, #4]
 8008e22:	603b      	str	r3, [r7, #0]
 8008e24:	460b      	mov	r3, r1
 8008e26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d006      	beq.n	8008e42 <I2C_MasterRequestWrite+0x2a>
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d003      	beq.n	8008e42 <I2C_MasterRequestWrite+0x2a>
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e40:	d108      	bne.n	8008e54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e50:	601a      	str	r2, [r3, #0]
 8008e52:	e00b      	b.n	8008e6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e58:	2b12      	cmp	r3, #18
 8008e5a:	d107      	bne.n	8008e6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 f9c5 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00d      	beq.n	8008ea0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e92:	d103      	bne.n	8008e9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e035      	b.n	8008f0c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ea8:	d108      	bne.n	8008ebc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008eaa:	897b      	ldrh	r3, [r7, #10]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	461a      	mov	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008eb8:	611a      	str	r2, [r3, #16]
 8008eba:	e01b      	b.n	8008ef4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008ebc:	897b      	ldrh	r3, [r7, #10]
 8008ebe:	11db      	asrs	r3, r3, #7
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	f003 0306 	and.w	r3, r3, #6
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	f063 030f 	orn	r3, r3, #15
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	490e      	ldr	r1, [pc, #56]	; (8008f14 <I2C_MasterRequestWrite+0xfc>)
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f000 f9eb 	bl	80092b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e010      	b.n	8008f0c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008eea:	897b      	ldrh	r3, [r7, #10]
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	4907      	ldr	r1, [pc, #28]	; (8008f18 <I2C_MasterRequestWrite+0x100>)
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 f9db 	bl	80092b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e000      	b.n	8008f0c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	00010008 	.word	0x00010008
 8008f18:	00010002 	.word	0x00010002

08008f1c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b088      	sub	sp, #32
 8008f20:	af02      	add	r7, sp, #8
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	607a      	str	r2, [r7, #4]
 8008f26:	603b      	str	r3, [r7, #0]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f30:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f40:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	2b08      	cmp	r3, #8
 8008f46:	d006      	beq.n	8008f56 <I2C_MasterRequestRead+0x3a>
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d003      	beq.n	8008f56 <I2C_MasterRequestRead+0x3a>
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f54:	d108      	bne.n	8008f68 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	e00b      	b.n	8008f80 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6c:	2b11      	cmp	r3, #17
 8008f6e:	d107      	bne.n	8008f80 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 f93b 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00d      	beq.n	8008fb4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fa6:	d103      	bne.n	8008fb0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e079      	b.n	80090a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fbc:	d108      	bne.n	8008fd0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008fbe:	897b      	ldrh	r3, [r7, #10]
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	f043 0301 	orr.w	r3, r3, #1
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	611a      	str	r2, [r3, #16]
 8008fce:	e05f      	b.n	8009090 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008fd0:	897b      	ldrh	r3, [r7, #10]
 8008fd2:	11db      	asrs	r3, r3, #7
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	f003 0306 	and.w	r3, r3, #6
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	f063 030f 	orn	r3, r3, #15
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	4930      	ldr	r1, [pc, #192]	; (80090b0 <I2C_MasterRequestRead+0x194>)
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 f961 	bl	80092b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e054      	b.n	80090a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008ffe:	897b      	ldrh	r3, [r7, #10]
 8009000:	b2da      	uxtb	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	4929      	ldr	r1, [pc, #164]	; (80090b4 <I2C_MasterRequestRead+0x198>)
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 f951 	bl	80092b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e044      	b.n	80090a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800901e:	2300      	movs	r3, #0
 8009020:	613b      	str	r3, [r7, #16]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	695b      	ldr	r3, [r3, #20]
 8009028:	613b      	str	r3, [r7, #16]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	613b      	str	r3, [r7, #16]
 8009032:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009042:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 f8d9 	bl	8009208 <I2C_WaitOnFlagUntilTimeout>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00d      	beq.n	8009078 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800906a:	d103      	bne.n	8009074 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009072:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e017      	b.n	80090a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009078:	897b      	ldrh	r3, [r7, #10]
 800907a:	11db      	asrs	r3, r3, #7
 800907c:	b2db      	uxtb	r3, r3
 800907e:	f003 0306 	and.w	r3, r3, #6
 8009082:	b2db      	uxtb	r3, r3
 8009084:	f063 030e 	orn	r3, r3, #14
 8009088:	b2da      	uxtb	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	4907      	ldr	r1, [pc, #28]	; (80090b4 <I2C_MasterRequestRead+0x198>)
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f000 f90d 	bl	80092b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e000      	b.n	80090a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	00010008 	.word	0x00010008
 80090b4:	00010002 	.word	0x00010002

080090b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090c0:	2300      	movs	r3, #0
 80090c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80090d2:	4b4b      	ldr	r3, [pc, #300]	; (8009200 <I2C_DMAAbort+0x148>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	08db      	lsrs	r3, r3, #3
 80090d8:	4a4a      	ldr	r2, [pc, #296]	; (8009204 <I2C_DMAAbort+0x14c>)
 80090da:	fba2 2303 	umull	r2, r3, r2, r3
 80090de:	0a1a      	lsrs	r2, r3, #8
 80090e0:	4613      	mov	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	00da      	lsls	r2, r3, #3
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d106      	bne.n	8009100 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	f043 0220 	orr.w	r2, r3, #32
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80090fe:	e00a      	b.n	8009116 <I2C_DMAAbort+0x5e>
    }
    count--;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	3b01      	subs	r3, #1
 8009104:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009114:	d0ea      	beq.n	80090ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800911a:	2b00      	cmp	r3, #0
 800911c:	d003      	beq.n	8009126 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009122:	2200      	movs	r2, #0
 8009124:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009132:	2200      	movs	r2, #0
 8009134:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009144:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2200      	movs	r2, #0
 800914a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009158:	2200      	movs	r2, #0
 800915a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009160:	2b00      	cmp	r3, #0
 8009162:	d003      	beq.n	800916c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009168:	2200      	movs	r2, #0
 800916a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f022 0201 	bic.w	r2, r2, #1
 800917a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b60      	cmp	r3, #96	; 0x60
 8009186:	d10e      	bne.n	80091a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	2220      	movs	r2, #32
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	2200      	movs	r2, #0
 800919c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800919e:	6978      	ldr	r0, [r7, #20]
 80091a0:	f7fe fcd4 	bl	8007b4c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80091a4:	e027      	b.n	80091f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80091a6:	7cfb      	ldrb	r3, [r7, #19]
 80091a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80091ac:	2b28      	cmp	r3, #40	; 0x28
 80091ae:	d117      	bne.n	80091e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 0201 	orr.w	r2, r2, #1
 80091be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80091ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	2200      	movs	r2, #0
 80091d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2228      	movs	r2, #40	; 0x28
 80091da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80091de:	e007      	b.n	80091f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80091f0:	6978      	ldr	r0, [r7, #20]
 80091f2:	f7fe fca1 	bl	8007b38 <HAL_I2C_ErrorCallback>
}
 80091f6:	bf00      	nop
 80091f8:	3718      	adds	r7, #24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20000034 	.word	0x20000034
 8009204:	14f8b589 	.word	0x14f8b589

08009208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	603b      	str	r3, [r7, #0]
 8009214:	4613      	mov	r3, r2
 8009216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009218:	e025      	b.n	8009266 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009220:	d021      	beq.n	8009266 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009222:	f7fc fded 	bl	8005e00 <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	429a      	cmp	r2, r3
 8009230:	d302      	bcc.n	8009238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d116      	bne.n	8009266 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2220      	movs	r2, #32
 8009242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009252:	f043 0220 	orr.w	r2, r3, #32
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e023      	b.n	80092ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	0c1b      	lsrs	r3, r3, #16
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b01      	cmp	r3, #1
 800926e:	d10d      	bne.n	800928c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	43da      	mvns	r2, r3
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	4013      	ands	r3, r2
 800927c:	b29b      	uxth	r3, r3
 800927e:	2b00      	cmp	r3, #0
 8009280:	bf0c      	ite	eq
 8009282:	2301      	moveq	r3, #1
 8009284:	2300      	movne	r3, #0
 8009286:	b2db      	uxtb	r3, r3
 8009288:	461a      	mov	r2, r3
 800928a:	e00c      	b.n	80092a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	43da      	mvns	r2, r3
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4013      	ands	r3, r2
 8009298:	b29b      	uxth	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	bf0c      	ite	eq
 800929e:	2301      	moveq	r3, #1
 80092a0:	2300      	movne	r3, #0
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	461a      	mov	r2, r3
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d0b6      	beq.n	800921a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	607a      	str	r2, [r7, #4]
 80092c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80092c4:	e051      	b.n	800936a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092d4:	d123      	bne.n	800931e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80092ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2220      	movs	r2, #32
 80092fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930a:	f043 0204 	orr.w	r2, r3, #4
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e046      	b.n	80093ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009324:	d021      	beq.n	800936a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009326:	f7fc fd6b 	bl	8005e00 <HAL_GetTick>
 800932a:	4602      	mov	r2, r0
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	429a      	cmp	r2, r3
 8009334:	d302      	bcc.n	800933c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d116      	bne.n	800936a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2220      	movs	r2, #32
 8009346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	f043 0220 	orr.w	r2, r3, #32
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e020      	b.n	80093ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	0c1b      	lsrs	r3, r3, #16
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b01      	cmp	r3, #1
 8009372:	d10c      	bne.n	800938e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	43da      	mvns	r2, r3
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	4013      	ands	r3, r2
 8009380:	b29b      	uxth	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	bf14      	ite	ne
 8009386:	2301      	movne	r3, #1
 8009388:	2300      	moveq	r3, #0
 800938a:	b2db      	uxtb	r3, r3
 800938c:	e00b      	b.n	80093a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	43da      	mvns	r2, r3
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	4013      	ands	r3, r2
 800939a:	b29b      	uxth	r3, r3
 800939c:	2b00      	cmp	r3, #0
 800939e:	bf14      	ite	ne
 80093a0:	2301      	movne	r3, #1
 80093a2:	2300      	moveq	r3, #0
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d18d      	bne.n	80092c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093c0:	e02d      	b.n	800941e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 f900 	bl	80095c8 <I2C_IsAcknowledgeFailed>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e02d      	b.n	800942e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d8:	d021      	beq.n	800941e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093da:	f7fc fd11 	bl	8005e00 <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d302      	bcc.n	80093f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d116      	bne.n	800941e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2220      	movs	r2, #32
 80093fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940a:	f043 0220 	orr.w	r2, r3, #32
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e007      	b.n	800942e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009428:	2b80      	cmp	r3, #128	; 0x80
 800942a:	d1ca      	bne.n	80093c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009442:	e02d      	b.n	80094a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 f8bf 	bl	80095c8 <I2C_IsAcknowledgeFailed>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e02d      	b.n	80094b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945a:	d021      	beq.n	80094a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800945c:	f7fc fcd0 	bl	8005e00 <HAL_GetTick>
 8009460:	4602      	mov	r2, r0
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	429a      	cmp	r2, r3
 800946a:	d302      	bcc.n	8009472 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d116      	bne.n	80094a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2220      	movs	r2, #32
 800947c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	f043 0220 	orr.w	r2, r3, #32
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e007      	b.n	80094b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	f003 0304 	and.w	r3, r3, #4
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	d1ca      	bne.n	8009444 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80094c4:	4b13      	ldr	r3, [pc, #76]	; (8009514 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	08db      	lsrs	r3, r3, #3
 80094ca:	4a13      	ldr	r2, [pc, #76]	; (8009518 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80094cc:	fba2 2303 	umull	r2, r3, r2, r3
 80094d0:	0a1a      	lsrs	r2, r3, #8
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3b01      	subs	r3, #1
 80094de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d107      	bne.n	80094f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ea:	f043 0220 	orr.w	r2, r3, #32
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e008      	b.n	8009508 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009504:	d0e9      	beq.n	80094da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	20000034 	.word	0x20000034
 8009518:	14f8b589 	.word	0x14f8b589

0800951c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009528:	e042      	b.n	80095b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	695b      	ldr	r3, [r3, #20]
 8009530:	f003 0310 	and.w	r3, r3, #16
 8009534:	2b10      	cmp	r3, #16
 8009536:	d119      	bne.n	800956c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f06f 0210 	mvn.w	r2, #16
 8009540:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2220      	movs	r2, #32
 800954c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e029      	b.n	80095c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800956c:	f7fc fc48 	bl	8005e00 <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	429a      	cmp	r2, r3
 800957a:	d302      	bcc.n	8009582 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d116      	bne.n	80095b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2220      	movs	r2, #32
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959c:	f043 0220 	orr.w	r2, r3, #32
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e007      	b.n	80095c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ba:	2b40      	cmp	r3, #64	; 0x40
 80095bc:	d1b5      	bne.n	800952a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095de:	d11b      	bne.n	8009618 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2220      	movs	r2, #32
 80095f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009604:	f043 0204 	orr.w	r2, r3, #4
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e000      	b.n	800961a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009632:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009636:	d103      	bne.n	8009640 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800963e:	e007      	b.n	8009650 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009644:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009648:	d102      	bne.n	8009650 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2208      	movs	r2, #8
 800964e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e264      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	d075      	beq.n	8009766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800967a:	4ba3      	ldr	r3, [pc, #652]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f003 030c 	and.w	r3, r3, #12
 8009682:	2b04      	cmp	r3, #4
 8009684:	d00c      	beq.n	80096a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009686:	4ba0      	ldr	r3, [pc, #640]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800968e:	2b08      	cmp	r3, #8
 8009690:	d112      	bne.n	80096b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009692:	4b9d      	ldr	r3, [pc, #628]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800969a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800969e:	d10b      	bne.n	80096b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096a0:	4b99      	ldr	r3, [pc, #612]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d05b      	beq.n	8009764 <HAL_RCC_OscConfig+0x108>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d157      	bne.n	8009764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e23f      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096c0:	d106      	bne.n	80096d0 <HAL_RCC_OscConfig+0x74>
 80096c2:	4b91      	ldr	r3, [pc, #580]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a90      	ldr	r2, [pc, #576]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80096c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096cc:	6013      	str	r3, [r2, #0]
 80096ce:	e01d      	b.n	800970c <HAL_RCC_OscConfig+0xb0>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096d8:	d10c      	bne.n	80096f4 <HAL_RCC_OscConfig+0x98>
 80096da:	4b8b      	ldr	r3, [pc, #556]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a8a      	ldr	r2, [pc, #552]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80096e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096e4:	6013      	str	r3, [r2, #0]
 80096e6:	4b88      	ldr	r3, [pc, #544]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a87      	ldr	r2, [pc, #540]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80096ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096f0:	6013      	str	r3, [r2, #0]
 80096f2:	e00b      	b.n	800970c <HAL_RCC_OscConfig+0xb0>
 80096f4:	4b84      	ldr	r3, [pc, #528]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a83      	ldr	r2, [pc, #524]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80096fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096fe:	6013      	str	r3, [r2, #0]
 8009700:	4b81      	ldr	r3, [pc, #516]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a80      	ldr	r2, [pc, #512]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 8009706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800970a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d013      	beq.n	800973c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009714:	f7fc fb74 	bl	8005e00 <HAL_GetTick>
 8009718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800971a:	e008      	b.n	800972e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800971c:	f7fc fb70 	bl	8005e00 <HAL_GetTick>
 8009720:	4602      	mov	r2, r0
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	2b64      	cmp	r3, #100	; 0x64
 8009728:	d901      	bls.n	800972e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800972a:	2303      	movs	r3, #3
 800972c:	e204      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800972e:	4b76      	ldr	r3, [pc, #472]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0f0      	beq.n	800971c <HAL_RCC_OscConfig+0xc0>
 800973a:	e014      	b.n	8009766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800973c:	f7fc fb60 	bl	8005e00 <HAL_GetTick>
 8009740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009742:	e008      	b.n	8009756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009744:	f7fc fb5c 	bl	8005e00 <HAL_GetTick>
 8009748:	4602      	mov	r2, r0
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	2b64      	cmp	r3, #100	; 0x64
 8009750:	d901      	bls.n	8009756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009752:	2303      	movs	r3, #3
 8009754:	e1f0      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009756:	4b6c      	ldr	r3, [pc, #432]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1f0      	bne.n	8009744 <HAL_RCC_OscConfig+0xe8>
 8009762:	e000      	b.n	8009766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0302 	and.w	r3, r3, #2
 800976e:	2b00      	cmp	r3, #0
 8009770:	d063      	beq.n	800983a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009772:	4b65      	ldr	r3, [pc, #404]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	f003 030c 	and.w	r3, r3, #12
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00b      	beq.n	8009796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800977e:	4b62      	ldr	r3, [pc, #392]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009786:	2b08      	cmp	r3, #8
 8009788:	d11c      	bne.n	80097c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800978a:	4b5f      	ldr	r3, [pc, #380]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009792:	2b00      	cmp	r3, #0
 8009794:	d116      	bne.n	80097c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009796:	4b5c      	ldr	r3, [pc, #368]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0302 	and.w	r3, r3, #2
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d005      	beq.n	80097ae <HAL_RCC_OscConfig+0x152>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d001      	beq.n	80097ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e1c4      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097ae:	4b56      	ldr	r3, [pc, #344]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	4952      	ldr	r1, [pc, #328]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097c2:	e03a      	b.n	800983a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d020      	beq.n	800980e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80097cc:	4b4f      	ldr	r3, [pc, #316]	; (800990c <HAL_RCC_OscConfig+0x2b0>)
 80097ce:	2201      	movs	r2, #1
 80097d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097d2:	f7fc fb15 	bl	8005e00 <HAL_GetTick>
 80097d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097d8:	e008      	b.n	80097ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097da:	f7fc fb11 	bl	8005e00 <HAL_GetTick>
 80097de:	4602      	mov	r2, r0
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d901      	bls.n	80097ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80097e8:	2303      	movs	r3, #3
 80097ea:	e1a5      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097ec:	4b46      	ldr	r3, [pc, #280]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0302 	and.w	r3, r3, #2
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d0f0      	beq.n	80097da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097f8:	4b43      	ldr	r3, [pc, #268]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	00db      	lsls	r3, r3, #3
 8009806:	4940      	ldr	r1, [pc, #256]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 8009808:	4313      	orrs	r3, r2
 800980a:	600b      	str	r3, [r1, #0]
 800980c:	e015      	b.n	800983a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800980e:	4b3f      	ldr	r3, [pc, #252]	; (800990c <HAL_RCC_OscConfig+0x2b0>)
 8009810:	2200      	movs	r2, #0
 8009812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009814:	f7fc faf4 	bl	8005e00 <HAL_GetTick>
 8009818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800981a:	e008      	b.n	800982e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800981c:	f7fc faf0 	bl	8005e00 <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	2b02      	cmp	r3, #2
 8009828:	d901      	bls.n	800982e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e184      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800982e:	4b36      	ldr	r3, [pc, #216]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 0302 	and.w	r3, r3, #2
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1f0      	bne.n	800981c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0308 	and.w	r3, r3, #8
 8009842:	2b00      	cmp	r3, #0
 8009844:	d030      	beq.n	80098a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d016      	beq.n	800987c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800984e:	4b30      	ldr	r3, [pc, #192]	; (8009910 <HAL_RCC_OscConfig+0x2b4>)
 8009850:	2201      	movs	r2, #1
 8009852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009854:	f7fc fad4 	bl	8005e00 <HAL_GetTick>
 8009858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800985a:	e008      	b.n	800986e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800985c:	f7fc fad0 	bl	8005e00 <HAL_GetTick>
 8009860:	4602      	mov	r2, r0
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	2b02      	cmp	r3, #2
 8009868:	d901      	bls.n	800986e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800986a:	2303      	movs	r3, #3
 800986c:	e164      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800986e:	4b26      	ldr	r3, [pc, #152]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 8009870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009872:	f003 0302 	and.w	r3, r3, #2
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0f0      	beq.n	800985c <HAL_RCC_OscConfig+0x200>
 800987a:	e015      	b.n	80098a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800987c:	4b24      	ldr	r3, [pc, #144]	; (8009910 <HAL_RCC_OscConfig+0x2b4>)
 800987e:	2200      	movs	r2, #0
 8009880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009882:	f7fc fabd 	bl	8005e00 <HAL_GetTick>
 8009886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009888:	e008      	b.n	800989c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800988a:	f7fc fab9 	bl	8005e00 <HAL_GetTick>
 800988e:	4602      	mov	r2, r0
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	2b02      	cmp	r3, #2
 8009896:	d901      	bls.n	800989c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e14d      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800989c:	4b1a      	ldr	r3, [pc, #104]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 800989e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098a0:	f003 0302 	and.w	r3, r3, #2
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1f0      	bne.n	800988a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 80a0 	beq.w	80099f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098b6:	2300      	movs	r3, #0
 80098b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098ba:	4b13      	ldr	r3, [pc, #76]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80098bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10f      	bne.n	80098e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098c6:	2300      	movs	r3, #0
 80098c8:	60bb      	str	r3, [r7, #8]
 80098ca:	4b0f      	ldr	r3, [pc, #60]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80098cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ce:	4a0e      	ldr	r2, [pc, #56]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80098d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098d4:	6413      	str	r3, [r2, #64]	; 0x40
 80098d6:	4b0c      	ldr	r3, [pc, #48]	; (8009908 <HAL_RCC_OscConfig+0x2ac>)
 80098d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098de:	60bb      	str	r3, [r7, #8]
 80098e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098e2:	2301      	movs	r3, #1
 80098e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098e6:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <HAL_RCC_OscConfig+0x2b8>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d121      	bne.n	8009936 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80098f2:	4b08      	ldr	r3, [pc, #32]	; (8009914 <HAL_RCC_OscConfig+0x2b8>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a07      	ldr	r2, [pc, #28]	; (8009914 <HAL_RCC_OscConfig+0x2b8>)
 80098f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098fe:	f7fc fa7f 	bl	8005e00 <HAL_GetTick>
 8009902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009904:	e011      	b.n	800992a <HAL_RCC_OscConfig+0x2ce>
 8009906:	bf00      	nop
 8009908:	40023800 	.word	0x40023800
 800990c:	42470000 	.word	0x42470000
 8009910:	42470e80 	.word	0x42470e80
 8009914:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009918:	f7fc fa72 	bl	8005e00 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e106      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800992a:	4b85      	ldr	r3, [pc, #532]	; (8009b40 <HAL_RCC_OscConfig+0x4e4>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0f0      	beq.n	8009918 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d106      	bne.n	800994c <HAL_RCC_OscConfig+0x2f0>
 800993e:	4b81      	ldr	r3, [pc, #516]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 8009940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009942:	4a80      	ldr	r2, [pc, #512]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 8009944:	f043 0301 	orr.w	r3, r3, #1
 8009948:	6713      	str	r3, [r2, #112]	; 0x70
 800994a:	e01c      	b.n	8009986 <HAL_RCC_OscConfig+0x32a>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	2b05      	cmp	r3, #5
 8009952:	d10c      	bne.n	800996e <HAL_RCC_OscConfig+0x312>
 8009954:	4b7b      	ldr	r3, [pc, #492]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 8009956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009958:	4a7a      	ldr	r2, [pc, #488]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 800995a:	f043 0304 	orr.w	r3, r3, #4
 800995e:	6713      	str	r3, [r2, #112]	; 0x70
 8009960:	4b78      	ldr	r3, [pc, #480]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 8009962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009964:	4a77      	ldr	r2, [pc, #476]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 8009966:	f043 0301 	orr.w	r3, r3, #1
 800996a:	6713      	str	r3, [r2, #112]	; 0x70
 800996c:	e00b      	b.n	8009986 <HAL_RCC_OscConfig+0x32a>
 800996e:	4b75      	ldr	r3, [pc, #468]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 8009970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009972:	4a74      	ldr	r2, [pc, #464]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 8009974:	f023 0301 	bic.w	r3, r3, #1
 8009978:	6713      	str	r3, [r2, #112]	; 0x70
 800997a:	4b72      	ldr	r3, [pc, #456]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 800997c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997e:	4a71      	ldr	r2, [pc, #452]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 8009980:	f023 0304 	bic.w	r3, r3, #4
 8009984:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d015      	beq.n	80099ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800998e:	f7fc fa37 	bl	8005e00 <HAL_GetTick>
 8009992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009994:	e00a      	b.n	80099ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009996:	f7fc fa33 	bl	8005e00 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d901      	bls.n	80099ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e0c5      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099ac:	4b65      	ldr	r3, [pc, #404]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 80099ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099b0:	f003 0302 	and.w	r3, r3, #2
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d0ee      	beq.n	8009996 <HAL_RCC_OscConfig+0x33a>
 80099b8:	e014      	b.n	80099e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099ba:	f7fc fa21 	bl	8005e00 <HAL_GetTick>
 80099be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099c0:	e00a      	b.n	80099d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099c2:	f7fc fa1d 	bl	8005e00 <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d901      	bls.n	80099d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e0af      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099d8:	4b5a      	ldr	r3, [pc, #360]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 80099da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099dc:	f003 0302 	and.w	r3, r3, #2
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1ee      	bne.n	80099c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80099e4:	7dfb      	ldrb	r3, [r7, #23]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d105      	bne.n	80099f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099ea:	4b56      	ldr	r3, [pc, #344]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 80099ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ee:	4a55      	ldr	r2, [pc, #340]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 80099f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 809b 	beq.w	8009b36 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a00:	4b50      	ldr	r3, [pc, #320]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f003 030c 	and.w	r3, r3, #12
 8009a08:	2b08      	cmp	r3, #8
 8009a0a:	d05c      	beq.n	8009ac6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d141      	bne.n	8009a98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a14:	4b4c      	ldr	r3, [pc, #304]	; (8009b48 <HAL_RCC_OscConfig+0x4ec>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a1a:	f7fc f9f1 	bl	8005e00 <HAL_GetTick>
 8009a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a20:	e008      	b.n	8009a34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a22:	f7fc f9ed 	bl	8005e00 <HAL_GetTick>
 8009a26:	4602      	mov	r2, r0
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d901      	bls.n	8009a34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e081      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a34:	4b43      	ldr	r3, [pc, #268]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1f0      	bne.n	8009a22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	69da      	ldr	r2, [r3, #28]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a1b      	ldr	r3, [r3, #32]
 8009a48:	431a      	orrs	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4e:	019b      	lsls	r3, r3, #6
 8009a50:	431a      	orrs	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a56:	085b      	lsrs	r3, r3, #1
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	041b      	lsls	r3, r3, #16
 8009a5c:	431a      	orrs	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a62:	061b      	lsls	r3, r3, #24
 8009a64:	4937      	ldr	r1, [pc, #220]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a6a:	4b37      	ldr	r3, [pc, #220]	; (8009b48 <HAL_RCC_OscConfig+0x4ec>)
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a70:	f7fc f9c6 	bl	8005e00 <HAL_GetTick>
 8009a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a76:	e008      	b.n	8009a8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a78:	f7fc f9c2 	bl	8005e00 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d901      	bls.n	8009a8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009a86:	2303      	movs	r3, #3
 8009a88:	e056      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a8a:	4b2e      	ldr	r3, [pc, #184]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d0f0      	beq.n	8009a78 <HAL_RCC_OscConfig+0x41c>
 8009a96:	e04e      	b.n	8009b36 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a98:	4b2b      	ldr	r3, [pc, #172]	; (8009b48 <HAL_RCC_OscConfig+0x4ec>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a9e:	f7fc f9af 	bl	8005e00 <HAL_GetTick>
 8009aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aa4:	e008      	b.n	8009ab8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009aa6:	f7fc f9ab 	bl	8005e00 <HAL_GetTick>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d901      	bls.n	8009ab8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e03f      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ab8:	4b22      	ldr	r3, [pc, #136]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1f0      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x44a>
 8009ac4:	e037      	b.n	8009b36 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d101      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e032      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009ad2:	4b1c      	ldr	r3, [pc, #112]	; (8009b44 <HAL_RCC_OscConfig+0x4e8>)
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d028      	beq.n	8009b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d121      	bne.n	8009b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d11a      	bne.n	8009b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009b02:	4013      	ands	r3, r2
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d111      	bne.n	8009b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b18:	085b      	lsrs	r3, r3, #1
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d107      	bne.n	8009b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d001      	beq.n	8009b36 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e000      	b.n	8009b38 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3718      	adds	r7, #24
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	40007000 	.word	0x40007000
 8009b44:	40023800 	.word	0x40023800
 8009b48:	42470060 	.word	0x42470060

08009b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e0cc      	b.n	8009cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b60:	4b68      	ldr	r3, [pc, #416]	; (8009d04 <HAL_RCC_ClockConfig+0x1b8>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0307 	and.w	r3, r3, #7
 8009b68:	683a      	ldr	r2, [r7, #0]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d90c      	bls.n	8009b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b6e:	4b65      	ldr	r3, [pc, #404]	; (8009d04 <HAL_RCC_ClockConfig+0x1b8>)
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	b2d2      	uxtb	r2, r2
 8009b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b76:	4b63      	ldr	r3, [pc, #396]	; (8009d04 <HAL_RCC_ClockConfig+0x1b8>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0307 	and.w	r3, r3, #7
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d001      	beq.n	8009b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e0b8      	b.n	8009cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d020      	beq.n	8009bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 0304 	and.w	r3, r3, #4
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d005      	beq.n	8009bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009ba0:	4b59      	ldr	r3, [pc, #356]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	4a58      	ldr	r2, [pc, #352]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 0308 	and.w	r3, r3, #8
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d005      	beq.n	8009bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009bb8:	4b53      	ldr	r3, [pc, #332]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	4a52      	ldr	r2, [pc, #328]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bc4:	4b50      	ldr	r3, [pc, #320]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	494d      	ldr	r1, [pc, #308]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d044      	beq.n	8009c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d107      	bne.n	8009bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bea:	4b47      	ldr	r3, [pc, #284]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d119      	bne.n	8009c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e07f      	b.n	8009cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d003      	beq.n	8009c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d107      	bne.n	8009c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c0a:	4b3f      	ldr	r3, [pc, #252]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d109      	bne.n	8009c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e06f      	b.n	8009cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c1a:	4b3b      	ldr	r3, [pc, #236]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0302 	and.w	r3, r3, #2
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e067      	b.n	8009cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c2a:	4b37      	ldr	r3, [pc, #220]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f023 0203 	bic.w	r2, r3, #3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	4934      	ldr	r1, [pc, #208]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c3c:	f7fc f8e0 	bl	8005e00 <HAL_GetTick>
 8009c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c42:	e00a      	b.n	8009c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c44:	f7fc f8dc 	bl	8005e00 <HAL_GetTick>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d901      	bls.n	8009c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009c56:	2303      	movs	r3, #3
 8009c58:	e04f      	b.n	8009cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c5a:	4b2b      	ldr	r3, [pc, #172]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f003 020c 	and.w	r2, r3, #12
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d1eb      	bne.n	8009c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c6c:	4b25      	ldr	r3, [pc, #148]	; (8009d04 <HAL_RCC_ClockConfig+0x1b8>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d20c      	bcs.n	8009c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c7a:	4b22      	ldr	r3, [pc, #136]	; (8009d04 <HAL_RCC_ClockConfig+0x1b8>)
 8009c7c:	683a      	ldr	r2, [r7, #0]
 8009c7e:	b2d2      	uxtb	r2, r2
 8009c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c82:	4b20      	ldr	r3, [pc, #128]	; (8009d04 <HAL_RCC_ClockConfig+0x1b8>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 0307 	and.w	r3, r3, #7
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d001      	beq.n	8009c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e032      	b.n	8009cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0304 	and.w	r3, r3, #4
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d008      	beq.n	8009cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ca0:	4b19      	ldr	r3, [pc, #100]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	4916      	ldr	r1, [pc, #88]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 0308 	and.w	r3, r3, #8
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d009      	beq.n	8009cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009cbe:	4b12      	ldr	r3, [pc, #72]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	00db      	lsls	r3, r3, #3
 8009ccc:	490e      	ldr	r1, [pc, #56]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009cd2:	f000 f821 	bl	8009d18 <HAL_RCC_GetSysClockFreq>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	4b0b      	ldr	r3, [pc, #44]	; (8009d08 <HAL_RCC_ClockConfig+0x1bc>)
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	091b      	lsrs	r3, r3, #4
 8009cde:	f003 030f 	and.w	r3, r3, #15
 8009ce2:	490a      	ldr	r1, [pc, #40]	; (8009d0c <HAL_RCC_ClockConfig+0x1c0>)
 8009ce4:	5ccb      	ldrb	r3, [r1, r3]
 8009ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cea:	4a09      	ldr	r2, [pc, #36]	; (8009d10 <HAL_RCC_ClockConfig+0x1c4>)
 8009cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009cee:	4b09      	ldr	r3, [pc, #36]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fc f840 	bl	8005d78 <HAL_InitTick>

  return HAL_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	40023c00 	.word	0x40023c00
 8009d08:	40023800 	.word	0x40023800
 8009d0c:	08023eec 	.word	0x08023eec
 8009d10:	20000034 	.word	0x20000034
 8009d14:	20000038 	.word	0x20000038

08009d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d18:	b5b0      	push	{r4, r5, r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009d1e:	2100      	movs	r1, #0
 8009d20:	6079      	str	r1, [r7, #4]
 8009d22:	2100      	movs	r1, #0
 8009d24:	60f9      	str	r1, [r7, #12]
 8009d26:	2100      	movs	r1, #0
 8009d28:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d2e:	4952      	ldr	r1, [pc, #328]	; (8009e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8009d30:	6889      	ldr	r1, [r1, #8]
 8009d32:	f001 010c 	and.w	r1, r1, #12
 8009d36:	2908      	cmp	r1, #8
 8009d38:	d00d      	beq.n	8009d56 <HAL_RCC_GetSysClockFreq+0x3e>
 8009d3a:	2908      	cmp	r1, #8
 8009d3c:	f200 8094 	bhi.w	8009e68 <HAL_RCC_GetSysClockFreq+0x150>
 8009d40:	2900      	cmp	r1, #0
 8009d42:	d002      	beq.n	8009d4a <HAL_RCC_GetSysClockFreq+0x32>
 8009d44:	2904      	cmp	r1, #4
 8009d46:	d003      	beq.n	8009d50 <HAL_RCC_GetSysClockFreq+0x38>
 8009d48:	e08e      	b.n	8009e68 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d4a:	4b4c      	ldr	r3, [pc, #304]	; (8009e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8009d4c:	60bb      	str	r3, [r7, #8]
       break;
 8009d4e:	e08e      	b.n	8009e6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d50:	4b4b      	ldr	r3, [pc, #300]	; (8009e80 <HAL_RCC_GetSysClockFreq+0x168>)
 8009d52:	60bb      	str	r3, [r7, #8]
      break;
 8009d54:	e08b      	b.n	8009e6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d56:	4948      	ldr	r1, [pc, #288]	; (8009e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8009d58:	6849      	ldr	r1, [r1, #4]
 8009d5a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009d5e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d60:	4945      	ldr	r1, [pc, #276]	; (8009e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8009d62:	6849      	ldr	r1, [r1, #4]
 8009d64:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009d68:	2900      	cmp	r1, #0
 8009d6a:	d024      	beq.n	8009db6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d6c:	4942      	ldr	r1, [pc, #264]	; (8009e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8009d6e:	6849      	ldr	r1, [r1, #4]
 8009d70:	0989      	lsrs	r1, r1, #6
 8009d72:	4608      	mov	r0, r1
 8009d74:	f04f 0100 	mov.w	r1, #0
 8009d78:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009d7c:	f04f 0500 	mov.w	r5, #0
 8009d80:	ea00 0204 	and.w	r2, r0, r4
 8009d84:	ea01 0305 	and.w	r3, r1, r5
 8009d88:	493d      	ldr	r1, [pc, #244]	; (8009e80 <HAL_RCC_GetSysClockFreq+0x168>)
 8009d8a:	fb01 f003 	mul.w	r0, r1, r3
 8009d8e:	2100      	movs	r1, #0
 8009d90:	fb01 f102 	mul.w	r1, r1, r2
 8009d94:	1844      	adds	r4, r0, r1
 8009d96:	493a      	ldr	r1, [pc, #232]	; (8009e80 <HAL_RCC_GetSysClockFreq+0x168>)
 8009d98:	fba2 0101 	umull	r0, r1, r2, r1
 8009d9c:	1863      	adds	r3, r4, r1
 8009d9e:	4619      	mov	r1, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	461a      	mov	r2, r3
 8009da4:	f04f 0300 	mov.w	r3, #0
 8009da8:	f7f6 ff86 	bl	8000cb8 <__aeabi_uldivmod>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	4613      	mov	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	e04a      	b.n	8009e4c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009db6:	4b30      	ldr	r3, [pc, #192]	; (8009e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	099b      	lsrs	r3, r3, #6
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f04f 0300 	mov.w	r3, #0
 8009dc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009dc6:	f04f 0100 	mov.w	r1, #0
 8009dca:	ea02 0400 	and.w	r4, r2, r0
 8009dce:	ea03 0501 	and.w	r5, r3, r1
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	f04f 0200 	mov.w	r2, #0
 8009dda:	f04f 0300 	mov.w	r3, #0
 8009dde:	014b      	lsls	r3, r1, #5
 8009de0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009de4:	0142      	lsls	r2, r0, #5
 8009de6:	4610      	mov	r0, r2
 8009de8:	4619      	mov	r1, r3
 8009dea:	1b00      	subs	r0, r0, r4
 8009dec:	eb61 0105 	sbc.w	r1, r1, r5
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	f04f 0300 	mov.w	r3, #0
 8009df8:	018b      	lsls	r3, r1, #6
 8009dfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009dfe:	0182      	lsls	r2, r0, #6
 8009e00:	1a12      	subs	r2, r2, r0
 8009e02:	eb63 0301 	sbc.w	r3, r3, r1
 8009e06:	f04f 0000 	mov.w	r0, #0
 8009e0a:	f04f 0100 	mov.w	r1, #0
 8009e0e:	00d9      	lsls	r1, r3, #3
 8009e10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e14:	00d0      	lsls	r0, r2, #3
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	1912      	adds	r2, r2, r4
 8009e1c:	eb45 0303 	adc.w	r3, r5, r3
 8009e20:	f04f 0000 	mov.w	r0, #0
 8009e24:	f04f 0100 	mov.w	r1, #0
 8009e28:	0299      	lsls	r1, r3, #10
 8009e2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009e2e:	0290      	lsls	r0, r2, #10
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4610      	mov	r0, r2
 8009e36:	4619      	mov	r1, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	f04f 0300 	mov.w	r3, #0
 8009e40:	f7f6 ff3a 	bl	8000cb8 <__aeabi_uldivmod>
 8009e44:	4602      	mov	r2, r0
 8009e46:	460b      	mov	r3, r1
 8009e48:	4613      	mov	r3, r2
 8009e4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009e4c:	4b0a      	ldr	r3, [pc, #40]	; (8009e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	0c1b      	lsrs	r3, r3, #16
 8009e52:	f003 0303 	and.w	r3, r3, #3
 8009e56:	3301      	adds	r3, #1
 8009e58:	005b      	lsls	r3, r3, #1
 8009e5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e64:	60bb      	str	r3, [r7, #8]
      break;
 8009e66:	e002      	b.n	8009e6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e68:	4b04      	ldr	r3, [pc, #16]	; (8009e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8009e6a:	60bb      	str	r3, [r7, #8]
      break;
 8009e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bdb0      	pop	{r4, r5, r7, pc}
 8009e78:	40023800 	.word	0x40023800
 8009e7c:	00f42400 	.word	0x00f42400
 8009e80:	017d7840 	.word	0x017d7840

08009e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e84:	b480      	push	{r7}
 8009e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e88:	4b03      	ldr	r3, [pc, #12]	; (8009e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	20000034 	.word	0x20000034

08009e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009ea0:	f7ff fff0 	bl	8009e84 <HAL_RCC_GetHCLKFreq>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	0a9b      	lsrs	r3, r3, #10
 8009eac:	f003 0307 	and.w	r3, r3, #7
 8009eb0:	4903      	ldr	r1, [pc, #12]	; (8009ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009eb2:	5ccb      	ldrb	r3, [r1, r3]
 8009eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	40023800 	.word	0x40023800
 8009ec0:	08023efc 	.word	0x08023efc

08009ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009ec8:	f7ff ffdc 	bl	8009e84 <HAL_RCC_GetHCLKFreq>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	4b05      	ldr	r3, [pc, #20]	; (8009ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	0b5b      	lsrs	r3, r3, #13
 8009ed4:	f003 0307 	and.w	r3, r3, #7
 8009ed8:	4903      	ldr	r1, [pc, #12]	; (8009ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009eda:	5ccb      	ldrb	r3, [r1, r3]
 8009edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	40023800 	.word	0x40023800
 8009ee8:	08023efc 	.word	0x08023efc

08009eec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e07b      	b.n	8009ff6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d108      	bne.n	8009f18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f0e:	d009      	beq.n	8009f24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	61da      	str	r2, [r3, #28]
 8009f16:	e005      	b.n	8009f24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d106      	bne.n	8009f44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7fb f9bc 	bl	80052bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2202      	movs	r2, #2
 8009f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f76:	431a      	orrs	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	f003 0302 	and.w	r3, r3, #2
 8009f80:	431a      	orrs	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	695b      	ldr	r3, [r3, #20]
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f94:	431a      	orrs	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	69db      	ldr	r3, [r3, #28]
 8009f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa8:	ea42 0103 	orr.w	r1, r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	0c1b      	lsrs	r3, r3, #16
 8009fc2:	f003 0104 	and.w	r1, r3, #4
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	f003 0210 	and.w	r2, r3, #16
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69da      	ldr	r2, [r3, #28]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fe4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b08c      	sub	sp, #48	; 0x30
 800a002:	af00      	add	r7, sp, #0
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a00c:	2301      	movs	r3, #1
 800a00e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d101      	bne.n	800a024 <HAL_SPI_TransmitReceive+0x26>
 800a020:	2302      	movs	r3, #2
 800a022:	e18a      	b.n	800a33a <HAL_SPI_TransmitReceive+0x33c>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a02c:	f7fb fee8 	bl	8005e00 <HAL_GetTick>
 800a030:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a042:	887b      	ldrh	r3, [r7, #2]
 800a044:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a046:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d00f      	beq.n	800a06e <HAL_SPI_TransmitReceive+0x70>
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a054:	d107      	bne.n	800a066 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d103      	bne.n	800a066 <HAL_SPI_TransmitReceive+0x68>
 800a05e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a062:	2b04      	cmp	r3, #4
 800a064:	d003      	beq.n	800a06e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a066:	2302      	movs	r3, #2
 800a068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a06c:	e15b      	b.n	800a326 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d005      	beq.n	800a080 <HAL_SPI_TransmitReceive+0x82>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d002      	beq.n	800a080 <HAL_SPI_TransmitReceive+0x82>
 800a07a:	887b      	ldrh	r3, [r7, #2]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d103      	bne.n	800a088 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a086:	e14e      	b.n	800a326 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	2b04      	cmp	r3, #4
 800a092:	d003      	beq.n	800a09c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2205      	movs	r2, #5
 800a098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	887a      	ldrh	r2, [r7, #2]
 800a0ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	887a      	ldrh	r2, [r7, #2]
 800a0b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	887a      	ldrh	r2, [r7, #2]
 800a0be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	887a      	ldrh	r2, [r7, #2]
 800a0c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0dc:	2b40      	cmp	r3, #64	; 0x40
 800a0de:	d007      	beq.n	800a0f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0f8:	d178      	bne.n	800a1ec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d002      	beq.n	800a108 <HAL_SPI_TransmitReceive+0x10a>
 800a102:	8b7b      	ldrh	r3, [r7, #26]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d166      	bne.n	800a1d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10c:	881a      	ldrh	r2, [r3, #0]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a118:	1c9a      	adds	r2, r3, #2
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a122:	b29b      	uxth	r3, r3
 800a124:	3b01      	subs	r3, #1
 800a126:	b29a      	uxth	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a12c:	e053      	b.n	800a1d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	f003 0302 	and.w	r3, r3, #2
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d11b      	bne.n	800a174 <HAL_SPI_TransmitReceive+0x176>
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a140:	b29b      	uxth	r3, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	d016      	beq.n	800a174 <HAL_SPI_TransmitReceive+0x176>
 800a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d113      	bne.n	800a174 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a150:	881a      	ldrh	r2, [r3, #0]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15c:	1c9a      	adds	r2, r3, #2
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a166:	b29b      	uxth	r3, r3
 800a168:	3b01      	subs	r3, #1
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a170:	2300      	movs	r3, #0
 800a172:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	f003 0301 	and.w	r3, r3, #1
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d119      	bne.n	800a1b6 <HAL_SPI_TransmitReceive+0x1b8>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a186:	b29b      	uxth	r3, r3
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d014      	beq.n	800a1b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a196:	b292      	uxth	r2, r2
 800a198:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19e:	1c9a      	adds	r2, r3, #2
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a1b6:	f7fb fe23 	bl	8005e00 <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d807      	bhi.n	800a1d6 <HAL_SPI_TransmitReceive+0x1d8>
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1cc:	d003      	beq.n	800a1d6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a1d4:	e0a7      	b.n	800a326 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1a6      	bne.n	800a12e <HAL_SPI_TransmitReceive+0x130>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1a1      	bne.n	800a12e <HAL_SPI_TransmitReceive+0x130>
 800a1ea:	e07c      	b.n	800a2e6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <HAL_SPI_TransmitReceive+0x1fc>
 800a1f4:	8b7b      	ldrh	r3, [r7, #26]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d16b      	bne.n	800a2d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	330c      	adds	r3, #12
 800a204:	7812      	ldrb	r2, [r2, #0]
 800a206:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20c:	1c5a      	adds	r2, r3, #1
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a216:	b29b      	uxth	r3, r3
 800a218:	3b01      	subs	r3, #1
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a220:	e057      	b.n	800a2d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	f003 0302 	and.w	r3, r3, #2
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d11c      	bne.n	800a26a <HAL_SPI_TransmitReceive+0x26c>
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a234:	b29b      	uxth	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	d017      	beq.n	800a26a <HAL_SPI_TransmitReceive+0x26c>
 800a23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d114      	bne.n	800a26a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	330c      	adds	r3, #12
 800a24a:	7812      	ldrb	r2, [r2, #0]
 800a24c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	3b01      	subs	r3, #1
 800a260:	b29a      	uxth	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	f003 0301 	and.w	r3, r3, #1
 800a274:	2b01      	cmp	r3, #1
 800a276:	d119      	bne.n	800a2ac <HAL_SPI_TransmitReceive+0x2ae>
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d014      	beq.n	800a2ac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68da      	ldr	r2, [r3, #12]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28c:	b2d2      	uxtb	r2, r2
 800a28e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a294:	1c5a      	adds	r2, r3, #1
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a2ac:	f7fb fda8 	bl	8005e00 <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d803      	bhi.n	800a2c4 <HAL_SPI_TransmitReceive+0x2c6>
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c2:	d102      	bne.n	800a2ca <HAL_SPI_TransmitReceive+0x2cc>
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d103      	bne.n	800a2d2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a2d0:	e029      	b.n	800a326 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1a2      	bne.n	800a222 <HAL_SPI_TransmitReceive+0x224>
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d19d      	bne.n	800a222 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a2e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f000 f9d0 	bl	800a690 <SPI_EndRxTxTransaction>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d006      	beq.n	800a304 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2220      	movs	r2, #32
 800a300:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a302:	e010      	b.n	800a326 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10b      	bne.n	800a324 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a30c:	2300      	movs	r3, #0
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	617b      	str	r3, [r7, #20]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	617b      	str	r3, [r7, #20]
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	e000      	b.n	800a326 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a324:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2201      	movs	r2, #1
 800a32a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a336:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3730      	adds	r7, #48	; 0x30
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b088      	sub	sp, #32
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	099b      	lsrs	r3, r3, #6
 800a360:	f003 0301 	and.w	r3, r3, #1
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10f      	bne.n	800a388 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00a      	beq.n	800a388 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	099b      	lsrs	r3, r3, #6
 800a376:	f003 0301 	and.w	r3, r3, #1
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d004      	beq.n	800a388 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	4798      	blx	r3
    return;
 800a386:	e0d7      	b.n	800a538 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	085b      	lsrs	r3, r3, #1
 800a38c:	f003 0301 	and.w	r3, r3, #1
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00a      	beq.n	800a3aa <HAL_SPI_IRQHandler+0x66>
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	09db      	lsrs	r3, r3, #7
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d004      	beq.n	800a3aa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	4798      	blx	r3
    return;
 800a3a8:	e0c6      	b.n	800a538 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	095b      	lsrs	r3, r3, #5
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10c      	bne.n	800a3d0 <HAL_SPI_IRQHandler+0x8c>
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	099b      	lsrs	r3, r3, #6
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d106      	bne.n	800a3d0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	0a1b      	lsrs	r3, r3, #8
 800a3c6:	f003 0301 	and.w	r3, r3, #1
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f000 80b4 	beq.w	800a538 <HAL_SPI_IRQHandler+0x1f4>
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	095b      	lsrs	r3, r3, #5
 800a3d4:	f003 0301 	and.w	r3, r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 80ad 	beq.w	800a538 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	099b      	lsrs	r3, r3, #6
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d023      	beq.n	800a432 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d011      	beq.n	800a41a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fa:	f043 0204 	orr.w	r2, r3, #4
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a402:	2300      	movs	r3, #0
 800a404:	617b      	str	r3, [r7, #20]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	617b      	str	r3, [r7, #20]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	617b      	str	r3, [r7, #20]
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	e00b      	b.n	800a432 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a41a:	2300      	movs	r3, #0
 800a41c:	613b      	str	r3, [r7, #16]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	613b      	str	r3, [r7, #16]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	613b      	str	r3, [r7, #16]
 800a42e:	693b      	ldr	r3, [r7, #16]
        return;
 800a430:	e082      	b.n	800a538 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	095b      	lsrs	r3, r3, #5
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d014      	beq.n	800a468 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a442:	f043 0201 	orr.w	r2, r3, #1
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a44a:	2300      	movs	r3, #0
 800a44c:	60fb      	str	r3, [r7, #12]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	60fb      	str	r3, [r7, #12]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	0a1b      	lsrs	r3, r3, #8
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00c      	beq.n	800a48e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a478:	f043 0208 	orr.w	r2, r3, #8
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a480:	2300      	movs	r3, #0
 800a482:	60bb      	str	r3, [r7, #8]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	60bb      	str	r3, [r7, #8]
 800a48c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a492:	2b00      	cmp	r3, #0
 800a494:	d04f      	beq.n	800a536 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a4a4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	f003 0302 	and.w	r3, r3, #2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d104      	bne.n	800a4c2 <HAL_SPI_IRQHandler+0x17e>
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d034      	beq.n	800a52c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f022 0203 	bic.w	r2, r2, #3
 800a4d0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d011      	beq.n	800a4fe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4de:	4a18      	ldr	r2, [pc, #96]	; (800a540 <HAL_SPI_IRQHandler+0x1fc>)
 800a4e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fb ffd0 	bl	800648c <HAL_DMA_Abort_IT>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d005      	beq.n	800a4fe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a502:	2b00      	cmp	r3, #0
 800a504:	d016      	beq.n	800a534 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a50a:	4a0d      	ldr	r2, [pc, #52]	; (800a540 <HAL_SPI_IRQHandler+0x1fc>)
 800a50c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a512:	4618      	mov	r0, r3
 800a514:	f7fb ffba 	bl	800648c <HAL_DMA_Abort_IT>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00a      	beq.n	800a534 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a522:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a52a:	e003      	b.n	800a534 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 f809 	bl	800a544 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a532:	e000      	b.n	800a536 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a534:	bf00      	nop
    return;
 800a536:	bf00      	nop
  }
}
 800a538:	3720      	adds	r7, #32
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	0800a559 	.word	0x0800a559

0800a544 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a564:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2200      	movs	r2, #0
 800a56a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7ff ffe6 	bl	800a544 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a578:	bf00      	nop
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b088      	sub	sp, #32
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	603b      	str	r3, [r7, #0]
 800a58c:	4613      	mov	r3, r2
 800a58e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a590:	f7fb fc36 	bl	8005e00 <HAL_GetTick>
 800a594:	4602      	mov	r2, r0
 800a596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a598:	1a9b      	subs	r3, r3, r2
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	4413      	add	r3, r2
 800a59e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a5a0:	f7fb fc2e 	bl	8005e00 <HAL_GetTick>
 800a5a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a5a6:	4b39      	ldr	r3, [pc, #228]	; (800a68c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	015b      	lsls	r3, r3, #5
 800a5ac:	0d1b      	lsrs	r3, r3, #20
 800a5ae:	69fa      	ldr	r2, [r7, #28]
 800a5b0:	fb02 f303 	mul.w	r3, r2, r3
 800a5b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5b6:	e054      	b.n	800a662 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5be:	d050      	beq.n	800a662 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5c0:	f7fb fc1e 	bl	8005e00 <HAL_GetTick>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	69fa      	ldr	r2, [r7, #28]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d902      	bls.n	800a5d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d13d      	bne.n	800a652 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a5e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5ee:	d111      	bne.n	800a614 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5f8:	d004      	beq.n	800a604 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a602:	d107      	bne.n	800a614 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a612:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a61c:	d10f      	bne.n	800a63e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a62c:	601a      	str	r2, [r3, #0]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a63c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2201      	movs	r2, #1
 800a642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a64e:	2303      	movs	r3, #3
 800a650:	e017      	b.n	800a682 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d101      	bne.n	800a65c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a658:	2300      	movs	r3, #0
 800a65a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	3b01      	subs	r3, #1
 800a660:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	4013      	ands	r3, r2
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	429a      	cmp	r2, r3
 800a670:	bf0c      	ite	eq
 800a672:	2301      	moveq	r3, #1
 800a674:	2300      	movne	r3, #0
 800a676:	b2db      	uxtb	r3, r3
 800a678:	461a      	mov	r2, r3
 800a67a:	79fb      	ldrb	r3, [r7, #7]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d19b      	bne.n	800a5b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3720      	adds	r7, #32
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	20000034 	.word	0x20000034

0800a690 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b088      	sub	sp, #32
 800a694:	af02      	add	r7, sp, #8
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a69c:	4b1b      	ldr	r3, [pc, #108]	; (800a70c <SPI_EndRxTxTransaction+0x7c>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a1b      	ldr	r2, [pc, #108]	; (800a710 <SPI_EndRxTxTransaction+0x80>)
 800a6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6a6:	0d5b      	lsrs	r3, r3, #21
 800a6a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6ac:	fb02 f303 	mul.w	r3, r2, r3
 800a6b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6ba:	d112      	bne.n	800a6e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	2180      	movs	r1, #128	; 0x80
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f7ff ff5a 	bl	800a580 <SPI_WaitFlagStateUntilTimeout>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d016      	beq.n	800a700 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d6:	f043 0220 	orr.w	r2, r3, #32
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e00f      	b.n	800a702 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00a      	beq.n	800a6fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6f8:	2b80      	cmp	r3, #128	; 0x80
 800a6fa:	d0f2      	beq.n	800a6e2 <SPI_EndRxTxTransaction+0x52>
 800a6fc:	e000      	b.n	800a700 <SPI_EndRxTxTransaction+0x70>
        break;
 800a6fe:	bf00      	nop
  }

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3718      	adds	r7, #24
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	20000034 	.word	0x20000034
 800a710:	165e9f81 	.word	0x165e9f81

0800a714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d101      	bne.n	800a726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	e041      	b.n	800a7aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d106      	bne.n	800a740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f7fb f814 	bl	8005768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2202      	movs	r2, #2
 800a744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3304      	adds	r3, #4
 800a750:	4619      	mov	r1, r3
 800a752:	4610      	mov	r0, r2
 800a754:	f000 f9f0 	bl	800ab38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d001      	beq.n	800a7cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e044      	b.n	800a856 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68da      	ldr	r2, [r3, #12]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f042 0201 	orr.w	r2, r2, #1
 800a7e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a1e      	ldr	r2, [pc, #120]	; (800a864 <HAL_TIM_Base_Start_IT+0xb0>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d018      	beq.n	800a820 <HAL_TIM_Base_Start_IT+0x6c>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7f6:	d013      	beq.n	800a820 <HAL_TIM_Base_Start_IT+0x6c>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a1a      	ldr	r2, [pc, #104]	; (800a868 <HAL_TIM_Base_Start_IT+0xb4>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d00e      	beq.n	800a820 <HAL_TIM_Base_Start_IT+0x6c>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a19      	ldr	r2, [pc, #100]	; (800a86c <HAL_TIM_Base_Start_IT+0xb8>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d009      	beq.n	800a820 <HAL_TIM_Base_Start_IT+0x6c>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a17      	ldr	r2, [pc, #92]	; (800a870 <HAL_TIM_Base_Start_IT+0xbc>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d004      	beq.n	800a820 <HAL_TIM_Base_Start_IT+0x6c>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a16      	ldr	r2, [pc, #88]	; (800a874 <HAL_TIM_Base_Start_IT+0xc0>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d111      	bne.n	800a844 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2b06      	cmp	r3, #6
 800a830:	d010      	beq.n	800a854 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f042 0201 	orr.w	r2, r2, #1
 800a840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a842:	e007      	b.n	800a854 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f042 0201 	orr.w	r2, r2, #1
 800a852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	40010000 	.word	0x40010000
 800a868:	40000400 	.word	0x40000400
 800a86c:	40000800 	.word	0x40000800
 800a870:	40000c00 	.word	0x40000c00
 800a874:	40014000 	.word	0x40014000

0800a878 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68da      	ldr	r2, [r3, #12]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f022 0201 	bic.w	r2, r2, #1
 800a88e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	6a1a      	ldr	r2, [r3, #32]
 800a896:	f241 1311 	movw	r3, #4369	; 0x1111
 800a89a:	4013      	ands	r3, r2
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10f      	bne.n	800a8c0 <HAL_TIM_Base_Stop_IT+0x48>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	6a1a      	ldr	r2, [r3, #32]
 800a8a6:	f240 4344 	movw	r3, #1092	; 0x444
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d107      	bne.n	800a8c0 <HAL_TIM_Base_Stop_IT+0x48>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f022 0201 	bic.w	r2, r2, #1
 800a8be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	370c      	adds	r7, #12
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b082      	sub	sp, #8
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	f003 0302 	and.w	r3, r3, #2
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d122      	bne.n	800a932 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	f003 0302 	and.w	r3, r3, #2
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d11b      	bne.n	800a932 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f06f 0202 	mvn.w	r2, #2
 800a902:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	699b      	ldr	r3, [r3, #24]
 800a910:	f003 0303 	and.w	r3, r3, #3
 800a914:	2b00      	cmp	r3, #0
 800a916:	d003      	beq.n	800a920 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 f8ee 	bl	800aafa <HAL_TIM_IC_CaptureCallback>
 800a91e:	e005      	b.n	800a92c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f8e0 	bl	800aae6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f8f1 	bl	800ab0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	691b      	ldr	r3, [r3, #16]
 800a938:	f003 0304 	and.w	r3, r3, #4
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d122      	bne.n	800a986 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	f003 0304 	and.w	r3, r3, #4
 800a94a:	2b04      	cmp	r3, #4
 800a94c:	d11b      	bne.n	800a986 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f06f 0204 	mvn.w	r2, #4
 800a956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2202      	movs	r2, #2
 800a95c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d003      	beq.n	800a974 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 f8c4 	bl	800aafa <HAL_TIM_IC_CaptureCallback>
 800a972:	e005      	b.n	800a980 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 f8b6 	bl	800aae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f8c7 	bl	800ab0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	f003 0308 	and.w	r3, r3, #8
 800a990:	2b08      	cmp	r3, #8
 800a992:	d122      	bne.n	800a9da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	f003 0308 	and.w	r3, r3, #8
 800a99e:	2b08      	cmp	r3, #8
 800a9a0:	d11b      	bne.n	800a9da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f06f 0208 	mvn.w	r2, #8
 800a9aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2204      	movs	r2, #4
 800a9b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	69db      	ldr	r3, [r3, #28]
 800a9b8:	f003 0303 	and.w	r3, r3, #3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d003      	beq.n	800a9c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f89a 	bl	800aafa <HAL_TIM_IC_CaptureCallback>
 800a9c6:	e005      	b.n	800a9d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f88c 	bl	800aae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f89d 	bl	800ab0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	f003 0310 	and.w	r3, r3, #16
 800a9e4:	2b10      	cmp	r3, #16
 800a9e6:	d122      	bne.n	800aa2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	f003 0310 	and.w	r3, r3, #16
 800a9f2:	2b10      	cmp	r3, #16
 800a9f4:	d11b      	bne.n	800aa2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f06f 0210 	mvn.w	r2, #16
 800a9fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2208      	movs	r2, #8
 800aa04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	69db      	ldr	r3, [r3, #28]
 800aa0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d003      	beq.n	800aa1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f870 	bl	800aafa <HAL_TIM_IC_CaptureCallback>
 800aa1a:	e005      	b.n	800aa28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f862 	bl	800aae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f873 	bl	800ab0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	f003 0301 	and.w	r3, r3, #1
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d10e      	bne.n	800aa5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d107      	bne.n	800aa5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f06f 0201 	mvn.w	r2, #1
 800aa52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7f9 f971 	bl	8003d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa64:	2b80      	cmp	r3, #128	; 0x80
 800aa66:	d10e      	bne.n	800aa86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa72:	2b80      	cmp	r3, #128	; 0x80
 800aa74:	d107      	bne.n	800aa86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 f8e3 	bl	800ac4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa90:	2b40      	cmp	r3, #64	; 0x40
 800aa92:	d10e      	bne.n	800aab2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa9e:	2b40      	cmp	r3, #64	; 0x40
 800aaa0:	d107      	bne.n	800aab2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aaaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 f838 	bl	800ab22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	f003 0320 	and.w	r3, r3, #32
 800aabc:	2b20      	cmp	r3, #32
 800aabe:	d10e      	bne.n	800aade <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	f003 0320 	and.w	r3, r3, #32
 800aaca:	2b20      	cmp	r3, #32
 800aacc:	d107      	bne.n	800aade <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f06f 0220 	mvn.w	r2, #32
 800aad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 f8ad 	bl	800ac38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aade:	bf00      	nop
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aaee:	bf00      	nop
 800aaf0:	370c      	adds	r7, #12
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aafa:	b480      	push	{r7}
 800aafc:	b083      	sub	sp, #12
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab02:	bf00      	nop
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr

0800ab0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab0e:	b480      	push	{r7}
 800ab10:	b083      	sub	sp, #12
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab16:	bf00      	nop
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b083      	sub	sp, #12
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab2a:	bf00      	nop
 800ab2c:	370c      	adds	r7, #12
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
	...

0800ab38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a34      	ldr	r2, [pc, #208]	; (800ac1c <TIM_Base_SetConfig+0xe4>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d00f      	beq.n	800ab70 <TIM_Base_SetConfig+0x38>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab56:	d00b      	beq.n	800ab70 <TIM_Base_SetConfig+0x38>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a31      	ldr	r2, [pc, #196]	; (800ac20 <TIM_Base_SetConfig+0xe8>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d007      	beq.n	800ab70 <TIM_Base_SetConfig+0x38>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a30      	ldr	r2, [pc, #192]	; (800ac24 <TIM_Base_SetConfig+0xec>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d003      	beq.n	800ab70 <TIM_Base_SetConfig+0x38>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a2f      	ldr	r2, [pc, #188]	; (800ac28 <TIM_Base_SetConfig+0xf0>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d108      	bne.n	800ab82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a25      	ldr	r2, [pc, #148]	; (800ac1c <TIM_Base_SetConfig+0xe4>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d01b      	beq.n	800abc2 <TIM_Base_SetConfig+0x8a>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab90:	d017      	beq.n	800abc2 <TIM_Base_SetConfig+0x8a>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a22      	ldr	r2, [pc, #136]	; (800ac20 <TIM_Base_SetConfig+0xe8>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d013      	beq.n	800abc2 <TIM_Base_SetConfig+0x8a>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a21      	ldr	r2, [pc, #132]	; (800ac24 <TIM_Base_SetConfig+0xec>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d00f      	beq.n	800abc2 <TIM_Base_SetConfig+0x8a>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a20      	ldr	r2, [pc, #128]	; (800ac28 <TIM_Base_SetConfig+0xf0>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d00b      	beq.n	800abc2 <TIM_Base_SetConfig+0x8a>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a1f      	ldr	r2, [pc, #124]	; (800ac2c <TIM_Base_SetConfig+0xf4>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d007      	beq.n	800abc2 <TIM_Base_SetConfig+0x8a>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a1e      	ldr	r2, [pc, #120]	; (800ac30 <TIM_Base_SetConfig+0xf8>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d003      	beq.n	800abc2 <TIM_Base_SetConfig+0x8a>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a1d      	ldr	r2, [pc, #116]	; (800ac34 <TIM_Base_SetConfig+0xfc>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d108      	bne.n	800abd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	68fa      	ldr	r2, [r7, #12]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	4313      	orrs	r3, r2
 800abe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	689a      	ldr	r2, [r3, #8]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a08      	ldr	r2, [pc, #32]	; (800ac1c <TIM_Base_SetConfig+0xe4>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d103      	bne.n	800ac08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	691a      	ldr	r2, [r3, #16]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	615a      	str	r2, [r3, #20]
}
 800ac0e:	bf00      	nop
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	40010000 	.word	0x40010000
 800ac20:	40000400 	.word	0x40000400
 800ac24:	40000800 	.word	0x40000800
 800ac28:	40000c00 	.word	0x40000c00
 800ac2c:	40014000 	.word	0x40014000
 800ac30:	40014400 	.word	0x40014400
 800ac34:	40014800 	.word	0x40014800

0800ac38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e03f      	b.n	800acf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7fa ff7e 	bl	8005b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2224      	movs	r2, #36	; 0x24
 800ac90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68da      	ldr	r2, [r3, #12]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aca2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 ff53 	bl	800bb50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	691a      	ldr	r2, [r3, #16]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800acb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	695a      	ldr	r2, [r3, #20]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800acc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68da      	ldr	r2, [r3, #12]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800acd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2220      	movs	r2, #32
 800ace4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2220      	movs	r2, #32
 800acec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08c      	sub	sp, #48	; 0x30
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	4613      	mov	r3, r2
 800ad08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	2b20      	cmp	r3, #32
 800ad14:	d165      	bne.n	800ade2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d002      	beq.n	800ad22 <HAL_UART_Transmit_DMA+0x26>
 800ad1c:	88fb      	ldrh	r3, [r7, #6]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d101      	bne.n	800ad26 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e05e      	b.n	800ade4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d101      	bne.n	800ad34 <HAL_UART_Transmit_DMA+0x38>
 800ad30:	2302      	movs	r3, #2
 800ad32:	e057      	b.n	800ade4 <HAL_UART_Transmit_DMA+0xe8>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	88fa      	ldrh	r2, [r7, #6]
 800ad46:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	88fa      	ldrh	r2, [r7, #6]
 800ad4c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2221      	movs	r2, #33	; 0x21
 800ad58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad60:	4a22      	ldr	r2, [pc, #136]	; (800adec <HAL_UART_Transmit_DMA+0xf0>)
 800ad62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad68:	4a21      	ldr	r2, [pc, #132]	; (800adf0 <HAL_UART_Transmit_DMA+0xf4>)
 800ad6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad70:	4a20      	ldr	r2, [pc, #128]	; (800adf4 <HAL_UART_Transmit_DMA+0xf8>)
 800ad72:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad78:	2200      	movs	r2, #0
 800ad7a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800ad7c:	f107 0308 	add.w	r3, r7, #8
 800ad80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ad86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad88:	6819      	ldr	r1, [r3, #0]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	461a      	mov	r2, r3
 800ad92:	88fb      	ldrh	r3, [r7, #6]
 800ad94:	f7fb fab2 	bl	80062fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ada0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	3314      	adds	r3, #20
 800adb0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	e853 3f00 	ldrex	r3, [r3]
 800adb8:	617b      	str	r3, [r7, #20]
   return(result);
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adc0:	62bb      	str	r3, [r7, #40]	; 0x28
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3314      	adds	r3, #20
 800adc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adca:	627a      	str	r2, [r7, #36]	; 0x24
 800adcc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adce:	6a39      	ldr	r1, [r7, #32]
 800add0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800add2:	e841 2300 	strex	r3, r2, [r1]
 800add6:	61fb      	str	r3, [r7, #28]
   return(result);
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1e5      	bne.n	800adaa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	e000      	b.n	800ade4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800ade2:	2302      	movs	r3, #2
  }
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3730      	adds	r7, #48	; 0x30
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	0800b3f1 	.word	0x0800b3f1
 800adf0:	0800b48b 	.word	0x0800b48b
 800adf4:	0800b603 	.word	0x0800b603

0800adf8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	4613      	mov	r3, r2
 800ae04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b20      	cmp	r3, #32
 800ae10:	d11d      	bne.n	800ae4e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <HAL_UART_Receive_DMA+0x26>
 800ae18:	88fb      	ldrh	r3, [r7, #6]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e016      	b.n	800ae50 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d101      	bne.n	800ae30 <HAL_UART_Receive_DMA+0x38>
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	e00f      	b.n	800ae50 <HAL_UART_Receive_DMA+0x58>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ae3e:	88fb      	ldrh	r3, [r7, #6]
 800ae40:	461a      	mov	r2, r3
 800ae42:	68b9      	ldr	r1, [r7, #8]
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f000 fc27 	bl	800b698 <UART_Start_Receive_DMA>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	e000      	b.n	800ae50 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ae4e:	2302      	movs	r3, #2
  }
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b0ba      	sub	sp, #232	; 0xe8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ae84:	2300      	movs	r3, #0
 800ae86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae8e:	f003 030f 	and.w	r3, r3, #15
 800ae92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ae96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10f      	bne.n	800aebe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aea2:	f003 0320 	and.w	r3, r3, #32
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d009      	beq.n	800aebe <HAL_UART_IRQHandler+0x66>
 800aeaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeae:	f003 0320 	and.w	r3, r3, #32
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d003      	beq.n	800aebe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fd8f 	bl	800b9da <UART_Receive_IT>
      return;
 800aebc:	e256      	b.n	800b36c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 80de 	beq.w	800b084 <HAL_UART_IRQHandler+0x22c>
 800aec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aecc:	f003 0301 	and.w	r3, r3, #1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d106      	bne.n	800aee2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aed8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f000 80d1 	beq.w	800b084 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aee6:	f003 0301 	and.w	r3, r3, #1
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00b      	beq.n	800af06 <HAL_UART_IRQHandler+0xae>
 800aeee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d005      	beq.n	800af06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefe:	f043 0201 	orr.w	r2, r3, #1
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af0a:	f003 0304 	and.w	r3, r3, #4
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00b      	beq.n	800af2a <HAL_UART_IRQHandler+0xd2>
 800af12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af16:	f003 0301 	and.w	r3, r3, #1
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d005      	beq.n	800af2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af22:	f043 0202 	orr.w	r2, r3, #2
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af2e:	f003 0302 	and.w	r3, r3, #2
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00b      	beq.n	800af4e <HAL_UART_IRQHandler+0xf6>
 800af36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d005      	beq.n	800af4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af46:	f043 0204 	orr.w	r2, r3, #4
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800af4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af52:	f003 0308 	and.w	r3, r3, #8
 800af56:	2b00      	cmp	r3, #0
 800af58:	d011      	beq.n	800af7e <HAL_UART_IRQHandler+0x126>
 800af5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af5e:	f003 0320 	and.w	r3, r3, #32
 800af62:	2b00      	cmp	r3, #0
 800af64:	d105      	bne.n	800af72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d005      	beq.n	800af7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af76:	f043 0208 	orr.w	r2, r3, #8
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af82:	2b00      	cmp	r3, #0
 800af84:	f000 81ed 	beq.w	800b362 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af8c:	f003 0320 	and.w	r3, r3, #32
 800af90:	2b00      	cmp	r3, #0
 800af92:	d008      	beq.n	800afa6 <HAL_UART_IRQHandler+0x14e>
 800af94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af98:	f003 0320 	and.w	r3, r3, #32
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fd1a 	bl	800b9da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb0:	2b40      	cmp	r3, #64	; 0x40
 800afb2:	bf0c      	ite	eq
 800afb4:	2301      	moveq	r3, #1
 800afb6:	2300      	movne	r3, #0
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc2:	f003 0308 	and.w	r3, r3, #8
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d103      	bne.n	800afd2 <HAL_UART_IRQHandler+0x17a>
 800afca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d04f      	beq.n	800b072 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fc22 	bl	800b81c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe2:	2b40      	cmp	r3, #64	; 0x40
 800afe4:	d141      	bne.n	800b06a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3314      	adds	r3, #20
 800afec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aff4:	e853 3f00 	ldrex	r3, [r3]
 800aff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800affc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3314      	adds	r3, #20
 800b00e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b012:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b01e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b022:	e841 2300 	strex	r3, r2, [r1]
 800b026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b02a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1d9      	bne.n	800afe6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b036:	2b00      	cmp	r3, #0
 800b038:	d013      	beq.n	800b062 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03e:	4a7d      	ldr	r2, [pc, #500]	; (800b234 <HAL_UART_IRQHandler+0x3dc>)
 800b040:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b046:	4618      	mov	r0, r3
 800b048:	f7fb fa20 	bl	800648c <HAL_DMA_Abort_IT>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d016      	beq.n	800b080 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b05c:	4610      	mov	r0, r2
 800b05e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b060:	e00e      	b.n	800b080 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f9ae 	bl	800b3c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b068:	e00a      	b.n	800b080 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f9aa 	bl	800b3c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b070:	e006      	b.n	800b080 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f9a6 	bl	800b3c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b07e:	e170      	b.n	800b362 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b080:	bf00      	nop
    return;
 800b082:	e16e      	b.n	800b362 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b088:	2b01      	cmp	r3, #1
 800b08a:	f040 814a 	bne.w	800b322 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b08e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b092:	f003 0310 	and.w	r3, r3, #16
 800b096:	2b00      	cmp	r3, #0
 800b098:	f000 8143 	beq.w	800b322 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b09c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0a0:	f003 0310 	and.w	r3, r3, #16
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 813c 	beq.w	800b322 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60bb      	str	r3, [r7, #8]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	60bb      	str	r3, [r7, #8]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	60bb      	str	r3, [r7, #8]
 800b0be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	695b      	ldr	r3, [r3, #20]
 800b0c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ca:	2b40      	cmp	r3, #64	; 0x40
 800b0cc:	f040 80b4 	bne.w	800b238 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 8140 	beq.w	800b366 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	f080 8139 	bcs.w	800b366 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b106:	f000 8088 	beq.w	800b21a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	330c      	adds	r3, #12
 800b110:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b114:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b118:	e853 3f00 	ldrex	r3, [r3]
 800b11c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b128:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	330c      	adds	r3, #12
 800b132:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b136:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b13a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b142:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b146:	e841 2300 	strex	r3, r2, [r1]
 800b14a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b14e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1d9      	bne.n	800b10a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	3314      	adds	r3, #20
 800b15c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b160:	e853 3f00 	ldrex	r3, [r3]
 800b164:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b168:	f023 0301 	bic.w	r3, r3, #1
 800b16c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3314      	adds	r3, #20
 800b176:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b17a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b17e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b180:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b182:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b186:	e841 2300 	strex	r3, r2, [r1]
 800b18a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b18c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1e1      	bne.n	800b156 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3314      	adds	r3, #20
 800b198:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b19c:	e853 3f00 	ldrex	r3, [r3]
 800b1a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b1a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	3314      	adds	r3, #20
 800b1b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b1b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b1b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b1bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b1be:	e841 2300 	strex	r3, r2, [r1]
 800b1c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b1c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1e3      	bne.n	800b192 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2220      	movs	r2, #32
 800b1ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	330c      	adds	r3, #12
 800b1de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e2:	e853 3f00 	ldrex	r3, [r3]
 800b1e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b1e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1ea:	f023 0310 	bic.w	r3, r3, #16
 800b1ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	330c      	adds	r3, #12
 800b1f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b1fc:	65ba      	str	r2, [r7, #88]	; 0x58
 800b1fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b200:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b202:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b204:	e841 2300 	strex	r3, r2, [r1]
 800b208:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1e3      	bne.n	800b1d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b214:	4618      	mov	r0, r3
 800b216:	f7fb f8c9 	bl	80063ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b222:	b29b      	uxth	r3, r3
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	b29b      	uxth	r3, r3
 800b228:	4619      	mov	r1, r3
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f8d4 	bl	800b3d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b230:	e099      	b.n	800b366 <HAL_UART_IRQHandler+0x50e>
 800b232:	bf00      	nop
 800b234:	0800b8e3 	.word	0x0800b8e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b240:	b29b      	uxth	r3, r3
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	2b00      	cmp	r3, #0
 800b250:	f000 808b 	beq.w	800b36a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 8086 	beq.w	800b36a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	330c      	adds	r3, #12
 800b264:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b268:	e853 3f00 	ldrex	r3, [r3]
 800b26c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b274:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	330c      	adds	r3, #12
 800b27e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b282:	647a      	str	r2, [r7, #68]	; 0x44
 800b284:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b286:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b288:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e3      	bne.n	800b25e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3314      	adds	r3, #20
 800b29c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a0:	e853 3f00 	ldrex	r3, [r3]
 800b2a4:	623b      	str	r3, [r7, #32]
   return(result);
 800b2a6:	6a3b      	ldr	r3, [r7, #32]
 800b2a8:	f023 0301 	bic.w	r3, r3, #1
 800b2ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3314      	adds	r3, #20
 800b2b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b2ba:	633a      	str	r2, [r7, #48]	; 0x30
 800b2bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2c2:	e841 2300 	strex	r3, r2, [r1]
 800b2c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1e3      	bne.n	800b296 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2220      	movs	r2, #32
 800b2d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	330c      	adds	r3, #12
 800b2e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	e853 3f00 	ldrex	r3, [r3]
 800b2ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f023 0310 	bic.w	r3, r3, #16
 800b2f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	330c      	adds	r3, #12
 800b2fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b300:	61fa      	str	r2, [r7, #28]
 800b302:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b304:	69b9      	ldr	r1, [r7, #24]
 800b306:	69fa      	ldr	r2, [r7, #28]
 800b308:	e841 2300 	strex	r3, r2, [r1]
 800b30c:	617b      	str	r3, [r7, #20]
   return(result);
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1e3      	bne.n	800b2dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b314:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b318:	4619      	mov	r1, r3
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f85c 	bl	800b3d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b320:	e023      	b.n	800b36a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d009      	beq.n	800b342 <HAL_UART_IRQHandler+0x4ea>
 800b32e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fae5 	bl	800b90a <UART_Transmit_IT>
    return;
 800b340:	e014      	b.n	800b36c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00e      	beq.n	800b36c <HAL_UART_IRQHandler+0x514>
 800b34e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b356:	2b00      	cmp	r3, #0
 800b358:	d008      	beq.n	800b36c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 fb25 	bl	800b9aa <UART_EndTransmit_IT>
    return;
 800b360:	e004      	b.n	800b36c <HAL_UART_IRQHandler+0x514>
    return;
 800b362:	bf00      	nop
 800b364:	e002      	b.n	800b36c <HAL_UART_IRQHandler+0x514>
      return;
 800b366:	bf00      	nop
 800b368:	e000      	b.n	800b36c <HAL_UART_IRQHandler+0x514>
      return;
 800b36a:	bf00      	nop
  }
}
 800b36c:	37e8      	adds	r7, #232	; 0xe8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop

0800b374 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b37c:	bf00      	nop
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b390:	bf00      	nop
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b3a4:	bf00      	nop
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3e4:	bf00      	nop
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b090      	sub	sp, #64	; 0x40
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d137      	bne.n	800b47c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b40e:	2200      	movs	r2, #0
 800b410:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3314      	adds	r3, #20
 800b418:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41c:	e853 3f00 	ldrex	r3, [r3]
 800b420:	623b      	str	r3, [r7, #32]
   return(result);
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b428:	63bb      	str	r3, [r7, #56]	; 0x38
 800b42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	3314      	adds	r3, #20
 800b430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b432:	633a      	str	r2, [r7, #48]	; 0x30
 800b434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b43a:	e841 2300 	strex	r3, r2, [r1]
 800b43e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1e5      	bne.n	800b412 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	330c      	adds	r3, #12
 800b44c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	e853 3f00 	ldrex	r3, [r3]
 800b454:	60fb      	str	r3, [r7, #12]
   return(result);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b45c:	637b      	str	r3, [r7, #52]	; 0x34
 800b45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	330c      	adds	r3, #12
 800b464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b466:	61fa      	str	r2, [r7, #28]
 800b468:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46a:	69b9      	ldr	r1, [r7, #24]
 800b46c:	69fa      	ldr	r2, [r7, #28]
 800b46e:	e841 2300 	strex	r3, r2, [r1]
 800b472:	617b      	str	r3, [r7, #20]
   return(result);
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1e5      	bne.n	800b446 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b47a:	e002      	b.n	800b482 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b47c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b47e:	f7ff ff79 	bl	800b374 <HAL_UART_TxCpltCallback>
}
 800b482:	bf00      	nop
 800b484:	3740      	adds	r7, #64	; 0x40
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b084      	sub	sp, #16
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b496:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f7ff ff75 	bl	800b388 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b49e:	bf00      	nop
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b09c      	sub	sp, #112	; 0x70
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d172      	bne.n	800b5a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b4c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	330c      	adds	r3, #12
 800b4ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4d2:	e853 3f00 	ldrex	r3, [r3]
 800b4d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4de:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	330c      	adds	r3, #12
 800b4e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b4e8:	65ba      	str	r2, [r7, #88]	; 0x58
 800b4ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b4ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4f0:	e841 2300 	strex	r3, r2, [r1]
 800b4f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1e5      	bne.n	800b4c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	3314      	adds	r3, #20
 800b502:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b506:	e853 3f00 	ldrex	r3, [r3]
 800b50a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b50e:	f023 0301 	bic.w	r3, r3, #1
 800b512:	667b      	str	r3, [r7, #100]	; 0x64
 800b514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	3314      	adds	r3, #20
 800b51a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b51c:	647a      	str	r2, [r7, #68]	; 0x44
 800b51e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b520:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b524:	e841 2300 	strex	r3, r2, [r1]
 800b528:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1e5      	bne.n	800b4fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	3314      	adds	r3, #20
 800b536:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53a:	e853 3f00 	ldrex	r3, [r3]
 800b53e:	623b      	str	r3, [r7, #32]
   return(result);
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b546:	663b      	str	r3, [r7, #96]	; 0x60
 800b548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3314      	adds	r3, #20
 800b54e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b550:	633a      	str	r2, [r7, #48]	; 0x30
 800b552:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b554:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b558:	e841 2300 	strex	r3, r2, [r1]
 800b55c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1e5      	bne.n	800b530 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b566:	2220      	movs	r2, #32
 800b568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b570:	2b01      	cmp	r3, #1
 800b572:	d119      	bne.n	800b5a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	330c      	adds	r3, #12
 800b57a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	e853 3f00 	ldrex	r3, [r3]
 800b582:	60fb      	str	r3, [r7, #12]
   return(result);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f023 0310 	bic.w	r3, r3, #16
 800b58a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b58c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	330c      	adds	r3, #12
 800b592:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b594:	61fa      	str	r2, [r7, #28]
 800b596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b598:	69b9      	ldr	r1, [r7, #24]
 800b59a:	69fa      	ldr	r2, [r7, #28]
 800b59c:	e841 2300 	strex	r3, r2, [r1]
 800b5a0:	617b      	str	r3, [r7, #20]
   return(result);
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1e5      	bne.n	800b574 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d106      	bne.n	800b5be <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b5b8:	f7ff ff0e 	bl	800b3d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5bc:	e002      	b.n	800b5c4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b5be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b5c0:	f7ff feec 	bl	800b39c <HAL_UART_RxCpltCallback>
}
 800b5c4:	bf00      	nop
 800b5c6:	3770      	adds	r7, #112	; 0x70
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d108      	bne.n	800b5f4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5e6:	085b      	lsrs	r3, r3, #1
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f7ff fef3 	bl	800b3d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5f2:	e002      	b.n	800b5fa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f7ff fedb 	bl	800b3b0 <HAL_UART_RxHalfCpltCallback>
}
 800b5fa:	bf00      	nop
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b084      	sub	sp, #16
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b60a:	2300      	movs	r3, #0
 800b60c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b612:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	695b      	ldr	r3, [r3, #20]
 800b61a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b61e:	2b80      	cmp	r3, #128	; 0x80
 800b620:	bf0c      	ite	eq
 800b622:	2301      	moveq	r3, #1
 800b624:	2300      	movne	r3, #0
 800b626:	b2db      	uxtb	r3, r3
 800b628:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b630:	b2db      	uxtb	r3, r3
 800b632:	2b21      	cmp	r3, #33	; 0x21
 800b634:	d108      	bne.n	800b648 <UART_DMAError+0x46>
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d005      	beq.n	800b648 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	2200      	movs	r2, #0
 800b640:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b642:	68b8      	ldr	r0, [r7, #8]
 800b644:	f000 f8c2 	bl	800b7cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b652:	2b40      	cmp	r3, #64	; 0x40
 800b654:	bf0c      	ite	eq
 800b656:	2301      	moveq	r3, #1
 800b658:	2300      	movne	r3, #0
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b664:	b2db      	uxtb	r3, r3
 800b666:	2b22      	cmp	r3, #34	; 0x22
 800b668:	d108      	bne.n	800b67c <UART_DMAError+0x7a>
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d005      	beq.n	800b67c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	2200      	movs	r2, #0
 800b674:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b676:	68b8      	ldr	r0, [r7, #8]
 800b678:	f000 f8d0 	bl	800b81c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b680:	f043 0210 	orr.w	r2, r3, #16
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b688:	68b8      	ldr	r0, [r7, #8]
 800b68a:	f7ff fe9b 	bl	800b3c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b68e:	bf00      	nop
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b098      	sub	sp, #96	; 0x60
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	88fa      	ldrh	r2, [r7, #6]
 800b6b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2222      	movs	r2, #34	; 0x22
 800b6bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c4:	4a3e      	ldr	r2, [pc, #248]	; (800b7c0 <UART_Start_Receive_DMA+0x128>)
 800b6c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6cc:	4a3d      	ldr	r2, [pc, #244]	; (800b7c4 <UART_Start_Receive_DMA+0x12c>)
 800b6ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d4:	4a3c      	ldr	r2, [pc, #240]	; (800b7c8 <UART_Start_Receive_DMA+0x130>)
 800b6d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6dc:	2200      	movs	r2, #0
 800b6de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b6e0:	f107 0308 	add.w	r3, r7, #8
 800b6e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	88fb      	ldrh	r3, [r7, #6]
 800b6f8:	f7fa fe00 	bl	80062fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	613b      	str	r3, [r7, #16]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	613b      	str	r3, [r7, #16]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	613b      	str	r3, [r7, #16]
 800b710:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2200      	movs	r2, #0
 800b716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	330c      	adds	r3, #12
 800b720:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b724:	e853 3f00 	ldrex	r3, [r3]
 800b728:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b72c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b730:	65bb      	str	r3, [r7, #88]	; 0x58
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	330c      	adds	r3, #12
 800b738:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b73a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b73c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b740:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b742:	e841 2300 	strex	r3, r2, [r1]
 800b746:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1e5      	bne.n	800b71a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3314      	adds	r3, #20
 800b754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b758:	e853 3f00 	ldrex	r3, [r3]
 800b75c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b760:	f043 0301 	orr.w	r3, r3, #1
 800b764:	657b      	str	r3, [r7, #84]	; 0x54
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	3314      	adds	r3, #20
 800b76c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b76e:	63ba      	str	r2, [r7, #56]	; 0x38
 800b770:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b772:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b776:	e841 2300 	strex	r3, r2, [r1]
 800b77a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1e5      	bne.n	800b74e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	3314      	adds	r3, #20
 800b788:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	e853 3f00 	ldrex	r3, [r3]
 800b790:	617b      	str	r3, [r7, #20]
   return(result);
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b798:	653b      	str	r3, [r7, #80]	; 0x50
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	3314      	adds	r3, #20
 800b7a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7a2:	627a      	str	r2, [r7, #36]	; 0x24
 800b7a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a6:	6a39      	ldr	r1, [r7, #32]
 800b7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7aa:	e841 2300 	strex	r3, r2, [r1]
 800b7ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1e5      	bne.n	800b782 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3760      	adds	r7, #96	; 0x60
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	0800b4a7 	.word	0x0800b4a7
 800b7c4:	0800b5cd 	.word	0x0800b5cd
 800b7c8:	0800b603 	.word	0x0800b603

0800b7cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b089      	sub	sp, #36	; 0x24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	330c      	adds	r3, #12
 800b7da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	e853 3f00 	ldrex	r3, [r3]
 800b7e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b7ea:	61fb      	str	r3, [r7, #28]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	330c      	adds	r3, #12
 800b7f2:	69fa      	ldr	r2, [r7, #28]
 800b7f4:	61ba      	str	r2, [r7, #24]
 800b7f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f8:	6979      	ldr	r1, [r7, #20]
 800b7fa:	69ba      	ldr	r2, [r7, #24]
 800b7fc:	e841 2300 	strex	r3, r2, [r1]
 800b800:	613b      	str	r3, [r7, #16]
   return(result);
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1e5      	bne.n	800b7d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2220      	movs	r2, #32
 800b80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b810:	bf00      	nop
 800b812:	3724      	adds	r7, #36	; 0x24
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b095      	sub	sp, #84	; 0x54
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	330c      	adds	r3, #12
 800b82a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b82e:	e853 3f00 	ldrex	r3, [r3]
 800b832:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b836:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b83a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	330c      	adds	r3, #12
 800b842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b844:	643a      	str	r2, [r7, #64]	; 0x40
 800b846:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b848:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b84a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b84c:	e841 2300 	strex	r3, r2, [r1]
 800b850:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1e5      	bne.n	800b824 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3314      	adds	r3, #20
 800b85e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b860:	6a3b      	ldr	r3, [r7, #32]
 800b862:	e853 3f00 	ldrex	r3, [r3]
 800b866:	61fb      	str	r3, [r7, #28]
   return(result);
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	f023 0301 	bic.w	r3, r3, #1
 800b86e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3314      	adds	r3, #20
 800b876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b878:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b87a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b880:	e841 2300 	strex	r3, r2, [r1]
 800b884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1e5      	bne.n	800b858 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b890:	2b01      	cmp	r3, #1
 800b892:	d119      	bne.n	800b8c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	330c      	adds	r3, #12
 800b89a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	e853 3f00 	ldrex	r3, [r3]
 800b8a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	f023 0310 	bic.w	r3, r3, #16
 800b8aa:	647b      	str	r3, [r7, #68]	; 0x44
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	330c      	adds	r3, #12
 800b8b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8b4:	61ba      	str	r2, [r7, #24]
 800b8b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b8:	6979      	ldr	r1, [r7, #20]
 800b8ba:	69ba      	ldr	r2, [r7, #24]
 800b8bc:	e841 2300 	strex	r3, r2, [r1]
 800b8c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1e5      	bne.n	800b894 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2220      	movs	r2, #32
 800b8cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b8d6:	bf00      	nop
 800b8d8:	3754      	adds	r7, #84	; 0x54
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f7ff fd61 	bl	800b3c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b902:	bf00      	nop
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b90a:	b480      	push	{r7}
 800b90c:	b085      	sub	sp, #20
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b21      	cmp	r3, #33	; 0x21
 800b91c:	d13e      	bne.n	800b99c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b926:	d114      	bne.n	800b952 <UART_Transmit_IT+0x48>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	691b      	ldr	r3, [r3, #16]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d110      	bne.n	800b952 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a1b      	ldr	r3, [r3, #32]
 800b934:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	881b      	ldrh	r3, [r3, #0]
 800b93a:	461a      	mov	r2, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b944:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	1c9a      	adds	r2, r3, #2
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	621a      	str	r2, [r3, #32]
 800b950:	e008      	b.n	800b964 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	1c59      	adds	r1, r3, #1
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	6211      	str	r1, [r2, #32]
 800b95c:	781a      	ldrb	r2, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b968:	b29b      	uxth	r3, r3
 800b96a:	3b01      	subs	r3, #1
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	4619      	mov	r1, r3
 800b972:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b974:	2b00      	cmp	r3, #0
 800b976:	d10f      	bne.n	800b998 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68da      	ldr	r2, [r3, #12]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b986:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68da      	ldr	r2, [r3, #12]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b996:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b998:	2300      	movs	r3, #0
 800b99a:	e000      	b.n	800b99e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b99c:	2302      	movs	r3, #2
  }
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3714      	adds	r7, #20
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b082      	sub	sp, #8
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68da      	ldr	r2, [r3, #12]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2220      	movs	r2, #32
 800b9c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7ff fcd2 	bl	800b374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b08c      	sub	sp, #48	; 0x30
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	2b22      	cmp	r3, #34	; 0x22
 800b9ec:	f040 80ab 	bne.w	800bb46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9f8:	d117      	bne.n	800ba2a <UART_Receive_IT+0x50>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d113      	bne.n	800ba2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ba02:	2300      	movs	r3, #0
 800ba04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba22:	1c9a      	adds	r2, r3, #2
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	629a      	str	r2, [r3, #40]	; 0x28
 800ba28:	e026      	b.n	800ba78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ba30:	2300      	movs	r3, #0
 800ba32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba3c:	d007      	beq.n	800ba4e <UART_Receive_IT+0x74>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d10a      	bne.n	800ba5c <UART_Receive_IT+0x82>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d106      	bne.n	800ba5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba58:	701a      	strb	r2, [r3, #0]
 800ba5a:	e008      	b.n	800ba6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba68:	b2da      	uxtb	r2, r3
 800ba6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba72:	1c5a      	adds	r2, r3, #1
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	4619      	mov	r1, r3
 800ba86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d15a      	bne.n	800bb42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68da      	ldr	r2, [r3, #12]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f022 0220 	bic.w	r2, r2, #32
 800ba9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68da      	ldr	r2, [r3, #12]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800baaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	695a      	ldr	r2, [r3, #20]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f022 0201 	bic.w	r2, r2, #1
 800baba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2220      	movs	r2, #32
 800bac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d135      	bne.n	800bb38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	330c      	adds	r3, #12
 800bad8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	e853 3f00 	ldrex	r3, [r3]
 800bae0:	613b      	str	r3, [r7, #16]
   return(result);
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	f023 0310 	bic.w	r3, r3, #16
 800bae8:	627b      	str	r3, [r7, #36]	; 0x24
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	330c      	adds	r3, #12
 800baf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baf2:	623a      	str	r2, [r7, #32]
 800baf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf6:	69f9      	ldr	r1, [r7, #28]
 800baf8:	6a3a      	ldr	r2, [r7, #32]
 800bafa:	e841 2300 	strex	r3, r2, [r1]
 800bafe:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1e5      	bne.n	800bad2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f003 0310 	and.w	r3, r3, #16
 800bb10:	2b10      	cmp	r3, #16
 800bb12:	d10a      	bne.n	800bb2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb14:	2300      	movs	r3, #0
 800bb16:	60fb      	str	r3, [r7, #12]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	60fb      	str	r3, [r7, #12]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	60fb      	str	r3, [r7, #12]
 800bb28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bb2e:	4619      	mov	r1, r3
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7ff fc51 	bl	800b3d8 <HAL_UARTEx_RxEventCallback>
 800bb36:	e002      	b.n	800bb3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7ff fc2f 	bl	800b39c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	e002      	b.n	800bb48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bb42:	2300      	movs	r3, #0
 800bb44:	e000      	b.n	800bb48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bb46:	2302      	movs	r3, #2
  }
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3730      	adds	r7, #48	; 0x30
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb54:	b09f      	sub	sp, #124	; 0x7c
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bb64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb66:	68d9      	ldr	r1, [r3, #12]
 800bb68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	ea40 0301 	orr.w	r3, r0, r1
 800bb70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bb72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb74:	689a      	ldr	r2, [r3, #8]
 800bb76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	431a      	orrs	r2, r3
 800bb7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb7e:	695b      	ldr	r3, [r3, #20]
 800bb80:	431a      	orrs	r2, r3
 800bb82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb84:	69db      	ldr	r3, [r3, #28]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800bb8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bb94:	f021 010c 	bic.w	r1, r1, #12
 800bb98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb9e:	430b      	orrs	r3, r1
 800bba0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	695b      	ldr	r3, [r3, #20]
 800bba8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bbac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbae:	6999      	ldr	r1, [r3, #24]
 800bbb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	ea40 0301 	orr.w	r3, r0, r1
 800bbb8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bbba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	4bc5      	ldr	r3, [pc, #788]	; (800bed4 <UART_SetConfig+0x384>)
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d004      	beq.n	800bbce <UART_SetConfig+0x7e>
 800bbc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	4bc3      	ldr	r3, [pc, #780]	; (800bed8 <UART_SetConfig+0x388>)
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d103      	bne.n	800bbd6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bbce:	f7fe f979 	bl	8009ec4 <HAL_RCC_GetPCLK2Freq>
 800bbd2:	6778      	str	r0, [r7, #116]	; 0x74
 800bbd4:	e002      	b.n	800bbdc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bbd6:	f7fe f961 	bl	8009e9c <HAL_RCC_GetPCLK1Freq>
 800bbda:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbde:	69db      	ldr	r3, [r3, #28]
 800bbe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbe4:	f040 80b6 	bne.w	800bd54 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bbe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbea:	461c      	mov	r4, r3
 800bbec:	f04f 0500 	mov.w	r5, #0
 800bbf0:	4622      	mov	r2, r4
 800bbf2:	462b      	mov	r3, r5
 800bbf4:	1891      	adds	r1, r2, r2
 800bbf6:	6439      	str	r1, [r7, #64]	; 0x40
 800bbf8:	415b      	adcs	r3, r3
 800bbfa:	647b      	str	r3, [r7, #68]	; 0x44
 800bbfc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bc00:	1912      	adds	r2, r2, r4
 800bc02:	eb45 0303 	adc.w	r3, r5, r3
 800bc06:	f04f 0000 	mov.w	r0, #0
 800bc0a:	f04f 0100 	mov.w	r1, #0
 800bc0e:	00d9      	lsls	r1, r3, #3
 800bc10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bc14:	00d0      	lsls	r0, r2, #3
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	1911      	adds	r1, r2, r4
 800bc1c:	6639      	str	r1, [r7, #96]	; 0x60
 800bc1e:	416b      	adcs	r3, r5
 800bc20:	667b      	str	r3, [r7, #100]	; 0x64
 800bc22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	461a      	mov	r2, r3
 800bc28:	f04f 0300 	mov.w	r3, #0
 800bc2c:	1891      	adds	r1, r2, r2
 800bc2e:	63b9      	str	r1, [r7, #56]	; 0x38
 800bc30:	415b      	adcs	r3, r3
 800bc32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bc38:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800bc3c:	f7f5 f83c 	bl	8000cb8 <__aeabi_uldivmod>
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	4ba5      	ldr	r3, [pc, #660]	; (800bedc <UART_SetConfig+0x38c>)
 800bc46:	fba3 2302 	umull	r2, r3, r3, r2
 800bc4a:	095b      	lsrs	r3, r3, #5
 800bc4c:	011e      	lsls	r6, r3, #4
 800bc4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc50:	461c      	mov	r4, r3
 800bc52:	f04f 0500 	mov.w	r5, #0
 800bc56:	4622      	mov	r2, r4
 800bc58:	462b      	mov	r3, r5
 800bc5a:	1891      	adds	r1, r2, r2
 800bc5c:	6339      	str	r1, [r7, #48]	; 0x30
 800bc5e:	415b      	adcs	r3, r3
 800bc60:	637b      	str	r3, [r7, #52]	; 0x34
 800bc62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bc66:	1912      	adds	r2, r2, r4
 800bc68:	eb45 0303 	adc.w	r3, r5, r3
 800bc6c:	f04f 0000 	mov.w	r0, #0
 800bc70:	f04f 0100 	mov.w	r1, #0
 800bc74:	00d9      	lsls	r1, r3, #3
 800bc76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bc7a:	00d0      	lsls	r0, r2, #3
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	460b      	mov	r3, r1
 800bc80:	1911      	adds	r1, r2, r4
 800bc82:	65b9      	str	r1, [r7, #88]	; 0x58
 800bc84:	416b      	adcs	r3, r5
 800bc86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	f04f 0300 	mov.w	r3, #0
 800bc92:	1891      	adds	r1, r2, r2
 800bc94:	62b9      	str	r1, [r7, #40]	; 0x28
 800bc96:	415b      	adcs	r3, r3
 800bc98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bc9e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800bca2:	f7f5 f809 	bl	8000cb8 <__aeabi_uldivmod>
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	4b8c      	ldr	r3, [pc, #560]	; (800bedc <UART_SetConfig+0x38c>)
 800bcac:	fba3 1302 	umull	r1, r3, r3, r2
 800bcb0:	095b      	lsrs	r3, r3, #5
 800bcb2:	2164      	movs	r1, #100	; 0x64
 800bcb4:	fb01 f303 	mul.w	r3, r1, r3
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	00db      	lsls	r3, r3, #3
 800bcbc:	3332      	adds	r3, #50	; 0x32
 800bcbe:	4a87      	ldr	r2, [pc, #540]	; (800bedc <UART_SetConfig+0x38c>)
 800bcc0:	fba2 2303 	umull	r2, r3, r2, r3
 800bcc4:	095b      	lsrs	r3, r3, #5
 800bcc6:	005b      	lsls	r3, r3, #1
 800bcc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bccc:	441e      	add	r6, r3
 800bcce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f04f 0100 	mov.w	r1, #0
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	1894      	adds	r4, r2, r2
 800bcdc:	623c      	str	r4, [r7, #32]
 800bcde:	415b      	adcs	r3, r3
 800bce0:	627b      	str	r3, [r7, #36]	; 0x24
 800bce2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bce6:	1812      	adds	r2, r2, r0
 800bce8:	eb41 0303 	adc.w	r3, r1, r3
 800bcec:	f04f 0400 	mov.w	r4, #0
 800bcf0:	f04f 0500 	mov.w	r5, #0
 800bcf4:	00dd      	lsls	r5, r3, #3
 800bcf6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bcfa:	00d4      	lsls	r4, r2, #3
 800bcfc:	4622      	mov	r2, r4
 800bcfe:	462b      	mov	r3, r5
 800bd00:	1814      	adds	r4, r2, r0
 800bd02:	653c      	str	r4, [r7, #80]	; 0x50
 800bd04:	414b      	adcs	r3, r1
 800bd06:	657b      	str	r3, [r7, #84]	; 0x54
 800bd08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	f04f 0300 	mov.w	r3, #0
 800bd12:	1891      	adds	r1, r2, r2
 800bd14:	61b9      	str	r1, [r7, #24]
 800bd16:	415b      	adcs	r3, r3
 800bd18:	61fb      	str	r3, [r7, #28]
 800bd1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bd1e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800bd22:	f7f4 ffc9 	bl	8000cb8 <__aeabi_uldivmod>
 800bd26:	4602      	mov	r2, r0
 800bd28:	460b      	mov	r3, r1
 800bd2a:	4b6c      	ldr	r3, [pc, #432]	; (800bedc <UART_SetConfig+0x38c>)
 800bd2c:	fba3 1302 	umull	r1, r3, r3, r2
 800bd30:	095b      	lsrs	r3, r3, #5
 800bd32:	2164      	movs	r1, #100	; 0x64
 800bd34:	fb01 f303 	mul.w	r3, r1, r3
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	00db      	lsls	r3, r3, #3
 800bd3c:	3332      	adds	r3, #50	; 0x32
 800bd3e:	4a67      	ldr	r2, [pc, #412]	; (800bedc <UART_SetConfig+0x38c>)
 800bd40:	fba2 2303 	umull	r2, r3, r2, r3
 800bd44:	095b      	lsrs	r3, r3, #5
 800bd46:	f003 0207 	and.w	r2, r3, #7
 800bd4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4432      	add	r2, r6
 800bd50:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bd52:	e0b9      	b.n	800bec8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bd54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd56:	461c      	mov	r4, r3
 800bd58:	f04f 0500 	mov.w	r5, #0
 800bd5c:	4622      	mov	r2, r4
 800bd5e:	462b      	mov	r3, r5
 800bd60:	1891      	adds	r1, r2, r2
 800bd62:	6139      	str	r1, [r7, #16]
 800bd64:	415b      	adcs	r3, r3
 800bd66:	617b      	str	r3, [r7, #20]
 800bd68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bd6c:	1912      	adds	r2, r2, r4
 800bd6e:	eb45 0303 	adc.w	r3, r5, r3
 800bd72:	f04f 0000 	mov.w	r0, #0
 800bd76:	f04f 0100 	mov.w	r1, #0
 800bd7a:	00d9      	lsls	r1, r3, #3
 800bd7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bd80:	00d0      	lsls	r0, r2, #3
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	eb12 0804 	adds.w	r8, r2, r4
 800bd8a:	eb43 0905 	adc.w	r9, r3, r5
 800bd8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f04f 0100 	mov.w	r1, #0
 800bd98:	f04f 0200 	mov.w	r2, #0
 800bd9c:	f04f 0300 	mov.w	r3, #0
 800bda0:	008b      	lsls	r3, r1, #2
 800bda2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bda6:	0082      	lsls	r2, r0, #2
 800bda8:	4640      	mov	r0, r8
 800bdaa:	4649      	mov	r1, r9
 800bdac:	f7f4 ff84 	bl	8000cb8 <__aeabi_uldivmod>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	4b49      	ldr	r3, [pc, #292]	; (800bedc <UART_SetConfig+0x38c>)
 800bdb6:	fba3 2302 	umull	r2, r3, r3, r2
 800bdba:	095b      	lsrs	r3, r3, #5
 800bdbc:	011e      	lsls	r6, r3, #4
 800bdbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f04f 0100 	mov.w	r1, #0
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	1894      	adds	r4, r2, r2
 800bdcc:	60bc      	str	r4, [r7, #8]
 800bdce:	415b      	adcs	r3, r3
 800bdd0:	60fb      	str	r3, [r7, #12]
 800bdd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bdd6:	1812      	adds	r2, r2, r0
 800bdd8:	eb41 0303 	adc.w	r3, r1, r3
 800bddc:	f04f 0400 	mov.w	r4, #0
 800bde0:	f04f 0500 	mov.w	r5, #0
 800bde4:	00dd      	lsls	r5, r3, #3
 800bde6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bdea:	00d4      	lsls	r4, r2, #3
 800bdec:	4622      	mov	r2, r4
 800bdee:	462b      	mov	r3, r5
 800bdf0:	1814      	adds	r4, r2, r0
 800bdf2:	64bc      	str	r4, [r7, #72]	; 0x48
 800bdf4:	414b      	adcs	r3, r1
 800bdf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f04f 0100 	mov.w	r1, #0
 800be02:	f04f 0200 	mov.w	r2, #0
 800be06:	f04f 0300 	mov.w	r3, #0
 800be0a:	008b      	lsls	r3, r1, #2
 800be0c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800be10:	0082      	lsls	r2, r0, #2
 800be12:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800be16:	f7f4 ff4f 	bl	8000cb8 <__aeabi_uldivmod>
 800be1a:	4602      	mov	r2, r0
 800be1c:	460b      	mov	r3, r1
 800be1e:	4b2f      	ldr	r3, [pc, #188]	; (800bedc <UART_SetConfig+0x38c>)
 800be20:	fba3 1302 	umull	r1, r3, r3, r2
 800be24:	095b      	lsrs	r3, r3, #5
 800be26:	2164      	movs	r1, #100	; 0x64
 800be28:	fb01 f303 	mul.w	r3, r1, r3
 800be2c:	1ad3      	subs	r3, r2, r3
 800be2e:	011b      	lsls	r3, r3, #4
 800be30:	3332      	adds	r3, #50	; 0x32
 800be32:	4a2a      	ldr	r2, [pc, #168]	; (800bedc <UART_SetConfig+0x38c>)
 800be34:	fba2 2303 	umull	r2, r3, r2, r3
 800be38:	095b      	lsrs	r3, r3, #5
 800be3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be3e:	441e      	add	r6, r3
 800be40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be42:	4618      	mov	r0, r3
 800be44:	f04f 0100 	mov.w	r1, #0
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	1894      	adds	r4, r2, r2
 800be4e:	603c      	str	r4, [r7, #0]
 800be50:	415b      	adcs	r3, r3
 800be52:	607b      	str	r3, [r7, #4]
 800be54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be58:	1812      	adds	r2, r2, r0
 800be5a:	eb41 0303 	adc.w	r3, r1, r3
 800be5e:	f04f 0400 	mov.w	r4, #0
 800be62:	f04f 0500 	mov.w	r5, #0
 800be66:	00dd      	lsls	r5, r3, #3
 800be68:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800be6c:	00d4      	lsls	r4, r2, #3
 800be6e:	4622      	mov	r2, r4
 800be70:	462b      	mov	r3, r5
 800be72:	eb12 0a00 	adds.w	sl, r2, r0
 800be76:	eb43 0b01 	adc.w	fp, r3, r1
 800be7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	4618      	mov	r0, r3
 800be80:	f04f 0100 	mov.w	r1, #0
 800be84:	f04f 0200 	mov.w	r2, #0
 800be88:	f04f 0300 	mov.w	r3, #0
 800be8c:	008b      	lsls	r3, r1, #2
 800be8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800be92:	0082      	lsls	r2, r0, #2
 800be94:	4650      	mov	r0, sl
 800be96:	4659      	mov	r1, fp
 800be98:	f7f4 ff0e 	bl	8000cb8 <__aeabi_uldivmod>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	4b0e      	ldr	r3, [pc, #56]	; (800bedc <UART_SetConfig+0x38c>)
 800bea2:	fba3 1302 	umull	r1, r3, r3, r2
 800bea6:	095b      	lsrs	r3, r3, #5
 800bea8:	2164      	movs	r1, #100	; 0x64
 800beaa:	fb01 f303 	mul.w	r3, r1, r3
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	011b      	lsls	r3, r3, #4
 800beb2:	3332      	adds	r3, #50	; 0x32
 800beb4:	4a09      	ldr	r2, [pc, #36]	; (800bedc <UART_SetConfig+0x38c>)
 800beb6:	fba2 2303 	umull	r2, r3, r2, r3
 800beba:	095b      	lsrs	r3, r3, #5
 800bebc:	f003 020f 	and.w	r2, r3, #15
 800bec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4432      	add	r2, r6
 800bec6:	609a      	str	r2, [r3, #8]
}
 800bec8:	bf00      	nop
 800beca:	377c      	adds	r7, #124	; 0x7c
 800becc:	46bd      	mov	sp, r7
 800bece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed2:	bf00      	nop
 800bed4:	40011000 	.word	0x40011000
 800bed8:	40011400 	.word	0x40011400
 800bedc:	51eb851f 	.word	0x51eb851f

0800bee0 <atof>:
 800bee0:	2100      	movs	r1, #0
 800bee2:	f001 bd05 	b.w	800d8f0 <strtod>

0800bee6 <atoi>:
 800bee6:	220a      	movs	r2, #10
 800bee8:	2100      	movs	r1, #0
 800beea:	f001 bdef 	b.w	800dacc <strtol>
	...

0800bef0 <__errno>:
 800bef0:	4b01      	ldr	r3, [pc, #4]	; (800bef8 <__errno+0x8>)
 800bef2:	6818      	ldr	r0, [r3, #0]
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	20000040 	.word	0x20000040

0800befc <__libc_init_array>:
 800befc:	b570      	push	{r4, r5, r6, lr}
 800befe:	4d0d      	ldr	r5, [pc, #52]	; (800bf34 <__libc_init_array+0x38>)
 800bf00:	4c0d      	ldr	r4, [pc, #52]	; (800bf38 <__libc_init_array+0x3c>)
 800bf02:	1b64      	subs	r4, r4, r5
 800bf04:	10a4      	asrs	r4, r4, #2
 800bf06:	2600      	movs	r6, #0
 800bf08:	42a6      	cmp	r6, r4
 800bf0a:	d109      	bne.n	800bf20 <__libc_init_array+0x24>
 800bf0c:	4d0b      	ldr	r5, [pc, #44]	; (800bf3c <__libc_init_array+0x40>)
 800bf0e:	4c0c      	ldr	r4, [pc, #48]	; (800bf40 <__libc_init_array+0x44>)
 800bf10:	f004 fcb8 	bl	8010884 <_init>
 800bf14:	1b64      	subs	r4, r4, r5
 800bf16:	10a4      	asrs	r4, r4, #2
 800bf18:	2600      	movs	r6, #0
 800bf1a:	42a6      	cmp	r6, r4
 800bf1c:	d105      	bne.n	800bf2a <__libc_init_array+0x2e>
 800bf1e:	bd70      	pop	{r4, r5, r6, pc}
 800bf20:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf24:	4798      	blx	r3
 800bf26:	3601      	adds	r6, #1
 800bf28:	e7ee      	b.n	800bf08 <__libc_init_array+0xc>
 800bf2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf2e:	4798      	blx	r3
 800bf30:	3601      	adds	r6, #1
 800bf32:	e7f2      	b.n	800bf1a <__libc_init_array+0x1e>
 800bf34:	08024428 	.word	0x08024428
 800bf38:	08024428 	.word	0x08024428
 800bf3c:	08024428 	.word	0x08024428
 800bf40:	0802442c 	.word	0x0802442c

0800bf44 <memset>:
 800bf44:	4402      	add	r2, r0
 800bf46:	4603      	mov	r3, r0
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d100      	bne.n	800bf4e <memset+0xa>
 800bf4c:	4770      	bx	lr
 800bf4e:	f803 1b01 	strb.w	r1, [r3], #1
 800bf52:	e7f9      	b.n	800bf48 <memset+0x4>

0800bf54 <__cvt>:
 800bf54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf58:	ec55 4b10 	vmov	r4, r5, d0
 800bf5c:	2d00      	cmp	r5, #0
 800bf5e:	460e      	mov	r6, r1
 800bf60:	4619      	mov	r1, r3
 800bf62:	462b      	mov	r3, r5
 800bf64:	bfbb      	ittet	lt
 800bf66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bf6a:	461d      	movlt	r5, r3
 800bf6c:	2300      	movge	r3, #0
 800bf6e:	232d      	movlt	r3, #45	; 0x2d
 800bf70:	700b      	strb	r3, [r1, #0]
 800bf72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bf78:	4691      	mov	r9, r2
 800bf7a:	f023 0820 	bic.w	r8, r3, #32
 800bf7e:	bfbc      	itt	lt
 800bf80:	4622      	movlt	r2, r4
 800bf82:	4614      	movlt	r4, r2
 800bf84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf88:	d005      	beq.n	800bf96 <__cvt+0x42>
 800bf8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bf8e:	d100      	bne.n	800bf92 <__cvt+0x3e>
 800bf90:	3601      	adds	r6, #1
 800bf92:	2102      	movs	r1, #2
 800bf94:	e000      	b.n	800bf98 <__cvt+0x44>
 800bf96:	2103      	movs	r1, #3
 800bf98:	ab03      	add	r3, sp, #12
 800bf9a:	9301      	str	r3, [sp, #4]
 800bf9c:	ab02      	add	r3, sp, #8
 800bf9e:	9300      	str	r3, [sp, #0]
 800bfa0:	ec45 4b10 	vmov	d0, r4, r5
 800bfa4:	4653      	mov	r3, sl
 800bfa6:	4632      	mov	r2, r6
 800bfa8:	f001 fe46 	bl	800dc38 <_dtoa_r>
 800bfac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bfb0:	4607      	mov	r7, r0
 800bfb2:	d102      	bne.n	800bfba <__cvt+0x66>
 800bfb4:	f019 0f01 	tst.w	r9, #1
 800bfb8:	d022      	beq.n	800c000 <__cvt+0xac>
 800bfba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bfbe:	eb07 0906 	add.w	r9, r7, r6
 800bfc2:	d110      	bne.n	800bfe6 <__cvt+0x92>
 800bfc4:	783b      	ldrb	r3, [r7, #0]
 800bfc6:	2b30      	cmp	r3, #48	; 0x30
 800bfc8:	d10a      	bne.n	800bfe0 <__cvt+0x8c>
 800bfca:	2200      	movs	r2, #0
 800bfcc:	2300      	movs	r3, #0
 800bfce:	4620      	mov	r0, r4
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	f7f4 fd91 	bl	8000af8 <__aeabi_dcmpeq>
 800bfd6:	b918      	cbnz	r0, 800bfe0 <__cvt+0x8c>
 800bfd8:	f1c6 0601 	rsb	r6, r6, #1
 800bfdc:	f8ca 6000 	str.w	r6, [sl]
 800bfe0:	f8da 3000 	ldr.w	r3, [sl]
 800bfe4:	4499      	add	r9, r3
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	2300      	movs	r3, #0
 800bfea:	4620      	mov	r0, r4
 800bfec:	4629      	mov	r1, r5
 800bfee:	f7f4 fd83 	bl	8000af8 <__aeabi_dcmpeq>
 800bff2:	b108      	cbz	r0, 800bff8 <__cvt+0xa4>
 800bff4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bff8:	2230      	movs	r2, #48	; 0x30
 800bffa:	9b03      	ldr	r3, [sp, #12]
 800bffc:	454b      	cmp	r3, r9
 800bffe:	d307      	bcc.n	800c010 <__cvt+0xbc>
 800c000:	9b03      	ldr	r3, [sp, #12]
 800c002:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c004:	1bdb      	subs	r3, r3, r7
 800c006:	4638      	mov	r0, r7
 800c008:	6013      	str	r3, [r2, #0]
 800c00a:	b004      	add	sp, #16
 800c00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c010:	1c59      	adds	r1, r3, #1
 800c012:	9103      	str	r1, [sp, #12]
 800c014:	701a      	strb	r2, [r3, #0]
 800c016:	e7f0      	b.n	800bffa <__cvt+0xa6>

0800c018 <__exponent>:
 800c018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c01a:	4603      	mov	r3, r0
 800c01c:	2900      	cmp	r1, #0
 800c01e:	bfb8      	it	lt
 800c020:	4249      	neglt	r1, r1
 800c022:	f803 2b02 	strb.w	r2, [r3], #2
 800c026:	bfb4      	ite	lt
 800c028:	222d      	movlt	r2, #45	; 0x2d
 800c02a:	222b      	movge	r2, #43	; 0x2b
 800c02c:	2909      	cmp	r1, #9
 800c02e:	7042      	strb	r2, [r0, #1]
 800c030:	dd2a      	ble.n	800c088 <__exponent+0x70>
 800c032:	f10d 0407 	add.w	r4, sp, #7
 800c036:	46a4      	mov	ip, r4
 800c038:	270a      	movs	r7, #10
 800c03a:	46a6      	mov	lr, r4
 800c03c:	460a      	mov	r2, r1
 800c03e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c042:	fb07 1516 	mls	r5, r7, r6, r1
 800c046:	3530      	adds	r5, #48	; 0x30
 800c048:	2a63      	cmp	r2, #99	; 0x63
 800c04a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c04e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c052:	4631      	mov	r1, r6
 800c054:	dcf1      	bgt.n	800c03a <__exponent+0x22>
 800c056:	3130      	adds	r1, #48	; 0x30
 800c058:	f1ae 0502 	sub.w	r5, lr, #2
 800c05c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c060:	1c44      	adds	r4, r0, #1
 800c062:	4629      	mov	r1, r5
 800c064:	4561      	cmp	r1, ip
 800c066:	d30a      	bcc.n	800c07e <__exponent+0x66>
 800c068:	f10d 0209 	add.w	r2, sp, #9
 800c06c:	eba2 020e 	sub.w	r2, r2, lr
 800c070:	4565      	cmp	r5, ip
 800c072:	bf88      	it	hi
 800c074:	2200      	movhi	r2, #0
 800c076:	4413      	add	r3, r2
 800c078:	1a18      	subs	r0, r3, r0
 800c07a:	b003      	add	sp, #12
 800c07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c07e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c082:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c086:	e7ed      	b.n	800c064 <__exponent+0x4c>
 800c088:	2330      	movs	r3, #48	; 0x30
 800c08a:	3130      	adds	r1, #48	; 0x30
 800c08c:	7083      	strb	r3, [r0, #2]
 800c08e:	70c1      	strb	r1, [r0, #3]
 800c090:	1d03      	adds	r3, r0, #4
 800c092:	e7f1      	b.n	800c078 <__exponent+0x60>

0800c094 <_printf_float>:
 800c094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c098:	ed2d 8b02 	vpush	{d8}
 800c09c:	b08d      	sub	sp, #52	; 0x34
 800c09e:	460c      	mov	r4, r1
 800c0a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c0a4:	4616      	mov	r6, r2
 800c0a6:	461f      	mov	r7, r3
 800c0a8:	4605      	mov	r5, r0
 800c0aa:	f002 ff33 	bl	800ef14 <_localeconv_r>
 800c0ae:	f8d0 a000 	ldr.w	sl, [r0]
 800c0b2:	4650      	mov	r0, sl
 800c0b4:	f7f4 f89e 	bl	80001f4 <strlen>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	930a      	str	r3, [sp, #40]	; 0x28
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	9305      	str	r3, [sp, #20]
 800c0c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c0c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c0c8:	3307      	adds	r3, #7
 800c0ca:	f023 0307 	bic.w	r3, r3, #7
 800c0ce:	f103 0208 	add.w	r2, r3, #8
 800c0d2:	f8c8 2000 	str.w	r2, [r8]
 800c0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c0de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c0e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c0e6:	9307      	str	r3, [sp, #28]
 800c0e8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c0ec:	ee08 0a10 	vmov	s16, r0
 800c0f0:	4b9f      	ldr	r3, [pc, #636]	; (800c370 <_printf_float+0x2dc>)
 800c0f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0fa:	f7f4 fd2f 	bl	8000b5c <__aeabi_dcmpun>
 800c0fe:	bb88      	cbnz	r0, 800c164 <_printf_float+0xd0>
 800c100:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c104:	4b9a      	ldr	r3, [pc, #616]	; (800c370 <_printf_float+0x2dc>)
 800c106:	f04f 32ff 	mov.w	r2, #4294967295
 800c10a:	f7f4 fd09 	bl	8000b20 <__aeabi_dcmple>
 800c10e:	bb48      	cbnz	r0, 800c164 <_printf_float+0xd0>
 800c110:	2200      	movs	r2, #0
 800c112:	2300      	movs	r3, #0
 800c114:	4640      	mov	r0, r8
 800c116:	4649      	mov	r1, r9
 800c118:	f7f4 fcf8 	bl	8000b0c <__aeabi_dcmplt>
 800c11c:	b110      	cbz	r0, 800c124 <_printf_float+0x90>
 800c11e:	232d      	movs	r3, #45	; 0x2d
 800c120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c124:	4b93      	ldr	r3, [pc, #588]	; (800c374 <_printf_float+0x2e0>)
 800c126:	4894      	ldr	r0, [pc, #592]	; (800c378 <_printf_float+0x2e4>)
 800c128:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c12c:	bf94      	ite	ls
 800c12e:	4698      	movls	r8, r3
 800c130:	4680      	movhi	r8, r0
 800c132:	2303      	movs	r3, #3
 800c134:	6123      	str	r3, [r4, #16]
 800c136:	9b05      	ldr	r3, [sp, #20]
 800c138:	f023 0204 	bic.w	r2, r3, #4
 800c13c:	6022      	str	r2, [r4, #0]
 800c13e:	f04f 0900 	mov.w	r9, #0
 800c142:	9700      	str	r7, [sp, #0]
 800c144:	4633      	mov	r3, r6
 800c146:	aa0b      	add	r2, sp, #44	; 0x2c
 800c148:	4621      	mov	r1, r4
 800c14a:	4628      	mov	r0, r5
 800c14c:	f000 f9d8 	bl	800c500 <_printf_common>
 800c150:	3001      	adds	r0, #1
 800c152:	f040 8090 	bne.w	800c276 <_printf_float+0x1e2>
 800c156:	f04f 30ff 	mov.w	r0, #4294967295
 800c15a:	b00d      	add	sp, #52	; 0x34
 800c15c:	ecbd 8b02 	vpop	{d8}
 800c160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c164:	4642      	mov	r2, r8
 800c166:	464b      	mov	r3, r9
 800c168:	4640      	mov	r0, r8
 800c16a:	4649      	mov	r1, r9
 800c16c:	f7f4 fcf6 	bl	8000b5c <__aeabi_dcmpun>
 800c170:	b140      	cbz	r0, 800c184 <_printf_float+0xf0>
 800c172:	464b      	mov	r3, r9
 800c174:	2b00      	cmp	r3, #0
 800c176:	bfbc      	itt	lt
 800c178:	232d      	movlt	r3, #45	; 0x2d
 800c17a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c17e:	487f      	ldr	r0, [pc, #508]	; (800c37c <_printf_float+0x2e8>)
 800c180:	4b7f      	ldr	r3, [pc, #508]	; (800c380 <_printf_float+0x2ec>)
 800c182:	e7d1      	b.n	800c128 <_printf_float+0x94>
 800c184:	6863      	ldr	r3, [r4, #4]
 800c186:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c18a:	9206      	str	r2, [sp, #24]
 800c18c:	1c5a      	adds	r2, r3, #1
 800c18e:	d13f      	bne.n	800c210 <_printf_float+0x17c>
 800c190:	2306      	movs	r3, #6
 800c192:	6063      	str	r3, [r4, #4]
 800c194:	9b05      	ldr	r3, [sp, #20]
 800c196:	6861      	ldr	r1, [r4, #4]
 800c198:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c19c:	2300      	movs	r3, #0
 800c19e:	9303      	str	r3, [sp, #12]
 800c1a0:	ab0a      	add	r3, sp, #40	; 0x28
 800c1a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c1a6:	ab09      	add	r3, sp, #36	; 0x24
 800c1a8:	ec49 8b10 	vmov	d0, r8, r9
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	6022      	str	r2, [r4, #0]
 800c1b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	f7ff fecd 	bl	800bf54 <__cvt>
 800c1ba:	9b06      	ldr	r3, [sp, #24]
 800c1bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1be:	2b47      	cmp	r3, #71	; 0x47
 800c1c0:	4680      	mov	r8, r0
 800c1c2:	d108      	bne.n	800c1d6 <_printf_float+0x142>
 800c1c4:	1cc8      	adds	r0, r1, #3
 800c1c6:	db02      	blt.n	800c1ce <_printf_float+0x13a>
 800c1c8:	6863      	ldr	r3, [r4, #4]
 800c1ca:	4299      	cmp	r1, r3
 800c1cc:	dd41      	ble.n	800c252 <_printf_float+0x1be>
 800c1ce:	f1ab 0b02 	sub.w	fp, fp, #2
 800c1d2:	fa5f fb8b 	uxtb.w	fp, fp
 800c1d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c1da:	d820      	bhi.n	800c21e <_printf_float+0x18a>
 800c1dc:	3901      	subs	r1, #1
 800c1de:	465a      	mov	r2, fp
 800c1e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c1e4:	9109      	str	r1, [sp, #36]	; 0x24
 800c1e6:	f7ff ff17 	bl	800c018 <__exponent>
 800c1ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1ec:	1813      	adds	r3, r2, r0
 800c1ee:	2a01      	cmp	r2, #1
 800c1f0:	4681      	mov	r9, r0
 800c1f2:	6123      	str	r3, [r4, #16]
 800c1f4:	dc02      	bgt.n	800c1fc <_printf_float+0x168>
 800c1f6:	6822      	ldr	r2, [r4, #0]
 800c1f8:	07d2      	lsls	r2, r2, #31
 800c1fa:	d501      	bpl.n	800c200 <_printf_float+0x16c>
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	6123      	str	r3, [r4, #16]
 800c200:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c204:	2b00      	cmp	r3, #0
 800c206:	d09c      	beq.n	800c142 <_printf_float+0xae>
 800c208:	232d      	movs	r3, #45	; 0x2d
 800c20a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c20e:	e798      	b.n	800c142 <_printf_float+0xae>
 800c210:	9a06      	ldr	r2, [sp, #24]
 800c212:	2a47      	cmp	r2, #71	; 0x47
 800c214:	d1be      	bne.n	800c194 <_printf_float+0x100>
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1bc      	bne.n	800c194 <_printf_float+0x100>
 800c21a:	2301      	movs	r3, #1
 800c21c:	e7b9      	b.n	800c192 <_printf_float+0xfe>
 800c21e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c222:	d118      	bne.n	800c256 <_printf_float+0x1c2>
 800c224:	2900      	cmp	r1, #0
 800c226:	6863      	ldr	r3, [r4, #4]
 800c228:	dd0b      	ble.n	800c242 <_printf_float+0x1ae>
 800c22a:	6121      	str	r1, [r4, #16]
 800c22c:	b913      	cbnz	r3, 800c234 <_printf_float+0x1a0>
 800c22e:	6822      	ldr	r2, [r4, #0]
 800c230:	07d0      	lsls	r0, r2, #31
 800c232:	d502      	bpl.n	800c23a <_printf_float+0x1a6>
 800c234:	3301      	adds	r3, #1
 800c236:	440b      	add	r3, r1
 800c238:	6123      	str	r3, [r4, #16]
 800c23a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c23c:	f04f 0900 	mov.w	r9, #0
 800c240:	e7de      	b.n	800c200 <_printf_float+0x16c>
 800c242:	b913      	cbnz	r3, 800c24a <_printf_float+0x1b6>
 800c244:	6822      	ldr	r2, [r4, #0]
 800c246:	07d2      	lsls	r2, r2, #31
 800c248:	d501      	bpl.n	800c24e <_printf_float+0x1ba>
 800c24a:	3302      	adds	r3, #2
 800c24c:	e7f4      	b.n	800c238 <_printf_float+0x1a4>
 800c24e:	2301      	movs	r3, #1
 800c250:	e7f2      	b.n	800c238 <_printf_float+0x1a4>
 800c252:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c258:	4299      	cmp	r1, r3
 800c25a:	db05      	blt.n	800c268 <_printf_float+0x1d4>
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	6121      	str	r1, [r4, #16]
 800c260:	07d8      	lsls	r0, r3, #31
 800c262:	d5ea      	bpl.n	800c23a <_printf_float+0x1a6>
 800c264:	1c4b      	adds	r3, r1, #1
 800c266:	e7e7      	b.n	800c238 <_printf_float+0x1a4>
 800c268:	2900      	cmp	r1, #0
 800c26a:	bfd4      	ite	le
 800c26c:	f1c1 0202 	rsble	r2, r1, #2
 800c270:	2201      	movgt	r2, #1
 800c272:	4413      	add	r3, r2
 800c274:	e7e0      	b.n	800c238 <_printf_float+0x1a4>
 800c276:	6823      	ldr	r3, [r4, #0]
 800c278:	055a      	lsls	r2, r3, #21
 800c27a:	d407      	bmi.n	800c28c <_printf_float+0x1f8>
 800c27c:	6923      	ldr	r3, [r4, #16]
 800c27e:	4642      	mov	r2, r8
 800c280:	4631      	mov	r1, r6
 800c282:	4628      	mov	r0, r5
 800c284:	47b8      	blx	r7
 800c286:	3001      	adds	r0, #1
 800c288:	d12c      	bne.n	800c2e4 <_printf_float+0x250>
 800c28a:	e764      	b.n	800c156 <_printf_float+0xc2>
 800c28c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c290:	f240 80e0 	bls.w	800c454 <_printf_float+0x3c0>
 800c294:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c298:	2200      	movs	r2, #0
 800c29a:	2300      	movs	r3, #0
 800c29c:	f7f4 fc2c 	bl	8000af8 <__aeabi_dcmpeq>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d034      	beq.n	800c30e <_printf_float+0x27a>
 800c2a4:	4a37      	ldr	r2, [pc, #220]	; (800c384 <_printf_float+0x2f0>)
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	4631      	mov	r1, r6
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	47b8      	blx	r7
 800c2ae:	3001      	adds	r0, #1
 800c2b0:	f43f af51 	beq.w	800c156 <_printf_float+0xc2>
 800c2b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	db02      	blt.n	800c2c2 <_printf_float+0x22e>
 800c2bc:	6823      	ldr	r3, [r4, #0]
 800c2be:	07d8      	lsls	r0, r3, #31
 800c2c0:	d510      	bpl.n	800c2e4 <_printf_float+0x250>
 800c2c2:	ee18 3a10 	vmov	r3, s16
 800c2c6:	4652      	mov	r2, sl
 800c2c8:	4631      	mov	r1, r6
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	47b8      	blx	r7
 800c2ce:	3001      	adds	r0, #1
 800c2d0:	f43f af41 	beq.w	800c156 <_printf_float+0xc2>
 800c2d4:	f04f 0800 	mov.w	r8, #0
 800c2d8:	f104 091a 	add.w	r9, r4, #26
 800c2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	4543      	cmp	r3, r8
 800c2e2:	dc09      	bgt.n	800c2f8 <_printf_float+0x264>
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	079b      	lsls	r3, r3, #30
 800c2e8:	f100 8105 	bmi.w	800c4f6 <_printf_float+0x462>
 800c2ec:	68e0      	ldr	r0, [r4, #12]
 800c2ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2f0:	4298      	cmp	r0, r3
 800c2f2:	bfb8      	it	lt
 800c2f4:	4618      	movlt	r0, r3
 800c2f6:	e730      	b.n	800c15a <_printf_float+0xc6>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	464a      	mov	r2, r9
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	4628      	mov	r0, r5
 800c300:	47b8      	blx	r7
 800c302:	3001      	adds	r0, #1
 800c304:	f43f af27 	beq.w	800c156 <_printf_float+0xc2>
 800c308:	f108 0801 	add.w	r8, r8, #1
 800c30c:	e7e6      	b.n	800c2dc <_printf_float+0x248>
 800c30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c310:	2b00      	cmp	r3, #0
 800c312:	dc39      	bgt.n	800c388 <_printf_float+0x2f4>
 800c314:	4a1b      	ldr	r2, [pc, #108]	; (800c384 <_printf_float+0x2f0>)
 800c316:	2301      	movs	r3, #1
 800c318:	4631      	mov	r1, r6
 800c31a:	4628      	mov	r0, r5
 800c31c:	47b8      	blx	r7
 800c31e:	3001      	adds	r0, #1
 800c320:	f43f af19 	beq.w	800c156 <_printf_float+0xc2>
 800c324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c328:	4313      	orrs	r3, r2
 800c32a:	d102      	bne.n	800c332 <_printf_float+0x29e>
 800c32c:	6823      	ldr	r3, [r4, #0]
 800c32e:	07d9      	lsls	r1, r3, #31
 800c330:	d5d8      	bpl.n	800c2e4 <_printf_float+0x250>
 800c332:	ee18 3a10 	vmov	r3, s16
 800c336:	4652      	mov	r2, sl
 800c338:	4631      	mov	r1, r6
 800c33a:	4628      	mov	r0, r5
 800c33c:	47b8      	blx	r7
 800c33e:	3001      	adds	r0, #1
 800c340:	f43f af09 	beq.w	800c156 <_printf_float+0xc2>
 800c344:	f04f 0900 	mov.w	r9, #0
 800c348:	f104 0a1a 	add.w	sl, r4, #26
 800c34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c34e:	425b      	negs	r3, r3
 800c350:	454b      	cmp	r3, r9
 800c352:	dc01      	bgt.n	800c358 <_printf_float+0x2c4>
 800c354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c356:	e792      	b.n	800c27e <_printf_float+0x1ea>
 800c358:	2301      	movs	r3, #1
 800c35a:	4652      	mov	r2, sl
 800c35c:	4631      	mov	r1, r6
 800c35e:	4628      	mov	r0, r5
 800c360:	47b8      	blx	r7
 800c362:	3001      	adds	r0, #1
 800c364:	f43f aef7 	beq.w	800c156 <_printf_float+0xc2>
 800c368:	f109 0901 	add.w	r9, r9, #1
 800c36c:	e7ee      	b.n	800c34c <_printf_float+0x2b8>
 800c36e:	bf00      	nop
 800c370:	7fefffff 	.word	0x7fefffff
 800c374:	08023f10 	.word	0x08023f10
 800c378:	08023f14 	.word	0x08023f14
 800c37c:	08023f1c 	.word	0x08023f1c
 800c380:	08023f18 	.word	0x08023f18
 800c384:	08023f20 	.word	0x08023f20
 800c388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c38a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c38c:	429a      	cmp	r2, r3
 800c38e:	bfa8      	it	ge
 800c390:	461a      	movge	r2, r3
 800c392:	2a00      	cmp	r2, #0
 800c394:	4691      	mov	r9, r2
 800c396:	dc37      	bgt.n	800c408 <_printf_float+0x374>
 800c398:	f04f 0b00 	mov.w	fp, #0
 800c39c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3a0:	f104 021a 	add.w	r2, r4, #26
 800c3a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c3a6:	9305      	str	r3, [sp, #20]
 800c3a8:	eba3 0309 	sub.w	r3, r3, r9
 800c3ac:	455b      	cmp	r3, fp
 800c3ae:	dc33      	bgt.n	800c418 <_printf_float+0x384>
 800c3b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	db3b      	blt.n	800c430 <_printf_float+0x39c>
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	07da      	lsls	r2, r3, #31
 800c3bc:	d438      	bmi.n	800c430 <_printf_float+0x39c>
 800c3be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3c0:	9b05      	ldr	r3, [sp, #20]
 800c3c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	eba2 0901 	sub.w	r9, r2, r1
 800c3ca:	4599      	cmp	r9, r3
 800c3cc:	bfa8      	it	ge
 800c3ce:	4699      	movge	r9, r3
 800c3d0:	f1b9 0f00 	cmp.w	r9, #0
 800c3d4:	dc35      	bgt.n	800c442 <_printf_float+0x3ae>
 800c3d6:	f04f 0800 	mov.w	r8, #0
 800c3da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3de:	f104 0a1a 	add.w	sl, r4, #26
 800c3e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3e6:	1a9b      	subs	r3, r3, r2
 800c3e8:	eba3 0309 	sub.w	r3, r3, r9
 800c3ec:	4543      	cmp	r3, r8
 800c3ee:	f77f af79 	ble.w	800c2e4 <_printf_float+0x250>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	4652      	mov	r2, sl
 800c3f6:	4631      	mov	r1, r6
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	47b8      	blx	r7
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	f43f aeaa 	beq.w	800c156 <_printf_float+0xc2>
 800c402:	f108 0801 	add.w	r8, r8, #1
 800c406:	e7ec      	b.n	800c3e2 <_printf_float+0x34e>
 800c408:	4613      	mov	r3, r2
 800c40a:	4631      	mov	r1, r6
 800c40c:	4642      	mov	r2, r8
 800c40e:	4628      	mov	r0, r5
 800c410:	47b8      	blx	r7
 800c412:	3001      	adds	r0, #1
 800c414:	d1c0      	bne.n	800c398 <_printf_float+0x304>
 800c416:	e69e      	b.n	800c156 <_printf_float+0xc2>
 800c418:	2301      	movs	r3, #1
 800c41a:	4631      	mov	r1, r6
 800c41c:	4628      	mov	r0, r5
 800c41e:	9205      	str	r2, [sp, #20]
 800c420:	47b8      	blx	r7
 800c422:	3001      	adds	r0, #1
 800c424:	f43f ae97 	beq.w	800c156 <_printf_float+0xc2>
 800c428:	9a05      	ldr	r2, [sp, #20]
 800c42a:	f10b 0b01 	add.w	fp, fp, #1
 800c42e:	e7b9      	b.n	800c3a4 <_printf_float+0x310>
 800c430:	ee18 3a10 	vmov	r3, s16
 800c434:	4652      	mov	r2, sl
 800c436:	4631      	mov	r1, r6
 800c438:	4628      	mov	r0, r5
 800c43a:	47b8      	blx	r7
 800c43c:	3001      	adds	r0, #1
 800c43e:	d1be      	bne.n	800c3be <_printf_float+0x32a>
 800c440:	e689      	b.n	800c156 <_printf_float+0xc2>
 800c442:	9a05      	ldr	r2, [sp, #20]
 800c444:	464b      	mov	r3, r9
 800c446:	4442      	add	r2, r8
 800c448:	4631      	mov	r1, r6
 800c44a:	4628      	mov	r0, r5
 800c44c:	47b8      	blx	r7
 800c44e:	3001      	adds	r0, #1
 800c450:	d1c1      	bne.n	800c3d6 <_printf_float+0x342>
 800c452:	e680      	b.n	800c156 <_printf_float+0xc2>
 800c454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c456:	2a01      	cmp	r2, #1
 800c458:	dc01      	bgt.n	800c45e <_printf_float+0x3ca>
 800c45a:	07db      	lsls	r3, r3, #31
 800c45c:	d538      	bpl.n	800c4d0 <_printf_float+0x43c>
 800c45e:	2301      	movs	r3, #1
 800c460:	4642      	mov	r2, r8
 800c462:	4631      	mov	r1, r6
 800c464:	4628      	mov	r0, r5
 800c466:	47b8      	blx	r7
 800c468:	3001      	adds	r0, #1
 800c46a:	f43f ae74 	beq.w	800c156 <_printf_float+0xc2>
 800c46e:	ee18 3a10 	vmov	r3, s16
 800c472:	4652      	mov	r2, sl
 800c474:	4631      	mov	r1, r6
 800c476:	4628      	mov	r0, r5
 800c478:	47b8      	blx	r7
 800c47a:	3001      	adds	r0, #1
 800c47c:	f43f ae6b 	beq.w	800c156 <_printf_float+0xc2>
 800c480:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c484:	2200      	movs	r2, #0
 800c486:	2300      	movs	r3, #0
 800c488:	f7f4 fb36 	bl	8000af8 <__aeabi_dcmpeq>
 800c48c:	b9d8      	cbnz	r0, 800c4c6 <_printf_float+0x432>
 800c48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c490:	f108 0201 	add.w	r2, r8, #1
 800c494:	3b01      	subs	r3, #1
 800c496:	4631      	mov	r1, r6
 800c498:	4628      	mov	r0, r5
 800c49a:	47b8      	blx	r7
 800c49c:	3001      	adds	r0, #1
 800c49e:	d10e      	bne.n	800c4be <_printf_float+0x42a>
 800c4a0:	e659      	b.n	800c156 <_printf_float+0xc2>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	4652      	mov	r2, sl
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	47b8      	blx	r7
 800c4ac:	3001      	adds	r0, #1
 800c4ae:	f43f ae52 	beq.w	800c156 <_printf_float+0xc2>
 800c4b2:	f108 0801 	add.w	r8, r8, #1
 800c4b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	4543      	cmp	r3, r8
 800c4bc:	dcf1      	bgt.n	800c4a2 <_printf_float+0x40e>
 800c4be:	464b      	mov	r3, r9
 800c4c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c4c4:	e6dc      	b.n	800c280 <_printf_float+0x1ec>
 800c4c6:	f04f 0800 	mov.w	r8, #0
 800c4ca:	f104 0a1a 	add.w	sl, r4, #26
 800c4ce:	e7f2      	b.n	800c4b6 <_printf_float+0x422>
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	4642      	mov	r2, r8
 800c4d4:	e7df      	b.n	800c496 <_printf_float+0x402>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	464a      	mov	r2, r9
 800c4da:	4631      	mov	r1, r6
 800c4dc:	4628      	mov	r0, r5
 800c4de:	47b8      	blx	r7
 800c4e0:	3001      	adds	r0, #1
 800c4e2:	f43f ae38 	beq.w	800c156 <_printf_float+0xc2>
 800c4e6:	f108 0801 	add.w	r8, r8, #1
 800c4ea:	68e3      	ldr	r3, [r4, #12]
 800c4ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c4ee:	1a5b      	subs	r3, r3, r1
 800c4f0:	4543      	cmp	r3, r8
 800c4f2:	dcf0      	bgt.n	800c4d6 <_printf_float+0x442>
 800c4f4:	e6fa      	b.n	800c2ec <_printf_float+0x258>
 800c4f6:	f04f 0800 	mov.w	r8, #0
 800c4fa:	f104 0919 	add.w	r9, r4, #25
 800c4fe:	e7f4      	b.n	800c4ea <_printf_float+0x456>

0800c500 <_printf_common>:
 800c500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c504:	4616      	mov	r6, r2
 800c506:	4699      	mov	r9, r3
 800c508:	688a      	ldr	r2, [r1, #8]
 800c50a:	690b      	ldr	r3, [r1, #16]
 800c50c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c510:	4293      	cmp	r3, r2
 800c512:	bfb8      	it	lt
 800c514:	4613      	movlt	r3, r2
 800c516:	6033      	str	r3, [r6, #0]
 800c518:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c51c:	4607      	mov	r7, r0
 800c51e:	460c      	mov	r4, r1
 800c520:	b10a      	cbz	r2, 800c526 <_printf_common+0x26>
 800c522:	3301      	adds	r3, #1
 800c524:	6033      	str	r3, [r6, #0]
 800c526:	6823      	ldr	r3, [r4, #0]
 800c528:	0699      	lsls	r1, r3, #26
 800c52a:	bf42      	ittt	mi
 800c52c:	6833      	ldrmi	r3, [r6, #0]
 800c52e:	3302      	addmi	r3, #2
 800c530:	6033      	strmi	r3, [r6, #0]
 800c532:	6825      	ldr	r5, [r4, #0]
 800c534:	f015 0506 	ands.w	r5, r5, #6
 800c538:	d106      	bne.n	800c548 <_printf_common+0x48>
 800c53a:	f104 0a19 	add.w	sl, r4, #25
 800c53e:	68e3      	ldr	r3, [r4, #12]
 800c540:	6832      	ldr	r2, [r6, #0]
 800c542:	1a9b      	subs	r3, r3, r2
 800c544:	42ab      	cmp	r3, r5
 800c546:	dc26      	bgt.n	800c596 <_printf_common+0x96>
 800c548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c54c:	1e13      	subs	r3, r2, #0
 800c54e:	6822      	ldr	r2, [r4, #0]
 800c550:	bf18      	it	ne
 800c552:	2301      	movne	r3, #1
 800c554:	0692      	lsls	r2, r2, #26
 800c556:	d42b      	bmi.n	800c5b0 <_printf_common+0xb0>
 800c558:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c55c:	4649      	mov	r1, r9
 800c55e:	4638      	mov	r0, r7
 800c560:	47c0      	blx	r8
 800c562:	3001      	adds	r0, #1
 800c564:	d01e      	beq.n	800c5a4 <_printf_common+0xa4>
 800c566:	6823      	ldr	r3, [r4, #0]
 800c568:	68e5      	ldr	r5, [r4, #12]
 800c56a:	6832      	ldr	r2, [r6, #0]
 800c56c:	f003 0306 	and.w	r3, r3, #6
 800c570:	2b04      	cmp	r3, #4
 800c572:	bf08      	it	eq
 800c574:	1aad      	subeq	r5, r5, r2
 800c576:	68a3      	ldr	r3, [r4, #8]
 800c578:	6922      	ldr	r2, [r4, #16]
 800c57a:	bf0c      	ite	eq
 800c57c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c580:	2500      	movne	r5, #0
 800c582:	4293      	cmp	r3, r2
 800c584:	bfc4      	itt	gt
 800c586:	1a9b      	subgt	r3, r3, r2
 800c588:	18ed      	addgt	r5, r5, r3
 800c58a:	2600      	movs	r6, #0
 800c58c:	341a      	adds	r4, #26
 800c58e:	42b5      	cmp	r5, r6
 800c590:	d11a      	bne.n	800c5c8 <_printf_common+0xc8>
 800c592:	2000      	movs	r0, #0
 800c594:	e008      	b.n	800c5a8 <_printf_common+0xa8>
 800c596:	2301      	movs	r3, #1
 800c598:	4652      	mov	r2, sl
 800c59a:	4649      	mov	r1, r9
 800c59c:	4638      	mov	r0, r7
 800c59e:	47c0      	blx	r8
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	d103      	bne.n	800c5ac <_printf_common+0xac>
 800c5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ac:	3501      	adds	r5, #1
 800c5ae:	e7c6      	b.n	800c53e <_printf_common+0x3e>
 800c5b0:	18e1      	adds	r1, r4, r3
 800c5b2:	1c5a      	adds	r2, r3, #1
 800c5b4:	2030      	movs	r0, #48	; 0x30
 800c5b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c5ba:	4422      	add	r2, r4
 800c5bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c5c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c5c4:	3302      	adds	r3, #2
 800c5c6:	e7c7      	b.n	800c558 <_printf_common+0x58>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	4622      	mov	r2, r4
 800c5cc:	4649      	mov	r1, r9
 800c5ce:	4638      	mov	r0, r7
 800c5d0:	47c0      	blx	r8
 800c5d2:	3001      	adds	r0, #1
 800c5d4:	d0e6      	beq.n	800c5a4 <_printf_common+0xa4>
 800c5d6:	3601      	adds	r6, #1
 800c5d8:	e7d9      	b.n	800c58e <_printf_common+0x8e>
	...

0800c5dc <_printf_i>:
 800c5dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	4691      	mov	r9, r2
 800c5e4:	7e27      	ldrb	r7, [r4, #24]
 800c5e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c5e8:	2f78      	cmp	r7, #120	; 0x78
 800c5ea:	4680      	mov	r8, r0
 800c5ec:	469a      	mov	sl, r3
 800c5ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5f2:	d807      	bhi.n	800c604 <_printf_i+0x28>
 800c5f4:	2f62      	cmp	r7, #98	; 0x62
 800c5f6:	d80a      	bhi.n	800c60e <_printf_i+0x32>
 800c5f8:	2f00      	cmp	r7, #0
 800c5fa:	f000 80d8 	beq.w	800c7ae <_printf_i+0x1d2>
 800c5fe:	2f58      	cmp	r7, #88	; 0x58
 800c600:	f000 80a3 	beq.w	800c74a <_printf_i+0x16e>
 800c604:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c608:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c60c:	e03a      	b.n	800c684 <_printf_i+0xa8>
 800c60e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c612:	2b15      	cmp	r3, #21
 800c614:	d8f6      	bhi.n	800c604 <_printf_i+0x28>
 800c616:	a001      	add	r0, pc, #4	; (adr r0, 800c61c <_printf_i+0x40>)
 800c618:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c61c:	0800c675 	.word	0x0800c675
 800c620:	0800c689 	.word	0x0800c689
 800c624:	0800c605 	.word	0x0800c605
 800c628:	0800c605 	.word	0x0800c605
 800c62c:	0800c605 	.word	0x0800c605
 800c630:	0800c605 	.word	0x0800c605
 800c634:	0800c689 	.word	0x0800c689
 800c638:	0800c605 	.word	0x0800c605
 800c63c:	0800c605 	.word	0x0800c605
 800c640:	0800c605 	.word	0x0800c605
 800c644:	0800c605 	.word	0x0800c605
 800c648:	0800c795 	.word	0x0800c795
 800c64c:	0800c6b9 	.word	0x0800c6b9
 800c650:	0800c777 	.word	0x0800c777
 800c654:	0800c605 	.word	0x0800c605
 800c658:	0800c605 	.word	0x0800c605
 800c65c:	0800c7b7 	.word	0x0800c7b7
 800c660:	0800c605 	.word	0x0800c605
 800c664:	0800c6b9 	.word	0x0800c6b9
 800c668:	0800c605 	.word	0x0800c605
 800c66c:	0800c605 	.word	0x0800c605
 800c670:	0800c77f 	.word	0x0800c77f
 800c674:	680b      	ldr	r3, [r1, #0]
 800c676:	1d1a      	adds	r2, r3, #4
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	600a      	str	r2, [r1, #0]
 800c67c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c680:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c684:	2301      	movs	r3, #1
 800c686:	e0a3      	b.n	800c7d0 <_printf_i+0x1f4>
 800c688:	6825      	ldr	r5, [r4, #0]
 800c68a:	6808      	ldr	r0, [r1, #0]
 800c68c:	062e      	lsls	r6, r5, #24
 800c68e:	f100 0304 	add.w	r3, r0, #4
 800c692:	d50a      	bpl.n	800c6aa <_printf_i+0xce>
 800c694:	6805      	ldr	r5, [r0, #0]
 800c696:	600b      	str	r3, [r1, #0]
 800c698:	2d00      	cmp	r5, #0
 800c69a:	da03      	bge.n	800c6a4 <_printf_i+0xc8>
 800c69c:	232d      	movs	r3, #45	; 0x2d
 800c69e:	426d      	negs	r5, r5
 800c6a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6a4:	485e      	ldr	r0, [pc, #376]	; (800c820 <_printf_i+0x244>)
 800c6a6:	230a      	movs	r3, #10
 800c6a8:	e019      	b.n	800c6de <_printf_i+0x102>
 800c6aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c6ae:	6805      	ldr	r5, [r0, #0]
 800c6b0:	600b      	str	r3, [r1, #0]
 800c6b2:	bf18      	it	ne
 800c6b4:	b22d      	sxthne	r5, r5
 800c6b6:	e7ef      	b.n	800c698 <_printf_i+0xbc>
 800c6b8:	680b      	ldr	r3, [r1, #0]
 800c6ba:	6825      	ldr	r5, [r4, #0]
 800c6bc:	1d18      	adds	r0, r3, #4
 800c6be:	6008      	str	r0, [r1, #0]
 800c6c0:	0628      	lsls	r0, r5, #24
 800c6c2:	d501      	bpl.n	800c6c8 <_printf_i+0xec>
 800c6c4:	681d      	ldr	r5, [r3, #0]
 800c6c6:	e002      	b.n	800c6ce <_printf_i+0xf2>
 800c6c8:	0669      	lsls	r1, r5, #25
 800c6ca:	d5fb      	bpl.n	800c6c4 <_printf_i+0xe8>
 800c6cc:	881d      	ldrh	r5, [r3, #0]
 800c6ce:	4854      	ldr	r0, [pc, #336]	; (800c820 <_printf_i+0x244>)
 800c6d0:	2f6f      	cmp	r7, #111	; 0x6f
 800c6d2:	bf0c      	ite	eq
 800c6d4:	2308      	moveq	r3, #8
 800c6d6:	230a      	movne	r3, #10
 800c6d8:	2100      	movs	r1, #0
 800c6da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6de:	6866      	ldr	r6, [r4, #4]
 800c6e0:	60a6      	str	r6, [r4, #8]
 800c6e2:	2e00      	cmp	r6, #0
 800c6e4:	bfa2      	ittt	ge
 800c6e6:	6821      	ldrge	r1, [r4, #0]
 800c6e8:	f021 0104 	bicge.w	r1, r1, #4
 800c6ec:	6021      	strge	r1, [r4, #0]
 800c6ee:	b90d      	cbnz	r5, 800c6f4 <_printf_i+0x118>
 800c6f0:	2e00      	cmp	r6, #0
 800c6f2:	d04d      	beq.n	800c790 <_printf_i+0x1b4>
 800c6f4:	4616      	mov	r6, r2
 800c6f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6fa:	fb03 5711 	mls	r7, r3, r1, r5
 800c6fe:	5dc7      	ldrb	r7, [r0, r7]
 800c700:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c704:	462f      	mov	r7, r5
 800c706:	42bb      	cmp	r3, r7
 800c708:	460d      	mov	r5, r1
 800c70a:	d9f4      	bls.n	800c6f6 <_printf_i+0x11a>
 800c70c:	2b08      	cmp	r3, #8
 800c70e:	d10b      	bne.n	800c728 <_printf_i+0x14c>
 800c710:	6823      	ldr	r3, [r4, #0]
 800c712:	07df      	lsls	r7, r3, #31
 800c714:	d508      	bpl.n	800c728 <_printf_i+0x14c>
 800c716:	6923      	ldr	r3, [r4, #16]
 800c718:	6861      	ldr	r1, [r4, #4]
 800c71a:	4299      	cmp	r1, r3
 800c71c:	bfde      	ittt	le
 800c71e:	2330      	movle	r3, #48	; 0x30
 800c720:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c724:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c728:	1b92      	subs	r2, r2, r6
 800c72a:	6122      	str	r2, [r4, #16]
 800c72c:	f8cd a000 	str.w	sl, [sp]
 800c730:	464b      	mov	r3, r9
 800c732:	aa03      	add	r2, sp, #12
 800c734:	4621      	mov	r1, r4
 800c736:	4640      	mov	r0, r8
 800c738:	f7ff fee2 	bl	800c500 <_printf_common>
 800c73c:	3001      	adds	r0, #1
 800c73e:	d14c      	bne.n	800c7da <_printf_i+0x1fe>
 800c740:	f04f 30ff 	mov.w	r0, #4294967295
 800c744:	b004      	add	sp, #16
 800c746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c74a:	4835      	ldr	r0, [pc, #212]	; (800c820 <_printf_i+0x244>)
 800c74c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c750:	6823      	ldr	r3, [r4, #0]
 800c752:	680e      	ldr	r6, [r1, #0]
 800c754:	061f      	lsls	r7, r3, #24
 800c756:	f856 5b04 	ldr.w	r5, [r6], #4
 800c75a:	600e      	str	r6, [r1, #0]
 800c75c:	d514      	bpl.n	800c788 <_printf_i+0x1ac>
 800c75e:	07d9      	lsls	r1, r3, #31
 800c760:	bf44      	itt	mi
 800c762:	f043 0320 	orrmi.w	r3, r3, #32
 800c766:	6023      	strmi	r3, [r4, #0]
 800c768:	b91d      	cbnz	r5, 800c772 <_printf_i+0x196>
 800c76a:	6823      	ldr	r3, [r4, #0]
 800c76c:	f023 0320 	bic.w	r3, r3, #32
 800c770:	6023      	str	r3, [r4, #0]
 800c772:	2310      	movs	r3, #16
 800c774:	e7b0      	b.n	800c6d8 <_printf_i+0xfc>
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	f043 0320 	orr.w	r3, r3, #32
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	2378      	movs	r3, #120	; 0x78
 800c780:	4828      	ldr	r0, [pc, #160]	; (800c824 <_printf_i+0x248>)
 800c782:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c786:	e7e3      	b.n	800c750 <_printf_i+0x174>
 800c788:	065e      	lsls	r6, r3, #25
 800c78a:	bf48      	it	mi
 800c78c:	b2ad      	uxthmi	r5, r5
 800c78e:	e7e6      	b.n	800c75e <_printf_i+0x182>
 800c790:	4616      	mov	r6, r2
 800c792:	e7bb      	b.n	800c70c <_printf_i+0x130>
 800c794:	680b      	ldr	r3, [r1, #0]
 800c796:	6826      	ldr	r6, [r4, #0]
 800c798:	6960      	ldr	r0, [r4, #20]
 800c79a:	1d1d      	adds	r5, r3, #4
 800c79c:	600d      	str	r5, [r1, #0]
 800c79e:	0635      	lsls	r5, r6, #24
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	d501      	bpl.n	800c7a8 <_printf_i+0x1cc>
 800c7a4:	6018      	str	r0, [r3, #0]
 800c7a6:	e002      	b.n	800c7ae <_printf_i+0x1d2>
 800c7a8:	0671      	lsls	r1, r6, #25
 800c7aa:	d5fb      	bpl.n	800c7a4 <_printf_i+0x1c8>
 800c7ac:	8018      	strh	r0, [r3, #0]
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	6123      	str	r3, [r4, #16]
 800c7b2:	4616      	mov	r6, r2
 800c7b4:	e7ba      	b.n	800c72c <_printf_i+0x150>
 800c7b6:	680b      	ldr	r3, [r1, #0]
 800c7b8:	1d1a      	adds	r2, r3, #4
 800c7ba:	600a      	str	r2, [r1, #0]
 800c7bc:	681e      	ldr	r6, [r3, #0]
 800c7be:	6862      	ldr	r2, [r4, #4]
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	f7f3 fd24 	bl	8000210 <memchr>
 800c7c8:	b108      	cbz	r0, 800c7ce <_printf_i+0x1f2>
 800c7ca:	1b80      	subs	r0, r0, r6
 800c7cc:	6060      	str	r0, [r4, #4]
 800c7ce:	6863      	ldr	r3, [r4, #4]
 800c7d0:	6123      	str	r3, [r4, #16]
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7d8:	e7a8      	b.n	800c72c <_printf_i+0x150>
 800c7da:	6923      	ldr	r3, [r4, #16]
 800c7dc:	4632      	mov	r2, r6
 800c7de:	4649      	mov	r1, r9
 800c7e0:	4640      	mov	r0, r8
 800c7e2:	47d0      	blx	sl
 800c7e4:	3001      	adds	r0, #1
 800c7e6:	d0ab      	beq.n	800c740 <_printf_i+0x164>
 800c7e8:	6823      	ldr	r3, [r4, #0]
 800c7ea:	079b      	lsls	r3, r3, #30
 800c7ec:	d413      	bmi.n	800c816 <_printf_i+0x23a>
 800c7ee:	68e0      	ldr	r0, [r4, #12]
 800c7f0:	9b03      	ldr	r3, [sp, #12]
 800c7f2:	4298      	cmp	r0, r3
 800c7f4:	bfb8      	it	lt
 800c7f6:	4618      	movlt	r0, r3
 800c7f8:	e7a4      	b.n	800c744 <_printf_i+0x168>
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	4632      	mov	r2, r6
 800c7fe:	4649      	mov	r1, r9
 800c800:	4640      	mov	r0, r8
 800c802:	47d0      	blx	sl
 800c804:	3001      	adds	r0, #1
 800c806:	d09b      	beq.n	800c740 <_printf_i+0x164>
 800c808:	3501      	adds	r5, #1
 800c80a:	68e3      	ldr	r3, [r4, #12]
 800c80c:	9903      	ldr	r1, [sp, #12]
 800c80e:	1a5b      	subs	r3, r3, r1
 800c810:	42ab      	cmp	r3, r5
 800c812:	dcf2      	bgt.n	800c7fa <_printf_i+0x21e>
 800c814:	e7eb      	b.n	800c7ee <_printf_i+0x212>
 800c816:	2500      	movs	r5, #0
 800c818:	f104 0619 	add.w	r6, r4, #25
 800c81c:	e7f5      	b.n	800c80a <_printf_i+0x22e>
 800c81e:	bf00      	nop
 800c820:	08023f22 	.word	0x08023f22
 800c824:	08023f33 	.word	0x08023f33

0800c828 <_scanf_float>:
 800c828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82c:	b087      	sub	sp, #28
 800c82e:	4617      	mov	r7, r2
 800c830:	9303      	str	r3, [sp, #12]
 800c832:	688b      	ldr	r3, [r1, #8]
 800c834:	1e5a      	subs	r2, r3, #1
 800c836:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c83a:	bf83      	ittte	hi
 800c83c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c840:	195b      	addhi	r3, r3, r5
 800c842:	9302      	strhi	r3, [sp, #8]
 800c844:	2300      	movls	r3, #0
 800c846:	bf86      	itte	hi
 800c848:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c84c:	608b      	strhi	r3, [r1, #8]
 800c84e:	9302      	strls	r3, [sp, #8]
 800c850:	680b      	ldr	r3, [r1, #0]
 800c852:	468b      	mov	fp, r1
 800c854:	2500      	movs	r5, #0
 800c856:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c85a:	f84b 3b1c 	str.w	r3, [fp], #28
 800c85e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c862:	4680      	mov	r8, r0
 800c864:	460c      	mov	r4, r1
 800c866:	465e      	mov	r6, fp
 800c868:	46aa      	mov	sl, r5
 800c86a:	46a9      	mov	r9, r5
 800c86c:	9501      	str	r5, [sp, #4]
 800c86e:	68a2      	ldr	r2, [r4, #8]
 800c870:	b152      	cbz	r2, 800c888 <_scanf_float+0x60>
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b4e      	cmp	r3, #78	; 0x4e
 800c878:	d864      	bhi.n	800c944 <_scanf_float+0x11c>
 800c87a:	2b40      	cmp	r3, #64	; 0x40
 800c87c:	d83c      	bhi.n	800c8f8 <_scanf_float+0xd0>
 800c87e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c882:	b2c8      	uxtb	r0, r1
 800c884:	280e      	cmp	r0, #14
 800c886:	d93a      	bls.n	800c8fe <_scanf_float+0xd6>
 800c888:	f1b9 0f00 	cmp.w	r9, #0
 800c88c:	d003      	beq.n	800c896 <_scanf_float+0x6e>
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c894:	6023      	str	r3, [r4, #0]
 800c896:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c89a:	f1ba 0f01 	cmp.w	sl, #1
 800c89e:	f200 8113 	bhi.w	800cac8 <_scanf_float+0x2a0>
 800c8a2:	455e      	cmp	r6, fp
 800c8a4:	f200 8105 	bhi.w	800cab2 <_scanf_float+0x28a>
 800c8a8:	2501      	movs	r5, #1
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	b007      	add	sp, #28
 800c8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c8b6:	2a0d      	cmp	r2, #13
 800c8b8:	d8e6      	bhi.n	800c888 <_scanf_float+0x60>
 800c8ba:	a101      	add	r1, pc, #4	; (adr r1, 800c8c0 <_scanf_float+0x98>)
 800c8bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c8c0:	0800c9ff 	.word	0x0800c9ff
 800c8c4:	0800c889 	.word	0x0800c889
 800c8c8:	0800c889 	.word	0x0800c889
 800c8cc:	0800c889 	.word	0x0800c889
 800c8d0:	0800ca5f 	.word	0x0800ca5f
 800c8d4:	0800ca37 	.word	0x0800ca37
 800c8d8:	0800c889 	.word	0x0800c889
 800c8dc:	0800c889 	.word	0x0800c889
 800c8e0:	0800ca0d 	.word	0x0800ca0d
 800c8e4:	0800c889 	.word	0x0800c889
 800c8e8:	0800c889 	.word	0x0800c889
 800c8ec:	0800c889 	.word	0x0800c889
 800c8f0:	0800c889 	.word	0x0800c889
 800c8f4:	0800c9c5 	.word	0x0800c9c5
 800c8f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c8fc:	e7db      	b.n	800c8b6 <_scanf_float+0x8e>
 800c8fe:	290e      	cmp	r1, #14
 800c900:	d8c2      	bhi.n	800c888 <_scanf_float+0x60>
 800c902:	a001      	add	r0, pc, #4	; (adr r0, 800c908 <_scanf_float+0xe0>)
 800c904:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c908:	0800c9b7 	.word	0x0800c9b7
 800c90c:	0800c889 	.word	0x0800c889
 800c910:	0800c9b7 	.word	0x0800c9b7
 800c914:	0800ca4b 	.word	0x0800ca4b
 800c918:	0800c889 	.word	0x0800c889
 800c91c:	0800c965 	.word	0x0800c965
 800c920:	0800c9a1 	.word	0x0800c9a1
 800c924:	0800c9a1 	.word	0x0800c9a1
 800c928:	0800c9a1 	.word	0x0800c9a1
 800c92c:	0800c9a1 	.word	0x0800c9a1
 800c930:	0800c9a1 	.word	0x0800c9a1
 800c934:	0800c9a1 	.word	0x0800c9a1
 800c938:	0800c9a1 	.word	0x0800c9a1
 800c93c:	0800c9a1 	.word	0x0800c9a1
 800c940:	0800c9a1 	.word	0x0800c9a1
 800c944:	2b6e      	cmp	r3, #110	; 0x6e
 800c946:	d809      	bhi.n	800c95c <_scanf_float+0x134>
 800c948:	2b60      	cmp	r3, #96	; 0x60
 800c94a:	d8b2      	bhi.n	800c8b2 <_scanf_float+0x8a>
 800c94c:	2b54      	cmp	r3, #84	; 0x54
 800c94e:	d077      	beq.n	800ca40 <_scanf_float+0x218>
 800c950:	2b59      	cmp	r3, #89	; 0x59
 800c952:	d199      	bne.n	800c888 <_scanf_float+0x60>
 800c954:	2d07      	cmp	r5, #7
 800c956:	d197      	bne.n	800c888 <_scanf_float+0x60>
 800c958:	2508      	movs	r5, #8
 800c95a:	e029      	b.n	800c9b0 <_scanf_float+0x188>
 800c95c:	2b74      	cmp	r3, #116	; 0x74
 800c95e:	d06f      	beq.n	800ca40 <_scanf_float+0x218>
 800c960:	2b79      	cmp	r3, #121	; 0x79
 800c962:	e7f6      	b.n	800c952 <_scanf_float+0x12a>
 800c964:	6821      	ldr	r1, [r4, #0]
 800c966:	05c8      	lsls	r0, r1, #23
 800c968:	d51a      	bpl.n	800c9a0 <_scanf_float+0x178>
 800c96a:	9b02      	ldr	r3, [sp, #8]
 800c96c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c970:	6021      	str	r1, [r4, #0]
 800c972:	f109 0901 	add.w	r9, r9, #1
 800c976:	b11b      	cbz	r3, 800c980 <_scanf_float+0x158>
 800c978:	3b01      	subs	r3, #1
 800c97a:	3201      	adds	r2, #1
 800c97c:	9302      	str	r3, [sp, #8]
 800c97e:	60a2      	str	r2, [r4, #8]
 800c980:	68a3      	ldr	r3, [r4, #8]
 800c982:	3b01      	subs	r3, #1
 800c984:	60a3      	str	r3, [r4, #8]
 800c986:	6923      	ldr	r3, [r4, #16]
 800c988:	3301      	adds	r3, #1
 800c98a:	6123      	str	r3, [r4, #16]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	3b01      	subs	r3, #1
 800c990:	2b00      	cmp	r3, #0
 800c992:	607b      	str	r3, [r7, #4]
 800c994:	f340 8084 	ble.w	800caa0 <_scanf_float+0x278>
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	3301      	adds	r3, #1
 800c99c:	603b      	str	r3, [r7, #0]
 800c99e:	e766      	b.n	800c86e <_scanf_float+0x46>
 800c9a0:	eb1a 0f05 	cmn.w	sl, r5
 800c9a4:	f47f af70 	bne.w	800c888 <_scanf_float+0x60>
 800c9a8:	6822      	ldr	r2, [r4, #0]
 800c9aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c9ae:	6022      	str	r2, [r4, #0]
 800c9b0:	f806 3b01 	strb.w	r3, [r6], #1
 800c9b4:	e7e4      	b.n	800c980 <_scanf_float+0x158>
 800c9b6:	6822      	ldr	r2, [r4, #0]
 800c9b8:	0610      	lsls	r0, r2, #24
 800c9ba:	f57f af65 	bpl.w	800c888 <_scanf_float+0x60>
 800c9be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9c2:	e7f4      	b.n	800c9ae <_scanf_float+0x186>
 800c9c4:	f1ba 0f00 	cmp.w	sl, #0
 800c9c8:	d10e      	bne.n	800c9e8 <_scanf_float+0x1c0>
 800c9ca:	f1b9 0f00 	cmp.w	r9, #0
 800c9ce:	d10e      	bne.n	800c9ee <_scanf_float+0x1c6>
 800c9d0:	6822      	ldr	r2, [r4, #0]
 800c9d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c9d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c9da:	d108      	bne.n	800c9ee <_scanf_float+0x1c6>
 800c9dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c9e0:	6022      	str	r2, [r4, #0]
 800c9e2:	f04f 0a01 	mov.w	sl, #1
 800c9e6:	e7e3      	b.n	800c9b0 <_scanf_float+0x188>
 800c9e8:	f1ba 0f02 	cmp.w	sl, #2
 800c9ec:	d055      	beq.n	800ca9a <_scanf_float+0x272>
 800c9ee:	2d01      	cmp	r5, #1
 800c9f0:	d002      	beq.n	800c9f8 <_scanf_float+0x1d0>
 800c9f2:	2d04      	cmp	r5, #4
 800c9f4:	f47f af48 	bne.w	800c888 <_scanf_float+0x60>
 800c9f8:	3501      	adds	r5, #1
 800c9fa:	b2ed      	uxtb	r5, r5
 800c9fc:	e7d8      	b.n	800c9b0 <_scanf_float+0x188>
 800c9fe:	f1ba 0f01 	cmp.w	sl, #1
 800ca02:	f47f af41 	bne.w	800c888 <_scanf_float+0x60>
 800ca06:	f04f 0a02 	mov.w	sl, #2
 800ca0a:	e7d1      	b.n	800c9b0 <_scanf_float+0x188>
 800ca0c:	b97d      	cbnz	r5, 800ca2e <_scanf_float+0x206>
 800ca0e:	f1b9 0f00 	cmp.w	r9, #0
 800ca12:	f47f af3c 	bne.w	800c88e <_scanf_float+0x66>
 800ca16:	6822      	ldr	r2, [r4, #0]
 800ca18:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ca1c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ca20:	f47f af39 	bne.w	800c896 <_scanf_float+0x6e>
 800ca24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ca28:	6022      	str	r2, [r4, #0]
 800ca2a:	2501      	movs	r5, #1
 800ca2c:	e7c0      	b.n	800c9b0 <_scanf_float+0x188>
 800ca2e:	2d03      	cmp	r5, #3
 800ca30:	d0e2      	beq.n	800c9f8 <_scanf_float+0x1d0>
 800ca32:	2d05      	cmp	r5, #5
 800ca34:	e7de      	b.n	800c9f4 <_scanf_float+0x1cc>
 800ca36:	2d02      	cmp	r5, #2
 800ca38:	f47f af26 	bne.w	800c888 <_scanf_float+0x60>
 800ca3c:	2503      	movs	r5, #3
 800ca3e:	e7b7      	b.n	800c9b0 <_scanf_float+0x188>
 800ca40:	2d06      	cmp	r5, #6
 800ca42:	f47f af21 	bne.w	800c888 <_scanf_float+0x60>
 800ca46:	2507      	movs	r5, #7
 800ca48:	e7b2      	b.n	800c9b0 <_scanf_float+0x188>
 800ca4a:	6822      	ldr	r2, [r4, #0]
 800ca4c:	0591      	lsls	r1, r2, #22
 800ca4e:	f57f af1b 	bpl.w	800c888 <_scanf_float+0x60>
 800ca52:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ca56:	6022      	str	r2, [r4, #0]
 800ca58:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca5c:	e7a8      	b.n	800c9b0 <_scanf_float+0x188>
 800ca5e:	6822      	ldr	r2, [r4, #0]
 800ca60:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ca64:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ca68:	d006      	beq.n	800ca78 <_scanf_float+0x250>
 800ca6a:	0550      	lsls	r0, r2, #21
 800ca6c:	f57f af0c 	bpl.w	800c888 <_scanf_float+0x60>
 800ca70:	f1b9 0f00 	cmp.w	r9, #0
 800ca74:	f43f af0f 	beq.w	800c896 <_scanf_float+0x6e>
 800ca78:	0591      	lsls	r1, r2, #22
 800ca7a:	bf58      	it	pl
 800ca7c:	9901      	ldrpl	r1, [sp, #4]
 800ca7e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ca82:	bf58      	it	pl
 800ca84:	eba9 0101 	subpl.w	r1, r9, r1
 800ca88:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ca8c:	bf58      	it	pl
 800ca8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ca92:	6022      	str	r2, [r4, #0]
 800ca94:	f04f 0900 	mov.w	r9, #0
 800ca98:	e78a      	b.n	800c9b0 <_scanf_float+0x188>
 800ca9a:	f04f 0a03 	mov.w	sl, #3
 800ca9e:	e787      	b.n	800c9b0 <_scanf_float+0x188>
 800caa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800caa4:	4639      	mov	r1, r7
 800caa6:	4640      	mov	r0, r8
 800caa8:	4798      	blx	r3
 800caaa:	2800      	cmp	r0, #0
 800caac:	f43f aedf 	beq.w	800c86e <_scanf_float+0x46>
 800cab0:	e6ea      	b.n	800c888 <_scanf_float+0x60>
 800cab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cab6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800caba:	463a      	mov	r2, r7
 800cabc:	4640      	mov	r0, r8
 800cabe:	4798      	blx	r3
 800cac0:	6923      	ldr	r3, [r4, #16]
 800cac2:	3b01      	subs	r3, #1
 800cac4:	6123      	str	r3, [r4, #16]
 800cac6:	e6ec      	b.n	800c8a2 <_scanf_float+0x7a>
 800cac8:	1e6b      	subs	r3, r5, #1
 800caca:	2b06      	cmp	r3, #6
 800cacc:	d825      	bhi.n	800cb1a <_scanf_float+0x2f2>
 800cace:	2d02      	cmp	r5, #2
 800cad0:	d836      	bhi.n	800cb40 <_scanf_float+0x318>
 800cad2:	455e      	cmp	r6, fp
 800cad4:	f67f aee8 	bls.w	800c8a8 <_scanf_float+0x80>
 800cad8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cadc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cae0:	463a      	mov	r2, r7
 800cae2:	4640      	mov	r0, r8
 800cae4:	4798      	blx	r3
 800cae6:	6923      	ldr	r3, [r4, #16]
 800cae8:	3b01      	subs	r3, #1
 800caea:	6123      	str	r3, [r4, #16]
 800caec:	e7f1      	b.n	800cad2 <_scanf_float+0x2aa>
 800caee:	9802      	ldr	r0, [sp, #8]
 800caf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800caf4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800caf8:	9002      	str	r0, [sp, #8]
 800cafa:	463a      	mov	r2, r7
 800cafc:	4640      	mov	r0, r8
 800cafe:	4798      	blx	r3
 800cb00:	6923      	ldr	r3, [r4, #16]
 800cb02:	3b01      	subs	r3, #1
 800cb04:	6123      	str	r3, [r4, #16]
 800cb06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb0a:	fa5f fa8a 	uxtb.w	sl, sl
 800cb0e:	f1ba 0f02 	cmp.w	sl, #2
 800cb12:	d1ec      	bne.n	800caee <_scanf_float+0x2c6>
 800cb14:	3d03      	subs	r5, #3
 800cb16:	b2ed      	uxtb	r5, r5
 800cb18:	1b76      	subs	r6, r6, r5
 800cb1a:	6823      	ldr	r3, [r4, #0]
 800cb1c:	05da      	lsls	r2, r3, #23
 800cb1e:	d52f      	bpl.n	800cb80 <_scanf_float+0x358>
 800cb20:	055b      	lsls	r3, r3, #21
 800cb22:	d510      	bpl.n	800cb46 <_scanf_float+0x31e>
 800cb24:	455e      	cmp	r6, fp
 800cb26:	f67f aebf 	bls.w	800c8a8 <_scanf_float+0x80>
 800cb2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb32:	463a      	mov	r2, r7
 800cb34:	4640      	mov	r0, r8
 800cb36:	4798      	blx	r3
 800cb38:	6923      	ldr	r3, [r4, #16]
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	6123      	str	r3, [r4, #16]
 800cb3e:	e7f1      	b.n	800cb24 <_scanf_float+0x2fc>
 800cb40:	46aa      	mov	sl, r5
 800cb42:	9602      	str	r6, [sp, #8]
 800cb44:	e7df      	b.n	800cb06 <_scanf_float+0x2de>
 800cb46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cb4a:	6923      	ldr	r3, [r4, #16]
 800cb4c:	2965      	cmp	r1, #101	; 0x65
 800cb4e:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb52:	f106 35ff 	add.w	r5, r6, #4294967295
 800cb56:	6123      	str	r3, [r4, #16]
 800cb58:	d00c      	beq.n	800cb74 <_scanf_float+0x34c>
 800cb5a:	2945      	cmp	r1, #69	; 0x45
 800cb5c:	d00a      	beq.n	800cb74 <_scanf_float+0x34c>
 800cb5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb62:	463a      	mov	r2, r7
 800cb64:	4640      	mov	r0, r8
 800cb66:	4798      	blx	r3
 800cb68:	6923      	ldr	r3, [r4, #16]
 800cb6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cb6e:	3b01      	subs	r3, #1
 800cb70:	1eb5      	subs	r5, r6, #2
 800cb72:	6123      	str	r3, [r4, #16]
 800cb74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb78:	463a      	mov	r2, r7
 800cb7a:	4640      	mov	r0, r8
 800cb7c:	4798      	blx	r3
 800cb7e:	462e      	mov	r6, r5
 800cb80:	6825      	ldr	r5, [r4, #0]
 800cb82:	f015 0510 	ands.w	r5, r5, #16
 800cb86:	d158      	bne.n	800cc3a <_scanf_float+0x412>
 800cb88:	7035      	strb	r5, [r6, #0]
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cb90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb94:	d11c      	bne.n	800cbd0 <_scanf_float+0x3a8>
 800cb96:	9b01      	ldr	r3, [sp, #4]
 800cb98:	454b      	cmp	r3, r9
 800cb9a:	eba3 0209 	sub.w	r2, r3, r9
 800cb9e:	d124      	bne.n	800cbea <_scanf_float+0x3c2>
 800cba0:	2200      	movs	r2, #0
 800cba2:	4659      	mov	r1, fp
 800cba4:	4640      	mov	r0, r8
 800cba6:	f000 fe9d 	bl	800d8e4 <_strtod_r>
 800cbaa:	9b03      	ldr	r3, [sp, #12]
 800cbac:	6821      	ldr	r1, [r4, #0]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f011 0f02 	tst.w	r1, #2
 800cbb4:	ec57 6b10 	vmov	r6, r7, d0
 800cbb8:	f103 0204 	add.w	r2, r3, #4
 800cbbc:	d020      	beq.n	800cc00 <_scanf_float+0x3d8>
 800cbbe:	9903      	ldr	r1, [sp, #12]
 800cbc0:	600a      	str	r2, [r1, #0]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	e9c3 6700 	strd	r6, r7, [r3]
 800cbc8:	68e3      	ldr	r3, [r4, #12]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	60e3      	str	r3, [r4, #12]
 800cbce:	e66c      	b.n	800c8aa <_scanf_float+0x82>
 800cbd0:	9b04      	ldr	r3, [sp, #16]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d0e4      	beq.n	800cba0 <_scanf_float+0x378>
 800cbd6:	9905      	ldr	r1, [sp, #20]
 800cbd8:	230a      	movs	r3, #10
 800cbda:	462a      	mov	r2, r5
 800cbdc:	3101      	adds	r1, #1
 800cbde:	4640      	mov	r0, r8
 800cbe0:	f000 ff72 	bl	800dac8 <_strtol_r>
 800cbe4:	9b04      	ldr	r3, [sp, #16]
 800cbe6:	9e05      	ldr	r6, [sp, #20]
 800cbe8:	1ac2      	subs	r2, r0, r3
 800cbea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cbee:	429e      	cmp	r6, r3
 800cbf0:	bf28      	it	cs
 800cbf2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cbf6:	4912      	ldr	r1, [pc, #72]	; (800cc40 <_scanf_float+0x418>)
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f000 f82b 	bl	800cc54 <siprintf>
 800cbfe:	e7cf      	b.n	800cba0 <_scanf_float+0x378>
 800cc00:	f011 0f04 	tst.w	r1, #4
 800cc04:	9903      	ldr	r1, [sp, #12]
 800cc06:	600a      	str	r2, [r1, #0]
 800cc08:	d1db      	bne.n	800cbc2 <_scanf_float+0x39a>
 800cc0a:	f8d3 8000 	ldr.w	r8, [r3]
 800cc0e:	ee10 2a10 	vmov	r2, s0
 800cc12:	ee10 0a10 	vmov	r0, s0
 800cc16:	463b      	mov	r3, r7
 800cc18:	4639      	mov	r1, r7
 800cc1a:	f7f3 ff9f 	bl	8000b5c <__aeabi_dcmpun>
 800cc1e:	b128      	cbz	r0, 800cc2c <_scanf_float+0x404>
 800cc20:	4808      	ldr	r0, [pc, #32]	; (800cc44 <_scanf_float+0x41c>)
 800cc22:	f000 f811 	bl	800cc48 <nanf>
 800cc26:	ed88 0a00 	vstr	s0, [r8]
 800cc2a:	e7cd      	b.n	800cbc8 <_scanf_float+0x3a0>
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	4639      	mov	r1, r7
 800cc30:	f7f3 fff2 	bl	8000c18 <__aeabi_d2f>
 800cc34:	f8c8 0000 	str.w	r0, [r8]
 800cc38:	e7c6      	b.n	800cbc8 <_scanf_float+0x3a0>
 800cc3a:	2500      	movs	r5, #0
 800cc3c:	e635      	b.n	800c8aa <_scanf_float+0x82>
 800cc3e:	bf00      	nop
 800cc40:	08023f44 	.word	0x08023f44
 800cc44:	08024053 	.word	0x08024053

0800cc48 <nanf>:
 800cc48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cc50 <nanf+0x8>
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop
 800cc50:	7fc00000 	.word	0x7fc00000

0800cc54 <siprintf>:
 800cc54:	b40e      	push	{r1, r2, r3}
 800cc56:	b500      	push	{lr}
 800cc58:	b09c      	sub	sp, #112	; 0x70
 800cc5a:	ab1d      	add	r3, sp, #116	; 0x74
 800cc5c:	9002      	str	r0, [sp, #8]
 800cc5e:	9006      	str	r0, [sp, #24]
 800cc60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc64:	4809      	ldr	r0, [pc, #36]	; (800cc8c <siprintf+0x38>)
 800cc66:	9107      	str	r1, [sp, #28]
 800cc68:	9104      	str	r1, [sp, #16]
 800cc6a:	4909      	ldr	r1, [pc, #36]	; (800cc90 <siprintf+0x3c>)
 800cc6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc70:	9105      	str	r1, [sp, #20]
 800cc72:	6800      	ldr	r0, [r0, #0]
 800cc74:	9301      	str	r3, [sp, #4]
 800cc76:	a902      	add	r1, sp, #8
 800cc78:	f002 ff48 	bl	800fb0c <_svfiprintf_r>
 800cc7c:	9b02      	ldr	r3, [sp, #8]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	701a      	strb	r2, [r3, #0]
 800cc82:	b01c      	add	sp, #112	; 0x70
 800cc84:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc88:	b003      	add	sp, #12
 800cc8a:	4770      	bx	lr
 800cc8c:	20000040 	.word	0x20000040
 800cc90:	ffff0208 	.word	0xffff0208

0800cc94 <sulp>:
 800cc94:	b570      	push	{r4, r5, r6, lr}
 800cc96:	4604      	mov	r4, r0
 800cc98:	460d      	mov	r5, r1
 800cc9a:	ec45 4b10 	vmov	d0, r4, r5
 800cc9e:	4616      	mov	r6, r2
 800cca0:	f002 fcd0 	bl	800f644 <__ulp>
 800cca4:	ec51 0b10 	vmov	r0, r1, d0
 800cca8:	b17e      	cbz	r6, 800ccca <sulp+0x36>
 800ccaa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ccae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	dd09      	ble.n	800ccca <sulp+0x36>
 800ccb6:	051b      	lsls	r3, r3, #20
 800ccb8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ccbc:	2400      	movs	r4, #0
 800ccbe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ccc2:	4622      	mov	r2, r4
 800ccc4:	462b      	mov	r3, r5
 800ccc6:	f7f3 fcaf 	bl	8000628 <__aeabi_dmul>
 800ccca:	bd70      	pop	{r4, r5, r6, pc}
 800cccc:	0000      	movs	r0, r0
	...

0800ccd0 <_strtod_l>:
 800ccd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd4:	b0a3      	sub	sp, #140	; 0x8c
 800ccd6:	461f      	mov	r7, r3
 800ccd8:	2300      	movs	r3, #0
 800ccda:	931e      	str	r3, [sp, #120]	; 0x78
 800ccdc:	4ba4      	ldr	r3, [pc, #656]	; (800cf70 <_strtod_l+0x2a0>)
 800ccde:	9219      	str	r2, [sp, #100]	; 0x64
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	9307      	str	r3, [sp, #28]
 800cce4:	4604      	mov	r4, r0
 800cce6:	4618      	mov	r0, r3
 800cce8:	4688      	mov	r8, r1
 800ccea:	f7f3 fa83 	bl	80001f4 <strlen>
 800ccee:	f04f 0a00 	mov.w	sl, #0
 800ccf2:	4605      	mov	r5, r0
 800ccf4:	f04f 0b00 	mov.w	fp, #0
 800ccf8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ccfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ccfe:	781a      	ldrb	r2, [r3, #0]
 800cd00:	2a2b      	cmp	r2, #43	; 0x2b
 800cd02:	d04c      	beq.n	800cd9e <_strtod_l+0xce>
 800cd04:	d839      	bhi.n	800cd7a <_strtod_l+0xaa>
 800cd06:	2a0d      	cmp	r2, #13
 800cd08:	d832      	bhi.n	800cd70 <_strtod_l+0xa0>
 800cd0a:	2a08      	cmp	r2, #8
 800cd0c:	d832      	bhi.n	800cd74 <_strtod_l+0xa4>
 800cd0e:	2a00      	cmp	r2, #0
 800cd10:	d03c      	beq.n	800cd8c <_strtod_l+0xbc>
 800cd12:	2300      	movs	r3, #0
 800cd14:	930e      	str	r3, [sp, #56]	; 0x38
 800cd16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800cd18:	7833      	ldrb	r3, [r6, #0]
 800cd1a:	2b30      	cmp	r3, #48	; 0x30
 800cd1c:	f040 80b4 	bne.w	800ce88 <_strtod_l+0x1b8>
 800cd20:	7873      	ldrb	r3, [r6, #1]
 800cd22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd26:	2b58      	cmp	r3, #88	; 0x58
 800cd28:	d16c      	bne.n	800ce04 <_strtod_l+0x134>
 800cd2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd2c:	9301      	str	r3, [sp, #4]
 800cd2e:	ab1e      	add	r3, sp, #120	; 0x78
 800cd30:	9702      	str	r7, [sp, #8]
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	4a8f      	ldr	r2, [pc, #572]	; (800cf74 <_strtod_l+0x2a4>)
 800cd36:	ab1f      	add	r3, sp, #124	; 0x7c
 800cd38:	a91d      	add	r1, sp, #116	; 0x74
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f001 fde2 	bl	800e904 <__gethex>
 800cd40:	f010 0707 	ands.w	r7, r0, #7
 800cd44:	4605      	mov	r5, r0
 800cd46:	d005      	beq.n	800cd54 <_strtod_l+0x84>
 800cd48:	2f06      	cmp	r7, #6
 800cd4a:	d12a      	bne.n	800cda2 <_strtod_l+0xd2>
 800cd4c:	3601      	adds	r6, #1
 800cd4e:	2300      	movs	r3, #0
 800cd50:	961d      	str	r6, [sp, #116]	; 0x74
 800cd52:	930e      	str	r3, [sp, #56]	; 0x38
 800cd54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	f040 8596 	bne.w	800d888 <_strtod_l+0xbb8>
 800cd5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd5e:	b1db      	cbz	r3, 800cd98 <_strtod_l+0xc8>
 800cd60:	4652      	mov	r2, sl
 800cd62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cd66:	ec43 2b10 	vmov	d0, r2, r3
 800cd6a:	b023      	add	sp, #140	; 0x8c
 800cd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd70:	2a20      	cmp	r2, #32
 800cd72:	d1ce      	bne.n	800cd12 <_strtod_l+0x42>
 800cd74:	3301      	adds	r3, #1
 800cd76:	931d      	str	r3, [sp, #116]	; 0x74
 800cd78:	e7c0      	b.n	800ccfc <_strtod_l+0x2c>
 800cd7a:	2a2d      	cmp	r2, #45	; 0x2d
 800cd7c:	d1c9      	bne.n	800cd12 <_strtod_l+0x42>
 800cd7e:	2201      	movs	r2, #1
 800cd80:	920e      	str	r2, [sp, #56]	; 0x38
 800cd82:	1c5a      	adds	r2, r3, #1
 800cd84:	921d      	str	r2, [sp, #116]	; 0x74
 800cd86:	785b      	ldrb	r3, [r3, #1]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d1c4      	bne.n	800cd16 <_strtod_l+0x46>
 800cd8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd8e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f040 8576 	bne.w	800d884 <_strtod_l+0xbb4>
 800cd98:	4652      	mov	r2, sl
 800cd9a:	465b      	mov	r3, fp
 800cd9c:	e7e3      	b.n	800cd66 <_strtod_l+0x96>
 800cd9e:	2200      	movs	r2, #0
 800cda0:	e7ee      	b.n	800cd80 <_strtod_l+0xb0>
 800cda2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cda4:	b13a      	cbz	r2, 800cdb6 <_strtod_l+0xe6>
 800cda6:	2135      	movs	r1, #53	; 0x35
 800cda8:	a820      	add	r0, sp, #128	; 0x80
 800cdaa:	f002 fd56 	bl	800f85a <__copybits>
 800cdae:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f002 f91b 	bl	800efec <_Bfree>
 800cdb6:	3f01      	subs	r7, #1
 800cdb8:	2f05      	cmp	r7, #5
 800cdba:	d807      	bhi.n	800cdcc <_strtod_l+0xfc>
 800cdbc:	e8df f007 	tbb	[pc, r7]
 800cdc0:	1d180b0e 	.word	0x1d180b0e
 800cdc4:	030e      	.short	0x030e
 800cdc6:	f04f 0b00 	mov.w	fp, #0
 800cdca:	46da      	mov	sl, fp
 800cdcc:	0728      	lsls	r0, r5, #28
 800cdce:	d5c1      	bpl.n	800cd54 <_strtod_l+0x84>
 800cdd0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cdd4:	e7be      	b.n	800cd54 <_strtod_l+0x84>
 800cdd6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800cdda:	e7f7      	b.n	800cdcc <_strtod_l+0xfc>
 800cddc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800cde0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cde2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cde6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cdea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cdee:	e7ed      	b.n	800cdcc <_strtod_l+0xfc>
 800cdf0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800cf78 <_strtod_l+0x2a8>
 800cdf4:	f04f 0a00 	mov.w	sl, #0
 800cdf8:	e7e8      	b.n	800cdcc <_strtod_l+0xfc>
 800cdfa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cdfe:	f04f 3aff 	mov.w	sl, #4294967295
 800ce02:	e7e3      	b.n	800cdcc <_strtod_l+0xfc>
 800ce04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce06:	1c5a      	adds	r2, r3, #1
 800ce08:	921d      	str	r2, [sp, #116]	; 0x74
 800ce0a:	785b      	ldrb	r3, [r3, #1]
 800ce0c:	2b30      	cmp	r3, #48	; 0x30
 800ce0e:	d0f9      	beq.n	800ce04 <_strtod_l+0x134>
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d09f      	beq.n	800cd54 <_strtod_l+0x84>
 800ce14:	2301      	movs	r3, #1
 800ce16:	f04f 0900 	mov.w	r9, #0
 800ce1a:	9304      	str	r3, [sp, #16]
 800ce1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ce20:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ce24:	464f      	mov	r7, r9
 800ce26:	220a      	movs	r2, #10
 800ce28:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ce2a:	7806      	ldrb	r6, [r0, #0]
 800ce2c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ce30:	b2d9      	uxtb	r1, r3
 800ce32:	2909      	cmp	r1, #9
 800ce34:	d92a      	bls.n	800ce8c <_strtod_l+0x1bc>
 800ce36:	9907      	ldr	r1, [sp, #28]
 800ce38:	462a      	mov	r2, r5
 800ce3a:	f003 f8d9 	bl	800fff0 <strncmp>
 800ce3e:	b398      	cbz	r0, 800cea8 <_strtod_l+0x1d8>
 800ce40:	2000      	movs	r0, #0
 800ce42:	4633      	mov	r3, r6
 800ce44:	463d      	mov	r5, r7
 800ce46:	9007      	str	r0, [sp, #28]
 800ce48:	4602      	mov	r2, r0
 800ce4a:	2b65      	cmp	r3, #101	; 0x65
 800ce4c:	d001      	beq.n	800ce52 <_strtod_l+0x182>
 800ce4e:	2b45      	cmp	r3, #69	; 0x45
 800ce50:	d118      	bne.n	800ce84 <_strtod_l+0x1b4>
 800ce52:	b91d      	cbnz	r5, 800ce5c <_strtod_l+0x18c>
 800ce54:	9b04      	ldr	r3, [sp, #16]
 800ce56:	4303      	orrs	r3, r0
 800ce58:	d098      	beq.n	800cd8c <_strtod_l+0xbc>
 800ce5a:	2500      	movs	r5, #0
 800ce5c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800ce60:	f108 0301 	add.w	r3, r8, #1
 800ce64:	931d      	str	r3, [sp, #116]	; 0x74
 800ce66:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ce6a:	2b2b      	cmp	r3, #43	; 0x2b
 800ce6c:	d075      	beq.n	800cf5a <_strtod_l+0x28a>
 800ce6e:	2b2d      	cmp	r3, #45	; 0x2d
 800ce70:	d07b      	beq.n	800cf6a <_strtod_l+0x29a>
 800ce72:	f04f 0c00 	mov.w	ip, #0
 800ce76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ce7a:	2909      	cmp	r1, #9
 800ce7c:	f240 8082 	bls.w	800cf84 <_strtod_l+0x2b4>
 800ce80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ce84:	2600      	movs	r6, #0
 800ce86:	e09d      	b.n	800cfc4 <_strtod_l+0x2f4>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	e7c4      	b.n	800ce16 <_strtod_l+0x146>
 800ce8c:	2f08      	cmp	r7, #8
 800ce8e:	bfd8      	it	le
 800ce90:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ce92:	f100 0001 	add.w	r0, r0, #1
 800ce96:	bfda      	itte	le
 800ce98:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce9c:	9309      	strle	r3, [sp, #36]	; 0x24
 800ce9e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cea2:	3701      	adds	r7, #1
 800cea4:	901d      	str	r0, [sp, #116]	; 0x74
 800cea6:	e7bf      	b.n	800ce28 <_strtod_l+0x158>
 800cea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ceaa:	195a      	adds	r2, r3, r5
 800ceac:	921d      	str	r2, [sp, #116]	; 0x74
 800ceae:	5d5b      	ldrb	r3, [r3, r5]
 800ceb0:	2f00      	cmp	r7, #0
 800ceb2:	d037      	beq.n	800cf24 <_strtod_l+0x254>
 800ceb4:	9007      	str	r0, [sp, #28]
 800ceb6:	463d      	mov	r5, r7
 800ceb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800cebc:	2a09      	cmp	r2, #9
 800cebe:	d912      	bls.n	800cee6 <_strtod_l+0x216>
 800cec0:	2201      	movs	r2, #1
 800cec2:	e7c2      	b.n	800ce4a <_strtod_l+0x17a>
 800cec4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cec6:	1c5a      	adds	r2, r3, #1
 800cec8:	921d      	str	r2, [sp, #116]	; 0x74
 800ceca:	785b      	ldrb	r3, [r3, #1]
 800cecc:	3001      	adds	r0, #1
 800cece:	2b30      	cmp	r3, #48	; 0x30
 800ced0:	d0f8      	beq.n	800cec4 <_strtod_l+0x1f4>
 800ced2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ced6:	2a08      	cmp	r2, #8
 800ced8:	f200 84db 	bhi.w	800d892 <_strtod_l+0xbc2>
 800cedc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cede:	9007      	str	r0, [sp, #28]
 800cee0:	2000      	movs	r0, #0
 800cee2:	920a      	str	r2, [sp, #40]	; 0x28
 800cee4:	4605      	mov	r5, r0
 800cee6:	3b30      	subs	r3, #48	; 0x30
 800cee8:	f100 0201 	add.w	r2, r0, #1
 800ceec:	d014      	beq.n	800cf18 <_strtod_l+0x248>
 800ceee:	9907      	ldr	r1, [sp, #28]
 800cef0:	4411      	add	r1, r2
 800cef2:	9107      	str	r1, [sp, #28]
 800cef4:	462a      	mov	r2, r5
 800cef6:	eb00 0e05 	add.w	lr, r0, r5
 800cefa:	210a      	movs	r1, #10
 800cefc:	4572      	cmp	r2, lr
 800cefe:	d113      	bne.n	800cf28 <_strtod_l+0x258>
 800cf00:	182a      	adds	r2, r5, r0
 800cf02:	2a08      	cmp	r2, #8
 800cf04:	f105 0501 	add.w	r5, r5, #1
 800cf08:	4405      	add	r5, r0
 800cf0a:	dc1c      	bgt.n	800cf46 <_strtod_l+0x276>
 800cf0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf0e:	220a      	movs	r2, #10
 800cf10:	fb02 3301 	mla	r3, r2, r1, r3
 800cf14:	9309      	str	r3, [sp, #36]	; 0x24
 800cf16:	2200      	movs	r2, #0
 800cf18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf1a:	1c59      	adds	r1, r3, #1
 800cf1c:	911d      	str	r1, [sp, #116]	; 0x74
 800cf1e:	785b      	ldrb	r3, [r3, #1]
 800cf20:	4610      	mov	r0, r2
 800cf22:	e7c9      	b.n	800ceb8 <_strtod_l+0x1e8>
 800cf24:	4638      	mov	r0, r7
 800cf26:	e7d2      	b.n	800cece <_strtod_l+0x1fe>
 800cf28:	2a08      	cmp	r2, #8
 800cf2a:	dc04      	bgt.n	800cf36 <_strtod_l+0x266>
 800cf2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cf2e:	434e      	muls	r6, r1
 800cf30:	9609      	str	r6, [sp, #36]	; 0x24
 800cf32:	3201      	adds	r2, #1
 800cf34:	e7e2      	b.n	800cefc <_strtod_l+0x22c>
 800cf36:	f102 0c01 	add.w	ip, r2, #1
 800cf3a:	f1bc 0f10 	cmp.w	ip, #16
 800cf3e:	bfd8      	it	le
 800cf40:	fb01 f909 	mulle.w	r9, r1, r9
 800cf44:	e7f5      	b.n	800cf32 <_strtod_l+0x262>
 800cf46:	2d10      	cmp	r5, #16
 800cf48:	bfdc      	itt	le
 800cf4a:	220a      	movle	r2, #10
 800cf4c:	fb02 3909 	mlale	r9, r2, r9, r3
 800cf50:	e7e1      	b.n	800cf16 <_strtod_l+0x246>
 800cf52:	2300      	movs	r3, #0
 800cf54:	9307      	str	r3, [sp, #28]
 800cf56:	2201      	movs	r2, #1
 800cf58:	e77c      	b.n	800ce54 <_strtod_l+0x184>
 800cf5a:	f04f 0c00 	mov.w	ip, #0
 800cf5e:	f108 0302 	add.w	r3, r8, #2
 800cf62:	931d      	str	r3, [sp, #116]	; 0x74
 800cf64:	f898 3002 	ldrb.w	r3, [r8, #2]
 800cf68:	e785      	b.n	800ce76 <_strtod_l+0x1a6>
 800cf6a:	f04f 0c01 	mov.w	ip, #1
 800cf6e:	e7f6      	b.n	800cf5e <_strtod_l+0x28e>
 800cf70:	0802423c 	.word	0x0802423c
 800cf74:	08023f4c 	.word	0x08023f4c
 800cf78:	7ff00000 	.word	0x7ff00000
 800cf7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf7e:	1c59      	adds	r1, r3, #1
 800cf80:	911d      	str	r1, [sp, #116]	; 0x74
 800cf82:	785b      	ldrb	r3, [r3, #1]
 800cf84:	2b30      	cmp	r3, #48	; 0x30
 800cf86:	d0f9      	beq.n	800cf7c <_strtod_l+0x2ac>
 800cf88:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800cf8c:	2908      	cmp	r1, #8
 800cf8e:	f63f af79 	bhi.w	800ce84 <_strtod_l+0x1b4>
 800cf92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800cf96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf98:	9308      	str	r3, [sp, #32]
 800cf9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf9c:	1c59      	adds	r1, r3, #1
 800cf9e:	911d      	str	r1, [sp, #116]	; 0x74
 800cfa0:	785b      	ldrb	r3, [r3, #1]
 800cfa2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800cfa6:	2e09      	cmp	r6, #9
 800cfa8:	d937      	bls.n	800d01a <_strtod_l+0x34a>
 800cfaa:	9e08      	ldr	r6, [sp, #32]
 800cfac:	1b89      	subs	r1, r1, r6
 800cfae:	2908      	cmp	r1, #8
 800cfb0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cfb4:	dc02      	bgt.n	800cfbc <_strtod_l+0x2ec>
 800cfb6:	4576      	cmp	r6, lr
 800cfb8:	bfa8      	it	ge
 800cfba:	4676      	movge	r6, lr
 800cfbc:	f1bc 0f00 	cmp.w	ip, #0
 800cfc0:	d000      	beq.n	800cfc4 <_strtod_l+0x2f4>
 800cfc2:	4276      	negs	r6, r6
 800cfc4:	2d00      	cmp	r5, #0
 800cfc6:	d14f      	bne.n	800d068 <_strtod_l+0x398>
 800cfc8:	9904      	ldr	r1, [sp, #16]
 800cfca:	4301      	orrs	r1, r0
 800cfcc:	f47f aec2 	bne.w	800cd54 <_strtod_l+0x84>
 800cfd0:	2a00      	cmp	r2, #0
 800cfd2:	f47f aedb 	bne.w	800cd8c <_strtod_l+0xbc>
 800cfd6:	2b69      	cmp	r3, #105	; 0x69
 800cfd8:	d027      	beq.n	800d02a <_strtod_l+0x35a>
 800cfda:	dc24      	bgt.n	800d026 <_strtod_l+0x356>
 800cfdc:	2b49      	cmp	r3, #73	; 0x49
 800cfde:	d024      	beq.n	800d02a <_strtod_l+0x35a>
 800cfe0:	2b4e      	cmp	r3, #78	; 0x4e
 800cfe2:	f47f aed3 	bne.w	800cd8c <_strtod_l+0xbc>
 800cfe6:	499e      	ldr	r1, [pc, #632]	; (800d260 <_strtod_l+0x590>)
 800cfe8:	a81d      	add	r0, sp, #116	; 0x74
 800cfea:	f001 fee3 	bl	800edb4 <__match>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	f43f aecc 	beq.w	800cd8c <_strtod_l+0xbc>
 800cff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	2b28      	cmp	r3, #40	; 0x28
 800cffa:	d12d      	bne.n	800d058 <_strtod_l+0x388>
 800cffc:	4999      	ldr	r1, [pc, #612]	; (800d264 <_strtod_l+0x594>)
 800cffe:	aa20      	add	r2, sp, #128	; 0x80
 800d000:	a81d      	add	r0, sp, #116	; 0x74
 800d002:	f001 feeb 	bl	800eddc <__hexnan>
 800d006:	2805      	cmp	r0, #5
 800d008:	d126      	bne.n	800d058 <_strtod_l+0x388>
 800d00a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d00c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d010:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d014:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d018:	e69c      	b.n	800cd54 <_strtod_l+0x84>
 800d01a:	210a      	movs	r1, #10
 800d01c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d020:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d024:	e7b9      	b.n	800cf9a <_strtod_l+0x2ca>
 800d026:	2b6e      	cmp	r3, #110	; 0x6e
 800d028:	e7db      	b.n	800cfe2 <_strtod_l+0x312>
 800d02a:	498f      	ldr	r1, [pc, #572]	; (800d268 <_strtod_l+0x598>)
 800d02c:	a81d      	add	r0, sp, #116	; 0x74
 800d02e:	f001 fec1 	bl	800edb4 <__match>
 800d032:	2800      	cmp	r0, #0
 800d034:	f43f aeaa 	beq.w	800cd8c <_strtod_l+0xbc>
 800d038:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d03a:	498c      	ldr	r1, [pc, #560]	; (800d26c <_strtod_l+0x59c>)
 800d03c:	3b01      	subs	r3, #1
 800d03e:	a81d      	add	r0, sp, #116	; 0x74
 800d040:	931d      	str	r3, [sp, #116]	; 0x74
 800d042:	f001 feb7 	bl	800edb4 <__match>
 800d046:	b910      	cbnz	r0, 800d04e <_strtod_l+0x37e>
 800d048:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d04a:	3301      	adds	r3, #1
 800d04c:	931d      	str	r3, [sp, #116]	; 0x74
 800d04e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800d27c <_strtod_l+0x5ac>
 800d052:	f04f 0a00 	mov.w	sl, #0
 800d056:	e67d      	b.n	800cd54 <_strtod_l+0x84>
 800d058:	4885      	ldr	r0, [pc, #532]	; (800d270 <_strtod_l+0x5a0>)
 800d05a:	f002 ffb1 	bl	800ffc0 <nan>
 800d05e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d062:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d066:	e675      	b.n	800cd54 <_strtod_l+0x84>
 800d068:	9b07      	ldr	r3, [sp, #28]
 800d06a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d06c:	1af3      	subs	r3, r6, r3
 800d06e:	2f00      	cmp	r7, #0
 800d070:	bf08      	it	eq
 800d072:	462f      	moveq	r7, r5
 800d074:	2d10      	cmp	r5, #16
 800d076:	9308      	str	r3, [sp, #32]
 800d078:	46a8      	mov	r8, r5
 800d07a:	bfa8      	it	ge
 800d07c:	f04f 0810 	movge.w	r8, #16
 800d080:	f7f3 fa58 	bl	8000534 <__aeabi_ui2d>
 800d084:	2d09      	cmp	r5, #9
 800d086:	4682      	mov	sl, r0
 800d088:	468b      	mov	fp, r1
 800d08a:	dd13      	ble.n	800d0b4 <_strtod_l+0x3e4>
 800d08c:	4b79      	ldr	r3, [pc, #484]	; (800d274 <_strtod_l+0x5a4>)
 800d08e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d092:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d096:	f7f3 fac7 	bl	8000628 <__aeabi_dmul>
 800d09a:	4682      	mov	sl, r0
 800d09c:	4648      	mov	r0, r9
 800d09e:	468b      	mov	fp, r1
 800d0a0:	f7f3 fa48 	bl	8000534 <__aeabi_ui2d>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	4650      	mov	r0, sl
 800d0aa:	4659      	mov	r1, fp
 800d0ac:	f7f3 f906 	bl	80002bc <__adddf3>
 800d0b0:	4682      	mov	sl, r0
 800d0b2:	468b      	mov	fp, r1
 800d0b4:	2d0f      	cmp	r5, #15
 800d0b6:	dc38      	bgt.n	800d12a <_strtod_l+0x45a>
 800d0b8:	9b08      	ldr	r3, [sp, #32]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f43f ae4a 	beq.w	800cd54 <_strtod_l+0x84>
 800d0c0:	dd24      	ble.n	800d10c <_strtod_l+0x43c>
 800d0c2:	2b16      	cmp	r3, #22
 800d0c4:	dc0b      	bgt.n	800d0de <_strtod_l+0x40e>
 800d0c6:	4d6b      	ldr	r5, [pc, #428]	; (800d274 <_strtod_l+0x5a4>)
 800d0c8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d0cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d0d0:	4652      	mov	r2, sl
 800d0d2:	465b      	mov	r3, fp
 800d0d4:	f7f3 faa8 	bl	8000628 <__aeabi_dmul>
 800d0d8:	4682      	mov	sl, r0
 800d0da:	468b      	mov	fp, r1
 800d0dc:	e63a      	b.n	800cd54 <_strtod_l+0x84>
 800d0de:	9a08      	ldr	r2, [sp, #32]
 800d0e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	db20      	blt.n	800d12a <_strtod_l+0x45a>
 800d0e8:	4c62      	ldr	r4, [pc, #392]	; (800d274 <_strtod_l+0x5a4>)
 800d0ea:	f1c5 050f 	rsb	r5, r5, #15
 800d0ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d0f2:	4652      	mov	r2, sl
 800d0f4:	465b      	mov	r3, fp
 800d0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0fa:	f7f3 fa95 	bl	8000628 <__aeabi_dmul>
 800d0fe:	9b08      	ldr	r3, [sp, #32]
 800d100:	1b5d      	subs	r5, r3, r5
 800d102:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d106:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d10a:	e7e3      	b.n	800d0d4 <_strtod_l+0x404>
 800d10c:	9b08      	ldr	r3, [sp, #32]
 800d10e:	3316      	adds	r3, #22
 800d110:	db0b      	blt.n	800d12a <_strtod_l+0x45a>
 800d112:	9b07      	ldr	r3, [sp, #28]
 800d114:	4a57      	ldr	r2, [pc, #348]	; (800d274 <_strtod_l+0x5a4>)
 800d116:	1b9e      	subs	r6, r3, r6
 800d118:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d11c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d120:	4650      	mov	r0, sl
 800d122:	4659      	mov	r1, fp
 800d124:	f7f3 fbaa 	bl	800087c <__aeabi_ddiv>
 800d128:	e7d6      	b.n	800d0d8 <_strtod_l+0x408>
 800d12a:	9b08      	ldr	r3, [sp, #32]
 800d12c:	eba5 0808 	sub.w	r8, r5, r8
 800d130:	4498      	add	r8, r3
 800d132:	f1b8 0f00 	cmp.w	r8, #0
 800d136:	dd71      	ble.n	800d21c <_strtod_l+0x54c>
 800d138:	f018 030f 	ands.w	r3, r8, #15
 800d13c:	d00a      	beq.n	800d154 <_strtod_l+0x484>
 800d13e:	494d      	ldr	r1, [pc, #308]	; (800d274 <_strtod_l+0x5a4>)
 800d140:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d144:	4652      	mov	r2, sl
 800d146:	465b      	mov	r3, fp
 800d148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d14c:	f7f3 fa6c 	bl	8000628 <__aeabi_dmul>
 800d150:	4682      	mov	sl, r0
 800d152:	468b      	mov	fp, r1
 800d154:	f038 080f 	bics.w	r8, r8, #15
 800d158:	d04d      	beq.n	800d1f6 <_strtod_l+0x526>
 800d15a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d15e:	dd22      	ble.n	800d1a6 <_strtod_l+0x4d6>
 800d160:	2500      	movs	r5, #0
 800d162:	462e      	mov	r6, r5
 800d164:	9509      	str	r5, [sp, #36]	; 0x24
 800d166:	9507      	str	r5, [sp, #28]
 800d168:	2322      	movs	r3, #34	; 0x22
 800d16a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800d27c <_strtod_l+0x5ac>
 800d16e:	6023      	str	r3, [r4, #0]
 800d170:	f04f 0a00 	mov.w	sl, #0
 800d174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d176:	2b00      	cmp	r3, #0
 800d178:	f43f adec 	beq.w	800cd54 <_strtod_l+0x84>
 800d17c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d17e:	4620      	mov	r0, r4
 800d180:	f001 ff34 	bl	800efec <_Bfree>
 800d184:	9907      	ldr	r1, [sp, #28]
 800d186:	4620      	mov	r0, r4
 800d188:	f001 ff30 	bl	800efec <_Bfree>
 800d18c:	4631      	mov	r1, r6
 800d18e:	4620      	mov	r0, r4
 800d190:	f001 ff2c 	bl	800efec <_Bfree>
 800d194:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d196:	4620      	mov	r0, r4
 800d198:	f001 ff28 	bl	800efec <_Bfree>
 800d19c:	4629      	mov	r1, r5
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f001 ff24 	bl	800efec <_Bfree>
 800d1a4:	e5d6      	b.n	800cd54 <_strtod_l+0x84>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d1ac:	4650      	mov	r0, sl
 800d1ae:	4659      	mov	r1, fp
 800d1b0:	4699      	mov	r9, r3
 800d1b2:	f1b8 0f01 	cmp.w	r8, #1
 800d1b6:	dc21      	bgt.n	800d1fc <_strtod_l+0x52c>
 800d1b8:	b10b      	cbz	r3, 800d1be <_strtod_l+0x4ee>
 800d1ba:	4682      	mov	sl, r0
 800d1bc:	468b      	mov	fp, r1
 800d1be:	4b2e      	ldr	r3, [pc, #184]	; (800d278 <_strtod_l+0x5a8>)
 800d1c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d1c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d1c8:	4652      	mov	r2, sl
 800d1ca:	465b      	mov	r3, fp
 800d1cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d1d0:	f7f3 fa2a 	bl	8000628 <__aeabi_dmul>
 800d1d4:	4b29      	ldr	r3, [pc, #164]	; (800d27c <_strtod_l+0x5ac>)
 800d1d6:	460a      	mov	r2, r1
 800d1d8:	400b      	ands	r3, r1
 800d1da:	4929      	ldr	r1, [pc, #164]	; (800d280 <_strtod_l+0x5b0>)
 800d1dc:	428b      	cmp	r3, r1
 800d1de:	4682      	mov	sl, r0
 800d1e0:	d8be      	bhi.n	800d160 <_strtod_l+0x490>
 800d1e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d1e6:	428b      	cmp	r3, r1
 800d1e8:	bf86      	itte	hi
 800d1ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d284 <_strtod_l+0x5b4>
 800d1ee:	f04f 3aff 	movhi.w	sl, #4294967295
 800d1f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	9304      	str	r3, [sp, #16]
 800d1fa:	e081      	b.n	800d300 <_strtod_l+0x630>
 800d1fc:	f018 0f01 	tst.w	r8, #1
 800d200:	d007      	beq.n	800d212 <_strtod_l+0x542>
 800d202:	4b1d      	ldr	r3, [pc, #116]	; (800d278 <_strtod_l+0x5a8>)
 800d204:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20c:	f7f3 fa0c 	bl	8000628 <__aeabi_dmul>
 800d210:	2301      	movs	r3, #1
 800d212:	f109 0901 	add.w	r9, r9, #1
 800d216:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d21a:	e7ca      	b.n	800d1b2 <_strtod_l+0x4e2>
 800d21c:	d0eb      	beq.n	800d1f6 <_strtod_l+0x526>
 800d21e:	f1c8 0800 	rsb	r8, r8, #0
 800d222:	f018 020f 	ands.w	r2, r8, #15
 800d226:	d00a      	beq.n	800d23e <_strtod_l+0x56e>
 800d228:	4b12      	ldr	r3, [pc, #72]	; (800d274 <_strtod_l+0x5a4>)
 800d22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d22e:	4650      	mov	r0, sl
 800d230:	4659      	mov	r1, fp
 800d232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d236:	f7f3 fb21 	bl	800087c <__aeabi_ddiv>
 800d23a:	4682      	mov	sl, r0
 800d23c:	468b      	mov	fp, r1
 800d23e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d242:	d0d8      	beq.n	800d1f6 <_strtod_l+0x526>
 800d244:	f1b8 0f1f 	cmp.w	r8, #31
 800d248:	dd1e      	ble.n	800d288 <_strtod_l+0x5b8>
 800d24a:	2500      	movs	r5, #0
 800d24c:	462e      	mov	r6, r5
 800d24e:	9509      	str	r5, [sp, #36]	; 0x24
 800d250:	9507      	str	r5, [sp, #28]
 800d252:	2322      	movs	r3, #34	; 0x22
 800d254:	f04f 0a00 	mov.w	sl, #0
 800d258:	f04f 0b00 	mov.w	fp, #0
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	e789      	b.n	800d174 <_strtod_l+0x4a4>
 800d260:	08023f1d 	.word	0x08023f1d
 800d264:	08023f60 	.word	0x08023f60
 800d268:	08023f15 	.word	0x08023f15
 800d26c:	08024158 	.word	0x08024158
 800d270:	08024053 	.word	0x08024053
 800d274:	080242d8 	.word	0x080242d8
 800d278:	080242b0 	.word	0x080242b0
 800d27c:	7ff00000 	.word	0x7ff00000
 800d280:	7ca00000 	.word	0x7ca00000
 800d284:	7fefffff 	.word	0x7fefffff
 800d288:	f018 0310 	ands.w	r3, r8, #16
 800d28c:	bf18      	it	ne
 800d28e:	236a      	movne	r3, #106	; 0x6a
 800d290:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d648 <_strtod_l+0x978>
 800d294:	9304      	str	r3, [sp, #16]
 800d296:	4650      	mov	r0, sl
 800d298:	4659      	mov	r1, fp
 800d29a:	2300      	movs	r3, #0
 800d29c:	f018 0f01 	tst.w	r8, #1
 800d2a0:	d004      	beq.n	800d2ac <_strtod_l+0x5dc>
 800d2a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d2a6:	f7f3 f9bf 	bl	8000628 <__aeabi_dmul>
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d2b0:	f109 0908 	add.w	r9, r9, #8
 800d2b4:	d1f2      	bne.n	800d29c <_strtod_l+0x5cc>
 800d2b6:	b10b      	cbz	r3, 800d2bc <_strtod_l+0x5ec>
 800d2b8:	4682      	mov	sl, r0
 800d2ba:	468b      	mov	fp, r1
 800d2bc:	9b04      	ldr	r3, [sp, #16]
 800d2be:	b1bb      	cbz	r3, 800d2f0 <_strtod_l+0x620>
 800d2c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d2c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	4659      	mov	r1, fp
 800d2cc:	dd10      	ble.n	800d2f0 <_strtod_l+0x620>
 800d2ce:	2b1f      	cmp	r3, #31
 800d2d0:	f340 8128 	ble.w	800d524 <_strtod_l+0x854>
 800d2d4:	2b34      	cmp	r3, #52	; 0x34
 800d2d6:	bfde      	ittt	le
 800d2d8:	3b20      	suble	r3, #32
 800d2da:	f04f 32ff 	movle.w	r2, #4294967295
 800d2de:	fa02 f303 	lslle.w	r3, r2, r3
 800d2e2:	f04f 0a00 	mov.w	sl, #0
 800d2e6:	bfcc      	ite	gt
 800d2e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d2ec:	ea03 0b01 	andle.w	fp, r3, r1
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	4650      	mov	r0, sl
 800d2f6:	4659      	mov	r1, fp
 800d2f8:	f7f3 fbfe 	bl	8000af8 <__aeabi_dcmpeq>
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d1a4      	bne.n	800d24a <_strtod_l+0x57a>
 800d300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d306:	462b      	mov	r3, r5
 800d308:	463a      	mov	r2, r7
 800d30a:	4620      	mov	r0, r4
 800d30c:	f001 feda 	bl	800f0c4 <__s2b>
 800d310:	9009      	str	r0, [sp, #36]	; 0x24
 800d312:	2800      	cmp	r0, #0
 800d314:	f43f af24 	beq.w	800d160 <_strtod_l+0x490>
 800d318:	9b07      	ldr	r3, [sp, #28]
 800d31a:	1b9e      	subs	r6, r3, r6
 800d31c:	9b08      	ldr	r3, [sp, #32]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	bfb4      	ite	lt
 800d322:	4633      	movlt	r3, r6
 800d324:	2300      	movge	r3, #0
 800d326:	9310      	str	r3, [sp, #64]	; 0x40
 800d328:	9b08      	ldr	r3, [sp, #32]
 800d32a:	2500      	movs	r5, #0
 800d32c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d330:	9318      	str	r3, [sp, #96]	; 0x60
 800d332:	462e      	mov	r6, r5
 800d334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d336:	4620      	mov	r0, r4
 800d338:	6859      	ldr	r1, [r3, #4]
 800d33a:	f001 fe17 	bl	800ef6c <_Balloc>
 800d33e:	9007      	str	r0, [sp, #28]
 800d340:	2800      	cmp	r0, #0
 800d342:	f43f af11 	beq.w	800d168 <_strtod_l+0x498>
 800d346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d348:	691a      	ldr	r2, [r3, #16]
 800d34a:	3202      	adds	r2, #2
 800d34c:	f103 010c 	add.w	r1, r3, #12
 800d350:	0092      	lsls	r2, r2, #2
 800d352:	300c      	adds	r0, #12
 800d354:	f001 fdfc 	bl	800ef50 <memcpy>
 800d358:	ec4b ab10 	vmov	d0, sl, fp
 800d35c:	aa20      	add	r2, sp, #128	; 0x80
 800d35e:	a91f      	add	r1, sp, #124	; 0x7c
 800d360:	4620      	mov	r0, r4
 800d362:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d366:	f002 f9e9 	bl	800f73c <__d2b>
 800d36a:	901e      	str	r0, [sp, #120]	; 0x78
 800d36c:	2800      	cmp	r0, #0
 800d36e:	f43f aefb 	beq.w	800d168 <_strtod_l+0x498>
 800d372:	2101      	movs	r1, #1
 800d374:	4620      	mov	r0, r4
 800d376:	f001 ff3f 	bl	800f1f8 <__i2b>
 800d37a:	4606      	mov	r6, r0
 800d37c:	2800      	cmp	r0, #0
 800d37e:	f43f aef3 	beq.w	800d168 <_strtod_l+0x498>
 800d382:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d384:	9904      	ldr	r1, [sp, #16]
 800d386:	2b00      	cmp	r3, #0
 800d388:	bfab      	itete	ge
 800d38a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800d38c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800d38e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800d390:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800d394:	bfac      	ite	ge
 800d396:	eb03 0902 	addge.w	r9, r3, r2
 800d39a:	1ad7      	sublt	r7, r2, r3
 800d39c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d39e:	eba3 0801 	sub.w	r8, r3, r1
 800d3a2:	4490      	add	r8, r2
 800d3a4:	4ba3      	ldr	r3, [pc, #652]	; (800d634 <_strtod_l+0x964>)
 800d3a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800d3aa:	4598      	cmp	r8, r3
 800d3ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d3b0:	f280 80cc 	bge.w	800d54c <_strtod_l+0x87c>
 800d3b4:	eba3 0308 	sub.w	r3, r3, r8
 800d3b8:	2b1f      	cmp	r3, #31
 800d3ba:	eba2 0203 	sub.w	r2, r2, r3
 800d3be:	f04f 0101 	mov.w	r1, #1
 800d3c2:	f300 80b6 	bgt.w	800d532 <_strtod_l+0x862>
 800d3c6:	fa01 f303 	lsl.w	r3, r1, r3
 800d3ca:	9311      	str	r3, [sp, #68]	; 0x44
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	930c      	str	r3, [sp, #48]	; 0x30
 800d3d0:	eb09 0802 	add.w	r8, r9, r2
 800d3d4:	9b04      	ldr	r3, [sp, #16]
 800d3d6:	45c1      	cmp	r9, r8
 800d3d8:	4417      	add	r7, r2
 800d3da:	441f      	add	r7, r3
 800d3dc:	464b      	mov	r3, r9
 800d3de:	bfa8      	it	ge
 800d3e0:	4643      	movge	r3, r8
 800d3e2:	42bb      	cmp	r3, r7
 800d3e4:	bfa8      	it	ge
 800d3e6:	463b      	movge	r3, r7
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	bfc2      	ittt	gt
 800d3ec:	eba8 0803 	subgt.w	r8, r8, r3
 800d3f0:	1aff      	subgt	r7, r7, r3
 800d3f2:	eba9 0903 	subgt.w	r9, r9, r3
 800d3f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	dd17      	ble.n	800d42c <_strtod_l+0x75c>
 800d3fc:	4631      	mov	r1, r6
 800d3fe:	461a      	mov	r2, r3
 800d400:	4620      	mov	r0, r4
 800d402:	f001 ffb5 	bl	800f370 <__pow5mult>
 800d406:	4606      	mov	r6, r0
 800d408:	2800      	cmp	r0, #0
 800d40a:	f43f aead 	beq.w	800d168 <_strtod_l+0x498>
 800d40e:	4601      	mov	r1, r0
 800d410:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d412:	4620      	mov	r0, r4
 800d414:	f001 ff06 	bl	800f224 <__multiply>
 800d418:	900f      	str	r0, [sp, #60]	; 0x3c
 800d41a:	2800      	cmp	r0, #0
 800d41c:	f43f aea4 	beq.w	800d168 <_strtod_l+0x498>
 800d420:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d422:	4620      	mov	r0, r4
 800d424:	f001 fde2 	bl	800efec <_Bfree>
 800d428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d42a:	931e      	str	r3, [sp, #120]	; 0x78
 800d42c:	f1b8 0f00 	cmp.w	r8, #0
 800d430:	f300 8091 	bgt.w	800d556 <_strtod_l+0x886>
 800d434:	9b08      	ldr	r3, [sp, #32]
 800d436:	2b00      	cmp	r3, #0
 800d438:	dd08      	ble.n	800d44c <_strtod_l+0x77c>
 800d43a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d43c:	9907      	ldr	r1, [sp, #28]
 800d43e:	4620      	mov	r0, r4
 800d440:	f001 ff96 	bl	800f370 <__pow5mult>
 800d444:	9007      	str	r0, [sp, #28]
 800d446:	2800      	cmp	r0, #0
 800d448:	f43f ae8e 	beq.w	800d168 <_strtod_l+0x498>
 800d44c:	2f00      	cmp	r7, #0
 800d44e:	dd08      	ble.n	800d462 <_strtod_l+0x792>
 800d450:	9907      	ldr	r1, [sp, #28]
 800d452:	463a      	mov	r2, r7
 800d454:	4620      	mov	r0, r4
 800d456:	f001 ffe5 	bl	800f424 <__lshift>
 800d45a:	9007      	str	r0, [sp, #28]
 800d45c:	2800      	cmp	r0, #0
 800d45e:	f43f ae83 	beq.w	800d168 <_strtod_l+0x498>
 800d462:	f1b9 0f00 	cmp.w	r9, #0
 800d466:	dd08      	ble.n	800d47a <_strtod_l+0x7aa>
 800d468:	4631      	mov	r1, r6
 800d46a:	464a      	mov	r2, r9
 800d46c:	4620      	mov	r0, r4
 800d46e:	f001 ffd9 	bl	800f424 <__lshift>
 800d472:	4606      	mov	r6, r0
 800d474:	2800      	cmp	r0, #0
 800d476:	f43f ae77 	beq.w	800d168 <_strtod_l+0x498>
 800d47a:	9a07      	ldr	r2, [sp, #28]
 800d47c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d47e:	4620      	mov	r0, r4
 800d480:	f002 f858 	bl	800f534 <__mdiff>
 800d484:	4605      	mov	r5, r0
 800d486:	2800      	cmp	r0, #0
 800d488:	f43f ae6e 	beq.w	800d168 <_strtod_l+0x498>
 800d48c:	68c3      	ldr	r3, [r0, #12]
 800d48e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d490:	2300      	movs	r3, #0
 800d492:	60c3      	str	r3, [r0, #12]
 800d494:	4631      	mov	r1, r6
 800d496:	f002 f831 	bl	800f4fc <__mcmp>
 800d49a:	2800      	cmp	r0, #0
 800d49c:	da65      	bge.n	800d56a <_strtod_l+0x89a>
 800d49e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4a0:	ea53 030a 	orrs.w	r3, r3, sl
 800d4a4:	f040 8087 	bne.w	800d5b6 <_strtod_l+0x8e6>
 800d4a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f040 8082 	bne.w	800d5b6 <_strtod_l+0x8e6>
 800d4b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4b6:	0d1b      	lsrs	r3, r3, #20
 800d4b8:	051b      	lsls	r3, r3, #20
 800d4ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d4be:	d97a      	bls.n	800d5b6 <_strtod_l+0x8e6>
 800d4c0:	696b      	ldr	r3, [r5, #20]
 800d4c2:	b913      	cbnz	r3, 800d4ca <_strtod_l+0x7fa>
 800d4c4:	692b      	ldr	r3, [r5, #16]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	dd75      	ble.n	800d5b6 <_strtod_l+0x8e6>
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	f001 ffa8 	bl	800f424 <__lshift>
 800d4d4:	4631      	mov	r1, r6
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	f002 f810 	bl	800f4fc <__mcmp>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	dd6a      	ble.n	800d5b6 <_strtod_l+0x8e6>
 800d4e0:	9904      	ldr	r1, [sp, #16]
 800d4e2:	4a55      	ldr	r2, [pc, #340]	; (800d638 <_strtod_l+0x968>)
 800d4e4:	465b      	mov	r3, fp
 800d4e6:	2900      	cmp	r1, #0
 800d4e8:	f000 8085 	beq.w	800d5f6 <_strtod_l+0x926>
 800d4ec:	ea02 010b 	and.w	r1, r2, fp
 800d4f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d4f4:	dc7f      	bgt.n	800d5f6 <_strtod_l+0x926>
 800d4f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d4fa:	f77f aeaa 	ble.w	800d252 <_strtod_l+0x582>
 800d4fe:	4a4f      	ldr	r2, [pc, #316]	; (800d63c <_strtod_l+0x96c>)
 800d500:	2300      	movs	r3, #0
 800d502:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800d506:	4650      	mov	r0, sl
 800d508:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800d50c:	4659      	mov	r1, fp
 800d50e:	f7f3 f88b 	bl	8000628 <__aeabi_dmul>
 800d512:	460b      	mov	r3, r1
 800d514:	4303      	orrs	r3, r0
 800d516:	bf08      	it	eq
 800d518:	2322      	moveq	r3, #34	; 0x22
 800d51a:	4682      	mov	sl, r0
 800d51c:	468b      	mov	fp, r1
 800d51e:	bf08      	it	eq
 800d520:	6023      	streq	r3, [r4, #0]
 800d522:	e62b      	b.n	800d17c <_strtod_l+0x4ac>
 800d524:	f04f 32ff 	mov.w	r2, #4294967295
 800d528:	fa02 f303 	lsl.w	r3, r2, r3
 800d52c:	ea03 0a0a 	and.w	sl, r3, sl
 800d530:	e6de      	b.n	800d2f0 <_strtod_l+0x620>
 800d532:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d536:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d53a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d53e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d542:	fa01 f308 	lsl.w	r3, r1, r8
 800d546:	930c      	str	r3, [sp, #48]	; 0x30
 800d548:	9111      	str	r1, [sp, #68]	; 0x44
 800d54a:	e741      	b.n	800d3d0 <_strtod_l+0x700>
 800d54c:	2300      	movs	r3, #0
 800d54e:	930c      	str	r3, [sp, #48]	; 0x30
 800d550:	2301      	movs	r3, #1
 800d552:	9311      	str	r3, [sp, #68]	; 0x44
 800d554:	e73c      	b.n	800d3d0 <_strtod_l+0x700>
 800d556:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d558:	4642      	mov	r2, r8
 800d55a:	4620      	mov	r0, r4
 800d55c:	f001 ff62 	bl	800f424 <__lshift>
 800d560:	901e      	str	r0, [sp, #120]	; 0x78
 800d562:	2800      	cmp	r0, #0
 800d564:	f47f af66 	bne.w	800d434 <_strtod_l+0x764>
 800d568:	e5fe      	b.n	800d168 <_strtod_l+0x498>
 800d56a:	465f      	mov	r7, fp
 800d56c:	d16e      	bne.n	800d64c <_strtod_l+0x97c>
 800d56e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d570:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d574:	b342      	cbz	r2, 800d5c8 <_strtod_l+0x8f8>
 800d576:	4a32      	ldr	r2, [pc, #200]	; (800d640 <_strtod_l+0x970>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d128      	bne.n	800d5ce <_strtod_l+0x8fe>
 800d57c:	9b04      	ldr	r3, [sp, #16]
 800d57e:	4650      	mov	r0, sl
 800d580:	b1eb      	cbz	r3, 800d5be <_strtod_l+0x8ee>
 800d582:	4a2d      	ldr	r2, [pc, #180]	; (800d638 <_strtod_l+0x968>)
 800d584:	403a      	ands	r2, r7
 800d586:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d58a:	f04f 31ff 	mov.w	r1, #4294967295
 800d58e:	d819      	bhi.n	800d5c4 <_strtod_l+0x8f4>
 800d590:	0d12      	lsrs	r2, r2, #20
 800d592:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d596:	fa01 f303 	lsl.w	r3, r1, r3
 800d59a:	4298      	cmp	r0, r3
 800d59c:	d117      	bne.n	800d5ce <_strtod_l+0x8fe>
 800d59e:	4b29      	ldr	r3, [pc, #164]	; (800d644 <_strtod_l+0x974>)
 800d5a0:	429f      	cmp	r7, r3
 800d5a2:	d102      	bne.n	800d5aa <_strtod_l+0x8da>
 800d5a4:	3001      	adds	r0, #1
 800d5a6:	f43f addf 	beq.w	800d168 <_strtod_l+0x498>
 800d5aa:	4b23      	ldr	r3, [pc, #140]	; (800d638 <_strtod_l+0x968>)
 800d5ac:	403b      	ands	r3, r7
 800d5ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d5b2:	f04f 0a00 	mov.w	sl, #0
 800d5b6:	9b04      	ldr	r3, [sp, #16]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d1a0      	bne.n	800d4fe <_strtod_l+0x82e>
 800d5bc:	e5de      	b.n	800d17c <_strtod_l+0x4ac>
 800d5be:	f04f 33ff 	mov.w	r3, #4294967295
 800d5c2:	e7ea      	b.n	800d59a <_strtod_l+0x8ca>
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	e7e8      	b.n	800d59a <_strtod_l+0x8ca>
 800d5c8:	ea53 030a 	orrs.w	r3, r3, sl
 800d5cc:	d088      	beq.n	800d4e0 <_strtod_l+0x810>
 800d5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5d0:	b1db      	cbz	r3, 800d60a <_strtod_l+0x93a>
 800d5d2:	423b      	tst	r3, r7
 800d5d4:	d0ef      	beq.n	800d5b6 <_strtod_l+0x8e6>
 800d5d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5d8:	9a04      	ldr	r2, [sp, #16]
 800d5da:	4650      	mov	r0, sl
 800d5dc:	4659      	mov	r1, fp
 800d5de:	b1c3      	cbz	r3, 800d612 <_strtod_l+0x942>
 800d5e0:	f7ff fb58 	bl	800cc94 <sulp>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d5ec:	f7f2 fe66 	bl	80002bc <__adddf3>
 800d5f0:	4682      	mov	sl, r0
 800d5f2:	468b      	mov	fp, r1
 800d5f4:	e7df      	b.n	800d5b6 <_strtod_l+0x8e6>
 800d5f6:	4013      	ands	r3, r2
 800d5f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d5fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d600:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d604:	f04f 3aff 	mov.w	sl, #4294967295
 800d608:	e7d5      	b.n	800d5b6 <_strtod_l+0x8e6>
 800d60a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d60c:	ea13 0f0a 	tst.w	r3, sl
 800d610:	e7e0      	b.n	800d5d4 <_strtod_l+0x904>
 800d612:	f7ff fb3f 	bl	800cc94 <sulp>
 800d616:	4602      	mov	r2, r0
 800d618:	460b      	mov	r3, r1
 800d61a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d61e:	f7f2 fe4b 	bl	80002b8 <__aeabi_dsub>
 800d622:	2200      	movs	r2, #0
 800d624:	2300      	movs	r3, #0
 800d626:	4682      	mov	sl, r0
 800d628:	468b      	mov	fp, r1
 800d62a:	f7f3 fa65 	bl	8000af8 <__aeabi_dcmpeq>
 800d62e:	2800      	cmp	r0, #0
 800d630:	d0c1      	beq.n	800d5b6 <_strtod_l+0x8e6>
 800d632:	e60e      	b.n	800d252 <_strtod_l+0x582>
 800d634:	fffffc02 	.word	0xfffffc02
 800d638:	7ff00000 	.word	0x7ff00000
 800d63c:	39500000 	.word	0x39500000
 800d640:	000fffff 	.word	0x000fffff
 800d644:	7fefffff 	.word	0x7fefffff
 800d648:	08023f78 	.word	0x08023f78
 800d64c:	4631      	mov	r1, r6
 800d64e:	4628      	mov	r0, r5
 800d650:	f002 f8d0 	bl	800f7f4 <__ratio>
 800d654:	ec59 8b10 	vmov	r8, r9, d0
 800d658:	ee10 0a10 	vmov	r0, s0
 800d65c:	2200      	movs	r2, #0
 800d65e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d662:	4649      	mov	r1, r9
 800d664:	f7f3 fa5c 	bl	8000b20 <__aeabi_dcmple>
 800d668:	2800      	cmp	r0, #0
 800d66a:	d07c      	beq.n	800d766 <_strtod_l+0xa96>
 800d66c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d04c      	beq.n	800d70c <_strtod_l+0xa3c>
 800d672:	4b95      	ldr	r3, [pc, #596]	; (800d8c8 <_strtod_l+0xbf8>)
 800d674:	2200      	movs	r2, #0
 800d676:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d67a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d8c8 <_strtod_l+0xbf8>
 800d67e:	f04f 0800 	mov.w	r8, #0
 800d682:	4b92      	ldr	r3, [pc, #584]	; (800d8cc <_strtod_l+0xbfc>)
 800d684:	403b      	ands	r3, r7
 800d686:	9311      	str	r3, [sp, #68]	; 0x44
 800d688:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d68a:	4b91      	ldr	r3, [pc, #580]	; (800d8d0 <_strtod_l+0xc00>)
 800d68c:	429a      	cmp	r2, r3
 800d68e:	f040 80b2 	bne.w	800d7f6 <_strtod_l+0xb26>
 800d692:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d69a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d69e:	ec4b ab10 	vmov	d0, sl, fp
 800d6a2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d6a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d6aa:	f001 ffcb 	bl	800f644 <__ulp>
 800d6ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d6b2:	ec53 2b10 	vmov	r2, r3, d0
 800d6b6:	f7f2 ffb7 	bl	8000628 <__aeabi_dmul>
 800d6ba:	4652      	mov	r2, sl
 800d6bc:	465b      	mov	r3, fp
 800d6be:	f7f2 fdfd 	bl	80002bc <__adddf3>
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	4981      	ldr	r1, [pc, #516]	; (800d8cc <_strtod_l+0xbfc>)
 800d6c6:	4a83      	ldr	r2, [pc, #524]	; (800d8d4 <_strtod_l+0xc04>)
 800d6c8:	4019      	ands	r1, r3
 800d6ca:	4291      	cmp	r1, r2
 800d6cc:	4682      	mov	sl, r0
 800d6ce:	d95e      	bls.n	800d78e <_strtod_l+0xabe>
 800d6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d103      	bne.n	800d6e2 <_strtod_l+0xa12>
 800d6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6dc:	3301      	adds	r3, #1
 800d6de:	f43f ad43 	beq.w	800d168 <_strtod_l+0x498>
 800d6e2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800d8e0 <_strtod_l+0xc10>
 800d6e6:	f04f 3aff 	mov.w	sl, #4294967295
 800d6ea:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f001 fc7d 	bl	800efec <_Bfree>
 800d6f2:	9907      	ldr	r1, [sp, #28]
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f001 fc79 	bl	800efec <_Bfree>
 800d6fa:	4631      	mov	r1, r6
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	f001 fc75 	bl	800efec <_Bfree>
 800d702:	4629      	mov	r1, r5
 800d704:	4620      	mov	r0, r4
 800d706:	f001 fc71 	bl	800efec <_Bfree>
 800d70a:	e613      	b.n	800d334 <_strtod_l+0x664>
 800d70c:	f1ba 0f00 	cmp.w	sl, #0
 800d710:	d11b      	bne.n	800d74a <_strtod_l+0xa7a>
 800d712:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d716:	b9f3      	cbnz	r3, 800d756 <_strtod_l+0xa86>
 800d718:	4b6b      	ldr	r3, [pc, #428]	; (800d8c8 <_strtod_l+0xbf8>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	4640      	mov	r0, r8
 800d71e:	4649      	mov	r1, r9
 800d720:	f7f3 f9f4 	bl	8000b0c <__aeabi_dcmplt>
 800d724:	b9d0      	cbnz	r0, 800d75c <_strtod_l+0xa8c>
 800d726:	4640      	mov	r0, r8
 800d728:	4649      	mov	r1, r9
 800d72a:	4b6b      	ldr	r3, [pc, #428]	; (800d8d8 <_strtod_l+0xc08>)
 800d72c:	2200      	movs	r2, #0
 800d72e:	f7f2 ff7b 	bl	8000628 <__aeabi_dmul>
 800d732:	4680      	mov	r8, r0
 800d734:	4689      	mov	r9, r1
 800d736:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d73a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d73e:	931b      	str	r3, [sp, #108]	; 0x6c
 800d740:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800d744:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d748:	e79b      	b.n	800d682 <_strtod_l+0x9b2>
 800d74a:	f1ba 0f01 	cmp.w	sl, #1
 800d74e:	d102      	bne.n	800d756 <_strtod_l+0xa86>
 800d750:	2f00      	cmp	r7, #0
 800d752:	f43f ad7e 	beq.w	800d252 <_strtod_l+0x582>
 800d756:	4b61      	ldr	r3, [pc, #388]	; (800d8dc <_strtod_l+0xc0c>)
 800d758:	2200      	movs	r2, #0
 800d75a:	e78c      	b.n	800d676 <_strtod_l+0x9a6>
 800d75c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d8d8 <_strtod_l+0xc08>
 800d760:	f04f 0800 	mov.w	r8, #0
 800d764:	e7e7      	b.n	800d736 <_strtod_l+0xa66>
 800d766:	4b5c      	ldr	r3, [pc, #368]	; (800d8d8 <_strtod_l+0xc08>)
 800d768:	4640      	mov	r0, r8
 800d76a:	4649      	mov	r1, r9
 800d76c:	2200      	movs	r2, #0
 800d76e:	f7f2 ff5b 	bl	8000628 <__aeabi_dmul>
 800d772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d774:	4680      	mov	r8, r0
 800d776:	4689      	mov	r9, r1
 800d778:	b933      	cbnz	r3, 800d788 <_strtod_l+0xab8>
 800d77a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d77e:	9012      	str	r0, [sp, #72]	; 0x48
 800d780:	9313      	str	r3, [sp, #76]	; 0x4c
 800d782:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d786:	e7dd      	b.n	800d744 <_strtod_l+0xa74>
 800d788:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800d78c:	e7f9      	b.n	800d782 <_strtod_l+0xab2>
 800d78e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d792:	9b04      	ldr	r3, [sp, #16]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1a8      	bne.n	800d6ea <_strtod_l+0xa1a>
 800d798:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d79c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d79e:	0d1b      	lsrs	r3, r3, #20
 800d7a0:	051b      	lsls	r3, r3, #20
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d1a1      	bne.n	800d6ea <_strtod_l+0xa1a>
 800d7a6:	4640      	mov	r0, r8
 800d7a8:	4649      	mov	r1, r9
 800d7aa:	f7f3 fa9d 	bl	8000ce8 <__aeabi_d2lz>
 800d7ae:	f7f2 ff0d 	bl	80005cc <__aeabi_l2d>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	4640      	mov	r0, r8
 800d7b8:	4649      	mov	r1, r9
 800d7ba:	f7f2 fd7d 	bl	80002b8 <__aeabi_dsub>
 800d7be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d7c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7c4:	ea43 030a 	orr.w	r3, r3, sl
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	4680      	mov	r8, r0
 800d7cc:	4689      	mov	r9, r1
 800d7ce:	d053      	beq.n	800d878 <_strtod_l+0xba8>
 800d7d0:	a335      	add	r3, pc, #212	; (adr r3, 800d8a8 <_strtod_l+0xbd8>)
 800d7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d6:	f7f3 f999 	bl	8000b0c <__aeabi_dcmplt>
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	f47f acce 	bne.w	800d17c <_strtod_l+0x4ac>
 800d7e0:	a333      	add	r3, pc, #204	; (adr r3, 800d8b0 <_strtod_l+0xbe0>)
 800d7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e6:	4640      	mov	r0, r8
 800d7e8:	4649      	mov	r1, r9
 800d7ea:	f7f3 f9ad 	bl	8000b48 <__aeabi_dcmpgt>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	f43f af7b 	beq.w	800d6ea <_strtod_l+0xa1a>
 800d7f4:	e4c2      	b.n	800d17c <_strtod_l+0x4ac>
 800d7f6:	9b04      	ldr	r3, [sp, #16]
 800d7f8:	b333      	cbz	r3, 800d848 <_strtod_l+0xb78>
 800d7fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d7fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d800:	d822      	bhi.n	800d848 <_strtod_l+0xb78>
 800d802:	a32d      	add	r3, pc, #180	; (adr r3, 800d8b8 <_strtod_l+0xbe8>)
 800d804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d808:	4640      	mov	r0, r8
 800d80a:	4649      	mov	r1, r9
 800d80c:	f7f3 f988 	bl	8000b20 <__aeabi_dcmple>
 800d810:	b1a0      	cbz	r0, 800d83c <_strtod_l+0xb6c>
 800d812:	4649      	mov	r1, r9
 800d814:	4640      	mov	r0, r8
 800d816:	f7f3 f9df 	bl	8000bd8 <__aeabi_d2uiz>
 800d81a:	2801      	cmp	r0, #1
 800d81c:	bf38      	it	cc
 800d81e:	2001      	movcc	r0, #1
 800d820:	f7f2 fe88 	bl	8000534 <__aeabi_ui2d>
 800d824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d826:	4680      	mov	r8, r0
 800d828:	4689      	mov	r9, r1
 800d82a:	bb13      	cbnz	r3, 800d872 <_strtod_l+0xba2>
 800d82c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d830:	9014      	str	r0, [sp, #80]	; 0x50
 800d832:	9315      	str	r3, [sp, #84]	; 0x54
 800d834:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d838:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d83e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d840:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d844:	1a9b      	subs	r3, r3, r2
 800d846:	930d      	str	r3, [sp, #52]	; 0x34
 800d848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d84c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d850:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d854:	f001 fef6 	bl	800f644 <__ulp>
 800d858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d85c:	ec53 2b10 	vmov	r2, r3, d0
 800d860:	f7f2 fee2 	bl	8000628 <__aeabi_dmul>
 800d864:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d868:	f7f2 fd28 	bl	80002bc <__adddf3>
 800d86c:	4682      	mov	sl, r0
 800d86e:	468b      	mov	fp, r1
 800d870:	e78f      	b.n	800d792 <_strtod_l+0xac2>
 800d872:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800d876:	e7dd      	b.n	800d834 <_strtod_l+0xb64>
 800d878:	a311      	add	r3, pc, #68	; (adr r3, 800d8c0 <_strtod_l+0xbf0>)
 800d87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87e:	f7f3 f945 	bl	8000b0c <__aeabi_dcmplt>
 800d882:	e7b4      	b.n	800d7ee <_strtod_l+0xb1e>
 800d884:	2300      	movs	r3, #0
 800d886:	930e      	str	r3, [sp, #56]	; 0x38
 800d888:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d88a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d88c:	6013      	str	r3, [r2, #0]
 800d88e:	f7ff ba65 	b.w	800cd5c <_strtod_l+0x8c>
 800d892:	2b65      	cmp	r3, #101	; 0x65
 800d894:	f43f ab5d 	beq.w	800cf52 <_strtod_l+0x282>
 800d898:	2b45      	cmp	r3, #69	; 0x45
 800d89a:	f43f ab5a 	beq.w	800cf52 <_strtod_l+0x282>
 800d89e:	2201      	movs	r2, #1
 800d8a0:	f7ff bb92 	b.w	800cfc8 <_strtod_l+0x2f8>
 800d8a4:	f3af 8000 	nop.w
 800d8a8:	94a03595 	.word	0x94a03595
 800d8ac:	3fdfffff 	.word	0x3fdfffff
 800d8b0:	35afe535 	.word	0x35afe535
 800d8b4:	3fe00000 	.word	0x3fe00000
 800d8b8:	ffc00000 	.word	0xffc00000
 800d8bc:	41dfffff 	.word	0x41dfffff
 800d8c0:	94a03595 	.word	0x94a03595
 800d8c4:	3fcfffff 	.word	0x3fcfffff
 800d8c8:	3ff00000 	.word	0x3ff00000
 800d8cc:	7ff00000 	.word	0x7ff00000
 800d8d0:	7fe00000 	.word	0x7fe00000
 800d8d4:	7c9fffff 	.word	0x7c9fffff
 800d8d8:	3fe00000 	.word	0x3fe00000
 800d8dc:	bff00000 	.word	0xbff00000
 800d8e0:	7fefffff 	.word	0x7fefffff

0800d8e4 <_strtod_r>:
 800d8e4:	4b01      	ldr	r3, [pc, #4]	; (800d8ec <_strtod_r+0x8>)
 800d8e6:	f7ff b9f3 	b.w	800ccd0 <_strtod_l>
 800d8ea:	bf00      	nop
 800d8ec:	200000a8 	.word	0x200000a8

0800d8f0 <strtod>:
 800d8f0:	460a      	mov	r2, r1
 800d8f2:	4601      	mov	r1, r0
 800d8f4:	4802      	ldr	r0, [pc, #8]	; (800d900 <strtod+0x10>)
 800d8f6:	4b03      	ldr	r3, [pc, #12]	; (800d904 <strtod+0x14>)
 800d8f8:	6800      	ldr	r0, [r0, #0]
 800d8fa:	f7ff b9e9 	b.w	800ccd0 <_strtod_l>
 800d8fe:	bf00      	nop
 800d900:	20000040 	.word	0x20000040
 800d904:	200000a8 	.word	0x200000a8

0800d908 <strtok>:
 800d908:	4b16      	ldr	r3, [pc, #88]	; (800d964 <strtok+0x5c>)
 800d90a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d90c:	681e      	ldr	r6, [r3, #0]
 800d90e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800d910:	4605      	mov	r5, r0
 800d912:	b9fc      	cbnz	r4, 800d954 <strtok+0x4c>
 800d914:	2050      	movs	r0, #80	; 0x50
 800d916:	9101      	str	r1, [sp, #4]
 800d918:	f001 fb00 	bl	800ef1c <malloc>
 800d91c:	9901      	ldr	r1, [sp, #4]
 800d91e:	65b0      	str	r0, [r6, #88]	; 0x58
 800d920:	4602      	mov	r2, r0
 800d922:	b920      	cbnz	r0, 800d92e <strtok+0x26>
 800d924:	4b10      	ldr	r3, [pc, #64]	; (800d968 <strtok+0x60>)
 800d926:	4811      	ldr	r0, [pc, #68]	; (800d96c <strtok+0x64>)
 800d928:	2157      	movs	r1, #87	; 0x57
 800d92a:	f000 f8d9 	bl	800dae0 <__assert_func>
 800d92e:	e9c0 4400 	strd	r4, r4, [r0]
 800d932:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d936:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d93a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d93e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d942:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d946:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d94a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d94e:	6184      	str	r4, [r0, #24]
 800d950:	7704      	strb	r4, [r0, #28]
 800d952:	6244      	str	r4, [r0, #36]	; 0x24
 800d954:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800d956:	2301      	movs	r3, #1
 800d958:	4628      	mov	r0, r5
 800d95a:	b002      	add	sp, #8
 800d95c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d960:	f000 b806 	b.w	800d970 <__strtok_r>
 800d964:	20000040 	.word	0x20000040
 800d968:	08023fa0 	.word	0x08023fa0
 800d96c:	08023fb7 	.word	0x08023fb7

0800d970 <__strtok_r>:
 800d970:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d972:	b908      	cbnz	r0, 800d978 <__strtok_r+0x8>
 800d974:	6810      	ldr	r0, [r2, #0]
 800d976:	b188      	cbz	r0, 800d99c <__strtok_r+0x2c>
 800d978:	4604      	mov	r4, r0
 800d97a:	4620      	mov	r0, r4
 800d97c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d980:	460f      	mov	r7, r1
 800d982:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d986:	b91e      	cbnz	r6, 800d990 <__strtok_r+0x20>
 800d988:	b965      	cbnz	r5, 800d9a4 <__strtok_r+0x34>
 800d98a:	6015      	str	r5, [r2, #0]
 800d98c:	4628      	mov	r0, r5
 800d98e:	e005      	b.n	800d99c <__strtok_r+0x2c>
 800d990:	42b5      	cmp	r5, r6
 800d992:	d1f6      	bne.n	800d982 <__strtok_r+0x12>
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1f0      	bne.n	800d97a <__strtok_r+0xa>
 800d998:	6014      	str	r4, [r2, #0]
 800d99a:	7003      	strb	r3, [r0, #0]
 800d99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d99e:	461c      	mov	r4, r3
 800d9a0:	e00c      	b.n	800d9bc <__strtok_r+0x4c>
 800d9a2:	b915      	cbnz	r5, 800d9aa <__strtok_r+0x3a>
 800d9a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d9a8:	460e      	mov	r6, r1
 800d9aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d9ae:	42ab      	cmp	r3, r5
 800d9b0:	d1f7      	bne.n	800d9a2 <__strtok_r+0x32>
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d0f3      	beq.n	800d99e <__strtok_r+0x2e>
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d9bc:	6014      	str	r4, [r2, #0]
 800d9be:	e7ed      	b.n	800d99c <__strtok_r+0x2c>

0800d9c0 <_strtol_l.isra.0>:
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c6:	d001      	beq.n	800d9cc <_strtol_l.isra.0+0xc>
 800d9c8:	2b24      	cmp	r3, #36	; 0x24
 800d9ca:	d906      	bls.n	800d9da <_strtol_l.isra.0+0x1a>
 800d9cc:	f7fe fa90 	bl	800bef0 <__errno>
 800d9d0:	2316      	movs	r3, #22
 800d9d2:	6003      	str	r3, [r0, #0]
 800d9d4:	2000      	movs	r0, #0
 800d9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9da:	4f3a      	ldr	r7, [pc, #232]	; (800dac4 <_strtol_l.isra.0+0x104>)
 800d9dc:	468e      	mov	lr, r1
 800d9de:	4676      	mov	r6, lr
 800d9e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d9e4:	5de5      	ldrb	r5, [r4, r7]
 800d9e6:	f015 0508 	ands.w	r5, r5, #8
 800d9ea:	d1f8      	bne.n	800d9de <_strtol_l.isra.0+0x1e>
 800d9ec:	2c2d      	cmp	r4, #45	; 0x2d
 800d9ee:	d134      	bne.n	800da5a <_strtol_l.isra.0+0x9a>
 800d9f0:	f89e 4000 	ldrb.w	r4, [lr]
 800d9f4:	f04f 0801 	mov.w	r8, #1
 800d9f8:	f106 0e02 	add.w	lr, r6, #2
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d05c      	beq.n	800daba <_strtol_l.isra.0+0xfa>
 800da00:	2b10      	cmp	r3, #16
 800da02:	d10c      	bne.n	800da1e <_strtol_l.isra.0+0x5e>
 800da04:	2c30      	cmp	r4, #48	; 0x30
 800da06:	d10a      	bne.n	800da1e <_strtol_l.isra.0+0x5e>
 800da08:	f89e 4000 	ldrb.w	r4, [lr]
 800da0c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800da10:	2c58      	cmp	r4, #88	; 0x58
 800da12:	d14d      	bne.n	800dab0 <_strtol_l.isra.0+0xf0>
 800da14:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800da18:	2310      	movs	r3, #16
 800da1a:	f10e 0e02 	add.w	lr, lr, #2
 800da1e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800da22:	f10c 3cff 	add.w	ip, ip, #4294967295
 800da26:	2600      	movs	r6, #0
 800da28:	fbbc f9f3 	udiv	r9, ip, r3
 800da2c:	4635      	mov	r5, r6
 800da2e:	fb03 ca19 	mls	sl, r3, r9, ip
 800da32:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800da36:	2f09      	cmp	r7, #9
 800da38:	d818      	bhi.n	800da6c <_strtol_l.isra.0+0xac>
 800da3a:	463c      	mov	r4, r7
 800da3c:	42a3      	cmp	r3, r4
 800da3e:	dd24      	ble.n	800da8a <_strtol_l.isra.0+0xca>
 800da40:	2e00      	cmp	r6, #0
 800da42:	db1f      	blt.n	800da84 <_strtol_l.isra.0+0xc4>
 800da44:	45a9      	cmp	r9, r5
 800da46:	d31d      	bcc.n	800da84 <_strtol_l.isra.0+0xc4>
 800da48:	d101      	bne.n	800da4e <_strtol_l.isra.0+0x8e>
 800da4a:	45a2      	cmp	sl, r4
 800da4c:	db1a      	blt.n	800da84 <_strtol_l.isra.0+0xc4>
 800da4e:	fb05 4503 	mla	r5, r5, r3, r4
 800da52:	2601      	movs	r6, #1
 800da54:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800da58:	e7eb      	b.n	800da32 <_strtol_l.isra.0+0x72>
 800da5a:	2c2b      	cmp	r4, #43	; 0x2b
 800da5c:	bf08      	it	eq
 800da5e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800da62:	46a8      	mov	r8, r5
 800da64:	bf08      	it	eq
 800da66:	f106 0e02 	addeq.w	lr, r6, #2
 800da6a:	e7c7      	b.n	800d9fc <_strtol_l.isra.0+0x3c>
 800da6c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800da70:	2f19      	cmp	r7, #25
 800da72:	d801      	bhi.n	800da78 <_strtol_l.isra.0+0xb8>
 800da74:	3c37      	subs	r4, #55	; 0x37
 800da76:	e7e1      	b.n	800da3c <_strtol_l.isra.0+0x7c>
 800da78:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800da7c:	2f19      	cmp	r7, #25
 800da7e:	d804      	bhi.n	800da8a <_strtol_l.isra.0+0xca>
 800da80:	3c57      	subs	r4, #87	; 0x57
 800da82:	e7db      	b.n	800da3c <_strtol_l.isra.0+0x7c>
 800da84:	f04f 36ff 	mov.w	r6, #4294967295
 800da88:	e7e4      	b.n	800da54 <_strtol_l.isra.0+0x94>
 800da8a:	2e00      	cmp	r6, #0
 800da8c:	da05      	bge.n	800da9a <_strtol_l.isra.0+0xda>
 800da8e:	2322      	movs	r3, #34	; 0x22
 800da90:	6003      	str	r3, [r0, #0]
 800da92:	4665      	mov	r5, ip
 800da94:	b942      	cbnz	r2, 800daa8 <_strtol_l.isra.0+0xe8>
 800da96:	4628      	mov	r0, r5
 800da98:	e79d      	b.n	800d9d6 <_strtol_l.isra.0+0x16>
 800da9a:	f1b8 0f00 	cmp.w	r8, #0
 800da9e:	d000      	beq.n	800daa2 <_strtol_l.isra.0+0xe2>
 800daa0:	426d      	negs	r5, r5
 800daa2:	2a00      	cmp	r2, #0
 800daa4:	d0f7      	beq.n	800da96 <_strtol_l.isra.0+0xd6>
 800daa6:	b10e      	cbz	r6, 800daac <_strtol_l.isra.0+0xec>
 800daa8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800daac:	6011      	str	r1, [r2, #0]
 800daae:	e7f2      	b.n	800da96 <_strtol_l.isra.0+0xd6>
 800dab0:	2430      	movs	r4, #48	; 0x30
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1b3      	bne.n	800da1e <_strtol_l.isra.0+0x5e>
 800dab6:	2308      	movs	r3, #8
 800dab8:	e7b1      	b.n	800da1e <_strtol_l.isra.0+0x5e>
 800daba:	2c30      	cmp	r4, #48	; 0x30
 800dabc:	d0a4      	beq.n	800da08 <_strtol_l.isra.0+0x48>
 800dabe:	230a      	movs	r3, #10
 800dac0:	e7ad      	b.n	800da1e <_strtol_l.isra.0+0x5e>
 800dac2:	bf00      	nop
 800dac4:	08024055 	.word	0x08024055

0800dac8 <_strtol_r>:
 800dac8:	f7ff bf7a 	b.w	800d9c0 <_strtol_l.isra.0>

0800dacc <strtol>:
 800dacc:	4613      	mov	r3, r2
 800dace:	460a      	mov	r2, r1
 800dad0:	4601      	mov	r1, r0
 800dad2:	4802      	ldr	r0, [pc, #8]	; (800dadc <strtol+0x10>)
 800dad4:	6800      	ldr	r0, [r0, #0]
 800dad6:	f7ff bf73 	b.w	800d9c0 <_strtol_l.isra.0>
 800dada:	bf00      	nop
 800dadc:	20000040 	.word	0x20000040

0800dae0 <__assert_func>:
 800dae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dae2:	4614      	mov	r4, r2
 800dae4:	461a      	mov	r2, r3
 800dae6:	4b09      	ldr	r3, [pc, #36]	; (800db0c <__assert_func+0x2c>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4605      	mov	r5, r0
 800daec:	68d8      	ldr	r0, [r3, #12]
 800daee:	b14c      	cbz	r4, 800db04 <__assert_func+0x24>
 800daf0:	4b07      	ldr	r3, [pc, #28]	; (800db10 <__assert_func+0x30>)
 800daf2:	9100      	str	r1, [sp, #0]
 800daf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800daf8:	4906      	ldr	r1, [pc, #24]	; (800db14 <__assert_func+0x34>)
 800dafa:	462b      	mov	r3, r5
 800dafc:	f000 fe88 	bl	800e810 <fiprintf>
 800db00:	f002 fb56 	bl	80101b0 <abort>
 800db04:	4b04      	ldr	r3, [pc, #16]	; (800db18 <__assert_func+0x38>)
 800db06:	461c      	mov	r4, r3
 800db08:	e7f3      	b.n	800daf2 <__assert_func+0x12>
 800db0a:	bf00      	nop
 800db0c:	20000040 	.word	0x20000040
 800db10:	08024018 	.word	0x08024018
 800db14:	08024025 	.word	0x08024025
 800db18:	08024053 	.word	0x08024053

0800db1c <quorem>:
 800db1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db20:	6903      	ldr	r3, [r0, #16]
 800db22:	690c      	ldr	r4, [r1, #16]
 800db24:	42a3      	cmp	r3, r4
 800db26:	4607      	mov	r7, r0
 800db28:	f2c0 8081 	blt.w	800dc2e <quorem+0x112>
 800db2c:	3c01      	subs	r4, #1
 800db2e:	f101 0814 	add.w	r8, r1, #20
 800db32:	f100 0514 	add.w	r5, r0, #20
 800db36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db3a:	9301      	str	r3, [sp, #4]
 800db3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db44:	3301      	adds	r3, #1
 800db46:	429a      	cmp	r2, r3
 800db48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800db4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db50:	fbb2 f6f3 	udiv	r6, r2, r3
 800db54:	d331      	bcc.n	800dbba <quorem+0x9e>
 800db56:	f04f 0e00 	mov.w	lr, #0
 800db5a:	4640      	mov	r0, r8
 800db5c:	46ac      	mov	ip, r5
 800db5e:	46f2      	mov	sl, lr
 800db60:	f850 2b04 	ldr.w	r2, [r0], #4
 800db64:	b293      	uxth	r3, r2
 800db66:	fb06 e303 	mla	r3, r6, r3, lr
 800db6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800db6e:	b29b      	uxth	r3, r3
 800db70:	ebaa 0303 	sub.w	r3, sl, r3
 800db74:	0c12      	lsrs	r2, r2, #16
 800db76:	f8dc a000 	ldr.w	sl, [ip]
 800db7a:	fb06 e202 	mla	r2, r6, r2, lr
 800db7e:	fa13 f38a 	uxtah	r3, r3, sl
 800db82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800db86:	fa1f fa82 	uxth.w	sl, r2
 800db8a:	f8dc 2000 	ldr.w	r2, [ip]
 800db8e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800db92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db96:	b29b      	uxth	r3, r3
 800db98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db9c:	4581      	cmp	r9, r0
 800db9e:	f84c 3b04 	str.w	r3, [ip], #4
 800dba2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dba6:	d2db      	bcs.n	800db60 <quorem+0x44>
 800dba8:	f855 300b 	ldr.w	r3, [r5, fp]
 800dbac:	b92b      	cbnz	r3, 800dbba <quorem+0x9e>
 800dbae:	9b01      	ldr	r3, [sp, #4]
 800dbb0:	3b04      	subs	r3, #4
 800dbb2:	429d      	cmp	r5, r3
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	d32e      	bcc.n	800dc16 <quorem+0xfa>
 800dbb8:	613c      	str	r4, [r7, #16]
 800dbba:	4638      	mov	r0, r7
 800dbbc:	f001 fc9e 	bl	800f4fc <__mcmp>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	db24      	blt.n	800dc0e <quorem+0xf2>
 800dbc4:	3601      	adds	r6, #1
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	f04f 0c00 	mov.w	ip, #0
 800dbcc:	f858 2b04 	ldr.w	r2, [r8], #4
 800dbd0:	f8d0 e000 	ldr.w	lr, [r0]
 800dbd4:	b293      	uxth	r3, r2
 800dbd6:	ebac 0303 	sub.w	r3, ip, r3
 800dbda:	0c12      	lsrs	r2, r2, #16
 800dbdc:	fa13 f38e 	uxtah	r3, r3, lr
 800dbe0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dbe4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbee:	45c1      	cmp	r9, r8
 800dbf0:	f840 3b04 	str.w	r3, [r0], #4
 800dbf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dbf8:	d2e8      	bcs.n	800dbcc <quorem+0xb0>
 800dbfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc02:	b922      	cbnz	r2, 800dc0e <quorem+0xf2>
 800dc04:	3b04      	subs	r3, #4
 800dc06:	429d      	cmp	r5, r3
 800dc08:	461a      	mov	r2, r3
 800dc0a:	d30a      	bcc.n	800dc22 <quorem+0x106>
 800dc0c:	613c      	str	r4, [r7, #16]
 800dc0e:	4630      	mov	r0, r6
 800dc10:	b003      	add	sp, #12
 800dc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc16:	6812      	ldr	r2, [r2, #0]
 800dc18:	3b04      	subs	r3, #4
 800dc1a:	2a00      	cmp	r2, #0
 800dc1c:	d1cc      	bne.n	800dbb8 <quorem+0x9c>
 800dc1e:	3c01      	subs	r4, #1
 800dc20:	e7c7      	b.n	800dbb2 <quorem+0x96>
 800dc22:	6812      	ldr	r2, [r2, #0]
 800dc24:	3b04      	subs	r3, #4
 800dc26:	2a00      	cmp	r2, #0
 800dc28:	d1f0      	bne.n	800dc0c <quorem+0xf0>
 800dc2a:	3c01      	subs	r4, #1
 800dc2c:	e7eb      	b.n	800dc06 <quorem+0xea>
 800dc2e:	2000      	movs	r0, #0
 800dc30:	e7ee      	b.n	800dc10 <quorem+0xf4>
 800dc32:	0000      	movs	r0, r0
 800dc34:	0000      	movs	r0, r0
	...

0800dc38 <_dtoa_r>:
 800dc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc3c:	ed2d 8b02 	vpush	{d8}
 800dc40:	ec57 6b10 	vmov	r6, r7, d0
 800dc44:	b095      	sub	sp, #84	; 0x54
 800dc46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dc48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dc4c:	9105      	str	r1, [sp, #20]
 800dc4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800dc52:	4604      	mov	r4, r0
 800dc54:	9209      	str	r2, [sp, #36]	; 0x24
 800dc56:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc58:	b975      	cbnz	r5, 800dc78 <_dtoa_r+0x40>
 800dc5a:	2010      	movs	r0, #16
 800dc5c:	f001 f95e 	bl	800ef1c <malloc>
 800dc60:	4602      	mov	r2, r0
 800dc62:	6260      	str	r0, [r4, #36]	; 0x24
 800dc64:	b920      	cbnz	r0, 800dc70 <_dtoa_r+0x38>
 800dc66:	4bb2      	ldr	r3, [pc, #712]	; (800df30 <_dtoa_r+0x2f8>)
 800dc68:	21ea      	movs	r1, #234	; 0xea
 800dc6a:	48b2      	ldr	r0, [pc, #712]	; (800df34 <_dtoa_r+0x2fc>)
 800dc6c:	f7ff ff38 	bl	800dae0 <__assert_func>
 800dc70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dc74:	6005      	str	r5, [r0, #0]
 800dc76:	60c5      	str	r5, [r0, #12]
 800dc78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc7a:	6819      	ldr	r1, [r3, #0]
 800dc7c:	b151      	cbz	r1, 800dc94 <_dtoa_r+0x5c>
 800dc7e:	685a      	ldr	r2, [r3, #4]
 800dc80:	604a      	str	r2, [r1, #4]
 800dc82:	2301      	movs	r3, #1
 800dc84:	4093      	lsls	r3, r2
 800dc86:	608b      	str	r3, [r1, #8]
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f001 f9af 	bl	800efec <_Bfree>
 800dc8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc90:	2200      	movs	r2, #0
 800dc92:	601a      	str	r2, [r3, #0]
 800dc94:	1e3b      	subs	r3, r7, #0
 800dc96:	bfb9      	ittee	lt
 800dc98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dc9c:	9303      	strlt	r3, [sp, #12]
 800dc9e:	2300      	movge	r3, #0
 800dca0:	f8c8 3000 	strge.w	r3, [r8]
 800dca4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800dca8:	4ba3      	ldr	r3, [pc, #652]	; (800df38 <_dtoa_r+0x300>)
 800dcaa:	bfbc      	itt	lt
 800dcac:	2201      	movlt	r2, #1
 800dcae:	f8c8 2000 	strlt.w	r2, [r8]
 800dcb2:	ea33 0309 	bics.w	r3, r3, r9
 800dcb6:	d11b      	bne.n	800dcf0 <_dtoa_r+0xb8>
 800dcb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dcba:	f242 730f 	movw	r3, #9999	; 0x270f
 800dcbe:	6013      	str	r3, [r2, #0]
 800dcc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dcc4:	4333      	orrs	r3, r6
 800dcc6:	f000 857a 	beq.w	800e7be <_dtoa_r+0xb86>
 800dcca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dccc:	b963      	cbnz	r3, 800dce8 <_dtoa_r+0xb0>
 800dcce:	4b9b      	ldr	r3, [pc, #620]	; (800df3c <_dtoa_r+0x304>)
 800dcd0:	e024      	b.n	800dd1c <_dtoa_r+0xe4>
 800dcd2:	4b9b      	ldr	r3, [pc, #620]	; (800df40 <_dtoa_r+0x308>)
 800dcd4:	9300      	str	r3, [sp, #0]
 800dcd6:	3308      	adds	r3, #8
 800dcd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dcda:	6013      	str	r3, [r2, #0]
 800dcdc:	9800      	ldr	r0, [sp, #0]
 800dcde:	b015      	add	sp, #84	; 0x54
 800dce0:	ecbd 8b02 	vpop	{d8}
 800dce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce8:	4b94      	ldr	r3, [pc, #592]	; (800df3c <_dtoa_r+0x304>)
 800dcea:	9300      	str	r3, [sp, #0]
 800dcec:	3303      	adds	r3, #3
 800dcee:	e7f3      	b.n	800dcd8 <_dtoa_r+0xa0>
 800dcf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	ec51 0b17 	vmov	r0, r1, d7
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800dd00:	f7f2 fefa 	bl	8000af8 <__aeabi_dcmpeq>
 800dd04:	4680      	mov	r8, r0
 800dd06:	b158      	cbz	r0, 800dd20 <_dtoa_r+0xe8>
 800dd08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	6013      	str	r3, [r2, #0]
 800dd0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	f000 8551 	beq.w	800e7b8 <_dtoa_r+0xb80>
 800dd16:	488b      	ldr	r0, [pc, #556]	; (800df44 <_dtoa_r+0x30c>)
 800dd18:	6018      	str	r0, [r3, #0]
 800dd1a:	1e43      	subs	r3, r0, #1
 800dd1c:	9300      	str	r3, [sp, #0]
 800dd1e:	e7dd      	b.n	800dcdc <_dtoa_r+0xa4>
 800dd20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dd24:	aa12      	add	r2, sp, #72	; 0x48
 800dd26:	a913      	add	r1, sp, #76	; 0x4c
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f001 fd07 	bl	800f73c <__d2b>
 800dd2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd32:	4683      	mov	fp, r0
 800dd34:	2d00      	cmp	r5, #0
 800dd36:	d07c      	beq.n	800de32 <_dtoa_r+0x1fa>
 800dd38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800dd3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800dd46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dd4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dd4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dd52:	4b7d      	ldr	r3, [pc, #500]	; (800df48 <_dtoa_r+0x310>)
 800dd54:	2200      	movs	r2, #0
 800dd56:	4630      	mov	r0, r6
 800dd58:	4639      	mov	r1, r7
 800dd5a:	f7f2 faad 	bl	80002b8 <__aeabi_dsub>
 800dd5e:	a36e      	add	r3, pc, #440	; (adr r3, 800df18 <_dtoa_r+0x2e0>)
 800dd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd64:	f7f2 fc60 	bl	8000628 <__aeabi_dmul>
 800dd68:	a36d      	add	r3, pc, #436	; (adr r3, 800df20 <_dtoa_r+0x2e8>)
 800dd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6e:	f7f2 faa5 	bl	80002bc <__adddf3>
 800dd72:	4606      	mov	r6, r0
 800dd74:	4628      	mov	r0, r5
 800dd76:	460f      	mov	r7, r1
 800dd78:	f7f2 fbec 	bl	8000554 <__aeabi_i2d>
 800dd7c:	a36a      	add	r3, pc, #424	; (adr r3, 800df28 <_dtoa_r+0x2f0>)
 800dd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd82:	f7f2 fc51 	bl	8000628 <__aeabi_dmul>
 800dd86:	4602      	mov	r2, r0
 800dd88:	460b      	mov	r3, r1
 800dd8a:	4630      	mov	r0, r6
 800dd8c:	4639      	mov	r1, r7
 800dd8e:	f7f2 fa95 	bl	80002bc <__adddf3>
 800dd92:	4606      	mov	r6, r0
 800dd94:	460f      	mov	r7, r1
 800dd96:	f7f2 fef7 	bl	8000b88 <__aeabi_d2iz>
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	4682      	mov	sl, r0
 800dd9e:	2300      	movs	r3, #0
 800dda0:	4630      	mov	r0, r6
 800dda2:	4639      	mov	r1, r7
 800dda4:	f7f2 feb2 	bl	8000b0c <__aeabi_dcmplt>
 800dda8:	b148      	cbz	r0, 800ddbe <_dtoa_r+0x186>
 800ddaa:	4650      	mov	r0, sl
 800ddac:	f7f2 fbd2 	bl	8000554 <__aeabi_i2d>
 800ddb0:	4632      	mov	r2, r6
 800ddb2:	463b      	mov	r3, r7
 800ddb4:	f7f2 fea0 	bl	8000af8 <__aeabi_dcmpeq>
 800ddb8:	b908      	cbnz	r0, 800ddbe <_dtoa_r+0x186>
 800ddba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ddbe:	f1ba 0f16 	cmp.w	sl, #22
 800ddc2:	d854      	bhi.n	800de6e <_dtoa_r+0x236>
 800ddc4:	4b61      	ldr	r3, [pc, #388]	; (800df4c <_dtoa_r+0x314>)
 800ddc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ddca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ddd2:	f7f2 fe9b 	bl	8000b0c <__aeabi_dcmplt>
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d04b      	beq.n	800de72 <_dtoa_r+0x23a>
 800ddda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ddde:	2300      	movs	r3, #0
 800dde0:	930e      	str	r3, [sp, #56]	; 0x38
 800dde2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dde4:	1b5d      	subs	r5, r3, r5
 800dde6:	1e6b      	subs	r3, r5, #1
 800dde8:	9304      	str	r3, [sp, #16]
 800ddea:	bf43      	ittte	mi
 800ddec:	2300      	movmi	r3, #0
 800ddee:	f1c5 0801 	rsbmi	r8, r5, #1
 800ddf2:	9304      	strmi	r3, [sp, #16]
 800ddf4:	f04f 0800 	movpl.w	r8, #0
 800ddf8:	f1ba 0f00 	cmp.w	sl, #0
 800ddfc:	db3b      	blt.n	800de76 <_dtoa_r+0x23e>
 800ddfe:	9b04      	ldr	r3, [sp, #16]
 800de00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800de04:	4453      	add	r3, sl
 800de06:	9304      	str	r3, [sp, #16]
 800de08:	2300      	movs	r3, #0
 800de0a:	9306      	str	r3, [sp, #24]
 800de0c:	9b05      	ldr	r3, [sp, #20]
 800de0e:	2b09      	cmp	r3, #9
 800de10:	d869      	bhi.n	800dee6 <_dtoa_r+0x2ae>
 800de12:	2b05      	cmp	r3, #5
 800de14:	bfc4      	itt	gt
 800de16:	3b04      	subgt	r3, #4
 800de18:	9305      	strgt	r3, [sp, #20]
 800de1a:	9b05      	ldr	r3, [sp, #20]
 800de1c:	f1a3 0302 	sub.w	r3, r3, #2
 800de20:	bfcc      	ite	gt
 800de22:	2500      	movgt	r5, #0
 800de24:	2501      	movle	r5, #1
 800de26:	2b03      	cmp	r3, #3
 800de28:	d869      	bhi.n	800defe <_dtoa_r+0x2c6>
 800de2a:	e8df f003 	tbb	[pc, r3]
 800de2e:	4e2c      	.short	0x4e2c
 800de30:	5a4c      	.short	0x5a4c
 800de32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800de36:	441d      	add	r5, r3
 800de38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800de3c:	2b20      	cmp	r3, #32
 800de3e:	bfc1      	itttt	gt
 800de40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800de44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800de48:	fa09 f303 	lslgt.w	r3, r9, r3
 800de4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800de50:	bfda      	itte	le
 800de52:	f1c3 0320 	rsble	r3, r3, #32
 800de56:	fa06 f003 	lslle.w	r0, r6, r3
 800de5a:	4318      	orrgt	r0, r3
 800de5c:	f7f2 fb6a 	bl	8000534 <__aeabi_ui2d>
 800de60:	2301      	movs	r3, #1
 800de62:	4606      	mov	r6, r0
 800de64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800de68:	3d01      	subs	r5, #1
 800de6a:	9310      	str	r3, [sp, #64]	; 0x40
 800de6c:	e771      	b.n	800dd52 <_dtoa_r+0x11a>
 800de6e:	2301      	movs	r3, #1
 800de70:	e7b6      	b.n	800dde0 <_dtoa_r+0x1a8>
 800de72:	900e      	str	r0, [sp, #56]	; 0x38
 800de74:	e7b5      	b.n	800dde2 <_dtoa_r+0x1aa>
 800de76:	f1ca 0300 	rsb	r3, sl, #0
 800de7a:	9306      	str	r3, [sp, #24]
 800de7c:	2300      	movs	r3, #0
 800de7e:	eba8 080a 	sub.w	r8, r8, sl
 800de82:	930d      	str	r3, [sp, #52]	; 0x34
 800de84:	e7c2      	b.n	800de0c <_dtoa_r+0x1d4>
 800de86:	2300      	movs	r3, #0
 800de88:	9308      	str	r3, [sp, #32]
 800de8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	dc39      	bgt.n	800df04 <_dtoa_r+0x2cc>
 800de90:	f04f 0901 	mov.w	r9, #1
 800de94:	f8cd 9004 	str.w	r9, [sp, #4]
 800de98:	464b      	mov	r3, r9
 800de9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800de9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dea0:	2200      	movs	r2, #0
 800dea2:	6042      	str	r2, [r0, #4]
 800dea4:	2204      	movs	r2, #4
 800dea6:	f102 0614 	add.w	r6, r2, #20
 800deaa:	429e      	cmp	r6, r3
 800deac:	6841      	ldr	r1, [r0, #4]
 800deae:	d92f      	bls.n	800df10 <_dtoa_r+0x2d8>
 800deb0:	4620      	mov	r0, r4
 800deb2:	f001 f85b 	bl	800ef6c <_Balloc>
 800deb6:	9000      	str	r0, [sp, #0]
 800deb8:	2800      	cmp	r0, #0
 800deba:	d14b      	bne.n	800df54 <_dtoa_r+0x31c>
 800debc:	4b24      	ldr	r3, [pc, #144]	; (800df50 <_dtoa_r+0x318>)
 800debe:	4602      	mov	r2, r0
 800dec0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dec4:	e6d1      	b.n	800dc6a <_dtoa_r+0x32>
 800dec6:	2301      	movs	r3, #1
 800dec8:	e7de      	b.n	800de88 <_dtoa_r+0x250>
 800deca:	2300      	movs	r3, #0
 800decc:	9308      	str	r3, [sp, #32]
 800dece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ded0:	eb0a 0903 	add.w	r9, sl, r3
 800ded4:	f109 0301 	add.w	r3, r9, #1
 800ded8:	2b01      	cmp	r3, #1
 800deda:	9301      	str	r3, [sp, #4]
 800dedc:	bfb8      	it	lt
 800dede:	2301      	movlt	r3, #1
 800dee0:	e7dd      	b.n	800de9e <_dtoa_r+0x266>
 800dee2:	2301      	movs	r3, #1
 800dee4:	e7f2      	b.n	800decc <_dtoa_r+0x294>
 800dee6:	2501      	movs	r5, #1
 800dee8:	2300      	movs	r3, #0
 800deea:	9305      	str	r3, [sp, #20]
 800deec:	9508      	str	r5, [sp, #32]
 800deee:	f04f 39ff 	mov.w	r9, #4294967295
 800def2:	2200      	movs	r2, #0
 800def4:	f8cd 9004 	str.w	r9, [sp, #4]
 800def8:	2312      	movs	r3, #18
 800defa:	9209      	str	r2, [sp, #36]	; 0x24
 800defc:	e7cf      	b.n	800de9e <_dtoa_r+0x266>
 800defe:	2301      	movs	r3, #1
 800df00:	9308      	str	r3, [sp, #32]
 800df02:	e7f4      	b.n	800deee <_dtoa_r+0x2b6>
 800df04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800df08:	f8cd 9004 	str.w	r9, [sp, #4]
 800df0c:	464b      	mov	r3, r9
 800df0e:	e7c6      	b.n	800de9e <_dtoa_r+0x266>
 800df10:	3101      	adds	r1, #1
 800df12:	6041      	str	r1, [r0, #4]
 800df14:	0052      	lsls	r2, r2, #1
 800df16:	e7c6      	b.n	800dea6 <_dtoa_r+0x26e>
 800df18:	636f4361 	.word	0x636f4361
 800df1c:	3fd287a7 	.word	0x3fd287a7
 800df20:	8b60c8b3 	.word	0x8b60c8b3
 800df24:	3fc68a28 	.word	0x3fc68a28
 800df28:	509f79fb 	.word	0x509f79fb
 800df2c:	3fd34413 	.word	0x3fd34413
 800df30:	08023fa0 	.word	0x08023fa0
 800df34:	08024162 	.word	0x08024162
 800df38:	7ff00000 	.word	0x7ff00000
 800df3c:	0802415e 	.word	0x0802415e
 800df40:	08024155 	.word	0x08024155
 800df44:	08023f21 	.word	0x08023f21
 800df48:	3ff80000 	.word	0x3ff80000
 800df4c:	080242d8 	.word	0x080242d8
 800df50:	080241c1 	.word	0x080241c1
 800df54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df56:	9a00      	ldr	r2, [sp, #0]
 800df58:	601a      	str	r2, [r3, #0]
 800df5a:	9b01      	ldr	r3, [sp, #4]
 800df5c:	2b0e      	cmp	r3, #14
 800df5e:	f200 80ad 	bhi.w	800e0bc <_dtoa_r+0x484>
 800df62:	2d00      	cmp	r5, #0
 800df64:	f000 80aa 	beq.w	800e0bc <_dtoa_r+0x484>
 800df68:	f1ba 0f00 	cmp.w	sl, #0
 800df6c:	dd36      	ble.n	800dfdc <_dtoa_r+0x3a4>
 800df6e:	4ac3      	ldr	r2, [pc, #780]	; (800e27c <_dtoa_r+0x644>)
 800df70:	f00a 030f 	and.w	r3, sl, #15
 800df74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800df78:	ed93 7b00 	vldr	d7, [r3]
 800df7c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800df80:	ea4f 172a 	mov.w	r7, sl, asr #4
 800df84:	eeb0 8a47 	vmov.f32	s16, s14
 800df88:	eef0 8a67 	vmov.f32	s17, s15
 800df8c:	d016      	beq.n	800dfbc <_dtoa_r+0x384>
 800df8e:	4bbc      	ldr	r3, [pc, #752]	; (800e280 <_dtoa_r+0x648>)
 800df90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800df94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df98:	f7f2 fc70 	bl	800087c <__aeabi_ddiv>
 800df9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfa0:	f007 070f 	and.w	r7, r7, #15
 800dfa4:	2503      	movs	r5, #3
 800dfa6:	4eb6      	ldr	r6, [pc, #728]	; (800e280 <_dtoa_r+0x648>)
 800dfa8:	b957      	cbnz	r7, 800dfc0 <_dtoa_r+0x388>
 800dfaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfae:	ec53 2b18 	vmov	r2, r3, d8
 800dfb2:	f7f2 fc63 	bl	800087c <__aeabi_ddiv>
 800dfb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfba:	e029      	b.n	800e010 <_dtoa_r+0x3d8>
 800dfbc:	2502      	movs	r5, #2
 800dfbe:	e7f2      	b.n	800dfa6 <_dtoa_r+0x36e>
 800dfc0:	07f9      	lsls	r1, r7, #31
 800dfc2:	d508      	bpl.n	800dfd6 <_dtoa_r+0x39e>
 800dfc4:	ec51 0b18 	vmov	r0, r1, d8
 800dfc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dfcc:	f7f2 fb2c 	bl	8000628 <__aeabi_dmul>
 800dfd0:	ec41 0b18 	vmov	d8, r0, r1
 800dfd4:	3501      	adds	r5, #1
 800dfd6:	107f      	asrs	r7, r7, #1
 800dfd8:	3608      	adds	r6, #8
 800dfda:	e7e5      	b.n	800dfa8 <_dtoa_r+0x370>
 800dfdc:	f000 80a6 	beq.w	800e12c <_dtoa_r+0x4f4>
 800dfe0:	f1ca 0600 	rsb	r6, sl, #0
 800dfe4:	4ba5      	ldr	r3, [pc, #660]	; (800e27c <_dtoa_r+0x644>)
 800dfe6:	4fa6      	ldr	r7, [pc, #664]	; (800e280 <_dtoa_r+0x648>)
 800dfe8:	f006 020f 	and.w	r2, r6, #15
 800dfec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dff8:	f7f2 fb16 	bl	8000628 <__aeabi_dmul>
 800dffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e000:	1136      	asrs	r6, r6, #4
 800e002:	2300      	movs	r3, #0
 800e004:	2502      	movs	r5, #2
 800e006:	2e00      	cmp	r6, #0
 800e008:	f040 8085 	bne.w	800e116 <_dtoa_r+0x4de>
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d1d2      	bne.n	800dfb6 <_dtoa_r+0x37e>
 800e010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e012:	2b00      	cmp	r3, #0
 800e014:	f000 808c 	beq.w	800e130 <_dtoa_r+0x4f8>
 800e018:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e01c:	4b99      	ldr	r3, [pc, #612]	; (800e284 <_dtoa_r+0x64c>)
 800e01e:	2200      	movs	r2, #0
 800e020:	4630      	mov	r0, r6
 800e022:	4639      	mov	r1, r7
 800e024:	f7f2 fd72 	bl	8000b0c <__aeabi_dcmplt>
 800e028:	2800      	cmp	r0, #0
 800e02a:	f000 8081 	beq.w	800e130 <_dtoa_r+0x4f8>
 800e02e:	9b01      	ldr	r3, [sp, #4]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d07d      	beq.n	800e130 <_dtoa_r+0x4f8>
 800e034:	f1b9 0f00 	cmp.w	r9, #0
 800e038:	dd3c      	ble.n	800e0b4 <_dtoa_r+0x47c>
 800e03a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e03e:	9307      	str	r3, [sp, #28]
 800e040:	2200      	movs	r2, #0
 800e042:	4b91      	ldr	r3, [pc, #580]	; (800e288 <_dtoa_r+0x650>)
 800e044:	4630      	mov	r0, r6
 800e046:	4639      	mov	r1, r7
 800e048:	f7f2 faee 	bl	8000628 <__aeabi_dmul>
 800e04c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e050:	3501      	adds	r5, #1
 800e052:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e056:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e05a:	4628      	mov	r0, r5
 800e05c:	f7f2 fa7a 	bl	8000554 <__aeabi_i2d>
 800e060:	4632      	mov	r2, r6
 800e062:	463b      	mov	r3, r7
 800e064:	f7f2 fae0 	bl	8000628 <__aeabi_dmul>
 800e068:	4b88      	ldr	r3, [pc, #544]	; (800e28c <_dtoa_r+0x654>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	f7f2 f926 	bl	80002bc <__adddf3>
 800e070:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e078:	9303      	str	r3, [sp, #12]
 800e07a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d15c      	bne.n	800e13a <_dtoa_r+0x502>
 800e080:	4b83      	ldr	r3, [pc, #524]	; (800e290 <_dtoa_r+0x658>)
 800e082:	2200      	movs	r2, #0
 800e084:	4630      	mov	r0, r6
 800e086:	4639      	mov	r1, r7
 800e088:	f7f2 f916 	bl	80002b8 <__aeabi_dsub>
 800e08c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e090:	4606      	mov	r6, r0
 800e092:	460f      	mov	r7, r1
 800e094:	f7f2 fd58 	bl	8000b48 <__aeabi_dcmpgt>
 800e098:	2800      	cmp	r0, #0
 800e09a:	f040 8296 	bne.w	800e5ca <_dtoa_r+0x992>
 800e09e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0a8:	4639      	mov	r1, r7
 800e0aa:	f7f2 fd2f 	bl	8000b0c <__aeabi_dcmplt>
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	f040 8288 	bne.w	800e5c4 <_dtoa_r+0x98c>
 800e0b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e0b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e0bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f2c0 8158 	blt.w	800e374 <_dtoa_r+0x73c>
 800e0c4:	f1ba 0f0e 	cmp.w	sl, #14
 800e0c8:	f300 8154 	bgt.w	800e374 <_dtoa_r+0x73c>
 800e0cc:	4b6b      	ldr	r3, [pc, #428]	; (800e27c <_dtoa_r+0x644>)
 800e0ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e0d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f280 80e3 	bge.w	800e2a4 <_dtoa_r+0x66c>
 800e0de:	9b01      	ldr	r3, [sp, #4]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f300 80df 	bgt.w	800e2a4 <_dtoa_r+0x66c>
 800e0e6:	f040 826d 	bne.w	800e5c4 <_dtoa_r+0x98c>
 800e0ea:	4b69      	ldr	r3, [pc, #420]	; (800e290 <_dtoa_r+0x658>)
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	4640      	mov	r0, r8
 800e0f0:	4649      	mov	r1, r9
 800e0f2:	f7f2 fa99 	bl	8000628 <__aeabi_dmul>
 800e0f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0fa:	f7f2 fd1b 	bl	8000b34 <__aeabi_dcmpge>
 800e0fe:	9e01      	ldr	r6, [sp, #4]
 800e100:	4637      	mov	r7, r6
 800e102:	2800      	cmp	r0, #0
 800e104:	f040 8243 	bne.w	800e58e <_dtoa_r+0x956>
 800e108:	9d00      	ldr	r5, [sp, #0]
 800e10a:	2331      	movs	r3, #49	; 0x31
 800e10c:	f805 3b01 	strb.w	r3, [r5], #1
 800e110:	f10a 0a01 	add.w	sl, sl, #1
 800e114:	e23f      	b.n	800e596 <_dtoa_r+0x95e>
 800e116:	07f2      	lsls	r2, r6, #31
 800e118:	d505      	bpl.n	800e126 <_dtoa_r+0x4ee>
 800e11a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e11e:	f7f2 fa83 	bl	8000628 <__aeabi_dmul>
 800e122:	3501      	adds	r5, #1
 800e124:	2301      	movs	r3, #1
 800e126:	1076      	asrs	r6, r6, #1
 800e128:	3708      	adds	r7, #8
 800e12a:	e76c      	b.n	800e006 <_dtoa_r+0x3ce>
 800e12c:	2502      	movs	r5, #2
 800e12e:	e76f      	b.n	800e010 <_dtoa_r+0x3d8>
 800e130:	9b01      	ldr	r3, [sp, #4]
 800e132:	f8cd a01c 	str.w	sl, [sp, #28]
 800e136:	930c      	str	r3, [sp, #48]	; 0x30
 800e138:	e78d      	b.n	800e056 <_dtoa_r+0x41e>
 800e13a:	9900      	ldr	r1, [sp, #0]
 800e13c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e13e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e140:	4b4e      	ldr	r3, [pc, #312]	; (800e27c <_dtoa_r+0x644>)
 800e142:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e146:	4401      	add	r1, r0
 800e148:	9102      	str	r1, [sp, #8]
 800e14a:	9908      	ldr	r1, [sp, #32]
 800e14c:	eeb0 8a47 	vmov.f32	s16, s14
 800e150:	eef0 8a67 	vmov.f32	s17, s15
 800e154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e158:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e15c:	2900      	cmp	r1, #0
 800e15e:	d045      	beq.n	800e1ec <_dtoa_r+0x5b4>
 800e160:	494c      	ldr	r1, [pc, #304]	; (800e294 <_dtoa_r+0x65c>)
 800e162:	2000      	movs	r0, #0
 800e164:	f7f2 fb8a 	bl	800087c <__aeabi_ddiv>
 800e168:	ec53 2b18 	vmov	r2, r3, d8
 800e16c:	f7f2 f8a4 	bl	80002b8 <__aeabi_dsub>
 800e170:	9d00      	ldr	r5, [sp, #0]
 800e172:	ec41 0b18 	vmov	d8, r0, r1
 800e176:	4639      	mov	r1, r7
 800e178:	4630      	mov	r0, r6
 800e17a:	f7f2 fd05 	bl	8000b88 <__aeabi_d2iz>
 800e17e:	900c      	str	r0, [sp, #48]	; 0x30
 800e180:	f7f2 f9e8 	bl	8000554 <__aeabi_i2d>
 800e184:	4602      	mov	r2, r0
 800e186:	460b      	mov	r3, r1
 800e188:	4630      	mov	r0, r6
 800e18a:	4639      	mov	r1, r7
 800e18c:	f7f2 f894 	bl	80002b8 <__aeabi_dsub>
 800e190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e192:	3330      	adds	r3, #48	; 0x30
 800e194:	f805 3b01 	strb.w	r3, [r5], #1
 800e198:	ec53 2b18 	vmov	r2, r3, d8
 800e19c:	4606      	mov	r6, r0
 800e19e:	460f      	mov	r7, r1
 800e1a0:	f7f2 fcb4 	bl	8000b0c <__aeabi_dcmplt>
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	d165      	bne.n	800e274 <_dtoa_r+0x63c>
 800e1a8:	4632      	mov	r2, r6
 800e1aa:	463b      	mov	r3, r7
 800e1ac:	4935      	ldr	r1, [pc, #212]	; (800e284 <_dtoa_r+0x64c>)
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	f7f2 f882 	bl	80002b8 <__aeabi_dsub>
 800e1b4:	ec53 2b18 	vmov	r2, r3, d8
 800e1b8:	f7f2 fca8 	bl	8000b0c <__aeabi_dcmplt>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	f040 80b9 	bne.w	800e334 <_dtoa_r+0x6fc>
 800e1c2:	9b02      	ldr	r3, [sp, #8]
 800e1c4:	429d      	cmp	r5, r3
 800e1c6:	f43f af75 	beq.w	800e0b4 <_dtoa_r+0x47c>
 800e1ca:	4b2f      	ldr	r3, [pc, #188]	; (800e288 <_dtoa_r+0x650>)
 800e1cc:	ec51 0b18 	vmov	r0, r1, d8
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f7f2 fa29 	bl	8000628 <__aeabi_dmul>
 800e1d6:	4b2c      	ldr	r3, [pc, #176]	; (800e288 <_dtoa_r+0x650>)
 800e1d8:	ec41 0b18 	vmov	d8, r0, r1
 800e1dc:	2200      	movs	r2, #0
 800e1de:	4630      	mov	r0, r6
 800e1e0:	4639      	mov	r1, r7
 800e1e2:	f7f2 fa21 	bl	8000628 <__aeabi_dmul>
 800e1e6:	4606      	mov	r6, r0
 800e1e8:	460f      	mov	r7, r1
 800e1ea:	e7c4      	b.n	800e176 <_dtoa_r+0x53e>
 800e1ec:	ec51 0b17 	vmov	r0, r1, d7
 800e1f0:	f7f2 fa1a 	bl	8000628 <__aeabi_dmul>
 800e1f4:	9b02      	ldr	r3, [sp, #8]
 800e1f6:	9d00      	ldr	r5, [sp, #0]
 800e1f8:	930c      	str	r3, [sp, #48]	; 0x30
 800e1fa:	ec41 0b18 	vmov	d8, r0, r1
 800e1fe:	4639      	mov	r1, r7
 800e200:	4630      	mov	r0, r6
 800e202:	f7f2 fcc1 	bl	8000b88 <__aeabi_d2iz>
 800e206:	9011      	str	r0, [sp, #68]	; 0x44
 800e208:	f7f2 f9a4 	bl	8000554 <__aeabi_i2d>
 800e20c:	4602      	mov	r2, r0
 800e20e:	460b      	mov	r3, r1
 800e210:	4630      	mov	r0, r6
 800e212:	4639      	mov	r1, r7
 800e214:	f7f2 f850 	bl	80002b8 <__aeabi_dsub>
 800e218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e21a:	3330      	adds	r3, #48	; 0x30
 800e21c:	f805 3b01 	strb.w	r3, [r5], #1
 800e220:	9b02      	ldr	r3, [sp, #8]
 800e222:	429d      	cmp	r5, r3
 800e224:	4606      	mov	r6, r0
 800e226:	460f      	mov	r7, r1
 800e228:	f04f 0200 	mov.w	r2, #0
 800e22c:	d134      	bne.n	800e298 <_dtoa_r+0x660>
 800e22e:	4b19      	ldr	r3, [pc, #100]	; (800e294 <_dtoa_r+0x65c>)
 800e230:	ec51 0b18 	vmov	r0, r1, d8
 800e234:	f7f2 f842 	bl	80002bc <__adddf3>
 800e238:	4602      	mov	r2, r0
 800e23a:	460b      	mov	r3, r1
 800e23c:	4630      	mov	r0, r6
 800e23e:	4639      	mov	r1, r7
 800e240:	f7f2 fc82 	bl	8000b48 <__aeabi_dcmpgt>
 800e244:	2800      	cmp	r0, #0
 800e246:	d175      	bne.n	800e334 <_dtoa_r+0x6fc>
 800e248:	ec53 2b18 	vmov	r2, r3, d8
 800e24c:	4911      	ldr	r1, [pc, #68]	; (800e294 <_dtoa_r+0x65c>)
 800e24e:	2000      	movs	r0, #0
 800e250:	f7f2 f832 	bl	80002b8 <__aeabi_dsub>
 800e254:	4602      	mov	r2, r0
 800e256:	460b      	mov	r3, r1
 800e258:	4630      	mov	r0, r6
 800e25a:	4639      	mov	r1, r7
 800e25c:	f7f2 fc56 	bl	8000b0c <__aeabi_dcmplt>
 800e260:	2800      	cmp	r0, #0
 800e262:	f43f af27 	beq.w	800e0b4 <_dtoa_r+0x47c>
 800e266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e268:	1e6b      	subs	r3, r5, #1
 800e26a:	930c      	str	r3, [sp, #48]	; 0x30
 800e26c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e270:	2b30      	cmp	r3, #48	; 0x30
 800e272:	d0f8      	beq.n	800e266 <_dtoa_r+0x62e>
 800e274:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e278:	e04a      	b.n	800e310 <_dtoa_r+0x6d8>
 800e27a:	bf00      	nop
 800e27c:	080242d8 	.word	0x080242d8
 800e280:	080242b0 	.word	0x080242b0
 800e284:	3ff00000 	.word	0x3ff00000
 800e288:	40240000 	.word	0x40240000
 800e28c:	401c0000 	.word	0x401c0000
 800e290:	40140000 	.word	0x40140000
 800e294:	3fe00000 	.word	0x3fe00000
 800e298:	4baf      	ldr	r3, [pc, #700]	; (800e558 <_dtoa_r+0x920>)
 800e29a:	f7f2 f9c5 	bl	8000628 <__aeabi_dmul>
 800e29e:	4606      	mov	r6, r0
 800e2a0:	460f      	mov	r7, r1
 800e2a2:	e7ac      	b.n	800e1fe <_dtoa_r+0x5c6>
 800e2a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e2a8:	9d00      	ldr	r5, [sp, #0]
 800e2aa:	4642      	mov	r2, r8
 800e2ac:	464b      	mov	r3, r9
 800e2ae:	4630      	mov	r0, r6
 800e2b0:	4639      	mov	r1, r7
 800e2b2:	f7f2 fae3 	bl	800087c <__aeabi_ddiv>
 800e2b6:	f7f2 fc67 	bl	8000b88 <__aeabi_d2iz>
 800e2ba:	9002      	str	r0, [sp, #8]
 800e2bc:	f7f2 f94a 	bl	8000554 <__aeabi_i2d>
 800e2c0:	4642      	mov	r2, r8
 800e2c2:	464b      	mov	r3, r9
 800e2c4:	f7f2 f9b0 	bl	8000628 <__aeabi_dmul>
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	4639      	mov	r1, r7
 800e2d0:	f7f1 fff2 	bl	80002b8 <__aeabi_dsub>
 800e2d4:	9e02      	ldr	r6, [sp, #8]
 800e2d6:	9f01      	ldr	r7, [sp, #4]
 800e2d8:	3630      	adds	r6, #48	; 0x30
 800e2da:	f805 6b01 	strb.w	r6, [r5], #1
 800e2de:	9e00      	ldr	r6, [sp, #0]
 800e2e0:	1bae      	subs	r6, r5, r6
 800e2e2:	42b7      	cmp	r7, r6
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	d137      	bne.n	800e35a <_dtoa_r+0x722>
 800e2ea:	f7f1 ffe7 	bl	80002bc <__adddf3>
 800e2ee:	4642      	mov	r2, r8
 800e2f0:	464b      	mov	r3, r9
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	460f      	mov	r7, r1
 800e2f6:	f7f2 fc27 	bl	8000b48 <__aeabi_dcmpgt>
 800e2fa:	b9c8      	cbnz	r0, 800e330 <_dtoa_r+0x6f8>
 800e2fc:	4642      	mov	r2, r8
 800e2fe:	464b      	mov	r3, r9
 800e300:	4630      	mov	r0, r6
 800e302:	4639      	mov	r1, r7
 800e304:	f7f2 fbf8 	bl	8000af8 <__aeabi_dcmpeq>
 800e308:	b110      	cbz	r0, 800e310 <_dtoa_r+0x6d8>
 800e30a:	9b02      	ldr	r3, [sp, #8]
 800e30c:	07d9      	lsls	r1, r3, #31
 800e30e:	d40f      	bmi.n	800e330 <_dtoa_r+0x6f8>
 800e310:	4620      	mov	r0, r4
 800e312:	4659      	mov	r1, fp
 800e314:	f000 fe6a 	bl	800efec <_Bfree>
 800e318:	2300      	movs	r3, #0
 800e31a:	702b      	strb	r3, [r5, #0]
 800e31c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e31e:	f10a 0001 	add.w	r0, sl, #1
 800e322:	6018      	str	r0, [r3, #0]
 800e324:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e326:	2b00      	cmp	r3, #0
 800e328:	f43f acd8 	beq.w	800dcdc <_dtoa_r+0xa4>
 800e32c:	601d      	str	r5, [r3, #0]
 800e32e:	e4d5      	b.n	800dcdc <_dtoa_r+0xa4>
 800e330:	f8cd a01c 	str.w	sl, [sp, #28]
 800e334:	462b      	mov	r3, r5
 800e336:	461d      	mov	r5, r3
 800e338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e33c:	2a39      	cmp	r2, #57	; 0x39
 800e33e:	d108      	bne.n	800e352 <_dtoa_r+0x71a>
 800e340:	9a00      	ldr	r2, [sp, #0]
 800e342:	429a      	cmp	r2, r3
 800e344:	d1f7      	bne.n	800e336 <_dtoa_r+0x6fe>
 800e346:	9a07      	ldr	r2, [sp, #28]
 800e348:	9900      	ldr	r1, [sp, #0]
 800e34a:	3201      	adds	r2, #1
 800e34c:	9207      	str	r2, [sp, #28]
 800e34e:	2230      	movs	r2, #48	; 0x30
 800e350:	700a      	strb	r2, [r1, #0]
 800e352:	781a      	ldrb	r2, [r3, #0]
 800e354:	3201      	adds	r2, #1
 800e356:	701a      	strb	r2, [r3, #0]
 800e358:	e78c      	b.n	800e274 <_dtoa_r+0x63c>
 800e35a:	4b7f      	ldr	r3, [pc, #508]	; (800e558 <_dtoa_r+0x920>)
 800e35c:	2200      	movs	r2, #0
 800e35e:	f7f2 f963 	bl	8000628 <__aeabi_dmul>
 800e362:	2200      	movs	r2, #0
 800e364:	2300      	movs	r3, #0
 800e366:	4606      	mov	r6, r0
 800e368:	460f      	mov	r7, r1
 800e36a:	f7f2 fbc5 	bl	8000af8 <__aeabi_dcmpeq>
 800e36e:	2800      	cmp	r0, #0
 800e370:	d09b      	beq.n	800e2aa <_dtoa_r+0x672>
 800e372:	e7cd      	b.n	800e310 <_dtoa_r+0x6d8>
 800e374:	9a08      	ldr	r2, [sp, #32]
 800e376:	2a00      	cmp	r2, #0
 800e378:	f000 80c4 	beq.w	800e504 <_dtoa_r+0x8cc>
 800e37c:	9a05      	ldr	r2, [sp, #20]
 800e37e:	2a01      	cmp	r2, #1
 800e380:	f300 80a8 	bgt.w	800e4d4 <_dtoa_r+0x89c>
 800e384:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e386:	2a00      	cmp	r2, #0
 800e388:	f000 80a0 	beq.w	800e4cc <_dtoa_r+0x894>
 800e38c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e390:	9e06      	ldr	r6, [sp, #24]
 800e392:	4645      	mov	r5, r8
 800e394:	9a04      	ldr	r2, [sp, #16]
 800e396:	2101      	movs	r1, #1
 800e398:	441a      	add	r2, r3
 800e39a:	4620      	mov	r0, r4
 800e39c:	4498      	add	r8, r3
 800e39e:	9204      	str	r2, [sp, #16]
 800e3a0:	f000 ff2a 	bl	800f1f8 <__i2b>
 800e3a4:	4607      	mov	r7, r0
 800e3a6:	2d00      	cmp	r5, #0
 800e3a8:	dd0b      	ble.n	800e3c2 <_dtoa_r+0x78a>
 800e3aa:	9b04      	ldr	r3, [sp, #16]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	dd08      	ble.n	800e3c2 <_dtoa_r+0x78a>
 800e3b0:	42ab      	cmp	r3, r5
 800e3b2:	9a04      	ldr	r2, [sp, #16]
 800e3b4:	bfa8      	it	ge
 800e3b6:	462b      	movge	r3, r5
 800e3b8:	eba8 0803 	sub.w	r8, r8, r3
 800e3bc:	1aed      	subs	r5, r5, r3
 800e3be:	1ad3      	subs	r3, r2, r3
 800e3c0:	9304      	str	r3, [sp, #16]
 800e3c2:	9b06      	ldr	r3, [sp, #24]
 800e3c4:	b1fb      	cbz	r3, 800e406 <_dtoa_r+0x7ce>
 800e3c6:	9b08      	ldr	r3, [sp, #32]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f000 809f 	beq.w	800e50c <_dtoa_r+0x8d4>
 800e3ce:	2e00      	cmp	r6, #0
 800e3d0:	dd11      	ble.n	800e3f6 <_dtoa_r+0x7be>
 800e3d2:	4639      	mov	r1, r7
 800e3d4:	4632      	mov	r2, r6
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f000 ffca 	bl	800f370 <__pow5mult>
 800e3dc:	465a      	mov	r2, fp
 800e3de:	4601      	mov	r1, r0
 800e3e0:	4607      	mov	r7, r0
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	f000 ff1e 	bl	800f224 <__multiply>
 800e3e8:	4659      	mov	r1, fp
 800e3ea:	9007      	str	r0, [sp, #28]
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	f000 fdfd 	bl	800efec <_Bfree>
 800e3f2:	9b07      	ldr	r3, [sp, #28]
 800e3f4:	469b      	mov	fp, r3
 800e3f6:	9b06      	ldr	r3, [sp, #24]
 800e3f8:	1b9a      	subs	r2, r3, r6
 800e3fa:	d004      	beq.n	800e406 <_dtoa_r+0x7ce>
 800e3fc:	4659      	mov	r1, fp
 800e3fe:	4620      	mov	r0, r4
 800e400:	f000 ffb6 	bl	800f370 <__pow5mult>
 800e404:	4683      	mov	fp, r0
 800e406:	2101      	movs	r1, #1
 800e408:	4620      	mov	r0, r4
 800e40a:	f000 fef5 	bl	800f1f8 <__i2b>
 800e40e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e410:	2b00      	cmp	r3, #0
 800e412:	4606      	mov	r6, r0
 800e414:	dd7c      	ble.n	800e510 <_dtoa_r+0x8d8>
 800e416:	461a      	mov	r2, r3
 800e418:	4601      	mov	r1, r0
 800e41a:	4620      	mov	r0, r4
 800e41c:	f000 ffa8 	bl	800f370 <__pow5mult>
 800e420:	9b05      	ldr	r3, [sp, #20]
 800e422:	2b01      	cmp	r3, #1
 800e424:	4606      	mov	r6, r0
 800e426:	dd76      	ble.n	800e516 <_dtoa_r+0x8de>
 800e428:	2300      	movs	r3, #0
 800e42a:	9306      	str	r3, [sp, #24]
 800e42c:	6933      	ldr	r3, [r6, #16]
 800e42e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e432:	6918      	ldr	r0, [r3, #16]
 800e434:	f000 fe90 	bl	800f158 <__hi0bits>
 800e438:	f1c0 0020 	rsb	r0, r0, #32
 800e43c:	9b04      	ldr	r3, [sp, #16]
 800e43e:	4418      	add	r0, r3
 800e440:	f010 001f 	ands.w	r0, r0, #31
 800e444:	f000 8086 	beq.w	800e554 <_dtoa_r+0x91c>
 800e448:	f1c0 0320 	rsb	r3, r0, #32
 800e44c:	2b04      	cmp	r3, #4
 800e44e:	dd7f      	ble.n	800e550 <_dtoa_r+0x918>
 800e450:	f1c0 001c 	rsb	r0, r0, #28
 800e454:	9b04      	ldr	r3, [sp, #16]
 800e456:	4403      	add	r3, r0
 800e458:	4480      	add	r8, r0
 800e45a:	4405      	add	r5, r0
 800e45c:	9304      	str	r3, [sp, #16]
 800e45e:	f1b8 0f00 	cmp.w	r8, #0
 800e462:	dd05      	ble.n	800e470 <_dtoa_r+0x838>
 800e464:	4659      	mov	r1, fp
 800e466:	4642      	mov	r2, r8
 800e468:	4620      	mov	r0, r4
 800e46a:	f000 ffdb 	bl	800f424 <__lshift>
 800e46e:	4683      	mov	fp, r0
 800e470:	9b04      	ldr	r3, [sp, #16]
 800e472:	2b00      	cmp	r3, #0
 800e474:	dd05      	ble.n	800e482 <_dtoa_r+0x84a>
 800e476:	4631      	mov	r1, r6
 800e478:	461a      	mov	r2, r3
 800e47a:	4620      	mov	r0, r4
 800e47c:	f000 ffd2 	bl	800f424 <__lshift>
 800e480:	4606      	mov	r6, r0
 800e482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e484:	2b00      	cmp	r3, #0
 800e486:	d069      	beq.n	800e55c <_dtoa_r+0x924>
 800e488:	4631      	mov	r1, r6
 800e48a:	4658      	mov	r0, fp
 800e48c:	f001 f836 	bl	800f4fc <__mcmp>
 800e490:	2800      	cmp	r0, #0
 800e492:	da63      	bge.n	800e55c <_dtoa_r+0x924>
 800e494:	2300      	movs	r3, #0
 800e496:	4659      	mov	r1, fp
 800e498:	220a      	movs	r2, #10
 800e49a:	4620      	mov	r0, r4
 800e49c:	f000 fdc8 	bl	800f030 <__multadd>
 800e4a0:	9b08      	ldr	r3, [sp, #32]
 800e4a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e4a6:	4683      	mov	fp, r0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f000 818f 	beq.w	800e7cc <_dtoa_r+0xb94>
 800e4ae:	4639      	mov	r1, r7
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	220a      	movs	r2, #10
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	f000 fdbb 	bl	800f030 <__multadd>
 800e4ba:	f1b9 0f00 	cmp.w	r9, #0
 800e4be:	4607      	mov	r7, r0
 800e4c0:	f300 808e 	bgt.w	800e5e0 <_dtoa_r+0x9a8>
 800e4c4:	9b05      	ldr	r3, [sp, #20]
 800e4c6:	2b02      	cmp	r3, #2
 800e4c8:	dc50      	bgt.n	800e56c <_dtoa_r+0x934>
 800e4ca:	e089      	b.n	800e5e0 <_dtoa_r+0x9a8>
 800e4cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e4ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e4d2:	e75d      	b.n	800e390 <_dtoa_r+0x758>
 800e4d4:	9b01      	ldr	r3, [sp, #4]
 800e4d6:	1e5e      	subs	r6, r3, #1
 800e4d8:	9b06      	ldr	r3, [sp, #24]
 800e4da:	42b3      	cmp	r3, r6
 800e4dc:	bfbf      	itttt	lt
 800e4de:	9b06      	ldrlt	r3, [sp, #24]
 800e4e0:	9606      	strlt	r6, [sp, #24]
 800e4e2:	1af2      	sublt	r2, r6, r3
 800e4e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e4e6:	bfb6      	itet	lt
 800e4e8:	189b      	addlt	r3, r3, r2
 800e4ea:	1b9e      	subge	r6, r3, r6
 800e4ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e4ee:	9b01      	ldr	r3, [sp, #4]
 800e4f0:	bfb8      	it	lt
 800e4f2:	2600      	movlt	r6, #0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	bfb5      	itete	lt
 800e4f8:	eba8 0503 	sublt.w	r5, r8, r3
 800e4fc:	9b01      	ldrge	r3, [sp, #4]
 800e4fe:	2300      	movlt	r3, #0
 800e500:	4645      	movge	r5, r8
 800e502:	e747      	b.n	800e394 <_dtoa_r+0x75c>
 800e504:	9e06      	ldr	r6, [sp, #24]
 800e506:	9f08      	ldr	r7, [sp, #32]
 800e508:	4645      	mov	r5, r8
 800e50a:	e74c      	b.n	800e3a6 <_dtoa_r+0x76e>
 800e50c:	9a06      	ldr	r2, [sp, #24]
 800e50e:	e775      	b.n	800e3fc <_dtoa_r+0x7c4>
 800e510:	9b05      	ldr	r3, [sp, #20]
 800e512:	2b01      	cmp	r3, #1
 800e514:	dc18      	bgt.n	800e548 <_dtoa_r+0x910>
 800e516:	9b02      	ldr	r3, [sp, #8]
 800e518:	b9b3      	cbnz	r3, 800e548 <_dtoa_r+0x910>
 800e51a:	9b03      	ldr	r3, [sp, #12]
 800e51c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e520:	b9a3      	cbnz	r3, 800e54c <_dtoa_r+0x914>
 800e522:	9b03      	ldr	r3, [sp, #12]
 800e524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e528:	0d1b      	lsrs	r3, r3, #20
 800e52a:	051b      	lsls	r3, r3, #20
 800e52c:	b12b      	cbz	r3, 800e53a <_dtoa_r+0x902>
 800e52e:	9b04      	ldr	r3, [sp, #16]
 800e530:	3301      	adds	r3, #1
 800e532:	9304      	str	r3, [sp, #16]
 800e534:	f108 0801 	add.w	r8, r8, #1
 800e538:	2301      	movs	r3, #1
 800e53a:	9306      	str	r3, [sp, #24]
 800e53c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e53e:	2b00      	cmp	r3, #0
 800e540:	f47f af74 	bne.w	800e42c <_dtoa_r+0x7f4>
 800e544:	2001      	movs	r0, #1
 800e546:	e779      	b.n	800e43c <_dtoa_r+0x804>
 800e548:	2300      	movs	r3, #0
 800e54a:	e7f6      	b.n	800e53a <_dtoa_r+0x902>
 800e54c:	9b02      	ldr	r3, [sp, #8]
 800e54e:	e7f4      	b.n	800e53a <_dtoa_r+0x902>
 800e550:	d085      	beq.n	800e45e <_dtoa_r+0x826>
 800e552:	4618      	mov	r0, r3
 800e554:	301c      	adds	r0, #28
 800e556:	e77d      	b.n	800e454 <_dtoa_r+0x81c>
 800e558:	40240000 	.word	0x40240000
 800e55c:	9b01      	ldr	r3, [sp, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	dc38      	bgt.n	800e5d4 <_dtoa_r+0x99c>
 800e562:	9b05      	ldr	r3, [sp, #20]
 800e564:	2b02      	cmp	r3, #2
 800e566:	dd35      	ble.n	800e5d4 <_dtoa_r+0x99c>
 800e568:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e56c:	f1b9 0f00 	cmp.w	r9, #0
 800e570:	d10d      	bne.n	800e58e <_dtoa_r+0x956>
 800e572:	4631      	mov	r1, r6
 800e574:	464b      	mov	r3, r9
 800e576:	2205      	movs	r2, #5
 800e578:	4620      	mov	r0, r4
 800e57a:	f000 fd59 	bl	800f030 <__multadd>
 800e57e:	4601      	mov	r1, r0
 800e580:	4606      	mov	r6, r0
 800e582:	4658      	mov	r0, fp
 800e584:	f000 ffba 	bl	800f4fc <__mcmp>
 800e588:	2800      	cmp	r0, #0
 800e58a:	f73f adbd 	bgt.w	800e108 <_dtoa_r+0x4d0>
 800e58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e590:	9d00      	ldr	r5, [sp, #0]
 800e592:	ea6f 0a03 	mvn.w	sl, r3
 800e596:	f04f 0800 	mov.w	r8, #0
 800e59a:	4631      	mov	r1, r6
 800e59c:	4620      	mov	r0, r4
 800e59e:	f000 fd25 	bl	800efec <_Bfree>
 800e5a2:	2f00      	cmp	r7, #0
 800e5a4:	f43f aeb4 	beq.w	800e310 <_dtoa_r+0x6d8>
 800e5a8:	f1b8 0f00 	cmp.w	r8, #0
 800e5ac:	d005      	beq.n	800e5ba <_dtoa_r+0x982>
 800e5ae:	45b8      	cmp	r8, r7
 800e5b0:	d003      	beq.n	800e5ba <_dtoa_r+0x982>
 800e5b2:	4641      	mov	r1, r8
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	f000 fd19 	bl	800efec <_Bfree>
 800e5ba:	4639      	mov	r1, r7
 800e5bc:	4620      	mov	r0, r4
 800e5be:	f000 fd15 	bl	800efec <_Bfree>
 800e5c2:	e6a5      	b.n	800e310 <_dtoa_r+0x6d8>
 800e5c4:	2600      	movs	r6, #0
 800e5c6:	4637      	mov	r7, r6
 800e5c8:	e7e1      	b.n	800e58e <_dtoa_r+0x956>
 800e5ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e5cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e5d0:	4637      	mov	r7, r6
 800e5d2:	e599      	b.n	800e108 <_dtoa_r+0x4d0>
 800e5d4:	9b08      	ldr	r3, [sp, #32]
 800e5d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	f000 80fd 	beq.w	800e7da <_dtoa_r+0xba2>
 800e5e0:	2d00      	cmp	r5, #0
 800e5e2:	dd05      	ble.n	800e5f0 <_dtoa_r+0x9b8>
 800e5e4:	4639      	mov	r1, r7
 800e5e6:	462a      	mov	r2, r5
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f000 ff1b 	bl	800f424 <__lshift>
 800e5ee:	4607      	mov	r7, r0
 800e5f0:	9b06      	ldr	r3, [sp, #24]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d05c      	beq.n	800e6b0 <_dtoa_r+0xa78>
 800e5f6:	6879      	ldr	r1, [r7, #4]
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	f000 fcb7 	bl	800ef6c <_Balloc>
 800e5fe:	4605      	mov	r5, r0
 800e600:	b928      	cbnz	r0, 800e60e <_dtoa_r+0x9d6>
 800e602:	4b80      	ldr	r3, [pc, #512]	; (800e804 <_dtoa_r+0xbcc>)
 800e604:	4602      	mov	r2, r0
 800e606:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e60a:	f7ff bb2e 	b.w	800dc6a <_dtoa_r+0x32>
 800e60e:	693a      	ldr	r2, [r7, #16]
 800e610:	3202      	adds	r2, #2
 800e612:	0092      	lsls	r2, r2, #2
 800e614:	f107 010c 	add.w	r1, r7, #12
 800e618:	300c      	adds	r0, #12
 800e61a:	f000 fc99 	bl	800ef50 <memcpy>
 800e61e:	2201      	movs	r2, #1
 800e620:	4629      	mov	r1, r5
 800e622:	4620      	mov	r0, r4
 800e624:	f000 fefe 	bl	800f424 <__lshift>
 800e628:	9b00      	ldr	r3, [sp, #0]
 800e62a:	3301      	adds	r3, #1
 800e62c:	9301      	str	r3, [sp, #4]
 800e62e:	9b00      	ldr	r3, [sp, #0]
 800e630:	444b      	add	r3, r9
 800e632:	9307      	str	r3, [sp, #28]
 800e634:	9b02      	ldr	r3, [sp, #8]
 800e636:	f003 0301 	and.w	r3, r3, #1
 800e63a:	46b8      	mov	r8, r7
 800e63c:	9306      	str	r3, [sp, #24]
 800e63e:	4607      	mov	r7, r0
 800e640:	9b01      	ldr	r3, [sp, #4]
 800e642:	4631      	mov	r1, r6
 800e644:	3b01      	subs	r3, #1
 800e646:	4658      	mov	r0, fp
 800e648:	9302      	str	r3, [sp, #8]
 800e64a:	f7ff fa67 	bl	800db1c <quorem>
 800e64e:	4603      	mov	r3, r0
 800e650:	3330      	adds	r3, #48	; 0x30
 800e652:	9004      	str	r0, [sp, #16]
 800e654:	4641      	mov	r1, r8
 800e656:	4658      	mov	r0, fp
 800e658:	9308      	str	r3, [sp, #32]
 800e65a:	f000 ff4f 	bl	800f4fc <__mcmp>
 800e65e:	463a      	mov	r2, r7
 800e660:	4681      	mov	r9, r0
 800e662:	4631      	mov	r1, r6
 800e664:	4620      	mov	r0, r4
 800e666:	f000 ff65 	bl	800f534 <__mdiff>
 800e66a:	68c2      	ldr	r2, [r0, #12]
 800e66c:	9b08      	ldr	r3, [sp, #32]
 800e66e:	4605      	mov	r5, r0
 800e670:	bb02      	cbnz	r2, 800e6b4 <_dtoa_r+0xa7c>
 800e672:	4601      	mov	r1, r0
 800e674:	4658      	mov	r0, fp
 800e676:	f000 ff41 	bl	800f4fc <__mcmp>
 800e67a:	9b08      	ldr	r3, [sp, #32]
 800e67c:	4602      	mov	r2, r0
 800e67e:	4629      	mov	r1, r5
 800e680:	4620      	mov	r0, r4
 800e682:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e686:	f000 fcb1 	bl	800efec <_Bfree>
 800e68a:	9b05      	ldr	r3, [sp, #20]
 800e68c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e68e:	9d01      	ldr	r5, [sp, #4]
 800e690:	ea43 0102 	orr.w	r1, r3, r2
 800e694:	9b06      	ldr	r3, [sp, #24]
 800e696:	430b      	orrs	r3, r1
 800e698:	9b08      	ldr	r3, [sp, #32]
 800e69a:	d10d      	bne.n	800e6b8 <_dtoa_r+0xa80>
 800e69c:	2b39      	cmp	r3, #57	; 0x39
 800e69e:	d029      	beq.n	800e6f4 <_dtoa_r+0xabc>
 800e6a0:	f1b9 0f00 	cmp.w	r9, #0
 800e6a4:	dd01      	ble.n	800e6aa <_dtoa_r+0xa72>
 800e6a6:	9b04      	ldr	r3, [sp, #16]
 800e6a8:	3331      	adds	r3, #49	; 0x31
 800e6aa:	9a02      	ldr	r2, [sp, #8]
 800e6ac:	7013      	strb	r3, [r2, #0]
 800e6ae:	e774      	b.n	800e59a <_dtoa_r+0x962>
 800e6b0:	4638      	mov	r0, r7
 800e6b2:	e7b9      	b.n	800e628 <_dtoa_r+0x9f0>
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	e7e2      	b.n	800e67e <_dtoa_r+0xa46>
 800e6b8:	f1b9 0f00 	cmp.w	r9, #0
 800e6bc:	db06      	blt.n	800e6cc <_dtoa_r+0xa94>
 800e6be:	9905      	ldr	r1, [sp, #20]
 800e6c0:	ea41 0909 	orr.w	r9, r1, r9
 800e6c4:	9906      	ldr	r1, [sp, #24]
 800e6c6:	ea59 0101 	orrs.w	r1, r9, r1
 800e6ca:	d120      	bne.n	800e70e <_dtoa_r+0xad6>
 800e6cc:	2a00      	cmp	r2, #0
 800e6ce:	ddec      	ble.n	800e6aa <_dtoa_r+0xa72>
 800e6d0:	4659      	mov	r1, fp
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	9301      	str	r3, [sp, #4]
 800e6d8:	f000 fea4 	bl	800f424 <__lshift>
 800e6dc:	4631      	mov	r1, r6
 800e6de:	4683      	mov	fp, r0
 800e6e0:	f000 ff0c 	bl	800f4fc <__mcmp>
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	9b01      	ldr	r3, [sp, #4]
 800e6e8:	dc02      	bgt.n	800e6f0 <_dtoa_r+0xab8>
 800e6ea:	d1de      	bne.n	800e6aa <_dtoa_r+0xa72>
 800e6ec:	07da      	lsls	r2, r3, #31
 800e6ee:	d5dc      	bpl.n	800e6aa <_dtoa_r+0xa72>
 800e6f0:	2b39      	cmp	r3, #57	; 0x39
 800e6f2:	d1d8      	bne.n	800e6a6 <_dtoa_r+0xa6e>
 800e6f4:	9a02      	ldr	r2, [sp, #8]
 800e6f6:	2339      	movs	r3, #57	; 0x39
 800e6f8:	7013      	strb	r3, [r2, #0]
 800e6fa:	462b      	mov	r3, r5
 800e6fc:	461d      	mov	r5, r3
 800e6fe:	3b01      	subs	r3, #1
 800e700:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e704:	2a39      	cmp	r2, #57	; 0x39
 800e706:	d050      	beq.n	800e7aa <_dtoa_r+0xb72>
 800e708:	3201      	adds	r2, #1
 800e70a:	701a      	strb	r2, [r3, #0]
 800e70c:	e745      	b.n	800e59a <_dtoa_r+0x962>
 800e70e:	2a00      	cmp	r2, #0
 800e710:	dd03      	ble.n	800e71a <_dtoa_r+0xae2>
 800e712:	2b39      	cmp	r3, #57	; 0x39
 800e714:	d0ee      	beq.n	800e6f4 <_dtoa_r+0xabc>
 800e716:	3301      	adds	r3, #1
 800e718:	e7c7      	b.n	800e6aa <_dtoa_r+0xa72>
 800e71a:	9a01      	ldr	r2, [sp, #4]
 800e71c:	9907      	ldr	r1, [sp, #28]
 800e71e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e722:	428a      	cmp	r2, r1
 800e724:	d02a      	beq.n	800e77c <_dtoa_r+0xb44>
 800e726:	4659      	mov	r1, fp
 800e728:	2300      	movs	r3, #0
 800e72a:	220a      	movs	r2, #10
 800e72c:	4620      	mov	r0, r4
 800e72e:	f000 fc7f 	bl	800f030 <__multadd>
 800e732:	45b8      	cmp	r8, r7
 800e734:	4683      	mov	fp, r0
 800e736:	f04f 0300 	mov.w	r3, #0
 800e73a:	f04f 020a 	mov.w	r2, #10
 800e73e:	4641      	mov	r1, r8
 800e740:	4620      	mov	r0, r4
 800e742:	d107      	bne.n	800e754 <_dtoa_r+0xb1c>
 800e744:	f000 fc74 	bl	800f030 <__multadd>
 800e748:	4680      	mov	r8, r0
 800e74a:	4607      	mov	r7, r0
 800e74c:	9b01      	ldr	r3, [sp, #4]
 800e74e:	3301      	adds	r3, #1
 800e750:	9301      	str	r3, [sp, #4]
 800e752:	e775      	b.n	800e640 <_dtoa_r+0xa08>
 800e754:	f000 fc6c 	bl	800f030 <__multadd>
 800e758:	4639      	mov	r1, r7
 800e75a:	4680      	mov	r8, r0
 800e75c:	2300      	movs	r3, #0
 800e75e:	220a      	movs	r2, #10
 800e760:	4620      	mov	r0, r4
 800e762:	f000 fc65 	bl	800f030 <__multadd>
 800e766:	4607      	mov	r7, r0
 800e768:	e7f0      	b.n	800e74c <_dtoa_r+0xb14>
 800e76a:	f1b9 0f00 	cmp.w	r9, #0
 800e76e:	9a00      	ldr	r2, [sp, #0]
 800e770:	bfcc      	ite	gt
 800e772:	464d      	movgt	r5, r9
 800e774:	2501      	movle	r5, #1
 800e776:	4415      	add	r5, r2
 800e778:	f04f 0800 	mov.w	r8, #0
 800e77c:	4659      	mov	r1, fp
 800e77e:	2201      	movs	r2, #1
 800e780:	4620      	mov	r0, r4
 800e782:	9301      	str	r3, [sp, #4]
 800e784:	f000 fe4e 	bl	800f424 <__lshift>
 800e788:	4631      	mov	r1, r6
 800e78a:	4683      	mov	fp, r0
 800e78c:	f000 feb6 	bl	800f4fc <__mcmp>
 800e790:	2800      	cmp	r0, #0
 800e792:	dcb2      	bgt.n	800e6fa <_dtoa_r+0xac2>
 800e794:	d102      	bne.n	800e79c <_dtoa_r+0xb64>
 800e796:	9b01      	ldr	r3, [sp, #4]
 800e798:	07db      	lsls	r3, r3, #31
 800e79a:	d4ae      	bmi.n	800e6fa <_dtoa_r+0xac2>
 800e79c:	462b      	mov	r3, r5
 800e79e:	461d      	mov	r5, r3
 800e7a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7a4:	2a30      	cmp	r2, #48	; 0x30
 800e7a6:	d0fa      	beq.n	800e79e <_dtoa_r+0xb66>
 800e7a8:	e6f7      	b.n	800e59a <_dtoa_r+0x962>
 800e7aa:	9a00      	ldr	r2, [sp, #0]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d1a5      	bne.n	800e6fc <_dtoa_r+0xac4>
 800e7b0:	f10a 0a01 	add.w	sl, sl, #1
 800e7b4:	2331      	movs	r3, #49	; 0x31
 800e7b6:	e779      	b.n	800e6ac <_dtoa_r+0xa74>
 800e7b8:	4b13      	ldr	r3, [pc, #76]	; (800e808 <_dtoa_r+0xbd0>)
 800e7ba:	f7ff baaf 	b.w	800dd1c <_dtoa_r+0xe4>
 800e7be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f47f aa86 	bne.w	800dcd2 <_dtoa_r+0x9a>
 800e7c6:	4b11      	ldr	r3, [pc, #68]	; (800e80c <_dtoa_r+0xbd4>)
 800e7c8:	f7ff baa8 	b.w	800dd1c <_dtoa_r+0xe4>
 800e7cc:	f1b9 0f00 	cmp.w	r9, #0
 800e7d0:	dc03      	bgt.n	800e7da <_dtoa_r+0xba2>
 800e7d2:	9b05      	ldr	r3, [sp, #20]
 800e7d4:	2b02      	cmp	r3, #2
 800e7d6:	f73f aec9 	bgt.w	800e56c <_dtoa_r+0x934>
 800e7da:	9d00      	ldr	r5, [sp, #0]
 800e7dc:	4631      	mov	r1, r6
 800e7de:	4658      	mov	r0, fp
 800e7e0:	f7ff f99c 	bl	800db1c <quorem>
 800e7e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e7e8:	f805 3b01 	strb.w	r3, [r5], #1
 800e7ec:	9a00      	ldr	r2, [sp, #0]
 800e7ee:	1aaa      	subs	r2, r5, r2
 800e7f0:	4591      	cmp	r9, r2
 800e7f2:	ddba      	ble.n	800e76a <_dtoa_r+0xb32>
 800e7f4:	4659      	mov	r1, fp
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	220a      	movs	r2, #10
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f000 fc18 	bl	800f030 <__multadd>
 800e800:	4683      	mov	fp, r0
 800e802:	e7eb      	b.n	800e7dc <_dtoa_r+0xba4>
 800e804:	080241c1 	.word	0x080241c1
 800e808:	08023f20 	.word	0x08023f20
 800e80c:	08024155 	.word	0x08024155

0800e810 <fiprintf>:
 800e810:	b40e      	push	{r1, r2, r3}
 800e812:	b503      	push	{r0, r1, lr}
 800e814:	4601      	mov	r1, r0
 800e816:	ab03      	add	r3, sp, #12
 800e818:	4805      	ldr	r0, [pc, #20]	; (800e830 <fiprintf+0x20>)
 800e81a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e81e:	6800      	ldr	r0, [r0, #0]
 800e820:	9301      	str	r3, [sp, #4]
 800e822:	f001 fa9d 	bl	800fd60 <_vfiprintf_r>
 800e826:	b002      	add	sp, #8
 800e828:	f85d eb04 	ldr.w	lr, [sp], #4
 800e82c:	b003      	add	sp, #12
 800e82e:	4770      	bx	lr
 800e830:	20000040 	.word	0x20000040

0800e834 <rshift>:
 800e834:	6903      	ldr	r3, [r0, #16]
 800e836:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e83a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e83e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e842:	f100 0414 	add.w	r4, r0, #20
 800e846:	dd45      	ble.n	800e8d4 <rshift+0xa0>
 800e848:	f011 011f 	ands.w	r1, r1, #31
 800e84c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e850:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e854:	d10c      	bne.n	800e870 <rshift+0x3c>
 800e856:	f100 0710 	add.w	r7, r0, #16
 800e85a:	4629      	mov	r1, r5
 800e85c:	42b1      	cmp	r1, r6
 800e85e:	d334      	bcc.n	800e8ca <rshift+0x96>
 800e860:	1a9b      	subs	r3, r3, r2
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	1eea      	subs	r2, r5, #3
 800e866:	4296      	cmp	r6, r2
 800e868:	bf38      	it	cc
 800e86a:	2300      	movcc	r3, #0
 800e86c:	4423      	add	r3, r4
 800e86e:	e015      	b.n	800e89c <rshift+0x68>
 800e870:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e874:	f1c1 0820 	rsb	r8, r1, #32
 800e878:	40cf      	lsrs	r7, r1
 800e87a:	f105 0e04 	add.w	lr, r5, #4
 800e87e:	46a1      	mov	r9, r4
 800e880:	4576      	cmp	r6, lr
 800e882:	46f4      	mov	ip, lr
 800e884:	d815      	bhi.n	800e8b2 <rshift+0x7e>
 800e886:	1a9b      	subs	r3, r3, r2
 800e888:	009a      	lsls	r2, r3, #2
 800e88a:	3a04      	subs	r2, #4
 800e88c:	3501      	adds	r5, #1
 800e88e:	42ae      	cmp	r6, r5
 800e890:	bf38      	it	cc
 800e892:	2200      	movcc	r2, #0
 800e894:	18a3      	adds	r3, r4, r2
 800e896:	50a7      	str	r7, [r4, r2]
 800e898:	b107      	cbz	r7, 800e89c <rshift+0x68>
 800e89a:	3304      	adds	r3, #4
 800e89c:	1b1a      	subs	r2, r3, r4
 800e89e:	42a3      	cmp	r3, r4
 800e8a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e8a4:	bf08      	it	eq
 800e8a6:	2300      	moveq	r3, #0
 800e8a8:	6102      	str	r2, [r0, #16]
 800e8aa:	bf08      	it	eq
 800e8ac:	6143      	streq	r3, [r0, #20]
 800e8ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8b2:	f8dc c000 	ldr.w	ip, [ip]
 800e8b6:	fa0c fc08 	lsl.w	ip, ip, r8
 800e8ba:	ea4c 0707 	orr.w	r7, ip, r7
 800e8be:	f849 7b04 	str.w	r7, [r9], #4
 800e8c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e8c6:	40cf      	lsrs	r7, r1
 800e8c8:	e7da      	b.n	800e880 <rshift+0x4c>
 800e8ca:	f851 cb04 	ldr.w	ip, [r1], #4
 800e8ce:	f847 cf04 	str.w	ip, [r7, #4]!
 800e8d2:	e7c3      	b.n	800e85c <rshift+0x28>
 800e8d4:	4623      	mov	r3, r4
 800e8d6:	e7e1      	b.n	800e89c <rshift+0x68>

0800e8d8 <__hexdig_fun>:
 800e8d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e8dc:	2b09      	cmp	r3, #9
 800e8de:	d802      	bhi.n	800e8e6 <__hexdig_fun+0xe>
 800e8e0:	3820      	subs	r0, #32
 800e8e2:	b2c0      	uxtb	r0, r0
 800e8e4:	4770      	bx	lr
 800e8e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e8ea:	2b05      	cmp	r3, #5
 800e8ec:	d801      	bhi.n	800e8f2 <__hexdig_fun+0x1a>
 800e8ee:	3847      	subs	r0, #71	; 0x47
 800e8f0:	e7f7      	b.n	800e8e2 <__hexdig_fun+0xa>
 800e8f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e8f6:	2b05      	cmp	r3, #5
 800e8f8:	d801      	bhi.n	800e8fe <__hexdig_fun+0x26>
 800e8fa:	3827      	subs	r0, #39	; 0x27
 800e8fc:	e7f1      	b.n	800e8e2 <__hexdig_fun+0xa>
 800e8fe:	2000      	movs	r0, #0
 800e900:	4770      	bx	lr
	...

0800e904 <__gethex>:
 800e904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e908:	ed2d 8b02 	vpush	{d8}
 800e90c:	b089      	sub	sp, #36	; 0x24
 800e90e:	ee08 0a10 	vmov	s16, r0
 800e912:	9304      	str	r3, [sp, #16]
 800e914:	4bbc      	ldr	r3, [pc, #752]	; (800ec08 <__gethex+0x304>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	9301      	str	r3, [sp, #4]
 800e91a:	4618      	mov	r0, r3
 800e91c:	468b      	mov	fp, r1
 800e91e:	4690      	mov	r8, r2
 800e920:	f7f1 fc68 	bl	80001f4 <strlen>
 800e924:	9b01      	ldr	r3, [sp, #4]
 800e926:	f8db 2000 	ldr.w	r2, [fp]
 800e92a:	4403      	add	r3, r0
 800e92c:	4682      	mov	sl, r0
 800e92e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e932:	9305      	str	r3, [sp, #20]
 800e934:	1c93      	adds	r3, r2, #2
 800e936:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e93a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e93e:	32fe      	adds	r2, #254	; 0xfe
 800e940:	18d1      	adds	r1, r2, r3
 800e942:	461f      	mov	r7, r3
 800e944:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e948:	9100      	str	r1, [sp, #0]
 800e94a:	2830      	cmp	r0, #48	; 0x30
 800e94c:	d0f8      	beq.n	800e940 <__gethex+0x3c>
 800e94e:	f7ff ffc3 	bl	800e8d8 <__hexdig_fun>
 800e952:	4604      	mov	r4, r0
 800e954:	2800      	cmp	r0, #0
 800e956:	d13a      	bne.n	800e9ce <__gethex+0xca>
 800e958:	9901      	ldr	r1, [sp, #4]
 800e95a:	4652      	mov	r2, sl
 800e95c:	4638      	mov	r0, r7
 800e95e:	f001 fb47 	bl	800fff0 <strncmp>
 800e962:	4605      	mov	r5, r0
 800e964:	2800      	cmp	r0, #0
 800e966:	d168      	bne.n	800ea3a <__gethex+0x136>
 800e968:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e96c:	eb07 060a 	add.w	r6, r7, sl
 800e970:	f7ff ffb2 	bl	800e8d8 <__hexdig_fun>
 800e974:	2800      	cmp	r0, #0
 800e976:	d062      	beq.n	800ea3e <__gethex+0x13a>
 800e978:	4633      	mov	r3, r6
 800e97a:	7818      	ldrb	r0, [r3, #0]
 800e97c:	2830      	cmp	r0, #48	; 0x30
 800e97e:	461f      	mov	r7, r3
 800e980:	f103 0301 	add.w	r3, r3, #1
 800e984:	d0f9      	beq.n	800e97a <__gethex+0x76>
 800e986:	f7ff ffa7 	bl	800e8d8 <__hexdig_fun>
 800e98a:	2301      	movs	r3, #1
 800e98c:	fab0 f480 	clz	r4, r0
 800e990:	0964      	lsrs	r4, r4, #5
 800e992:	4635      	mov	r5, r6
 800e994:	9300      	str	r3, [sp, #0]
 800e996:	463a      	mov	r2, r7
 800e998:	4616      	mov	r6, r2
 800e99a:	3201      	adds	r2, #1
 800e99c:	7830      	ldrb	r0, [r6, #0]
 800e99e:	f7ff ff9b 	bl	800e8d8 <__hexdig_fun>
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	d1f8      	bne.n	800e998 <__gethex+0x94>
 800e9a6:	9901      	ldr	r1, [sp, #4]
 800e9a8:	4652      	mov	r2, sl
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	f001 fb20 	bl	800fff0 <strncmp>
 800e9b0:	b980      	cbnz	r0, 800e9d4 <__gethex+0xd0>
 800e9b2:	b94d      	cbnz	r5, 800e9c8 <__gethex+0xc4>
 800e9b4:	eb06 050a 	add.w	r5, r6, sl
 800e9b8:	462a      	mov	r2, r5
 800e9ba:	4616      	mov	r6, r2
 800e9bc:	3201      	adds	r2, #1
 800e9be:	7830      	ldrb	r0, [r6, #0]
 800e9c0:	f7ff ff8a 	bl	800e8d8 <__hexdig_fun>
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	d1f8      	bne.n	800e9ba <__gethex+0xb6>
 800e9c8:	1bad      	subs	r5, r5, r6
 800e9ca:	00ad      	lsls	r5, r5, #2
 800e9cc:	e004      	b.n	800e9d8 <__gethex+0xd4>
 800e9ce:	2400      	movs	r4, #0
 800e9d0:	4625      	mov	r5, r4
 800e9d2:	e7e0      	b.n	800e996 <__gethex+0x92>
 800e9d4:	2d00      	cmp	r5, #0
 800e9d6:	d1f7      	bne.n	800e9c8 <__gethex+0xc4>
 800e9d8:	7833      	ldrb	r3, [r6, #0]
 800e9da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e9de:	2b50      	cmp	r3, #80	; 0x50
 800e9e0:	d13b      	bne.n	800ea5a <__gethex+0x156>
 800e9e2:	7873      	ldrb	r3, [r6, #1]
 800e9e4:	2b2b      	cmp	r3, #43	; 0x2b
 800e9e6:	d02c      	beq.n	800ea42 <__gethex+0x13e>
 800e9e8:	2b2d      	cmp	r3, #45	; 0x2d
 800e9ea:	d02e      	beq.n	800ea4a <__gethex+0x146>
 800e9ec:	1c71      	adds	r1, r6, #1
 800e9ee:	f04f 0900 	mov.w	r9, #0
 800e9f2:	7808      	ldrb	r0, [r1, #0]
 800e9f4:	f7ff ff70 	bl	800e8d8 <__hexdig_fun>
 800e9f8:	1e43      	subs	r3, r0, #1
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	2b18      	cmp	r3, #24
 800e9fe:	d82c      	bhi.n	800ea5a <__gethex+0x156>
 800ea00:	f1a0 0210 	sub.w	r2, r0, #16
 800ea04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ea08:	f7ff ff66 	bl	800e8d8 <__hexdig_fun>
 800ea0c:	1e43      	subs	r3, r0, #1
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	2b18      	cmp	r3, #24
 800ea12:	d91d      	bls.n	800ea50 <__gethex+0x14c>
 800ea14:	f1b9 0f00 	cmp.w	r9, #0
 800ea18:	d000      	beq.n	800ea1c <__gethex+0x118>
 800ea1a:	4252      	negs	r2, r2
 800ea1c:	4415      	add	r5, r2
 800ea1e:	f8cb 1000 	str.w	r1, [fp]
 800ea22:	b1e4      	cbz	r4, 800ea5e <__gethex+0x15a>
 800ea24:	9b00      	ldr	r3, [sp, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	bf14      	ite	ne
 800ea2a:	2700      	movne	r7, #0
 800ea2c:	2706      	moveq	r7, #6
 800ea2e:	4638      	mov	r0, r7
 800ea30:	b009      	add	sp, #36	; 0x24
 800ea32:	ecbd 8b02 	vpop	{d8}
 800ea36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3a:	463e      	mov	r6, r7
 800ea3c:	4625      	mov	r5, r4
 800ea3e:	2401      	movs	r4, #1
 800ea40:	e7ca      	b.n	800e9d8 <__gethex+0xd4>
 800ea42:	f04f 0900 	mov.w	r9, #0
 800ea46:	1cb1      	adds	r1, r6, #2
 800ea48:	e7d3      	b.n	800e9f2 <__gethex+0xee>
 800ea4a:	f04f 0901 	mov.w	r9, #1
 800ea4e:	e7fa      	b.n	800ea46 <__gethex+0x142>
 800ea50:	230a      	movs	r3, #10
 800ea52:	fb03 0202 	mla	r2, r3, r2, r0
 800ea56:	3a10      	subs	r2, #16
 800ea58:	e7d4      	b.n	800ea04 <__gethex+0x100>
 800ea5a:	4631      	mov	r1, r6
 800ea5c:	e7df      	b.n	800ea1e <__gethex+0x11a>
 800ea5e:	1bf3      	subs	r3, r6, r7
 800ea60:	3b01      	subs	r3, #1
 800ea62:	4621      	mov	r1, r4
 800ea64:	2b07      	cmp	r3, #7
 800ea66:	dc0b      	bgt.n	800ea80 <__gethex+0x17c>
 800ea68:	ee18 0a10 	vmov	r0, s16
 800ea6c:	f000 fa7e 	bl	800ef6c <_Balloc>
 800ea70:	4604      	mov	r4, r0
 800ea72:	b940      	cbnz	r0, 800ea86 <__gethex+0x182>
 800ea74:	4b65      	ldr	r3, [pc, #404]	; (800ec0c <__gethex+0x308>)
 800ea76:	4602      	mov	r2, r0
 800ea78:	21de      	movs	r1, #222	; 0xde
 800ea7a:	4865      	ldr	r0, [pc, #404]	; (800ec10 <__gethex+0x30c>)
 800ea7c:	f7ff f830 	bl	800dae0 <__assert_func>
 800ea80:	3101      	adds	r1, #1
 800ea82:	105b      	asrs	r3, r3, #1
 800ea84:	e7ee      	b.n	800ea64 <__gethex+0x160>
 800ea86:	f100 0914 	add.w	r9, r0, #20
 800ea8a:	f04f 0b00 	mov.w	fp, #0
 800ea8e:	f1ca 0301 	rsb	r3, sl, #1
 800ea92:	f8cd 9008 	str.w	r9, [sp, #8]
 800ea96:	f8cd b000 	str.w	fp, [sp]
 800ea9a:	9306      	str	r3, [sp, #24]
 800ea9c:	42b7      	cmp	r7, r6
 800ea9e:	d340      	bcc.n	800eb22 <__gethex+0x21e>
 800eaa0:	9802      	ldr	r0, [sp, #8]
 800eaa2:	9b00      	ldr	r3, [sp, #0]
 800eaa4:	f840 3b04 	str.w	r3, [r0], #4
 800eaa8:	eba0 0009 	sub.w	r0, r0, r9
 800eaac:	1080      	asrs	r0, r0, #2
 800eaae:	0146      	lsls	r6, r0, #5
 800eab0:	6120      	str	r0, [r4, #16]
 800eab2:	4618      	mov	r0, r3
 800eab4:	f000 fb50 	bl	800f158 <__hi0bits>
 800eab8:	1a30      	subs	r0, r6, r0
 800eaba:	f8d8 6000 	ldr.w	r6, [r8]
 800eabe:	42b0      	cmp	r0, r6
 800eac0:	dd63      	ble.n	800eb8a <__gethex+0x286>
 800eac2:	1b87      	subs	r7, r0, r6
 800eac4:	4639      	mov	r1, r7
 800eac6:	4620      	mov	r0, r4
 800eac8:	f000 feea 	bl	800f8a0 <__any_on>
 800eacc:	4682      	mov	sl, r0
 800eace:	b1a8      	cbz	r0, 800eafc <__gethex+0x1f8>
 800ead0:	1e7b      	subs	r3, r7, #1
 800ead2:	1159      	asrs	r1, r3, #5
 800ead4:	f003 021f 	and.w	r2, r3, #31
 800ead8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800eadc:	f04f 0a01 	mov.w	sl, #1
 800eae0:	fa0a f202 	lsl.w	r2, sl, r2
 800eae4:	420a      	tst	r2, r1
 800eae6:	d009      	beq.n	800eafc <__gethex+0x1f8>
 800eae8:	4553      	cmp	r3, sl
 800eaea:	dd05      	ble.n	800eaf8 <__gethex+0x1f4>
 800eaec:	1eb9      	subs	r1, r7, #2
 800eaee:	4620      	mov	r0, r4
 800eaf0:	f000 fed6 	bl	800f8a0 <__any_on>
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	d145      	bne.n	800eb84 <__gethex+0x280>
 800eaf8:	f04f 0a02 	mov.w	sl, #2
 800eafc:	4639      	mov	r1, r7
 800eafe:	4620      	mov	r0, r4
 800eb00:	f7ff fe98 	bl	800e834 <rshift>
 800eb04:	443d      	add	r5, r7
 800eb06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb0a:	42ab      	cmp	r3, r5
 800eb0c:	da4c      	bge.n	800eba8 <__gethex+0x2a4>
 800eb0e:	ee18 0a10 	vmov	r0, s16
 800eb12:	4621      	mov	r1, r4
 800eb14:	f000 fa6a 	bl	800efec <_Bfree>
 800eb18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	6013      	str	r3, [r2, #0]
 800eb1e:	27a3      	movs	r7, #163	; 0xa3
 800eb20:	e785      	b.n	800ea2e <__gethex+0x12a>
 800eb22:	1e73      	subs	r3, r6, #1
 800eb24:	9a05      	ldr	r2, [sp, #20]
 800eb26:	9303      	str	r3, [sp, #12]
 800eb28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d019      	beq.n	800eb64 <__gethex+0x260>
 800eb30:	f1bb 0f20 	cmp.w	fp, #32
 800eb34:	d107      	bne.n	800eb46 <__gethex+0x242>
 800eb36:	9b02      	ldr	r3, [sp, #8]
 800eb38:	9a00      	ldr	r2, [sp, #0]
 800eb3a:	f843 2b04 	str.w	r2, [r3], #4
 800eb3e:	9302      	str	r3, [sp, #8]
 800eb40:	2300      	movs	r3, #0
 800eb42:	9300      	str	r3, [sp, #0]
 800eb44:	469b      	mov	fp, r3
 800eb46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800eb4a:	f7ff fec5 	bl	800e8d8 <__hexdig_fun>
 800eb4e:	9b00      	ldr	r3, [sp, #0]
 800eb50:	f000 000f 	and.w	r0, r0, #15
 800eb54:	fa00 f00b 	lsl.w	r0, r0, fp
 800eb58:	4303      	orrs	r3, r0
 800eb5a:	9300      	str	r3, [sp, #0]
 800eb5c:	f10b 0b04 	add.w	fp, fp, #4
 800eb60:	9b03      	ldr	r3, [sp, #12]
 800eb62:	e00d      	b.n	800eb80 <__gethex+0x27c>
 800eb64:	9b03      	ldr	r3, [sp, #12]
 800eb66:	9a06      	ldr	r2, [sp, #24]
 800eb68:	4413      	add	r3, r2
 800eb6a:	42bb      	cmp	r3, r7
 800eb6c:	d3e0      	bcc.n	800eb30 <__gethex+0x22c>
 800eb6e:	4618      	mov	r0, r3
 800eb70:	9901      	ldr	r1, [sp, #4]
 800eb72:	9307      	str	r3, [sp, #28]
 800eb74:	4652      	mov	r2, sl
 800eb76:	f001 fa3b 	bl	800fff0 <strncmp>
 800eb7a:	9b07      	ldr	r3, [sp, #28]
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	d1d7      	bne.n	800eb30 <__gethex+0x22c>
 800eb80:	461e      	mov	r6, r3
 800eb82:	e78b      	b.n	800ea9c <__gethex+0x198>
 800eb84:	f04f 0a03 	mov.w	sl, #3
 800eb88:	e7b8      	b.n	800eafc <__gethex+0x1f8>
 800eb8a:	da0a      	bge.n	800eba2 <__gethex+0x29e>
 800eb8c:	1a37      	subs	r7, r6, r0
 800eb8e:	4621      	mov	r1, r4
 800eb90:	ee18 0a10 	vmov	r0, s16
 800eb94:	463a      	mov	r2, r7
 800eb96:	f000 fc45 	bl	800f424 <__lshift>
 800eb9a:	1bed      	subs	r5, r5, r7
 800eb9c:	4604      	mov	r4, r0
 800eb9e:	f100 0914 	add.w	r9, r0, #20
 800eba2:	f04f 0a00 	mov.w	sl, #0
 800eba6:	e7ae      	b.n	800eb06 <__gethex+0x202>
 800eba8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ebac:	42a8      	cmp	r0, r5
 800ebae:	dd72      	ble.n	800ec96 <__gethex+0x392>
 800ebb0:	1b45      	subs	r5, r0, r5
 800ebb2:	42ae      	cmp	r6, r5
 800ebb4:	dc36      	bgt.n	800ec24 <__gethex+0x320>
 800ebb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ebba:	2b02      	cmp	r3, #2
 800ebbc:	d02a      	beq.n	800ec14 <__gethex+0x310>
 800ebbe:	2b03      	cmp	r3, #3
 800ebc0:	d02c      	beq.n	800ec1c <__gethex+0x318>
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d115      	bne.n	800ebf2 <__gethex+0x2ee>
 800ebc6:	42ae      	cmp	r6, r5
 800ebc8:	d113      	bne.n	800ebf2 <__gethex+0x2ee>
 800ebca:	2e01      	cmp	r6, #1
 800ebcc:	d10b      	bne.n	800ebe6 <__gethex+0x2e2>
 800ebce:	9a04      	ldr	r2, [sp, #16]
 800ebd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ebd4:	6013      	str	r3, [r2, #0]
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	6123      	str	r3, [r4, #16]
 800ebda:	f8c9 3000 	str.w	r3, [r9]
 800ebde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ebe0:	2762      	movs	r7, #98	; 0x62
 800ebe2:	601c      	str	r4, [r3, #0]
 800ebe4:	e723      	b.n	800ea2e <__gethex+0x12a>
 800ebe6:	1e71      	subs	r1, r6, #1
 800ebe8:	4620      	mov	r0, r4
 800ebea:	f000 fe59 	bl	800f8a0 <__any_on>
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	d1ed      	bne.n	800ebce <__gethex+0x2ca>
 800ebf2:	ee18 0a10 	vmov	r0, s16
 800ebf6:	4621      	mov	r1, r4
 800ebf8:	f000 f9f8 	bl	800efec <_Bfree>
 800ebfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ebfe:	2300      	movs	r3, #0
 800ec00:	6013      	str	r3, [r2, #0]
 800ec02:	2750      	movs	r7, #80	; 0x50
 800ec04:	e713      	b.n	800ea2e <__gethex+0x12a>
 800ec06:	bf00      	nop
 800ec08:	0802423c 	.word	0x0802423c
 800ec0c:	080241c1 	.word	0x080241c1
 800ec10:	080241d2 	.word	0x080241d2
 800ec14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d1eb      	bne.n	800ebf2 <__gethex+0x2ee>
 800ec1a:	e7d8      	b.n	800ebce <__gethex+0x2ca>
 800ec1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1d5      	bne.n	800ebce <__gethex+0x2ca>
 800ec22:	e7e6      	b.n	800ebf2 <__gethex+0x2ee>
 800ec24:	1e6f      	subs	r7, r5, #1
 800ec26:	f1ba 0f00 	cmp.w	sl, #0
 800ec2a:	d131      	bne.n	800ec90 <__gethex+0x38c>
 800ec2c:	b127      	cbz	r7, 800ec38 <__gethex+0x334>
 800ec2e:	4639      	mov	r1, r7
 800ec30:	4620      	mov	r0, r4
 800ec32:	f000 fe35 	bl	800f8a0 <__any_on>
 800ec36:	4682      	mov	sl, r0
 800ec38:	117b      	asrs	r3, r7, #5
 800ec3a:	2101      	movs	r1, #1
 800ec3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ec40:	f007 071f 	and.w	r7, r7, #31
 800ec44:	fa01 f707 	lsl.w	r7, r1, r7
 800ec48:	421f      	tst	r7, r3
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	bf18      	it	ne
 800ec50:	f04a 0a02 	orrne.w	sl, sl, #2
 800ec54:	1b76      	subs	r6, r6, r5
 800ec56:	f7ff fded 	bl	800e834 <rshift>
 800ec5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ec5e:	2702      	movs	r7, #2
 800ec60:	f1ba 0f00 	cmp.w	sl, #0
 800ec64:	d048      	beq.n	800ecf8 <__gethex+0x3f4>
 800ec66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec6a:	2b02      	cmp	r3, #2
 800ec6c:	d015      	beq.n	800ec9a <__gethex+0x396>
 800ec6e:	2b03      	cmp	r3, #3
 800ec70:	d017      	beq.n	800eca2 <__gethex+0x39e>
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d109      	bne.n	800ec8a <__gethex+0x386>
 800ec76:	f01a 0f02 	tst.w	sl, #2
 800ec7a:	d006      	beq.n	800ec8a <__gethex+0x386>
 800ec7c:	f8d9 0000 	ldr.w	r0, [r9]
 800ec80:	ea4a 0a00 	orr.w	sl, sl, r0
 800ec84:	f01a 0f01 	tst.w	sl, #1
 800ec88:	d10e      	bne.n	800eca8 <__gethex+0x3a4>
 800ec8a:	f047 0710 	orr.w	r7, r7, #16
 800ec8e:	e033      	b.n	800ecf8 <__gethex+0x3f4>
 800ec90:	f04f 0a01 	mov.w	sl, #1
 800ec94:	e7d0      	b.n	800ec38 <__gethex+0x334>
 800ec96:	2701      	movs	r7, #1
 800ec98:	e7e2      	b.n	800ec60 <__gethex+0x35c>
 800ec9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec9c:	f1c3 0301 	rsb	r3, r3, #1
 800eca0:	9315      	str	r3, [sp, #84]	; 0x54
 800eca2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d0f0      	beq.n	800ec8a <__gethex+0x386>
 800eca8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ecac:	f104 0314 	add.w	r3, r4, #20
 800ecb0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ecb4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ecb8:	f04f 0c00 	mov.w	ip, #0
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecc2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ecc6:	d01c      	beq.n	800ed02 <__gethex+0x3fe>
 800ecc8:	3201      	adds	r2, #1
 800ecca:	6002      	str	r2, [r0, #0]
 800eccc:	2f02      	cmp	r7, #2
 800ecce:	f104 0314 	add.w	r3, r4, #20
 800ecd2:	d13f      	bne.n	800ed54 <__gethex+0x450>
 800ecd4:	f8d8 2000 	ldr.w	r2, [r8]
 800ecd8:	3a01      	subs	r2, #1
 800ecda:	42b2      	cmp	r2, r6
 800ecdc:	d10a      	bne.n	800ecf4 <__gethex+0x3f0>
 800ecde:	1171      	asrs	r1, r6, #5
 800ece0:	2201      	movs	r2, #1
 800ece2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ece6:	f006 061f 	and.w	r6, r6, #31
 800ecea:	fa02 f606 	lsl.w	r6, r2, r6
 800ecee:	421e      	tst	r6, r3
 800ecf0:	bf18      	it	ne
 800ecf2:	4617      	movne	r7, r2
 800ecf4:	f047 0720 	orr.w	r7, r7, #32
 800ecf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ecfa:	601c      	str	r4, [r3, #0]
 800ecfc:	9b04      	ldr	r3, [sp, #16]
 800ecfe:	601d      	str	r5, [r3, #0]
 800ed00:	e695      	b.n	800ea2e <__gethex+0x12a>
 800ed02:	4299      	cmp	r1, r3
 800ed04:	f843 cc04 	str.w	ip, [r3, #-4]
 800ed08:	d8d8      	bhi.n	800ecbc <__gethex+0x3b8>
 800ed0a:	68a3      	ldr	r3, [r4, #8]
 800ed0c:	459b      	cmp	fp, r3
 800ed0e:	db19      	blt.n	800ed44 <__gethex+0x440>
 800ed10:	6861      	ldr	r1, [r4, #4]
 800ed12:	ee18 0a10 	vmov	r0, s16
 800ed16:	3101      	adds	r1, #1
 800ed18:	f000 f928 	bl	800ef6c <_Balloc>
 800ed1c:	4681      	mov	r9, r0
 800ed1e:	b918      	cbnz	r0, 800ed28 <__gethex+0x424>
 800ed20:	4b1a      	ldr	r3, [pc, #104]	; (800ed8c <__gethex+0x488>)
 800ed22:	4602      	mov	r2, r0
 800ed24:	2184      	movs	r1, #132	; 0x84
 800ed26:	e6a8      	b.n	800ea7a <__gethex+0x176>
 800ed28:	6922      	ldr	r2, [r4, #16]
 800ed2a:	3202      	adds	r2, #2
 800ed2c:	f104 010c 	add.w	r1, r4, #12
 800ed30:	0092      	lsls	r2, r2, #2
 800ed32:	300c      	adds	r0, #12
 800ed34:	f000 f90c 	bl	800ef50 <memcpy>
 800ed38:	4621      	mov	r1, r4
 800ed3a:	ee18 0a10 	vmov	r0, s16
 800ed3e:	f000 f955 	bl	800efec <_Bfree>
 800ed42:	464c      	mov	r4, r9
 800ed44:	6923      	ldr	r3, [r4, #16]
 800ed46:	1c5a      	adds	r2, r3, #1
 800ed48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed4c:	6122      	str	r2, [r4, #16]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	615a      	str	r2, [r3, #20]
 800ed52:	e7bb      	b.n	800eccc <__gethex+0x3c8>
 800ed54:	6922      	ldr	r2, [r4, #16]
 800ed56:	455a      	cmp	r2, fp
 800ed58:	dd0b      	ble.n	800ed72 <__gethex+0x46e>
 800ed5a:	2101      	movs	r1, #1
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	f7ff fd69 	bl	800e834 <rshift>
 800ed62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed66:	3501      	adds	r5, #1
 800ed68:	42ab      	cmp	r3, r5
 800ed6a:	f6ff aed0 	blt.w	800eb0e <__gethex+0x20a>
 800ed6e:	2701      	movs	r7, #1
 800ed70:	e7c0      	b.n	800ecf4 <__gethex+0x3f0>
 800ed72:	f016 061f 	ands.w	r6, r6, #31
 800ed76:	d0fa      	beq.n	800ed6e <__gethex+0x46a>
 800ed78:	449a      	add	sl, r3
 800ed7a:	f1c6 0620 	rsb	r6, r6, #32
 800ed7e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ed82:	f000 f9e9 	bl	800f158 <__hi0bits>
 800ed86:	42b0      	cmp	r0, r6
 800ed88:	dbe7      	blt.n	800ed5a <__gethex+0x456>
 800ed8a:	e7f0      	b.n	800ed6e <__gethex+0x46a>
 800ed8c:	080241c1 	.word	0x080241c1

0800ed90 <L_shift>:
 800ed90:	f1c2 0208 	rsb	r2, r2, #8
 800ed94:	0092      	lsls	r2, r2, #2
 800ed96:	b570      	push	{r4, r5, r6, lr}
 800ed98:	f1c2 0620 	rsb	r6, r2, #32
 800ed9c:	6843      	ldr	r3, [r0, #4]
 800ed9e:	6804      	ldr	r4, [r0, #0]
 800eda0:	fa03 f506 	lsl.w	r5, r3, r6
 800eda4:	432c      	orrs	r4, r5
 800eda6:	40d3      	lsrs	r3, r2
 800eda8:	6004      	str	r4, [r0, #0]
 800edaa:	f840 3f04 	str.w	r3, [r0, #4]!
 800edae:	4288      	cmp	r0, r1
 800edb0:	d3f4      	bcc.n	800ed9c <L_shift+0xc>
 800edb2:	bd70      	pop	{r4, r5, r6, pc}

0800edb4 <__match>:
 800edb4:	b530      	push	{r4, r5, lr}
 800edb6:	6803      	ldr	r3, [r0, #0]
 800edb8:	3301      	adds	r3, #1
 800edba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edbe:	b914      	cbnz	r4, 800edc6 <__match+0x12>
 800edc0:	6003      	str	r3, [r0, #0]
 800edc2:	2001      	movs	r0, #1
 800edc4:	bd30      	pop	{r4, r5, pc}
 800edc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800edce:	2d19      	cmp	r5, #25
 800edd0:	bf98      	it	ls
 800edd2:	3220      	addls	r2, #32
 800edd4:	42a2      	cmp	r2, r4
 800edd6:	d0f0      	beq.n	800edba <__match+0x6>
 800edd8:	2000      	movs	r0, #0
 800edda:	e7f3      	b.n	800edc4 <__match+0x10>

0800eddc <__hexnan>:
 800eddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede0:	680b      	ldr	r3, [r1, #0]
 800ede2:	6801      	ldr	r1, [r0, #0]
 800ede4:	115e      	asrs	r6, r3, #5
 800ede6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800edea:	f013 031f 	ands.w	r3, r3, #31
 800edee:	b087      	sub	sp, #28
 800edf0:	bf18      	it	ne
 800edf2:	3604      	addne	r6, #4
 800edf4:	2500      	movs	r5, #0
 800edf6:	1f37      	subs	r7, r6, #4
 800edf8:	4682      	mov	sl, r0
 800edfa:	4690      	mov	r8, r2
 800edfc:	9301      	str	r3, [sp, #4]
 800edfe:	f846 5c04 	str.w	r5, [r6, #-4]
 800ee02:	46b9      	mov	r9, r7
 800ee04:	463c      	mov	r4, r7
 800ee06:	9502      	str	r5, [sp, #8]
 800ee08:	46ab      	mov	fp, r5
 800ee0a:	784a      	ldrb	r2, [r1, #1]
 800ee0c:	1c4b      	adds	r3, r1, #1
 800ee0e:	9303      	str	r3, [sp, #12]
 800ee10:	b342      	cbz	r2, 800ee64 <__hexnan+0x88>
 800ee12:	4610      	mov	r0, r2
 800ee14:	9105      	str	r1, [sp, #20]
 800ee16:	9204      	str	r2, [sp, #16]
 800ee18:	f7ff fd5e 	bl	800e8d8 <__hexdig_fun>
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	d14f      	bne.n	800eec0 <__hexnan+0xe4>
 800ee20:	9a04      	ldr	r2, [sp, #16]
 800ee22:	9905      	ldr	r1, [sp, #20]
 800ee24:	2a20      	cmp	r2, #32
 800ee26:	d818      	bhi.n	800ee5a <__hexnan+0x7e>
 800ee28:	9b02      	ldr	r3, [sp, #8]
 800ee2a:	459b      	cmp	fp, r3
 800ee2c:	dd13      	ble.n	800ee56 <__hexnan+0x7a>
 800ee2e:	454c      	cmp	r4, r9
 800ee30:	d206      	bcs.n	800ee40 <__hexnan+0x64>
 800ee32:	2d07      	cmp	r5, #7
 800ee34:	dc04      	bgt.n	800ee40 <__hexnan+0x64>
 800ee36:	462a      	mov	r2, r5
 800ee38:	4649      	mov	r1, r9
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f7ff ffa8 	bl	800ed90 <L_shift>
 800ee40:	4544      	cmp	r4, r8
 800ee42:	d950      	bls.n	800eee6 <__hexnan+0x10a>
 800ee44:	2300      	movs	r3, #0
 800ee46:	f1a4 0904 	sub.w	r9, r4, #4
 800ee4a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee4e:	f8cd b008 	str.w	fp, [sp, #8]
 800ee52:	464c      	mov	r4, r9
 800ee54:	461d      	mov	r5, r3
 800ee56:	9903      	ldr	r1, [sp, #12]
 800ee58:	e7d7      	b.n	800ee0a <__hexnan+0x2e>
 800ee5a:	2a29      	cmp	r2, #41	; 0x29
 800ee5c:	d156      	bne.n	800ef0c <__hexnan+0x130>
 800ee5e:	3102      	adds	r1, #2
 800ee60:	f8ca 1000 	str.w	r1, [sl]
 800ee64:	f1bb 0f00 	cmp.w	fp, #0
 800ee68:	d050      	beq.n	800ef0c <__hexnan+0x130>
 800ee6a:	454c      	cmp	r4, r9
 800ee6c:	d206      	bcs.n	800ee7c <__hexnan+0xa0>
 800ee6e:	2d07      	cmp	r5, #7
 800ee70:	dc04      	bgt.n	800ee7c <__hexnan+0xa0>
 800ee72:	462a      	mov	r2, r5
 800ee74:	4649      	mov	r1, r9
 800ee76:	4620      	mov	r0, r4
 800ee78:	f7ff ff8a 	bl	800ed90 <L_shift>
 800ee7c:	4544      	cmp	r4, r8
 800ee7e:	d934      	bls.n	800eeea <__hexnan+0x10e>
 800ee80:	f1a8 0204 	sub.w	r2, r8, #4
 800ee84:	4623      	mov	r3, r4
 800ee86:	f853 1b04 	ldr.w	r1, [r3], #4
 800ee8a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ee8e:	429f      	cmp	r7, r3
 800ee90:	d2f9      	bcs.n	800ee86 <__hexnan+0xaa>
 800ee92:	1b3b      	subs	r3, r7, r4
 800ee94:	f023 0303 	bic.w	r3, r3, #3
 800ee98:	3304      	adds	r3, #4
 800ee9a:	3401      	adds	r4, #1
 800ee9c:	3e03      	subs	r6, #3
 800ee9e:	42b4      	cmp	r4, r6
 800eea0:	bf88      	it	hi
 800eea2:	2304      	movhi	r3, #4
 800eea4:	4443      	add	r3, r8
 800eea6:	2200      	movs	r2, #0
 800eea8:	f843 2b04 	str.w	r2, [r3], #4
 800eeac:	429f      	cmp	r7, r3
 800eeae:	d2fb      	bcs.n	800eea8 <__hexnan+0xcc>
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	b91b      	cbnz	r3, 800eebc <__hexnan+0xe0>
 800eeb4:	4547      	cmp	r7, r8
 800eeb6:	d127      	bne.n	800ef08 <__hexnan+0x12c>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	603b      	str	r3, [r7, #0]
 800eebc:	2005      	movs	r0, #5
 800eebe:	e026      	b.n	800ef0e <__hexnan+0x132>
 800eec0:	3501      	adds	r5, #1
 800eec2:	2d08      	cmp	r5, #8
 800eec4:	f10b 0b01 	add.w	fp, fp, #1
 800eec8:	dd06      	ble.n	800eed8 <__hexnan+0xfc>
 800eeca:	4544      	cmp	r4, r8
 800eecc:	d9c3      	bls.n	800ee56 <__hexnan+0x7a>
 800eece:	2300      	movs	r3, #0
 800eed0:	f844 3c04 	str.w	r3, [r4, #-4]
 800eed4:	2501      	movs	r5, #1
 800eed6:	3c04      	subs	r4, #4
 800eed8:	6822      	ldr	r2, [r4, #0]
 800eeda:	f000 000f 	and.w	r0, r0, #15
 800eede:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800eee2:	6022      	str	r2, [r4, #0]
 800eee4:	e7b7      	b.n	800ee56 <__hexnan+0x7a>
 800eee6:	2508      	movs	r5, #8
 800eee8:	e7b5      	b.n	800ee56 <__hexnan+0x7a>
 800eeea:	9b01      	ldr	r3, [sp, #4]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d0df      	beq.n	800eeb0 <__hexnan+0xd4>
 800eef0:	f04f 32ff 	mov.w	r2, #4294967295
 800eef4:	f1c3 0320 	rsb	r3, r3, #32
 800eef8:	fa22 f303 	lsr.w	r3, r2, r3
 800eefc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ef00:	401a      	ands	r2, r3
 800ef02:	f846 2c04 	str.w	r2, [r6, #-4]
 800ef06:	e7d3      	b.n	800eeb0 <__hexnan+0xd4>
 800ef08:	3f04      	subs	r7, #4
 800ef0a:	e7d1      	b.n	800eeb0 <__hexnan+0xd4>
 800ef0c:	2004      	movs	r0, #4
 800ef0e:	b007      	add	sp, #28
 800ef10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef14 <_localeconv_r>:
 800ef14:	4800      	ldr	r0, [pc, #0]	; (800ef18 <_localeconv_r+0x4>)
 800ef16:	4770      	bx	lr
 800ef18:	20000198 	.word	0x20000198

0800ef1c <malloc>:
 800ef1c:	4b02      	ldr	r3, [pc, #8]	; (800ef28 <malloc+0xc>)
 800ef1e:	4601      	mov	r1, r0
 800ef20:	6818      	ldr	r0, [r3, #0]
 800ef22:	f000 bd3d 	b.w	800f9a0 <_malloc_r>
 800ef26:	bf00      	nop
 800ef28:	20000040 	.word	0x20000040

0800ef2c <__ascii_mbtowc>:
 800ef2c:	b082      	sub	sp, #8
 800ef2e:	b901      	cbnz	r1, 800ef32 <__ascii_mbtowc+0x6>
 800ef30:	a901      	add	r1, sp, #4
 800ef32:	b142      	cbz	r2, 800ef46 <__ascii_mbtowc+0x1a>
 800ef34:	b14b      	cbz	r3, 800ef4a <__ascii_mbtowc+0x1e>
 800ef36:	7813      	ldrb	r3, [r2, #0]
 800ef38:	600b      	str	r3, [r1, #0]
 800ef3a:	7812      	ldrb	r2, [r2, #0]
 800ef3c:	1e10      	subs	r0, r2, #0
 800ef3e:	bf18      	it	ne
 800ef40:	2001      	movne	r0, #1
 800ef42:	b002      	add	sp, #8
 800ef44:	4770      	bx	lr
 800ef46:	4610      	mov	r0, r2
 800ef48:	e7fb      	b.n	800ef42 <__ascii_mbtowc+0x16>
 800ef4a:	f06f 0001 	mvn.w	r0, #1
 800ef4e:	e7f8      	b.n	800ef42 <__ascii_mbtowc+0x16>

0800ef50 <memcpy>:
 800ef50:	440a      	add	r2, r1
 800ef52:	4291      	cmp	r1, r2
 800ef54:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef58:	d100      	bne.n	800ef5c <memcpy+0xc>
 800ef5a:	4770      	bx	lr
 800ef5c:	b510      	push	{r4, lr}
 800ef5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef66:	4291      	cmp	r1, r2
 800ef68:	d1f9      	bne.n	800ef5e <memcpy+0xe>
 800ef6a:	bd10      	pop	{r4, pc}

0800ef6c <_Balloc>:
 800ef6c:	b570      	push	{r4, r5, r6, lr}
 800ef6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ef70:	4604      	mov	r4, r0
 800ef72:	460d      	mov	r5, r1
 800ef74:	b976      	cbnz	r6, 800ef94 <_Balloc+0x28>
 800ef76:	2010      	movs	r0, #16
 800ef78:	f7ff ffd0 	bl	800ef1c <malloc>
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	6260      	str	r0, [r4, #36]	; 0x24
 800ef80:	b920      	cbnz	r0, 800ef8c <_Balloc+0x20>
 800ef82:	4b18      	ldr	r3, [pc, #96]	; (800efe4 <_Balloc+0x78>)
 800ef84:	4818      	ldr	r0, [pc, #96]	; (800efe8 <_Balloc+0x7c>)
 800ef86:	2166      	movs	r1, #102	; 0x66
 800ef88:	f7fe fdaa 	bl	800dae0 <__assert_func>
 800ef8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef90:	6006      	str	r6, [r0, #0]
 800ef92:	60c6      	str	r6, [r0, #12]
 800ef94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ef96:	68f3      	ldr	r3, [r6, #12]
 800ef98:	b183      	cbz	r3, 800efbc <_Balloc+0x50>
 800ef9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef9c:	68db      	ldr	r3, [r3, #12]
 800ef9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800efa2:	b9b8      	cbnz	r0, 800efd4 <_Balloc+0x68>
 800efa4:	2101      	movs	r1, #1
 800efa6:	fa01 f605 	lsl.w	r6, r1, r5
 800efaa:	1d72      	adds	r2, r6, #5
 800efac:	0092      	lsls	r2, r2, #2
 800efae:	4620      	mov	r0, r4
 800efb0:	f000 fc97 	bl	800f8e2 <_calloc_r>
 800efb4:	b160      	cbz	r0, 800efd0 <_Balloc+0x64>
 800efb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800efba:	e00e      	b.n	800efda <_Balloc+0x6e>
 800efbc:	2221      	movs	r2, #33	; 0x21
 800efbe:	2104      	movs	r1, #4
 800efc0:	4620      	mov	r0, r4
 800efc2:	f000 fc8e 	bl	800f8e2 <_calloc_r>
 800efc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efc8:	60f0      	str	r0, [r6, #12]
 800efca:	68db      	ldr	r3, [r3, #12]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d1e4      	bne.n	800ef9a <_Balloc+0x2e>
 800efd0:	2000      	movs	r0, #0
 800efd2:	bd70      	pop	{r4, r5, r6, pc}
 800efd4:	6802      	ldr	r2, [r0, #0]
 800efd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800efda:	2300      	movs	r3, #0
 800efdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800efe0:	e7f7      	b.n	800efd2 <_Balloc+0x66>
 800efe2:	bf00      	nop
 800efe4:	08023fa0 	.word	0x08023fa0
 800efe8:	08024250 	.word	0x08024250

0800efec <_Bfree>:
 800efec:	b570      	push	{r4, r5, r6, lr}
 800efee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eff0:	4605      	mov	r5, r0
 800eff2:	460c      	mov	r4, r1
 800eff4:	b976      	cbnz	r6, 800f014 <_Bfree+0x28>
 800eff6:	2010      	movs	r0, #16
 800eff8:	f7ff ff90 	bl	800ef1c <malloc>
 800effc:	4602      	mov	r2, r0
 800effe:	6268      	str	r0, [r5, #36]	; 0x24
 800f000:	b920      	cbnz	r0, 800f00c <_Bfree+0x20>
 800f002:	4b09      	ldr	r3, [pc, #36]	; (800f028 <_Bfree+0x3c>)
 800f004:	4809      	ldr	r0, [pc, #36]	; (800f02c <_Bfree+0x40>)
 800f006:	218a      	movs	r1, #138	; 0x8a
 800f008:	f7fe fd6a 	bl	800dae0 <__assert_func>
 800f00c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f010:	6006      	str	r6, [r0, #0]
 800f012:	60c6      	str	r6, [r0, #12]
 800f014:	b13c      	cbz	r4, 800f026 <_Bfree+0x3a>
 800f016:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f018:	6862      	ldr	r2, [r4, #4]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f020:	6021      	str	r1, [r4, #0]
 800f022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f026:	bd70      	pop	{r4, r5, r6, pc}
 800f028:	08023fa0 	.word	0x08023fa0
 800f02c:	08024250 	.word	0x08024250

0800f030 <__multadd>:
 800f030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f034:	690e      	ldr	r6, [r1, #16]
 800f036:	4607      	mov	r7, r0
 800f038:	4698      	mov	r8, r3
 800f03a:	460c      	mov	r4, r1
 800f03c:	f101 0014 	add.w	r0, r1, #20
 800f040:	2300      	movs	r3, #0
 800f042:	6805      	ldr	r5, [r0, #0]
 800f044:	b2a9      	uxth	r1, r5
 800f046:	fb02 8101 	mla	r1, r2, r1, r8
 800f04a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f04e:	0c2d      	lsrs	r5, r5, #16
 800f050:	fb02 c505 	mla	r5, r2, r5, ip
 800f054:	b289      	uxth	r1, r1
 800f056:	3301      	adds	r3, #1
 800f058:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f05c:	429e      	cmp	r6, r3
 800f05e:	f840 1b04 	str.w	r1, [r0], #4
 800f062:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f066:	dcec      	bgt.n	800f042 <__multadd+0x12>
 800f068:	f1b8 0f00 	cmp.w	r8, #0
 800f06c:	d022      	beq.n	800f0b4 <__multadd+0x84>
 800f06e:	68a3      	ldr	r3, [r4, #8]
 800f070:	42b3      	cmp	r3, r6
 800f072:	dc19      	bgt.n	800f0a8 <__multadd+0x78>
 800f074:	6861      	ldr	r1, [r4, #4]
 800f076:	4638      	mov	r0, r7
 800f078:	3101      	adds	r1, #1
 800f07a:	f7ff ff77 	bl	800ef6c <_Balloc>
 800f07e:	4605      	mov	r5, r0
 800f080:	b928      	cbnz	r0, 800f08e <__multadd+0x5e>
 800f082:	4602      	mov	r2, r0
 800f084:	4b0d      	ldr	r3, [pc, #52]	; (800f0bc <__multadd+0x8c>)
 800f086:	480e      	ldr	r0, [pc, #56]	; (800f0c0 <__multadd+0x90>)
 800f088:	21b5      	movs	r1, #181	; 0xb5
 800f08a:	f7fe fd29 	bl	800dae0 <__assert_func>
 800f08e:	6922      	ldr	r2, [r4, #16]
 800f090:	3202      	adds	r2, #2
 800f092:	f104 010c 	add.w	r1, r4, #12
 800f096:	0092      	lsls	r2, r2, #2
 800f098:	300c      	adds	r0, #12
 800f09a:	f7ff ff59 	bl	800ef50 <memcpy>
 800f09e:	4621      	mov	r1, r4
 800f0a0:	4638      	mov	r0, r7
 800f0a2:	f7ff ffa3 	bl	800efec <_Bfree>
 800f0a6:	462c      	mov	r4, r5
 800f0a8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f0ac:	3601      	adds	r6, #1
 800f0ae:	f8c3 8014 	str.w	r8, [r3, #20]
 800f0b2:	6126      	str	r6, [r4, #16]
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ba:	bf00      	nop
 800f0bc:	080241c1 	.word	0x080241c1
 800f0c0:	08024250 	.word	0x08024250

0800f0c4 <__s2b>:
 800f0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0c8:	460c      	mov	r4, r1
 800f0ca:	4615      	mov	r5, r2
 800f0cc:	461f      	mov	r7, r3
 800f0ce:	2209      	movs	r2, #9
 800f0d0:	3308      	adds	r3, #8
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0d8:	2100      	movs	r1, #0
 800f0da:	2201      	movs	r2, #1
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	db09      	blt.n	800f0f4 <__s2b+0x30>
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	f7ff ff43 	bl	800ef6c <_Balloc>
 800f0e6:	b940      	cbnz	r0, 800f0fa <__s2b+0x36>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	4b19      	ldr	r3, [pc, #100]	; (800f150 <__s2b+0x8c>)
 800f0ec:	4819      	ldr	r0, [pc, #100]	; (800f154 <__s2b+0x90>)
 800f0ee:	21ce      	movs	r1, #206	; 0xce
 800f0f0:	f7fe fcf6 	bl	800dae0 <__assert_func>
 800f0f4:	0052      	lsls	r2, r2, #1
 800f0f6:	3101      	adds	r1, #1
 800f0f8:	e7f0      	b.n	800f0dc <__s2b+0x18>
 800f0fa:	9b08      	ldr	r3, [sp, #32]
 800f0fc:	6143      	str	r3, [r0, #20]
 800f0fe:	2d09      	cmp	r5, #9
 800f100:	f04f 0301 	mov.w	r3, #1
 800f104:	6103      	str	r3, [r0, #16]
 800f106:	dd16      	ble.n	800f136 <__s2b+0x72>
 800f108:	f104 0909 	add.w	r9, r4, #9
 800f10c:	46c8      	mov	r8, r9
 800f10e:	442c      	add	r4, r5
 800f110:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f114:	4601      	mov	r1, r0
 800f116:	3b30      	subs	r3, #48	; 0x30
 800f118:	220a      	movs	r2, #10
 800f11a:	4630      	mov	r0, r6
 800f11c:	f7ff ff88 	bl	800f030 <__multadd>
 800f120:	45a0      	cmp	r8, r4
 800f122:	d1f5      	bne.n	800f110 <__s2b+0x4c>
 800f124:	f1a5 0408 	sub.w	r4, r5, #8
 800f128:	444c      	add	r4, r9
 800f12a:	1b2d      	subs	r5, r5, r4
 800f12c:	1963      	adds	r3, r4, r5
 800f12e:	42bb      	cmp	r3, r7
 800f130:	db04      	blt.n	800f13c <__s2b+0x78>
 800f132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f136:	340a      	adds	r4, #10
 800f138:	2509      	movs	r5, #9
 800f13a:	e7f6      	b.n	800f12a <__s2b+0x66>
 800f13c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f140:	4601      	mov	r1, r0
 800f142:	3b30      	subs	r3, #48	; 0x30
 800f144:	220a      	movs	r2, #10
 800f146:	4630      	mov	r0, r6
 800f148:	f7ff ff72 	bl	800f030 <__multadd>
 800f14c:	e7ee      	b.n	800f12c <__s2b+0x68>
 800f14e:	bf00      	nop
 800f150:	080241c1 	.word	0x080241c1
 800f154:	08024250 	.word	0x08024250

0800f158 <__hi0bits>:
 800f158:	0c03      	lsrs	r3, r0, #16
 800f15a:	041b      	lsls	r3, r3, #16
 800f15c:	b9d3      	cbnz	r3, 800f194 <__hi0bits+0x3c>
 800f15e:	0400      	lsls	r0, r0, #16
 800f160:	2310      	movs	r3, #16
 800f162:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f166:	bf04      	itt	eq
 800f168:	0200      	lsleq	r0, r0, #8
 800f16a:	3308      	addeq	r3, #8
 800f16c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f170:	bf04      	itt	eq
 800f172:	0100      	lsleq	r0, r0, #4
 800f174:	3304      	addeq	r3, #4
 800f176:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f17a:	bf04      	itt	eq
 800f17c:	0080      	lsleq	r0, r0, #2
 800f17e:	3302      	addeq	r3, #2
 800f180:	2800      	cmp	r0, #0
 800f182:	db05      	blt.n	800f190 <__hi0bits+0x38>
 800f184:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f188:	f103 0301 	add.w	r3, r3, #1
 800f18c:	bf08      	it	eq
 800f18e:	2320      	moveq	r3, #32
 800f190:	4618      	mov	r0, r3
 800f192:	4770      	bx	lr
 800f194:	2300      	movs	r3, #0
 800f196:	e7e4      	b.n	800f162 <__hi0bits+0xa>

0800f198 <__lo0bits>:
 800f198:	6803      	ldr	r3, [r0, #0]
 800f19a:	f013 0207 	ands.w	r2, r3, #7
 800f19e:	4601      	mov	r1, r0
 800f1a0:	d00b      	beq.n	800f1ba <__lo0bits+0x22>
 800f1a2:	07da      	lsls	r2, r3, #31
 800f1a4:	d424      	bmi.n	800f1f0 <__lo0bits+0x58>
 800f1a6:	0798      	lsls	r0, r3, #30
 800f1a8:	bf49      	itett	mi
 800f1aa:	085b      	lsrmi	r3, r3, #1
 800f1ac:	089b      	lsrpl	r3, r3, #2
 800f1ae:	2001      	movmi	r0, #1
 800f1b0:	600b      	strmi	r3, [r1, #0]
 800f1b2:	bf5c      	itt	pl
 800f1b4:	600b      	strpl	r3, [r1, #0]
 800f1b6:	2002      	movpl	r0, #2
 800f1b8:	4770      	bx	lr
 800f1ba:	b298      	uxth	r0, r3
 800f1bc:	b9b0      	cbnz	r0, 800f1ec <__lo0bits+0x54>
 800f1be:	0c1b      	lsrs	r3, r3, #16
 800f1c0:	2010      	movs	r0, #16
 800f1c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f1c6:	bf04      	itt	eq
 800f1c8:	0a1b      	lsreq	r3, r3, #8
 800f1ca:	3008      	addeq	r0, #8
 800f1cc:	071a      	lsls	r2, r3, #28
 800f1ce:	bf04      	itt	eq
 800f1d0:	091b      	lsreq	r3, r3, #4
 800f1d2:	3004      	addeq	r0, #4
 800f1d4:	079a      	lsls	r2, r3, #30
 800f1d6:	bf04      	itt	eq
 800f1d8:	089b      	lsreq	r3, r3, #2
 800f1da:	3002      	addeq	r0, #2
 800f1dc:	07da      	lsls	r2, r3, #31
 800f1de:	d403      	bmi.n	800f1e8 <__lo0bits+0x50>
 800f1e0:	085b      	lsrs	r3, r3, #1
 800f1e2:	f100 0001 	add.w	r0, r0, #1
 800f1e6:	d005      	beq.n	800f1f4 <__lo0bits+0x5c>
 800f1e8:	600b      	str	r3, [r1, #0]
 800f1ea:	4770      	bx	lr
 800f1ec:	4610      	mov	r0, r2
 800f1ee:	e7e8      	b.n	800f1c2 <__lo0bits+0x2a>
 800f1f0:	2000      	movs	r0, #0
 800f1f2:	4770      	bx	lr
 800f1f4:	2020      	movs	r0, #32
 800f1f6:	4770      	bx	lr

0800f1f8 <__i2b>:
 800f1f8:	b510      	push	{r4, lr}
 800f1fa:	460c      	mov	r4, r1
 800f1fc:	2101      	movs	r1, #1
 800f1fe:	f7ff feb5 	bl	800ef6c <_Balloc>
 800f202:	4602      	mov	r2, r0
 800f204:	b928      	cbnz	r0, 800f212 <__i2b+0x1a>
 800f206:	4b05      	ldr	r3, [pc, #20]	; (800f21c <__i2b+0x24>)
 800f208:	4805      	ldr	r0, [pc, #20]	; (800f220 <__i2b+0x28>)
 800f20a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f20e:	f7fe fc67 	bl	800dae0 <__assert_func>
 800f212:	2301      	movs	r3, #1
 800f214:	6144      	str	r4, [r0, #20]
 800f216:	6103      	str	r3, [r0, #16]
 800f218:	bd10      	pop	{r4, pc}
 800f21a:	bf00      	nop
 800f21c:	080241c1 	.word	0x080241c1
 800f220:	08024250 	.word	0x08024250

0800f224 <__multiply>:
 800f224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f228:	4614      	mov	r4, r2
 800f22a:	690a      	ldr	r2, [r1, #16]
 800f22c:	6923      	ldr	r3, [r4, #16]
 800f22e:	429a      	cmp	r2, r3
 800f230:	bfb8      	it	lt
 800f232:	460b      	movlt	r3, r1
 800f234:	460d      	mov	r5, r1
 800f236:	bfbc      	itt	lt
 800f238:	4625      	movlt	r5, r4
 800f23a:	461c      	movlt	r4, r3
 800f23c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f240:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f244:	68ab      	ldr	r3, [r5, #8]
 800f246:	6869      	ldr	r1, [r5, #4]
 800f248:	eb0a 0709 	add.w	r7, sl, r9
 800f24c:	42bb      	cmp	r3, r7
 800f24e:	b085      	sub	sp, #20
 800f250:	bfb8      	it	lt
 800f252:	3101      	addlt	r1, #1
 800f254:	f7ff fe8a 	bl	800ef6c <_Balloc>
 800f258:	b930      	cbnz	r0, 800f268 <__multiply+0x44>
 800f25a:	4602      	mov	r2, r0
 800f25c:	4b42      	ldr	r3, [pc, #264]	; (800f368 <__multiply+0x144>)
 800f25e:	4843      	ldr	r0, [pc, #268]	; (800f36c <__multiply+0x148>)
 800f260:	f240 115d 	movw	r1, #349	; 0x15d
 800f264:	f7fe fc3c 	bl	800dae0 <__assert_func>
 800f268:	f100 0614 	add.w	r6, r0, #20
 800f26c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f270:	4633      	mov	r3, r6
 800f272:	2200      	movs	r2, #0
 800f274:	4543      	cmp	r3, r8
 800f276:	d31e      	bcc.n	800f2b6 <__multiply+0x92>
 800f278:	f105 0c14 	add.w	ip, r5, #20
 800f27c:	f104 0314 	add.w	r3, r4, #20
 800f280:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f284:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f288:	9202      	str	r2, [sp, #8]
 800f28a:	ebac 0205 	sub.w	r2, ip, r5
 800f28e:	3a15      	subs	r2, #21
 800f290:	f022 0203 	bic.w	r2, r2, #3
 800f294:	3204      	adds	r2, #4
 800f296:	f105 0115 	add.w	r1, r5, #21
 800f29a:	458c      	cmp	ip, r1
 800f29c:	bf38      	it	cc
 800f29e:	2204      	movcc	r2, #4
 800f2a0:	9201      	str	r2, [sp, #4]
 800f2a2:	9a02      	ldr	r2, [sp, #8]
 800f2a4:	9303      	str	r3, [sp, #12]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d808      	bhi.n	800f2bc <__multiply+0x98>
 800f2aa:	2f00      	cmp	r7, #0
 800f2ac:	dc55      	bgt.n	800f35a <__multiply+0x136>
 800f2ae:	6107      	str	r7, [r0, #16]
 800f2b0:	b005      	add	sp, #20
 800f2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b6:	f843 2b04 	str.w	r2, [r3], #4
 800f2ba:	e7db      	b.n	800f274 <__multiply+0x50>
 800f2bc:	f8b3 a000 	ldrh.w	sl, [r3]
 800f2c0:	f1ba 0f00 	cmp.w	sl, #0
 800f2c4:	d020      	beq.n	800f308 <__multiply+0xe4>
 800f2c6:	f105 0e14 	add.w	lr, r5, #20
 800f2ca:	46b1      	mov	r9, r6
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f2d2:	f8d9 b000 	ldr.w	fp, [r9]
 800f2d6:	b2a1      	uxth	r1, r4
 800f2d8:	fa1f fb8b 	uxth.w	fp, fp
 800f2dc:	fb0a b101 	mla	r1, sl, r1, fp
 800f2e0:	4411      	add	r1, r2
 800f2e2:	f8d9 2000 	ldr.w	r2, [r9]
 800f2e6:	0c24      	lsrs	r4, r4, #16
 800f2e8:	0c12      	lsrs	r2, r2, #16
 800f2ea:	fb0a 2404 	mla	r4, sl, r4, r2
 800f2ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f2f2:	b289      	uxth	r1, r1
 800f2f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f2f8:	45f4      	cmp	ip, lr
 800f2fa:	f849 1b04 	str.w	r1, [r9], #4
 800f2fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f302:	d8e4      	bhi.n	800f2ce <__multiply+0xaa>
 800f304:	9901      	ldr	r1, [sp, #4]
 800f306:	5072      	str	r2, [r6, r1]
 800f308:	9a03      	ldr	r2, [sp, #12]
 800f30a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f30e:	3304      	adds	r3, #4
 800f310:	f1b9 0f00 	cmp.w	r9, #0
 800f314:	d01f      	beq.n	800f356 <__multiply+0x132>
 800f316:	6834      	ldr	r4, [r6, #0]
 800f318:	f105 0114 	add.w	r1, r5, #20
 800f31c:	46b6      	mov	lr, r6
 800f31e:	f04f 0a00 	mov.w	sl, #0
 800f322:	880a      	ldrh	r2, [r1, #0]
 800f324:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f328:	fb09 b202 	mla	r2, r9, r2, fp
 800f32c:	4492      	add	sl, r2
 800f32e:	b2a4      	uxth	r4, r4
 800f330:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f334:	f84e 4b04 	str.w	r4, [lr], #4
 800f338:	f851 4b04 	ldr.w	r4, [r1], #4
 800f33c:	f8be 2000 	ldrh.w	r2, [lr]
 800f340:	0c24      	lsrs	r4, r4, #16
 800f342:	fb09 2404 	mla	r4, r9, r4, r2
 800f346:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f34a:	458c      	cmp	ip, r1
 800f34c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f350:	d8e7      	bhi.n	800f322 <__multiply+0xfe>
 800f352:	9a01      	ldr	r2, [sp, #4]
 800f354:	50b4      	str	r4, [r6, r2]
 800f356:	3604      	adds	r6, #4
 800f358:	e7a3      	b.n	800f2a2 <__multiply+0x7e>
 800f35a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d1a5      	bne.n	800f2ae <__multiply+0x8a>
 800f362:	3f01      	subs	r7, #1
 800f364:	e7a1      	b.n	800f2aa <__multiply+0x86>
 800f366:	bf00      	nop
 800f368:	080241c1 	.word	0x080241c1
 800f36c:	08024250 	.word	0x08024250

0800f370 <__pow5mult>:
 800f370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f374:	4615      	mov	r5, r2
 800f376:	f012 0203 	ands.w	r2, r2, #3
 800f37a:	4606      	mov	r6, r0
 800f37c:	460f      	mov	r7, r1
 800f37e:	d007      	beq.n	800f390 <__pow5mult+0x20>
 800f380:	4c25      	ldr	r4, [pc, #148]	; (800f418 <__pow5mult+0xa8>)
 800f382:	3a01      	subs	r2, #1
 800f384:	2300      	movs	r3, #0
 800f386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f38a:	f7ff fe51 	bl	800f030 <__multadd>
 800f38e:	4607      	mov	r7, r0
 800f390:	10ad      	asrs	r5, r5, #2
 800f392:	d03d      	beq.n	800f410 <__pow5mult+0xa0>
 800f394:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f396:	b97c      	cbnz	r4, 800f3b8 <__pow5mult+0x48>
 800f398:	2010      	movs	r0, #16
 800f39a:	f7ff fdbf 	bl	800ef1c <malloc>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	6270      	str	r0, [r6, #36]	; 0x24
 800f3a2:	b928      	cbnz	r0, 800f3b0 <__pow5mult+0x40>
 800f3a4:	4b1d      	ldr	r3, [pc, #116]	; (800f41c <__pow5mult+0xac>)
 800f3a6:	481e      	ldr	r0, [pc, #120]	; (800f420 <__pow5mult+0xb0>)
 800f3a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f3ac:	f7fe fb98 	bl	800dae0 <__assert_func>
 800f3b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f3b4:	6004      	str	r4, [r0, #0]
 800f3b6:	60c4      	str	r4, [r0, #12]
 800f3b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f3bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f3c0:	b94c      	cbnz	r4, 800f3d6 <__pow5mult+0x66>
 800f3c2:	f240 2171 	movw	r1, #625	; 0x271
 800f3c6:	4630      	mov	r0, r6
 800f3c8:	f7ff ff16 	bl	800f1f8 <__i2b>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3d2:	4604      	mov	r4, r0
 800f3d4:	6003      	str	r3, [r0, #0]
 800f3d6:	f04f 0900 	mov.w	r9, #0
 800f3da:	07eb      	lsls	r3, r5, #31
 800f3dc:	d50a      	bpl.n	800f3f4 <__pow5mult+0x84>
 800f3de:	4639      	mov	r1, r7
 800f3e0:	4622      	mov	r2, r4
 800f3e2:	4630      	mov	r0, r6
 800f3e4:	f7ff ff1e 	bl	800f224 <__multiply>
 800f3e8:	4639      	mov	r1, r7
 800f3ea:	4680      	mov	r8, r0
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	f7ff fdfd 	bl	800efec <_Bfree>
 800f3f2:	4647      	mov	r7, r8
 800f3f4:	106d      	asrs	r5, r5, #1
 800f3f6:	d00b      	beq.n	800f410 <__pow5mult+0xa0>
 800f3f8:	6820      	ldr	r0, [r4, #0]
 800f3fa:	b938      	cbnz	r0, 800f40c <__pow5mult+0x9c>
 800f3fc:	4622      	mov	r2, r4
 800f3fe:	4621      	mov	r1, r4
 800f400:	4630      	mov	r0, r6
 800f402:	f7ff ff0f 	bl	800f224 <__multiply>
 800f406:	6020      	str	r0, [r4, #0]
 800f408:	f8c0 9000 	str.w	r9, [r0]
 800f40c:	4604      	mov	r4, r0
 800f40e:	e7e4      	b.n	800f3da <__pow5mult+0x6a>
 800f410:	4638      	mov	r0, r7
 800f412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f416:	bf00      	nop
 800f418:	080243a0 	.word	0x080243a0
 800f41c:	08023fa0 	.word	0x08023fa0
 800f420:	08024250 	.word	0x08024250

0800f424 <__lshift>:
 800f424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f428:	460c      	mov	r4, r1
 800f42a:	6849      	ldr	r1, [r1, #4]
 800f42c:	6923      	ldr	r3, [r4, #16]
 800f42e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f432:	68a3      	ldr	r3, [r4, #8]
 800f434:	4607      	mov	r7, r0
 800f436:	4691      	mov	r9, r2
 800f438:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f43c:	f108 0601 	add.w	r6, r8, #1
 800f440:	42b3      	cmp	r3, r6
 800f442:	db0b      	blt.n	800f45c <__lshift+0x38>
 800f444:	4638      	mov	r0, r7
 800f446:	f7ff fd91 	bl	800ef6c <_Balloc>
 800f44a:	4605      	mov	r5, r0
 800f44c:	b948      	cbnz	r0, 800f462 <__lshift+0x3e>
 800f44e:	4602      	mov	r2, r0
 800f450:	4b28      	ldr	r3, [pc, #160]	; (800f4f4 <__lshift+0xd0>)
 800f452:	4829      	ldr	r0, [pc, #164]	; (800f4f8 <__lshift+0xd4>)
 800f454:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f458:	f7fe fb42 	bl	800dae0 <__assert_func>
 800f45c:	3101      	adds	r1, #1
 800f45e:	005b      	lsls	r3, r3, #1
 800f460:	e7ee      	b.n	800f440 <__lshift+0x1c>
 800f462:	2300      	movs	r3, #0
 800f464:	f100 0114 	add.w	r1, r0, #20
 800f468:	f100 0210 	add.w	r2, r0, #16
 800f46c:	4618      	mov	r0, r3
 800f46e:	4553      	cmp	r3, sl
 800f470:	db33      	blt.n	800f4da <__lshift+0xb6>
 800f472:	6920      	ldr	r0, [r4, #16]
 800f474:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f478:	f104 0314 	add.w	r3, r4, #20
 800f47c:	f019 091f 	ands.w	r9, r9, #31
 800f480:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f484:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f488:	d02b      	beq.n	800f4e2 <__lshift+0xbe>
 800f48a:	f1c9 0e20 	rsb	lr, r9, #32
 800f48e:	468a      	mov	sl, r1
 800f490:	2200      	movs	r2, #0
 800f492:	6818      	ldr	r0, [r3, #0]
 800f494:	fa00 f009 	lsl.w	r0, r0, r9
 800f498:	4302      	orrs	r2, r0
 800f49a:	f84a 2b04 	str.w	r2, [sl], #4
 800f49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4a2:	459c      	cmp	ip, r3
 800f4a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f4a8:	d8f3      	bhi.n	800f492 <__lshift+0x6e>
 800f4aa:	ebac 0304 	sub.w	r3, ip, r4
 800f4ae:	3b15      	subs	r3, #21
 800f4b0:	f023 0303 	bic.w	r3, r3, #3
 800f4b4:	3304      	adds	r3, #4
 800f4b6:	f104 0015 	add.w	r0, r4, #21
 800f4ba:	4584      	cmp	ip, r0
 800f4bc:	bf38      	it	cc
 800f4be:	2304      	movcc	r3, #4
 800f4c0:	50ca      	str	r2, [r1, r3]
 800f4c2:	b10a      	cbz	r2, 800f4c8 <__lshift+0xa4>
 800f4c4:	f108 0602 	add.w	r6, r8, #2
 800f4c8:	3e01      	subs	r6, #1
 800f4ca:	4638      	mov	r0, r7
 800f4cc:	612e      	str	r6, [r5, #16]
 800f4ce:	4621      	mov	r1, r4
 800f4d0:	f7ff fd8c 	bl	800efec <_Bfree>
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4da:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4de:	3301      	adds	r3, #1
 800f4e0:	e7c5      	b.n	800f46e <__lshift+0x4a>
 800f4e2:	3904      	subs	r1, #4
 800f4e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f4ec:	459c      	cmp	ip, r3
 800f4ee:	d8f9      	bhi.n	800f4e4 <__lshift+0xc0>
 800f4f0:	e7ea      	b.n	800f4c8 <__lshift+0xa4>
 800f4f2:	bf00      	nop
 800f4f4:	080241c1 	.word	0x080241c1
 800f4f8:	08024250 	.word	0x08024250

0800f4fc <__mcmp>:
 800f4fc:	b530      	push	{r4, r5, lr}
 800f4fe:	6902      	ldr	r2, [r0, #16]
 800f500:	690c      	ldr	r4, [r1, #16]
 800f502:	1b12      	subs	r2, r2, r4
 800f504:	d10e      	bne.n	800f524 <__mcmp+0x28>
 800f506:	f100 0314 	add.w	r3, r0, #20
 800f50a:	3114      	adds	r1, #20
 800f50c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f510:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f514:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f518:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f51c:	42a5      	cmp	r5, r4
 800f51e:	d003      	beq.n	800f528 <__mcmp+0x2c>
 800f520:	d305      	bcc.n	800f52e <__mcmp+0x32>
 800f522:	2201      	movs	r2, #1
 800f524:	4610      	mov	r0, r2
 800f526:	bd30      	pop	{r4, r5, pc}
 800f528:	4283      	cmp	r3, r0
 800f52a:	d3f3      	bcc.n	800f514 <__mcmp+0x18>
 800f52c:	e7fa      	b.n	800f524 <__mcmp+0x28>
 800f52e:	f04f 32ff 	mov.w	r2, #4294967295
 800f532:	e7f7      	b.n	800f524 <__mcmp+0x28>

0800f534 <__mdiff>:
 800f534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f538:	460c      	mov	r4, r1
 800f53a:	4606      	mov	r6, r0
 800f53c:	4611      	mov	r1, r2
 800f53e:	4620      	mov	r0, r4
 800f540:	4617      	mov	r7, r2
 800f542:	f7ff ffdb 	bl	800f4fc <__mcmp>
 800f546:	1e05      	subs	r5, r0, #0
 800f548:	d110      	bne.n	800f56c <__mdiff+0x38>
 800f54a:	4629      	mov	r1, r5
 800f54c:	4630      	mov	r0, r6
 800f54e:	f7ff fd0d 	bl	800ef6c <_Balloc>
 800f552:	b930      	cbnz	r0, 800f562 <__mdiff+0x2e>
 800f554:	4b39      	ldr	r3, [pc, #228]	; (800f63c <__mdiff+0x108>)
 800f556:	4602      	mov	r2, r0
 800f558:	f240 2132 	movw	r1, #562	; 0x232
 800f55c:	4838      	ldr	r0, [pc, #224]	; (800f640 <__mdiff+0x10c>)
 800f55e:	f7fe fabf 	bl	800dae0 <__assert_func>
 800f562:	2301      	movs	r3, #1
 800f564:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f56c:	bfa4      	itt	ge
 800f56e:	463b      	movge	r3, r7
 800f570:	4627      	movge	r7, r4
 800f572:	4630      	mov	r0, r6
 800f574:	6879      	ldr	r1, [r7, #4]
 800f576:	bfa6      	itte	ge
 800f578:	461c      	movge	r4, r3
 800f57a:	2500      	movge	r5, #0
 800f57c:	2501      	movlt	r5, #1
 800f57e:	f7ff fcf5 	bl	800ef6c <_Balloc>
 800f582:	b920      	cbnz	r0, 800f58e <__mdiff+0x5a>
 800f584:	4b2d      	ldr	r3, [pc, #180]	; (800f63c <__mdiff+0x108>)
 800f586:	4602      	mov	r2, r0
 800f588:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f58c:	e7e6      	b.n	800f55c <__mdiff+0x28>
 800f58e:	693e      	ldr	r6, [r7, #16]
 800f590:	60c5      	str	r5, [r0, #12]
 800f592:	6925      	ldr	r5, [r4, #16]
 800f594:	f107 0114 	add.w	r1, r7, #20
 800f598:	f104 0914 	add.w	r9, r4, #20
 800f59c:	f100 0e14 	add.w	lr, r0, #20
 800f5a0:	f107 0210 	add.w	r2, r7, #16
 800f5a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f5a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f5ac:	46f2      	mov	sl, lr
 800f5ae:	2700      	movs	r7, #0
 800f5b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f5b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f5b8:	fa1f f883 	uxth.w	r8, r3
 800f5bc:	fa17 f78b 	uxtah	r7, r7, fp
 800f5c0:	0c1b      	lsrs	r3, r3, #16
 800f5c2:	eba7 0808 	sub.w	r8, r7, r8
 800f5c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f5ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f5ce:	fa1f f888 	uxth.w	r8, r8
 800f5d2:	141f      	asrs	r7, r3, #16
 800f5d4:	454d      	cmp	r5, r9
 800f5d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f5da:	f84a 3b04 	str.w	r3, [sl], #4
 800f5de:	d8e7      	bhi.n	800f5b0 <__mdiff+0x7c>
 800f5e0:	1b2b      	subs	r3, r5, r4
 800f5e2:	3b15      	subs	r3, #21
 800f5e4:	f023 0303 	bic.w	r3, r3, #3
 800f5e8:	3304      	adds	r3, #4
 800f5ea:	3415      	adds	r4, #21
 800f5ec:	42a5      	cmp	r5, r4
 800f5ee:	bf38      	it	cc
 800f5f0:	2304      	movcc	r3, #4
 800f5f2:	4419      	add	r1, r3
 800f5f4:	4473      	add	r3, lr
 800f5f6:	469e      	mov	lr, r3
 800f5f8:	460d      	mov	r5, r1
 800f5fa:	4565      	cmp	r5, ip
 800f5fc:	d30e      	bcc.n	800f61c <__mdiff+0xe8>
 800f5fe:	f10c 0203 	add.w	r2, ip, #3
 800f602:	1a52      	subs	r2, r2, r1
 800f604:	f022 0203 	bic.w	r2, r2, #3
 800f608:	3903      	subs	r1, #3
 800f60a:	458c      	cmp	ip, r1
 800f60c:	bf38      	it	cc
 800f60e:	2200      	movcc	r2, #0
 800f610:	441a      	add	r2, r3
 800f612:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f616:	b17b      	cbz	r3, 800f638 <__mdiff+0x104>
 800f618:	6106      	str	r6, [r0, #16]
 800f61a:	e7a5      	b.n	800f568 <__mdiff+0x34>
 800f61c:	f855 8b04 	ldr.w	r8, [r5], #4
 800f620:	fa17 f488 	uxtah	r4, r7, r8
 800f624:	1422      	asrs	r2, r4, #16
 800f626:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f62a:	b2a4      	uxth	r4, r4
 800f62c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f630:	f84e 4b04 	str.w	r4, [lr], #4
 800f634:	1417      	asrs	r7, r2, #16
 800f636:	e7e0      	b.n	800f5fa <__mdiff+0xc6>
 800f638:	3e01      	subs	r6, #1
 800f63a:	e7ea      	b.n	800f612 <__mdiff+0xde>
 800f63c:	080241c1 	.word	0x080241c1
 800f640:	08024250 	.word	0x08024250

0800f644 <__ulp>:
 800f644:	b082      	sub	sp, #8
 800f646:	ed8d 0b00 	vstr	d0, [sp]
 800f64a:	9b01      	ldr	r3, [sp, #4]
 800f64c:	4912      	ldr	r1, [pc, #72]	; (800f698 <__ulp+0x54>)
 800f64e:	4019      	ands	r1, r3
 800f650:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f654:	2900      	cmp	r1, #0
 800f656:	dd05      	ble.n	800f664 <__ulp+0x20>
 800f658:	2200      	movs	r2, #0
 800f65a:	460b      	mov	r3, r1
 800f65c:	ec43 2b10 	vmov	d0, r2, r3
 800f660:	b002      	add	sp, #8
 800f662:	4770      	bx	lr
 800f664:	4249      	negs	r1, r1
 800f666:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f66a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f66e:	f04f 0200 	mov.w	r2, #0
 800f672:	f04f 0300 	mov.w	r3, #0
 800f676:	da04      	bge.n	800f682 <__ulp+0x3e>
 800f678:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f67c:	fa41 f300 	asr.w	r3, r1, r0
 800f680:	e7ec      	b.n	800f65c <__ulp+0x18>
 800f682:	f1a0 0114 	sub.w	r1, r0, #20
 800f686:	291e      	cmp	r1, #30
 800f688:	bfda      	itte	le
 800f68a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f68e:	fa20 f101 	lsrle.w	r1, r0, r1
 800f692:	2101      	movgt	r1, #1
 800f694:	460a      	mov	r2, r1
 800f696:	e7e1      	b.n	800f65c <__ulp+0x18>
 800f698:	7ff00000 	.word	0x7ff00000

0800f69c <__b2d>:
 800f69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f69e:	6905      	ldr	r5, [r0, #16]
 800f6a0:	f100 0714 	add.w	r7, r0, #20
 800f6a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f6a8:	1f2e      	subs	r6, r5, #4
 800f6aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f7ff fd52 	bl	800f158 <__hi0bits>
 800f6b4:	f1c0 0320 	rsb	r3, r0, #32
 800f6b8:	280a      	cmp	r0, #10
 800f6ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f738 <__b2d+0x9c>
 800f6be:	600b      	str	r3, [r1, #0]
 800f6c0:	dc14      	bgt.n	800f6ec <__b2d+0x50>
 800f6c2:	f1c0 0e0b 	rsb	lr, r0, #11
 800f6c6:	fa24 f10e 	lsr.w	r1, r4, lr
 800f6ca:	42b7      	cmp	r7, r6
 800f6cc:	ea41 030c 	orr.w	r3, r1, ip
 800f6d0:	bf34      	ite	cc
 800f6d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f6d6:	2100      	movcs	r1, #0
 800f6d8:	3015      	adds	r0, #21
 800f6da:	fa04 f000 	lsl.w	r0, r4, r0
 800f6de:	fa21 f10e 	lsr.w	r1, r1, lr
 800f6e2:	ea40 0201 	orr.w	r2, r0, r1
 800f6e6:	ec43 2b10 	vmov	d0, r2, r3
 800f6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6ec:	42b7      	cmp	r7, r6
 800f6ee:	bf3a      	itte	cc
 800f6f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f6f4:	f1a5 0608 	subcc.w	r6, r5, #8
 800f6f8:	2100      	movcs	r1, #0
 800f6fa:	380b      	subs	r0, #11
 800f6fc:	d017      	beq.n	800f72e <__b2d+0x92>
 800f6fe:	f1c0 0c20 	rsb	ip, r0, #32
 800f702:	fa04 f500 	lsl.w	r5, r4, r0
 800f706:	42be      	cmp	r6, r7
 800f708:	fa21 f40c 	lsr.w	r4, r1, ip
 800f70c:	ea45 0504 	orr.w	r5, r5, r4
 800f710:	bf8c      	ite	hi
 800f712:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f716:	2400      	movls	r4, #0
 800f718:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f71c:	fa01 f000 	lsl.w	r0, r1, r0
 800f720:	fa24 f40c 	lsr.w	r4, r4, ip
 800f724:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f728:	ea40 0204 	orr.w	r2, r0, r4
 800f72c:	e7db      	b.n	800f6e6 <__b2d+0x4a>
 800f72e:	ea44 030c 	orr.w	r3, r4, ip
 800f732:	460a      	mov	r2, r1
 800f734:	e7d7      	b.n	800f6e6 <__b2d+0x4a>
 800f736:	bf00      	nop
 800f738:	3ff00000 	.word	0x3ff00000

0800f73c <__d2b>:
 800f73c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f740:	4689      	mov	r9, r1
 800f742:	2101      	movs	r1, #1
 800f744:	ec57 6b10 	vmov	r6, r7, d0
 800f748:	4690      	mov	r8, r2
 800f74a:	f7ff fc0f 	bl	800ef6c <_Balloc>
 800f74e:	4604      	mov	r4, r0
 800f750:	b930      	cbnz	r0, 800f760 <__d2b+0x24>
 800f752:	4602      	mov	r2, r0
 800f754:	4b25      	ldr	r3, [pc, #148]	; (800f7ec <__d2b+0xb0>)
 800f756:	4826      	ldr	r0, [pc, #152]	; (800f7f0 <__d2b+0xb4>)
 800f758:	f240 310a 	movw	r1, #778	; 0x30a
 800f75c:	f7fe f9c0 	bl	800dae0 <__assert_func>
 800f760:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f764:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f768:	bb35      	cbnz	r5, 800f7b8 <__d2b+0x7c>
 800f76a:	2e00      	cmp	r6, #0
 800f76c:	9301      	str	r3, [sp, #4]
 800f76e:	d028      	beq.n	800f7c2 <__d2b+0x86>
 800f770:	4668      	mov	r0, sp
 800f772:	9600      	str	r6, [sp, #0]
 800f774:	f7ff fd10 	bl	800f198 <__lo0bits>
 800f778:	9900      	ldr	r1, [sp, #0]
 800f77a:	b300      	cbz	r0, 800f7be <__d2b+0x82>
 800f77c:	9a01      	ldr	r2, [sp, #4]
 800f77e:	f1c0 0320 	rsb	r3, r0, #32
 800f782:	fa02 f303 	lsl.w	r3, r2, r3
 800f786:	430b      	orrs	r3, r1
 800f788:	40c2      	lsrs	r2, r0
 800f78a:	6163      	str	r3, [r4, #20]
 800f78c:	9201      	str	r2, [sp, #4]
 800f78e:	9b01      	ldr	r3, [sp, #4]
 800f790:	61a3      	str	r3, [r4, #24]
 800f792:	2b00      	cmp	r3, #0
 800f794:	bf14      	ite	ne
 800f796:	2202      	movne	r2, #2
 800f798:	2201      	moveq	r2, #1
 800f79a:	6122      	str	r2, [r4, #16]
 800f79c:	b1d5      	cbz	r5, 800f7d4 <__d2b+0x98>
 800f79e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f7a2:	4405      	add	r5, r0
 800f7a4:	f8c9 5000 	str.w	r5, [r9]
 800f7a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f7ac:	f8c8 0000 	str.w	r0, [r8]
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	b003      	add	sp, #12
 800f7b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f7bc:	e7d5      	b.n	800f76a <__d2b+0x2e>
 800f7be:	6161      	str	r1, [r4, #20]
 800f7c0:	e7e5      	b.n	800f78e <__d2b+0x52>
 800f7c2:	a801      	add	r0, sp, #4
 800f7c4:	f7ff fce8 	bl	800f198 <__lo0bits>
 800f7c8:	9b01      	ldr	r3, [sp, #4]
 800f7ca:	6163      	str	r3, [r4, #20]
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	6122      	str	r2, [r4, #16]
 800f7d0:	3020      	adds	r0, #32
 800f7d2:	e7e3      	b.n	800f79c <__d2b+0x60>
 800f7d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f7d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f7dc:	f8c9 0000 	str.w	r0, [r9]
 800f7e0:	6918      	ldr	r0, [r3, #16]
 800f7e2:	f7ff fcb9 	bl	800f158 <__hi0bits>
 800f7e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f7ea:	e7df      	b.n	800f7ac <__d2b+0x70>
 800f7ec:	080241c1 	.word	0x080241c1
 800f7f0:	08024250 	.word	0x08024250

0800f7f4 <__ratio>:
 800f7f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f8:	4688      	mov	r8, r1
 800f7fa:	4669      	mov	r1, sp
 800f7fc:	4681      	mov	r9, r0
 800f7fe:	f7ff ff4d 	bl	800f69c <__b2d>
 800f802:	a901      	add	r1, sp, #4
 800f804:	4640      	mov	r0, r8
 800f806:	ec55 4b10 	vmov	r4, r5, d0
 800f80a:	f7ff ff47 	bl	800f69c <__b2d>
 800f80e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f812:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f816:	eba3 0c02 	sub.w	ip, r3, r2
 800f81a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f81e:	1a9b      	subs	r3, r3, r2
 800f820:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f824:	ec51 0b10 	vmov	r0, r1, d0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	bfd6      	itet	le
 800f82c:	460a      	movle	r2, r1
 800f82e:	462a      	movgt	r2, r5
 800f830:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f834:	468b      	mov	fp, r1
 800f836:	462f      	mov	r7, r5
 800f838:	bfd4      	ite	le
 800f83a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f83e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f842:	4620      	mov	r0, r4
 800f844:	ee10 2a10 	vmov	r2, s0
 800f848:	465b      	mov	r3, fp
 800f84a:	4639      	mov	r1, r7
 800f84c:	f7f1 f816 	bl	800087c <__aeabi_ddiv>
 800f850:	ec41 0b10 	vmov	d0, r0, r1
 800f854:	b003      	add	sp, #12
 800f856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f85a <__copybits>:
 800f85a:	3901      	subs	r1, #1
 800f85c:	b570      	push	{r4, r5, r6, lr}
 800f85e:	1149      	asrs	r1, r1, #5
 800f860:	6914      	ldr	r4, [r2, #16]
 800f862:	3101      	adds	r1, #1
 800f864:	f102 0314 	add.w	r3, r2, #20
 800f868:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f86c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f870:	1f05      	subs	r5, r0, #4
 800f872:	42a3      	cmp	r3, r4
 800f874:	d30c      	bcc.n	800f890 <__copybits+0x36>
 800f876:	1aa3      	subs	r3, r4, r2
 800f878:	3b11      	subs	r3, #17
 800f87a:	f023 0303 	bic.w	r3, r3, #3
 800f87e:	3211      	adds	r2, #17
 800f880:	42a2      	cmp	r2, r4
 800f882:	bf88      	it	hi
 800f884:	2300      	movhi	r3, #0
 800f886:	4418      	add	r0, r3
 800f888:	2300      	movs	r3, #0
 800f88a:	4288      	cmp	r0, r1
 800f88c:	d305      	bcc.n	800f89a <__copybits+0x40>
 800f88e:	bd70      	pop	{r4, r5, r6, pc}
 800f890:	f853 6b04 	ldr.w	r6, [r3], #4
 800f894:	f845 6f04 	str.w	r6, [r5, #4]!
 800f898:	e7eb      	b.n	800f872 <__copybits+0x18>
 800f89a:	f840 3b04 	str.w	r3, [r0], #4
 800f89e:	e7f4      	b.n	800f88a <__copybits+0x30>

0800f8a0 <__any_on>:
 800f8a0:	f100 0214 	add.w	r2, r0, #20
 800f8a4:	6900      	ldr	r0, [r0, #16]
 800f8a6:	114b      	asrs	r3, r1, #5
 800f8a8:	4298      	cmp	r0, r3
 800f8aa:	b510      	push	{r4, lr}
 800f8ac:	db11      	blt.n	800f8d2 <__any_on+0x32>
 800f8ae:	dd0a      	ble.n	800f8c6 <__any_on+0x26>
 800f8b0:	f011 011f 	ands.w	r1, r1, #31
 800f8b4:	d007      	beq.n	800f8c6 <__any_on+0x26>
 800f8b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f8ba:	fa24 f001 	lsr.w	r0, r4, r1
 800f8be:	fa00 f101 	lsl.w	r1, r0, r1
 800f8c2:	428c      	cmp	r4, r1
 800f8c4:	d10b      	bne.n	800f8de <__any_on+0x3e>
 800f8c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d803      	bhi.n	800f8d6 <__any_on+0x36>
 800f8ce:	2000      	movs	r0, #0
 800f8d0:	bd10      	pop	{r4, pc}
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	e7f7      	b.n	800f8c6 <__any_on+0x26>
 800f8d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f8da:	2900      	cmp	r1, #0
 800f8dc:	d0f5      	beq.n	800f8ca <__any_on+0x2a>
 800f8de:	2001      	movs	r0, #1
 800f8e0:	e7f6      	b.n	800f8d0 <__any_on+0x30>

0800f8e2 <_calloc_r>:
 800f8e2:	b513      	push	{r0, r1, r4, lr}
 800f8e4:	434a      	muls	r2, r1
 800f8e6:	4611      	mov	r1, r2
 800f8e8:	9201      	str	r2, [sp, #4]
 800f8ea:	f000 f859 	bl	800f9a0 <_malloc_r>
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	b118      	cbz	r0, 800f8fa <_calloc_r+0x18>
 800f8f2:	9a01      	ldr	r2, [sp, #4]
 800f8f4:	2100      	movs	r1, #0
 800f8f6:	f7fc fb25 	bl	800bf44 <memset>
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	b002      	add	sp, #8
 800f8fe:	bd10      	pop	{r4, pc}

0800f900 <_free_r>:
 800f900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f902:	2900      	cmp	r1, #0
 800f904:	d048      	beq.n	800f998 <_free_r+0x98>
 800f906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f90a:	9001      	str	r0, [sp, #4]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f1a1 0404 	sub.w	r4, r1, #4
 800f912:	bfb8      	it	lt
 800f914:	18e4      	addlt	r4, r4, r3
 800f916:	f000 fe8b 	bl	8010630 <__malloc_lock>
 800f91a:	4a20      	ldr	r2, [pc, #128]	; (800f99c <_free_r+0x9c>)
 800f91c:	9801      	ldr	r0, [sp, #4]
 800f91e:	6813      	ldr	r3, [r2, #0]
 800f920:	4615      	mov	r5, r2
 800f922:	b933      	cbnz	r3, 800f932 <_free_r+0x32>
 800f924:	6063      	str	r3, [r4, #4]
 800f926:	6014      	str	r4, [r2, #0]
 800f928:	b003      	add	sp, #12
 800f92a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f92e:	f000 be85 	b.w	801063c <__malloc_unlock>
 800f932:	42a3      	cmp	r3, r4
 800f934:	d90b      	bls.n	800f94e <_free_r+0x4e>
 800f936:	6821      	ldr	r1, [r4, #0]
 800f938:	1862      	adds	r2, r4, r1
 800f93a:	4293      	cmp	r3, r2
 800f93c:	bf04      	itt	eq
 800f93e:	681a      	ldreq	r2, [r3, #0]
 800f940:	685b      	ldreq	r3, [r3, #4]
 800f942:	6063      	str	r3, [r4, #4]
 800f944:	bf04      	itt	eq
 800f946:	1852      	addeq	r2, r2, r1
 800f948:	6022      	streq	r2, [r4, #0]
 800f94a:	602c      	str	r4, [r5, #0]
 800f94c:	e7ec      	b.n	800f928 <_free_r+0x28>
 800f94e:	461a      	mov	r2, r3
 800f950:	685b      	ldr	r3, [r3, #4]
 800f952:	b10b      	cbz	r3, 800f958 <_free_r+0x58>
 800f954:	42a3      	cmp	r3, r4
 800f956:	d9fa      	bls.n	800f94e <_free_r+0x4e>
 800f958:	6811      	ldr	r1, [r2, #0]
 800f95a:	1855      	adds	r5, r2, r1
 800f95c:	42a5      	cmp	r5, r4
 800f95e:	d10b      	bne.n	800f978 <_free_r+0x78>
 800f960:	6824      	ldr	r4, [r4, #0]
 800f962:	4421      	add	r1, r4
 800f964:	1854      	adds	r4, r2, r1
 800f966:	42a3      	cmp	r3, r4
 800f968:	6011      	str	r1, [r2, #0]
 800f96a:	d1dd      	bne.n	800f928 <_free_r+0x28>
 800f96c:	681c      	ldr	r4, [r3, #0]
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	6053      	str	r3, [r2, #4]
 800f972:	4421      	add	r1, r4
 800f974:	6011      	str	r1, [r2, #0]
 800f976:	e7d7      	b.n	800f928 <_free_r+0x28>
 800f978:	d902      	bls.n	800f980 <_free_r+0x80>
 800f97a:	230c      	movs	r3, #12
 800f97c:	6003      	str	r3, [r0, #0]
 800f97e:	e7d3      	b.n	800f928 <_free_r+0x28>
 800f980:	6825      	ldr	r5, [r4, #0]
 800f982:	1961      	adds	r1, r4, r5
 800f984:	428b      	cmp	r3, r1
 800f986:	bf04      	itt	eq
 800f988:	6819      	ldreq	r1, [r3, #0]
 800f98a:	685b      	ldreq	r3, [r3, #4]
 800f98c:	6063      	str	r3, [r4, #4]
 800f98e:	bf04      	itt	eq
 800f990:	1949      	addeq	r1, r1, r5
 800f992:	6021      	streq	r1, [r4, #0]
 800f994:	6054      	str	r4, [r2, #4]
 800f996:	e7c7      	b.n	800f928 <_free_r+0x28>
 800f998:	b003      	add	sp, #12
 800f99a:	bd30      	pop	{r4, r5, pc}
 800f99c:	20000274 	.word	0x20000274

0800f9a0 <_malloc_r>:
 800f9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9a2:	1ccd      	adds	r5, r1, #3
 800f9a4:	f025 0503 	bic.w	r5, r5, #3
 800f9a8:	3508      	adds	r5, #8
 800f9aa:	2d0c      	cmp	r5, #12
 800f9ac:	bf38      	it	cc
 800f9ae:	250c      	movcc	r5, #12
 800f9b0:	2d00      	cmp	r5, #0
 800f9b2:	4606      	mov	r6, r0
 800f9b4:	db01      	blt.n	800f9ba <_malloc_r+0x1a>
 800f9b6:	42a9      	cmp	r1, r5
 800f9b8:	d903      	bls.n	800f9c2 <_malloc_r+0x22>
 800f9ba:	230c      	movs	r3, #12
 800f9bc:	6033      	str	r3, [r6, #0]
 800f9be:	2000      	movs	r0, #0
 800f9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9c2:	f000 fe35 	bl	8010630 <__malloc_lock>
 800f9c6:	4921      	ldr	r1, [pc, #132]	; (800fa4c <_malloc_r+0xac>)
 800f9c8:	680a      	ldr	r2, [r1, #0]
 800f9ca:	4614      	mov	r4, r2
 800f9cc:	b99c      	cbnz	r4, 800f9f6 <_malloc_r+0x56>
 800f9ce:	4f20      	ldr	r7, [pc, #128]	; (800fa50 <_malloc_r+0xb0>)
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	b923      	cbnz	r3, 800f9de <_malloc_r+0x3e>
 800f9d4:	4621      	mov	r1, r4
 800f9d6:	4630      	mov	r0, r6
 800f9d8:	f000 fafa 	bl	800ffd0 <_sbrk_r>
 800f9dc:	6038      	str	r0, [r7, #0]
 800f9de:	4629      	mov	r1, r5
 800f9e0:	4630      	mov	r0, r6
 800f9e2:	f000 faf5 	bl	800ffd0 <_sbrk_r>
 800f9e6:	1c43      	adds	r3, r0, #1
 800f9e8:	d123      	bne.n	800fa32 <_malloc_r+0x92>
 800f9ea:	230c      	movs	r3, #12
 800f9ec:	6033      	str	r3, [r6, #0]
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f000 fe24 	bl	801063c <__malloc_unlock>
 800f9f4:	e7e3      	b.n	800f9be <_malloc_r+0x1e>
 800f9f6:	6823      	ldr	r3, [r4, #0]
 800f9f8:	1b5b      	subs	r3, r3, r5
 800f9fa:	d417      	bmi.n	800fa2c <_malloc_r+0x8c>
 800f9fc:	2b0b      	cmp	r3, #11
 800f9fe:	d903      	bls.n	800fa08 <_malloc_r+0x68>
 800fa00:	6023      	str	r3, [r4, #0]
 800fa02:	441c      	add	r4, r3
 800fa04:	6025      	str	r5, [r4, #0]
 800fa06:	e004      	b.n	800fa12 <_malloc_r+0x72>
 800fa08:	6863      	ldr	r3, [r4, #4]
 800fa0a:	42a2      	cmp	r2, r4
 800fa0c:	bf0c      	ite	eq
 800fa0e:	600b      	streq	r3, [r1, #0]
 800fa10:	6053      	strne	r3, [r2, #4]
 800fa12:	4630      	mov	r0, r6
 800fa14:	f000 fe12 	bl	801063c <__malloc_unlock>
 800fa18:	f104 000b 	add.w	r0, r4, #11
 800fa1c:	1d23      	adds	r3, r4, #4
 800fa1e:	f020 0007 	bic.w	r0, r0, #7
 800fa22:	1ac2      	subs	r2, r0, r3
 800fa24:	d0cc      	beq.n	800f9c0 <_malloc_r+0x20>
 800fa26:	1a1b      	subs	r3, r3, r0
 800fa28:	50a3      	str	r3, [r4, r2]
 800fa2a:	e7c9      	b.n	800f9c0 <_malloc_r+0x20>
 800fa2c:	4622      	mov	r2, r4
 800fa2e:	6864      	ldr	r4, [r4, #4]
 800fa30:	e7cc      	b.n	800f9cc <_malloc_r+0x2c>
 800fa32:	1cc4      	adds	r4, r0, #3
 800fa34:	f024 0403 	bic.w	r4, r4, #3
 800fa38:	42a0      	cmp	r0, r4
 800fa3a:	d0e3      	beq.n	800fa04 <_malloc_r+0x64>
 800fa3c:	1a21      	subs	r1, r4, r0
 800fa3e:	4630      	mov	r0, r6
 800fa40:	f000 fac6 	bl	800ffd0 <_sbrk_r>
 800fa44:	3001      	adds	r0, #1
 800fa46:	d1dd      	bne.n	800fa04 <_malloc_r+0x64>
 800fa48:	e7cf      	b.n	800f9ea <_malloc_r+0x4a>
 800fa4a:	bf00      	nop
 800fa4c:	20000274 	.word	0x20000274
 800fa50:	20000278 	.word	0x20000278

0800fa54 <__ssputs_r>:
 800fa54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa58:	688e      	ldr	r6, [r1, #8]
 800fa5a:	429e      	cmp	r6, r3
 800fa5c:	4682      	mov	sl, r0
 800fa5e:	460c      	mov	r4, r1
 800fa60:	4690      	mov	r8, r2
 800fa62:	461f      	mov	r7, r3
 800fa64:	d838      	bhi.n	800fad8 <__ssputs_r+0x84>
 800fa66:	898a      	ldrh	r2, [r1, #12]
 800fa68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fa6c:	d032      	beq.n	800fad4 <__ssputs_r+0x80>
 800fa6e:	6825      	ldr	r5, [r4, #0]
 800fa70:	6909      	ldr	r1, [r1, #16]
 800fa72:	eba5 0901 	sub.w	r9, r5, r1
 800fa76:	6965      	ldr	r5, [r4, #20]
 800fa78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa80:	3301      	adds	r3, #1
 800fa82:	444b      	add	r3, r9
 800fa84:	106d      	asrs	r5, r5, #1
 800fa86:	429d      	cmp	r5, r3
 800fa88:	bf38      	it	cc
 800fa8a:	461d      	movcc	r5, r3
 800fa8c:	0553      	lsls	r3, r2, #21
 800fa8e:	d531      	bpl.n	800faf4 <__ssputs_r+0xa0>
 800fa90:	4629      	mov	r1, r5
 800fa92:	f7ff ff85 	bl	800f9a0 <_malloc_r>
 800fa96:	4606      	mov	r6, r0
 800fa98:	b950      	cbnz	r0, 800fab0 <__ssputs_r+0x5c>
 800fa9a:	230c      	movs	r3, #12
 800fa9c:	f8ca 3000 	str.w	r3, [sl]
 800faa0:	89a3      	ldrh	r3, [r4, #12]
 800faa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faa6:	81a3      	strh	r3, [r4, #12]
 800faa8:	f04f 30ff 	mov.w	r0, #4294967295
 800faac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fab0:	6921      	ldr	r1, [r4, #16]
 800fab2:	464a      	mov	r2, r9
 800fab4:	f7ff fa4c 	bl	800ef50 <memcpy>
 800fab8:	89a3      	ldrh	r3, [r4, #12]
 800faba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fabe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fac2:	81a3      	strh	r3, [r4, #12]
 800fac4:	6126      	str	r6, [r4, #16]
 800fac6:	6165      	str	r5, [r4, #20]
 800fac8:	444e      	add	r6, r9
 800faca:	eba5 0509 	sub.w	r5, r5, r9
 800face:	6026      	str	r6, [r4, #0]
 800fad0:	60a5      	str	r5, [r4, #8]
 800fad2:	463e      	mov	r6, r7
 800fad4:	42be      	cmp	r6, r7
 800fad6:	d900      	bls.n	800fada <__ssputs_r+0x86>
 800fad8:	463e      	mov	r6, r7
 800fada:	4632      	mov	r2, r6
 800fadc:	6820      	ldr	r0, [r4, #0]
 800fade:	4641      	mov	r1, r8
 800fae0:	f000 fd8c 	bl	80105fc <memmove>
 800fae4:	68a3      	ldr	r3, [r4, #8]
 800fae6:	6822      	ldr	r2, [r4, #0]
 800fae8:	1b9b      	subs	r3, r3, r6
 800faea:	4432      	add	r2, r6
 800faec:	60a3      	str	r3, [r4, #8]
 800faee:	6022      	str	r2, [r4, #0]
 800faf0:	2000      	movs	r0, #0
 800faf2:	e7db      	b.n	800faac <__ssputs_r+0x58>
 800faf4:	462a      	mov	r2, r5
 800faf6:	f000 fda7 	bl	8010648 <_realloc_r>
 800fafa:	4606      	mov	r6, r0
 800fafc:	2800      	cmp	r0, #0
 800fafe:	d1e1      	bne.n	800fac4 <__ssputs_r+0x70>
 800fb00:	6921      	ldr	r1, [r4, #16]
 800fb02:	4650      	mov	r0, sl
 800fb04:	f7ff fefc 	bl	800f900 <_free_r>
 800fb08:	e7c7      	b.n	800fa9a <__ssputs_r+0x46>
	...

0800fb0c <_svfiprintf_r>:
 800fb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb10:	4698      	mov	r8, r3
 800fb12:	898b      	ldrh	r3, [r1, #12]
 800fb14:	061b      	lsls	r3, r3, #24
 800fb16:	b09d      	sub	sp, #116	; 0x74
 800fb18:	4607      	mov	r7, r0
 800fb1a:	460d      	mov	r5, r1
 800fb1c:	4614      	mov	r4, r2
 800fb1e:	d50e      	bpl.n	800fb3e <_svfiprintf_r+0x32>
 800fb20:	690b      	ldr	r3, [r1, #16]
 800fb22:	b963      	cbnz	r3, 800fb3e <_svfiprintf_r+0x32>
 800fb24:	2140      	movs	r1, #64	; 0x40
 800fb26:	f7ff ff3b 	bl	800f9a0 <_malloc_r>
 800fb2a:	6028      	str	r0, [r5, #0]
 800fb2c:	6128      	str	r0, [r5, #16]
 800fb2e:	b920      	cbnz	r0, 800fb3a <_svfiprintf_r+0x2e>
 800fb30:	230c      	movs	r3, #12
 800fb32:	603b      	str	r3, [r7, #0]
 800fb34:	f04f 30ff 	mov.w	r0, #4294967295
 800fb38:	e0d1      	b.n	800fcde <_svfiprintf_r+0x1d2>
 800fb3a:	2340      	movs	r3, #64	; 0x40
 800fb3c:	616b      	str	r3, [r5, #20]
 800fb3e:	2300      	movs	r3, #0
 800fb40:	9309      	str	r3, [sp, #36]	; 0x24
 800fb42:	2320      	movs	r3, #32
 800fb44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb48:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb4c:	2330      	movs	r3, #48	; 0x30
 800fb4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fcf8 <_svfiprintf_r+0x1ec>
 800fb52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb56:	f04f 0901 	mov.w	r9, #1
 800fb5a:	4623      	mov	r3, r4
 800fb5c:	469a      	mov	sl, r3
 800fb5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb62:	b10a      	cbz	r2, 800fb68 <_svfiprintf_r+0x5c>
 800fb64:	2a25      	cmp	r2, #37	; 0x25
 800fb66:	d1f9      	bne.n	800fb5c <_svfiprintf_r+0x50>
 800fb68:	ebba 0b04 	subs.w	fp, sl, r4
 800fb6c:	d00b      	beq.n	800fb86 <_svfiprintf_r+0x7a>
 800fb6e:	465b      	mov	r3, fp
 800fb70:	4622      	mov	r2, r4
 800fb72:	4629      	mov	r1, r5
 800fb74:	4638      	mov	r0, r7
 800fb76:	f7ff ff6d 	bl	800fa54 <__ssputs_r>
 800fb7a:	3001      	adds	r0, #1
 800fb7c:	f000 80aa 	beq.w	800fcd4 <_svfiprintf_r+0x1c8>
 800fb80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb82:	445a      	add	r2, fp
 800fb84:	9209      	str	r2, [sp, #36]	; 0x24
 800fb86:	f89a 3000 	ldrb.w	r3, [sl]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	f000 80a2 	beq.w	800fcd4 <_svfiprintf_r+0x1c8>
 800fb90:	2300      	movs	r3, #0
 800fb92:	f04f 32ff 	mov.w	r2, #4294967295
 800fb96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb9a:	f10a 0a01 	add.w	sl, sl, #1
 800fb9e:	9304      	str	r3, [sp, #16]
 800fba0:	9307      	str	r3, [sp, #28]
 800fba2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fba6:	931a      	str	r3, [sp, #104]	; 0x68
 800fba8:	4654      	mov	r4, sl
 800fbaa:	2205      	movs	r2, #5
 800fbac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbb0:	4851      	ldr	r0, [pc, #324]	; (800fcf8 <_svfiprintf_r+0x1ec>)
 800fbb2:	f7f0 fb2d 	bl	8000210 <memchr>
 800fbb6:	9a04      	ldr	r2, [sp, #16]
 800fbb8:	b9d8      	cbnz	r0, 800fbf2 <_svfiprintf_r+0xe6>
 800fbba:	06d0      	lsls	r0, r2, #27
 800fbbc:	bf44      	itt	mi
 800fbbe:	2320      	movmi	r3, #32
 800fbc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbc4:	0711      	lsls	r1, r2, #28
 800fbc6:	bf44      	itt	mi
 800fbc8:	232b      	movmi	r3, #43	; 0x2b
 800fbca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbce:	f89a 3000 	ldrb.w	r3, [sl]
 800fbd2:	2b2a      	cmp	r3, #42	; 0x2a
 800fbd4:	d015      	beq.n	800fc02 <_svfiprintf_r+0xf6>
 800fbd6:	9a07      	ldr	r2, [sp, #28]
 800fbd8:	4654      	mov	r4, sl
 800fbda:	2000      	movs	r0, #0
 800fbdc:	f04f 0c0a 	mov.w	ip, #10
 800fbe0:	4621      	mov	r1, r4
 800fbe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbe6:	3b30      	subs	r3, #48	; 0x30
 800fbe8:	2b09      	cmp	r3, #9
 800fbea:	d94e      	bls.n	800fc8a <_svfiprintf_r+0x17e>
 800fbec:	b1b0      	cbz	r0, 800fc1c <_svfiprintf_r+0x110>
 800fbee:	9207      	str	r2, [sp, #28]
 800fbf0:	e014      	b.n	800fc1c <_svfiprintf_r+0x110>
 800fbf2:	eba0 0308 	sub.w	r3, r0, r8
 800fbf6:	fa09 f303 	lsl.w	r3, r9, r3
 800fbfa:	4313      	orrs	r3, r2
 800fbfc:	9304      	str	r3, [sp, #16]
 800fbfe:	46a2      	mov	sl, r4
 800fc00:	e7d2      	b.n	800fba8 <_svfiprintf_r+0x9c>
 800fc02:	9b03      	ldr	r3, [sp, #12]
 800fc04:	1d19      	adds	r1, r3, #4
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	9103      	str	r1, [sp, #12]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	bfbb      	ittet	lt
 800fc0e:	425b      	neglt	r3, r3
 800fc10:	f042 0202 	orrlt.w	r2, r2, #2
 800fc14:	9307      	strge	r3, [sp, #28]
 800fc16:	9307      	strlt	r3, [sp, #28]
 800fc18:	bfb8      	it	lt
 800fc1a:	9204      	strlt	r2, [sp, #16]
 800fc1c:	7823      	ldrb	r3, [r4, #0]
 800fc1e:	2b2e      	cmp	r3, #46	; 0x2e
 800fc20:	d10c      	bne.n	800fc3c <_svfiprintf_r+0x130>
 800fc22:	7863      	ldrb	r3, [r4, #1]
 800fc24:	2b2a      	cmp	r3, #42	; 0x2a
 800fc26:	d135      	bne.n	800fc94 <_svfiprintf_r+0x188>
 800fc28:	9b03      	ldr	r3, [sp, #12]
 800fc2a:	1d1a      	adds	r2, r3, #4
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	9203      	str	r2, [sp, #12]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	bfb8      	it	lt
 800fc34:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc38:	3402      	adds	r4, #2
 800fc3a:	9305      	str	r3, [sp, #20]
 800fc3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fd08 <_svfiprintf_r+0x1fc>
 800fc40:	7821      	ldrb	r1, [r4, #0]
 800fc42:	2203      	movs	r2, #3
 800fc44:	4650      	mov	r0, sl
 800fc46:	f7f0 fae3 	bl	8000210 <memchr>
 800fc4a:	b140      	cbz	r0, 800fc5e <_svfiprintf_r+0x152>
 800fc4c:	2340      	movs	r3, #64	; 0x40
 800fc4e:	eba0 000a 	sub.w	r0, r0, sl
 800fc52:	fa03 f000 	lsl.w	r0, r3, r0
 800fc56:	9b04      	ldr	r3, [sp, #16]
 800fc58:	4303      	orrs	r3, r0
 800fc5a:	3401      	adds	r4, #1
 800fc5c:	9304      	str	r3, [sp, #16]
 800fc5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc62:	4826      	ldr	r0, [pc, #152]	; (800fcfc <_svfiprintf_r+0x1f0>)
 800fc64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc68:	2206      	movs	r2, #6
 800fc6a:	f7f0 fad1 	bl	8000210 <memchr>
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	d038      	beq.n	800fce4 <_svfiprintf_r+0x1d8>
 800fc72:	4b23      	ldr	r3, [pc, #140]	; (800fd00 <_svfiprintf_r+0x1f4>)
 800fc74:	bb1b      	cbnz	r3, 800fcbe <_svfiprintf_r+0x1b2>
 800fc76:	9b03      	ldr	r3, [sp, #12]
 800fc78:	3307      	adds	r3, #7
 800fc7a:	f023 0307 	bic.w	r3, r3, #7
 800fc7e:	3308      	adds	r3, #8
 800fc80:	9303      	str	r3, [sp, #12]
 800fc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc84:	4433      	add	r3, r6
 800fc86:	9309      	str	r3, [sp, #36]	; 0x24
 800fc88:	e767      	b.n	800fb5a <_svfiprintf_r+0x4e>
 800fc8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc8e:	460c      	mov	r4, r1
 800fc90:	2001      	movs	r0, #1
 800fc92:	e7a5      	b.n	800fbe0 <_svfiprintf_r+0xd4>
 800fc94:	2300      	movs	r3, #0
 800fc96:	3401      	adds	r4, #1
 800fc98:	9305      	str	r3, [sp, #20]
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	f04f 0c0a 	mov.w	ip, #10
 800fca0:	4620      	mov	r0, r4
 800fca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fca6:	3a30      	subs	r2, #48	; 0x30
 800fca8:	2a09      	cmp	r2, #9
 800fcaa:	d903      	bls.n	800fcb4 <_svfiprintf_r+0x1a8>
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d0c5      	beq.n	800fc3c <_svfiprintf_r+0x130>
 800fcb0:	9105      	str	r1, [sp, #20]
 800fcb2:	e7c3      	b.n	800fc3c <_svfiprintf_r+0x130>
 800fcb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800fcb8:	4604      	mov	r4, r0
 800fcba:	2301      	movs	r3, #1
 800fcbc:	e7f0      	b.n	800fca0 <_svfiprintf_r+0x194>
 800fcbe:	ab03      	add	r3, sp, #12
 800fcc0:	9300      	str	r3, [sp, #0]
 800fcc2:	462a      	mov	r2, r5
 800fcc4:	4b0f      	ldr	r3, [pc, #60]	; (800fd04 <_svfiprintf_r+0x1f8>)
 800fcc6:	a904      	add	r1, sp, #16
 800fcc8:	4638      	mov	r0, r7
 800fcca:	f7fc f9e3 	bl	800c094 <_printf_float>
 800fcce:	1c42      	adds	r2, r0, #1
 800fcd0:	4606      	mov	r6, r0
 800fcd2:	d1d6      	bne.n	800fc82 <_svfiprintf_r+0x176>
 800fcd4:	89ab      	ldrh	r3, [r5, #12]
 800fcd6:	065b      	lsls	r3, r3, #25
 800fcd8:	f53f af2c 	bmi.w	800fb34 <_svfiprintf_r+0x28>
 800fcdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcde:	b01d      	add	sp, #116	; 0x74
 800fce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fce4:	ab03      	add	r3, sp, #12
 800fce6:	9300      	str	r3, [sp, #0]
 800fce8:	462a      	mov	r2, r5
 800fcea:	4b06      	ldr	r3, [pc, #24]	; (800fd04 <_svfiprintf_r+0x1f8>)
 800fcec:	a904      	add	r1, sp, #16
 800fcee:	4638      	mov	r0, r7
 800fcf0:	f7fc fc74 	bl	800c5dc <_printf_i>
 800fcf4:	e7eb      	b.n	800fcce <_svfiprintf_r+0x1c2>
 800fcf6:	bf00      	nop
 800fcf8:	080243ac 	.word	0x080243ac
 800fcfc:	080243b6 	.word	0x080243b6
 800fd00:	0800c095 	.word	0x0800c095
 800fd04:	0800fa55 	.word	0x0800fa55
 800fd08:	080243b2 	.word	0x080243b2

0800fd0c <__sfputc_r>:
 800fd0c:	6893      	ldr	r3, [r2, #8]
 800fd0e:	3b01      	subs	r3, #1
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	b410      	push	{r4}
 800fd14:	6093      	str	r3, [r2, #8]
 800fd16:	da08      	bge.n	800fd2a <__sfputc_r+0x1e>
 800fd18:	6994      	ldr	r4, [r2, #24]
 800fd1a:	42a3      	cmp	r3, r4
 800fd1c:	db01      	blt.n	800fd22 <__sfputc_r+0x16>
 800fd1e:	290a      	cmp	r1, #10
 800fd20:	d103      	bne.n	800fd2a <__sfputc_r+0x1e>
 800fd22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd26:	f000 b975 	b.w	8010014 <__swbuf_r>
 800fd2a:	6813      	ldr	r3, [r2, #0]
 800fd2c:	1c58      	adds	r0, r3, #1
 800fd2e:	6010      	str	r0, [r2, #0]
 800fd30:	7019      	strb	r1, [r3, #0]
 800fd32:	4608      	mov	r0, r1
 800fd34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd38:	4770      	bx	lr

0800fd3a <__sfputs_r>:
 800fd3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd3c:	4606      	mov	r6, r0
 800fd3e:	460f      	mov	r7, r1
 800fd40:	4614      	mov	r4, r2
 800fd42:	18d5      	adds	r5, r2, r3
 800fd44:	42ac      	cmp	r4, r5
 800fd46:	d101      	bne.n	800fd4c <__sfputs_r+0x12>
 800fd48:	2000      	movs	r0, #0
 800fd4a:	e007      	b.n	800fd5c <__sfputs_r+0x22>
 800fd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd50:	463a      	mov	r2, r7
 800fd52:	4630      	mov	r0, r6
 800fd54:	f7ff ffda 	bl	800fd0c <__sfputc_r>
 800fd58:	1c43      	adds	r3, r0, #1
 800fd5a:	d1f3      	bne.n	800fd44 <__sfputs_r+0xa>
 800fd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd60 <_vfiprintf_r>:
 800fd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd64:	460d      	mov	r5, r1
 800fd66:	b09d      	sub	sp, #116	; 0x74
 800fd68:	4614      	mov	r4, r2
 800fd6a:	4698      	mov	r8, r3
 800fd6c:	4606      	mov	r6, r0
 800fd6e:	b118      	cbz	r0, 800fd78 <_vfiprintf_r+0x18>
 800fd70:	6983      	ldr	r3, [r0, #24]
 800fd72:	b90b      	cbnz	r3, 800fd78 <_vfiprintf_r+0x18>
 800fd74:	f000 fb3e 	bl	80103f4 <__sinit>
 800fd78:	4b89      	ldr	r3, [pc, #548]	; (800ffa0 <_vfiprintf_r+0x240>)
 800fd7a:	429d      	cmp	r5, r3
 800fd7c:	d11b      	bne.n	800fdb6 <_vfiprintf_r+0x56>
 800fd7e:	6875      	ldr	r5, [r6, #4]
 800fd80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd82:	07d9      	lsls	r1, r3, #31
 800fd84:	d405      	bmi.n	800fd92 <_vfiprintf_r+0x32>
 800fd86:	89ab      	ldrh	r3, [r5, #12]
 800fd88:	059a      	lsls	r2, r3, #22
 800fd8a:	d402      	bmi.n	800fd92 <_vfiprintf_r+0x32>
 800fd8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd8e:	f000 fbcf 	bl	8010530 <__retarget_lock_acquire_recursive>
 800fd92:	89ab      	ldrh	r3, [r5, #12]
 800fd94:	071b      	lsls	r3, r3, #28
 800fd96:	d501      	bpl.n	800fd9c <_vfiprintf_r+0x3c>
 800fd98:	692b      	ldr	r3, [r5, #16]
 800fd9a:	b9eb      	cbnz	r3, 800fdd8 <_vfiprintf_r+0x78>
 800fd9c:	4629      	mov	r1, r5
 800fd9e:	4630      	mov	r0, r6
 800fda0:	f000 f998 	bl	80100d4 <__swsetup_r>
 800fda4:	b1c0      	cbz	r0, 800fdd8 <_vfiprintf_r+0x78>
 800fda6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fda8:	07dc      	lsls	r4, r3, #31
 800fdaa:	d50e      	bpl.n	800fdca <_vfiprintf_r+0x6a>
 800fdac:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb0:	b01d      	add	sp, #116	; 0x74
 800fdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdb6:	4b7b      	ldr	r3, [pc, #492]	; (800ffa4 <_vfiprintf_r+0x244>)
 800fdb8:	429d      	cmp	r5, r3
 800fdba:	d101      	bne.n	800fdc0 <_vfiprintf_r+0x60>
 800fdbc:	68b5      	ldr	r5, [r6, #8]
 800fdbe:	e7df      	b.n	800fd80 <_vfiprintf_r+0x20>
 800fdc0:	4b79      	ldr	r3, [pc, #484]	; (800ffa8 <_vfiprintf_r+0x248>)
 800fdc2:	429d      	cmp	r5, r3
 800fdc4:	bf08      	it	eq
 800fdc6:	68f5      	ldreq	r5, [r6, #12]
 800fdc8:	e7da      	b.n	800fd80 <_vfiprintf_r+0x20>
 800fdca:	89ab      	ldrh	r3, [r5, #12]
 800fdcc:	0598      	lsls	r0, r3, #22
 800fdce:	d4ed      	bmi.n	800fdac <_vfiprintf_r+0x4c>
 800fdd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdd2:	f000 fbae 	bl	8010532 <__retarget_lock_release_recursive>
 800fdd6:	e7e9      	b.n	800fdac <_vfiprintf_r+0x4c>
 800fdd8:	2300      	movs	r3, #0
 800fdda:	9309      	str	r3, [sp, #36]	; 0x24
 800fddc:	2320      	movs	r3, #32
 800fdde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fde2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fde6:	2330      	movs	r3, #48	; 0x30
 800fde8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ffac <_vfiprintf_r+0x24c>
 800fdec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fdf0:	f04f 0901 	mov.w	r9, #1
 800fdf4:	4623      	mov	r3, r4
 800fdf6:	469a      	mov	sl, r3
 800fdf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdfc:	b10a      	cbz	r2, 800fe02 <_vfiprintf_r+0xa2>
 800fdfe:	2a25      	cmp	r2, #37	; 0x25
 800fe00:	d1f9      	bne.n	800fdf6 <_vfiprintf_r+0x96>
 800fe02:	ebba 0b04 	subs.w	fp, sl, r4
 800fe06:	d00b      	beq.n	800fe20 <_vfiprintf_r+0xc0>
 800fe08:	465b      	mov	r3, fp
 800fe0a:	4622      	mov	r2, r4
 800fe0c:	4629      	mov	r1, r5
 800fe0e:	4630      	mov	r0, r6
 800fe10:	f7ff ff93 	bl	800fd3a <__sfputs_r>
 800fe14:	3001      	adds	r0, #1
 800fe16:	f000 80aa 	beq.w	800ff6e <_vfiprintf_r+0x20e>
 800fe1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe1c:	445a      	add	r2, fp
 800fe1e:	9209      	str	r2, [sp, #36]	; 0x24
 800fe20:	f89a 3000 	ldrb.w	r3, [sl]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f000 80a2 	beq.w	800ff6e <_vfiprintf_r+0x20e>
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe34:	f10a 0a01 	add.w	sl, sl, #1
 800fe38:	9304      	str	r3, [sp, #16]
 800fe3a:	9307      	str	r3, [sp, #28]
 800fe3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe40:	931a      	str	r3, [sp, #104]	; 0x68
 800fe42:	4654      	mov	r4, sl
 800fe44:	2205      	movs	r2, #5
 800fe46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe4a:	4858      	ldr	r0, [pc, #352]	; (800ffac <_vfiprintf_r+0x24c>)
 800fe4c:	f7f0 f9e0 	bl	8000210 <memchr>
 800fe50:	9a04      	ldr	r2, [sp, #16]
 800fe52:	b9d8      	cbnz	r0, 800fe8c <_vfiprintf_r+0x12c>
 800fe54:	06d1      	lsls	r1, r2, #27
 800fe56:	bf44      	itt	mi
 800fe58:	2320      	movmi	r3, #32
 800fe5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe5e:	0713      	lsls	r3, r2, #28
 800fe60:	bf44      	itt	mi
 800fe62:	232b      	movmi	r3, #43	; 0x2b
 800fe64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe68:	f89a 3000 	ldrb.w	r3, [sl]
 800fe6c:	2b2a      	cmp	r3, #42	; 0x2a
 800fe6e:	d015      	beq.n	800fe9c <_vfiprintf_r+0x13c>
 800fe70:	9a07      	ldr	r2, [sp, #28]
 800fe72:	4654      	mov	r4, sl
 800fe74:	2000      	movs	r0, #0
 800fe76:	f04f 0c0a 	mov.w	ip, #10
 800fe7a:	4621      	mov	r1, r4
 800fe7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe80:	3b30      	subs	r3, #48	; 0x30
 800fe82:	2b09      	cmp	r3, #9
 800fe84:	d94e      	bls.n	800ff24 <_vfiprintf_r+0x1c4>
 800fe86:	b1b0      	cbz	r0, 800feb6 <_vfiprintf_r+0x156>
 800fe88:	9207      	str	r2, [sp, #28]
 800fe8a:	e014      	b.n	800feb6 <_vfiprintf_r+0x156>
 800fe8c:	eba0 0308 	sub.w	r3, r0, r8
 800fe90:	fa09 f303 	lsl.w	r3, r9, r3
 800fe94:	4313      	orrs	r3, r2
 800fe96:	9304      	str	r3, [sp, #16]
 800fe98:	46a2      	mov	sl, r4
 800fe9a:	e7d2      	b.n	800fe42 <_vfiprintf_r+0xe2>
 800fe9c:	9b03      	ldr	r3, [sp, #12]
 800fe9e:	1d19      	adds	r1, r3, #4
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	9103      	str	r1, [sp, #12]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	bfbb      	ittet	lt
 800fea8:	425b      	neglt	r3, r3
 800feaa:	f042 0202 	orrlt.w	r2, r2, #2
 800feae:	9307      	strge	r3, [sp, #28]
 800feb0:	9307      	strlt	r3, [sp, #28]
 800feb2:	bfb8      	it	lt
 800feb4:	9204      	strlt	r2, [sp, #16]
 800feb6:	7823      	ldrb	r3, [r4, #0]
 800feb8:	2b2e      	cmp	r3, #46	; 0x2e
 800feba:	d10c      	bne.n	800fed6 <_vfiprintf_r+0x176>
 800febc:	7863      	ldrb	r3, [r4, #1]
 800febe:	2b2a      	cmp	r3, #42	; 0x2a
 800fec0:	d135      	bne.n	800ff2e <_vfiprintf_r+0x1ce>
 800fec2:	9b03      	ldr	r3, [sp, #12]
 800fec4:	1d1a      	adds	r2, r3, #4
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	9203      	str	r2, [sp, #12]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	bfb8      	it	lt
 800fece:	f04f 33ff 	movlt.w	r3, #4294967295
 800fed2:	3402      	adds	r4, #2
 800fed4:	9305      	str	r3, [sp, #20]
 800fed6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ffbc <_vfiprintf_r+0x25c>
 800feda:	7821      	ldrb	r1, [r4, #0]
 800fedc:	2203      	movs	r2, #3
 800fede:	4650      	mov	r0, sl
 800fee0:	f7f0 f996 	bl	8000210 <memchr>
 800fee4:	b140      	cbz	r0, 800fef8 <_vfiprintf_r+0x198>
 800fee6:	2340      	movs	r3, #64	; 0x40
 800fee8:	eba0 000a 	sub.w	r0, r0, sl
 800feec:	fa03 f000 	lsl.w	r0, r3, r0
 800fef0:	9b04      	ldr	r3, [sp, #16]
 800fef2:	4303      	orrs	r3, r0
 800fef4:	3401      	adds	r4, #1
 800fef6:	9304      	str	r3, [sp, #16]
 800fef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fefc:	482c      	ldr	r0, [pc, #176]	; (800ffb0 <_vfiprintf_r+0x250>)
 800fefe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff02:	2206      	movs	r2, #6
 800ff04:	f7f0 f984 	bl	8000210 <memchr>
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	d03f      	beq.n	800ff8c <_vfiprintf_r+0x22c>
 800ff0c:	4b29      	ldr	r3, [pc, #164]	; (800ffb4 <_vfiprintf_r+0x254>)
 800ff0e:	bb1b      	cbnz	r3, 800ff58 <_vfiprintf_r+0x1f8>
 800ff10:	9b03      	ldr	r3, [sp, #12]
 800ff12:	3307      	adds	r3, #7
 800ff14:	f023 0307 	bic.w	r3, r3, #7
 800ff18:	3308      	adds	r3, #8
 800ff1a:	9303      	str	r3, [sp, #12]
 800ff1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff1e:	443b      	add	r3, r7
 800ff20:	9309      	str	r3, [sp, #36]	; 0x24
 800ff22:	e767      	b.n	800fdf4 <_vfiprintf_r+0x94>
 800ff24:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff28:	460c      	mov	r4, r1
 800ff2a:	2001      	movs	r0, #1
 800ff2c:	e7a5      	b.n	800fe7a <_vfiprintf_r+0x11a>
 800ff2e:	2300      	movs	r3, #0
 800ff30:	3401      	adds	r4, #1
 800ff32:	9305      	str	r3, [sp, #20]
 800ff34:	4619      	mov	r1, r3
 800ff36:	f04f 0c0a 	mov.w	ip, #10
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff40:	3a30      	subs	r2, #48	; 0x30
 800ff42:	2a09      	cmp	r2, #9
 800ff44:	d903      	bls.n	800ff4e <_vfiprintf_r+0x1ee>
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d0c5      	beq.n	800fed6 <_vfiprintf_r+0x176>
 800ff4a:	9105      	str	r1, [sp, #20]
 800ff4c:	e7c3      	b.n	800fed6 <_vfiprintf_r+0x176>
 800ff4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff52:	4604      	mov	r4, r0
 800ff54:	2301      	movs	r3, #1
 800ff56:	e7f0      	b.n	800ff3a <_vfiprintf_r+0x1da>
 800ff58:	ab03      	add	r3, sp, #12
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	462a      	mov	r2, r5
 800ff5e:	4b16      	ldr	r3, [pc, #88]	; (800ffb8 <_vfiprintf_r+0x258>)
 800ff60:	a904      	add	r1, sp, #16
 800ff62:	4630      	mov	r0, r6
 800ff64:	f7fc f896 	bl	800c094 <_printf_float>
 800ff68:	4607      	mov	r7, r0
 800ff6a:	1c78      	adds	r0, r7, #1
 800ff6c:	d1d6      	bne.n	800ff1c <_vfiprintf_r+0x1bc>
 800ff6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff70:	07d9      	lsls	r1, r3, #31
 800ff72:	d405      	bmi.n	800ff80 <_vfiprintf_r+0x220>
 800ff74:	89ab      	ldrh	r3, [r5, #12]
 800ff76:	059a      	lsls	r2, r3, #22
 800ff78:	d402      	bmi.n	800ff80 <_vfiprintf_r+0x220>
 800ff7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff7c:	f000 fad9 	bl	8010532 <__retarget_lock_release_recursive>
 800ff80:	89ab      	ldrh	r3, [r5, #12]
 800ff82:	065b      	lsls	r3, r3, #25
 800ff84:	f53f af12 	bmi.w	800fdac <_vfiprintf_r+0x4c>
 800ff88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff8a:	e711      	b.n	800fdb0 <_vfiprintf_r+0x50>
 800ff8c:	ab03      	add	r3, sp, #12
 800ff8e:	9300      	str	r3, [sp, #0]
 800ff90:	462a      	mov	r2, r5
 800ff92:	4b09      	ldr	r3, [pc, #36]	; (800ffb8 <_vfiprintf_r+0x258>)
 800ff94:	a904      	add	r1, sp, #16
 800ff96:	4630      	mov	r0, r6
 800ff98:	f7fc fb20 	bl	800c5dc <_printf_i>
 800ff9c:	e7e4      	b.n	800ff68 <_vfiprintf_r+0x208>
 800ff9e:	bf00      	nop
 800ffa0:	080243e0 	.word	0x080243e0
 800ffa4:	08024400 	.word	0x08024400
 800ffa8:	080243c0 	.word	0x080243c0
 800ffac:	080243ac 	.word	0x080243ac
 800ffb0:	080243b6 	.word	0x080243b6
 800ffb4:	0800c095 	.word	0x0800c095
 800ffb8:	0800fd3b 	.word	0x0800fd3b
 800ffbc:	080243b2 	.word	0x080243b2

0800ffc0 <nan>:
 800ffc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ffc8 <nan+0x8>
 800ffc4:	4770      	bx	lr
 800ffc6:	bf00      	nop
 800ffc8:	00000000 	.word	0x00000000
 800ffcc:	7ff80000 	.word	0x7ff80000

0800ffd0 <_sbrk_r>:
 800ffd0:	b538      	push	{r3, r4, r5, lr}
 800ffd2:	4d06      	ldr	r5, [pc, #24]	; (800ffec <_sbrk_r+0x1c>)
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	4608      	mov	r0, r1
 800ffda:	602b      	str	r3, [r5, #0]
 800ffdc:	f7f5 fb32 	bl	8005644 <_sbrk>
 800ffe0:	1c43      	adds	r3, r0, #1
 800ffe2:	d102      	bne.n	800ffea <_sbrk_r+0x1a>
 800ffe4:	682b      	ldr	r3, [r5, #0]
 800ffe6:	b103      	cbz	r3, 800ffea <_sbrk_r+0x1a>
 800ffe8:	6023      	str	r3, [r4, #0]
 800ffea:	bd38      	pop	{r3, r4, r5, pc}
 800ffec:	200006d8 	.word	0x200006d8

0800fff0 <strncmp>:
 800fff0:	b510      	push	{r4, lr}
 800fff2:	b16a      	cbz	r2, 8010010 <strncmp+0x20>
 800fff4:	3901      	subs	r1, #1
 800fff6:	1884      	adds	r4, r0, r2
 800fff8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800fffc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010000:	4293      	cmp	r3, r2
 8010002:	d103      	bne.n	801000c <strncmp+0x1c>
 8010004:	42a0      	cmp	r0, r4
 8010006:	d001      	beq.n	801000c <strncmp+0x1c>
 8010008:	2b00      	cmp	r3, #0
 801000a:	d1f5      	bne.n	800fff8 <strncmp+0x8>
 801000c:	1a98      	subs	r0, r3, r2
 801000e:	bd10      	pop	{r4, pc}
 8010010:	4610      	mov	r0, r2
 8010012:	e7fc      	b.n	801000e <strncmp+0x1e>

08010014 <__swbuf_r>:
 8010014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010016:	460e      	mov	r6, r1
 8010018:	4614      	mov	r4, r2
 801001a:	4605      	mov	r5, r0
 801001c:	b118      	cbz	r0, 8010026 <__swbuf_r+0x12>
 801001e:	6983      	ldr	r3, [r0, #24]
 8010020:	b90b      	cbnz	r3, 8010026 <__swbuf_r+0x12>
 8010022:	f000 f9e7 	bl	80103f4 <__sinit>
 8010026:	4b21      	ldr	r3, [pc, #132]	; (80100ac <__swbuf_r+0x98>)
 8010028:	429c      	cmp	r4, r3
 801002a:	d12b      	bne.n	8010084 <__swbuf_r+0x70>
 801002c:	686c      	ldr	r4, [r5, #4]
 801002e:	69a3      	ldr	r3, [r4, #24]
 8010030:	60a3      	str	r3, [r4, #8]
 8010032:	89a3      	ldrh	r3, [r4, #12]
 8010034:	071a      	lsls	r2, r3, #28
 8010036:	d52f      	bpl.n	8010098 <__swbuf_r+0x84>
 8010038:	6923      	ldr	r3, [r4, #16]
 801003a:	b36b      	cbz	r3, 8010098 <__swbuf_r+0x84>
 801003c:	6923      	ldr	r3, [r4, #16]
 801003e:	6820      	ldr	r0, [r4, #0]
 8010040:	1ac0      	subs	r0, r0, r3
 8010042:	6963      	ldr	r3, [r4, #20]
 8010044:	b2f6      	uxtb	r6, r6
 8010046:	4283      	cmp	r3, r0
 8010048:	4637      	mov	r7, r6
 801004a:	dc04      	bgt.n	8010056 <__swbuf_r+0x42>
 801004c:	4621      	mov	r1, r4
 801004e:	4628      	mov	r0, r5
 8010050:	f000 f93c 	bl	80102cc <_fflush_r>
 8010054:	bb30      	cbnz	r0, 80100a4 <__swbuf_r+0x90>
 8010056:	68a3      	ldr	r3, [r4, #8]
 8010058:	3b01      	subs	r3, #1
 801005a:	60a3      	str	r3, [r4, #8]
 801005c:	6823      	ldr	r3, [r4, #0]
 801005e:	1c5a      	adds	r2, r3, #1
 8010060:	6022      	str	r2, [r4, #0]
 8010062:	701e      	strb	r6, [r3, #0]
 8010064:	6963      	ldr	r3, [r4, #20]
 8010066:	3001      	adds	r0, #1
 8010068:	4283      	cmp	r3, r0
 801006a:	d004      	beq.n	8010076 <__swbuf_r+0x62>
 801006c:	89a3      	ldrh	r3, [r4, #12]
 801006e:	07db      	lsls	r3, r3, #31
 8010070:	d506      	bpl.n	8010080 <__swbuf_r+0x6c>
 8010072:	2e0a      	cmp	r6, #10
 8010074:	d104      	bne.n	8010080 <__swbuf_r+0x6c>
 8010076:	4621      	mov	r1, r4
 8010078:	4628      	mov	r0, r5
 801007a:	f000 f927 	bl	80102cc <_fflush_r>
 801007e:	b988      	cbnz	r0, 80100a4 <__swbuf_r+0x90>
 8010080:	4638      	mov	r0, r7
 8010082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010084:	4b0a      	ldr	r3, [pc, #40]	; (80100b0 <__swbuf_r+0x9c>)
 8010086:	429c      	cmp	r4, r3
 8010088:	d101      	bne.n	801008e <__swbuf_r+0x7a>
 801008a:	68ac      	ldr	r4, [r5, #8]
 801008c:	e7cf      	b.n	801002e <__swbuf_r+0x1a>
 801008e:	4b09      	ldr	r3, [pc, #36]	; (80100b4 <__swbuf_r+0xa0>)
 8010090:	429c      	cmp	r4, r3
 8010092:	bf08      	it	eq
 8010094:	68ec      	ldreq	r4, [r5, #12]
 8010096:	e7ca      	b.n	801002e <__swbuf_r+0x1a>
 8010098:	4621      	mov	r1, r4
 801009a:	4628      	mov	r0, r5
 801009c:	f000 f81a 	bl	80100d4 <__swsetup_r>
 80100a0:	2800      	cmp	r0, #0
 80100a2:	d0cb      	beq.n	801003c <__swbuf_r+0x28>
 80100a4:	f04f 37ff 	mov.w	r7, #4294967295
 80100a8:	e7ea      	b.n	8010080 <__swbuf_r+0x6c>
 80100aa:	bf00      	nop
 80100ac:	080243e0 	.word	0x080243e0
 80100b0:	08024400 	.word	0x08024400
 80100b4:	080243c0 	.word	0x080243c0

080100b8 <__ascii_wctomb>:
 80100b8:	b149      	cbz	r1, 80100ce <__ascii_wctomb+0x16>
 80100ba:	2aff      	cmp	r2, #255	; 0xff
 80100bc:	bf85      	ittet	hi
 80100be:	238a      	movhi	r3, #138	; 0x8a
 80100c0:	6003      	strhi	r3, [r0, #0]
 80100c2:	700a      	strbls	r2, [r1, #0]
 80100c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80100c8:	bf98      	it	ls
 80100ca:	2001      	movls	r0, #1
 80100cc:	4770      	bx	lr
 80100ce:	4608      	mov	r0, r1
 80100d0:	4770      	bx	lr
	...

080100d4 <__swsetup_r>:
 80100d4:	4b32      	ldr	r3, [pc, #200]	; (80101a0 <__swsetup_r+0xcc>)
 80100d6:	b570      	push	{r4, r5, r6, lr}
 80100d8:	681d      	ldr	r5, [r3, #0]
 80100da:	4606      	mov	r6, r0
 80100dc:	460c      	mov	r4, r1
 80100de:	b125      	cbz	r5, 80100ea <__swsetup_r+0x16>
 80100e0:	69ab      	ldr	r3, [r5, #24]
 80100e2:	b913      	cbnz	r3, 80100ea <__swsetup_r+0x16>
 80100e4:	4628      	mov	r0, r5
 80100e6:	f000 f985 	bl	80103f4 <__sinit>
 80100ea:	4b2e      	ldr	r3, [pc, #184]	; (80101a4 <__swsetup_r+0xd0>)
 80100ec:	429c      	cmp	r4, r3
 80100ee:	d10f      	bne.n	8010110 <__swsetup_r+0x3c>
 80100f0:	686c      	ldr	r4, [r5, #4]
 80100f2:	89a3      	ldrh	r3, [r4, #12]
 80100f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100f8:	0719      	lsls	r1, r3, #28
 80100fa:	d42c      	bmi.n	8010156 <__swsetup_r+0x82>
 80100fc:	06dd      	lsls	r5, r3, #27
 80100fe:	d411      	bmi.n	8010124 <__swsetup_r+0x50>
 8010100:	2309      	movs	r3, #9
 8010102:	6033      	str	r3, [r6, #0]
 8010104:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010108:	81a3      	strh	r3, [r4, #12]
 801010a:	f04f 30ff 	mov.w	r0, #4294967295
 801010e:	e03e      	b.n	801018e <__swsetup_r+0xba>
 8010110:	4b25      	ldr	r3, [pc, #148]	; (80101a8 <__swsetup_r+0xd4>)
 8010112:	429c      	cmp	r4, r3
 8010114:	d101      	bne.n	801011a <__swsetup_r+0x46>
 8010116:	68ac      	ldr	r4, [r5, #8]
 8010118:	e7eb      	b.n	80100f2 <__swsetup_r+0x1e>
 801011a:	4b24      	ldr	r3, [pc, #144]	; (80101ac <__swsetup_r+0xd8>)
 801011c:	429c      	cmp	r4, r3
 801011e:	bf08      	it	eq
 8010120:	68ec      	ldreq	r4, [r5, #12]
 8010122:	e7e6      	b.n	80100f2 <__swsetup_r+0x1e>
 8010124:	0758      	lsls	r0, r3, #29
 8010126:	d512      	bpl.n	801014e <__swsetup_r+0x7a>
 8010128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801012a:	b141      	cbz	r1, 801013e <__swsetup_r+0x6a>
 801012c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010130:	4299      	cmp	r1, r3
 8010132:	d002      	beq.n	801013a <__swsetup_r+0x66>
 8010134:	4630      	mov	r0, r6
 8010136:	f7ff fbe3 	bl	800f900 <_free_r>
 801013a:	2300      	movs	r3, #0
 801013c:	6363      	str	r3, [r4, #52]	; 0x34
 801013e:	89a3      	ldrh	r3, [r4, #12]
 8010140:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010144:	81a3      	strh	r3, [r4, #12]
 8010146:	2300      	movs	r3, #0
 8010148:	6063      	str	r3, [r4, #4]
 801014a:	6923      	ldr	r3, [r4, #16]
 801014c:	6023      	str	r3, [r4, #0]
 801014e:	89a3      	ldrh	r3, [r4, #12]
 8010150:	f043 0308 	orr.w	r3, r3, #8
 8010154:	81a3      	strh	r3, [r4, #12]
 8010156:	6923      	ldr	r3, [r4, #16]
 8010158:	b94b      	cbnz	r3, 801016e <__swsetup_r+0x9a>
 801015a:	89a3      	ldrh	r3, [r4, #12]
 801015c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010164:	d003      	beq.n	801016e <__swsetup_r+0x9a>
 8010166:	4621      	mov	r1, r4
 8010168:	4630      	mov	r0, r6
 801016a:	f000 fa07 	bl	801057c <__smakebuf_r>
 801016e:	89a0      	ldrh	r0, [r4, #12]
 8010170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010174:	f010 0301 	ands.w	r3, r0, #1
 8010178:	d00a      	beq.n	8010190 <__swsetup_r+0xbc>
 801017a:	2300      	movs	r3, #0
 801017c:	60a3      	str	r3, [r4, #8]
 801017e:	6963      	ldr	r3, [r4, #20]
 8010180:	425b      	negs	r3, r3
 8010182:	61a3      	str	r3, [r4, #24]
 8010184:	6923      	ldr	r3, [r4, #16]
 8010186:	b943      	cbnz	r3, 801019a <__swsetup_r+0xc6>
 8010188:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801018c:	d1ba      	bne.n	8010104 <__swsetup_r+0x30>
 801018e:	bd70      	pop	{r4, r5, r6, pc}
 8010190:	0781      	lsls	r1, r0, #30
 8010192:	bf58      	it	pl
 8010194:	6963      	ldrpl	r3, [r4, #20]
 8010196:	60a3      	str	r3, [r4, #8]
 8010198:	e7f4      	b.n	8010184 <__swsetup_r+0xb0>
 801019a:	2000      	movs	r0, #0
 801019c:	e7f7      	b.n	801018e <__swsetup_r+0xba>
 801019e:	bf00      	nop
 80101a0:	20000040 	.word	0x20000040
 80101a4:	080243e0 	.word	0x080243e0
 80101a8:	08024400 	.word	0x08024400
 80101ac:	080243c0 	.word	0x080243c0

080101b0 <abort>:
 80101b0:	b508      	push	{r3, lr}
 80101b2:	2006      	movs	r0, #6
 80101b4:	f000 fa96 	bl	80106e4 <raise>
 80101b8:	2001      	movs	r0, #1
 80101ba:	f7f5 f9cb 	bl	8005554 <_exit>
	...

080101c0 <__sflush_r>:
 80101c0:	898a      	ldrh	r2, [r1, #12]
 80101c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101c6:	4605      	mov	r5, r0
 80101c8:	0710      	lsls	r0, r2, #28
 80101ca:	460c      	mov	r4, r1
 80101cc:	d458      	bmi.n	8010280 <__sflush_r+0xc0>
 80101ce:	684b      	ldr	r3, [r1, #4]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	dc05      	bgt.n	80101e0 <__sflush_r+0x20>
 80101d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	dc02      	bgt.n	80101e0 <__sflush_r+0x20>
 80101da:	2000      	movs	r0, #0
 80101dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101e2:	2e00      	cmp	r6, #0
 80101e4:	d0f9      	beq.n	80101da <__sflush_r+0x1a>
 80101e6:	2300      	movs	r3, #0
 80101e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80101ec:	682f      	ldr	r7, [r5, #0]
 80101ee:	602b      	str	r3, [r5, #0]
 80101f0:	d032      	beq.n	8010258 <__sflush_r+0x98>
 80101f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80101f4:	89a3      	ldrh	r3, [r4, #12]
 80101f6:	075a      	lsls	r2, r3, #29
 80101f8:	d505      	bpl.n	8010206 <__sflush_r+0x46>
 80101fa:	6863      	ldr	r3, [r4, #4]
 80101fc:	1ac0      	subs	r0, r0, r3
 80101fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010200:	b10b      	cbz	r3, 8010206 <__sflush_r+0x46>
 8010202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010204:	1ac0      	subs	r0, r0, r3
 8010206:	2300      	movs	r3, #0
 8010208:	4602      	mov	r2, r0
 801020a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801020c:	6a21      	ldr	r1, [r4, #32]
 801020e:	4628      	mov	r0, r5
 8010210:	47b0      	blx	r6
 8010212:	1c43      	adds	r3, r0, #1
 8010214:	89a3      	ldrh	r3, [r4, #12]
 8010216:	d106      	bne.n	8010226 <__sflush_r+0x66>
 8010218:	6829      	ldr	r1, [r5, #0]
 801021a:	291d      	cmp	r1, #29
 801021c:	d82c      	bhi.n	8010278 <__sflush_r+0xb8>
 801021e:	4a2a      	ldr	r2, [pc, #168]	; (80102c8 <__sflush_r+0x108>)
 8010220:	40ca      	lsrs	r2, r1
 8010222:	07d6      	lsls	r6, r2, #31
 8010224:	d528      	bpl.n	8010278 <__sflush_r+0xb8>
 8010226:	2200      	movs	r2, #0
 8010228:	6062      	str	r2, [r4, #4]
 801022a:	04d9      	lsls	r1, r3, #19
 801022c:	6922      	ldr	r2, [r4, #16]
 801022e:	6022      	str	r2, [r4, #0]
 8010230:	d504      	bpl.n	801023c <__sflush_r+0x7c>
 8010232:	1c42      	adds	r2, r0, #1
 8010234:	d101      	bne.n	801023a <__sflush_r+0x7a>
 8010236:	682b      	ldr	r3, [r5, #0]
 8010238:	b903      	cbnz	r3, 801023c <__sflush_r+0x7c>
 801023a:	6560      	str	r0, [r4, #84]	; 0x54
 801023c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801023e:	602f      	str	r7, [r5, #0]
 8010240:	2900      	cmp	r1, #0
 8010242:	d0ca      	beq.n	80101da <__sflush_r+0x1a>
 8010244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010248:	4299      	cmp	r1, r3
 801024a:	d002      	beq.n	8010252 <__sflush_r+0x92>
 801024c:	4628      	mov	r0, r5
 801024e:	f7ff fb57 	bl	800f900 <_free_r>
 8010252:	2000      	movs	r0, #0
 8010254:	6360      	str	r0, [r4, #52]	; 0x34
 8010256:	e7c1      	b.n	80101dc <__sflush_r+0x1c>
 8010258:	6a21      	ldr	r1, [r4, #32]
 801025a:	2301      	movs	r3, #1
 801025c:	4628      	mov	r0, r5
 801025e:	47b0      	blx	r6
 8010260:	1c41      	adds	r1, r0, #1
 8010262:	d1c7      	bne.n	80101f4 <__sflush_r+0x34>
 8010264:	682b      	ldr	r3, [r5, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d0c4      	beq.n	80101f4 <__sflush_r+0x34>
 801026a:	2b1d      	cmp	r3, #29
 801026c:	d001      	beq.n	8010272 <__sflush_r+0xb2>
 801026e:	2b16      	cmp	r3, #22
 8010270:	d101      	bne.n	8010276 <__sflush_r+0xb6>
 8010272:	602f      	str	r7, [r5, #0]
 8010274:	e7b1      	b.n	80101da <__sflush_r+0x1a>
 8010276:	89a3      	ldrh	r3, [r4, #12]
 8010278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801027c:	81a3      	strh	r3, [r4, #12]
 801027e:	e7ad      	b.n	80101dc <__sflush_r+0x1c>
 8010280:	690f      	ldr	r7, [r1, #16]
 8010282:	2f00      	cmp	r7, #0
 8010284:	d0a9      	beq.n	80101da <__sflush_r+0x1a>
 8010286:	0793      	lsls	r3, r2, #30
 8010288:	680e      	ldr	r6, [r1, #0]
 801028a:	bf08      	it	eq
 801028c:	694b      	ldreq	r3, [r1, #20]
 801028e:	600f      	str	r7, [r1, #0]
 8010290:	bf18      	it	ne
 8010292:	2300      	movne	r3, #0
 8010294:	eba6 0807 	sub.w	r8, r6, r7
 8010298:	608b      	str	r3, [r1, #8]
 801029a:	f1b8 0f00 	cmp.w	r8, #0
 801029e:	dd9c      	ble.n	80101da <__sflush_r+0x1a>
 80102a0:	6a21      	ldr	r1, [r4, #32]
 80102a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80102a4:	4643      	mov	r3, r8
 80102a6:	463a      	mov	r2, r7
 80102a8:	4628      	mov	r0, r5
 80102aa:	47b0      	blx	r6
 80102ac:	2800      	cmp	r0, #0
 80102ae:	dc06      	bgt.n	80102be <__sflush_r+0xfe>
 80102b0:	89a3      	ldrh	r3, [r4, #12]
 80102b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102b6:	81a3      	strh	r3, [r4, #12]
 80102b8:	f04f 30ff 	mov.w	r0, #4294967295
 80102bc:	e78e      	b.n	80101dc <__sflush_r+0x1c>
 80102be:	4407      	add	r7, r0
 80102c0:	eba8 0800 	sub.w	r8, r8, r0
 80102c4:	e7e9      	b.n	801029a <__sflush_r+0xda>
 80102c6:	bf00      	nop
 80102c8:	20400001 	.word	0x20400001

080102cc <_fflush_r>:
 80102cc:	b538      	push	{r3, r4, r5, lr}
 80102ce:	690b      	ldr	r3, [r1, #16]
 80102d0:	4605      	mov	r5, r0
 80102d2:	460c      	mov	r4, r1
 80102d4:	b913      	cbnz	r3, 80102dc <_fflush_r+0x10>
 80102d6:	2500      	movs	r5, #0
 80102d8:	4628      	mov	r0, r5
 80102da:	bd38      	pop	{r3, r4, r5, pc}
 80102dc:	b118      	cbz	r0, 80102e6 <_fflush_r+0x1a>
 80102de:	6983      	ldr	r3, [r0, #24]
 80102e0:	b90b      	cbnz	r3, 80102e6 <_fflush_r+0x1a>
 80102e2:	f000 f887 	bl	80103f4 <__sinit>
 80102e6:	4b14      	ldr	r3, [pc, #80]	; (8010338 <_fflush_r+0x6c>)
 80102e8:	429c      	cmp	r4, r3
 80102ea:	d11b      	bne.n	8010324 <_fflush_r+0x58>
 80102ec:	686c      	ldr	r4, [r5, #4]
 80102ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d0ef      	beq.n	80102d6 <_fflush_r+0xa>
 80102f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80102f8:	07d0      	lsls	r0, r2, #31
 80102fa:	d404      	bmi.n	8010306 <_fflush_r+0x3a>
 80102fc:	0599      	lsls	r1, r3, #22
 80102fe:	d402      	bmi.n	8010306 <_fflush_r+0x3a>
 8010300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010302:	f000 f915 	bl	8010530 <__retarget_lock_acquire_recursive>
 8010306:	4628      	mov	r0, r5
 8010308:	4621      	mov	r1, r4
 801030a:	f7ff ff59 	bl	80101c0 <__sflush_r>
 801030e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010310:	07da      	lsls	r2, r3, #31
 8010312:	4605      	mov	r5, r0
 8010314:	d4e0      	bmi.n	80102d8 <_fflush_r+0xc>
 8010316:	89a3      	ldrh	r3, [r4, #12]
 8010318:	059b      	lsls	r3, r3, #22
 801031a:	d4dd      	bmi.n	80102d8 <_fflush_r+0xc>
 801031c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801031e:	f000 f908 	bl	8010532 <__retarget_lock_release_recursive>
 8010322:	e7d9      	b.n	80102d8 <_fflush_r+0xc>
 8010324:	4b05      	ldr	r3, [pc, #20]	; (801033c <_fflush_r+0x70>)
 8010326:	429c      	cmp	r4, r3
 8010328:	d101      	bne.n	801032e <_fflush_r+0x62>
 801032a:	68ac      	ldr	r4, [r5, #8]
 801032c:	e7df      	b.n	80102ee <_fflush_r+0x22>
 801032e:	4b04      	ldr	r3, [pc, #16]	; (8010340 <_fflush_r+0x74>)
 8010330:	429c      	cmp	r4, r3
 8010332:	bf08      	it	eq
 8010334:	68ec      	ldreq	r4, [r5, #12]
 8010336:	e7da      	b.n	80102ee <_fflush_r+0x22>
 8010338:	080243e0 	.word	0x080243e0
 801033c:	08024400 	.word	0x08024400
 8010340:	080243c0 	.word	0x080243c0

08010344 <std>:
 8010344:	2300      	movs	r3, #0
 8010346:	b510      	push	{r4, lr}
 8010348:	4604      	mov	r4, r0
 801034a:	e9c0 3300 	strd	r3, r3, [r0]
 801034e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010352:	6083      	str	r3, [r0, #8]
 8010354:	8181      	strh	r1, [r0, #12]
 8010356:	6643      	str	r3, [r0, #100]	; 0x64
 8010358:	81c2      	strh	r2, [r0, #14]
 801035a:	6183      	str	r3, [r0, #24]
 801035c:	4619      	mov	r1, r3
 801035e:	2208      	movs	r2, #8
 8010360:	305c      	adds	r0, #92	; 0x5c
 8010362:	f7fb fdef 	bl	800bf44 <memset>
 8010366:	4b05      	ldr	r3, [pc, #20]	; (801037c <std+0x38>)
 8010368:	6263      	str	r3, [r4, #36]	; 0x24
 801036a:	4b05      	ldr	r3, [pc, #20]	; (8010380 <std+0x3c>)
 801036c:	62a3      	str	r3, [r4, #40]	; 0x28
 801036e:	4b05      	ldr	r3, [pc, #20]	; (8010384 <std+0x40>)
 8010370:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010372:	4b05      	ldr	r3, [pc, #20]	; (8010388 <std+0x44>)
 8010374:	6224      	str	r4, [r4, #32]
 8010376:	6323      	str	r3, [r4, #48]	; 0x30
 8010378:	bd10      	pop	{r4, pc}
 801037a:	bf00      	nop
 801037c:	0801071d 	.word	0x0801071d
 8010380:	0801073f 	.word	0x0801073f
 8010384:	08010777 	.word	0x08010777
 8010388:	0801079b 	.word	0x0801079b

0801038c <_cleanup_r>:
 801038c:	4901      	ldr	r1, [pc, #4]	; (8010394 <_cleanup_r+0x8>)
 801038e:	f000 b8af 	b.w	80104f0 <_fwalk_reent>
 8010392:	bf00      	nop
 8010394:	080102cd 	.word	0x080102cd

08010398 <__sfmoreglue>:
 8010398:	b570      	push	{r4, r5, r6, lr}
 801039a:	1e4a      	subs	r2, r1, #1
 801039c:	2568      	movs	r5, #104	; 0x68
 801039e:	4355      	muls	r5, r2
 80103a0:	460e      	mov	r6, r1
 80103a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80103a6:	f7ff fafb 	bl	800f9a0 <_malloc_r>
 80103aa:	4604      	mov	r4, r0
 80103ac:	b140      	cbz	r0, 80103c0 <__sfmoreglue+0x28>
 80103ae:	2100      	movs	r1, #0
 80103b0:	e9c0 1600 	strd	r1, r6, [r0]
 80103b4:	300c      	adds	r0, #12
 80103b6:	60a0      	str	r0, [r4, #8]
 80103b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80103bc:	f7fb fdc2 	bl	800bf44 <memset>
 80103c0:	4620      	mov	r0, r4
 80103c2:	bd70      	pop	{r4, r5, r6, pc}

080103c4 <__sfp_lock_acquire>:
 80103c4:	4801      	ldr	r0, [pc, #4]	; (80103cc <__sfp_lock_acquire+0x8>)
 80103c6:	f000 b8b3 	b.w	8010530 <__retarget_lock_acquire_recursive>
 80103ca:	bf00      	nop
 80103cc:	200006d4 	.word	0x200006d4

080103d0 <__sfp_lock_release>:
 80103d0:	4801      	ldr	r0, [pc, #4]	; (80103d8 <__sfp_lock_release+0x8>)
 80103d2:	f000 b8ae 	b.w	8010532 <__retarget_lock_release_recursive>
 80103d6:	bf00      	nop
 80103d8:	200006d4 	.word	0x200006d4

080103dc <__sinit_lock_acquire>:
 80103dc:	4801      	ldr	r0, [pc, #4]	; (80103e4 <__sinit_lock_acquire+0x8>)
 80103de:	f000 b8a7 	b.w	8010530 <__retarget_lock_acquire_recursive>
 80103e2:	bf00      	nop
 80103e4:	200006cf 	.word	0x200006cf

080103e8 <__sinit_lock_release>:
 80103e8:	4801      	ldr	r0, [pc, #4]	; (80103f0 <__sinit_lock_release+0x8>)
 80103ea:	f000 b8a2 	b.w	8010532 <__retarget_lock_release_recursive>
 80103ee:	bf00      	nop
 80103f0:	200006cf 	.word	0x200006cf

080103f4 <__sinit>:
 80103f4:	b510      	push	{r4, lr}
 80103f6:	4604      	mov	r4, r0
 80103f8:	f7ff fff0 	bl	80103dc <__sinit_lock_acquire>
 80103fc:	69a3      	ldr	r3, [r4, #24]
 80103fe:	b11b      	cbz	r3, 8010408 <__sinit+0x14>
 8010400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010404:	f7ff bff0 	b.w	80103e8 <__sinit_lock_release>
 8010408:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801040c:	6523      	str	r3, [r4, #80]	; 0x50
 801040e:	4b13      	ldr	r3, [pc, #76]	; (801045c <__sinit+0x68>)
 8010410:	4a13      	ldr	r2, [pc, #76]	; (8010460 <__sinit+0x6c>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	62a2      	str	r2, [r4, #40]	; 0x28
 8010416:	42a3      	cmp	r3, r4
 8010418:	bf04      	itt	eq
 801041a:	2301      	moveq	r3, #1
 801041c:	61a3      	streq	r3, [r4, #24]
 801041e:	4620      	mov	r0, r4
 8010420:	f000 f820 	bl	8010464 <__sfp>
 8010424:	6060      	str	r0, [r4, #4]
 8010426:	4620      	mov	r0, r4
 8010428:	f000 f81c 	bl	8010464 <__sfp>
 801042c:	60a0      	str	r0, [r4, #8]
 801042e:	4620      	mov	r0, r4
 8010430:	f000 f818 	bl	8010464 <__sfp>
 8010434:	2200      	movs	r2, #0
 8010436:	60e0      	str	r0, [r4, #12]
 8010438:	2104      	movs	r1, #4
 801043a:	6860      	ldr	r0, [r4, #4]
 801043c:	f7ff ff82 	bl	8010344 <std>
 8010440:	68a0      	ldr	r0, [r4, #8]
 8010442:	2201      	movs	r2, #1
 8010444:	2109      	movs	r1, #9
 8010446:	f7ff ff7d 	bl	8010344 <std>
 801044a:	68e0      	ldr	r0, [r4, #12]
 801044c:	2202      	movs	r2, #2
 801044e:	2112      	movs	r1, #18
 8010450:	f7ff ff78 	bl	8010344 <std>
 8010454:	2301      	movs	r3, #1
 8010456:	61a3      	str	r3, [r4, #24]
 8010458:	e7d2      	b.n	8010400 <__sinit+0xc>
 801045a:	bf00      	nop
 801045c:	08023f0c 	.word	0x08023f0c
 8010460:	0801038d 	.word	0x0801038d

08010464 <__sfp>:
 8010464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010466:	4607      	mov	r7, r0
 8010468:	f7ff ffac 	bl	80103c4 <__sfp_lock_acquire>
 801046c:	4b1e      	ldr	r3, [pc, #120]	; (80104e8 <__sfp+0x84>)
 801046e:	681e      	ldr	r6, [r3, #0]
 8010470:	69b3      	ldr	r3, [r6, #24]
 8010472:	b913      	cbnz	r3, 801047a <__sfp+0x16>
 8010474:	4630      	mov	r0, r6
 8010476:	f7ff ffbd 	bl	80103f4 <__sinit>
 801047a:	3648      	adds	r6, #72	; 0x48
 801047c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010480:	3b01      	subs	r3, #1
 8010482:	d503      	bpl.n	801048c <__sfp+0x28>
 8010484:	6833      	ldr	r3, [r6, #0]
 8010486:	b30b      	cbz	r3, 80104cc <__sfp+0x68>
 8010488:	6836      	ldr	r6, [r6, #0]
 801048a:	e7f7      	b.n	801047c <__sfp+0x18>
 801048c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010490:	b9d5      	cbnz	r5, 80104c8 <__sfp+0x64>
 8010492:	4b16      	ldr	r3, [pc, #88]	; (80104ec <__sfp+0x88>)
 8010494:	60e3      	str	r3, [r4, #12]
 8010496:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801049a:	6665      	str	r5, [r4, #100]	; 0x64
 801049c:	f000 f847 	bl	801052e <__retarget_lock_init_recursive>
 80104a0:	f7ff ff96 	bl	80103d0 <__sfp_lock_release>
 80104a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80104a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80104ac:	6025      	str	r5, [r4, #0]
 80104ae:	61a5      	str	r5, [r4, #24]
 80104b0:	2208      	movs	r2, #8
 80104b2:	4629      	mov	r1, r5
 80104b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80104b8:	f7fb fd44 	bl	800bf44 <memset>
 80104bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80104c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80104c4:	4620      	mov	r0, r4
 80104c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104c8:	3468      	adds	r4, #104	; 0x68
 80104ca:	e7d9      	b.n	8010480 <__sfp+0x1c>
 80104cc:	2104      	movs	r1, #4
 80104ce:	4638      	mov	r0, r7
 80104d0:	f7ff ff62 	bl	8010398 <__sfmoreglue>
 80104d4:	4604      	mov	r4, r0
 80104d6:	6030      	str	r0, [r6, #0]
 80104d8:	2800      	cmp	r0, #0
 80104da:	d1d5      	bne.n	8010488 <__sfp+0x24>
 80104dc:	f7ff ff78 	bl	80103d0 <__sfp_lock_release>
 80104e0:	230c      	movs	r3, #12
 80104e2:	603b      	str	r3, [r7, #0]
 80104e4:	e7ee      	b.n	80104c4 <__sfp+0x60>
 80104e6:	bf00      	nop
 80104e8:	08023f0c 	.word	0x08023f0c
 80104ec:	ffff0001 	.word	0xffff0001

080104f0 <_fwalk_reent>:
 80104f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104f4:	4606      	mov	r6, r0
 80104f6:	4688      	mov	r8, r1
 80104f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80104fc:	2700      	movs	r7, #0
 80104fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010502:	f1b9 0901 	subs.w	r9, r9, #1
 8010506:	d505      	bpl.n	8010514 <_fwalk_reent+0x24>
 8010508:	6824      	ldr	r4, [r4, #0]
 801050a:	2c00      	cmp	r4, #0
 801050c:	d1f7      	bne.n	80104fe <_fwalk_reent+0xe>
 801050e:	4638      	mov	r0, r7
 8010510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010514:	89ab      	ldrh	r3, [r5, #12]
 8010516:	2b01      	cmp	r3, #1
 8010518:	d907      	bls.n	801052a <_fwalk_reent+0x3a>
 801051a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801051e:	3301      	adds	r3, #1
 8010520:	d003      	beq.n	801052a <_fwalk_reent+0x3a>
 8010522:	4629      	mov	r1, r5
 8010524:	4630      	mov	r0, r6
 8010526:	47c0      	blx	r8
 8010528:	4307      	orrs	r7, r0
 801052a:	3568      	adds	r5, #104	; 0x68
 801052c:	e7e9      	b.n	8010502 <_fwalk_reent+0x12>

0801052e <__retarget_lock_init_recursive>:
 801052e:	4770      	bx	lr

08010530 <__retarget_lock_acquire_recursive>:
 8010530:	4770      	bx	lr

08010532 <__retarget_lock_release_recursive>:
 8010532:	4770      	bx	lr

08010534 <__swhatbuf_r>:
 8010534:	b570      	push	{r4, r5, r6, lr}
 8010536:	460e      	mov	r6, r1
 8010538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801053c:	2900      	cmp	r1, #0
 801053e:	b096      	sub	sp, #88	; 0x58
 8010540:	4614      	mov	r4, r2
 8010542:	461d      	mov	r5, r3
 8010544:	da07      	bge.n	8010556 <__swhatbuf_r+0x22>
 8010546:	2300      	movs	r3, #0
 8010548:	602b      	str	r3, [r5, #0]
 801054a:	89b3      	ldrh	r3, [r6, #12]
 801054c:	061a      	lsls	r2, r3, #24
 801054e:	d410      	bmi.n	8010572 <__swhatbuf_r+0x3e>
 8010550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010554:	e00e      	b.n	8010574 <__swhatbuf_r+0x40>
 8010556:	466a      	mov	r2, sp
 8010558:	f000 f946 	bl	80107e8 <_fstat_r>
 801055c:	2800      	cmp	r0, #0
 801055e:	dbf2      	blt.n	8010546 <__swhatbuf_r+0x12>
 8010560:	9a01      	ldr	r2, [sp, #4]
 8010562:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010566:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801056a:	425a      	negs	r2, r3
 801056c:	415a      	adcs	r2, r3
 801056e:	602a      	str	r2, [r5, #0]
 8010570:	e7ee      	b.n	8010550 <__swhatbuf_r+0x1c>
 8010572:	2340      	movs	r3, #64	; 0x40
 8010574:	2000      	movs	r0, #0
 8010576:	6023      	str	r3, [r4, #0]
 8010578:	b016      	add	sp, #88	; 0x58
 801057a:	bd70      	pop	{r4, r5, r6, pc}

0801057c <__smakebuf_r>:
 801057c:	898b      	ldrh	r3, [r1, #12]
 801057e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010580:	079d      	lsls	r5, r3, #30
 8010582:	4606      	mov	r6, r0
 8010584:	460c      	mov	r4, r1
 8010586:	d507      	bpl.n	8010598 <__smakebuf_r+0x1c>
 8010588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801058c:	6023      	str	r3, [r4, #0]
 801058e:	6123      	str	r3, [r4, #16]
 8010590:	2301      	movs	r3, #1
 8010592:	6163      	str	r3, [r4, #20]
 8010594:	b002      	add	sp, #8
 8010596:	bd70      	pop	{r4, r5, r6, pc}
 8010598:	ab01      	add	r3, sp, #4
 801059a:	466a      	mov	r2, sp
 801059c:	f7ff ffca 	bl	8010534 <__swhatbuf_r>
 80105a0:	9900      	ldr	r1, [sp, #0]
 80105a2:	4605      	mov	r5, r0
 80105a4:	4630      	mov	r0, r6
 80105a6:	f7ff f9fb 	bl	800f9a0 <_malloc_r>
 80105aa:	b948      	cbnz	r0, 80105c0 <__smakebuf_r+0x44>
 80105ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105b0:	059a      	lsls	r2, r3, #22
 80105b2:	d4ef      	bmi.n	8010594 <__smakebuf_r+0x18>
 80105b4:	f023 0303 	bic.w	r3, r3, #3
 80105b8:	f043 0302 	orr.w	r3, r3, #2
 80105bc:	81a3      	strh	r3, [r4, #12]
 80105be:	e7e3      	b.n	8010588 <__smakebuf_r+0xc>
 80105c0:	4b0d      	ldr	r3, [pc, #52]	; (80105f8 <__smakebuf_r+0x7c>)
 80105c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80105c4:	89a3      	ldrh	r3, [r4, #12]
 80105c6:	6020      	str	r0, [r4, #0]
 80105c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105cc:	81a3      	strh	r3, [r4, #12]
 80105ce:	9b00      	ldr	r3, [sp, #0]
 80105d0:	6163      	str	r3, [r4, #20]
 80105d2:	9b01      	ldr	r3, [sp, #4]
 80105d4:	6120      	str	r0, [r4, #16]
 80105d6:	b15b      	cbz	r3, 80105f0 <__smakebuf_r+0x74>
 80105d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105dc:	4630      	mov	r0, r6
 80105de:	f000 f915 	bl	801080c <_isatty_r>
 80105e2:	b128      	cbz	r0, 80105f0 <__smakebuf_r+0x74>
 80105e4:	89a3      	ldrh	r3, [r4, #12]
 80105e6:	f023 0303 	bic.w	r3, r3, #3
 80105ea:	f043 0301 	orr.w	r3, r3, #1
 80105ee:	81a3      	strh	r3, [r4, #12]
 80105f0:	89a0      	ldrh	r0, [r4, #12]
 80105f2:	4305      	orrs	r5, r0
 80105f4:	81a5      	strh	r5, [r4, #12]
 80105f6:	e7cd      	b.n	8010594 <__smakebuf_r+0x18>
 80105f8:	0801038d 	.word	0x0801038d

080105fc <memmove>:
 80105fc:	4288      	cmp	r0, r1
 80105fe:	b510      	push	{r4, lr}
 8010600:	eb01 0402 	add.w	r4, r1, r2
 8010604:	d902      	bls.n	801060c <memmove+0x10>
 8010606:	4284      	cmp	r4, r0
 8010608:	4623      	mov	r3, r4
 801060a:	d807      	bhi.n	801061c <memmove+0x20>
 801060c:	1e43      	subs	r3, r0, #1
 801060e:	42a1      	cmp	r1, r4
 8010610:	d008      	beq.n	8010624 <memmove+0x28>
 8010612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010616:	f803 2f01 	strb.w	r2, [r3, #1]!
 801061a:	e7f8      	b.n	801060e <memmove+0x12>
 801061c:	4402      	add	r2, r0
 801061e:	4601      	mov	r1, r0
 8010620:	428a      	cmp	r2, r1
 8010622:	d100      	bne.n	8010626 <memmove+0x2a>
 8010624:	bd10      	pop	{r4, pc}
 8010626:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801062a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801062e:	e7f7      	b.n	8010620 <memmove+0x24>

08010630 <__malloc_lock>:
 8010630:	4801      	ldr	r0, [pc, #4]	; (8010638 <__malloc_lock+0x8>)
 8010632:	f7ff bf7d 	b.w	8010530 <__retarget_lock_acquire_recursive>
 8010636:	bf00      	nop
 8010638:	200006d0 	.word	0x200006d0

0801063c <__malloc_unlock>:
 801063c:	4801      	ldr	r0, [pc, #4]	; (8010644 <__malloc_unlock+0x8>)
 801063e:	f7ff bf78 	b.w	8010532 <__retarget_lock_release_recursive>
 8010642:	bf00      	nop
 8010644:	200006d0 	.word	0x200006d0

08010648 <_realloc_r>:
 8010648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801064a:	4607      	mov	r7, r0
 801064c:	4614      	mov	r4, r2
 801064e:	460e      	mov	r6, r1
 8010650:	b921      	cbnz	r1, 801065c <_realloc_r+0x14>
 8010652:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010656:	4611      	mov	r1, r2
 8010658:	f7ff b9a2 	b.w	800f9a0 <_malloc_r>
 801065c:	b922      	cbnz	r2, 8010668 <_realloc_r+0x20>
 801065e:	f7ff f94f 	bl	800f900 <_free_r>
 8010662:	4625      	mov	r5, r4
 8010664:	4628      	mov	r0, r5
 8010666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010668:	f000 f8f2 	bl	8010850 <_malloc_usable_size_r>
 801066c:	42a0      	cmp	r0, r4
 801066e:	d20f      	bcs.n	8010690 <_realloc_r+0x48>
 8010670:	4621      	mov	r1, r4
 8010672:	4638      	mov	r0, r7
 8010674:	f7ff f994 	bl	800f9a0 <_malloc_r>
 8010678:	4605      	mov	r5, r0
 801067a:	2800      	cmp	r0, #0
 801067c:	d0f2      	beq.n	8010664 <_realloc_r+0x1c>
 801067e:	4631      	mov	r1, r6
 8010680:	4622      	mov	r2, r4
 8010682:	f7fe fc65 	bl	800ef50 <memcpy>
 8010686:	4631      	mov	r1, r6
 8010688:	4638      	mov	r0, r7
 801068a:	f7ff f939 	bl	800f900 <_free_r>
 801068e:	e7e9      	b.n	8010664 <_realloc_r+0x1c>
 8010690:	4635      	mov	r5, r6
 8010692:	e7e7      	b.n	8010664 <_realloc_r+0x1c>

08010694 <_raise_r>:
 8010694:	291f      	cmp	r1, #31
 8010696:	b538      	push	{r3, r4, r5, lr}
 8010698:	4604      	mov	r4, r0
 801069a:	460d      	mov	r5, r1
 801069c:	d904      	bls.n	80106a8 <_raise_r+0x14>
 801069e:	2316      	movs	r3, #22
 80106a0:	6003      	str	r3, [r0, #0]
 80106a2:	f04f 30ff 	mov.w	r0, #4294967295
 80106a6:	bd38      	pop	{r3, r4, r5, pc}
 80106a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80106aa:	b112      	cbz	r2, 80106b2 <_raise_r+0x1e>
 80106ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106b0:	b94b      	cbnz	r3, 80106c6 <_raise_r+0x32>
 80106b2:	4620      	mov	r0, r4
 80106b4:	f000 f830 	bl	8010718 <_getpid_r>
 80106b8:	462a      	mov	r2, r5
 80106ba:	4601      	mov	r1, r0
 80106bc:	4620      	mov	r0, r4
 80106be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106c2:	f000 b817 	b.w	80106f4 <_kill_r>
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d00a      	beq.n	80106e0 <_raise_r+0x4c>
 80106ca:	1c59      	adds	r1, r3, #1
 80106cc:	d103      	bne.n	80106d6 <_raise_r+0x42>
 80106ce:	2316      	movs	r3, #22
 80106d0:	6003      	str	r3, [r0, #0]
 80106d2:	2001      	movs	r0, #1
 80106d4:	e7e7      	b.n	80106a6 <_raise_r+0x12>
 80106d6:	2400      	movs	r4, #0
 80106d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80106dc:	4628      	mov	r0, r5
 80106de:	4798      	blx	r3
 80106e0:	2000      	movs	r0, #0
 80106e2:	e7e0      	b.n	80106a6 <_raise_r+0x12>

080106e4 <raise>:
 80106e4:	4b02      	ldr	r3, [pc, #8]	; (80106f0 <raise+0xc>)
 80106e6:	4601      	mov	r1, r0
 80106e8:	6818      	ldr	r0, [r3, #0]
 80106ea:	f7ff bfd3 	b.w	8010694 <_raise_r>
 80106ee:	bf00      	nop
 80106f0:	20000040 	.word	0x20000040

080106f4 <_kill_r>:
 80106f4:	b538      	push	{r3, r4, r5, lr}
 80106f6:	4d07      	ldr	r5, [pc, #28]	; (8010714 <_kill_r+0x20>)
 80106f8:	2300      	movs	r3, #0
 80106fa:	4604      	mov	r4, r0
 80106fc:	4608      	mov	r0, r1
 80106fe:	4611      	mov	r1, r2
 8010700:	602b      	str	r3, [r5, #0]
 8010702:	f7f4 ff17 	bl	8005534 <_kill>
 8010706:	1c43      	adds	r3, r0, #1
 8010708:	d102      	bne.n	8010710 <_kill_r+0x1c>
 801070a:	682b      	ldr	r3, [r5, #0]
 801070c:	b103      	cbz	r3, 8010710 <_kill_r+0x1c>
 801070e:	6023      	str	r3, [r4, #0]
 8010710:	bd38      	pop	{r3, r4, r5, pc}
 8010712:	bf00      	nop
 8010714:	200006d8 	.word	0x200006d8

08010718 <_getpid_r>:
 8010718:	f7f4 bf04 	b.w	8005524 <_getpid>

0801071c <__sread>:
 801071c:	b510      	push	{r4, lr}
 801071e:	460c      	mov	r4, r1
 8010720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010724:	f000 f89c 	bl	8010860 <_read_r>
 8010728:	2800      	cmp	r0, #0
 801072a:	bfab      	itete	ge
 801072c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801072e:	89a3      	ldrhlt	r3, [r4, #12]
 8010730:	181b      	addge	r3, r3, r0
 8010732:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010736:	bfac      	ite	ge
 8010738:	6563      	strge	r3, [r4, #84]	; 0x54
 801073a:	81a3      	strhlt	r3, [r4, #12]
 801073c:	bd10      	pop	{r4, pc}

0801073e <__swrite>:
 801073e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010742:	461f      	mov	r7, r3
 8010744:	898b      	ldrh	r3, [r1, #12]
 8010746:	05db      	lsls	r3, r3, #23
 8010748:	4605      	mov	r5, r0
 801074a:	460c      	mov	r4, r1
 801074c:	4616      	mov	r6, r2
 801074e:	d505      	bpl.n	801075c <__swrite+0x1e>
 8010750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010754:	2302      	movs	r3, #2
 8010756:	2200      	movs	r2, #0
 8010758:	f000 f868 	bl	801082c <_lseek_r>
 801075c:	89a3      	ldrh	r3, [r4, #12]
 801075e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010766:	81a3      	strh	r3, [r4, #12]
 8010768:	4632      	mov	r2, r6
 801076a:	463b      	mov	r3, r7
 801076c:	4628      	mov	r0, r5
 801076e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010772:	f000 b817 	b.w	80107a4 <_write_r>

08010776 <__sseek>:
 8010776:	b510      	push	{r4, lr}
 8010778:	460c      	mov	r4, r1
 801077a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801077e:	f000 f855 	bl	801082c <_lseek_r>
 8010782:	1c43      	adds	r3, r0, #1
 8010784:	89a3      	ldrh	r3, [r4, #12]
 8010786:	bf15      	itete	ne
 8010788:	6560      	strne	r0, [r4, #84]	; 0x54
 801078a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801078e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010792:	81a3      	strheq	r3, [r4, #12]
 8010794:	bf18      	it	ne
 8010796:	81a3      	strhne	r3, [r4, #12]
 8010798:	bd10      	pop	{r4, pc}

0801079a <__sclose>:
 801079a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801079e:	f000 b813 	b.w	80107c8 <_close_r>
	...

080107a4 <_write_r>:
 80107a4:	b538      	push	{r3, r4, r5, lr}
 80107a6:	4d07      	ldr	r5, [pc, #28]	; (80107c4 <_write_r+0x20>)
 80107a8:	4604      	mov	r4, r0
 80107aa:	4608      	mov	r0, r1
 80107ac:	4611      	mov	r1, r2
 80107ae:	2200      	movs	r2, #0
 80107b0:	602a      	str	r2, [r5, #0]
 80107b2:	461a      	mov	r2, r3
 80107b4:	f7f4 fef5 	bl	80055a2 <_write>
 80107b8:	1c43      	adds	r3, r0, #1
 80107ba:	d102      	bne.n	80107c2 <_write_r+0x1e>
 80107bc:	682b      	ldr	r3, [r5, #0]
 80107be:	b103      	cbz	r3, 80107c2 <_write_r+0x1e>
 80107c0:	6023      	str	r3, [r4, #0]
 80107c2:	bd38      	pop	{r3, r4, r5, pc}
 80107c4:	200006d8 	.word	0x200006d8

080107c8 <_close_r>:
 80107c8:	b538      	push	{r3, r4, r5, lr}
 80107ca:	4d06      	ldr	r5, [pc, #24]	; (80107e4 <_close_r+0x1c>)
 80107cc:	2300      	movs	r3, #0
 80107ce:	4604      	mov	r4, r0
 80107d0:	4608      	mov	r0, r1
 80107d2:	602b      	str	r3, [r5, #0]
 80107d4:	f7f4 ff01 	bl	80055da <_close>
 80107d8:	1c43      	adds	r3, r0, #1
 80107da:	d102      	bne.n	80107e2 <_close_r+0x1a>
 80107dc:	682b      	ldr	r3, [r5, #0]
 80107de:	b103      	cbz	r3, 80107e2 <_close_r+0x1a>
 80107e0:	6023      	str	r3, [r4, #0]
 80107e2:	bd38      	pop	{r3, r4, r5, pc}
 80107e4:	200006d8 	.word	0x200006d8

080107e8 <_fstat_r>:
 80107e8:	b538      	push	{r3, r4, r5, lr}
 80107ea:	4d07      	ldr	r5, [pc, #28]	; (8010808 <_fstat_r+0x20>)
 80107ec:	2300      	movs	r3, #0
 80107ee:	4604      	mov	r4, r0
 80107f0:	4608      	mov	r0, r1
 80107f2:	4611      	mov	r1, r2
 80107f4:	602b      	str	r3, [r5, #0]
 80107f6:	f7f4 fefc 	bl	80055f2 <_fstat>
 80107fa:	1c43      	adds	r3, r0, #1
 80107fc:	d102      	bne.n	8010804 <_fstat_r+0x1c>
 80107fe:	682b      	ldr	r3, [r5, #0]
 8010800:	b103      	cbz	r3, 8010804 <_fstat_r+0x1c>
 8010802:	6023      	str	r3, [r4, #0]
 8010804:	bd38      	pop	{r3, r4, r5, pc}
 8010806:	bf00      	nop
 8010808:	200006d8 	.word	0x200006d8

0801080c <_isatty_r>:
 801080c:	b538      	push	{r3, r4, r5, lr}
 801080e:	4d06      	ldr	r5, [pc, #24]	; (8010828 <_isatty_r+0x1c>)
 8010810:	2300      	movs	r3, #0
 8010812:	4604      	mov	r4, r0
 8010814:	4608      	mov	r0, r1
 8010816:	602b      	str	r3, [r5, #0]
 8010818:	f7f4 fefb 	bl	8005612 <_isatty>
 801081c:	1c43      	adds	r3, r0, #1
 801081e:	d102      	bne.n	8010826 <_isatty_r+0x1a>
 8010820:	682b      	ldr	r3, [r5, #0]
 8010822:	b103      	cbz	r3, 8010826 <_isatty_r+0x1a>
 8010824:	6023      	str	r3, [r4, #0]
 8010826:	bd38      	pop	{r3, r4, r5, pc}
 8010828:	200006d8 	.word	0x200006d8

0801082c <_lseek_r>:
 801082c:	b538      	push	{r3, r4, r5, lr}
 801082e:	4d07      	ldr	r5, [pc, #28]	; (801084c <_lseek_r+0x20>)
 8010830:	4604      	mov	r4, r0
 8010832:	4608      	mov	r0, r1
 8010834:	4611      	mov	r1, r2
 8010836:	2200      	movs	r2, #0
 8010838:	602a      	str	r2, [r5, #0]
 801083a:	461a      	mov	r2, r3
 801083c:	f7f4 fef4 	bl	8005628 <_lseek>
 8010840:	1c43      	adds	r3, r0, #1
 8010842:	d102      	bne.n	801084a <_lseek_r+0x1e>
 8010844:	682b      	ldr	r3, [r5, #0]
 8010846:	b103      	cbz	r3, 801084a <_lseek_r+0x1e>
 8010848:	6023      	str	r3, [r4, #0]
 801084a:	bd38      	pop	{r3, r4, r5, pc}
 801084c:	200006d8 	.word	0x200006d8

08010850 <_malloc_usable_size_r>:
 8010850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010854:	1f18      	subs	r0, r3, #4
 8010856:	2b00      	cmp	r3, #0
 8010858:	bfbc      	itt	lt
 801085a:	580b      	ldrlt	r3, [r1, r0]
 801085c:	18c0      	addlt	r0, r0, r3
 801085e:	4770      	bx	lr

08010860 <_read_r>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	4d07      	ldr	r5, [pc, #28]	; (8010880 <_read_r+0x20>)
 8010864:	4604      	mov	r4, r0
 8010866:	4608      	mov	r0, r1
 8010868:	4611      	mov	r1, r2
 801086a:	2200      	movs	r2, #0
 801086c:	602a      	str	r2, [r5, #0]
 801086e:	461a      	mov	r2, r3
 8010870:	f7f4 fe7a 	bl	8005568 <_read>
 8010874:	1c43      	adds	r3, r0, #1
 8010876:	d102      	bne.n	801087e <_read_r+0x1e>
 8010878:	682b      	ldr	r3, [r5, #0]
 801087a:	b103      	cbz	r3, 801087e <_read_r+0x1e>
 801087c:	6023      	str	r3, [r4, #0]
 801087e:	bd38      	pop	{r3, r4, r5, pc}
 8010880:	200006d8 	.word	0x200006d8

08010884 <_init>:
 8010884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010886:	bf00      	nop
 8010888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801088a:	bc08      	pop	{r3}
 801088c:	469e      	mov	lr, r3
 801088e:	4770      	bx	lr

08010890 <_fini>:
 8010890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010892:	bf00      	nop
 8010894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010896:	bc08      	pop	{r3}
 8010898:	469e      	mov	lr, r3
 801089a:	4770      	bx	lr
