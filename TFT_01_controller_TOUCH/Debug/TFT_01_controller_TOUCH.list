
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013e00  08012dc8  08012dc8  00022dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026bc8  08026bc8  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08026bc8  08026bc8  00036bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026bd0  08026bd0  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026bd0  08026bd0  00036bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026bd4  08026bd4  00036bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08026bd8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  20000214  08026dec  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008dc  08026dec  000408dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022dec  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a6b  00000000  00000000  00063030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00067aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000078b6  00000000  00000000  00069320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024b9b  00000000  00000000  00070bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000987b4  00000000  00000000  00095771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0012df25  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000016e0  00000000  00000000  0012df78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000079c0  00000000  00000000  0012f658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012dac 	.word	0x08012dac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	08012dac 	.word	0x08012dac

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000028c 	.word	0x2000028c

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	2000028c 	.word	0x2000028c

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	2000028c 	.word	0x2000028c

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	2000028c 	.word	0x2000028c

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	2000028c 	.word	0x2000028c

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000028c 	.word	0x2000028c

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f005 feea 	bl	8007a08 <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	20000290 	.word	0x20000290

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f006 fe1b 	bl	80088e8 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f006 fe15 	bl	80088e8 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f006 fe0a 	bl	80088e8 <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f006 fdf7 	bl	80088e8 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f006 fdf1 	bl	80088e8 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f006 fde5 	bl	80088e8 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f006 fddb 	bl	80088e8 <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f006 fce0 	bl	80088e8 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f006 fcda 	bl	80088e8 <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f006 fca3 	bl	80088e8 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	20000290 	.word	0x20000290

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f006 fc83 	bl	80088e8 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f006 fc7a 	bl	80088e8 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000290 	.word	0x20000290
 8002054:	08015fa8 	.word	0x08015fa8
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f006 fc3d 	bl	80088e8 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f00a fa54 	bl	800c52a <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f006 fc2d 	bl	80088e8 <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000294 	.word	0x20000294
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002bd 	.word	0x200002bd

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f005 fb8a 	bl	80079f0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f006 fac1 	bl	80088b8 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f005 fb55 	bl	80079f0 <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f005 fb4f 	bl	80079f0 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f006 fa83 	bl	80088b8 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f005 fb17 	bl	80079f0 <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f005 fcc4 	bl	8007d74 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f005 fcaf 	bl	8007d56 <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f005 fc7e 	bl	8007d06 <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002bd 	.word	0x200002bd
 8002420:	200002c0 	.word	0x200002c0
 8002424:	200002bc 	.word	0x200002bc
 8002428:	20000294 	.word	0x20000294
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f005 fc6e 	bl	8007d22 <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002bd 	.word	0x200002bd

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f006 fa35 	bl	80088e8 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f005 fab7 	bl	8007a08 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002bd 	.word	0x200002bd
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_DMA_Init+0x6c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <MX_DMA_Init+0x6c>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_DMA_Init+0x6c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	200b      	movs	r0, #11
 800251c:	f005 fbd7 	bl	8007cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002520:	200b      	movs	r0, #11
 8002522:	f005 fbf0 	bl	8007d06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	200c      	movs	r0, #12
 800252c:	f005 fbcf 	bl	8007cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002530:	200c      	movs	r0, #12
 8002532:	f005 fbe8 	bl	8007d06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2010      	movs	r0, #16
 800253c:	f005 fbc7 	bl	8007cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002540:	2010      	movs	r0, #16
 8002542:	f005 fbe0 	bl	8007d06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2011      	movs	r0, #17
 800254c:	f005 fbbf 	bl	8007cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002550:	2011      	movs	r0, #17
 8002552:	f005 fbd8 	bl	8007d06 <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <DS3231_Init+0x30>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f8ca 	bl	800270c <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 f88e 	bl	800269a <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800257e:	f000 f8e7 	bl	8002750 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002582:	f000 f8ad 	bl	80026e0 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f846 	bl	8002618 <DS3231_SetInterruptMode>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200002c4 	.word	0x200002c4

08002598 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	733b      	strb	r3, [r7, #12]
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <DS3231_SetRegByte+0x38>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2302      	movs	r3, #2
 80025c0:	21d0      	movs	r1, #208	; 0xd0
 80025c2:	f006 fb21 	bl	8008c08 <HAL_I2C_Master_Transmit>
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002c4 	.word	0x200002c4

080025d4 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2301      	movs	r3, #1
 80025ec:	21d0      	movs	r1, #208	; 0xd0
 80025ee:	f006 fb0b 	bl	8008c08 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	f107 020f 	add.w	r2, r7, #15
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	21d0      	movs	r1, #208	; 0xd0
 8002604:	f006 fbfe 	bl	8008e04 <HAL_I2C_Master_Receive>
	return val;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200002c4 	.word	0x200002c4

08002618 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002622:	200e      	movs	r0, #14
 8002624:	f7ff ffd6 	bl	80025d4 <DS3231_GetRegByte>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	b25a      	sxtb	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b25b      	sxtb	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	200e      	movs	r0, #14
 800264c:	f7ff ffa4 	bl	8002598 <DS3231_SetRegByte>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002662:	200e      	movs	r0, #14
 8002664:	f7ff ffb6 	bl	80025d4 <DS3231_GetRegByte>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	b25b      	sxtb	r3, r3
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d102      	bne.n	8002682 <DS3231_EnableOscillator+0x2a>
 800267c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002680:	e000      	b.n	8002684 <DS3231_EnableOscillator+0x2c>
 8002682:	2200      	movs	r2, #0
 8002684:	4313      	orrs	r3, r2
 8002686:	b25b      	sxtb	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	200e      	movs	r0, #14
 800268e:	f7ff ff83 	bl	8002598 <DS3231_SetRegByte>
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80026a4:	200e      	movs	r0, #14
 80026a6:	f7ff ff95 	bl	80025d4 <DS3231_GetRegByte>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	200e      	movs	r0, #14
 80026ce:	f7ff ff63 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff ffa0 	bl	8002618 <DS3231_SetInterruptMode>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80026e6:	200f      	movs	r0, #15
 80026e8:	f7ff ff74 	bl	80025d4 <DS3231_GetRegByte>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	200f      	movs	r0, #15
 8002700:	f7ff ff4a 	bl	8002598 <DS3231_SetRegByte>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002716:	200e      	movs	r0, #14
 8002718:	f7ff ff5c 	bl	80025d4 <DS3231_GetRegByte>
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	b25a      	sxtb	r2, r3
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b25b      	sxtb	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b25b      	sxtb	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4619      	mov	r1, r3
 800273c:	200e      	movs	r0, #14
 800273e:	f7ff ff2b 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff ff68 	bl	8002618 <DS3231_SetInterruptMode>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002756:	200f      	movs	r0, #15
 8002758:	f7ff ff3c 	bl	80025d4 <DS3231_GetRegByte>
 800275c:	4603      	mov	r3, r0
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	200f      	movs	r0, #15
 8002770:	f7ff ff12 	bl	8002598 <DS3231_SetRegByte>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002780:	2003      	movs	r0, #3
 8002782:	f7ff ff27 	bl	80025d4 <DS3231_GetRegByte>
 8002786:	4603      	mov	r3, r0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f866 	bl	800285a <DS3231_DecodeBCD>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002798:	2002      	movs	r0, #2
 800279a:	f7ff ff1b 	bl	80025d4 <DS3231_GetRegByte>
 800279e:	4603      	mov	r3, r0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f85a 	bl	800285a <DS3231_DecodeBCD>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 80027b0:	2001      	movs	r0, #1
 80027b2:	f7ff ff0f 	bl	80025d4 <DS3231_GetRegByte>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f84e 	bl	800285a <DS3231_DecodeBCD>
 80027be:	4603      	mov	r3, r0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f85b 	bl	800288c <DS3231_EncodeBCD>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4619      	mov	r1, r3
 80027da:	2003      	movs	r0, #3
 80027dc:	f7ff fedc 	bl	8002598 <DS3231_SetRegByte>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f846 	bl	800288c <DS3231_EncodeBCD>
 8002800:	4603      	mov	r3, r0
 8002802:	4619      	mov	r1, r3
 8002804:	2002      	movs	r0, #2
 8002806:	f7ff fec7 	bl	8002598 <DS3231_SetRegByte>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f834 	bl	800288c <DS3231_EncodeBCD>
 8002824:	4603      	mov	r3, r0
 8002826:	4619      	mov	r1, r3
 8002828:	2001      	movs	r0, #1
 800282a:	f7ff feb5 	bl	8002598 <DS3231_SetRegByte>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f822 	bl	800288c <DS3231_EncodeBCD>
 8002848:	4603      	mov	r3, r0
 800284a:	4619      	mov	r1, r3
 800284c:	2000      	movs	r0, #0
 800284e:	f7ff fea3 	bl	8002598 <DS3231_SetRegByte>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	4413      	add	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	b2da      	uxtb	r2, r3
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	b2db      	uxtb	r3, r3
 800287c:	4413      	add	r3, r2
 800287e:	b2db      	uxtb	r3, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002896:	79fa      	ldrb	r2, [r7, #7]
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <DS3231_EncodeBCD+0x40>)
 800289a:	fba3 1302 	umull	r1, r3, r3, r2
 800289e:	08d9      	lsrs	r1, r3, #3
 80028a0:	460b      	mov	r3, r1
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	4907      	ldr	r1, [pc, #28]	; (80028cc <DS3231_EncodeBCD+0x40>)
 80028b0:	fba1 1303 	umull	r1, r3, r1, r3
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	4413      	add	r3, r2
 80028be:	b2db      	uxtb	r3, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	cccccccd 	.word	0xcccccccd

080028d0 <eeprom_wait>:
#define WRITE_TIMEOUT   6

static uint32_t last_write;

void eeprom_wait(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 80028d4:	bf00      	nop
 80028d6:	f005 f88b 	bl	80079f0 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <eeprom_wait+0x1c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d9f7      	bls.n	80028d6 <eeprom_wait+0x6>
    {
    }
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000248 	.word	0x20000248

080028f0 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80028fc:	f7ff ffe8 	bl	80028d0 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	9102      	str	r1, [sp, #8]
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	21a0      	movs	r1, #160	; 0xa0
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <eeprom_read+0x38>)
 800291a:	f006 fd93 	bl	8009444 <HAL_I2C_Mem_Read>
 800291e:	4603      	mov	r3, r0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000308 	.word	0x20000308

0800292c <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af04      	add	r7, sp, #16
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002938:	f7ff ffca 	bl	80028d0 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	9102      	str	r1, [sp, #8]
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	21a0      	movs	r1, #160	; 0xa0
 8002954:	4807      	ldr	r0, [pc, #28]	; (8002974 <eeprom_write+0x48>)
 8002956:	f006 fc7b 	bl	8009250 <HAL_I2C_Mem_Write>
 800295a:	4603      	mov	r3, r0
 800295c:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 800295e:	f005 f847 	bl	80079f0 <HAL_GetTick>
 8002962:	4603      	mov	r3, r0
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <eeprom_write+0x4c>)
 8002966:	6013      	str	r3, [r2, #0]

    return rc;
 8002968:	7dfb      	ldrb	r3, [r7, #23]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000308 	.word	0x20000308
 8002978:	20000248 	.word	0x20000248

0800297c <EEPROM_RelayStateUpdate>:

void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	460a      	mov	r2, r1
 8002986:	71fb      	strb	r3, [r7, #7]
 8002988:	4613      	mov	r3, r2
 800298a:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 800298c:	79bb      	ldrb	r3, [r7, #6]
 800298e:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <EEPROM_RelayStateUpdate+0x2a>
 8002996:	f107 030f 	add.w	r3, r7, #15
 800299a:	2201      	movs	r2, #1
 800299c:	4619      	mov	r1, r3
 800299e:	202e      	movs	r0, #46	; 0x2e
 80029a0:	f7ff ffc4 	bl	800292c <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 80029a4:	e01f      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d107      	bne.n	80029bc <EEPROM_RelayStateUpdate+0x40>
 80029ac:	f107 030f 	add.w	r3, r7, #15
 80029b0:	2201      	movs	r2, #1
 80029b2:	4619      	mov	r1, r3
 80029b4:	202f      	movs	r0, #47	; 0x2f
 80029b6:	f7ff ffb9 	bl	800292c <eeprom_write>
}
 80029ba:	e014      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <EEPROM_RelayStateUpdate+0x56>
 80029c2:	f107 030f 	add.w	r3, r7, #15
 80029c6:	2201      	movs	r2, #1
 80029c8:	4619      	mov	r1, r3
 80029ca:	2030      	movs	r0, #48	; 0x30
 80029cc:	f7ff ffae 	bl	800292c <eeprom_write>
}
 80029d0:	e009      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d106      	bne.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
 80029d8:	f107 030f 	add.w	r3, r7, #15
 80029dc:	2201      	movs	r2, #1
 80029de:	4619      	mov	r1, r3
 80029e0:	2031      	movs	r0, #49	; 0x31
 80029e2:	f7ff ffa3 	bl	800292c <eeprom_write>
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <EEPROM_LightStateUpdate>:

void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	460a      	mov	r2, r1
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	4613      	mov	r3, r2
 80029fc:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 80029fe:	79bb      	ldrb	r3, [r7, #6]
 8002a00:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <EEPROM_LightStateUpdate+0x2a>
 8002a08:	f107 030f 	add.w	r3, r7, #15
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4619      	mov	r1, r3
 8002a10:	2033      	movs	r0, #51	; 0x33
 8002a12:	f7ff ff8b 	bl	800292c <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002a16:	e01f      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d107      	bne.n	8002a2e <EEPROM_LightStateUpdate+0x40>
 8002a1e:	f107 030f 	add.w	r3, r7, #15
 8002a22:	2201      	movs	r2, #1
 8002a24:	4619      	mov	r1, r3
 8002a26:	2034      	movs	r0, #52	; 0x34
 8002a28:	f7ff ff80 	bl	800292c <eeprom_write>
}
 8002a2c:	e014      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d107      	bne.n	8002a44 <EEPROM_LightStateUpdate+0x56>
 8002a34:	f107 030f 	add.w	r3, r7, #15
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	2035      	movs	r0, #53	; 0x35
 8002a3e:	f7ff ff75 	bl	800292c <eeprom_write>
}
 8002a42:	e009      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d106      	bne.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
 8002a4a:	f107 030f 	add.w	r3, r7, #15
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4619      	mov	r1, r3
 8002a52:	2036      	movs	r0, #54	; 0x36
 8002a54:	f7ff ff6a 	bl	800292c <eeprom_write>
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <EEPROM_RelayStateRead>:

uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <EEPROM_RelayStateRead+0x24>
 8002a74:	f107 030f 	add.w	r3, r7, #15
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	202e      	movs	r0, #46	; 0x2e
 8002a7e:	f7ff ff37 	bl	80028f0 <eeprom_read>
 8002a82:	e01f      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d107      	bne.n	8002a9a <EEPROM_RelayStateRead+0x3a>
 8002a8a:	f107 030f 	add.w	r3, r7, #15
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4619      	mov	r1, r3
 8002a92:	202f      	movs	r0, #47	; 0x2f
 8002a94:	f7ff ff2c 	bl	80028f0 <eeprom_read>
 8002a98:	e014      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d107      	bne.n	8002ab0 <EEPROM_RelayStateRead+0x50>
 8002aa0:	f107 030f 	add.w	r3, r7, #15
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	2030      	movs	r0, #48	; 0x30
 8002aaa:	f7ff ff21 	bl	80028f0 <eeprom_read>
 8002aae:	e009      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d106      	bne.n	8002ac4 <EEPROM_RelayStateRead+0x64>
 8002ab6:	f107 030f 	add.w	r3, r7, #15
 8002aba:	2201      	movs	r2, #1
 8002abc:	4619      	mov	r1, r3
 8002abe:	2031      	movs	r0, #49	; 0x31
 8002ac0:	f7ff ff16 	bl	80028f0 <eeprom_read>

	return RelayStan;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <EEPROM_LightStateRead>:

uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <EEPROM_LightStateRead+0x24>
 8002ae2:	f107 030f 	add.w	r3, r7, #15
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4619      	mov	r1, r3
 8002aea:	2033      	movs	r0, #51	; 0x33
 8002aec:	f7ff ff00 	bl	80028f0 <eeprom_read>
 8002af0:	e01f      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d107      	bne.n	8002b08 <EEPROM_LightStateRead+0x3a>
 8002af8:	f107 030f 	add.w	r3, r7, #15
 8002afc:	2201      	movs	r2, #1
 8002afe:	4619      	mov	r1, r3
 8002b00:	2034      	movs	r0, #52	; 0x34
 8002b02:	f7ff fef5 	bl	80028f0 <eeprom_read>
 8002b06:	e014      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <EEPROM_LightStateRead+0x50>
 8002b0e:	f107 030f 	add.w	r3, r7, #15
 8002b12:	2201      	movs	r2, #1
 8002b14:	4619      	mov	r1, r3
 8002b16:	2035      	movs	r0, #53	; 0x35
 8002b18:	f7ff feea 	bl	80028f0 <eeprom_read>
 8002b1c:	e009      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d106      	bne.n	8002b32 <EEPROM_LightStateRead+0x64>
 8002b24:	f107 030f 	add.w	r3, r7, #15
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	2036      	movs	r0, #54	; 0x36
 8002b2e:	f7ff fedf 	bl	80028f0 <eeprom_read>

	return AktualnyStan;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <EEPROM_RelayStateRestore>:

void EEPROM_RelayStateRestore(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff ff8d 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <EEPROM_RelayStateRestore+0x18>
 8002b4c:	2005      	movs	r0, #5
 8002b4e:	f003 ff49 	bl	80069e4 <SendComand>
 8002b52:	e002      	b.n	8002b5a <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002b54:	2006      	movs	r0, #6
 8002b56:	f003 ff45 	bl	80069e4 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f7ff ff80 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <EEPROM_RelayStateRestore+0x32>
 8002b66:	2007      	movs	r0, #7
 8002b68:	f003 ff3c 	bl	80069e4 <SendComand>
 8002b6c:	e002      	b.n	8002b74 <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002b6e:	2008      	movs	r0, #8
 8002b70:	f003 ff38 	bl	80069e4 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002b74:	2003      	movs	r0, #3
 8002b76:	f7ff ff73 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <EEPROM_RelayStateRestore+0x4c>
 8002b80:	2009      	movs	r0, #9
 8002b82:	f003 ff2f 	bl	80069e4 <SendComand>
 8002b86:	e002      	b.n	8002b8e <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002b88:	200a      	movs	r0, #10
 8002b8a:	f003 ff2b 	bl	80069e4 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002b8e:	2004      	movs	r0, #4
 8002b90:	f7ff ff66 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <EEPROM_RelayStateRestore+0x66>
 8002b9a:	200b      	movs	r0, #11
 8002b9c:	f003 ff22 	bl	80069e4 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002ba0:	e002      	b.n	8002ba8 <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002ba2:	200c      	movs	r0, #12
 8002ba4:	f003 ff1e 	bl	80069e4 <SendComand>
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}

08002bac <EEPROM_LightStateRestore>:

void EEPROM_LightStateRestore(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7ff ff8c 	bl	8002ace <EEPROM_LightStateRead>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <EEPROM_LightStateRestore+0x18>
 8002bbc:	200d      	movs	r0, #13
 8002bbe:	f003 ff11 	bl	80069e4 <SendComand>
 8002bc2:	e002      	b.n	8002bca <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002bc4:	200e      	movs	r0, #14
 8002bc6:	f003 ff0d 	bl	80069e4 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002bca:	2002      	movs	r0, #2
 8002bcc:	f7ff ff7f 	bl	8002ace <EEPROM_LightStateRead>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <EEPROM_LightStateRestore+0x32>
 8002bd6:	200f      	movs	r0, #15
 8002bd8:	f003 ff04 	bl	80069e4 <SendComand>
 8002bdc:	e002      	b.n	8002be4 <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002bde:	2010      	movs	r0, #16
 8002be0:	f003 ff00 	bl	80069e4 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002be4:	2003      	movs	r0, #3
 8002be6:	f7ff ff72 	bl	8002ace <EEPROM_LightStateRead>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <EEPROM_LightStateRestore+0x4c>
 8002bf0:	2011      	movs	r0, #17
 8002bf2:	f003 fef7 	bl	80069e4 <SendComand>
 8002bf6:	e002      	b.n	8002bfe <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002bf8:	2012      	movs	r0, #18
 8002bfa:	f003 fef3 	bl	80069e4 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002bfe:	2004      	movs	r0, #4
 8002c00:	f7ff ff65 	bl	8002ace <EEPROM_LightStateRead>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <EEPROM_LightStateRestore+0x66>
 8002c0a:	2013      	movs	r0, #19
 8002c0c:	f003 feea 	bl	80069e4 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002c10:	e002      	b.n	8002c18 <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002c12:	2014      	movs	r0, #20
 8002c14:	f003 fee6 	bl	80069e4 <SendComand>
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002c22:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002c26:	f7ff f967 	bl	8001ef8 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 8002c2a:	238c      	movs	r3, #140	; 0x8c
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	23f0      	movs	r3, #240	; 0xf0
 8002c30:	4aab      	ldr	r2, [pc, #684]	; (8002ee0 <system_init+0x2c4>)
 8002c32:	2132      	movs	r1, #50	; 0x32
 8002c34:	201e      	movs	r0, #30
 8002c36:	f7ff f934 	bl	8001ea2 <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002c3a:	48aa      	ldr	r0, [pc, #680]	; (8002ee4 <system_init+0x2c8>)
 8002c3c:	f7fe fd58 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 8002c40:	49a9      	ldr	r1, [pc, #676]	; (8002ee8 <system_init+0x2cc>)
 8002c42:	48aa      	ldr	r0, [pc, #680]	; (8002eec <system_init+0x2d0>)
 8002c44:	f00c fa9c 	bl	800f180 <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002c48:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2300      	movs	r3, #0
 8002c54:	220a      	movs	r2, #10
 8002c56:	213c      	movs	r1, #60	; 0x3c
 8002c58:	48a4      	ldr	r0, [pc, #656]	; (8002eec <system_init+0x2d0>)
 8002c5a:	f7fe ff63 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 8002c5e:	f004 fec7 	bl	80079f0 <HAL_GetTick>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4aa2      	ldr	r2, [pc, #648]	; (8002ef0 <system_init+0x2d4>)
 8002c66:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 8002c68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	2305      	movs	r3, #5
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2314      	movs	r3, #20
 8002c74:	2214      	movs	r2, #20
 8002c76:	21be      	movs	r1, #190	; 0xbe
 8002c78:	203c      	movs	r0, #60	; 0x3c
 8002c7a:	f7fe fc6b 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 8002c7e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	2305      	movs	r3, #5
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2314      	movs	r3, #20
 8002c8a:	2214      	movs	r2, #20
 8002c8c:	21be      	movs	r1, #190	; 0xbe
 8002c8e:	205a      	movs	r0, #90	; 0x5a
 8002c90:	f7fe fc60 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 8002c94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c98:	9301      	str	r3, [sp, #4]
 8002c9a:	2305      	movs	r3, #5
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	2314      	movs	r3, #20
 8002ca0:	2214      	movs	r2, #20
 8002ca2:	21be      	movs	r1, #190	; 0xbe
 8002ca4:	2078      	movs	r0, #120	; 0x78
 8002ca6:	f7fe fc55 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 8002caa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	2305      	movs	r3, #5
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2314      	movs	r3, #20
 8002cb6:	2214      	movs	r2, #20
 8002cb8:	21be      	movs	r1, #190	; 0xbe
 8002cba:	2096      	movs	r0, #150	; 0x96
 8002cbc:	f7fe fc4a 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 8002cc0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	2305      	movs	r3, #5
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	2314      	movs	r3, #20
 8002ccc:	2214      	movs	r2, #20
 8002cce:	21be      	movs	r1, #190	; 0xbe
 8002cd0:	20b4      	movs	r0, #180	; 0xb4
 8002cd2:	f7fe fc3f 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 8002cd6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	2305      	movs	r3, #5
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2314      	movs	r3, #20
 8002ce2:	2214      	movs	r2, #20
 8002ce4:	21be      	movs	r1, #190	; 0xbe
 8002ce6:	20d2      	movs	r0, #210	; 0xd2
 8002ce8:	f7fe fc34 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 8002cec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	2305      	movs	r3, #5
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2314      	movs	r3, #20
 8002cf8:	2214      	movs	r2, #20
 8002cfa:	21be      	movs	r1, #190	; 0xbe
 8002cfc:	20f0      	movs	r0, #240	; 0xf0
 8002cfe:	f7fe fc29 	bl	8001554 <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 8002d02:	f004 fe75 	bl	80079f0 <HAL_GetTick>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a79      	ldr	r2, [pc, #484]	; (8002ef0 <system_init+0x2d4>)
 8002d0a:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 8002d0c:	4879      	ldr	r0, [pc, #484]	; (8002ef4 <system_init+0x2d8>)
 8002d0e:	f7fe fcef 	bl	80016f0 <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8002d12:	20c8      	movs	r0, #200	; 0xc8
 8002d14:	f001 fe5a 	bl	80049cc <initWait>
	  	  LastTime = HAL_GetTick();
 8002d18:	f004 fe6a 	bl	80079f0 <HAL_GetTick>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4a74      	ldr	r2, [pc, #464]	; (8002ef0 <system_init+0x2d4>)
 8002d20:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 8002d22:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	2305      	movs	r3, #5
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2314      	movs	r3, #20
 8002d2e:	2214      	movs	r2, #20
 8002d30:	21be      	movs	r1, #190	; 0xbe
 8002d32:	203c      	movs	r0, #60	; 0x3c
 8002d34:	f7fe fc8b 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 8002d38:	2201      	movs	r2, #1
 8002d3a:	496f      	ldr	r1, [pc, #444]	; (8002ef8 <system_init+0x2dc>)
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f7ff fdd7 	bl	80028f0 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 8002d42:	2025      	movs	r0, #37	; 0x25
 8002d44:	f003 fe4e 	bl	80069e4 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8002d48:	486c      	ldr	r0, [pc, #432]	; (8002efc <system_init+0x2e0>)
 8002d4a:	f004 fc61 	bl	8007610 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 8002d4e:	496c      	ldr	r1, [pc, #432]	; (8002f00 <system_init+0x2e4>)
 8002d50:	4866      	ldr	r0, [pc, #408]	; (8002eec <system_init+0x2d0>)
 8002d52:	f00c fa15 	bl	800f180 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002d56:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2300      	movs	r3, #0
 8002d62:	22dc      	movs	r2, #220	; 0xdc
 8002d64:	2114      	movs	r1, #20
 8002d66:	4861      	ldr	r0, [pc, #388]	; (8002eec <system_init+0x2d0>)
 8002d68:	f7fe fedc 	bl	8001b24 <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8002d6c:	20c8      	movs	r0, #200	; 0xc8
 8002d6e:	f001 fe2d 	bl	80049cc <initWait>
	  	  	  LastTime = HAL_GetTick();
 8002d72:	f004 fe3d 	bl	80079f0 <HAL_GetTick>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a5d      	ldr	r2, [pc, #372]	; (8002ef0 <system_init+0x2d4>)
 8002d7a:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 8002d7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	2305      	movs	r3, #5
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2314      	movs	r3, #20
 8002d88:	2214      	movs	r2, #20
 8002d8a:	21be      	movs	r1, #190	; 0xbe
 8002d8c:	205a      	movs	r0, #90	; 0x5a
 8002d8e:	f7fe fc5e 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 8002d92:	201b      	movs	r0, #27
 8002d94:	f003 fe26 	bl	80069e4 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 8002d98:	f7ff fed0 	bl	8002b3c <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8002d9c:	4857      	ldr	r0, [pc, #348]	; (8002efc <system_init+0x2e0>)
 8002d9e:	f004 fc37 	bl	8007610 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 8002da2:	4958      	ldr	r1, [pc, #352]	; (8002f04 <system_init+0x2e8>)
 8002da4:	4851      	ldr	r0, [pc, #324]	; (8002eec <system_init+0x2d0>)
 8002da6:	f00c f9eb 	bl	800f180 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002daa:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	2301      	movs	r3, #1
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	2300      	movs	r3, #0
 8002db6:	22dc      	movs	r2, #220	; 0xdc
 8002db8:	2114      	movs	r1, #20
 8002dba:	484c      	ldr	r0, [pc, #304]	; (8002eec <system_init+0x2d0>)
 8002dbc:	f7fe feb2 	bl	8001b24 <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8002dc0:	20c8      	movs	r0, #200	; 0xc8
 8002dc2:	f001 fe03 	bl	80049cc <initWait>
  	  	  	  LastTime = HAL_GetTick();
 8002dc6:	f004 fe13 	bl	80079f0 <HAL_GetTick>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4a48      	ldr	r2, [pc, #288]	; (8002ef0 <system_init+0x2d4>)
 8002dce:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 8002dd0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	2305      	movs	r3, #5
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2314      	movs	r3, #20
 8002ddc:	2214      	movs	r2, #20
 8002dde:	21be      	movs	r1, #190	; 0xbe
 8002de0:	2078      	movs	r0, #120	; 0x78
 8002de2:	f7fe fc34 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 8002de6:	2004      	movs	r0, #4
 8002de8:	f003 fdfc 	bl	80069e4 <SendComand>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8002dec:	20c8      	movs	r0, #200	; 0xc8
 8002dee:	f001 fded 	bl	80049cc <initWait>
			  LastTime = HAL_GetTick();
 8002df2:	f004 fdfd 	bl	80079f0 <HAL_GetTick>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4a3d      	ldr	r2, [pc, #244]	; (8002ef0 <system_init+0x2d4>)
 8002dfa:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 8002dfc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2305      	movs	r3, #5
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2314      	movs	r3, #20
 8002e08:	2214      	movs	r2, #20
 8002e0a:	21be      	movs	r1, #190	; 0xbe
 8002e0c:	2096      	movs	r0, #150	; 0x96
 8002e0e:	f7fe fc1e 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 8002e12:	f7ff fecb 	bl	8002bac <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8002e16:	4839      	ldr	r0, [pc, #228]	; (8002efc <system_init+0x2e0>)
 8002e18:	f004 fbfa 	bl	8007610 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 8002e1c:	493a      	ldr	r1, [pc, #232]	; (8002f08 <system_init+0x2ec>)
 8002e1e:	4833      	ldr	r0, [pc, #204]	; (8002eec <system_init+0x2d0>)
 8002e20:	f00c f9ae 	bl	800f180 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002e24:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	22dc      	movs	r2, #220	; 0xdc
 8002e32:	2114      	movs	r1, #20
 8002e34:	482d      	ldr	r0, [pc, #180]	; (8002eec <system_init+0x2d0>)
 8002e36:	f7fe fe75 	bl	8001b24 <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8002e3a:	20c8      	movs	r0, #200	; 0xc8
 8002e3c:	f001 fdc6 	bl	80049cc <initWait>
			  LastTime = HAL_GetTick();
 8002e40:	f004 fdd6 	bl	80079f0 <HAL_GetTick>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4a2a      	ldr	r2, [pc, #168]	; (8002ef0 <system_init+0x2d4>)
 8002e48:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 8002e4a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	2305      	movs	r3, #5
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2314      	movs	r3, #20
 8002e56:	2214      	movs	r2, #20
 8002e58:	21be      	movs	r1, #190	; 0xbe
 8002e5a:	20b4      	movs	r0, #180	; 0xb4
 8002e5c:	f7fe fbf7 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  	  SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 8002e60:	2003      	movs	r0, #3
 8002e62:	f003 fdbf 	bl	80069e4 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8002e66:	20c8      	movs	r0, #200	; 0xc8
 8002e68:	f001 fdb0 	bl	80049cc <initWait>
			  LastTime = HAL_GetTick();
 8002e6c:	f004 fdc0 	bl	80079f0 <HAL_GetTick>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <system_init+0x2d4>)
 8002e74:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 8002e76:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	2305      	movs	r3, #5
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2314      	movs	r3, #20
 8002e82:	2214      	movs	r2, #20
 8002e84:	21be      	movs	r1, #190	; 0xbe
 8002e86:	20d2      	movs	r0, #210	; 0xd2
 8002e88:	f7fe fbe1 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8002e8c:	2015      	movs	r0, #21
 8002e8e:	f003 fda9 	bl	80069e4 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8002e92:	20c8      	movs	r0, #200	; 0xc8
 8002e94:	f001 fd9a 	bl	80049cc <initWait>
			  LastTime = HAL_GetTick();
 8002e98:	f004 fdaa 	bl	80079f0 <HAL_GetTick>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <system_init+0x2d4>)
 8002ea0:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 8002ea2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	2305      	movs	r3, #5
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2314      	movs	r3, #20
 8002eae:	2214      	movs	r2, #20
 8002eb0:	21be      	movs	r1, #190	; 0xbe
 8002eb2:	20f0      	movs	r0, #240	; 0xf0
 8002eb4:	f7fe fbcb 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8002eb8:	2016      	movs	r0, #22
 8002eba:	f003 fd93 	bl	80069e4 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8002ebe:	480f      	ldr	r0, [pc, #60]	; (8002efc <system_init+0x2e0>)
 8002ec0:	f004 fba6 	bl	8007610 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 8002ec4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002ec8:	f001 fd80 	bl	80049cc <initWait>
			  LastTime = HAL_GetTick();
 8002ecc:	f004 fd90 	bl	80079f0 <HAL_GetTick>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4a07      	ldr	r2, [pc, #28]	; (8002ef0 <system_init+0x2d4>)
 8002ed4:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8002ed6:	2301      	movs	r3, #1
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	08016018 	.word	0x08016018
 8002ee4:	08015f9c 	.word	0x08015f9c
 8002ee8:	08012dc8 	.word	0x08012dc8
 8002eec:	200002c8 	.word	0x200002c8
 8002ef0:	20000250 	.word	0x20000250
 8002ef4:	08014024 	.word	0x08014024
 8002ef8:	20000033 	.word	0x20000033
 8002efc:	20000470 	.word	0x20000470
 8002f00:	08012ddc 	.word	0x08012ddc
 8002f04:	08012df8 	.word	0x08012df8
 8002f08:	08012e18 	.word	0x08012e18

08002f0c <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	ed87 0a05 	vstr	s0, [r7, #20]
 8002f16:	edc7 0a04 	vstr	s1, [r7, #16]
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	ed87 1a01 	vstr	s2, [r7, #4]
 8002f22:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002f24:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002f28:	f7fe ffe6 	bl	8001ef8 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f003 fd59 	bl	80069e4 <SendComand>
	  SendComand(UCMD_PRES_1);
 8002f32:	2004      	movs	r0, #4
 8002f34:	f003 fd56 	bl	80069e4 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8002f38:	201b      	movs	r0, #27
 8002f3a:	f003 fd53 	bl	80069e4 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8002f3e:	f7ff fc29 	bl	8002794 <DS3231_GetHour>
 8002f42:	4603      	mov	r3, r0
 8002f44:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8002f46:	f7ff fc31 	bl	80027ac <DS3231_GetMinute>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002f4e:	4881      	ldr	r0, [pc, #516]	; (8003154 <showCurrentParameters+0x248>)
 8002f50:	f7fe fbce 	bl	80016f0 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8002f54:	4980      	ldr	r1, [pc, #512]	; (8003158 <showCurrentParameters+0x24c>)
 8002f56:	4881      	ldr	r0, [pc, #516]	; (800315c <showCurrentParameters+0x250>)
 8002f58:	f00c f912 	bl	800f180 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f5c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	2300      	movs	r3, #0
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002f6a:	220a      	movs	r2, #10
 8002f6c:	212f      	movs	r1, #47	; 0x2f
 8002f6e:	487b      	ldr	r0, [pc, #492]	; (800315c <showCurrentParameters+0x250>)
 8002f70:	f7fe fdd8 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002f74:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2329      	movs	r3, #41	; 0x29
 8002f7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002f80:	2129      	movs	r1, #41	; 0x29
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7fe f904 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002f88:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	232b      	movs	r3, #43	; 0x2b
 8002f90:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002f94:	212b      	movs	r1, #43	; 0x2b
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fe f8fa 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8002f9c:	7ffb      	ldrb	r3, [r7, #31]
 8002f9e:	2b09      	cmp	r3, #9
 8002fa0:	d809      	bhi.n	8002fb6 <showCurrentParameters+0xaa>
 8002fa2:	7fbb      	ldrb	r3, [r7, #30]
 8002fa4:	2b09      	cmp	r3, #9
 8002fa6:	d806      	bhi.n	8002fb6 <showCurrentParameters+0xaa>
 8002fa8:	7ffa      	ldrb	r2, [r7, #31]
 8002faa:	7fbb      	ldrb	r3, [r7, #30]
 8002fac:	496c      	ldr	r1, [pc, #432]	; (8003160 <showCurrentParameters+0x254>)
 8002fae:	486b      	ldr	r0, [pc, #428]	; (800315c <showCurrentParameters+0x250>)
 8002fb0:	f00c f8e6 	bl	800f180 <siprintf>
 8002fb4:	e019      	b.n	8002fea <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 8002fb6:	7ffb      	ldrb	r3, [r7, #31]
 8002fb8:	2b09      	cmp	r3, #9
 8002fba:	d806      	bhi.n	8002fca <showCurrentParameters+0xbe>
 8002fbc:	7ffa      	ldrb	r2, [r7, #31]
 8002fbe:	7fbb      	ldrb	r3, [r7, #30]
 8002fc0:	4968      	ldr	r1, [pc, #416]	; (8003164 <showCurrentParameters+0x258>)
 8002fc2:	4866      	ldr	r0, [pc, #408]	; (800315c <showCurrentParameters+0x250>)
 8002fc4:	f00c f8dc 	bl	800f180 <siprintf>
 8002fc8:	e00f      	b.n	8002fea <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 8002fca:	7fbb      	ldrb	r3, [r7, #30]
 8002fcc:	2b09      	cmp	r3, #9
 8002fce:	d806      	bhi.n	8002fde <showCurrentParameters+0xd2>
 8002fd0:	7ffa      	ldrb	r2, [r7, #31]
 8002fd2:	7fbb      	ldrb	r3, [r7, #30]
 8002fd4:	4964      	ldr	r1, [pc, #400]	; (8003168 <showCurrentParameters+0x25c>)
 8002fd6:	4861      	ldr	r0, [pc, #388]	; (800315c <showCurrentParameters+0x250>)
 8002fd8:	f00c f8d2 	bl	800f180 <siprintf>
 8002fdc:	e005      	b.n	8002fea <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 8002fde:	7ffa      	ldrb	r2, [r7, #31]
 8002fe0:	7fbb      	ldrb	r3, [r7, #30]
 8002fe2:	4962      	ldr	r1, [pc, #392]	; (800316c <showCurrentParameters+0x260>)
 8002fe4:	485d      	ldr	r0, [pc, #372]	; (800315c <showCurrentParameters+0x250>)
 8002fe6:	f00c f8cb 	bl	800f180 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002fea:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2232      	movs	r2, #50	; 0x32
 8002ff8:	2114      	movs	r1, #20
 8002ffa:	4858      	ldr	r0, [pc, #352]	; (800315c <showCurrentParameters+0x250>)
 8002ffc:	f7fe fd92 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 8003000:	4b5b      	ldr	r3, [pc, #364]	; (8003170 <showCurrentParameters+0x264>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fab7 	bl	8000578 <__aeabi_f2d>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4959      	ldr	r1, [pc, #356]	; (8003174 <showCurrentParameters+0x268>)
 8003010:	4852      	ldr	r0, [pc, #328]	; (800315c <showCurrentParameters+0x250>)
 8003012:	f00c f8b5 	bl	800f180 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003016:	f24c 6318 	movw	r3, #50712	; 0xc618
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	2301      	movs	r3, #1
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2300      	movs	r3, #0
 8003022:	2250      	movs	r2, #80	; 0x50
 8003024:	2114      	movs	r1, #20
 8003026:	484d      	ldr	r0, [pc, #308]	; (800315c <showCurrentParameters+0x250>)
 8003028:	f7fe fd7c 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 800302c:	4b52      	ldr	r3, [pc, #328]	; (8003178 <showCurrentParameters+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd faa1 	bl	8000578 <__aeabi_f2d>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4950      	ldr	r1, [pc, #320]	; (800317c <showCurrentParameters+0x270>)
 800303c:	4847      	ldr	r0, [pc, #284]	; (800315c <showCurrentParameters+0x250>)
 800303e:	f00c f89f 	bl	800f180 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003042:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2300      	movs	r3, #0
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2300      	movs	r3, #0
 800304e:	226e      	movs	r2, #110	; 0x6e
 8003050:	2114      	movs	r1, #20
 8003052:	4842      	ldr	r0, [pc, #264]	; (800315c <showCurrentParameters+0x250>)
 8003054:	f7fe fd66 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 8003058:	4b49      	ldr	r3, [pc, #292]	; (8003180 <showCurrentParameters+0x274>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4949      	ldr	r1, [pc, #292]	; (8003184 <showCurrentParameters+0x278>)
 8003060:	483e      	ldr	r0, [pc, #248]	; (800315c <showCurrentParameters+0x250>)
 8003062:	f00c f88d 	bl	800f180 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003066:	f24c 6318 	movw	r3, #50712	; 0xc618
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	2300      	movs	r3, #0
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2300      	movs	r3, #0
 8003072:	228c      	movs	r2, #140	; 0x8c
 8003074:	2114      	movs	r1, #20
 8003076:	4839      	ldr	r0, [pc, #228]	; (800315c <showCurrentParameters+0x250>)
 8003078:	f7fe fd54 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 800307c:	4b42      	ldr	r3, [pc, #264]	; (8003188 <showCurrentParameters+0x27c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd fa79 	bl	8000578 <__aeabi_f2d>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4940      	ldr	r1, [pc, #256]	; (800318c <showCurrentParameters+0x280>)
 800308c:	4833      	ldr	r0, [pc, #204]	; (800315c <showCurrentParameters+0x250>)
 800308e:	f00c f877 	bl	800f180 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003092:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	2300      	movs	r3, #0
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2300      	movs	r3, #0
 800309e:	22aa      	movs	r2, #170	; 0xaa
 80030a0:	2114      	movs	r1, #20
 80030a2:	482e      	ldr	r0, [pc, #184]	; (800315c <showCurrentParameters+0x250>)
 80030a4:	f7fe fd3e 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 80030a8:	4839      	ldr	r0, [pc, #228]	; (8003190 <showCurrentParameters+0x284>)
 80030aa:	f7fe fb21 	bl	80016f0 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80030ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	2305      	movs	r3, #5
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2314      	movs	r3, #20
 80030ba:	225f      	movs	r2, #95	; 0x5f
 80030bc:	21d8      	movs	r1, #216	; 0xd8
 80030be:	20dc      	movs	r0, #220	; 0xdc
 80030c0:	f7fe fac5 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 80030c4:	4933      	ldr	r1, [pc, #204]	; (8003194 <showCurrentParameters+0x288>)
 80030c6:	4825      	ldr	r0, [pc, #148]	; (800315c <showCurrentParameters+0x250>)
 80030c8:	f00c f85a 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80030cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	2300      	movs	r3, #0
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2300      	movs	r3, #0
 80030d8:	22da      	movs	r2, #218	; 0xda
 80030da:	21df      	movs	r1, #223	; 0xdf
 80030dc:	481f      	ldr	r0, [pc, #124]	; (800315c <showCurrentParameters+0x250>)
 80030de:	f7fe fd21 	bl	8001b24 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80030e2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	2305      	movs	r3, #5
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	2314      	movs	r3, #20
 80030ee:	2264      	movs	r2, #100	; 0x64
 80030f0:	21d8      	movs	r1, #216	; 0xd8
 80030f2:	200a      	movs	r0, #10
 80030f4:	f7fe faab 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 80030f8:	4927      	ldr	r1, [pc, #156]	; (8003198 <showCurrentParameters+0x28c>)
 80030fa:	4818      	ldr	r0, [pc, #96]	; (800315c <showCurrentParameters+0x250>)
 80030fc:	f00c f840 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003100:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	2300      	movs	r3, #0
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	22da      	movs	r2, #218	; 0xda
 800310e:	2114      	movs	r1, #20
 8003110:	4812      	ldr	r0, [pc, #72]	; (800315c <showCurrentParameters+0x250>)
 8003112:	f7fe fd07 	bl	8001b24 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003116:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	2305      	movs	r3, #5
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2314      	movs	r3, #20
 8003122:	225a      	movs	r2, #90	; 0x5a
 8003124:	21d8      	movs	r1, #216	; 0xd8
 8003126:	2078      	movs	r0, #120	; 0x78
 8003128:	f7fe fa91 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 800312c:	491b      	ldr	r1, [pc, #108]	; (800319c <showCurrentParameters+0x290>)
 800312e:	480b      	ldr	r0, [pc, #44]	; (800315c <showCurrentParameters+0x250>)
 8003130:	f00c f826 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003134:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	2300      	movs	r3, #0
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2300      	movs	r3, #0
 8003140:	22da      	movs	r2, #218	; 0xda
 8003142:	2184      	movs	r1, #132	; 0x84
 8003144:	4805      	ldr	r0, [pc, #20]	; (800315c <showCurrentParameters+0x250>)
 8003146:	f7fe fced 	bl	8001b24 <EF_PutString>
}
 800314a:	bf00      	nop
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	08015f9c 	.word	0x08015f9c
 8003158:	08012e38 	.word	0x08012e38
 800315c:	200002c8 	.word	0x200002c8
 8003160:	08012e48 	.word	0x08012e48
 8003164:	08012e58 	.word	0x08012e58
 8003168:	08012e68 	.word	0x08012e68
 800316c:	08012e78 	.word	0x08012e78
 8003170:	20000260 	.word	0x20000260
 8003174:	08012e88 	.word	0x08012e88
 8003178:	2000026c 	.word	0x2000026c
 800317c:	08012e9c 	.word	0x08012e9c
 8003180:	20000270 	.word	0x20000270
 8003184:	08012eb0 	.word	0x08012eb0
 8003188:	20000268 	.word	0x20000268
 800318c:	08012ec4 	.word	0x08012ec4
 8003190:	08014024 	.word	0x08014024
 8003194:	08012edc 	.word	0x08012edc
 8003198:	08012ee8 	.word	0x08012ee8
 800319c:	08012ef4 	.word	0x08012ef4

080031a0 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80031a6:	2015      	movs	r0, #21
 80031a8:	f003 fc1c 	bl	80069e4 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80031ac:	f24c 6018 	movw	r0, #50712	; 0xc618
 80031b0:	f7fe fea2 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80031b4:	485c      	ldr	r0, [pc, #368]	; (8003328 <showControlPanel+0x188>)
 80031b6:	f7fe fa9b 	bl	80016f0 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 80031ba:	495c      	ldr	r1, [pc, #368]	; (800332c <showControlPanel+0x18c>)
 80031bc:	485c      	ldr	r0, [pc, #368]	; (8003330 <showControlPanel+0x190>)
 80031be:	f00b ffdf 	bl	800f180 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80031c2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	2300      	movs	r3, #0
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	231f      	movs	r3, #31
 80031ce:	220a      	movs	r2, #10
 80031d0:	2123      	movs	r1, #35	; 0x23
 80031d2:	4857      	ldr	r0, [pc, #348]	; (8003330 <showControlPanel+0x190>)
 80031d4:	f7fe fca6 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80031d8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	2329      	movs	r3, #41	; 0x29
 80031e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031e4:	2129      	movs	r1, #41	; 0x29
 80031e6:	2000      	movs	r0, #0
 80031e8:	f7fd ffd2 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80031ec:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	232b      	movs	r3, #43	; 0x2b
 80031f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031f8:	212b      	movs	r1, #43	; 0x2b
 80031fa:	2000      	movs	r0, #0
 80031fc:	f7fd ffc8 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 8003200:	494c      	ldr	r1, [pc, #304]	; (8003334 <showControlPanel+0x194>)
 8003202:	484b      	ldr	r0, [pc, #300]	; (8003330 <showControlPanel+0x190>)
 8003204:	f00b ffbc 	bl	800f180 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003208:	f24c 6318 	movw	r3, #50712	; 0xc618
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	2300      	movs	r3, #0
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2300      	movs	r3, #0
 8003214:	223c      	movs	r2, #60	; 0x3c
 8003216:	2114      	movs	r1, #20
 8003218:	4845      	ldr	r0, [pc, #276]	; (8003330 <showControlPanel+0x190>)
 800321a:	f7fe fc83 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 800321e:	4946      	ldr	r1, [pc, #280]	; (8003338 <showControlPanel+0x198>)
 8003220:	4843      	ldr	r0, [pc, #268]	; (8003330 <showControlPanel+0x190>)
 8003222:	f00b ffad 	bl	800f180 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003226:	f24c 6318 	movw	r3, #50712	; 0xc618
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	2301      	movs	r3, #1
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2300      	movs	r3, #0
 8003232:	225a      	movs	r2, #90	; 0x5a
 8003234:	2114      	movs	r1, #20
 8003236:	483e      	ldr	r0, [pc, #248]	; (8003330 <showControlPanel+0x190>)
 8003238:	f7fe fc74 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 800323c:	493f      	ldr	r1, [pc, #252]	; (800333c <showControlPanel+0x19c>)
 800323e:	483c      	ldr	r0, [pc, #240]	; (8003330 <showControlPanel+0x190>)
 8003240:	f00b ff9e 	bl	800f180 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003244:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	2300      	movs	r3, #0
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2300      	movs	r3, #0
 8003250:	2278      	movs	r2, #120	; 0x78
 8003252:	2114      	movs	r1, #20
 8003254:	4836      	ldr	r0, [pc, #216]	; (8003330 <showControlPanel+0x190>)
 8003256:	f7fe fc65 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 800325a:	4939      	ldr	r1, [pc, #228]	; (8003340 <showControlPanel+0x1a0>)
 800325c:	4834      	ldr	r0, [pc, #208]	; (8003330 <showControlPanel+0x190>)
 800325e:	f00b ff8f 	bl	800f180 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003262:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	2300      	movs	r3, #0
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2300      	movs	r3, #0
 800326e:	2296      	movs	r2, #150	; 0x96
 8003270:	2114      	movs	r1, #20
 8003272:	482f      	ldr	r0, [pc, #188]	; (8003330 <showControlPanel+0x190>)
 8003274:	f7fe fc56 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003278:	4832      	ldr	r0, [pc, #200]	; (8003344 <showControlPanel+0x1a4>)
 800327a:	f7fe fa39 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800327e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	2305      	movs	r3, #5
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	2314      	movs	r3, #20
 800328a:	225f      	movs	r2, #95	; 0x5f
 800328c:	21d8      	movs	r1, #216	; 0xd8
 800328e:	20dc      	movs	r0, #220	; 0xdc
 8003290:	f7fe f9dd 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8003294:	492c      	ldr	r1, [pc, #176]	; (8003348 <showControlPanel+0x1a8>)
 8003296:	4826      	ldr	r0, [pc, #152]	; (8003330 <showControlPanel+0x190>)
 8003298:	f00b ff72 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800329c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	2300      	movs	r3, #0
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	2300      	movs	r3, #0
 80032a8:	22da      	movs	r2, #218	; 0xda
 80032aa:	21df      	movs	r1, #223	; 0xdf
 80032ac:	4820      	ldr	r0, [pc, #128]	; (8003330 <showControlPanel+0x190>)
 80032ae:	f7fe fc39 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80032b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	2305      	movs	r3, #5
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2314      	movs	r3, #20
 80032be:	2264      	movs	r2, #100	; 0x64
 80032c0:	21d8      	movs	r1, #216	; 0xd8
 80032c2:	200a      	movs	r0, #10
 80032c4:	f7fe f9c3 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 80032c8:	4920      	ldr	r1, [pc, #128]	; (800334c <showControlPanel+0x1ac>)
 80032ca:	4819      	ldr	r0, [pc, #100]	; (8003330 <showControlPanel+0x190>)
 80032cc:	f00b ff58 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80032d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	2300      	movs	r3, #0
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	2300      	movs	r3, #0
 80032dc:	22da      	movs	r2, #218	; 0xda
 80032de:	2114      	movs	r1, #20
 80032e0:	4813      	ldr	r0, [pc, #76]	; (8003330 <showControlPanel+0x190>)
 80032e2:	f7fe fc1f 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80032e6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	2305      	movs	r3, #5
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2314      	movs	r3, #20
 80032f2:	225a      	movs	r2, #90	; 0x5a
 80032f4:	21d8      	movs	r1, #216	; 0xd8
 80032f6:	2078      	movs	r0, #120	; 0x78
 80032f8:	f7fe f9a9 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 80032fc:	4914      	ldr	r1, [pc, #80]	; (8003350 <showControlPanel+0x1b0>)
 80032fe:	480c      	ldr	r0, [pc, #48]	; (8003330 <showControlPanel+0x190>)
 8003300:	f00b ff3e 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003304:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	2300      	movs	r3, #0
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	2300      	movs	r3, #0
 8003310:	22da      	movs	r2, #218	; 0xda
 8003312:	217e      	movs	r1, #126	; 0x7e
 8003314:	4806      	ldr	r0, [pc, #24]	; (8003330 <showControlPanel+0x190>)
 8003316:	f7fe fc05 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 800331a:	4803      	ldr	r0, [pc, #12]	; (8003328 <showControlPanel+0x188>)
 800331c:	f7fe f9e8 	bl	80016f0 <EF_SetFont>


}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	08015f9c 	.word	0x08015f9c
 800332c:	08012efc 	.word	0x08012efc
 8003330:	200002c8 	.word	0x200002c8
 8003334:	08012f10 	.word	0x08012f10
 8003338:	08012f24 	.word	0x08012f24
 800333c:	08012f38 	.word	0x08012f38
 8003340:	08012f4c 	.word	0x08012f4c
 8003344:	08014024 	.word	0x08014024
 8003348:	08012f60 	.word	0x08012f60
 800334c:	08012f6c 	.word	0x08012f6c
 8003350:	08012f74 	.word	0x08012f74

08003354 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 800335a:	2016      	movs	r0, #22
 800335c:	f003 fb42 	bl	80069e4 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003360:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003364:	f7fe fdc8 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003368:	485b      	ldr	r0, [pc, #364]	; (80034d8 <showLightsControlPanel+0x184>)
 800336a:	f7fe f9c1 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 800336e:	495b      	ldr	r1, [pc, #364]	; (80034dc <showLightsControlPanel+0x188>)
 8003370:	485b      	ldr	r0, [pc, #364]	; (80034e0 <showLightsControlPanel+0x18c>)
 8003372:	f00b ff05 	bl	800f180 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003376:	f24c 6318 	movw	r3, #50712	; 0xc618
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	2300      	movs	r3, #0
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003384:	220a      	movs	r2, #10
 8003386:	2146      	movs	r1, #70	; 0x46
 8003388:	4855      	ldr	r0, [pc, #340]	; (80034e0 <showLightsControlPanel+0x18c>)
 800338a:	f7fe fbcb 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800338e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2329      	movs	r3, #41	; 0x29
 8003396:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800339a:	2129      	movs	r1, #41	; 0x29
 800339c:	2000      	movs	r0, #0
 800339e:	f7fd fef7 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80033a2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	232b      	movs	r3, #43	; 0x2b
 80033aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80033ae:	212b      	movs	r1, #43	; 0x2b
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7fd feed 	bl	8001190 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 80033b6:	494b      	ldr	r1, [pc, #300]	; (80034e4 <showLightsControlPanel+0x190>)
 80033b8:	4849      	ldr	r0, [pc, #292]	; (80034e0 <showLightsControlPanel+0x18c>)
 80033ba:	f00b fee1 	bl	800f180 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80033be:	f24c 6318 	movw	r3, #50712	; 0xc618
 80033c2:	9301      	str	r3, [sp, #4]
 80033c4:	2300      	movs	r3, #0
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	2300      	movs	r3, #0
 80033ca:	223c      	movs	r2, #60	; 0x3c
 80033cc:	2114      	movs	r1, #20
 80033ce:	4844      	ldr	r0, [pc, #272]	; (80034e0 <showLightsControlPanel+0x18c>)
 80033d0:	f7fe fba8 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 80033d4:	4944      	ldr	r1, [pc, #272]	; (80034e8 <showLightsControlPanel+0x194>)
 80033d6:	4842      	ldr	r0, [pc, #264]	; (80034e0 <showLightsControlPanel+0x18c>)
 80033d8:	f00b fed2 	bl	800f180 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80033dc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	2301      	movs	r3, #1
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	2300      	movs	r3, #0
 80033e8:	225a      	movs	r2, #90	; 0x5a
 80033ea:	2114      	movs	r1, #20
 80033ec:	483c      	ldr	r0, [pc, #240]	; (80034e0 <showLightsControlPanel+0x18c>)
 80033ee:	f7fe fb99 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 80033f2:	493e      	ldr	r1, [pc, #248]	; (80034ec <showLightsControlPanel+0x198>)
 80033f4:	483a      	ldr	r0, [pc, #232]	; (80034e0 <showLightsControlPanel+0x18c>)
 80033f6:	f00b fec3 	bl	800f180 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80033fa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	2300      	movs	r3, #0
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	2300      	movs	r3, #0
 8003406:	2278      	movs	r2, #120	; 0x78
 8003408:	2114      	movs	r1, #20
 800340a:	4835      	ldr	r0, [pc, #212]	; (80034e0 <showLightsControlPanel+0x18c>)
 800340c:	f7fe fb8a 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 8003410:	4937      	ldr	r1, [pc, #220]	; (80034f0 <showLightsControlPanel+0x19c>)
 8003412:	4833      	ldr	r0, [pc, #204]	; (80034e0 <showLightsControlPanel+0x18c>)
 8003414:	f00b feb4 	bl	800f180 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003418:	f24c 6318 	movw	r3, #50712	; 0xc618
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	2300      	movs	r3, #0
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	2300      	movs	r3, #0
 8003424:	2296      	movs	r2, #150	; 0x96
 8003426:	2114      	movs	r1, #20
 8003428:	482d      	ldr	r0, [pc, #180]	; (80034e0 <showLightsControlPanel+0x18c>)
 800342a:	f7fe fb7b 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 800342e:	4831      	ldr	r0, [pc, #196]	; (80034f4 <showLightsControlPanel+0x1a0>)
 8003430:	f7fe f95e 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003434:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	2305      	movs	r3, #5
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2314      	movs	r3, #20
 8003440:	225f      	movs	r2, #95	; 0x5f
 8003442:	21d8      	movs	r1, #216	; 0xd8
 8003444:	20dc      	movs	r0, #220	; 0xdc
 8003446:	f7fe f902 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 800344a:	492b      	ldr	r1, [pc, #172]	; (80034f8 <showLightsControlPanel+0x1a4>)
 800344c:	4824      	ldr	r0, [pc, #144]	; (80034e0 <showLightsControlPanel+0x18c>)
 800344e:	f00b fe97 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003452:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	2300      	movs	r3, #0
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2300      	movs	r3, #0
 800345e:	22da      	movs	r2, #218	; 0xda
 8003460:	21e6      	movs	r1, #230	; 0xe6
 8003462:	481f      	ldr	r0, [pc, #124]	; (80034e0 <showLightsControlPanel+0x18c>)
 8003464:	f7fe fb5e 	bl	8001b24 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003468:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	2305      	movs	r3, #5
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2314      	movs	r3, #20
 8003474:	225a      	movs	r2, #90	; 0x5a
 8003476:	21d8      	movs	r1, #216	; 0xd8
 8003478:	2078      	movs	r0, #120	; 0x78
 800347a:	f7fe f8e8 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 800347e:	491f      	ldr	r1, [pc, #124]	; (80034fc <showLightsControlPanel+0x1a8>)
 8003480:	4817      	ldr	r0, [pc, #92]	; (80034e0 <showLightsControlPanel+0x18c>)
 8003482:	f00b fe7d 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003486:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	2300      	movs	r3, #0
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2300      	movs	r3, #0
 8003492:	22da      	movs	r2, #218	; 0xda
 8003494:	217e      	movs	r1, #126	; 0x7e
 8003496:	4812      	ldr	r0, [pc, #72]	; (80034e0 <showLightsControlPanel+0x18c>)
 8003498:	f7fe fb44 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800349c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	2305      	movs	r3, #5
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2314      	movs	r3, #20
 80034a8:	2264      	movs	r2, #100	; 0x64
 80034aa:	21d8      	movs	r1, #216	; 0xd8
 80034ac:	200a      	movs	r0, #10
 80034ae:	f7fe f8ce 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 80034b2:	4913      	ldr	r1, [pc, #76]	; (8003500 <showLightsControlPanel+0x1ac>)
 80034b4:	480a      	ldr	r0, [pc, #40]	; (80034e0 <showLightsControlPanel+0x18c>)
 80034b6:	f00b fe63 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80034ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	2300      	movs	r3, #0
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	2300      	movs	r3, #0
 80034c6:	22da      	movs	r2, #218	; 0xda
 80034c8:	210d      	movs	r1, #13
 80034ca:	4805      	ldr	r0, [pc, #20]	; (80034e0 <showLightsControlPanel+0x18c>)
 80034cc:	f7fe fb2a 	bl	8001b24 <EF_PutString>


}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	08015f9c 	.word	0x08015f9c
 80034dc:	08012f80 	.word	0x08012f80
 80034e0:	200002c8 	.word	0x200002c8
 80034e4:	08012f90 	.word	0x08012f90
 80034e8:	08012fa0 	.word	0x08012fa0
 80034ec:	08012fb0 	.word	0x08012fb0
 80034f0:	08012fc0 	.word	0x08012fc0
 80034f4:	08014024 	.word	0x08014024
 80034f8:	08012fd0 	.word	0x08012fd0
 80034fc:	08012fd8 	.word	0x08012fd8
 8003500:	08012fe4 	.word	0x08012fe4

08003504 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800350a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800350e:	f7fe fcf3 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003512:	48a2      	ldr	r0, [pc, #648]	; (800379c <showClockSetPanel+0x298>)
 8003514:	f7fe f8ec 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003518:	f7ff f93c 	bl	8002794 <DS3231_GetHour>
 800351c:	4603      	mov	r3, r0
 800351e:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003520:	f7ff f944 	bl	80027ac <DS3231_GetMinute>
 8003524:	4603      	mov	r3, r0
 8003526:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003528:	f7ff f928 	bl	800277c <DS3231_GetDayOfWeek>
 800352c:	4603      	mov	r3, r0
 800352e:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003530:	499b      	ldr	r1, [pc, #620]	; (80037a0 <showClockSetPanel+0x29c>)
 8003532:	489c      	ldr	r0, [pc, #624]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003534:	f00b fe24 	bl	800f180 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003538:	f24c 6318 	movw	r3, #50712	; 0xc618
 800353c:	9301      	str	r3, [sp, #4]
 800353e:	2300      	movs	r3, #0
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003546:	220a      	movs	r2, #10
 8003548:	212f      	movs	r1, #47	; 0x2f
 800354a:	4896      	ldr	r0, [pc, #600]	; (80037a4 <showClockSetPanel+0x2a0>)
 800354c:	f7fe faea 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003550:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2329      	movs	r3, #41	; 0x29
 8003558:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800355c:	2129      	movs	r1, #41	; 0x29
 800355e:	2000      	movs	r0, #0
 8003560:	f7fd fe16 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003564:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	232b      	movs	r3, #43	; 0x2b
 800356c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003570:	212b      	movs	r1, #43	; 0x2b
 8003572:	2000      	movs	r0, #0
 8003574:	f7fd fe0c 	bl	8001190 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	461a      	mov	r2, r3
 800357c:	498a      	ldr	r1, [pc, #552]	; (80037a8 <showClockSetPanel+0x2a4>)
 800357e:	4889      	ldr	r0, [pc, #548]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003580:	f00b fdfe 	bl	800f180 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003584:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	2300      	movs	r3, #0
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	2300      	movs	r3, #0
 8003590:	2246      	movs	r2, #70	; 0x46
 8003592:	2114      	movs	r1, #20
 8003594:	4883      	ldr	r0, [pc, #524]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003596:	f7fe fac5 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 800359a:	79bb      	ldrb	r3, [r7, #6]
 800359c:	461a      	mov	r2, r3
 800359e:	4983      	ldr	r1, [pc, #524]	; (80037ac <showClockSetPanel+0x2a8>)
 80035a0:	4880      	ldr	r0, [pc, #512]	; (80037a4 <showClockSetPanel+0x2a0>)
 80035a2:	f00b fded 	bl	800f180 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80035a6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	2301      	movs	r3, #1
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	2300      	movs	r3, #0
 80035b2:	226e      	movs	r2, #110	; 0x6e
 80035b4:	2114      	movs	r1, #20
 80035b6:	487b      	ldr	r0, [pc, #492]	; (80037a4 <showClockSetPanel+0x2a0>)
 80035b8:	f7fe fab4 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 80035bc:	797b      	ldrb	r3, [r7, #5]
 80035be:	461a      	mov	r2, r3
 80035c0:	497b      	ldr	r1, [pc, #492]	; (80037b0 <showClockSetPanel+0x2ac>)
 80035c2:	4878      	ldr	r0, [pc, #480]	; (80037a4 <showClockSetPanel+0x2a0>)
 80035c4:	f00b fddc 	bl	800f180 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80035c8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	2301      	movs	r3, #1
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2300      	movs	r3, #0
 80035d4:	2296      	movs	r2, #150	; 0x96
 80035d6:	2114      	movs	r1, #20
 80035d8:	4872      	ldr	r0, [pc, #456]	; (80037a4 <showClockSetPanel+0x2a0>)
 80035da:	f7fe faa3 	bl	8001b24 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 80035de:	4875      	ldr	r0, [pc, #468]	; (80037b4 <showClockSetPanel+0x2b0>)
 80035e0:	f7fe f886 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80035e4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	2305      	movs	r3, #5
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	2315      	movs	r3, #21
 80035f0:	221e      	movs	r2, #30
 80035f2:	214b      	movs	r1, #75	; 0x4b
 80035f4:	20f0      	movs	r0, #240	; 0xf0
 80035f6:	f7fe f82a 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80035fa:	496f      	ldr	r1, [pc, #444]	; (80037b8 <showClockSetPanel+0x2b4>)
 80035fc:	4869      	ldr	r0, [pc, #420]	; (80037a4 <showClockSetPanel+0x2a0>)
 80035fe:	f00b fdbf 	bl	800f180 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003602:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	2300      	movs	r3, #0
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2300      	movs	r3, #0
 800360e:	224d      	movs	r2, #77	; 0x4d
 8003610:	21f3      	movs	r1, #243	; 0xf3
 8003612:	4864      	ldr	r0, [pc, #400]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003614:	f7fe fa86 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003618:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	2305      	movs	r3, #5
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2315      	movs	r3, #21
 8003624:	221e      	movs	r2, #30
 8003626:	214b      	movs	r1, #75	; 0x4b
 8003628:	f44f 708c 	mov.w	r0, #280	; 0x118
 800362c:	f7fe f80f 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003630:	4962      	ldr	r1, [pc, #392]	; (80037bc <showClockSetPanel+0x2b8>)
 8003632:	485c      	ldr	r0, [pc, #368]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003634:	f00b fda4 	bl	800f180 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003638:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	2300      	movs	r3, #0
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	2300      	movs	r3, #0
 8003644:	224d      	movs	r2, #77	; 0x4d
 8003646:	f240 111d 	movw	r1, #285	; 0x11d
 800364a:	4856      	ldr	r0, [pc, #344]	; (80037a4 <showClockSetPanel+0x2a0>)
 800364c:	f7fe fa6a 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003650:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	2305      	movs	r3, #5
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2315      	movs	r3, #21
 800365c:	221e      	movs	r2, #30
 800365e:	2173      	movs	r1, #115	; 0x73
 8003660:	20f0      	movs	r0, #240	; 0xf0
 8003662:	f7fd fff4 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003666:	4954      	ldr	r1, [pc, #336]	; (80037b8 <showClockSetPanel+0x2b4>)
 8003668:	484e      	ldr	r0, [pc, #312]	; (80037a4 <showClockSetPanel+0x2a0>)
 800366a:	f00b fd89 	bl	800f180 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 800366e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	2300      	movs	r3, #0
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	2300      	movs	r3, #0
 800367a:	2275      	movs	r2, #117	; 0x75
 800367c:	21f5      	movs	r1, #245	; 0xf5
 800367e:	4849      	ldr	r0, [pc, #292]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003680:	f7fe fa50 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003684:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	2305      	movs	r3, #5
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	2315      	movs	r3, #21
 8003690:	221e      	movs	r2, #30
 8003692:	2173      	movs	r1, #115	; 0x73
 8003694:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003698:	f7fd ffd9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 800369c:	4948      	ldr	r1, [pc, #288]	; (80037c0 <showClockSetPanel+0x2bc>)
 800369e:	4841      	ldr	r0, [pc, #260]	; (80037a4 <showClockSetPanel+0x2a0>)
 80036a0:	f00b fd6e 	bl	800f180 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80036a4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	2300      	movs	r3, #0
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	2300      	movs	r3, #0
 80036b0:	2275      	movs	r2, #117	; 0x75
 80036b2:	f240 111b 	movw	r1, #283	; 0x11b
 80036b6:	483b      	ldr	r0, [pc, #236]	; (80037a4 <showClockSetPanel+0x2a0>)
 80036b8:	f7fe fa34 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80036bc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	2305      	movs	r3, #5
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2315      	movs	r3, #21
 80036c8:	221e      	movs	r2, #30
 80036ca:	219b      	movs	r1, #155	; 0x9b
 80036cc:	20f0      	movs	r0, #240	; 0xf0
 80036ce:	f7fd ffbe 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 80036d2:	493c      	ldr	r1, [pc, #240]	; (80037c4 <showClockSetPanel+0x2c0>)
 80036d4:	4833      	ldr	r0, [pc, #204]	; (80037a4 <showClockSetPanel+0x2a0>)
 80036d6:	f00b fd53 	bl	800f180 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80036da:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	2300      	movs	r3, #0
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	229d      	movs	r2, #157	; 0x9d
 80036e8:	21f3      	movs	r1, #243	; 0xf3
 80036ea:	482e      	ldr	r0, [pc, #184]	; (80037a4 <showClockSetPanel+0x2a0>)
 80036ec:	f7fe fa1a 	bl	8001b24 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80036f0:	4830      	ldr	r0, [pc, #192]	; (80037b4 <showClockSetPanel+0x2b0>)
 80036f2:	f7fd fffd 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80036f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	2305      	movs	r3, #5
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2314      	movs	r3, #20
 8003702:	225f      	movs	r2, #95	; 0x5f
 8003704:	21d8      	movs	r1, #216	; 0xd8
 8003706:	20dc      	movs	r0, #220	; 0xdc
 8003708:	f7fd ffa1 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 800370c:	492e      	ldr	r1, [pc, #184]	; (80037c8 <showClockSetPanel+0x2c4>)
 800370e:	4825      	ldr	r0, [pc, #148]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003710:	f00b fd36 	bl	800f180 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003714:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	2300      	movs	r3, #0
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2300      	movs	r3, #0
 8003720:	22da      	movs	r2, #218	; 0xda
 8003722:	21e6      	movs	r1, #230	; 0xe6
 8003724:	481f      	ldr	r0, [pc, #124]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003726:	f7fe f9fd 	bl	8001b24 <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 800372a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	2305      	movs	r3, #5
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2316      	movs	r3, #22
 8003736:	22aa      	movs	r2, #170	; 0xaa
 8003738:	21be      	movs	r1, #190	; 0xbe
 800373a:	2050      	movs	r0, #80	; 0x50
 800373c:	f7fd ff87 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003740:	4922      	ldr	r1, [pc, #136]	; (80037cc <showClockSetPanel+0x2c8>)
 8003742:	4818      	ldr	r0, [pc, #96]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003744:	f00b fd1c 	bl	800f180 <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003748:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	2300      	movs	r3, #0
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2300      	movs	r3, #0
 8003754:	22c1      	movs	r2, #193	; 0xc1
 8003756:	2164      	movs	r1, #100	; 0x64
 8003758:	4812      	ldr	r0, [pc, #72]	; (80037a4 <showClockSetPanel+0x2a0>)
 800375a:	f7fe f9e3 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800375e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	2305      	movs	r3, #5
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2314      	movs	r3, #20
 800376a:	2264      	movs	r2, #100	; 0x64
 800376c:	21d8      	movs	r1, #216	; 0xd8
 800376e:	200a      	movs	r0, #10
 8003770:	f7fd ff6d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003774:	4916      	ldr	r1, [pc, #88]	; (80037d0 <showClockSetPanel+0x2cc>)
 8003776:	480b      	ldr	r0, [pc, #44]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003778:	f00b fd02 	bl	800f180 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800377c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	2300      	movs	r3, #0
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2300      	movs	r3, #0
 8003788:	22da      	movs	r2, #218	; 0xda
 800378a:	210d      	movs	r1, #13
 800378c:	4805      	ldr	r0, [pc, #20]	; (80037a4 <showClockSetPanel+0x2a0>)
 800378e:	f7fe f9c9 	bl	8001b24 <EF_PutString>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	08015f9c 	.word	0x08015f9c
 80037a0:	08012ff0 	.word	0x08012ff0
 80037a4:	200002c8 	.word	0x200002c8
 80037a8:	08013000 	.word	0x08013000
 80037ac:	0801300c 	.word	0x0801300c
 80037b0:	0801301c 	.word	0x0801301c
 80037b4:	08014024 	.word	0x08014024
 80037b8:	0801302c 	.word	0x0801302c
 80037bc:	08013030 	.word	0x08013030
 80037c0:	08013034 	.word	0x08013034
 80037c4:	08013038 	.word	0x08013038
 80037c8:	0801303c 	.word	0x0801303c
 80037cc:	08013044 	.word	0x08013044
 80037d0:	08013054 	.word	0x08013054

080037d4 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80037da:	f24c 6018 	movw	r0, #50712	; 0xc618
 80037de:	f7fe fb8b 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80037e2:	487a      	ldr	r0, [pc, #488]	; (80039cc <showPreparedActivitiesPanel+0x1f8>)
 80037e4:	f7fd ff84 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 80037e8:	4979      	ldr	r1, [pc, #484]	; (80039d0 <showPreparedActivitiesPanel+0x1fc>)
 80037ea:	487a      	ldr	r0, [pc, #488]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80037ec:	f00b fcc8 	bl	800f180 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	2300      	movs	r3, #0
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	231f      	movs	r3, #31
 80037fc:	220a      	movs	r2, #10
 80037fe:	212f      	movs	r1, #47	; 0x2f
 8003800:	4874      	ldr	r0, [pc, #464]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 8003802:	f7fe f98f 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003806:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	2329      	movs	r3, #41	; 0x29
 800380e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003812:	2129      	movs	r1, #41	; 0x29
 8003814:	2000      	movs	r0, #0
 8003816:	f7fd fcbb 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800381a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	232b      	movs	r3, #43	; 0x2b
 8003822:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003826:	212b      	movs	r1, #43	; 0x2b
 8003828:	2000      	movs	r0, #0
 800382a:	f7fd fcb1 	bl	8001190 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 800382e:	486a      	ldr	r0, [pc, #424]	; (80039d8 <showPreparedActivitiesPanel+0x204>)
 8003830:	f7fd ff5e 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003834:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003838:	9301      	str	r3, [sp, #4]
 800383a:	2305      	movs	r3, #5
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	2314      	movs	r3, #20
 8003840:	2264      	movs	r2, #100	; 0x64
 8003842:	21d8      	movs	r1, #216	; 0xd8
 8003844:	200a      	movs	r0, #10
 8003846:	f7fd ff02 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 800384a:	4964      	ldr	r1, [pc, #400]	; (80039dc <showPreparedActivitiesPanel+0x208>)
 800384c:	4861      	ldr	r0, [pc, #388]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 800384e:	f00b fc97 	bl	800f180 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003852:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	2300      	movs	r3, #0
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	2300      	movs	r3, #0
 800385e:	22da      	movs	r2, #218	; 0xda
 8003860:	210d      	movs	r1, #13
 8003862:	485c      	ldr	r0, [pc, #368]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 8003864:	f7fe f95e 	bl	8001b24 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8003868:	4b5d      	ldr	r3, [pc, #372]	; (80039e0 <showPreparedActivitiesPanel+0x20c>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d029      	beq.n	80038c4 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003870:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	230a      	movs	r3, #10
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2328      	movs	r3, #40	; 0x28
 800387c:	2278      	movs	r2, #120	; 0x78
 800387e:	213c      	movs	r1, #60	; 0x3c
 8003880:	2064      	movs	r0, #100	; 0x64
 8003882:	f7fd fee4 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003886:	4957      	ldr	r1, [pc, #348]	; (80039e4 <showPreparedActivitiesPanel+0x210>)
 8003888:	4852      	ldr	r0, [pc, #328]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 800388a:	f00b fc79 	bl	800f180 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800388e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	2300      	movs	r3, #0
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2300      	movs	r3, #0
 800389a:	223e      	movs	r2, #62	; 0x3e
 800389c:	2177      	movs	r1, #119	; 0x77
 800389e:	484d      	ldr	r0, [pc, #308]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80038a0:	f7fe f940 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 80038a4:	4950      	ldr	r1, [pc, #320]	; (80039e8 <showPreparedActivitiesPanel+0x214>)
 80038a6:	484b      	ldr	r0, [pc, #300]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80038a8:	f00b fc6a 	bl	800f180 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80038ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	2300      	movs	r3, #0
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	2300      	movs	r3, #0
 80038b8:	2250      	movs	r2, #80	; 0x50
 80038ba:	2193      	movs	r1, #147	; 0x93
 80038bc:	4845      	ldr	r0, [pc, #276]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80038be:	f7fe f931 	bl	8001b24 <EF_PutString>
 80038c2:	e028      	b.n	8003916 <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80038c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	230a      	movs	r3, #10
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	2328      	movs	r3, #40	; 0x28
 80038d0:	2278      	movs	r2, #120	; 0x78
 80038d2:	213c      	movs	r1, #60	; 0x3c
 80038d4:	2064      	movs	r0, #100	; 0x64
 80038d6:	f7fd feba 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 80038da:	4942      	ldr	r1, [pc, #264]	; (80039e4 <showPreparedActivitiesPanel+0x210>)
 80038dc:	483d      	ldr	r0, [pc, #244]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80038de:	f00b fc4f 	bl	800f180 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80038e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	2300      	movs	r3, #0
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2300      	movs	r3, #0
 80038ee:	223e      	movs	r2, #62	; 0x3e
 80038f0:	2177      	movs	r1, #119	; 0x77
 80038f2:	4838      	ldr	r0, [pc, #224]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80038f4:	f7fe f916 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 80038f8:	493c      	ldr	r1, [pc, #240]	; (80039ec <showPreparedActivitiesPanel+0x218>)
 80038fa:	4836      	ldr	r0, [pc, #216]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80038fc:	f00b fc40 	bl	800f180 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003900:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2300      	movs	r3, #0
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	2250      	movs	r2, #80	; 0x50
 800390e:	2193      	movs	r1, #147	; 0x93
 8003910:	4830      	ldr	r0, [pc, #192]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 8003912:	f7fe f907 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 8003916:	4b32      	ldr	r3, [pc, #200]	; (80039e0 <showPreparedActivitiesPanel+0x20c>)
 8003918:	785b      	ldrb	r3, [r3, #1]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d029      	beq.n	8003972 <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800391e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	230a      	movs	r3, #10
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	2328      	movs	r3, #40	; 0x28
 800392a:	2278      	movs	r2, #120	; 0x78
 800392c:	2178      	movs	r1, #120	; 0x78
 800392e:	2064      	movs	r0, #100	; 0x64
 8003930:	f7fd fe8d 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003934:	492e      	ldr	r1, [pc, #184]	; (80039f0 <showPreparedActivitiesPanel+0x21c>)
 8003936:	4827      	ldr	r0, [pc, #156]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 8003938:	f00b fc22 	bl	800f180 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800393c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	2300      	movs	r3, #0
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	2300      	movs	r3, #0
 8003948:	227a      	movs	r2, #122	; 0x7a
 800394a:	2169      	movs	r1, #105	; 0x69
 800394c:	4821      	ldr	r0, [pc, #132]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 800394e:	f7fe f8e9 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003952:	4925      	ldr	r1, [pc, #148]	; (80039e8 <showPreparedActivitiesPanel+0x214>)
 8003954:	481f      	ldr	r0, [pc, #124]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 8003956:	f00b fc13 	bl	800f180 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800395a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800395e:	9301      	str	r3, [sp, #4]
 8003960:	2300      	movs	r3, #0
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	2300      	movs	r3, #0
 8003966:	228c      	movs	r2, #140	; 0x8c
 8003968:	2193      	movs	r1, #147	; 0x93
 800396a:	481a      	ldr	r0, [pc, #104]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 800396c:	f7fe f8da 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8003970:	e028      	b.n	80039c4 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003972:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	230a      	movs	r3, #10
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	2328      	movs	r3, #40	; 0x28
 800397e:	2278      	movs	r2, #120	; 0x78
 8003980:	2178      	movs	r1, #120	; 0x78
 8003982:	2064      	movs	r0, #100	; 0x64
 8003984:	f7fd fe63 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003988:	4919      	ldr	r1, [pc, #100]	; (80039f0 <showPreparedActivitiesPanel+0x21c>)
 800398a:	4812      	ldr	r0, [pc, #72]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 800398c:	f00b fbf8 	bl	800f180 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003990:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	2300      	movs	r3, #0
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	2300      	movs	r3, #0
 800399c:	227a      	movs	r2, #122	; 0x7a
 800399e:	2169      	movs	r1, #105	; 0x69
 80039a0:	480c      	ldr	r0, [pc, #48]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80039a2:	f7fe f8bf 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 80039a6:	4911      	ldr	r1, [pc, #68]	; (80039ec <showPreparedActivitiesPanel+0x218>)
 80039a8:	480a      	ldr	r0, [pc, #40]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80039aa:	f00b fbe9 	bl	800f180 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80039ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	2300      	movs	r3, #0
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	2300      	movs	r3, #0
 80039ba:	228c      	movs	r2, #140	; 0x8c
 80039bc:	2193      	movs	r1, #147	; 0x93
 80039be:	4805      	ldr	r0, [pc, #20]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80039c0:	f7fe f8b0 	bl	8001b24 <EF_PutString>
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	08015f9c 	.word	0x08015f9c
 80039d0:	0801305c 	.word	0x0801305c
 80039d4:	200002c8 	.word	0x200002c8
 80039d8:	08014024 	.word	0x08014024
 80039dc:	08013054 	.word	0x08013054
 80039e0:	2000027c 	.word	0x2000027c
 80039e4:	0801306c 	.word	0x0801306c
 80039e8:	08013078 	.word	0x08013078
 80039ec:	0801307c 	.word	0x0801307c
 80039f0:	08013080 	.word	0x08013080

080039f4 <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80039fa:	f24c 6018 	movw	r0, #50712	; 0xc618
 80039fe:	f7fe fa7b 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003a02:	48c7      	ldr	r0, [pc, #796]	; (8003d20 <showWSLedPanel+0x32c>)
 8003a04:	f7fd fe74 	bl	80016f0 <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 8003a08:	49c6      	ldr	r1, [pc, #792]	; (8003d24 <showWSLedPanel+0x330>)
 8003a0a:	48c7      	ldr	r0, [pc, #796]	; (8003d28 <showWSLedPanel+0x334>)
 8003a0c:	f00b fbb8 	bl	800f180 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a10:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a14:	9301      	str	r3, [sp, #4]
 8003a16:	2300      	movs	r3, #0
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	231f      	movs	r3, #31
 8003a1c:	220a      	movs	r2, #10
 8003a1e:	2146      	movs	r1, #70	; 0x46
 8003a20:	48c1      	ldr	r0, [pc, #772]	; (8003d28 <showWSLedPanel+0x334>)
 8003a22:	f7fe f87f 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003a26:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2329      	movs	r3, #41	; 0x29
 8003a2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a32:	2129      	movs	r1, #41	; 0x29
 8003a34:	2000      	movs	r0, #0
 8003a36:	f7fd fbab 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003a3a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	232b      	movs	r3, #43	; 0x2b
 8003a42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a46:	212b      	movs	r1, #43	; 0x2b
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f7fd fba1 	bl	8001190 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 8003a4e:	4bb7      	ldr	r3, [pc, #732]	; (8003d2c <showWSLedPanel+0x338>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	49b6      	ldr	r1, [pc, #728]	; (8003d30 <showWSLedPanel+0x33c>)
 8003a56:	48b4      	ldr	r0, [pc, #720]	; (8003d28 <showWSLedPanel+0x334>)
 8003a58:	f00b fb92 	bl	800f180 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a5c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	2300      	movs	r3, #0
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2300      	movs	r3, #0
 8003a68:	223c      	movs	r2, #60	; 0x3c
 8003a6a:	2114      	movs	r1, #20
 8003a6c:	48ae      	ldr	r0, [pc, #696]	; (8003d28 <showWSLedPanel+0x334>)
 8003a6e:	f7fe f859 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 8003a72:	49b0      	ldr	r1, [pc, #704]	; (8003d34 <showWSLedPanel+0x340>)
 8003a74:	48ac      	ldr	r0, [pc, #688]	; (8003d28 <showWSLedPanel+0x334>)
 8003a76:	f00b fb83 	bl	800f180 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a7a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	2300      	movs	r3, #0
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2300      	movs	r3, #0
 8003a86:	225a      	movs	r2, #90	; 0x5a
 8003a88:	2114      	movs	r1, #20
 8003a8a:	48a7      	ldr	r0, [pc, #668]	; (8003d28 <showWSLedPanel+0x334>)
 8003a8c:	f7fe f84a 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 8003a90:	49a9      	ldr	r1, [pc, #676]	; (8003d38 <showWSLedPanel+0x344>)
 8003a92:	48a5      	ldr	r0, [pc, #660]	; (8003d28 <showWSLedPanel+0x334>)
 8003a94:	f00b fb74 	bl	800f180 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a98:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2278      	movs	r2, #120	; 0x78
 8003aa6:	2114      	movs	r1, #20
 8003aa8:	489f      	ldr	r0, [pc, #636]	; (8003d28 <showWSLedPanel+0x334>)
 8003aaa:	f7fe f83b 	bl	8001b24 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 8003aae:	48a3      	ldr	r0, [pc, #652]	; (8003d3c <showWSLedPanel+0x348>)
 8003ab0:	f7fd fe1e 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ab4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	2305      	movs	r3, #5
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	2315      	movs	r3, #21
 8003ac0:	221e      	movs	r2, #30
 8003ac2:	2141      	movs	r1, #65	; 0x41
 8003ac4:	20d9      	movs	r0, #217	; 0xd9
 8003ac6:	f7fd fdc2 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003aca:	499d      	ldr	r1, [pc, #628]	; (8003d40 <showWSLedPanel+0x34c>)
 8003acc:	4896      	ldr	r0, [pc, #600]	; (8003d28 <showWSLedPanel+0x334>)
 8003ace:	f00b fb57 	bl	800f180 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003ad2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2300      	movs	r3, #0
 8003ade:	2243      	movs	r2, #67	; 0x43
 8003ae0:	21df      	movs	r1, #223	; 0xdf
 8003ae2:	4891      	ldr	r0, [pc, #580]	; (8003d28 <showWSLedPanel+0x334>)
 8003ae4:	f7fe f81e 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ae8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	2305      	movs	r3, #5
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	2315      	movs	r3, #21
 8003af4:	221e      	movs	r2, #30
 8003af6:	2141      	movs	r1, #65	; 0x41
 8003af8:	20fc      	movs	r0, #252	; 0xfc
 8003afa:	f7fd fda8 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003afe:	4991      	ldr	r1, [pc, #580]	; (8003d44 <showWSLedPanel+0x350>)
 8003b00:	4889      	ldr	r0, [pc, #548]	; (8003d28 <showWSLedPanel+0x334>)
 8003b02:	f00b fb3d 	bl	800f180 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b06:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2300      	movs	r3, #0
 8003b12:	2243      	movs	r2, #67	; 0x43
 8003b14:	f240 1101 	movw	r1, #257	; 0x101
 8003b18:	4883      	ldr	r0, [pc, #524]	; (8003d28 <showWSLedPanel+0x334>)
 8003b1a:	f7fe f803 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003b1e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	2305      	movs	r3, #5
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	2315      	movs	r3, #21
 8003b2a:	221e      	movs	r2, #30
 8003b2c:	2141      	movs	r1, #65	; 0x41
 8003b2e:	f240 101f 	movw	r0, #287	; 0x11f
 8003b32:	f7fd fd8c 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 8003b36:	4984      	ldr	r1, [pc, #528]	; (8003d48 <showWSLedPanel+0x354>)
 8003b38:	487b      	ldr	r0, [pc, #492]	; (8003d28 <showWSLedPanel+0x334>)
 8003b3a:	f00b fb21 	bl	800f180 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003b3e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	2300      	movs	r3, #0
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2243      	movs	r2, #67	; 0x43
 8003b4c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003b50:	4875      	ldr	r0, [pc, #468]	; (8003d28 <showWSLedPanel+0x334>)
 8003b52:	f7fd ffe7 	bl	8001b24 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8003b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	2305      	movs	r3, #5
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	2315      	movs	r3, #21
 8003b62:	2228      	movs	r2, #40	; 0x28
 8003b64:	215f      	movs	r1, #95	; 0x5f
 8003b66:	2096      	movs	r0, #150	; 0x96
 8003b68:	f7fd fd71 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8003b6c:	4977      	ldr	r1, [pc, #476]	; (8003d4c <showWSLedPanel+0x358>)
 8003b6e:	486e      	ldr	r0, [pc, #440]	; (8003d28 <showWSLedPanel+0x334>)
 8003b70:	f00b fb06 	bl	800f180 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8003b74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2261      	movs	r2, #97	; 0x61
 8003b82:	219b      	movs	r1, #155	; 0x9b
 8003b84:	4868      	ldr	r0, [pc, #416]	; (8003d28 <showWSLedPanel+0x334>)
 8003b86:	f7fd ffcd 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8003b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	2305      	movs	r3, #5
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	2315      	movs	r3, #21
 8003b96:	2228      	movs	r2, #40	; 0x28
 8003b98:	215f      	movs	r1, #95	; 0x5f
 8003b9a:	20ca      	movs	r0, #202	; 0xca
 8003b9c:	f7fd fd57 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8003ba0:	496b      	ldr	r1, [pc, #428]	; (8003d50 <showWSLedPanel+0x35c>)
 8003ba2:	4861      	ldr	r0, [pc, #388]	; (8003d28 <showWSLedPanel+0x334>)
 8003ba4:	f00b faec 	bl	800f180 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8003ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	2261      	movs	r2, #97	; 0x61
 8003bb6:	21d2      	movs	r1, #210	; 0xd2
 8003bb8:	485b      	ldr	r0, [pc, #364]	; (8003d28 <showWSLedPanel+0x334>)
 8003bba:	f7fd ffb3 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8003bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	2305      	movs	r3, #5
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	2315      	movs	r3, #21
 8003bca:	2228      	movs	r2, #40	; 0x28
 8003bcc:	215f      	movs	r1, #95	; 0x5f
 8003bce:	20fe      	movs	r0, #254	; 0xfe
 8003bd0:	f7fd fd3d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8003bd4:	495f      	ldr	r1, [pc, #380]	; (8003d54 <showWSLedPanel+0x360>)
 8003bd6:	4854      	ldr	r0, [pc, #336]	; (8003d28 <showWSLedPanel+0x334>)
 8003bd8:	f00b fad2 	bl	800f180 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8003bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	2300      	movs	r3, #0
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	2300      	movs	r3, #0
 8003be8:	2261      	movs	r2, #97	; 0x61
 8003bea:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003bee:	484e      	ldr	r0, [pc, #312]	; (8003d28 <showWSLedPanel+0x334>)
 8003bf0:	f7fd ff98 	bl	8001b24 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003bf4:	231f      	movs	r3, #31
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	2305      	movs	r3, #5
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	2315      	movs	r3, #21
 8003bfe:	2228      	movs	r2, #40	; 0x28
 8003c00:	217d      	movs	r1, #125	; 0x7d
 8003c02:	2096      	movs	r0, #150	; 0x96
 8003c04:	f7fd fd23 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8003c08:	4950      	ldr	r1, [pc, #320]	; (8003d4c <showWSLedPanel+0x358>)
 8003c0a:	4847      	ldr	r0, [pc, #284]	; (8003d28 <showWSLedPanel+0x334>)
 8003c0c:	f00b fab8 	bl	800f180 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8003c10:	231f      	movs	r3, #31
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	2300      	movs	r3, #0
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	227f      	movs	r2, #127	; 0x7f
 8003c1c:	219b      	movs	r1, #155	; 0x9b
 8003c1e:	4842      	ldr	r0, [pc, #264]	; (8003d28 <showWSLedPanel+0x334>)
 8003c20:	f7fd ff80 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003c24:	231f      	movs	r3, #31
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	2305      	movs	r3, #5
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2315      	movs	r3, #21
 8003c2e:	2228      	movs	r2, #40	; 0x28
 8003c30:	217d      	movs	r1, #125	; 0x7d
 8003c32:	20ca      	movs	r0, #202	; 0xca
 8003c34:	f7fd fd0b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8003c38:	4945      	ldr	r1, [pc, #276]	; (8003d50 <showWSLedPanel+0x35c>)
 8003c3a:	483b      	ldr	r0, [pc, #236]	; (8003d28 <showWSLedPanel+0x334>)
 8003c3c:	f00b faa0 	bl	800f180 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8003c40:	231f      	movs	r3, #31
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	2300      	movs	r3, #0
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	227f      	movs	r2, #127	; 0x7f
 8003c4c:	21d2      	movs	r1, #210	; 0xd2
 8003c4e:	4836      	ldr	r0, [pc, #216]	; (8003d28 <showWSLedPanel+0x334>)
 8003c50:	f7fd ff68 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003c54:	231f      	movs	r3, #31
 8003c56:	9301      	str	r3, [sp, #4]
 8003c58:	2305      	movs	r3, #5
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	2315      	movs	r3, #21
 8003c5e:	2228      	movs	r2, #40	; 0x28
 8003c60:	217d      	movs	r1, #125	; 0x7d
 8003c62:	20fe      	movs	r0, #254	; 0xfe
 8003c64:	f7fd fcf3 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8003c68:	493a      	ldr	r1, [pc, #232]	; (8003d54 <showWSLedPanel+0x360>)
 8003c6a:	482f      	ldr	r0, [pc, #188]	; (8003d28 <showWSLedPanel+0x334>)
 8003c6c:	f00b fa88 	bl	800f180 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8003c70:	231f      	movs	r3, #31
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	2300      	movs	r3, #0
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	227f      	movs	r2, #127	; 0x7f
 8003c7c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003c80:	4829      	ldr	r0, [pc, #164]	; (8003d28 <showWSLedPanel+0x334>)
 8003c82:	f7fd ff4f 	bl	8001b24 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 8003c86:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003c8a:	9301      	str	r3, [sp, #4]
 8003c8c:	2305      	movs	r3, #5
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	2315      	movs	r3, #21
 8003c92:	2250      	movs	r2, #80	; 0x50
 8003c94:	219c      	movs	r1, #156	; 0x9c
 8003c96:	2014      	movs	r0, #20
 8003c98:	f7fd fcd9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 8003c9c:	492e      	ldr	r1, [pc, #184]	; (8003d58 <showWSLedPanel+0x364>)
 8003c9e:	4822      	ldr	r0, [pc, #136]	; (8003d28 <showWSLedPanel+0x334>)
 8003ca0:	f00b fa6e 	bl	800f180 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 8003ca4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	2300      	movs	r3, #0
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	229e      	movs	r2, #158	; 0x9e
 8003cb2:	211c      	movs	r1, #28
 8003cb4:	481c      	ldr	r0, [pc, #112]	; (8003d28 <showWSLedPanel+0x334>)
 8003cb6:	f7fd ff35 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003cba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	2305      	movs	r3, #5
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	2315      	movs	r3, #21
 8003cc6:	2250      	movs	r2, #80	; 0x50
 8003cc8:	219c      	movs	r1, #156	; 0x9c
 8003cca:	2078      	movs	r0, #120	; 0x78
 8003ccc:	f7fd fcbf 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 8003cd0:	4922      	ldr	r1, [pc, #136]	; (8003d5c <showWSLedPanel+0x368>)
 8003cd2:	4815      	ldr	r0, [pc, #84]	; (8003d28 <showWSLedPanel+0x334>)
 8003cd4:	f00b fa54 	bl	800f180 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003cd8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	229e      	movs	r2, #158	; 0x9e
 8003ce6:	2187      	movs	r1, #135	; 0x87
 8003ce8:	480f      	ldr	r0, [pc, #60]	; (8003d28 <showWSLedPanel+0x334>)
 8003cea:	f7fd ff1b 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 8003cee:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	2305      	movs	r3, #5
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2315      	movs	r3, #21
 8003cfa:	2250      	movs	r2, #80	; 0x50
 8003cfc:	219c      	movs	r1, #156	; 0x9c
 8003cfe:	20dc      	movs	r0, #220	; 0xdc
 8003d00:	f7fd fca5 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 8003d04:	4916      	ldr	r1, [pc, #88]	; (8003d60 <showWSLedPanel+0x36c>)
 8003d06:	4808      	ldr	r0, [pc, #32]	; (8003d28 <showWSLedPanel+0x334>)
 8003d08:	f00b fa3a 	bl	800f180 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 8003d0c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2300      	movs	r3, #0
 8003d18:	229e      	movs	r2, #158	; 0x9e
 8003d1a:	21e9      	movs	r1, #233	; 0xe9
 8003d1c:	e022      	b.n	8003d64 <showWSLedPanel+0x370>
 8003d1e:	bf00      	nop
 8003d20:	08015f9c 	.word	0x08015f9c
 8003d24:	0801308c 	.word	0x0801308c
 8003d28:	200002c8 	.word	0x200002c8
 8003d2c:	20000033 	.word	0x20000033
 8003d30:	08013098 	.word	0x08013098
 8003d34:	080130a8 	.word	0x080130a8
 8003d38:	080130b0 	.word	0x080130b0
 8003d3c:	08014024 	.word	0x08014024
 8003d40:	0801302c 	.word	0x0801302c
 8003d44:	08013034 	.word	0x08013034
 8003d48:	080130b8 	.word	0x080130b8
 8003d4c:	080130bc 	.word	0x080130bc
 8003d50:	080130c0 	.word	0x080130c0
 8003d54:	080130c4 	.word	0x080130c4
 8003d58:	080130c8 	.word	0x080130c8
 8003d5c:	0801307c 	.word	0x0801307c
 8003d60:	080130d0 	.word	0x080130d0
 8003d64:	482b      	ldr	r0, [pc, #172]	; (8003e14 <showWSLedPanel+0x420>)
 8003d66:	f7fd fedd 	bl	8001b24 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8003d6a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	2305      	movs	r3, #5
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	2315      	movs	r3, #21
 8003d76:	2250      	movs	r2, #80	; 0x50
 8003d78:	21bb      	movs	r1, #187	; 0xbb
 8003d7a:	2046      	movs	r0, #70	; 0x46
 8003d7c:	f7fd fc67 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 8003d80:	4925      	ldr	r1, [pc, #148]	; (8003e18 <showWSLedPanel+0x424>)
 8003d82:	4824      	ldr	r0, [pc, #144]	; (8003e14 <showWSLedPanel+0x420>)
 8003d84:	f00b f9fc 	bl	800f180 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8003d88:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2300      	movs	r3, #0
 8003d94:	22bd      	movs	r2, #189	; 0xbd
 8003d96:	214e      	movs	r1, #78	; 0x4e
 8003d98:	481e      	ldr	r0, [pc, #120]	; (8003e14 <showWSLedPanel+0x420>)
 8003d9a:	f7fd fec3 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8003d9e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	2305      	movs	r3, #5
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	2315      	movs	r3, #21
 8003daa:	2250      	movs	r2, #80	; 0x50
 8003dac:	21bb      	movs	r1, #187	; 0xbb
 8003dae:	20aa      	movs	r0, #170	; 0xaa
 8003db0:	f7fd fc4d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 8003db4:	4919      	ldr	r1, [pc, #100]	; (8003e1c <showWSLedPanel+0x428>)
 8003db6:	4817      	ldr	r0, [pc, #92]	; (8003e14 <showWSLedPanel+0x420>)
 8003db8:	f00b f9e2 	bl	800f180 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8003dbc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	22bd      	movs	r2, #189	; 0xbd
 8003dca:	21b5      	movs	r1, #181	; 0xb5
 8003dcc:	4811      	ldr	r0, [pc, #68]	; (8003e14 <showWSLedPanel+0x420>)
 8003dce:	f7fd fea9 	bl	8001b24 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003dd2:	4813      	ldr	r0, [pc, #76]	; (8003e20 <showWSLedPanel+0x42c>)
 8003dd4:	f7fd fc8c 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003dd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	2305      	movs	r3, #5
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2314      	movs	r3, #20
 8003de4:	2264      	movs	r2, #100	; 0x64
 8003de6:	21d8      	movs	r1, #216	; 0xd8
 8003de8:	200a      	movs	r0, #10
 8003dea:	f7fd fc30 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003dee:	490d      	ldr	r1, [pc, #52]	; (8003e24 <showWSLedPanel+0x430>)
 8003df0:	4808      	ldr	r0, [pc, #32]	; (8003e14 <showWSLedPanel+0x420>)
 8003df2:	f00b f9c5 	bl	800f180 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003df6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	2300      	movs	r3, #0
 8003e02:	22da      	movs	r2, #218	; 0xda
 8003e04:	210d      	movs	r1, #13
 8003e06:	4803      	ldr	r0, [pc, #12]	; (8003e14 <showWSLedPanel+0x420>)
 8003e08:	f7fd fe8c 	bl	8001b24 <EF_PutString>


}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	200002c8 	.word	0x200002c8
 8003e18:	080130d8 	.word	0x080130d8
 8003e1c:	080130e0 	.word	0x080130e0
 8003e20:	08014024 	.word	0x08014024
 8003e24:	08013054 	.word	0x08013054

08003e28 <drawShedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawShedulePanel(uint8_t NrOfShedule)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	4603      	mov	r3, r0
 8003e30:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnShedule1 = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	73fb      	strb	r3, [r7, #15]
	uint8_t hourOffShedule1 = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	73bb      	strb	r3, [r7, #14]
	uint8_t minuteOnShedule1 = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	737b      	strb	r3, [r7, #13]
	uint8_t minuteOffShedule1 = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	733b      	strb	r3, [r7, #12]
	uint8_t hourOnShedule2 = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	72fb      	strb	r3, [r7, #11]
	uint8_t hourOffShedule2 = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	72bb      	strb	r3, [r7, #10]
	uint8_t minuteOnShedule2 = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	727b      	strb	r3, [r7, #9]
	uint8_t minuteOffShedule2 = 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	723b      	strb	r3, [r7, #8]
	  //
	  // Draw Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003e52:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	2305      	movs	r3, #5
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2314      	movs	r3, #20
 8003e5e:	2214      	movs	r2, #20
 8003e60:	2132      	movs	r1, #50	; 0x32
 8003e62:	203c      	movs	r0, #60	; 0x3c
 8003e64:	f7fd fb76 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003e68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	2305      	movs	r3, #5
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	2314      	movs	r3, #20
 8003e74:	2214      	movs	r2, #20
 8003e76:	2132      	movs	r1, #50	; 0x32
 8003e78:	205a      	movs	r0, #90	; 0x5a
 8003e7a:	f7fd fb6b 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003e7e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e82:	9301      	str	r3, [sp, #4]
 8003e84:	2305      	movs	r3, #5
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2314      	movs	r3, #20
 8003e8a:	2214      	movs	r2, #20
 8003e8c:	2132      	movs	r1, #50	; 0x32
 8003e8e:	2078      	movs	r0, #120	; 0x78
 8003e90:	f7fd fb60 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003e94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	2305      	movs	r3, #5
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	2314      	movs	r3, #20
 8003ea0:	2214      	movs	r2, #20
 8003ea2:	2132      	movs	r1, #50	; 0x32
 8003ea4:	2096      	movs	r0, #150	; 0x96
 8003ea6:	f7fd fb55 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003eaa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	2305      	movs	r3, #5
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	2314      	movs	r3, #20
 8003eb6:	2214      	movs	r2, #20
 8003eb8:	2132      	movs	r1, #50	; 0x32
 8003eba:	20b4      	movs	r0, #180	; 0xb4
 8003ebc:	f7fd fb4a 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003ec0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	2305      	movs	r3, #5
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	2314      	movs	r3, #20
 8003ecc:	2214      	movs	r2, #20
 8003ece:	2132      	movs	r1, #50	; 0x32
 8003ed0:	20d2      	movs	r0, #210	; 0xd2
 8003ed2:	f7fd fb3f 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003ed6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	2305      	movs	r3, #5
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	2314      	movs	r3, #20
 8003ee2:	2214      	movs	r2, #20
 8003ee4:	2132      	movs	r1, #50	; 0x32
 8003ee6:	20f0      	movs	r0, #240	; 0xf0
 8003ee8:	f7fd fb34 	bl	8001554 <GFX_DrawRoundRectangle>

	  EF_SetFont(&arial_11ptFontInfo);
 8003eec:	48b9      	ldr	r0, [pc, #740]	; (80041d4 <drawShedulePanel+0x3ac>)
 8003eee:	f7fd fbff 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 8003ef2:	49b9      	ldr	r1, [pc, #740]	; (80041d8 <drawShedulePanel+0x3b0>)
 8003ef4:	48b9      	ldr	r0, [pc, #740]	; (80041dc <drawShedulePanel+0x3b4>)
 8003ef6:	f00b f943 	bl	800f180 <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003efa:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	2301      	movs	r3, #1
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	2300      	movs	r3, #0
 8003f06:	224b      	movs	r2, #75	; 0x4b
 8003f08:	213c      	movs	r1, #60	; 0x3c
 8003f0a:	48b4      	ldr	r0, [pc, #720]	; (80041dc <drawShedulePanel+0x3b4>)
 8003f0c:	f7fd fe0a 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003f10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	2305      	movs	r3, #5
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	2314      	movs	r3, #20
 8003f1c:	2214      	movs	r2, #20
 8003f1e:	21aa      	movs	r1, #170	; 0xaa
 8003f20:	2015      	movs	r0, #21
 8003f22:	f7fd fb17 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003f26:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	2305      	movs	r3, #5
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	2314      	movs	r3, #20
 8003f32:	2214      	movs	r2, #20
 8003f34:	21aa      	movs	r1, #170	; 0xaa
 8003f36:	2035      	movs	r0, #53	; 0x35
 8003f38:	f7fd fb0c 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003f3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	2305      	movs	r3, #5
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	2314      	movs	r3, #20
 8003f48:	2214      	movs	r2, #20
 8003f4a:	21aa      	movs	r1, #170	; 0xaa
 8003f4c:	2055      	movs	r0, #85	; 0x55
 8003f4e:	f7fd fb01 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003f52:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	2305      	movs	r3, #5
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2314      	movs	r3, #20
 8003f5e:	2214      	movs	r2, #20
 8003f60:	21aa      	movs	r1, #170	; 0xaa
 8003f62:	2075      	movs	r0, #117	; 0x75
 8003f64:	f7fd faf6 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003f68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	2305      	movs	r3, #5
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	2314      	movs	r3, #20
 8003f74:	2214      	movs	r2, #20
 8003f76:	21aa      	movs	r1, #170	; 0xaa
 8003f78:	2095      	movs	r0, #149	; 0x95
 8003f7a:	f7fd faeb 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003f7e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	2305      	movs	r3, #5
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	2314      	movs	r3, #20
 8003f8a:	2214      	movs	r2, #20
 8003f8c:	21aa      	movs	r1, #170	; 0xaa
 8003f8e:	20b5      	movs	r0, #181	; 0xb5
 8003f90:	f7fd fae0 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003f94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	2305      	movs	r3, #5
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	2314      	movs	r3, #20
 8003fa0:	2214      	movs	r2, #20
 8003fa2:	21aa      	movs	r1, #170	; 0xaa
 8003fa4:	20d5      	movs	r0, #213	; 0xd5
 8003fa6:	f7fd fad5 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003faa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	2305      	movs	r3, #5
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	2314      	movs	r3, #20
 8003fb6:	2214      	movs	r2, #20
 8003fb8:	21aa      	movs	r1, #170	; 0xaa
 8003fba:	20f5      	movs	r0, #245	; 0xf5
 8003fbc:	f7fd faca 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8003fc0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	2305      	movs	r3, #5
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	2314      	movs	r3, #20
 8003fcc:	2214      	movs	r2, #20
 8003fce:	21aa      	movs	r1, #170	; 0xaa
 8003fd0:	f240 1015 	movw	r0, #277	; 0x115
 8003fd4:	f7fd fabe 	bl	8001554 <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 8003fd8:	4981      	ldr	r1, [pc, #516]	; (80041e0 <drawShedulePanel+0x3b8>)
 8003fda:	4880      	ldr	r0, [pc, #512]	; (80041dc <drawShedulePanel+0x3b4>)
 8003fdc:	f00b f8d0 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003fe0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	2300      	movs	r3, #0
 8003fec:	22c3      	movs	r2, #195	; 0xc3
 8003fee:	2115      	movs	r1, #21
 8003ff0:	487a      	ldr	r0, [pc, #488]	; (80041dc <drawShedulePanel+0x3b4>)
 8003ff2:	f7fd fd97 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8003ff6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ffa:	9301      	str	r3, [sp, #4]
 8003ffc:	2305      	movs	r3, #5
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	2314      	movs	r3, #20
 8004002:	2222      	movs	r2, #34	; 0x22
 8004004:	2165      	movs	r1, #101	; 0x65
 8004006:	20b4      	movs	r0, #180	; 0xb4
 8004008:	f7fd fb21 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 800400c:	4975      	ldr	r1, [pc, #468]	; (80041e4 <drawShedulePanel+0x3bc>)
 800400e:	4873      	ldr	r0, [pc, #460]	; (80041dc <drawShedulePanel+0x3b4>)
 8004010:	f00b f8b6 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004014:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	2300      	movs	r3, #0
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	2300      	movs	r3, #0
 8004020:	2268      	movs	r2, #104	; 0x68
 8004022:	21ba      	movs	r1, #186	; 0xba
 8004024:	486d      	ldr	r0, [pc, #436]	; (80041dc <drawShedulePanel+0x3b4>)
 8004026:	f7fd fd7d 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800402a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	2305      	movs	r3, #5
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	2314      	movs	r3, #20
 8004036:	2222      	movs	r2, #34	; 0x22
 8004038:	2165      	movs	r1, #101	; 0x65
 800403a:	20e2      	movs	r0, #226	; 0xe2
 800403c:	f7fd fb07 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004040:	4969      	ldr	r1, [pc, #420]	; (80041e8 <drawShedulePanel+0x3c0>)
 8004042:	4866      	ldr	r0, [pc, #408]	; (80041dc <drawShedulePanel+0x3b4>)
 8004044:	f00b f89c 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004048:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	2300      	movs	r3, #0
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	2300      	movs	r3, #0
 8004054:	2268      	movs	r2, #104	; 0x68
 8004056:	21e5      	movs	r1, #229	; 0xe5
 8004058:	4860      	ldr	r0, [pc, #384]	; (80041dc <drawShedulePanel+0x3b4>)
 800405a:	f7fd fd63 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800405e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	2305      	movs	r3, #5
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	2314      	movs	r3, #20
 800406a:	2222      	movs	r2, #34	; 0x22
 800406c:	2165      	movs	r1, #101	; 0x65
 800406e:	f44f 7088 	mov.w	r0, #272	; 0x110
 8004072:	f7fd faec 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 8004076:	495d      	ldr	r1, [pc, #372]	; (80041ec <drawShedulePanel+0x3c4>)
 8004078:	4858      	ldr	r0, [pc, #352]	; (80041dc <drawShedulePanel+0x3b4>)
 800407a:	f00b f881 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800407e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	2300      	movs	r3, #0
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2300      	movs	r3, #0
 800408a:	2268      	movs	r2, #104	; 0x68
 800408c:	f240 1111 	movw	r1, #273	; 0x111
 8004090:	4852      	ldr	r0, [pc, #328]	; (80041dc <drawShedulePanel+0x3b4>)
 8004092:	f7fd fd47 	bl	8001b24 <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004096:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800409a:	9301      	str	r3, [sp, #4]
 800409c:	2305      	movs	r3, #5
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2314      	movs	r3, #20
 80040a2:	2222      	movs	r2, #34	; 0x22
 80040a4:	2188      	movs	r1, #136	; 0x88
 80040a6:	20b4      	movs	r0, #180	; 0xb4
 80040a8:	f7fd fad1 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 80040ac:	494d      	ldr	r1, [pc, #308]	; (80041e4 <drawShedulePanel+0x3bc>)
 80040ae:	484b      	ldr	r0, [pc, #300]	; (80041dc <drawShedulePanel+0x3b4>)
 80040b0:	f00b f866 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80040b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	2300      	movs	r3, #0
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	2300      	movs	r3, #0
 80040c0:	228b      	movs	r2, #139	; 0x8b
 80040c2:	21ba      	movs	r1, #186	; 0xba
 80040c4:	4845      	ldr	r0, [pc, #276]	; (80041dc <drawShedulePanel+0x3b4>)
 80040c6:	f7fd fd2d 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80040ca:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	2305      	movs	r3, #5
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	2314      	movs	r3, #20
 80040d6:	2222      	movs	r2, #34	; 0x22
 80040d8:	2188      	movs	r1, #136	; 0x88
 80040da:	20e2      	movs	r0, #226	; 0xe2
 80040dc:	f7fd fab7 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 80040e0:	4941      	ldr	r1, [pc, #260]	; (80041e8 <drawShedulePanel+0x3c0>)
 80040e2:	483e      	ldr	r0, [pc, #248]	; (80041dc <drawShedulePanel+0x3b4>)
 80040e4:	f00b f84c 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80040e8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	2300      	movs	r3, #0
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	2300      	movs	r3, #0
 80040f4:	228b      	movs	r2, #139	; 0x8b
 80040f6:	21e5      	movs	r1, #229	; 0xe5
 80040f8:	4838      	ldr	r0, [pc, #224]	; (80041dc <drawShedulePanel+0x3b4>)
 80040fa:	f7fd fd13 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80040fe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	2305      	movs	r3, #5
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2314      	movs	r3, #20
 800410a:	2222      	movs	r2, #34	; 0x22
 800410c:	2188      	movs	r1, #136	; 0x88
 800410e:	f44f 7088 	mov.w	r0, #272	; 0x110
 8004112:	f7fd fa9c 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 8004116:	4935      	ldr	r1, [pc, #212]	; (80041ec <drawShedulePanel+0x3c4>)
 8004118:	4830      	ldr	r0, [pc, #192]	; (80041dc <drawShedulePanel+0x3b4>)
 800411a:	f00b f831 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800411e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004122:	9301      	str	r3, [sp, #4]
 8004124:	2300      	movs	r3, #0
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	2300      	movs	r3, #0
 800412a:	228b      	movs	r2, #139	; 0x8b
 800412c:	f240 1111 	movw	r1, #273	; 0x111
 8004130:	482a      	ldr	r0, [pc, #168]	; (80041dc <drawShedulePanel+0x3b4>)
 8004132:	f7fd fcf7 	bl	8001b24 <EF_PutString>

	  //TODO: ADD READ FROM EEPROM INFO ABOUT DAY OF WEEK, HH:MM AND RELAYS AND LIGHTS!

	  //
	  // Display hour and minute ON and OFF
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004136:	482e      	ldr	r0, [pc, #184]	; (80041f0 <drawShedulePanel+0x3c8>)
 8004138:	f7fd fada 	bl	80016f0 <EF_SetFont>
	  if(NrOfShedule == 1)
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d122      	bne.n	8004188 <drawShedulePanel+0x360>
	  {
		  sprintf((char*)Msg, "ON :    %d : %d", hourOnShedule1, minuteOnShedule1);
 8004142:	7bfa      	ldrb	r2, [r7, #15]
 8004144:	7b7b      	ldrb	r3, [r7, #13]
 8004146:	492b      	ldr	r1, [pc, #172]	; (80041f4 <drawShedulePanel+0x3cc>)
 8004148:	4824      	ldr	r0, [pc, #144]	; (80041dc <drawShedulePanel+0x3b4>)
 800414a:	f00b f819 	bl	800f180 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800414e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	2301      	movs	r3, #1
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	2300      	movs	r3, #0
 800415a:	2264      	movs	r2, #100	; 0x64
 800415c:	2114      	movs	r1, #20
 800415e:	481f      	ldr	r0, [pc, #124]	; (80041dc <drawShedulePanel+0x3b4>)
 8004160:	f7fd fce0 	bl	8001b24 <EF_PutString>

		  sprintf((char*)Msg, "OFF :  %d : %d", hourOffShedule1, minuteOffShedule1);
 8004164:	7bba      	ldrb	r2, [r7, #14]
 8004166:	7b3b      	ldrb	r3, [r7, #12]
 8004168:	4923      	ldr	r1, [pc, #140]	; (80041f8 <drawShedulePanel+0x3d0>)
 800416a:	481c      	ldr	r0, [pc, #112]	; (80041dc <drawShedulePanel+0x3b4>)
 800416c:	f00b f808 	bl	800f180 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004170:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	2301      	movs	r3, #1
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	2300      	movs	r3, #0
 800417c:	2287      	movs	r2, #135	; 0x87
 800417e:	2114      	movs	r1, #20
 8004180:	4816      	ldr	r0, [pc, #88]	; (80041dc <drawShedulePanel+0x3b4>)
 8004182:	f7fd fccf 	bl	8001b24 <EF_PutString>
		  sprintf((char*)Msg, "OFF :  %d : %d", hourOffShedule2, minuteOffShedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }


}
 8004186:	e021      	b.n	80041cc <drawShedulePanel+0x3a4>
		  sprintf((char*)Msg, "ON :  %d : %d", hourOnShedule2, minuteOnShedule2);
 8004188:	7afa      	ldrb	r2, [r7, #11]
 800418a:	7a7b      	ldrb	r3, [r7, #9]
 800418c:	491b      	ldr	r1, [pc, #108]	; (80041fc <drawShedulePanel+0x3d4>)
 800418e:	4813      	ldr	r0, [pc, #76]	; (80041dc <drawShedulePanel+0x3b4>)
 8004190:	f00a fff6 	bl	800f180 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004194:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	2301      	movs	r3, #1
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	2300      	movs	r3, #0
 80041a0:	2264      	movs	r2, #100	; 0x64
 80041a2:	2114      	movs	r1, #20
 80041a4:	480d      	ldr	r0, [pc, #52]	; (80041dc <drawShedulePanel+0x3b4>)
 80041a6:	f7fd fcbd 	bl	8001b24 <EF_PutString>
		  sprintf((char*)Msg, "OFF :  %d : %d", hourOffShedule2, minuteOffShedule2);
 80041aa:	7aba      	ldrb	r2, [r7, #10]
 80041ac:	7a3b      	ldrb	r3, [r7, #8]
 80041ae:	4912      	ldr	r1, [pc, #72]	; (80041f8 <drawShedulePanel+0x3d0>)
 80041b0:	480a      	ldr	r0, [pc, #40]	; (80041dc <drawShedulePanel+0x3b4>)
 80041b2:	f00a ffe5 	bl	800f180 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80041b6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	2301      	movs	r3, #1
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2300      	movs	r3, #0
 80041c2:	2287      	movs	r2, #135	; 0x87
 80041c4:	2114      	movs	r1, #20
 80041c6:	4805      	ldr	r0, [pc, #20]	; (80041dc <drawShedulePanel+0x3b4>)
 80041c8:	f7fd fcac 	bl	8001b24 <EF_PutString>
}
 80041cc:	bf00      	nop
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	08014024 	.word	0x08014024
 80041d8:	080130e8 	.word	0x080130e8
 80041dc:	200002c8 	.word	0x200002c8
 80041e0:	08013100 	.word	0x08013100
 80041e4:	08013124 	.word	0x08013124
 80041e8:	08013128 	.word	0x08013128
 80041ec:	0801312c 	.word	0x0801312c
 80041f0:	08015f9c 	.word	0x08015f9c
 80041f4:	08013134 	.word	0x08013134
 80041f8:	08013144 	.word	0x08013144
 80041fc:	08013154 	.word	0x08013154

08004200 <showShedule1Panel>:

void showShedule1Panel()
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004206:	f24c 6018 	movw	r0, #50712	; 0xc618
 800420a:	f7fd fe75 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 800420e:	483f      	ldr	r0, [pc, #252]	; (800430c <showShedule1Panel+0x10c>)
 8004210:	f7fd fa6e 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 8004214:	493e      	ldr	r1, [pc, #248]	; (8004310 <showShedule1Panel+0x110>)
 8004216:	483f      	ldr	r0, [pc, #252]	; (8004314 <showShedule1Panel+0x114>)
 8004218:	f00a ffb2 	bl	800f180 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800421c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	2300      	movs	r3, #0
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800422a:	220a      	movs	r2, #10
 800422c:	212a      	movs	r1, #42	; 0x2a
 800422e:	4839      	ldr	r0, [pc, #228]	; (8004314 <showShedule1Panel+0x114>)
 8004230:	f7fd fc78 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004234:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	2329      	movs	r3, #41	; 0x29
 800423c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004240:	2129      	movs	r1, #41	; 0x29
 8004242:	2000      	movs	r0, #0
 8004244:	f7fc ffa4 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004248:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	232b      	movs	r3, #43	; 0x2b
 8004250:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004254:	212b      	movs	r1, #43	; 0x2b
 8004256:	2000      	movs	r0, #0
 8004258:	f7fc ff9a 	bl	8001190 <GFX_DrawLine>

	  drawShedulePanel(1);
 800425c:	2001      	movs	r0, #1
 800425e:	f7ff fde3 	bl	8003e28 <drawShedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004262:	482d      	ldr	r0, [pc, #180]	; (8004318 <showShedule1Panel+0x118>)
 8004264:	f7fd fa44 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004268:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	2305      	movs	r3, #5
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	2314      	movs	r3, #20
 8004274:	225f      	movs	r2, #95	; 0x5f
 8004276:	21d8      	movs	r1, #216	; 0xd8
 8004278:	20dc      	movs	r0, #220	; 0xdc
 800427a:	f7fd f9e8 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 800427e:	4927      	ldr	r1, [pc, #156]	; (800431c <showShedule1Panel+0x11c>)
 8004280:	4824      	ldr	r0, [pc, #144]	; (8004314 <showShedule1Panel+0x114>)
 8004282:	f00a ff7d 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004286:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	2300      	movs	r3, #0
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2300      	movs	r3, #0
 8004292:	22da      	movs	r2, #218	; 0xda
 8004294:	21e6      	movs	r1, #230	; 0xe6
 8004296:	481f      	ldr	r0, [pc, #124]	; (8004314 <showShedule1Panel+0x114>)
 8004298:	f7fd fc44 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 800429c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	2305      	movs	r3, #5
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	2314      	movs	r3, #20
 80042a8:	225a      	movs	r2, #90	; 0x5a
 80042aa:	21d8      	movs	r1, #216	; 0xd8
 80042ac:	2078      	movs	r0, #120	; 0x78
 80042ae:	f7fd f9ce 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 80042b2:	491b      	ldr	r1, [pc, #108]	; (8004320 <showShedule1Panel+0x120>)
 80042b4:	4817      	ldr	r0, [pc, #92]	; (8004314 <showShedule1Panel+0x114>)
 80042b6:	f00a ff63 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80042ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	2300      	movs	r3, #0
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	2300      	movs	r3, #0
 80042c6:	22da      	movs	r2, #218	; 0xda
 80042c8:	217e      	movs	r1, #126	; 0x7e
 80042ca:	4812      	ldr	r0, [pc, #72]	; (8004314 <showShedule1Panel+0x114>)
 80042cc:	f7fd fc2a 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80042d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	2305      	movs	r3, #5
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	2314      	movs	r3, #20
 80042dc:	2264      	movs	r2, #100	; 0x64
 80042de:	21d8      	movs	r1, #216	; 0xd8
 80042e0:	200a      	movs	r0, #10
 80042e2:	f7fd f9b4 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 80042e6:	490f      	ldr	r1, [pc, #60]	; (8004324 <showShedule1Panel+0x124>)
 80042e8:	480a      	ldr	r0, [pc, #40]	; (8004314 <showShedule1Panel+0x114>)
 80042ea:	f00a ff49 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80042ee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80042f2:	9301      	str	r3, [sp, #4]
 80042f4:	2300      	movs	r3, #0
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	2300      	movs	r3, #0
 80042fa:	22da      	movs	r2, #218	; 0xda
 80042fc:	210d      	movs	r1, #13
 80042fe:	4805      	ldr	r0, [pc, #20]	; (8004314 <showShedule1Panel+0x114>)
 8004300:	f7fd fc10 	bl	8001b24 <EF_PutString>
}
 8004304:	bf00      	nop
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	08015f9c 	.word	0x08015f9c
 8004310:	08013164 	.word	0x08013164
 8004314:	200002c8 	.word	0x200002c8
 8004318:	08014024 	.word	0x08014024
 800431c:	08013174 	.word	0x08013174
 8004320:	08013180 	.word	0x08013180
 8004324:	08013188 	.word	0x08013188

08004328 <showShedule2Panel>:

void showShedule2Panel()
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800432e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004332:	f7fd fde1 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004336:	4832      	ldr	r0, [pc, #200]	; (8004400 <showShedule2Panel+0xd8>)
 8004338:	f7fd f9da 	bl	80016f0 <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 800433c:	4931      	ldr	r1, [pc, #196]	; (8004404 <showShedule2Panel+0xdc>)
 800433e:	4832      	ldr	r0, [pc, #200]	; (8004408 <showShedule2Panel+0xe0>)
 8004340:	f00a ff1e 	bl	800f180 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004344:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	2300      	movs	r3, #0
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004352:	220a      	movs	r2, #10
 8004354:	212a      	movs	r1, #42	; 0x2a
 8004356:	482c      	ldr	r0, [pc, #176]	; (8004408 <showShedule2Panel+0xe0>)
 8004358:	f7fd fbe4 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800435c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	2329      	movs	r3, #41	; 0x29
 8004364:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004368:	2129      	movs	r1, #41	; 0x29
 800436a:	2000      	movs	r0, #0
 800436c:	f7fc ff10 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004370:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	232b      	movs	r3, #43	; 0x2b
 8004378:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800437c:	212b      	movs	r1, #43	; 0x2b
 800437e:	2000      	movs	r0, #0
 8004380:	f7fc ff06 	bl	8001190 <GFX_DrawLine>

	  drawShedulePanel(2);
 8004384:	2002      	movs	r0, #2
 8004386:	f7ff fd4f 	bl	8003e28 <drawShedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 800438a:	4820      	ldr	r0, [pc, #128]	; (800440c <showShedule2Panel+0xe4>)
 800438c:	f7fd f9b0 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004390:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	2305      	movs	r3, #5
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	2314      	movs	r3, #20
 800439c:	225a      	movs	r2, #90	; 0x5a
 800439e:	21d8      	movs	r1, #216	; 0xd8
 80043a0:	2078      	movs	r0, #120	; 0x78
 80043a2:	f7fd f954 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 80043a6:	491a      	ldr	r1, [pc, #104]	; (8004410 <showShedule2Panel+0xe8>)
 80043a8:	4817      	ldr	r0, [pc, #92]	; (8004408 <showShedule2Panel+0xe0>)
 80043aa:	f00a fee9 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80043ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	2300      	movs	r3, #0
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2300      	movs	r3, #0
 80043ba:	22da      	movs	r2, #218	; 0xda
 80043bc:	217e      	movs	r1, #126	; 0x7e
 80043be:	4812      	ldr	r0, [pc, #72]	; (8004408 <showShedule2Panel+0xe0>)
 80043c0:	f7fd fbb0 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80043c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	2305      	movs	r3, #5
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	2314      	movs	r3, #20
 80043d0:	2264      	movs	r2, #100	; 0x64
 80043d2:	21d8      	movs	r1, #216	; 0xd8
 80043d4:	200a      	movs	r0, #10
 80043d6:	f7fd f93a 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= HARM. 1");
 80043da:	490e      	ldr	r1, [pc, #56]	; (8004414 <showShedule2Panel+0xec>)
 80043dc:	480a      	ldr	r0, [pc, #40]	; (8004408 <showShedule2Panel+0xe0>)
 80043de:	f00a fecf 	bl	800f180 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80043e2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	2300      	movs	r3, #0
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2300      	movs	r3, #0
 80043ee:	22da      	movs	r2, #218	; 0xda
 80043f0:	210d      	movs	r1, #13
 80043f2:	4805      	ldr	r0, [pc, #20]	; (8004408 <showShedule2Panel+0xe0>)
 80043f4:	f7fd fb96 	bl	8001b24 <EF_PutString>
}
 80043f8:	bf00      	nop
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	08015f9c 	.word	0x08015f9c
 8004404:	08013194 	.word	0x08013194
 8004408:	200002c8 	.word	0x200002c8
 800440c:	08014024 	.word	0x08014024
 8004410:	08013180 	.word	0x08013180
 8004414:	080131a4 	.word	0x080131a4

08004418 <ChangeHourOnScreen>:
//
// Change displayed time, if is other than current time
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ChangeHourOnScreen()
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 800441e:	f7fe f9b9 	bl	8002794 <DS3231_GetHour>
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8004426:	f7fe f9c1 	bl	80027ac <DS3231_GetMinute>
 800442a:	4603      	mov	r3, r0
 800442c:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 800442e:	482a      	ldr	r0, [pc, #168]	; (80044d8 <ChangeHourOnScreen+0xc0>)
 8004430:	f7fd f95e 	bl	80016f0 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8004434:	4b29      	ldr	r3, [pc, #164]	; (80044dc <ChangeHourOnScreen+0xc4>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	79fa      	ldrb	r2, [r7, #7]
 800443a:	429a      	cmp	r2, r3
 800443c:	d021      	beq.n	8004482 <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 800443e:	4b28      	ldr	r3, [pc, #160]	; (80044e0 <ChangeHourOnScreen+0xc8>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d11d      	bne.n	8004482 <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	2b09      	cmp	r3, #9
 800444a:	d806      	bhi.n	800445a <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	461a      	mov	r2, r3
 8004450:	4924      	ldr	r1, [pc, #144]	; (80044e4 <ChangeHourOnScreen+0xcc>)
 8004452:	4825      	ldr	r0, [pc, #148]	; (80044e8 <ChangeHourOnScreen+0xd0>)
 8004454:	f00a fe94 	bl	800f180 <siprintf>
 8004458:	e005      	b.n	8004466 <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	461a      	mov	r2, r3
 800445e:	4923      	ldr	r1, [pc, #140]	; (80044ec <ChangeHourOnScreen+0xd4>)
 8004460:	4821      	ldr	r0, [pc, #132]	; (80044e8 <ChangeHourOnScreen+0xd0>)
 8004462:	f00a fe8d 	bl	800f180 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004466:	f24c 6318 	movw	r3, #50712	; 0xc618
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	2301      	movs	r3, #1
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2300      	movs	r3, #0
 8004472:	2232      	movs	r2, #50	; 0x32
 8004474:	2161      	movs	r1, #97	; 0x61
 8004476:	481c      	ldr	r0, [pc, #112]	; (80044e8 <ChangeHourOnScreen+0xd0>)
 8004478:	f7fd fb54 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 800447c:	4a17      	ldr	r2, [pc, #92]	; (80044dc <ChangeHourOnScreen+0xc4>)
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8004482:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <ChangeHourOnScreen+0xd8>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	79ba      	ldrb	r2, [r7, #6]
 8004488:	429a      	cmp	r2, r3
 800448a:	d021      	beq.n	80044d0 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 800448c:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <ChangeHourOnScreen+0xc8>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d11d      	bne.n	80044d0 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 8004494:	79bb      	ldrb	r3, [r7, #6]
 8004496:	2b09      	cmp	r3, #9
 8004498:	d806      	bhi.n	80044a8 <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 800449a:	79bb      	ldrb	r3, [r7, #6]
 800449c:	461a      	mov	r2, r3
 800449e:	4915      	ldr	r1, [pc, #84]	; (80044f4 <ChangeHourOnScreen+0xdc>)
 80044a0:	4811      	ldr	r0, [pc, #68]	; (80044e8 <ChangeHourOnScreen+0xd0>)
 80044a2:	f00a fe6d 	bl	800f180 <siprintf>
 80044a6:	e005      	b.n	80044b4 <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 80044a8:	79bb      	ldrb	r3, [r7, #6]
 80044aa:	461a      	mov	r2, r3
 80044ac:	4912      	ldr	r1, [pc, #72]	; (80044f8 <ChangeHourOnScreen+0xe0>)
 80044ae:	480e      	ldr	r0, [pc, #56]	; (80044e8 <ChangeHourOnScreen+0xd0>)
 80044b0:	f00a fe66 	bl	800f180 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80044b4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	2301      	movs	r3, #1
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	2232      	movs	r2, #50	; 0x32
 80044c2:	2196      	movs	r1, #150	; 0x96
 80044c4:	4808      	ldr	r0, [pc, #32]	; (80044e8 <ChangeHourOnScreen+0xd0>)
 80044c6:	f7fd fb2d 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 80044ca:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <ChangeHourOnScreen+0xd8>)
 80044cc:	79bb      	ldrb	r3, [r7, #6]
 80044ce:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	08015f9c 	.word	0x08015f9c
 80044dc:	2000024c 	.word	0x2000024c
 80044e0:	2000025c 	.word	0x2000025c
 80044e4:	080131b0 	.word	0x080131b0
 80044e8:	200002c8 	.word	0x200002c8
 80044ec:	080131b8 	.word	0x080131b8
 80044f0:	2000024d 	.word	0x2000024d
 80044f4:	080131bc 	.word	0x080131bc
 80044f8:	080131c4 	.word	0x080131c4

080044fc <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d104      	bne.n	800451a <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8004510:	f7fe fb14 	bl	8002b3c <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8004514:	f7fe fb4a 	bl	8002bac <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8004518:	e005      	b.n	8004526 <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 800451a:	2018      	movs	r0, #24
 800451c:	f002 fa62 	bl	80069e4 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8004520:	2019      	movs	r0, #25
 8004522:	f002 fa5f 	bl	80069e4 <SendComand>
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af02      	add	r7, sp, #8
 8004536:	4603      	mov	r3, r0
 8004538:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d12e      	bne.n	80045a2 <predefinedActivityKarmienie+0x72>
	{
		EEPROM_RelayStateRestore();
 8004544:	f7fe fafa 	bl	8002b3c <EEPROM_RelayStateRestore>

		EF_SetFont(&arial_11ptFontInfo);
 8004548:	481b      	ldr	r0, [pc, #108]	; (80045b8 <predefinedActivityKarmienie+0x88>)
 800454a:	f7fd f8d1 	bl	80016f0 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800454e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004552:	9301      	str	r3, [sp, #4]
 8004554:	230a      	movs	r3, #10
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	2328      	movs	r3, #40	; 0x28
 800455a:	2278      	movs	r2, #120	; 0x78
 800455c:	213c      	movs	r1, #60	; 0x3c
 800455e:	2064      	movs	r0, #100	; 0x64
 8004560:	f7fd f875 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004564:	4915      	ldr	r1, [pc, #84]	; (80045bc <predefinedActivityKarmienie+0x8c>)
 8004566:	4816      	ldr	r0, [pc, #88]	; (80045c0 <predefinedActivityKarmienie+0x90>)
 8004568:	f00a fe0a 	bl	800f180 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800456c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	2300      	movs	r3, #0
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	2300      	movs	r3, #0
 8004578:	223e      	movs	r2, #62	; 0x3e
 800457a:	2177      	movs	r1, #119	; 0x77
 800457c:	4810      	ldr	r0, [pc, #64]	; (80045c0 <predefinedActivityKarmienie+0x90>)
 800457e:	f7fd fad1 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004582:	4910      	ldr	r1, [pc, #64]	; (80045c4 <predefinedActivityKarmienie+0x94>)
 8004584:	480e      	ldr	r0, [pc, #56]	; (80045c0 <predefinedActivityKarmienie+0x90>)
 8004586:	f00a fdfb 	bl	800f180 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800458a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	2300      	movs	r3, #0
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	2300      	movs	r3, #0
 8004596:	2250      	movs	r2, #80	; 0x50
 8004598:	2193      	movs	r1, #147	; 0x93
 800459a:	4809      	ldr	r0, [pc, #36]	; (80045c0 <predefinedActivityKarmienie+0x90>)
 800459c:	f7fd fac2 	bl	8001b24 <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 80045a0:	e005      	b.n	80045ae <predefinedActivityKarmienie+0x7e>
		SendComand(UCMD_RELAY_ALL_OFF);
 80045a2:	2018      	movs	r0, #24
 80045a4:	f002 fa1e 	bl	80069e4 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 80045a8:	4807      	ldr	r0, [pc, #28]	; (80045c8 <predefinedActivityKarmienie+0x98>)
 80045aa:	f008 fb99 	bl	800cce0 <HAL_TIM_Base_Start_IT>
}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	08014024 	.word	0x08014024
 80045bc:	0801306c 	.word	0x0801306c
 80045c0:	200002c8 	.word	0x200002c8
 80045c4:	0801307c 	.word	0x0801307c
 80045c8:	20000734 	.word	0x20000734

080045cc <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 80045d2:	487d      	ldr	r0, [pc, #500]	; (80047c8 <drawCurrentStateOfSwitches+0x1fc>)
 80045d4:	f7fd f88c 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 80045d8:	4b7c      	ldr	r3, [pc, #496]	; (80047cc <drawCurrentStateOfSwitches+0x200>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01c      	beq.n	800461a <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80045e0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	2305      	movs	r3, #5
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	2315      	movs	r3, #21
 80045ec:	2221      	movs	r2, #33	; 0x21
 80045ee:	2141      	movs	r1, #65	; 0x41
 80045f0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80045f4:	f7fd f82b 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80045f8:	4975      	ldr	r1, [pc, #468]	; (80047d0 <drawCurrentStateOfSwitches+0x204>)
 80045fa:	4876      	ldr	r0, [pc, #472]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 80045fc:	f00a fdc0 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004600:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	2300      	movs	r3, #0
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	2300      	movs	r3, #0
 800460c:	2243      	movs	r2, #67	; 0x43
 800460e:	f240 1111 	movw	r1, #273	; 0x111
 8004612:	4870      	ldr	r0, [pc, #448]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 8004614:	f7fd fa86 	bl	8001b24 <EF_PutString>
 8004618:	e01b      	b.n	8004652 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800461a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	2305      	movs	r3, #5
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	2315      	movs	r3, #21
 8004626:	2221      	movs	r2, #33	; 0x21
 8004628:	2141      	movs	r1, #65	; 0x41
 800462a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800462e:	f7fd f80e 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004632:	4969      	ldr	r1, [pc, #420]	; (80047d8 <drawCurrentStateOfSwitches+0x20c>)
 8004634:	4867      	ldr	r0, [pc, #412]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 8004636:	f00a fda3 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800463a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	2300      	movs	r3, #0
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2300      	movs	r3, #0
 8004646:	2243      	movs	r2, #67	; 0x43
 8004648:	f240 1111 	movw	r1, #273	; 0x111
 800464c:	4861      	ldr	r0, [pc, #388]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 800464e:	f7fd fa69 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8004652:	4b5e      	ldr	r3, [pc, #376]	; (80047cc <drawCurrentStateOfSwitches+0x200>)
 8004654:	785b      	ldrb	r3, [r3, #1]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d01c      	beq.n	8004694 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800465a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	2305      	movs	r3, #5
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	2315      	movs	r3, #21
 8004666:	2221      	movs	r2, #33	; 0x21
 8004668:	215f      	movs	r1, #95	; 0x5f
 800466a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800466e:	f7fc ffee 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004672:	4957      	ldr	r1, [pc, #348]	; (80047d0 <drawCurrentStateOfSwitches+0x204>)
 8004674:	4857      	ldr	r0, [pc, #348]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 8004676:	f00a fd83 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800467a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	2300      	movs	r3, #0
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	2300      	movs	r3, #0
 8004686:	2261      	movs	r2, #97	; 0x61
 8004688:	f240 1111 	movw	r1, #273	; 0x111
 800468c:	4851      	ldr	r0, [pc, #324]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 800468e:	f7fd fa49 	bl	8001b24 <EF_PutString>
 8004692:	e01b      	b.n	80046cc <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004694:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004698:	9301      	str	r3, [sp, #4]
 800469a:	2305      	movs	r3, #5
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	2315      	movs	r3, #21
 80046a0:	2221      	movs	r2, #33	; 0x21
 80046a2:	215f      	movs	r1, #95	; 0x5f
 80046a4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80046a8:	f7fc ffd1 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80046ac:	494a      	ldr	r1, [pc, #296]	; (80047d8 <drawCurrentStateOfSwitches+0x20c>)
 80046ae:	4849      	ldr	r0, [pc, #292]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 80046b0:	f00a fd66 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80046b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	2300      	movs	r3, #0
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	2300      	movs	r3, #0
 80046c0:	2261      	movs	r2, #97	; 0x61
 80046c2:	f240 1111 	movw	r1, #273	; 0x111
 80046c6:	4843      	ldr	r0, [pc, #268]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 80046c8:	f7fd fa2c 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 80046cc:	4b3f      	ldr	r3, [pc, #252]	; (80047cc <drawCurrentStateOfSwitches+0x200>)
 80046ce:	789b      	ldrb	r3, [r3, #2]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01c      	beq.n	800470e <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80046d4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80046d8:	9301      	str	r3, [sp, #4]
 80046da:	2305      	movs	r3, #5
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	2315      	movs	r3, #21
 80046e0:	2221      	movs	r2, #33	; 0x21
 80046e2:	217d      	movs	r1, #125	; 0x7d
 80046e4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80046e8:	f7fc ffb1 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80046ec:	4938      	ldr	r1, [pc, #224]	; (80047d0 <drawCurrentStateOfSwitches+0x204>)
 80046ee:	4839      	ldr	r0, [pc, #228]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 80046f0:	f00a fd46 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80046f4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	2300      	movs	r3, #0
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	2300      	movs	r3, #0
 8004700:	227f      	movs	r2, #127	; 0x7f
 8004702:	f240 1111 	movw	r1, #273	; 0x111
 8004706:	4833      	ldr	r0, [pc, #204]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 8004708:	f7fd fa0c 	bl	8001b24 <EF_PutString>
 800470c:	e01b      	b.n	8004746 <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800470e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	2305      	movs	r3, #5
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	2315      	movs	r3, #21
 800471a:	2221      	movs	r2, #33	; 0x21
 800471c:	217d      	movs	r1, #125	; 0x7d
 800471e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004722:	f7fc ff94 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004726:	492c      	ldr	r1, [pc, #176]	; (80047d8 <drawCurrentStateOfSwitches+0x20c>)
 8004728:	482a      	ldr	r0, [pc, #168]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 800472a:	f00a fd29 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800472e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004732:	9301      	str	r3, [sp, #4]
 8004734:	2300      	movs	r3, #0
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	2300      	movs	r3, #0
 800473a:	227f      	movs	r2, #127	; 0x7f
 800473c:	f240 1111 	movw	r1, #273	; 0x111
 8004740:	4824      	ldr	r0, [pc, #144]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 8004742:	f7fd f9ef 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8004746:	4b21      	ldr	r3, [pc, #132]	; (80047cc <drawCurrentStateOfSwitches+0x200>)
 8004748:	78db      	ldrb	r3, [r3, #3]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01c      	beq.n	8004788 <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800474e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004752:	9301      	str	r3, [sp, #4]
 8004754:	2305      	movs	r3, #5
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	2315      	movs	r3, #21
 800475a:	2221      	movs	r2, #33	; 0x21
 800475c:	219b      	movs	r1, #155	; 0x9b
 800475e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004762:	f7fc ff74 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004766:	491a      	ldr	r1, [pc, #104]	; (80047d0 <drawCurrentStateOfSwitches+0x204>)
 8004768:	481a      	ldr	r0, [pc, #104]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 800476a:	f00a fd09 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800476e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	2300      	movs	r3, #0
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	2300      	movs	r3, #0
 800477a:	229d      	movs	r2, #157	; 0x9d
 800477c:	f240 1111 	movw	r1, #273	; 0x111
 8004780:	4814      	ldr	r0, [pc, #80]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 8004782:	f7fd f9cf 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8004786:	e01b      	b.n	80047c0 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004788:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	2305      	movs	r3, #5
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	2315      	movs	r3, #21
 8004794:	2221      	movs	r2, #33	; 0x21
 8004796:	219b      	movs	r1, #155	; 0x9b
 8004798:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800479c:	f7fc ff57 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80047a0:	490d      	ldr	r1, [pc, #52]	; (80047d8 <drawCurrentStateOfSwitches+0x20c>)
 80047a2:	480c      	ldr	r0, [pc, #48]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 80047a4:	f00a fcec 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80047a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	2300      	movs	r3, #0
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2300      	movs	r3, #0
 80047b4:	229d      	movs	r2, #157	; 0x9d
 80047b6:	f240 1111 	movw	r1, #273	; 0x111
 80047ba:	4806      	ldr	r0, [pc, #24]	; (80047d4 <drawCurrentStateOfSwitches+0x208>)
 80047bc:	f7fd f9b2 	bl	8001b24 <EF_PutString>
}
 80047c0:	bf00      	nop
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	08014024 	.word	0x08014024
 80047cc:	20000274 	.word	0x20000274
 80047d0:	08013078 	.word	0x08013078
 80047d4:	200002c8 	.word	0x200002c8
 80047d8:	0801307c 	.word	0x0801307c

080047dc <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 80047e2:	4875      	ldr	r0, [pc, #468]	; (80049b8 <drawCurrentStateOfLights+0x1dc>)
 80047e4:	f7fc ff84 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 80047e8:	4b74      	ldr	r3, [pc, #464]	; (80049bc <drawCurrentStateOfLights+0x1e0>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01a      	beq.n	8004826 <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80047f0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	2305      	movs	r3, #5
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	2315      	movs	r3, #21
 80047fc:	2221      	movs	r2, #33	; 0x21
 80047fe:	2141      	movs	r1, #65	; 0x41
 8004800:	20c8      	movs	r0, #200	; 0xc8
 8004802:	f7fc ff24 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004806:	496e      	ldr	r1, [pc, #440]	; (80049c0 <drawCurrentStateOfLights+0x1e4>)
 8004808:	486e      	ldr	r0, [pc, #440]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 800480a:	f00a fcb9 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800480e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004812:	9301      	str	r3, [sp, #4]
 8004814:	2300      	movs	r3, #0
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	2300      	movs	r3, #0
 800481a:	2243      	movs	r2, #67	; 0x43
 800481c:	21cb      	movs	r1, #203	; 0xcb
 800481e:	4869      	ldr	r0, [pc, #420]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 8004820:	f7fd f980 	bl	8001b24 <EF_PutString>
 8004824:	e019      	b.n	800485a <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004826:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	2305      	movs	r3, #5
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	2315      	movs	r3, #21
 8004832:	2221      	movs	r2, #33	; 0x21
 8004834:	2141      	movs	r1, #65	; 0x41
 8004836:	20c8      	movs	r0, #200	; 0xc8
 8004838:	f7fc ff09 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800483c:	4962      	ldr	r1, [pc, #392]	; (80049c8 <drawCurrentStateOfLights+0x1ec>)
 800483e:	4861      	ldr	r0, [pc, #388]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 8004840:	f00a fc9e 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004844:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004848:	9301      	str	r3, [sp, #4]
 800484a:	2300      	movs	r3, #0
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	2300      	movs	r3, #0
 8004850:	2243      	movs	r2, #67	; 0x43
 8004852:	21cb      	movs	r1, #203	; 0xcb
 8004854:	485b      	ldr	r0, [pc, #364]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 8004856:	f7fd f965 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 800485a:	4b58      	ldr	r3, [pc, #352]	; (80049bc <drawCurrentStateOfLights+0x1e0>)
 800485c:	785b      	ldrb	r3, [r3, #1]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01a      	beq.n	8004898 <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004862:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	2305      	movs	r3, #5
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	2315      	movs	r3, #21
 800486e:	2221      	movs	r2, #33	; 0x21
 8004870:	215f      	movs	r1, #95	; 0x5f
 8004872:	20c8      	movs	r0, #200	; 0xc8
 8004874:	f7fc feeb 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004878:	4951      	ldr	r1, [pc, #324]	; (80049c0 <drawCurrentStateOfLights+0x1e4>)
 800487a:	4852      	ldr	r0, [pc, #328]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 800487c:	f00a fc80 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004880:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	2300      	movs	r3, #0
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	2300      	movs	r3, #0
 800488c:	2261      	movs	r2, #97	; 0x61
 800488e:	21cb      	movs	r1, #203	; 0xcb
 8004890:	484c      	ldr	r0, [pc, #304]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 8004892:	f7fd f947 	bl	8001b24 <EF_PutString>
 8004896:	e019      	b.n	80048cc <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004898:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	2305      	movs	r3, #5
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	2315      	movs	r3, #21
 80048a4:	2221      	movs	r2, #33	; 0x21
 80048a6:	215f      	movs	r1, #95	; 0x5f
 80048a8:	20c8      	movs	r0, #200	; 0xc8
 80048aa:	f7fc fed0 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80048ae:	4946      	ldr	r1, [pc, #280]	; (80049c8 <drawCurrentStateOfLights+0x1ec>)
 80048b0:	4844      	ldr	r0, [pc, #272]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 80048b2:	f00a fc65 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80048b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	2300      	movs	r3, #0
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	2300      	movs	r3, #0
 80048c2:	2261      	movs	r2, #97	; 0x61
 80048c4:	21cb      	movs	r1, #203	; 0xcb
 80048c6:	483f      	ldr	r0, [pc, #252]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 80048c8:	f7fd f92c 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 80048cc:	4b3b      	ldr	r3, [pc, #236]	; (80049bc <drawCurrentStateOfLights+0x1e0>)
 80048ce:	789b      	ldrb	r3, [r3, #2]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01a      	beq.n	800490a <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80048d4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	2305      	movs	r3, #5
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	2315      	movs	r3, #21
 80048e0:	2221      	movs	r2, #33	; 0x21
 80048e2:	217d      	movs	r1, #125	; 0x7d
 80048e4:	20c8      	movs	r0, #200	; 0xc8
 80048e6:	f7fc feb2 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80048ea:	4935      	ldr	r1, [pc, #212]	; (80049c0 <drawCurrentStateOfLights+0x1e4>)
 80048ec:	4835      	ldr	r0, [pc, #212]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 80048ee:	f00a fc47 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80048f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	2300      	movs	r3, #0
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	2300      	movs	r3, #0
 80048fe:	227f      	movs	r2, #127	; 0x7f
 8004900:	21cb      	movs	r1, #203	; 0xcb
 8004902:	4830      	ldr	r0, [pc, #192]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 8004904:	f7fd f90e 	bl	8001b24 <EF_PutString>
 8004908:	e019      	b.n	800493e <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800490a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	2305      	movs	r3, #5
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	2315      	movs	r3, #21
 8004916:	2221      	movs	r2, #33	; 0x21
 8004918:	217d      	movs	r1, #125	; 0x7d
 800491a:	20c8      	movs	r0, #200	; 0xc8
 800491c:	f7fc fe97 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004920:	4929      	ldr	r1, [pc, #164]	; (80049c8 <drawCurrentStateOfLights+0x1ec>)
 8004922:	4828      	ldr	r0, [pc, #160]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 8004924:	f00a fc2c 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004928:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	2300      	movs	r3, #0
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	2300      	movs	r3, #0
 8004934:	227f      	movs	r2, #127	; 0x7f
 8004936:	21cb      	movs	r1, #203	; 0xcb
 8004938:	4822      	ldr	r0, [pc, #136]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 800493a:	f7fd f8f3 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 800493e:	4b1f      	ldr	r3, [pc, #124]	; (80049bc <drawCurrentStateOfLights+0x1e0>)
 8004940:	78db      	ldrb	r3, [r3, #3]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d01a      	beq.n	800497c <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004946:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	2305      	movs	r3, #5
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	2315      	movs	r3, #21
 8004952:	2221      	movs	r2, #33	; 0x21
 8004954:	219b      	movs	r1, #155	; 0x9b
 8004956:	20c8      	movs	r0, #200	; 0xc8
 8004958:	f7fc fe79 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800495c:	4918      	ldr	r1, [pc, #96]	; (80049c0 <drawCurrentStateOfLights+0x1e4>)
 800495e:	4819      	ldr	r0, [pc, #100]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 8004960:	f00a fc0e 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004964:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	2300      	movs	r3, #0
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	2300      	movs	r3, #0
 8004970:	229d      	movs	r2, #157	; 0x9d
 8004972:	21cb      	movs	r1, #203	; 0xcb
 8004974:	4813      	ldr	r0, [pc, #76]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 8004976:	f7fd f8d5 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 800497a:	e019      	b.n	80049b0 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800497c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	2305      	movs	r3, #5
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	2315      	movs	r3, #21
 8004988:	2221      	movs	r2, #33	; 0x21
 800498a:	219b      	movs	r1, #155	; 0x9b
 800498c:	20c8      	movs	r0, #200	; 0xc8
 800498e:	f7fc fe5e 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004992:	490d      	ldr	r1, [pc, #52]	; (80049c8 <drawCurrentStateOfLights+0x1ec>)
 8004994:	480b      	ldr	r0, [pc, #44]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 8004996:	f00a fbf3 	bl	800f180 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800499a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	2300      	movs	r3, #0
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2300      	movs	r3, #0
 80049a6:	229d      	movs	r2, #157	; 0x9d
 80049a8:	21cb      	movs	r1, #203	; 0xcb
 80049aa:	4806      	ldr	r0, [pc, #24]	; (80049c4 <drawCurrentStateOfLights+0x1e8>)
 80049ac:	f7fd f8ba 	bl	8001b24 <EF_PutString>
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	08014024 	.word	0x08014024
 80049bc:	20000278 	.word	0x20000278
 80049c0:	08013078 	.word	0x08013078
 80049c4:	200002c8 	.word	0x200002c8
 80049c8:	0801307c 	.word	0x0801307c

080049cc <initWait>:

//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 80049d4:	bf00      	nop
 80049d6:	f003 f80b 	bl	80079f0 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <initWait+0x28>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d2f6      	bcs.n	80049d6 <initWait+0xa>
    {
    }
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20000250 	.word	0x20000250

080049f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	; 0x28
 80049fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049fe:	f107 0314 	add.w	r3, r7, #20
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	605a      	str	r2, [r3, #4]
 8004a08:	609a      	str	r2, [r3, #8]
 8004a0a:	60da      	str	r2, [r3, #12]
 8004a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a0e:	2300      	movs	r3, #0
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	4b3f      	ldr	r3, [pc, #252]	; (8004b10 <MX_GPIO_Init+0x118>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	4a3e      	ldr	r2, [pc, #248]	; (8004b10 <MX_GPIO_Init+0x118>)
 8004a18:	f043 0304 	orr.w	r3, r3, #4
 8004a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a1e:	4b3c      	ldr	r3, [pc, #240]	; (8004b10 <MX_GPIO_Init+0x118>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	4b38      	ldr	r3, [pc, #224]	; (8004b10 <MX_GPIO_Init+0x118>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	4a37      	ldr	r2, [pc, #220]	; (8004b10 <MX_GPIO_Init+0x118>)
 8004a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a38:	6313      	str	r3, [r2, #48]	; 0x30
 8004a3a:	4b35      	ldr	r3, [pc, #212]	; (8004b10 <MX_GPIO_Init+0x118>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a46:	2300      	movs	r3, #0
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <MX_GPIO_Init+0x118>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	4a30      	ldr	r2, [pc, #192]	; (8004b10 <MX_GPIO_Init+0x118>)
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6313      	str	r3, [r2, #48]	; 0x30
 8004a56:	4b2e      	ldr	r3, [pc, #184]	; (8004b10 <MX_GPIO_Init+0x118>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	60bb      	str	r3, [r7, #8]
 8004a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a62:	2300      	movs	r3, #0
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	4b2a      	ldr	r3, [pc, #168]	; (8004b10 <MX_GPIO_Init+0x118>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <MX_GPIO_Init+0x118>)
 8004a6c:	f043 0302 	orr.w	r3, r3, #2
 8004a70:	6313      	str	r3, [r2, #48]	; 0x30
 8004a72:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <MX_GPIO_Init+0x118>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	607b      	str	r3, [r7, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a84:	4823      	ldr	r0, [pc, #140]	; (8004b14 <MX_GPIO_Init+0x11c>)
 8004a86:	f003 ff2f 	bl	80088e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8004a90:	4821      	ldr	r0, [pc, #132]	; (8004b18 <MX_GPIO_Init+0x120>)
 8004a92:	f003 ff29 	bl	80088e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 8004a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8004aa8:	f107 0314 	add.w	r3, r7, #20
 8004aac:	4619      	mov	r1, r3
 8004aae:	4819      	ldr	r0, [pc, #100]	; (8004b14 <MX_GPIO_Init+0x11c>)
 8004ab0:	f003 fd7e 	bl	80085b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTC_IRQ_Pin;
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004ab8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004ac2:	f107 0314 	add.w	r3, r7, #20
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4814      	ldr	r0, [pc, #80]	; (8004b1c <MX_GPIO_Init+0x124>)
 8004aca:	f003 fd71 	bl	80085b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8004ace:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004adc:	2300      	movs	r3, #0
 8004ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae0:	f107 0314 	add.w	r3, r7, #20
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	480c      	ldr	r0, [pc, #48]	; (8004b18 <MX_GPIO_Init+0x120>)
 8004ae8:	f003 fd62 	bl	80085b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8004aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004af2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004afc:	f107 0314 	add.w	r3, r7, #20
 8004b00:	4619      	mov	r1, r3
 8004b02:	4806      	ldr	r0, [pc, #24]	; (8004b1c <MX_GPIO_Init+0x124>)
 8004b04:	f003 fd54 	bl	80085b0 <HAL_GPIO_Init>

}
 8004b08:	bf00      	nop
 8004b0a:	3728      	adds	r7, #40	; 0x28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40020800 	.word	0x40020800
 8004b18:	40020400 	.word	0x40020400
 8004b1c:	40020000 	.word	0x40020000

08004b20 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004b24:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b26:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <MX_I2C1_Init+0x54>)
 8004b28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004b2a:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b2c:	4a12      	ldr	r2, [pc, #72]	; (8004b78 <MX_I2C1_Init+0x58>)
 8004b2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b30:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004b36:	4b0e      	ldr	r3, [pc, #56]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b44:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b50:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b5c:	4804      	ldr	r0, [pc, #16]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b5e:	f003 ff0f 	bl	8008980 <HAL_I2C_Init>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004b68:	f000 fa7c 	bl	8005064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004b6c:	bf00      	nop
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	200003bc 	.word	0x200003bc
 8004b74:	40005400 	.word	0x40005400
 8004b78:	00061a80 	.word	0x00061a80

08004b7c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004b80:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004b82:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <MX_I2C3_Init+0x54>)
 8004b84:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8004b86:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004b88:	4a12      	ldr	r2, [pc, #72]	; (8004bd4 <MX_I2C3_Init+0x58>)
 8004b8a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b8c:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004b92:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b9e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004bb8:	4804      	ldr	r0, [pc, #16]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004bba:	f003 fee1 	bl	8008980 <HAL_I2C_Init>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004bc4:	f000 fa4e 	bl	8005064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004bc8:	bf00      	nop
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000308 	.word	0x20000308
 8004bd0:	40005c00 	.word	0x40005c00
 8004bd4:	000186a0 	.word	0x000186a0

08004bd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08c      	sub	sp, #48	; 0x30
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be0:	f107 031c 	add.w	r3, r7, #28
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	60da      	str	r2, [r3, #12]
 8004bee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a74      	ldr	r2, [pc, #464]	; (8004dc8 <HAL_I2C_MspInit+0x1f0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	f040 8090 	bne.w	8004d1c <HAL_I2C_MspInit+0x144>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61bb      	str	r3, [r7, #24]
 8004c00:	4b72      	ldr	r3, [pc, #456]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	4a71      	ldr	r2, [pc, #452]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004c06:	f043 0302 	orr.w	r3, r3, #2
 8004c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c0c:	4b6f      	ldr	r3, [pc, #444]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c18:	23c0      	movs	r3, #192	; 0xc0
 8004c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c1c:	2312      	movs	r3, #18
 8004c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c24:	2303      	movs	r3, #3
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c28:	2304      	movs	r3, #4
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c2c:	f107 031c 	add.w	r3, r7, #28
 8004c30:	4619      	mov	r1, r3
 8004c32:	4867      	ldr	r0, [pc, #412]	; (8004dd0 <HAL_I2C_MspInit+0x1f8>)
 8004c34:	f003 fcbc 	bl	80085b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	4b63      	ldr	r3, [pc, #396]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	4a62      	ldr	r2, [pc, #392]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c46:	6413      	str	r3, [r2, #64]	; 0x40
 8004c48:	4b60      	ldr	r3, [pc, #384]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004c54:	4b5f      	ldr	r3, [pc, #380]	; (8004dd4 <HAL_I2C_MspInit+0x1fc>)
 8004c56:	4a60      	ldr	r2, [pc, #384]	; (8004dd8 <HAL_I2C_MspInit+0x200>)
 8004c58:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004c5a:	4b5e      	ldr	r3, [pc, #376]	; (8004dd4 <HAL_I2C_MspInit+0x1fc>)
 8004c5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c60:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c62:	4b5c      	ldr	r3, [pc, #368]	; (8004dd4 <HAL_I2C_MspInit+0x1fc>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c68:	4b5a      	ldr	r3, [pc, #360]	; (8004dd4 <HAL_I2C_MspInit+0x1fc>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c6e:	4b59      	ldr	r3, [pc, #356]	; (8004dd4 <HAL_I2C_MspInit+0x1fc>)
 8004c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c74:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c76:	4b57      	ldr	r3, [pc, #348]	; (8004dd4 <HAL_I2C_MspInit+0x1fc>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c7c:	4b55      	ldr	r3, [pc, #340]	; (8004dd4 <HAL_I2C_MspInit+0x1fc>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004c82:	4b54      	ldr	r3, [pc, #336]	; (8004dd4 <HAL_I2C_MspInit+0x1fc>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c88:	4b52      	ldr	r3, [pc, #328]	; (8004dd4 <HAL_I2C_MspInit+0x1fc>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c8e:	4b51      	ldr	r3, [pc, #324]	; (8004dd4 <HAL_I2C_MspInit+0x1fc>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004c94:	484f      	ldr	r0, [pc, #316]	; (8004dd4 <HAL_I2C_MspInit+0x1fc>)
 8004c96:	f003 f87b 	bl	8007d90 <HAL_DMA_Init>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8004ca0:	f000 f9e0 	bl	8005064 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a4b      	ldr	r2, [pc, #300]	; (8004dd4 <HAL_I2C_MspInit+0x1fc>)
 8004ca8:	639a      	str	r2, [r3, #56]	; 0x38
 8004caa:	4a4a      	ldr	r2, [pc, #296]	; (8004dd4 <HAL_I2C_MspInit+0x1fc>)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8004cb0:	4b4a      	ldr	r3, [pc, #296]	; (8004ddc <HAL_I2C_MspInit+0x204>)
 8004cb2:	4a4b      	ldr	r2, [pc, #300]	; (8004de0 <HAL_I2C_MspInit+0x208>)
 8004cb4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8004cb6:	4b49      	ldr	r3, [pc, #292]	; (8004ddc <HAL_I2C_MspInit+0x204>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cbc:	4b47      	ldr	r3, [pc, #284]	; (8004ddc <HAL_I2C_MspInit+0x204>)
 8004cbe:	2240      	movs	r2, #64	; 0x40
 8004cc0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cc2:	4b46      	ldr	r3, [pc, #280]	; (8004ddc <HAL_I2C_MspInit+0x204>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cc8:	4b44      	ldr	r3, [pc, #272]	; (8004ddc <HAL_I2C_MspInit+0x204>)
 8004cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cce:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cd0:	4b42      	ldr	r3, [pc, #264]	; (8004ddc <HAL_I2C_MspInit+0x204>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cd6:	4b41      	ldr	r3, [pc, #260]	; (8004ddc <HAL_I2C_MspInit+0x204>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004cdc:	4b3f      	ldr	r3, [pc, #252]	; (8004ddc <HAL_I2C_MspInit+0x204>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ce2:	4b3e      	ldr	r3, [pc, #248]	; (8004ddc <HAL_I2C_MspInit+0x204>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ce8:	4b3c      	ldr	r3, [pc, #240]	; (8004ddc <HAL_I2C_MspInit+0x204>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004cee:	483b      	ldr	r0, [pc, #236]	; (8004ddc <HAL_I2C_MspInit+0x204>)
 8004cf0:	f003 f84e 	bl	8007d90 <HAL_DMA_Init>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8004cfa:	f000 f9b3 	bl	8005064 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a36      	ldr	r2, [pc, #216]	; (8004ddc <HAL_I2C_MspInit+0x204>)
 8004d02:	635a      	str	r2, [r3, #52]	; 0x34
 8004d04:	4a35      	ldr	r2, [pc, #212]	; (8004ddc <HAL_I2C_MspInit+0x204>)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	2020      	movs	r0, #32
 8004d10:	f002 ffdd 	bl	8007cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004d14:	2020      	movs	r0, #32
 8004d16:	f002 fff6 	bl	8007d06 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8004d1a:	e050      	b.n	8004dbe <HAL_I2C_MspInit+0x1e6>
  else if(i2cHandle->Instance==I2C3)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a30      	ldr	r2, [pc, #192]	; (8004de4 <HAL_I2C_MspInit+0x20c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d14b      	bne.n	8004dbe <HAL_I2C_MspInit+0x1e6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	4b28      	ldr	r3, [pc, #160]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	4a27      	ldr	r2, [pc, #156]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	6313      	str	r3, [r2, #48]	; 0x30
 8004d36:	4b25      	ldr	r3, [pc, #148]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	4b21      	ldr	r3, [pc, #132]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	4a20      	ldr	r2, [pc, #128]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004d4c:	f043 0302 	orr.w	r3, r3, #2
 8004d50:	6313      	str	r3, [r2, #48]	; 0x30
 8004d52:	4b1e      	ldr	r3, [pc, #120]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d64:	2312      	movs	r3, #18
 8004d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004d70:	2304      	movs	r3, #4
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d74:	f107 031c 	add.w	r3, r7, #28
 8004d78:	4619      	mov	r1, r3
 8004d7a:	481b      	ldr	r0, [pc, #108]	; (8004de8 <HAL_I2C_MspInit+0x210>)
 8004d7c:	f003 fc18 	bl	80085b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d86:	2312      	movs	r3, #18
 8004d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8004d92:	2309      	movs	r3, #9
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d96:	f107 031c 	add.w	r3, r7, #28
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	480c      	ldr	r0, [pc, #48]	; (8004dd0 <HAL_I2C_MspInit+0x1f8>)
 8004d9e:	f003 fc07 	bl	80085b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004da2:	2300      	movs	r3, #0
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	4a08      	ldr	r2, [pc, #32]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004dac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004db0:	6413      	str	r3, [r2, #64]	; 0x40
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_I2C_MspInit+0x1f4>)
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dba:	60bb      	str	r3, [r7, #8]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
}
 8004dbe:	bf00      	nop
 8004dc0:	3730      	adds	r7, #48	; 0x30
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40005400 	.word	0x40005400
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	40020400 	.word	0x40020400
 8004dd4:	20000410 	.word	0x20000410
 8004dd8:	40026010 	.word	0x40026010
 8004ddc:	2000035c 	.word	0x2000035c
 8004de0:	40026028 	.word	0x40026028
 8004de4:	40005c00 	.word	0x40005c00
 8004de8:	40020000 	.word	0x40020000

08004dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004df2:	f002 fd97 	bl	8007924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004df6:	f000 f857 	bl	8004ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004dfa:	f7ff fdfd 	bl	80049f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8004dfe:	f001 ffd3 	bl	8006da8 <MX_SPI1_Init>
  MX_DMA_Init();
 8004e02:	f7fd fb77 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004e06:	f002 fc8d 	bl	8007724 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8004e0a:	f002 f803 	bl	8006e14 <MX_SPI3_Init>
  MX_I2C1_Init();
 8004e0e:	f7ff fe87 	bl	8004b20 <MX_I2C1_Init>
  MX_TIM11_Init();
 8004e12:	f002 fa79 	bl	8007308 <MX_TIM11_Init>
  MX_TIM10_Init();
 8004e16:	f002 fa53 	bl	80072c0 <MX_TIM10_Init>
  MX_I2C3_Init();
 8004e1a:	f7ff feaf 	bl	8004b7c <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8004e1e:	f000 f8ab 	bl	8004f78 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 8004e22:	481b      	ldr	r0, [pc, #108]	; (8004e90 <main+0xa4>)
 8004e24:	f007 ff5c 	bl	800cce0 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 8004e28:	481a      	ldr	r0, [pc, #104]	; (8004e94 <main+0xa8>)
 8004e2a:	f7fd f8c3 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8004e2e:	491a      	ldr	r1, [pc, #104]	; (8004e98 <main+0xac>)
 8004e30:	481a      	ldr	r0, [pc, #104]	; (8004e9c <main+0xb0>)
 8004e32:	f002 fc28 	bl	8007686 <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 8004e36:	2117      	movs	r1, #23
 8004e38:	4819      	ldr	r0, [pc, #100]	; (8004ea0 <main+0xb4>)
 8004e3a:	f7fd fb0b 	bl	8002454 <XPT2046_Init>
  // RTC Initialization
  DS3231_Init(&hi2c1);
 8004e3e:	4819      	ldr	r0, [pc, #100]	; (8004ea4 <main+0xb8>)
 8004e40:	f7fd fb90 	bl	8002564 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8004e44:	2001      	movs	r0, #1
 8004e46:	f7fd fbe7 	bl	8002618 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	f7fd fc04 	bl	8002658 <DS3231_EnableOscillator>


  uint8_t result = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	71fb      	strb	r3, [r7, #7]
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 8004e54:	e001      	b.n	8004e5a <main+0x6e>
  Error_Handler();
 8004e56:	f000 f905 	bl	8005064 <Error_Handler>
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 8004e5a:	1dfb      	adds	r3, r7, #7
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	4619      	mov	r1, r3
 8004e60:	2001      	movs	r0, #1
 8004e62:	f7fd fd45 	bl	80028f0 <eeprom_read>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f4      	bne.n	8004e56 <main+0x6a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8004e6c:	480b      	ldr	r0, [pc, #44]	; (8004e9c <main+0xb0>)
 8004e6e:	f002 fbbd 	bl	80075ec <UARTDMA_IsDataReceivedReady>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <main+0x92>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8004e78:	4808      	ldr	r0, [pc, #32]	; (8004e9c <main+0xb0>)
 8004e7a:	f001 fad7 	bl	800642c <UART_ParseLine>
	  }

	  //
	  // TRANSMIT
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8004e7e:	4807      	ldr	r0, [pc, #28]	; (8004e9c <main+0xb0>)
 8004e80:	f002 fbc6 	bl	8007610 <UARTDMA_TransmitEvent>

	  //
	  // TOUCH
	  //
	  XPT2046_Task();
 8004e84:	f7fd fa14 	bl	80022b0 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  MenuTFT();
 8004e88:	f000 f8fa 	bl	8005080 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8004e8c:	e7ee      	b.n	8004e6c <main+0x80>
 8004e8e:	bf00      	nop
 8004e90:	2000077c 	.word	0x2000077c
 8004e94:	200006dc 	.word	0x200006dc
 8004e98:	20000884 	.word	0x20000884
 8004e9c:	20000470 	.word	0x20000470
 8004ea0:	20000684 	.word	0x20000684
 8004ea4:	200003bc 	.word	0x200003bc

08004ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b094      	sub	sp, #80	; 0x50
 8004eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004eae:	f107 0320 	add.w	r3, r7, #32
 8004eb2:	2230      	movs	r2, #48	; 0x30
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f009 fada 	bl	800e470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ebc:	f107 030c 	add.w	r3, r7, #12
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	605a      	str	r2, [r3, #4]
 8004ec6:	609a      	str	r2, [r3, #8]
 8004ec8:	60da      	str	r2, [r3, #12]
 8004eca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	4b27      	ldr	r3, [pc, #156]	; (8004f70 <SystemClock_Config+0xc8>)
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	4a26      	ldr	r2, [pc, #152]	; (8004f70 <SystemClock_Config+0xc8>)
 8004ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eda:	6413      	str	r3, [r2, #64]	; 0x40
 8004edc:	4b24      	ldr	r3, [pc, #144]	; (8004f70 <SystemClock_Config+0xc8>)
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ee8:	2300      	movs	r3, #0
 8004eea:	607b      	str	r3, [r7, #4]
 8004eec:	4b21      	ldr	r3, [pc, #132]	; (8004f74 <SystemClock_Config+0xcc>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a20      	ldr	r2, [pc, #128]	; (8004f74 <SystemClock_Config+0xcc>)
 8004ef2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <SystemClock_Config+0xcc>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f00:	607b      	str	r3, [r7, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f04:	2301      	movs	r3, #1
 8004f06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8004f18:	230c      	movs	r3, #12
 8004f1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8004f1c:	2360      	movs	r3, #96	; 0x60
 8004f1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f20:	2302      	movs	r3, #2
 8004f22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004f24:	2304      	movs	r3, #4
 8004f26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f28:	f107 0320 	add.w	r3, r7, #32
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f006 fe2b 	bl	800bb88 <HAL_RCC_OscConfig>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004f38:	f000 f894 	bl	8005064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f3c:	230f      	movs	r3, #15
 8004f3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f40:	2302      	movs	r3, #2
 8004f42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004f52:	f107 030c 	add.w	r3, r7, #12
 8004f56:	2103      	movs	r1, #3
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f007 f88d 	bl	800c078 <HAL_RCC_ClockConfig>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004f64:	f000 f87e 	bl	8005064 <Error_Handler>
  }
}
 8004f68:	bf00      	nop
 8004f6a:	3750      	adds	r7, #80	; 0x50
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40007000 	.word	0x40007000

08004f78 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2100      	movs	r1, #0
 8004f80:	200a      	movs	r0, #10
 8004f82:	f002 fea4 	bl	8007cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004f86:	200a      	movs	r0, #10
 8004f88:	f002 febd 	bl	8007d06 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2100      	movs	r1, #0
 8004f90:	2017      	movs	r0, #23
 8004f92:	f002 fe9c 	bl	8007cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004f96:	2017      	movs	r0, #23
 8004f98:	f002 feb5 	bl	8007d06 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	201f      	movs	r0, #31
 8004fa2:	f002 fe94 	bl	8007cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004fa6:	201f      	movs	r0, #31
 8004fa8:	f002 fead 	bl	8007d06 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004fac:	2200      	movs	r2, #0
 8004fae:	2100      	movs	r1, #0
 8004fb0:	2026      	movs	r0, #38	; 0x26
 8004fb2:	f002 fe8c 	bl	8007cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004fb6:	2026      	movs	r0, #38	; 0x26
 8004fb8:	f002 fea5 	bl	8007d06 <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	2033      	movs	r0, #51	; 0x33
 8004fc2:	f002 fe84 	bl	8007cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004fc6:	2033      	movs	r0, #51	; 0x33
 8004fc8:	f002 fe9d 	bl	8007d06 <HAL_NVIC_EnableIRQ>
}
 8004fcc:	bf00      	nop
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a12      	ldr	r2, [pc, #72]	; (8005028 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen();
 8004fe2:	f7ff fa19 	bl	8004418 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a10      	ldr	r2, [pc, #64]	; (800502c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d117      	bne.n	8005020 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S)
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d90d      	bls.n	8005014 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin);
 8004ff8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ffc:	480d      	ldr	r0, [pc, #52]	; (8005034 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8004ffe:	f003 fc8c 	bl	800891a <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8005002:	2000      	movs	r0, #0
 8005004:	f7ff fa94 	bl	8004530 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8005008:	4b09      	ldr	r3, [pc, #36]	; (8005030 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800500a:	2200      	movs	r2, #0
 800500c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 800500e:	480a      	ldr	r0, [pc, #40]	; (8005038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8005010:	f007 fec8 	bl	800cda4 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8005014:	4b06      	ldr	r3, [pc, #24]	; (8005030 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800501e:	701a      	strb	r2, [r3, #0]
	}
}
 8005020:	bf00      	nop
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40014800 	.word	0x40014800
 800502c:	40014400 	.word	0x40014400
 8005030:	20000254 	.word	0x20000254
 8005034:	40020800 	.word	0x40020800
 8005038:	20000734 	.word	0x20000734

0800503c <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin)
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800504c:	d101      	bne.n	8005052 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 800504e:	f7fd f9f5 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == RTC_IRQ_Pin) // Interrupt from RTC - alarm one per minute
 8005052:	88fb      	ldrh	r3, [r7, #6]
 8005054:	2b10      	cmp	r3, #16
 8005056:	d101      	bne.n	800505c <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8005058:	f7fd fb42 	bl	80026e0 <DS3231_ClearAlarm2Flag>

	}
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 8005068:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800506c:	f7fc ff44 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <Error_Handler+0x18>)
 8005072:	f7fc fb3d 	bl	80016f0 <EF_SetFont>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005076:	b672      	cpsid	i
}
 8005078:	bf00      	nop
//	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
//	EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);

  __disable_irq();

  while (1)
 800507a:	e7fe      	b.n	800507a <Error_Handler+0x16>
 800507c:	08014024 	.word	0x08014024

08005080 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
	switch(State)
 8005084:	4b4c      	ldr	r3, [pc, #304]	; (80051b8 <MenuTFT+0x138>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b08      	cmp	r3, #8
 800508a:	f200 8092 	bhi.w	80051b2 <MenuTFT+0x132>
 800508e:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <MenuTFT+0x14>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	080050b9 	.word	0x080050b9
 8005098:	080050cb 	.word	0x080050cb
 800509c:	080050ff 	.word	0x080050ff
 80050a0:	0800512f 	.word	0x0800512f
 80050a4:	0800514d 	.word	0x0800514d
 80050a8:	08005117 	.word	0x08005117
 80050ac:	08005165 	.word	0x08005165
 80050b0:	08005183 	.word	0x08005183
 80050b4:	0800519b 	.word	0x0800519b
	{
	case MENUTFT_INIT:
		system_init();
 80050b8:	f7fd fdb0 	bl	8002c1c <system_init>
		State = MENUTFT_PARAMETERS;
 80050bc:	4b3e      	ldr	r3, [pc, #248]	; (80051b8 <MenuTFT+0x138>)
 80050be:	2201      	movs	r2, #1
 80050c0:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 80050c2:	4b3e      	ldr	r3, [pc, #248]	; (80051bc <MenuTFT+0x13c>)
 80050c4:	2201      	movs	r2, #1
 80050c6:	701a      	strb	r2, [r3, #0]
		break;
 80050c8:	e073      	b.n	80051b2 <MenuTFT+0x132>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 80050ca:	4b3c      	ldr	r3, [pc, #240]	; (80051bc <MenuTFT+0x13c>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d112      	bne.n	80050f8 <MenuTFT+0x78>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 80050d2:	4b3b      	ldr	r3, [pc, #236]	; (80051c0 <MenuTFT+0x140>)
 80050d4:	edd3 7a00 	vldr	s15, [r3]
 80050d8:	4b3a      	ldr	r3, [pc, #232]	; (80051c4 <MenuTFT+0x144>)
 80050da:	ed93 7a00 	vldr	s14, [r3]
 80050de:	eeb0 1a47 	vmov.f32	s2, s14
 80050e2:	2100      	movs	r1, #0
 80050e4:	2000      	movs	r0, #0
 80050e6:	eddf 0a38 	vldr	s1, [pc, #224]	; 80051c8 <MenuTFT+0x148>
 80050ea:	eeb0 0a67 	vmov.f32	s0, s15
 80050ee:	f7fd ff0d 	bl	8002f0c <showCurrentParameters>
			StateChangeFlag = 0;
 80050f2:	4b32      	ldr	r3, [pc, #200]	; (80051bc <MenuTFT+0x13c>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 80050f8:	f000 f86c 	bl	80051d4 <TouchParametersActivity>
		break;
 80050fc:	e059      	b.n	80051b2 <MenuTFT+0x132>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 80050fe:	4b2f      	ldr	r3, [pc, #188]	; (80051bc <MenuTFT+0x13c>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d104      	bne.n	8005110 <MenuTFT+0x90>
		{
			showControlPanel();
 8005106:	f7fe f84b 	bl	80031a0 <showControlPanel>
			StateChangeFlag = 0;
 800510a:	4b2c      	ldr	r3, [pc, #176]	; (80051bc <MenuTFT+0x13c>)
 800510c:	2200      	movs	r2, #0
 800510e:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8005110:	f000 f8c0 	bl	8005294 <TouchSwitchActivity>
		break;
 8005114:	e04d      	b.n	80051b2 <MenuTFT+0x132>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 8005116:	4b29      	ldr	r3, [pc, #164]	; (80051bc <MenuTFT+0x13c>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d104      	bne.n	8005128 <MenuTFT+0xa8>
		{
			showLightsControlPanel();
 800511e:	f7fe f919 	bl	8003354 <showLightsControlPanel>
			StateChangeFlag = 0;
 8005122:	4b26      	ldr	r3, [pc, #152]	; (80051bc <MenuTFT+0x13c>)
 8005124:	2200      	movs	r2, #0
 8005126:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 8005128:	f000 fa9c 	bl	8005664 <TouchLightsActivity>
		break;
 800512c:	e041      	b.n	80051b2 <MenuTFT+0x132>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 800512e:	4b23      	ldr	r3, [pc, #140]	; (80051bc <MenuTFT+0x13c>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d107      	bne.n	8005146 <MenuTFT+0xc6>
		{
			showClockSetPanel();
 8005136:	f7fe f9e5 	bl	8003504 <showClockSetPanel>
			ClockChangeFlag = 1;
 800513a:	4b24      	ldr	r3, [pc, #144]	; (80051cc <MenuTFT+0x14c>)
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005140:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <MenuTFT+0x13c>)
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8005146:	f000 fc63 	bl	8005a10 <TouchClockActivity>
		break;
 800514a:	e032      	b.n	80051b2 <MenuTFT+0x132>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 800514c:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <MenuTFT+0x13c>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d104      	bne.n	800515e <MenuTFT+0xde>
		{
			showPreparedActivitiesPanel();
 8005154:	f7fe fb3e 	bl	80037d4 <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 8005158:	4b18      	ldr	r3, [pc, #96]	; (80051bc <MenuTFT+0x13c>)
 800515a:	2200      	movs	r2, #0
 800515c:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 800515e:	f000 fdf9 	bl	8005d54 <TouchPredefinedActivityActivity>
		break;
 8005162:	e026      	b.n	80051b2 <MenuTFT+0x132>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8005164:	4b15      	ldr	r3, [pc, #84]	; (80051bc <MenuTFT+0x13c>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d107      	bne.n	800517c <MenuTFT+0xfc>
		{
			showWSLedPanel();
 800516c:	f7fe fc42 	bl	80039f4 <showWSLedPanel>
			WSLedChangeFlag = 1;
 8005170:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <MenuTFT+0x150>)
 8005172:	2201      	movs	r2, #1
 8005174:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005176:	4b11      	ldr	r3, [pc, #68]	; (80051bc <MenuTFT+0x13c>)
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 800517c:	f000 ff12 	bl	8005fa4 <TouchWSLedActivity>
		break;
 8005180:	e017      	b.n	80051b2 <MenuTFT+0x132>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 8005182:	4b0e      	ldr	r3, [pc, #56]	; (80051bc <MenuTFT+0x13c>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d104      	bne.n	8005194 <MenuTFT+0x114>
		{
			showShedule1Panel();
 800518a:	f7ff f839 	bl	8004200 <showShedule1Panel>
			StateChangeFlag = 0;
 800518e:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <MenuTFT+0x13c>)
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 8005194:	f001 f8b2 	bl	80062fc <Schedule1Activity>
		break;
 8005198:	e00b      	b.n	80051b2 <MenuTFT+0x132>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 800519a:	4b08      	ldr	r3, [pc, #32]	; (80051bc <MenuTFT+0x13c>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d104      	bne.n	80051ac <MenuTFT+0x12c>
		{
			showShedule2Panel();
 80051a2:	f7ff f8c1 	bl	8004328 <showShedule2Panel>
			StateChangeFlag = 0;
 80051a6:	4b05      	ldr	r3, [pc, #20]	; (80051bc <MenuTFT+0x13c>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 80051ac:	f001 f8fc 	bl	80063a8 <Schedule2Activity>
		break;
 80051b0:	bf00      	nop
	}
}
 80051b2:	bf00      	nop
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	2000025c 	.word	0x2000025c
 80051bc:	20000255 	.word	0x20000255
 80051c0:	20000260 	.word	0x20000260
 80051c4:	20000268 	.word	0x20000268
 80051c8:	00000000 	.word	0x00000000
 80051cc:	20000256 	.word	0x20000256
 80051d0:	20000257 	.word	0x20000257

080051d4 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80051da:	f7fd f857 	bl	800228c <XPT2046_IsTouched>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d04c      	beq.n	800527e <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80051e4:	f002 fc04 	bl	80079f0 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	4b27      	ldr	r3, [pc, #156]	; (8005288 <TouchParametersActivity+0xb4>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051f4:	d343      	bcc.n	800527e <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80051f6:	1d3a      	adds	r2, r7, #4
 80051f8:	1dbb      	adds	r3, r7, #6
 80051fa:	4611      	mov	r1, r2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fd f807 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	2b09      	cmp	r3, #9
 8005206:	d90f      	bls.n	8005228 <TouchParametersActivity+0x54>
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	2b6e      	cmp	r3, #110	; 0x6e
 800520c:	d80c      	bhi.n	8005228 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800520e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005210:	2bd7      	cmp	r3, #215	; 0xd7
 8005212:	d909      	bls.n	8005228 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005214:	88bb      	ldrh	r3, [r7, #4]
 8005216:	2bec      	cmp	r3, #236	; 0xec
 8005218:	d806      	bhi.n	8005228 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 800521a:	4b1c      	ldr	r3, [pc, #112]	; (800528c <TouchParametersActivity+0xb8>)
 800521c:	2205      	movs	r2, #5
 800521e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005220:	4b1b      	ldr	r3, [pc, #108]	; (8005290 <TouchParametersActivity+0xbc>)
 8005222:	2201      	movs	r2, #1
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	e025      	b.n	8005274 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	2bdb      	cmp	r3, #219	; 0xdb
 800522c:	d910      	bls.n	8005250 <TouchParametersActivity+0x7c>
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005234:	d20c      	bcs.n	8005250 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005236:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005238:	2bd7      	cmp	r3, #215	; 0xd7
 800523a:	d909      	bls.n	8005250 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800523c:	88bb      	ldrh	r3, [r7, #4]
 800523e:	2bec      	cmp	r3, #236	; 0xec
 8005240:	d806      	bhi.n	8005250 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8005242:	4b12      	ldr	r3, [pc, #72]	; (800528c <TouchParametersActivity+0xb8>)
 8005244:	2202      	movs	r2, #2
 8005246:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005248:	4b11      	ldr	r3, [pc, #68]	; (8005290 <TouchParametersActivity+0xbc>)
 800524a:	2201      	movs	r2, #1
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e011      	b.n	8005274 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	2b77      	cmp	r3, #119	; 0x77
 8005254:	d90e      	bls.n	8005274 <TouchParametersActivity+0xa0>
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	2bd2      	cmp	r3, #210	; 0xd2
 800525a:	d80b      	bhi.n	8005274 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800525c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800525e:	2bd7      	cmp	r3, #215	; 0xd7
 8005260:	d908      	bls.n	8005274 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005262:	88bb      	ldrh	r3, [r7, #4]
 8005264:	2bec      	cmp	r3, #236	; 0xec
 8005266:	d805      	bhi.n	8005274 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8005268:	4b08      	ldr	r3, [pc, #32]	; (800528c <TouchParametersActivity+0xb8>)
 800526a:	2203      	movs	r2, #3
 800526c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800526e:	4b08      	ldr	r3, [pc, #32]	; (8005290 <TouchParametersActivity+0xbc>)
 8005270:	2201      	movs	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8005274:	f002 fbbc 	bl	80079f0 <HAL_GetTick>
 8005278:	4603      	mov	r3, r0
 800527a:	4a03      	ldr	r2, [pc, #12]	; (8005288 <TouchParametersActivity+0xb4>)
 800527c:	6013      	str	r3, [r2, #0]
		}
	}
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20000258 	.word	0x20000258
 800528c:	2000025c 	.word	0x2000025c
 8005290:	20000255 	.word	0x20000255

08005294 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 800529a:	f7fc fff7 	bl	800228c <XPT2046_IsTouched>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 81ce 	beq.w	8005642 <TouchSwitchActivity+0x3ae>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80052a6:	f002 fba3 	bl	80079f0 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	4bad      	ldr	r3, [pc, #692]	; (8005564 <TouchSwitchActivity+0x2d0>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052b6:	f0c0 81c4 	bcc.w	8005642 <TouchSwitchActivity+0x3ae>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80052ba:	1d3a      	adds	r2, r7, #4
 80052bc:	1dbb      	adds	r3, r7, #6
 80052be:	4611      	mov	r1, r2
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fc ffa5 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	2b09      	cmp	r3, #9
 80052ca:	d90f      	bls.n	80052ec <TouchSwitchActivity+0x58>
 80052cc:	88fb      	ldrh	r3, [r7, #6]
 80052ce:	2b6e      	cmp	r3, #110	; 0x6e
 80052d0:	d80c      	bhi.n	80052ec <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80052d2:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80052d4:	2bd7      	cmp	r3, #215	; 0xd7
 80052d6:	d909      	bls.n	80052ec <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80052d8:	88bb      	ldrh	r3, [r7, #4]
 80052da:	2bec      	cmp	r3, #236	; 0xec
 80052dc:	d806      	bhi.n	80052ec <TouchSwitchActivity+0x58>
			{
				State = MENUTFT_PARAMETERS;
 80052de:	4ba2      	ldr	r3, [pc, #648]	; (8005568 <TouchSwitchActivity+0x2d4>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80052e4:	4ba1      	ldr	r3, [pc, #644]	; (800556c <TouchSwitchActivity+0x2d8>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	e1a5      	b.n	8005638 <TouchSwitchActivity+0x3a4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	2bdb      	cmp	r3, #219	; 0xdb
 80052f0:	d910      	bls.n	8005314 <TouchSwitchActivity+0x80>
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80052f8:	d20c      	bcs.n	8005314 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80052fa:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80052fc:	2bd7      	cmp	r3, #215	; 0xd7
 80052fe:	d909      	bls.n	8005314 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005300:	88bb      	ldrh	r3, [r7, #4]
 8005302:	2bec      	cmp	r3, #236	; 0xec
 8005304:	d806      	bhi.n	8005314 <TouchSwitchActivity+0x80>
			{
				State = MENUTFT_LIGHTS;
 8005306:	4b98      	ldr	r3, [pc, #608]	; (8005568 <TouchSwitchActivity+0x2d4>)
 8005308:	2205      	movs	r2, #5
 800530a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800530c:	4b97      	ldr	r3, [pc, #604]	; (800556c <TouchSwitchActivity+0x2d8>)
 800530e:	2201      	movs	r2, #1
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	e191      	b.n	8005638 <TouchSwitchActivity+0x3a4>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	2b77      	cmp	r3, #119	; 0x77
 8005318:	d90f      	bls.n	800533a <TouchSwitchActivity+0xa6>
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	2bd2      	cmp	r3, #210	; 0xd2
 800531e:	d80c      	bhi.n	800533a <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005320:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005322:	2bd7      	cmp	r3, #215	; 0xd7
 8005324:	d909      	bls.n	800533a <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005326:	88bb      	ldrh	r3, [r7, #4]
 8005328:	2bec      	cmp	r3, #236	; 0xec
 800532a:	d806      	bhi.n	800533a <TouchSwitchActivity+0xa6>
			{
				State = MENUTFT_ACTIVITIES;
 800532c:	4b8e      	ldr	r3, [pc, #568]	; (8005568 <TouchSwitchActivity+0x2d4>)
 800532e:	2204      	movs	r2, #4
 8005330:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005332:	4b8e      	ldr	r3, [pc, #568]	; (800556c <TouchSwitchActivity+0x2d8>)
 8005334:	2201      	movs	r2, #1
 8005336:	701a      	strb	r2, [r3, #0]
 8005338:	e17e      	b.n	8005638 <TouchSwitchActivity+0x3a4>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005340:	f0c0 817a 	bcc.w	8005638 <TouchSwitchActivity+0x3a4>
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800534a:	f080 8175 	bcs.w	8005638 <TouchSwitchActivity+0x3a4>
			{
				EF_SetFont(&arial_11ptFontInfo);
 800534e:	4888      	ldr	r0, [pc, #544]	; (8005570 <TouchSwitchActivity+0x2dc>)
 8005350:	f7fc f9ce 	bl	80016f0 <EF_SetFont>
				//
				// FIRST SWITCH
				if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8005354:	88bb      	ldrh	r3, [r7, #4]
 8005356:	2b40      	cmp	r3, #64	; 0x40
 8005358:	d954      	bls.n	8005404 <TouchSwitchActivity+0x170>
 800535a:	88bb      	ldrh	r3, [r7, #4]
 800535c:	2b56      	cmp	r3, #86	; 0x56
 800535e:	d851      	bhi.n	8005404 <TouchSwitchActivity+0x170>
				{
					if(SwitchesButtonState[0] >= 1) // if is ON
 8005360:	4b84      	ldr	r3, [pc, #528]	; (8005574 <TouchSwitchActivity+0x2e0>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d026      	beq.n	80053b6 <TouchSwitchActivity+0x122>
					{
						SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8005368:	2006      	movs	r0, #6
 800536a:	f001 fb3b 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800536e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	2305      	movs	r3, #5
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	2315      	movs	r3, #21
 800537a:	2221      	movs	r2, #33	; 0x21
 800537c:	2141      	movs	r1, #65	; 0x41
 800537e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005382:	f7fc f964 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8005386:	497c      	ldr	r1, [pc, #496]	; (8005578 <TouchSwitchActivity+0x2e4>)
 8005388:	487c      	ldr	r0, [pc, #496]	; (800557c <TouchSwitchActivity+0x2e8>)
 800538a:	f009 fef9 	bl	800f180 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800538e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	2300      	movs	r3, #0
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	2300      	movs	r3, #0
 800539a:	2243      	movs	r2, #67	; 0x43
 800539c:	f240 1111 	movw	r1, #273	; 0x111
 80053a0:	4876      	ldr	r0, [pc, #472]	; (800557c <TouchSwitchActivity+0x2e8>)
 80053a2:	f7fc fbbf 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 0;
 80053a6:	4b73      	ldr	r3, [pc, #460]	; (8005574 <TouchSwitchActivity+0x2e0>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	701a      	strb	r2, [r3, #0]
						EEPROM_RelayStateUpdate(1, 0);
 80053ac:	2100      	movs	r1, #0
 80053ae:	2001      	movs	r0, #1
 80053b0:	f7fd fae4 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[0] >= 1) // if is ON
 80053b4:	e13d      	b.n	8005632 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 80053b6:	2005      	movs	r0, #5
 80053b8:	f001 fb14 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80053bc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	2305      	movs	r3, #5
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	2315      	movs	r3, #21
 80053c8:	2221      	movs	r2, #33	; 0x21
 80053ca:	2141      	movs	r1, #65	; 0x41
 80053cc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80053d0:	f7fc f93d 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 80053d4:	496a      	ldr	r1, [pc, #424]	; (8005580 <TouchSwitchActivity+0x2ec>)
 80053d6:	4869      	ldr	r0, [pc, #420]	; (800557c <TouchSwitchActivity+0x2e8>)
 80053d8:	f009 fed2 	bl	800f180 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80053dc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	2300      	movs	r3, #0
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	2300      	movs	r3, #0
 80053e8:	2243      	movs	r2, #67	; 0x43
 80053ea:	f240 1111 	movw	r1, #273	; 0x111
 80053ee:	4863      	ldr	r0, [pc, #396]	; (800557c <TouchSwitchActivity+0x2e8>)
 80053f0:	f7fc fb98 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 1;
 80053f4:	4b5f      	ldr	r3, [pc, #380]	; (8005574 <TouchSwitchActivity+0x2e0>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
						EEPROM_RelayStateUpdate(1, 1);
 80053fa:	2101      	movs	r1, #1
 80053fc:	2001      	movs	r0, #1
 80053fe:	f7fd fabd 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[0] >= 1) // if is ON
 8005402:	e116      	b.n	8005632 <TouchSwitchActivity+0x39e>
					}

				}
				//
				// SECOND SWITCH
				else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8005404:	88bb      	ldrh	r3, [r7, #4]
 8005406:	2b5e      	cmp	r3, #94	; 0x5e
 8005408:	d954      	bls.n	80054b4 <TouchSwitchActivity+0x220>
 800540a:	88bb      	ldrh	r3, [r7, #4]
 800540c:	2b74      	cmp	r3, #116	; 0x74
 800540e:	d851      	bhi.n	80054b4 <TouchSwitchActivity+0x220>
				{
					if(SwitchesButtonState[1] >= 1) // if is ON
 8005410:	4b58      	ldr	r3, [pc, #352]	; (8005574 <TouchSwitchActivity+0x2e0>)
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d026      	beq.n	8005466 <TouchSwitchActivity+0x1d2>
					{
						SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8005418:	2008      	movs	r0, #8
 800541a:	f001 fae3 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800541e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	2305      	movs	r3, #5
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	2315      	movs	r3, #21
 800542a:	2221      	movs	r2, #33	; 0x21
 800542c:	215f      	movs	r1, #95	; 0x5f
 800542e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005432:	f7fc f90c 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8005436:	4950      	ldr	r1, [pc, #320]	; (8005578 <TouchSwitchActivity+0x2e4>)
 8005438:	4850      	ldr	r0, [pc, #320]	; (800557c <TouchSwitchActivity+0x2e8>)
 800543a:	f009 fea1 	bl	800f180 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800543e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	2300      	movs	r3, #0
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	2300      	movs	r3, #0
 800544a:	2261      	movs	r2, #97	; 0x61
 800544c:	f240 1111 	movw	r1, #273	; 0x111
 8005450:	484a      	ldr	r0, [pc, #296]	; (800557c <TouchSwitchActivity+0x2e8>)
 8005452:	f7fc fb67 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 0;
 8005456:	4b47      	ldr	r3, [pc, #284]	; (8005574 <TouchSwitchActivity+0x2e0>)
 8005458:	2200      	movs	r2, #0
 800545a:	705a      	strb	r2, [r3, #1]
						EEPROM_RelayStateUpdate(2, 0);
 800545c:	2100      	movs	r1, #0
 800545e:	2002      	movs	r0, #2
 8005460:	f7fd fa8c 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[1] >= 1) // if is ON
 8005464:	e0e5      	b.n	8005632 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8005466:	2007      	movs	r0, #7
 8005468:	f001 fabc 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800546c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	2305      	movs	r3, #5
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	2315      	movs	r3, #21
 8005478:	2221      	movs	r2, #33	; 0x21
 800547a:	215f      	movs	r1, #95	; 0x5f
 800547c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005480:	f7fc f8e5 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8005484:	493e      	ldr	r1, [pc, #248]	; (8005580 <TouchSwitchActivity+0x2ec>)
 8005486:	483d      	ldr	r0, [pc, #244]	; (800557c <TouchSwitchActivity+0x2e8>)
 8005488:	f009 fe7a 	bl	800f180 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800548c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	2300      	movs	r3, #0
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	2300      	movs	r3, #0
 8005498:	2261      	movs	r2, #97	; 0x61
 800549a:	f240 1111 	movw	r1, #273	; 0x111
 800549e:	4837      	ldr	r0, [pc, #220]	; (800557c <TouchSwitchActivity+0x2e8>)
 80054a0:	f7fc fb40 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 1;
 80054a4:	4b33      	ldr	r3, [pc, #204]	; (8005574 <TouchSwitchActivity+0x2e0>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	705a      	strb	r2, [r3, #1]
						EEPROM_RelayStateUpdate(2, 1);
 80054aa:	2101      	movs	r1, #1
 80054ac:	2002      	movs	r0, #2
 80054ae:	f7fd fa65 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[1] >= 1) // if is ON
 80054b2:	e0be      	b.n	8005632 <TouchSwitchActivity+0x39e>
					}
				}
				//
				// THIRD SWITCH
				else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 80054b4:	88bb      	ldrh	r3, [r7, #4]
 80054b6:	2b7c      	cmp	r3, #124	; 0x7c
 80054b8:	d964      	bls.n	8005584 <TouchSwitchActivity+0x2f0>
 80054ba:	88bb      	ldrh	r3, [r7, #4]
 80054bc:	2b92      	cmp	r3, #146	; 0x92
 80054be:	d861      	bhi.n	8005584 <TouchSwitchActivity+0x2f0>
				{
					if(SwitchesButtonState[2] >= 1) // if is ON
 80054c0:	4b2c      	ldr	r3, [pc, #176]	; (8005574 <TouchSwitchActivity+0x2e0>)
 80054c2:	789b      	ldrb	r3, [r3, #2]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d026      	beq.n	8005516 <TouchSwitchActivity+0x282>
					{
						SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 80054c8:	200a      	movs	r0, #10
 80054ca:	f001 fa8b 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80054ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054d2:	9301      	str	r3, [sp, #4]
 80054d4:	2305      	movs	r3, #5
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	2315      	movs	r3, #21
 80054da:	2221      	movs	r2, #33	; 0x21
 80054dc:	217d      	movs	r1, #125	; 0x7d
 80054de:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80054e2:	f7fc f8b4 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 80054e6:	4924      	ldr	r1, [pc, #144]	; (8005578 <TouchSwitchActivity+0x2e4>)
 80054e8:	4824      	ldr	r0, [pc, #144]	; (800557c <TouchSwitchActivity+0x2e8>)
 80054ea:	f009 fe49 	bl	800f180 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80054ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	2300      	movs	r3, #0
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	2300      	movs	r3, #0
 80054fa:	227f      	movs	r2, #127	; 0x7f
 80054fc:	f240 1111 	movw	r1, #273	; 0x111
 8005500:	481e      	ldr	r0, [pc, #120]	; (800557c <TouchSwitchActivity+0x2e8>)
 8005502:	f7fc fb0f 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 0;
 8005506:	4b1b      	ldr	r3, [pc, #108]	; (8005574 <TouchSwitchActivity+0x2e0>)
 8005508:	2200      	movs	r2, #0
 800550a:	709a      	strb	r2, [r3, #2]
						EEPROM_RelayStateUpdate(3, 0);
 800550c:	2100      	movs	r1, #0
 800550e:	2003      	movs	r0, #3
 8005510:	f7fd fa34 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[2] >= 1) // if is ON
 8005514:	e08d      	b.n	8005632 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8005516:	2009      	movs	r0, #9
 8005518:	f001 fa64 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800551c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	2305      	movs	r3, #5
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	2315      	movs	r3, #21
 8005528:	2221      	movs	r2, #33	; 0x21
 800552a:	217d      	movs	r1, #125	; 0x7d
 800552c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005530:	f7fc f88d 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8005534:	4912      	ldr	r1, [pc, #72]	; (8005580 <TouchSwitchActivity+0x2ec>)
 8005536:	4811      	ldr	r0, [pc, #68]	; (800557c <TouchSwitchActivity+0x2e8>)
 8005538:	f009 fe22 	bl	800f180 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800553c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	2300      	movs	r3, #0
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	2300      	movs	r3, #0
 8005548:	227f      	movs	r2, #127	; 0x7f
 800554a:	f240 1111 	movw	r1, #273	; 0x111
 800554e:	480b      	ldr	r0, [pc, #44]	; (800557c <TouchSwitchActivity+0x2e8>)
 8005550:	f7fc fae8 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 1;
 8005554:	4b07      	ldr	r3, [pc, #28]	; (8005574 <TouchSwitchActivity+0x2e0>)
 8005556:	2201      	movs	r2, #1
 8005558:	709a      	strb	r2, [r3, #2]
						EEPROM_RelayStateUpdate(3, 1);
 800555a:	2101      	movs	r1, #1
 800555c:	2003      	movs	r0, #3
 800555e:	f7fd fa0d 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[2] >= 1) // if is ON
 8005562:	e066      	b.n	8005632 <TouchSwitchActivity+0x39e>
 8005564:	20000258 	.word	0x20000258
 8005568:	2000025c 	.word	0x2000025c
 800556c:	20000255 	.word	0x20000255
 8005570:	08014024 	.word	0x08014024
 8005574:	20000274 	.word	0x20000274
 8005578:	080131cc 	.word	0x080131cc
 800557c:	200002c8 	.word	0x200002c8
 8005580:	080131d0 	.word	0x080131d0
					}
				}
				//
				// FOURTH SWITCH
				else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8005584:	88bb      	ldrh	r3, [r7, #4]
 8005586:	2b9a      	cmp	r3, #154	; 0x9a
 8005588:	d953      	bls.n	8005632 <TouchSwitchActivity+0x39e>
 800558a:	88bb      	ldrh	r3, [r7, #4]
 800558c:	2bb0      	cmp	r3, #176	; 0xb0
 800558e:	d850      	bhi.n	8005632 <TouchSwitchActivity+0x39e>
				{
					if(SwitchesButtonState[3] >= 1) // if is ON
 8005590:	4b2e      	ldr	r3, [pc, #184]	; (800564c <TouchSwitchActivity+0x3b8>)
 8005592:	78db      	ldrb	r3, [r3, #3]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d026      	beq.n	80055e6 <TouchSwitchActivity+0x352>
					{
						SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8005598:	200c      	movs	r0, #12
 800559a:	f001 fa23 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800559e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055a2:	9301      	str	r3, [sp, #4]
 80055a4:	2305      	movs	r3, #5
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	2315      	movs	r3, #21
 80055aa:	2221      	movs	r2, #33	; 0x21
 80055ac:	219b      	movs	r1, #155	; 0x9b
 80055ae:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80055b2:	f7fc f84c 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 80055b6:	4926      	ldr	r1, [pc, #152]	; (8005650 <TouchSwitchActivity+0x3bc>)
 80055b8:	4826      	ldr	r0, [pc, #152]	; (8005654 <TouchSwitchActivity+0x3c0>)
 80055ba:	f009 fde1 	bl	800f180 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80055be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	2300      	movs	r3, #0
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	2300      	movs	r3, #0
 80055ca:	229d      	movs	r2, #157	; 0x9d
 80055cc:	f240 1111 	movw	r1, #273	; 0x111
 80055d0:	4820      	ldr	r0, [pc, #128]	; (8005654 <TouchSwitchActivity+0x3c0>)
 80055d2:	f7fc faa7 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 0;
 80055d6:	4b1d      	ldr	r3, [pc, #116]	; (800564c <TouchSwitchActivity+0x3b8>)
 80055d8:	2200      	movs	r2, #0
 80055da:	70da      	strb	r2, [r3, #3]
						EEPROM_RelayStateUpdate(4, 0);
 80055dc:	2100      	movs	r1, #0
 80055de:	2004      	movs	r0, #4
 80055e0:	f7fd f9cc 	bl	800297c <EEPROM_RelayStateUpdate>
 80055e4:	e025      	b.n	8005632 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 80055e6:	200b      	movs	r0, #11
 80055e8:	f001 f9fc 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80055ec:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	2305      	movs	r3, #5
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	2315      	movs	r3, #21
 80055f8:	2221      	movs	r2, #33	; 0x21
 80055fa:	219b      	movs	r1, #155	; 0x9b
 80055fc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005600:	f7fc f825 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8005604:	4914      	ldr	r1, [pc, #80]	; (8005658 <TouchSwitchActivity+0x3c4>)
 8005606:	4813      	ldr	r0, [pc, #76]	; (8005654 <TouchSwitchActivity+0x3c0>)
 8005608:	f009 fdba 	bl	800f180 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800560c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	2300      	movs	r3, #0
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	2300      	movs	r3, #0
 8005618:	229d      	movs	r2, #157	; 0x9d
 800561a:	f240 1111 	movw	r1, #273	; 0x111
 800561e:	480d      	ldr	r0, [pc, #52]	; (8005654 <TouchSwitchActivity+0x3c0>)
 8005620:	f7fc fa80 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 1;
 8005624:	4b09      	ldr	r3, [pc, #36]	; (800564c <TouchSwitchActivity+0x3b8>)
 8005626:	2201      	movs	r2, #1
 8005628:	70da      	strb	r2, [r3, #3]
						EEPROM_RelayStateUpdate(4, 1);
 800562a:	2101      	movs	r1, #1
 800562c:	2004      	movs	r0, #4
 800562e:	f7fd f9a5 	bl	800297c <EEPROM_RelayStateUpdate>
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 8005632:	480a      	ldr	r0, [pc, #40]	; (800565c <TouchSwitchActivity+0x3c8>)
 8005634:	f7fc f85c 	bl	80016f0 <EF_SetFont>
			}
			TimerTouch = HAL_GetTick();
 8005638:	f002 f9da 	bl	80079f0 <HAL_GetTick>
 800563c:	4603      	mov	r3, r0
 800563e:	4a08      	ldr	r2, [pc, #32]	; (8005660 <TouchSwitchActivity+0x3cc>)
 8005640:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005642:	bf00      	nop
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000274 	.word	0x20000274
 8005650:	080131cc 	.word	0x080131cc
 8005654:	200002c8 	.word	0x200002c8
 8005658:	080131d0 	.word	0x080131d0
 800565c:	08015f9c 	.word	0x08015f9c
 8005660:	20000258 	.word	0x20000258

08005664 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 800566a:	f7fc fe0f 	bl	800228c <XPT2046_IsTouched>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 81bc 	beq.w	80059ee <TouchLightsActivity+0x38a>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005676:	f002 f9bb 	bl	80079f0 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	4ba6      	ldr	r3, [pc, #664]	; (8005918 <TouchLightsActivity+0x2b4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005686:	f0c0 81b2 	bcc.w	80059ee <TouchLightsActivity+0x38a>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800568a:	1d3a      	adds	r2, r7, #4
 800568c:	1dbb      	adds	r3, r7, #6
 800568e:	4611      	mov	r1, r2
 8005690:	4618      	mov	r0, r3
 8005692:	f7fc fdbd 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	2b09      	cmp	r3, #9
 800569a:	d90f      	bls.n	80056bc <TouchLightsActivity+0x58>
 800569c:	88fb      	ldrh	r3, [r7, #6]
 800569e:	2b6e      	cmp	r3, #110	; 0x6e
 80056a0:	d80c      	bhi.n	80056bc <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80056a2:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80056a4:	2bd7      	cmp	r3, #215	; 0xd7
 80056a6:	d909      	bls.n	80056bc <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80056a8:	88bb      	ldrh	r3, [r7, #4]
 80056aa:	2bec      	cmp	r3, #236	; 0xec
 80056ac:	d806      	bhi.n	80056bc <TouchLightsActivity+0x58>
			{
				State = MENUTFT_SWITCH;
 80056ae:	4b9b      	ldr	r3, [pc, #620]	; (800591c <TouchLightsActivity+0x2b8>)
 80056b0:	2202      	movs	r2, #2
 80056b2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80056b4:	4b9a      	ldr	r3, [pc, #616]	; (8005920 <TouchLightsActivity+0x2bc>)
 80056b6:	2201      	movs	r2, #1
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	e193      	b.n	80059e4 <TouchLightsActivity+0x380>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80056bc:	88fb      	ldrh	r3, [r7, #6]
 80056be:	2bdb      	cmp	r3, #219	; 0xdb
 80056c0:	d910      	bls.n	80056e4 <TouchLightsActivity+0x80>
 80056c2:	88fb      	ldrh	r3, [r7, #6]
 80056c4:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80056c8:	d20c      	bcs.n	80056e4 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80056ca:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80056cc:	2bd7      	cmp	r3, #215	; 0xd7
 80056ce:	d909      	bls.n	80056e4 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80056d0:	88bb      	ldrh	r3, [r7, #4]
 80056d2:	2bec      	cmp	r3, #236	; 0xec
 80056d4:	d806      	bhi.n	80056e4 <TouchLightsActivity+0x80>
			{
				State = MENUTFT_PARAMETERS;
 80056d6:	4b91      	ldr	r3, [pc, #580]	; (800591c <TouchLightsActivity+0x2b8>)
 80056d8:	2201      	movs	r2, #1
 80056da:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80056dc:	4b90      	ldr	r3, [pc, #576]	; (8005920 <TouchLightsActivity+0x2bc>)
 80056de:	2201      	movs	r2, #1
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	e17f      	b.n	80059e4 <TouchLightsActivity+0x380>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	2b77      	cmp	r3, #119	; 0x77
 80056e8:	d90f      	bls.n	800570a <TouchLightsActivity+0xa6>
 80056ea:	88fb      	ldrh	r3, [r7, #6]
 80056ec:	2bd2      	cmp	r3, #210	; 0xd2
 80056ee:	d80c      	bhi.n	800570a <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80056f0:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80056f2:	2bd7      	cmp	r3, #215	; 0xd7
 80056f4:	d909      	bls.n	800570a <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80056f6:	88bb      	ldrh	r3, [r7, #4]
 80056f8:	2bec      	cmp	r3, #236	; 0xec
 80056fa:	d806      	bhi.n	800570a <TouchLightsActivity+0xa6>
			{
				State = MENUTFT_WS_LED;
 80056fc:	4b87      	ldr	r3, [pc, #540]	; (800591c <TouchLightsActivity+0x2b8>)
 80056fe:	2206      	movs	r2, #6
 8005700:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005702:	4b87      	ldr	r3, [pc, #540]	; (8005920 <TouchLightsActivity+0x2bc>)
 8005704:	2201      	movs	r2, #1
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	e16c      	b.n	80059e4 <TouchLightsActivity+0x380>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	2bc7      	cmp	r3, #199	; 0xc7
 800570e:	f240 8169 	bls.w	80059e4 <TouchLightsActivity+0x380>
 8005712:	88fb      	ldrh	r3, [r7, #6]
 8005714:	2be9      	cmp	r3, #233	; 0xe9
 8005716:	f200 8165 	bhi.w	80059e4 <TouchLightsActivity+0x380>
			{
				EF_SetFont(&arial_11ptFontInfo);
 800571a:	4882      	ldr	r0, [pc, #520]	; (8005924 <TouchLightsActivity+0x2c0>)
 800571c:	f7fb ffe8 	bl	80016f0 <EF_SetFont>

				//
				// FIRST LIGHT
				if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8005720:	88bb      	ldrh	r3, [r7, #4]
 8005722:	2b40      	cmp	r3, #64	; 0x40
 8005724:	d950      	bls.n	80057c8 <TouchLightsActivity+0x164>
 8005726:	88bb      	ldrh	r3, [r7, #4]
 8005728:	2b56      	cmp	r3, #86	; 0x56
 800572a:	d84d      	bhi.n	80057c8 <TouchLightsActivity+0x164>
				{
					if(LightsButtonState[0] >= 1) // if is ON
 800572c:	4b7e      	ldr	r3, [pc, #504]	; (8005928 <TouchLightsActivity+0x2c4>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d024      	beq.n	800577e <TouchLightsActivity+0x11a>
					{
						SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8005734:	200e      	movs	r0, #14
 8005736:	f001 f955 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800573a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	2305      	movs	r3, #5
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	2315      	movs	r3, #21
 8005746:	2221      	movs	r2, #33	; 0x21
 8005748:	2141      	movs	r1, #65	; 0x41
 800574a:	20c8      	movs	r0, #200	; 0xc8
 800574c:	f7fb ff7f 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8005750:	4976      	ldr	r1, [pc, #472]	; (800592c <TouchLightsActivity+0x2c8>)
 8005752:	4877      	ldr	r0, [pc, #476]	; (8005930 <TouchLightsActivity+0x2cc>)
 8005754:	f009 fd14 	bl	800f180 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005758:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800575c:	9301      	str	r3, [sp, #4]
 800575e:	2300      	movs	r3, #0
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	2300      	movs	r3, #0
 8005764:	2243      	movs	r2, #67	; 0x43
 8005766:	21cb      	movs	r1, #203	; 0xcb
 8005768:	4871      	ldr	r0, [pc, #452]	; (8005930 <TouchLightsActivity+0x2cc>)
 800576a:	f7fc f9db 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 0;
 800576e:	4b6e      	ldr	r3, [pc, #440]	; (8005928 <TouchLightsActivity+0x2c4>)
 8005770:	2200      	movs	r2, #0
 8005772:	701a      	strb	r2, [r3, #0]
						EEPROM_LightStateUpdate(1, 0);
 8005774:	2100      	movs	r1, #0
 8005776:	2001      	movs	r0, #1
 8005778:	f7fd f939 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[0] >= 1) // if is ON
 800577c:	e12f      	b.n	80059de <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 800577e:	200d      	movs	r0, #13
 8005780:	f001 f930 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005784:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	2305      	movs	r3, #5
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	2315      	movs	r3, #21
 8005790:	2221      	movs	r2, #33	; 0x21
 8005792:	2141      	movs	r1, #65	; 0x41
 8005794:	20c8      	movs	r0, #200	; 0xc8
 8005796:	f7fb ff5a 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 800579a:	4966      	ldr	r1, [pc, #408]	; (8005934 <TouchLightsActivity+0x2d0>)
 800579c:	4864      	ldr	r0, [pc, #400]	; (8005930 <TouchLightsActivity+0x2cc>)
 800579e:	f009 fcef 	bl	800f180 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80057a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80057a6:	9301      	str	r3, [sp, #4]
 80057a8:	2300      	movs	r3, #0
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	2300      	movs	r3, #0
 80057ae:	2243      	movs	r2, #67	; 0x43
 80057b0:	21cb      	movs	r1, #203	; 0xcb
 80057b2:	485f      	ldr	r0, [pc, #380]	; (8005930 <TouchLightsActivity+0x2cc>)
 80057b4:	f7fc f9b6 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 1;
 80057b8:	4b5b      	ldr	r3, [pc, #364]	; (8005928 <TouchLightsActivity+0x2c4>)
 80057ba:	2201      	movs	r2, #1
 80057bc:	701a      	strb	r2, [r3, #0]
						EEPROM_LightStateUpdate(1, 1);
 80057be:	2101      	movs	r1, #1
 80057c0:	2001      	movs	r0, #1
 80057c2:	f7fd f914 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[0] >= 1) // if is ON
 80057c6:	e10a      	b.n	80059de <TouchLightsActivity+0x37a>
					}
				}
				//
				// SECOND LIGHT
				else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 80057c8:	88bb      	ldrh	r3, [r7, #4]
 80057ca:	2b5e      	cmp	r3, #94	; 0x5e
 80057cc:	d950      	bls.n	8005870 <TouchLightsActivity+0x20c>
 80057ce:	88bb      	ldrh	r3, [r7, #4]
 80057d0:	2b74      	cmp	r3, #116	; 0x74
 80057d2:	d84d      	bhi.n	8005870 <TouchLightsActivity+0x20c>
				{
					if(LightsButtonState[1] >= 1) // if is ON
 80057d4:	4b54      	ldr	r3, [pc, #336]	; (8005928 <TouchLightsActivity+0x2c4>)
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d024      	beq.n	8005826 <TouchLightsActivity+0x1c2>
					{
						SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 80057dc:	2010      	movs	r0, #16
 80057de:	f001 f901 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80057e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	2305      	movs	r3, #5
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	2315      	movs	r3, #21
 80057ee:	2221      	movs	r2, #33	; 0x21
 80057f0:	215f      	movs	r1, #95	; 0x5f
 80057f2:	20c8      	movs	r0, #200	; 0xc8
 80057f4:	f7fb ff2b 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 80057f8:	494c      	ldr	r1, [pc, #304]	; (800592c <TouchLightsActivity+0x2c8>)
 80057fa:	484d      	ldr	r0, [pc, #308]	; (8005930 <TouchLightsActivity+0x2cc>)
 80057fc:	f009 fcc0 	bl	800f180 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005800:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	2300      	movs	r3, #0
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	2300      	movs	r3, #0
 800580c:	2261      	movs	r2, #97	; 0x61
 800580e:	21cb      	movs	r1, #203	; 0xcb
 8005810:	4847      	ldr	r0, [pc, #284]	; (8005930 <TouchLightsActivity+0x2cc>)
 8005812:	f7fc f987 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 0;
 8005816:	4b44      	ldr	r3, [pc, #272]	; (8005928 <TouchLightsActivity+0x2c4>)
 8005818:	2200      	movs	r2, #0
 800581a:	705a      	strb	r2, [r3, #1]
						EEPROM_LightStateUpdate(2, 0);
 800581c:	2100      	movs	r1, #0
 800581e:	2002      	movs	r0, #2
 8005820:	f7fd f8e5 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[1] >= 1) // if is ON
 8005824:	e0db      	b.n	80059de <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8005826:	200f      	movs	r0, #15
 8005828:	f001 f8dc 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800582c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	2305      	movs	r3, #5
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	2315      	movs	r3, #21
 8005838:	2221      	movs	r2, #33	; 0x21
 800583a:	215f      	movs	r1, #95	; 0x5f
 800583c:	20c8      	movs	r0, #200	; 0xc8
 800583e:	f7fb ff06 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8005842:	493c      	ldr	r1, [pc, #240]	; (8005934 <TouchLightsActivity+0x2d0>)
 8005844:	483a      	ldr	r0, [pc, #232]	; (8005930 <TouchLightsActivity+0x2cc>)
 8005846:	f009 fc9b 	bl	800f180 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800584a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800584e:	9301      	str	r3, [sp, #4]
 8005850:	2300      	movs	r3, #0
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	2300      	movs	r3, #0
 8005856:	2261      	movs	r2, #97	; 0x61
 8005858:	21cb      	movs	r1, #203	; 0xcb
 800585a:	4835      	ldr	r0, [pc, #212]	; (8005930 <TouchLightsActivity+0x2cc>)
 800585c:	f7fc f962 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 1;
 8005860:	4b31      	ldr	r3, [pc, #196]	; (8005928 <TouchLightsActivity+0x2c4>)
 8005862:	2201      	movs	r2, #1
 8005864:	705a      	strb	r2, [r3, #1]
						EEPROM_LightStateUpdate(2, 1);
 8005866:	2101      	movs	r1, #1
 8005868:	2002      	movs	r0, #2
 800586a:	f7fd f8c0 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[1] >= 1) // if is ON
 800586e:	e0b6      	b.n	80059de <TouchLightsActivity+0x37a>
					}
				}

				//
				// THIRD LIGHT
				else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8005870:	88bb      	ldrh	r3, [r7, #4]
 8005872:	2b7c      	cmp	r3, #124	; 0x7c
 8005874:	d960      	bls.n	8005938 <TouchLightsActivity+0x2d4>
 8005876:	88bb      	ldrh	r3, [r7, #4]
 8005878:	2b92      	cmp	r3, #146	; 0x92
 800587a:	d85d      	bhi.n	8005938 <TouchLightsActivity+0x2d4>
				{
					if(LightsButtonState[2] >= 1) // if is ON
 800587c:	4b2a      	ldr	r3, [pc, #168]	; (8005928 <TouchLightsActivity+0x2c4>)
 800587e:	789b      	ldrb	r3, [r3, #2]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d024      	beq.n	80058ce <TouchLightsActivity+0x26a>
					{
						SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8005884:	2012      	movs	r0, #18
 8005886:	f001 f8ad 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800588a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	2305      	movs	r3, #5
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	2315      	movs	r3, #21
 8005896:	2221      	movs	r2, #33	; 0x21
 8005898:	217d      	movs	r1, #125	; 0x7d
 800589a:	20c8      	movs	r0, #200	; 0xc8
 800589c:	f7fb fed7 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 80058a0:	4922      	ldr	r1, [pc, #136]	; (800592c <TouchLightsActivity+0x2c8>)
 80058a2:	4823      	ldr	r0, [pc, #140]	; (8005930 <TouchLightsActivity+0x2cc>)
 80058a4:	f009 fc6c 	bl	800f180 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80058a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	2300      	movs	r3, #0
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	2300      	movs	r3, #0
 80058b4:	227f      	movs	r2, #127	; 0x7f
 80058b6:	21cb      	movs	r1, #203	; 0xcb
 80058b8:	481d      	ldr	r0, [pc, #116]	; (8005930 <TouchLightsActivity+0x2cc>)
 80058ba:	f7fc f933 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 0;
 80058be:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <TouchLightsActivity+0x2c4>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	709a      	strb	r2, [r3, #2]
						EEPROM_LightStateUpdate(3, 0);
 80058c4:	2100      	movs	r1, #0
 80058c6:	2003      	movs	r0, #3
 80058c8:	f7fd f891 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[2] >= 1) // if is ON
 80058cc:	e087      	b.n	80059de <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 80058ce:	2011      	movs	r0, #17
 80058d0:	f001 f888 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80058d4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	2305      	movs	r3, #5
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	2315      	movs	r3, #21
 80058e0:	2221      	movs	r2, #33	; 0x21
 80058e2:	217d      	movs	r1, #125	; 0x7d
 80058e4:	20c8      	movs	r0, #200	; 0xc8
 80058e6:	f7fb feb2 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 80058ea:	4912      	ldr	r1, [pc, #72]	; (8005934 <TouchLightsActivity+0x2d0>)
 80058ec:	4810      	ldr	r0, [pc, #64]	; (8005930 <TouchLightsActivity+0x2cc>)
 80058ee:	f009 fc47 	bl	800f180 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80058f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	2300      	movs	r3, #0
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	2300      	movs	r3, #0
 80058fe:	227f      	movs	r2, #127	; 0x7f
 8005900:	21cb      	movs	r1, #203	; 0xcb
 8005902:	480b      	ldr	r0, [pc, #44]	; (8005930 <TouchLightsActivity+0x2cc>)
 8005904:	f7fc f90e 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 1;
 8005908:	4b07      	ldr	r3, [pc, #28]	; (8005928 <TouchLightsActivity+0x2c4>)
 800590a:	2201      	movs	r2, #1
 800590c:	709a      	strb	r2, [r3, #2]
						EEPROM_LightStateUpdate(3, 1);
 800590e:	2101      	movs	r1, #1
 8005910:	2003      	movs	r0, #3
 8005912:	f7fd f86c 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[2] >= 1) // if is ON
 8005916:	e062      	b.n	80059de <TouchLightsActivity+0x37a>
 8005918:	20000258 	.word	0x20000258
 800591c:	2000025c 	.word	0x2000025c
 8005920:	20000255 	.word	0x20000255
 8005924:	08014024 	.word	0x08014024
 8005928:	20000278 	.word	0x20000278
 800592c:	080131cc 	.word	0x080131cc
 8005930:	200002c8 	.word	0x200002c8
 8005934:	080131d0 	.word	0x080131d0
					}
				}

				//
				// FOURTH LIGHT
				else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 8005938:	88bb      	ldrh	r3, [r7, #4]
 800593a:	2b9a      	cmp	r3, #154	; 0x9a
 800593c:	d94f      	bls.n	80059de <TouchLightsActivity+0x37a>
 800593e:	88bb      	ldrh	r3, [r7, #4]
 8005940:	2bb0      	cmp	r3, #176	; 0xb0
 8005942:	d84c      	bhi.n	80059de <TouchLightsActivity+0x37a>
				{
					if(LightsButtonState[3] >= 1) // if is ON
 8005944:	4b2c      	ldr	r3, [pc, #176]	; (80059f8 <TouchLightsActivity+0x394>)
 8005946:	78db      	ldrb	r3, [r3, #3]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d024      	beq.n	8005996 <TouchLightsActivity+0x332>
					{
						SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 800594c:	2014      	movs	r0, #20
 800594e:	f001 f849 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005952:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	2305      	movs	r3, #5
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	2315      	movs	r3, #21
 800595e:	2221      	movs	r2, #33	; 0x21
 8005960:	219b      	movs	r1, #155	; 0x9b
 8005962:	20c8      	movs	r0, #200	; 0xc8
 8005964:	f7fb fe73 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8005968:	4924      	ldr	r1, [pc, #144]	; (80059fc <TouchLightsActivity+0x398>)
 800596a:	4825      	ldr	r0, [pc, #148]	; (8005a00 <TouchLightsActivity+0x39c>)
 800596c:	f009 fc08 	bl	800f180 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005970:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005974:	9301      	str	r3, [sp, #4]
 8005976:	2300      	movs	r3, #0
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	2300      	movs	r3, #0
 800597c:	229d      	movs	r2, #157	; 0x9d
 800597e:	21cb      	movs	r1, #203	; 0xcb
 8005980:	481f      	ldr	r0, [pc, #124]	; (8005a00 <TouchLightsActivity+0x39c>)
 8005982:	f7fc f8cf 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 0;
 8005986:	4b1c      	ldr	r3, [pc, #112]	; (80059f8 <TouchLightsActivity+0x394>)
 8005988:	2200      	movs	r2, #0
 800598a:	70da      	strb	r2, [r3, #3]
						EEPROM_LightStateUpdate(4, 0);
 800598c:	2100      	movs	r1, #0
 800598e:	2004      	movs	r0, #4
 8005990:	f7fd f82d 	bl	80029ee <EEPROM_LightStateUpdate>
 8005994:	e023      	b.n	80059de <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8005996:	2013      	movs	r0, #19
 8005998:	f001 f824 	bl	80069e4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800599c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80059a0:	9301      	str	r3, [sp, #4]
 80059a2:	2305      	movs	r3, #5
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	2315      	movs	r3, #21
 80059a8:	2221      	movs	r2, #33	; 0x21
 80059aa:	219b      	movs	r1, #155	; 0x9b
 80059ac:	20c8      	movs	r0, #200	; 0xc8
 80059ae:	f7fb fe4e 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 80059b2:	4914      	ldr	r1, [pc, #80]	; (8005a04 <TouchLightsActivity+0x3a0>)
 80059b4:	4812      	ldr	r0, [pc, #72]	; (8005a00 <TouchLightsActivity+0x39c>)
 80059b6:	f009 fbe3 	bl	800f180 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80059ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80059be:	9301      	str	r3, [sp, #4]
 80059c0:	2300      	movs	r3, #0
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	2300      	movs	r3, #0
 80059c6:	229d      	movs	r2, #157	; 0x9d
 80059c8:	21cb      	movs	r1, #203	; 0xcb
 80059ca:	480d      	ldr	r0, [pc, #52]	; (8005a00 <TouchLightsActivity+0x39c>)
 80059cc:	f7fc f8aa 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 1;
 80059d0:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <TouchLightsActivity+0x394>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	70da      	strb	r2, [r3, #3]
						EEPROM_LightStateUpdate(4, 1);
 80059d6:	2101      	movs	r1, #1
 80059d8:	2004      	movs	r0, #4
 80059da:	f7fd f808 	bl	80029ee <EEPROM_LightStateUpdate>
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 80059de:	480a      	ldr	r0, [pc, #40]	; (8005a08 <TouchLightsActivity+0x3a4>)
 80059e0:	f7fb fe86 	bl	80016f0 <EF_SetFont>
			}

			TimerTouch = HAL_GetTick();
 80059e4:	f002 f804 	bl	80079f0 <HAL_GetTick>
 80059e8:	4603      	mov	r3, r0
 80059ea:	4a08      	ldr	r2, [pc, #32]	; (8005a0c <TouchLightsActivity+0x3a8>)
 80059ec:	6013      	str	r3, [r2, #0]
		}
	}
}
 80059ee:	bf00      	nop
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000278 	.word	0x20000278
 80059fc:	080131cc 	.word	0x080131cc
 8005a00:	200002c8 	.word	0x200002c8
 8005a04:	080131d0 	.word	0x080131d0
 8005a08:	08015f9c 	.word	0x08015f9c
 8005a0c:	20000258 	.word	0x20000258

08005a10 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 8005a16:	f7fc fc39 	bl	800228c <XPT2046_IsTouched>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8188 	beq.w	8005d32 <TouchClockActivity+0x322>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8005a22:	48a0      	ldr	r0, [pc, #640]	; (8005ca4 <TouchClockActivity+0x294>)
 8005a24:	f7fb fe64 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005a28:	f001 ffe2 	bl	80079f0 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	4b9e      	ldr	r3, [pc, #632]	; (8005ca8 <TouchClockActivity+0x298>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a38:	f0c0 817b 	bcc.w	8005d32 <TouchClockActivity+0x322>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005a3c:	1d3a      	adds	r2, r7, #4
 8005a3e:	1dbb      	adds	r3, r7, #6
 8005a40:	4611      	mov	r1, r2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fc fbe4 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8005a48:	4b98      	ldr	r3, [pc, #608]	; (8005cac <TouchClockActivity+0x29c>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d114      	bne.n	8005a7a <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 8005a50:	f7fc fea0 	bl	8002794 <DS3231_GetHour>
 8005a54:	4603      	mov	r3, r0
 8005a56:	461a      	mov	r2, r3
 8005a58:	4b95      	ldr	r3, [pc, #596]	; (8005cb0 <TouchClockActivity+0x2a0>)
 8005a5a:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8005a5c:	f7fc fea6 	bl	80027ac <DS3231_GetMinute>
 8005a60:	4603      	mov	r3, r0
 8005a62:	461a      	mov	r2, r3
 8005a64:	4b93      	ldr	r3, [pc, #588]	; (8005cb4 <TouchClockActivity+0x2a4>)
 8005a66:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 8005a68:	f7fc fe88 	bl	800277c <DS3231_GetDayOfWeek>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	461a      	mov	r2, r3
 8005a70:	4b91      	ldr	r3, [pc, #580]	; (8005cb8 <TouchClockActivity+0x2a8>)
 8005a72:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8005a74:	4b8d      	ldr	r3, [pc, #564]	; (8005cac <TouchClockActivity+0x29c>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	2b09      	cmp	r3, #9
 8005a7e:	d90f      	bls.n	8005aa0 <TouchClockActivity+0x90>
 8005a80:	88fb      	ldrh	r3, [r7, #6]
 8005a82:	2b6e      	cmp	r3, #110	; 0x6e
 8005a84:	d80c      	bhi.n	8005aa0 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005a86:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005a88:	2bd7      	cmp	r3, #215	; 0xd7
 8005a8a:	d909      	bls.n	8005aa0 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005a8c:	88bb      	ldrh	r3, [r7, #4]
 8005a8e:	2bec      	cmp	r3, #236	; 0xec
 8005a90:	d806      	bhi.n	8005aa0 <TouchClockActivity+0x90>
				{
					State = MENUTFT_PARAMETERS;
 8005a92:	4b8a      	ldr	r3, [pc, #552]	; (8005cbc <TouchClockActivity+0x2ac>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8005a98:	4b89      	ldr	r3, [pc, #548]	; (8005cc0 <TouchClockActivity+0x2b0>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	e143      	b.n	8005d28 <TouchClockActivity+0x318>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	2bdb      	cmp	r3, #219	; 0xdb
 8005aa4:	d92c      	bls.n	8005b00 <TouchClockActivity+0xf0>
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005aac:	d228      	bcs.n	8005b00 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005aae:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005ab0:	2bd7      	cmp	r3, #215	; 0xd7
 8005ab2:	d925      	bls.n	8005b00 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005ab4:	88bb      	ldrh	r3, [r7, #4]
 8005ab6:	2bec      	cmp	r3, #236	; 0xec
 8005ab8:	d822      	bhi.n	8005b00 <TouchClockActivity+0xf0>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 8005aba:	4b7f      	ldr	r3, [pc, #508]	; (8005cb8 <TouchClockActivity+0x2a8>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fc fe80 	bl	80027c4 <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 8005ac4:	4b7a      	ldr	r3, [pc, #488]	; (8005cb0 <TouchClockActivity+0x2a0>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fc fe8d 	bl	80027e8 <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8005ace:	4b79      	ldr	r3, [pc, #484]	; (8005cb4 <TouchClockActivity+0x2a4>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fc fe9d 	bl	8002812 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 8005ad8:	2032      	movs	r0, #50	; 0x32
 8005ada:	f7fc feac 	bl	8002836 <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 8005ade:	4979      	ldr	r1, [pc, #484]	; (8005cc4 <TouchClockActivity+0x2b4>)
 8005ae0:	4879      	ldr	r0, [pc, #484]	; (8005cc8 <TouchClockActivity+0x2b8>)
 8005ae2:	f009 fb4d 	bl	800f180 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 8005ae6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	2301      	movs	r3, #1
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005af4:	220a      	movs	r2, #10
 8005af6:	212f      	movs	r1, #47	; 0x2f
 8005af8:	4873      	ldr	r0, [pc, #460]	; (8005cc8 <TouchClockActivity+0x2b8>)
 8005afa:	f7fc f813 	bl	8001b24 <EF_PutString>
 8005afe:	e113      	b.n	8005d28 <TouchClockActivity+0x318>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8005b00:	88fb      	ldrh	r3, [r7, #6]
 8005b02:	2b6d      	cmp	r3, #109	; 0x6d
 8005b04:	d90f      	bls.n	8005b26 <TouchClockActivity+0x116>
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	2bdc      	cmp	r3, #220	; 0xdc
 8005b0a:	d80c      	bhi.n	8005b26 <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8005b0c:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8005b0e:	2bbd      	cmp	r3, #189	; 0xbd
 8005b10:	d909      	bls.n	8005b26 <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8005b12:	88bb      	ldrh	r3, [r7, #4]
 8005b14:	2bd4      	cmp	r3, #212	; 0xd4
 8005b16:	d806      	bhi.n	8005b26 <TouchClockActivity+0x116>
				{
					State = MENUTFT_SCHEDULE_1;
 8005b18:	4b68      	ldr	r3, [pc, #416]	; (8005cbc <TouchClockActivity+0x2ac>)
 8005b1a:	2207      	movs	r2, #7
 8005b1c:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8005b1e:	4b68      	ldr	r3, [pc, #416]	; (8005cc0 <TouchClockActivity+0x2b0>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	701a      	strb	r2, [r3, #0]
 8005b24:	e100      	b.n	8005d28 <TouchClockActivity+0x318>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	2bef      	cmp	r3, #239	; 0xef
 8005b2a:	d97b      	bls.n	8005c24 <TouchClockActivity+0x214>
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005b32:	d877      	bhi.n	8005c24 <TouchClockActivity+0x214>
				{

					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8005b34:	88bb      	ldrh	r3, [r7, #4]
 8005b36:	2b4a      	cmp	r3, #74	; 0x4a
 8005b38:	d923      	bls.n	8005b82 <TouchClockActivity+0x172>
 8005b3a:	88bb      	ldrh	r3, [r7, #4]
 8005b3c:	2b60      	cmp	r3, #96	; 0x60
 8005b3e:	d820      	bhi.n	8005b82 <TouchClockActivity+0x172>
					{
						if(Hours < 24)
 8005b40:	4b5b      	ldr	r3, [pc, #364]	; (8005cb0 <TouchClockActivity+0x2a0>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b17      	cmp	r3, #23
 8005b46:	d806      	bhi.n	8005b56 <TouchClockActivity+0x146>
						{
							Hours++;
 8005b48:	4b59      	ldr	r3, [pc, #356]	; (8005cb0 <TouchClockActivity+0x2a0>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	4b57      	ldr	r3, [pc, #348]	; (8005cb0 <TouchClockActivity+0x2a0>)
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	e002      	b.n	8005b5c <TouchClockActivity+0x14c>
						}
						else
						{
							Hours = 1;
 8005b56:	4b56      	ldr	r3, [pc, #344]	; (8005cb0 <TouchClockActivity+0x2a0>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 8005b5c:	4b54      	ldr	r3, [pc, #336]	; (8005cb0 <TouchClockActivity+0x2a0>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	495a      	ldr	r1, [pc, #360]	; (8005ccc <TouchClockActivity+0x2bc>)
 8005b64:	4858      	ldr	r0, [pc, #352]	; (8005cc8 <TouchClockActivity+0x2b8>)
 8005b66:	f009 fb0b 	bl	800f180 <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005b6a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005b6e:	9301      	str	r3, [sp, #4]
 8005b70:	2301      	movs	r3, #1
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	2300      	movs	r3, #0
 8005b76:	2246      	movs	r2, #70	; 0x46
 8005b78:	21a0      	movs	r1, #160	; 0xa0
 8005b7a:	4853      	ldr	r0, [pc, #332]	; (8005cc8 <TouchClockActivity+0x2b8>)
 8005b7c:	f7fb ffd2 	bl	8001b24 <EF_PutString>
 8005b80:	e04f      	b.n	8005c22 <TouchClockActivity+0x212>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 8005b82:	88bb      	ldrh	r3, [r7, #4]
 8005b84:	2b72      	cmp	r3, #114	; 0x72
 8005b86:	d923      	bls.n	8005bd0 <TouchClockActivity+0x1c0>
 8005b88:	88bb      	ldrh	r3, [r7, #4]
 8005b8a:	2b88      	cmp	r3, #136	; 0x88
 8005b8c:	d820      	bhi.n	8005bd0 <TouchClockActivity+0x1c0>
					{
						if(Minutes < 59)
 8005b8e:	4b49      	ldr	r3, [pc, #292]	; (8005cb4 <TouchClockActivity+0x2a4>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b3a      	cmp	r3, #58	; 0x3a
 8005b94:	d806      	bhi.n	8005ba4 <TouchClockActivity+0x194>
						{
							Minutes++;
 8005b96:	4b47      	ldr	r3, [pc, #284]	; (8005cb4 <TouchClockActivity+0x2a4>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	4b45      	ldr	r3, [pc, #276]	; (8005cb4 <TouchClockActivity+0x2a4>)
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	e002      	b.n	8005baa <TouchClockActivity+0x19a>
						}
						else
						{
							Minutes = 0;
 8005ba4:	4b43      	ldr	r3, [pc, #268]	; (8005cb4 <TouchClockActivity+0x2a4>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 8005baa:	4b42      	ldr	r3, [pc, #264]	; (8005cb4 <TouchClockActivity+0x2a4>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	4946      	ldr	r1, [pc, #280]	; (8005ccc <TouchClockActivity+0x2bc>)
 8005bb2:	4845      	ldr	r0, [pc, #276]	; (8005cc8 <TouchClockActivity+0x2b8>)
 8005bb4:	f009 fae4 	bl	800f180 <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005bb8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005bbc:	9301      	str	r3, [sp, #4]
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	226e      	movs	r2, #110	; 0x6e
 8005bc6:	21a0      	movs	r1, #160	; 0xa0
 8005bc8:	483f      	ldr	r0, [pc, #252]	; (8005cc8 <TouchClockActivity+0x2b8>)
 8005bca:	f7fb ffab 	bl	8001b24 <EF_PutString>
 8005bce:	e028      	b.n	8005c22 <TouchClockActivity+0x212>
					}
					else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 8005bd0:	88bb      	ldrh	r3, [r7, #4]
 8005bd2:	2b9a      	cmp	r3, #154	; 0x9a
 8005bd4:	f240 80a7 	bls.w	8005d26 <TouchClockActivity+0x316>
 8005bd8:	88bb      	ldrh	r3, [r7, #4]
 8005bda:	2bb0      	cmp	r3, #176	; 0xb0
 8005bdc:	f200 80a3 	bhi.w	8005d26 <TouchClockActivity+0x316>
					{
						if(DayOfWeek < 7)
 8005be0:	4b35      	ldr	r3, [pc, #212]	; (8005cb8 <TouchClockActivity+0x2a8>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b06      	cmp	r3, #6
 8005be6:	d806      	bhi.n	8005bf6 <TouchClockActivity+0x1e6>
						{
							DayOfWeek++;
 8005be8:	4b33      	ldr	r3, [pc, #204]	; (8005cb8 <TouchClockActivity+0x2a8>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	3301      	adds	r3, #1
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	4b31      	ldr	r3, [pc, #196]	; (8005cb8 <TouchClockActivity+0x2a8>)
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	e002      	b.n	8005bfc <TouchClockActivity+0x1ec>
						}
						else
						{
							DayOfWeek = 1;
 8005bf6:	4b30      	ldr	r3, [pc, #192]	; (8005cb8 <TouchClockActivity+0x2a8>)
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 8005bfc:	4b2e      	ldr	r3, [pc, #184]	; (8005cb8 <TouchClockActivity+0x2a8>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	4933      	ldr	r1, [pc, #204]	; (8005cd0 <TouchClockActivity+0x2c0>)
 8005c04:	4830      	ldr	r0, [pc, #192]	; (8005cc8 <TouchClockActivity+0x2b8>)
 8005c06:	f009 fabb 	bl	800f180 <siprintf>
						EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005c0a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	2301      	movs	r3, #1
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	2300      	movs	r3, #0
 8005c16:	2296      	movs	r2, #150	; 0x96
 8005c18:	2114      	movs	r1, #20
 8005c1a:	482b      	ldr	r0, [pc, #172]	; (8005cc8 <TouchClockActivity+0x2b8>)
 8005c1c:	f7fb ff82 	bl	8001b24 <EF_PutString>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8005c20:	e081      	b.n	8005d26 <TouchClockActivity+0x316>
 8005c22:	e080      	b.n	8005d26 <TouchClockActivity+0x316>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8005c2a:	d37d      	bcc.n	8005d28 <TouchClockActivity+0x318>
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8005c32:	d879      	bhi.n	8005d28 <TouchClockActivity+0x318>
				{
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8005c34:	88bb      	ldrh	r3, [r7, #4]
 8005c36:	2b4a      	cmp	r3, #74	; 0x4a
 8005c38:	d923      	bls.n	8005c82 <TouchClockActivity+0x272>
 8005c3a:	88bb      	ldrh	r3, [r7, #4]
 8005c3c:	2b60      	cmp	r3, #96	; 0x60
 8005c3e:	d820      	bhi.n	8005c82 <TouchClockActivity+0x272>
					{

						if(Hours < 19)
 8005c40:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <TouchClockActivity+0x2a0>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b12      	cmp	r3, #18
 8005c46:	d806      	bhi.n	8005c56 <TouchClockActivity+0x246>
						{
							Hours = Hours + 6;
 8005c48:	4b19      	ldr	r3, [pc, #100]	; (8005cb0 <TouchClockActivity+0x2a0>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	3306      	adds	r3, #6
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <TouchClockActivity+0x2a0>)
 8005c52:	701a      	strb	r2, [r3, #0]
 8005c54:	e002      	b.n	8005c5c <TouchClockActivity+0x24c>
						}
						else
						{
							Hours = 1;
 8005c56:	4b16      	ldr	r3, [pc, #88]	; (8005cb0 <TouchClockActivity+0x2a0>)
 8005c58:	2201      	movs	r2, #1
 8005c5a:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 8005c5c:	4b14      	ldr	r3, [pc, #80]	; (8005cb0 <TouchClockActivity+0x2a0>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	461a      	mov	r2, r3
 8005c62:	491a      	ldr	r1, [pc, #104]	; (8005ccc <TouchClockActivity+0x2bc>)
 8005c64:	4818      	ldr	r0, [pc, #96]	; (8005cc8 <TouchClockActivity+0x2b8>)
 8005c66:	f009 fa8b 	bl	800f180 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005c6a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005c6e:	9301      	str	r3, [sp, #4]
 8005c70:	2301      	movs	r3, #1
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	2300      	movs	r3, #0
 8005c76:	2246      	movs	r2, #70	; 0x46
 8005c78:	219d      	movs	r1, #157	; 0x9d
 8005c7a:	4813      	ldr	r0, [pc, #76]	; (8005cc8 <TouchClockActivity+0x2b8>)
 8005c7c:	f7fb ff52 	bl	8001b24 <EF_PutString>
 8005c80:	e04d      	b.n	8005d1e <TouchClockActivity+0x30e>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8005c82:	88bb      	ldrh	r3, [r7, #4]
 8005c84:	2b72      	cmp	r3, #114	; 0x72
 8005c86:	d94a      	bls.n	8005d1e <TouchClockActivity+0x30e>
 8005c88:	88bb      	ldrh	r3, [r7, #4]
 8005c8a:	2b88      	cmp	r3, #136	; 0x88
 8005c8c:	d847      	bhi.n	8005d1e <TouchClockActivity+0x30e>
					{
						if(Minutes < 49)
 8005c8e:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <TouchClockActivity+0x2a4>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b30      	cmp	r3, #48	; 0x30
 8005c94:	d81e      	bhi.n	8005cd4 <TouchClockActivity+0x2c4>
						{
							Minutes = Minutes +10;
 8005c96:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <TouchClockActivity+0x2a4>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	330a      	adds	r3, #10
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <TouchClockActivity+0x2a4>)
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	e02a      	b.n	8005cfa <TouchClockActivity+0x2ea>
 8005ca4:	08015f9c 	.word	0x08015f9c
 8005ca8:	20000258 	.word	0x20000258
 8005cac:	20000256 	.word	0x20000256
 8005cb0:	20000031 	.word	0x20000031
 8005cb4:	20000032 	.word	0x20000032
 8005cb8:	20000030 	.word	0x20000030
 8005cbc:	2000025c 	.word	0x2000025c
 8005cc0:	20000255 	.word	0x20000255
 8005cc4:	080131d4 	.word	0x080131d4
 8005cc8:	200002c8 	.word	0x200002c8
 8005ccc:	080131e4 	.word	0x080131e4
 8005cd0:	080131ec 	.word	0x080131ec
						}
						else
						{
							Minutes = (Minutes + 10) % 60;
 8005cd4:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <TouchClockActivity+0x32c>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	f103 020a 	add.w	r2, r3, #10
 8005cdc:	4b18      	ldr	r3, [pc, #96]	; (8005d40 <TouchClockActivity+0x330>)
 8005cde:	fb83 1302 	smull	r1, r3, r3, r2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	1159      	asrs	r1, r3, #5
 8005ce6:	17d3      	asrs	r3, r2, #31
 8005ce8:	1ac9      	subs	r1, r1, r3
 8005cea:	460b      	mov	r3, r1
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	1a5b      	subs	r3, r3, r1
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	1ad1      	subs	r1, r2, r3
 8005cf4:	b2ca      	uxtb	r2, r1
 8005cf6:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <TouchClockActivity+0x32c>)
 8005cf8:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 8005cfa:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <TouchClockActivity+0x32c>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	4910      	ldr	r1, [pc, #64]	; (8005d44 <TouchClockActivity+0x334>)
 8005d02:	4811      	ldr	r0, [pc, #68]	; (8005d48 <TouchClockActivity+0x338>)
 8005d04:	f009 fa3c 	bl	800f180 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005d08:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	2301      	movs	r3, #1
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	2300      	movs	r3, #0
 8005d14:	226e      	movs	r2, #110	; 0x6e
 8005d16:	219c      	movs	r1, #156	; 0x9c
 8005d18:	480b      	ldr	r0, [pc, #44]	; (8005d48 <TouchClockActivity+0x338>)
 8005d1a:	f7fb ff03 	bl	8001b24 <EF_PutString>

					}
					EF_SetFont(&arialBlack_20ptFontInfo);
 8005d1e:	480b      	ldr	r0, [pc, #44]	; (8005d4c <TouchClockActivity+0x33c>)
 8005d20:	f7fb fce6 	bl	80016f0 <EF_SetFont>
 8005d24:	e000      	b.n	8005d28 <TouchClockActivity+0x318>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8005d26:	bf00      	nop
				}
				TimerTouch = HAL_GetTick();
 8005d28:	f001 fe62 	bl	80079f0 <HAL_GetTick>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	4a08      	ldr	r2, [pc, #32]	; (8005d50 <TouchClockActivity+0x340>)
 8005d30:	6013      	str	r3, [r2, #0]
			}
		}
}
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000032 	.word	0x20000032
 8005d40:	88888889 	.word	0x88888889
 8005d44:	080131e4 	.word	0x080131e4
 8005d48:	200002c8 	.word	0x200002c8
 8005d4c:	08015f9c 	.word	0x08015f9c
 8005d50:	20000258 	.word	0x20000258

08005d54 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 8005d5a:	f7fc fa97 	bl	800228c <XPT2046_IsTouched>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8106 	beq.w	8005f72 <TouchPredefinedActivityActivity+0x21e>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005d66:	f001 fe43 	bl	80079f0 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	4b83      	ldr	r3, [pc, #524]	; (8005f7c <TouchPredefinedActivityActivity+0x228>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d76:	f0c0 80fc 	bcc.w	8005f72 <TouchPredefinedActivityActivity+0x21e>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005d7a:	1d3a      	adds	r2, r7, #4
 8005d7c:	1dbb      	adds	r3, r7, #6
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fc fa45 	bl	8002210 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 8005d86:	487e      	ldr	r0, [pc, #504]	; (8005f80 <TouchPredefinedActivityActivity+0x22c>)
 8005d88:	f7fb fcb2 	bl	80016f0 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005d8c:	88fb      	ldrh	r3, [r7, #6]
 8005d8e:	2b09      	cmp	r3, #9
 8005d90:	d90f      	bls.n	8005db2 <TouchPredefinedActivityActivity+0x5e>
 8005d92:	88fb      	ldrh	r3, [r7, #6]
 8005d94:	2b6e      	cmp	r3, #110	; 0x6e
 8005d96:	d80c      	bhi.n	8005db2 <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005d98:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005d9a:	2bd7      	cmp	r3, #215	; 0xd7
 8005d9c:	d909      	bls.n	8005db2 <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005d9e:	88bb      	ldrh	r3, [r7, #4]
 8005da0:	2bec      	cmp	r3, #236	; 0xec
 8005da2:	d806      	bhi.n	8005db2 <TouchPredefinedActivityActivity+0x5e>
			{
				State = MENUTFT_SWITCH;
 8005da4:	4b77      	ldr	r3, [pc, #476]	; (8005f84 <TouchPredefinedActivityActivity+0x230>)
 8005da6:	2202      	movs	r2, #2
 8005da8:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005daa:	4b77      	ldr	r3, [pc, #476]	; (8005f88 <TouchPredefinedActivityActivity+0x234>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e0da      	b.n	8005f68 <TouchPredefinedActivityActivity+0x214>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 8005db2:	88fb      	ldrh	r3, [r7, #6]
 8005db4:	2b63      	cmp	r3, #99	; 0x63
 8005db6:	f240 80d7 	bls.w	8005f68 <TouchPredefinedActivityActivity+0x214>
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	2bdc      	cmp	r3, #220	; 0xdc
 8005dbe:	f200 80d3 	bhi.w	8005f68 <TouchPredefinedActivityActivity+0x214>
			{
				if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8005dc2:	88bb      	ldrh	r3, [r7, #4]
 8005dc4:	2b3b      	cmp	r3, #59	; 0x3b
 8005dc6:	d966      	bls.n	8005e96 <TouchPredefinedActivityActivity+0x142>
 8005dc8:	88bb      	ldrh	r3, [r7, #4]
 8005dca:	2b64      	cmp	r3, #100	; 0x64
 8005dcc:	d863      	bhi.n	8005e96 <TouchPredefinedActivityActivity+0x142>
				{
					if(ActivityButtonState[0] >= 1) // if is ON
 8005dce:	4b6f      	ldr	r3, [pc, #444]	; (8005f8c <TouchPredefinedActivityActivity+0x238>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d02f      	beq.n	8005e36 <TouchPredefinedActivityActivity+0xe2>
					{
						ActivityButtonState[0] = 0;
 8005dd6:	4b6d      	ldr	r3, [pc, #436]	; (8005f8c <TouchPredefinedActivityActivity+0x238>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005ddc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	230a      	movs	r3, #10
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	2328      	movs	r3, #40	; 0x28
 8005de8:	2278      	movs	r2, #120	; 0x78
 8005dea:	213c      	movs	r1, #60	; 0x3c
 8005dec:	2064      	movs	r0, #100	; 0x64
 8005dee:	f7fb fc2e 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 8005df2:	4967      	ldr	r1, [pc, #412]	; (8005f90 <TouchPredefinedActivityActivity+0x23c>)
 8005df4:	4867      	ldr	r0, [pc, #412]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005df6:	f009 f9c3 	bl	800f180 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005dfa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	2300      	movs	r3, #0
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	2300      	movs	r3, #0
 8005e06:	223e      	movs	r2, #62	; 0x3e
 8005e08:	2177      	movs	r1, #119	; 0x77
 8005e0a:	4862      	ldr	r0, [pc, #392]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005e0c:	f7fb fe8a 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 8005e10:	4961      	ldr	r1, [pc, #388]	; (8005f98 <TouchPredefinedActivityActivity+0x244>)
 8005e12:	4860      	ldr	r0, [pc, #384]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005e14:	f009 f9b4 	bl	800f180 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005e18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	2300      	movs	r3, #0
 8005e24:	2250      	movs	r2, #80	; 0x50
 8005e26:	2193      	movs	r1, #147	; 0x93
 8005e28:	485a      	ldr	r0, [pc, #360]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005e2a:	f7fb fe7b 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(0); // Turn Activity OFF
 8005e2e:	2000      	movs	r0, #0
 8005e30:	f7fe fb7e 	bl	8004530 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8005e34:	e098      	b.n	8005f68 <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[0] = 1;
 8005e36:	4b55      	ldr	r3, [pc, #340]	; (8005f8c <TouchPredefinedActivityActivity+0x238>)
 8005e38:	2201      	movs	r2, #1
 8005e3a:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8005e3c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	230a      	movs	r3, #10
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	2328      	movs	r3, #40	; 0x28
 8005e48:	2278      	movs	r2, #120	; 0x78
 8005e4a:	213c      	movs	r1, #60	; 0x3c
 8005e4c:	2064      	movs	r0, #100	; 0x64
 8005e4e:	f7fb fbfe 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 8005e52:	494f      	ldr	r1, [pc, #316]	; (8005f90 <TouchPredefinedActivityActivity+0x23c>)
 8005e54:	484f      	ldr	r0, [pc, #316]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005e56:	f009 f993 	bl	800f180 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8005e5a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005e5e:	9301      	str	r3, [sp, #4]
 8005e60:	2300      	movs	r3, #0
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	2300      	movs	r3, #0
 8005e66:	223e      	movs	r2, #62	; 0x3e
 8005e68:	2177      	movs	r1, #119	; 0x77
 8005e6a:	484a      	ldr	r0, [pc, #296]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005e6c:	f7fb fe5a 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 8005e70:	494a      	ldr	r1, [pc, #296]	; (8005f9c <TouchPredefinedActivityActivity+0x248>)
 8005e72:	4848      	ldr	r0, [pc, #288]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005e74:	f009 f984 	bl	800f180 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8005e78:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005e7c:	9301      	str	r3, [sp, #4]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	2300      	movs	r3, #0
 8005e84:	2250      	movs	r2, #80	; 0x50
 8005e86:	2193      	movs	r1, #147	; 0x93
 8005e88:	4842      	ldr	r0, [pc, #264]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005e8a:	f7fb fe4b 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(1);
 8005e8e:	2001      	movs	r0, #1
 8005e90:	f7fe fb4e 	bl	8004530 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8005e94:	e068      	b.n	8005f68 <TouchPredefinedActivityActivity+0x214>
					}

				}

				else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 8005e96:	88bb      	ldrh	r3, [r7, #4]
 8005e98:	2b77      	cmp	r3, #119	; 0x77
 8005e9a:	d965      	bls.n	8005f68 <TouchPredefinedActivityActivity+0x214>
 8005e9c:	88bb      	ldrh	r3, [r7, #4]
 8005e9e:	2ba0      	cmp	r3, #160	; 0xa0
 8005ea0:	d862      	bhi.n	8005f68 <TouchPredefinedActivityActivity+0x214>
				{
					if(ActivityButtonState[1] >= 1) // if is ON
 8005ea2:	4b3a      	ldr	r3, [pc, #232]	; (8005f8c <TouchPredefinedActivityActivity+0x238>)
 8005ea4:	785b      	ldrb	r3, [r3, #1]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d02f      	beq.n	8005f0a <TouchPredefinedActivityActivity+0x1b6>
					{
						ActivityButtonState[1] = 0;
 8005eaa:	4b38      	ldr	r3, [pc, #224]	; (8005f8c <TouchPredefinedActivityActivity+0x238>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005eb0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	230a      	movs	r3, #10
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	2328      	movs	r3, #40	; 0x28
 8005ebc:	2278      	movs	r2, #120	; 0x78
 8005ebe:	2178      	movs	r1, #120	; 0x78
 8005ec0:	2064      	movs	r0, #100	; 0x64
 8005ec2:	f7fb fbc4 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 8005ec6:	4936      	ldr	r1, [pc, #216]	; (8005fa0 <TouchPredefinedActivityActivity+0x24c>)
 8005ec8:	4832      	ldr	r0, [pc, #200]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005eca:	f009 f959 	bl	800f180 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005ece:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ed2:	9301      	str	r3, [sp, #4]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	227a      	movs	r2, #122	; 0x7a
 8005edc:	2169      	movs	r1, #105	; 0x69
 8005ede:	482d      	ldr	r0, [pc, #180]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005ee0:	f7fb fe20 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 8005ee4:	492c      	ldr	r1, [pc, #176]	; (8005f98 <TouchPredefinedActivityActivity+0x244>)
 8005ee6:	482b      	ldr	r0, [pc, #172]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005ee8:	f009 f94a 	bl	800f180 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005eec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ef0:	9301      	str	r3, [sp, #4]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	228c      	movs	r2, #140	; 0x8c
 8005efa:	2193      	movs	r1, #147	; 0x93
 8005efc:	4825      	ldr	r0, [pc, #148]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005efe:	f7fb fe11 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(0);
 8005f02:	2000      	movs	r0, #0
 8005f04:	f7fe fafa 	bl	80044fc <predefinedActivityCzyszczenie>
 8005f08:	e02e      	b.n	8005f68 <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[1] = 1;
 8005f0a:	4b20      	ldr	r3, [pc, #128]	; (8005f8c <TouchPredefinedActivityActivity+0x238>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8005f10:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005f14:	9301      	str	r3, [sp, #4]
 8005f16:	230a      	movs	r3, #10
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	2328      	movs	r3, #40	; 0x28
 8005f1c:	2278      	movs	r2, #120	; 0x78
 8005f1e:	2178      	movs	r1, #120	; 0x78
 8005f20:	2064      	movs	r0, #100	; 0x64
 8005f22:	f7fb fb94 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 8005f26:	491e      	ldr	r1, [pc, #120]	; (8005fa0 <TouchPredefinedActivityActivity+0x24c>)
 8005f28:	481a      	ldr	r0, [pc, #104]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005f2a:	f009 f929 	bl	800f180 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8005f2e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	2300      	movs	r3, #0
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	227a      	movs	r2, #122	; 0x7a
 8005f3c:	2169      	movs	r1, #105	; 0x69
 8005f3e:	4815      	ldr	r0, [pc, #84]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005f40:	f7fb fdf0 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 8005f44:	4915      	ldr	r1, [pc, #84]	; (8005f9c <TouchPredefinedActivityActivity+0x248>)
 8005f46:	4813      	ldr	r0, [pc, #76]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005f48:	f009 f91a 	bl	800f180 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8005f4c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	2300      	movs	r3, #0
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	2300      	movs	r3, #0
 8005f58:	228c      	movs	r2, #140	; 0x8c
 8005f5a:	2193      	movs	r1, #147	; 0x93
 8005f5c:	480d      	ldr	r0, [pc, #52]	; (8005f94 <TouchPredefinedActivityActivity+0x240>)
 8005f5e:	f7fb fde1 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(1);
 8005f62:	2001      	movs	r0, #1
 8005f64:	f7fe faca 	bl	80044fc <predefinedActivityCzyszczenie>
					}
				}
			}
			TimerTouch = HAL_GetTick();
 8005f68:	f001 fd42 	bl	80079f0 <HAL_GetTick>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	4a03      	ldr	r2, [pc, #12]	; (8005f7c <TouchPredefinedActivityActivity+0x228>)
 8005f70:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005f72:	bf00      	nop
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000258 	.word	0x20000258
 8005f80:	08014024 	.word	0x08014024
 8005f84:	2000025c 	.word	0x2000025c
 8005f88:	20000255 	.word	0x20000255
 8005f8c:	2000027c 	.word	0x2000027c
 8005f90:	08013200 	.word	0x08013200
 8005f94:	200002c8 	.word	0x200002c8
 8005f98:	080131cc 	.word	0x080131cc
 8005f9c:	080131d0 	.word	0x080131d0
 8005fa0:	0801320c 	.word	0x0801320c

08005fa4 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 8005faa:	f7fc f96f 	bl	800228c <XPT2046_IsTouched>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 819d 	beq.w	80062f0 <TouchWSLedActivity+0x34c>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8005fb6:	48ae      	ldr	r0, [pc, #696]	; (8006270 <TouchWSLedActivity+0x2cc>)
 8005fb8:	f7fb fb9a 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005fbc:	f001 fd18 	bl	80079f0 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	4bac      	ldr	r3, [pc, #688]	; (8006274 <TouchWSLedActivity+0x2d0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fcc:	f0c0 8190 	bcc.w	80062f0 <TouchWSLedActivity+0x34c>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005fd0:	1d3a      	adds	r2, r7, #4
 8005fd2:	1dbb      	adds	r3, r7, #6
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fc f91a 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 8005fdc:	4ba6      	ldr	r3, [pc, #664]	; (8006278 <TouchWSLedActivity+0x2d4>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d10b      	bne.n	8005ffc <TouchWSLedActivity+0x58>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8005fe4:	bf00      	nop
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	49a4      	ldr	r1, [pc, #656]	; (800627c <TouchWSLedActivity+0x2d8>)
 8005fea:	2001      	movs	r0, #1
 8005fec:	f7fc fc80 	bl	80028f0 <eeprom_read>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f7      	bne.n	8005fe6 <TouchWSLedActivity+0x42>
					WSLedChangeFlag = 0;
 8005ff6:	4ba2      	ldr	r3, [pc, #648]	; (8006280 <TouchWSLedActivity+0x2dc>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005ffc:	88fb      	ldrh	r3, [r7, #6]
 8005ffe:	2b09      	cmp	r3, #9
 8006000:	d90f      	bls.n	8006022 <TouchWSLedActivity+0x7e>
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	2b6e      	cmp	r3, #110	; 0x6e
 8006006:	d80c      	bhi.n	8006022 <TouchWSLedActivity+0x7e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006008:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800600a:	2bd7      	cmp	r3, #215	; 0xd7
 800600c:	d909      	bls.n	8006022 <TouchWSLedActivity+0x7e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800600e:	88bb      	ldrh	r3, [r7, #4]
 8006010:	2bec      	cmp	r3, #236	; 0xec
 8006012:	d806      	bhi.n	8006022 <TouchWSLedActivity+0x7e>
				{
					State = MENUTFT_LIGHTS;
 8006014:	4b9b      	ldr	r3, [pc, #620]	; (8006284 <TouchWSLedActivity+0x2e0>)
 8006016:	2205      	movs	r2, #5
 8006018:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800601a:	4b9b      	ldr	r3, [pc, #620]	; (8006288 <TouchWSLedActivity+0x2e4>)
 800601c:	2201      	movs	r2, #1
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	e161      	b.n	80062e6 <TouchWSLedActivity+0x342>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 8006022:	88bb      	ldrh	r3, [r7, #4]
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	f240 80af 	bls.w	8006188 <TouchWSLedActivity+0x1e4>
 800602a:	88bb      	ldrh	r3, [r7, #4]
 800602c:	2b56      	cmp	r3, #86	; 0x56
 800602e:	f200 80ab 	bhi.w	8006188 <TouchWSLedActivity+0x1e4>
				{

					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8006032:	88fb      	ldrh	r3, [r7, #6]
 8006034:	2bd8      	cmp	r3, #216	; 0xd8
 8006036:	d92f      	bls.n	8006098 <TouchWSLedActivity+0xf4>
 8006038:	88fb      	ldrh	r3, [r7, #6]
 800603a:	2bf7      	cmp	r3, #247	; 0xf7
 800603c:	d82c      	bhi.n	8006098 <TouchWSLedActivity+0xf4>
					{
						if(NrOfLeds < 98)
 800603e:	4b8f      	ldr	r3, [pc, #572]	; (800627c <TouchWSLedActivity+0x2d8>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b61      	cmp	r3, #97	; 0x61
 8006044:	d806      	bhi.n	8006054 <TouchWSLedActivity+0xb0>
						{
							NrOfLeds++;
 8006046:	4b8d      	ldr	r3, [pc, #564]	; (800627c <TouchWSLedActivity+0x2d8>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	3301      	adds	r3, #1
 800604c:	b2da      	uxtb	r2, r3
 800604e:	4b8b      	ldr	r3, [pc, #556]	; (800627c <TouchWSLedActivity+0x2d8>)
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	e002      	b.n	800605a <TouchWSLedActivity+0xb6>
						}
						else
						{
							NrOfLeds = 1;
 8006054:	4b89      	ldr	r3, [pc, #548]	; (800627c <TouchWSLedActivity+0x2d8>)
 8006056:	2201      	movs	r2, #1
 8006058:	701a      	strb	r2, [r3, #0]
						}
						if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 800605a:	4b88      	ldr	r3, [pc, #544]	; (800627c <TouchWSLedActivity+0x2d8>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b09      	cmp	r3, #9
 8006060:	d807      	bhi.n	8006072 <TouchWSLedActivity+0xce>
 8006062:	4b86      	ldr	r3, [pc, #536]	; (800627c <TouchWSLedActivity+0x2d8>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	4988      	ldr	r1, [pc, #544]	; (800628c <TouchWSLedActivity+0x2e8>)
 800606a:	4889      	ldr	r0, [pc, #548]	; (8006290 <TouchWSLedActivity+0x2ec>)
 800606c:	f009 f888 	bl	800f180 <siprintf>
 8006070:	e006      	b.n	8006080 <TouchWSLedActivity+0xdc>
						else sprintf((char*)Msg, " %d", NrOfLeds);
 8006072:	4b82      	ldr	r3, [pc, #520]	; (800627c <TouchWSLedActivity+0x2d8>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	4986      	ldr	r1, [pc, #536]	; (8006294 <TouchWSLedActivity+0x2f0>)
 800607a:	4885      	ldr	r0, [pc, #532]	; (8006290 <TouchWSLedActivity+0x2ec>)
 800607c:	f009 f880 	bl	800f180 <siprintf>
						EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006080:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	2301      	movs	r3, #1
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	2300      	movs	r3, #0
 800608c:	223c      	movs	r2, #60	; 0x3c
 800608e:	21ac      	movs	r1, #172	; 0xac
 8006090:	487f      	ldr	r0, [pc, #508]	; (8006290 <TouchWSLedActivity+0x2ec>)
 8006092:	f7fb fd47 	bl	8001b24 <EF_PutString>
 8006096:	e076      	b.n	8006186 <TouchWSLedActivity+0x1e2>
					}
					else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 8006098:	88fb      	ldrh	r3, [r7, #6]
 800609a:	2bfb      	cmp	r3, #251	; 0xfb
 800609c:	d941      	bls.n	8006122 <TouchWSLedActivity+0x17e>
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 80060a4:	d83d      	bhi.n	8006122 <TouchWSLedActivity+0x17e>
					{
						if(NrOfLeds < 90)
 80060a6:	4b75      	ldr	r3, [pc, #468]	; (800627c <TouchWSLedActivity+0x2d8>)
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b59      	cmp	r3, #89	; 0x59
 80060ac:	d806      	bhi.n	80060bc <TouchWSLedActivity+0x118>
						{
							NrOfLeds = NrOfLeds + 10;
 80060ae:	4b73      	ldr	r3, [pc, #460]	; (800627c <TouchWSLedActivity+0x2d8>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	330a      	adds	r3, #10
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	4b71      	ldr	r3, [pc, #452]	; (800627c <TouchWSLedActivity+0x2d8>)
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	e013      	b.n	80060e4 <TouchWSLedActivity+0x140>
						}
						else
						{
							NrOfLeds = (NrOfLeds + 10) % 99;
 80060bc:	4b6f      	ldr	r3, [pc, #444]	; (800627c <TouchWSLedActivity+0x2d8>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	f103 020a 	add.w	r2, r3, #10
 80060c4:	4b74      	ldr	r3, [pc, #464]	; (8006298 <TouchWSLedActivity+0x2f4>)
 80060c6:	fb83 1302 	smull	r1, r3, r3, r2
 80060ca:	4413      	add	r3, r2
 80060cc:	1199      	asrs	r1, r3, #6
 80060ce:	17d3      	asrs	r3, r2, #31
 80060d0:	1ac9      	subs	r1, r1, r3
 80060d2:	460b      	mov	r3, r1
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	440b      	add	r3, r1
 80060d8:	0159      	lsls	r1, r3, #5
 80060da:	440b      	add	r3, r1
 80060dc:	1ad1      	subs	r1, r2, r3
 80060de:	b2ca      	uxtb	r2, r1
 80060e0:	4b66      	ldr	r3, [pc, #408]	; (800627c <TouchWSLedActivity+0x2d8>)
 80060e2:	701a      	strb	r2, [r3, #0]
						}
					// Display String
					if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 80060e4:	4b65      	ldr	r3, [pc, #404]	; (800627c <TouchWSLedActivity+0x2d8>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b09      	cmp	r3, #9
 80060ea:	d807      	bhi.n	80060fc <TouchWSLedActivity+0x158>
 80060ec:	4b63      	ldr	r3, [pc, #396]	; (800627c <TouchWSLedActivity+0x2d8>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	461a      	mov	r2, r3
 80060f2:	4966      	ldr	r1, [pc, #408]	; (800628c <TouchWSLedActivity+0x2e8>)
 80060f4:	4866      	ldr	r0, [pc, #408]	; (8006290 <TouchWSLedActivity+0x2ec>)
 80060f6:	f009 f843 	bl	800f180 <siprintf>
 80060fa:	e006      	b.n	800610a <TouchWSLedActivity+0x166>
					else sprintf((char*)Msg, " %d", NrOfLeds);
 80060fc:	4b5f      	ldr	r3, [pc, #380]	; (800627c <TouchWSLedActivity+0x2d8>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	461a      	mov	r2, r3
 8006102:	4964      	ldr	r1, [pc, #400]	; (8006294 <TouchWSLedActivity+0x2f0>)
 8006104:	4862      	ldr	r0, [pc, #392]	; (8006290 <TouchWSLedActivity+0x2ec>)
 8006106:	f009 f83b 	bl	800f180 <siprintf>
					EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800610a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	2301      	movs	r3, #1
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	2300      	movs	r3, #0
 8006116:	223c      	movs	r2, #60	; 0x3c
 8006118:	21ac      	movs	r1, #172	; 0xac
 800611a:	485d      	ldr	r0, [pc, #372]	; (8006290 <TouchWSLedActivity+0x2ec>)
 800611c:	f7fb fd02 	bl	8001b24 <EF_PutString>
 8006120:	e031      	b.n	8006186 <TouchWSLedActivity+0x1e2>
					}


					else if((x >= WS_LED_BUTTON_3_X)&&(x <= (WS_LED_BUTTON_3_X + WS_LED_BUTTON_W))) // OK - confirm and send number of LEDs
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8006128:	f240 80d6 	bls.w	80062d8 <TouchWSLedActivity+0x334>
 800612c:	88fb      	ldrh	r3, [r7, #6]
 800612e:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8006132:	f080 80d1 	bcs.w	80062d8 <TouchWSLedActivity+0x334>
					{
						SendComand(UCMD_WS_NUMBER_LED);
 8006136:	2025      	movs	r0, #37	; 0x25
 8006138:	f000 fc54 	bl	80069e4 <SendComand>
						EF_SetFont(&arial_11ptFontInfo);
 800613c:	4857      	ldr	r0, [pc, #348]	; (800629c <TouchWSLedActivity+0x2f8>)
 800613e:	f7fb fad7 	bl	80016f0 <EF_SetFont>
						GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8006142:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	2305      	movs	r3, #5
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	2315      	movs	r3, #21
 800614e:	221e      	movs	r2, #30
 8006150:	2141      	movs	r1, #65	; 0x41
 8006152:	f240 101f 	movw	r0, #287	; 0x11f
 8006156:	f7fb fa7a 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OK");
 800615a:	4951      	ldr	r1, [pc, #324]	; (80062a0 <TouchWSLedActivity+0x2fc>)
 800615c:	484c      	ldr	r0, [pc, #304]	; (8006290 <TouchWSLedActivity+0x2ec>)
 800615e:	f009 f80f 	bl	800f180 <siprintf>
						EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8006162:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	2300      	movs	r3, #0
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	2300      	movs	r3, #0
 800616e:	2243      	movs	r2, #67	; 0x43
 8006170:	f240 1123 	movw	r1, #291	; 0x123
 8006174:	4846      	ldr	r0, [pc, #280]	; (8006290 <TouchWSLedActivity+0x2ec>)
 8006176:	f7fb fcd5 	bl	8001b24 <EF_PutString>
						// Write chosen number of LEDs to EEPROM memory
						eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
 800617a:	2201      	movs	r2, #1
 800617c:	493f      	ldr	r1, [pc, #252]	; (800627c <TouchWSLedActivity+0x2d8>)
 800617e:	2001      	movs	r0, #1
 8006180:	f7fc fbd4 	bl	800292c <eeprom_write>
					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8006184:	e0a8      	b.n	80062d8 <TouchWSLedActivity+0x334>
 8006186:	e0a7      	b.n	80062d8 <TouchWSLedActivity+0x334>
				}

				//
				// Check if it is second line button to change LEDs to WHITE
				//
				else if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 8006188:	88bb      	ldrh	r3, [r7, #4]
 800618a:	2b5e      	cmp	r3, #94	; 0x5e
 800618c:	d924      	bls.n	80061d8 <TouchWSLedActivity+0x234>
 800618e:	88bb      	ldrh	r3, [r7, #4]
 8006190:	2b74      	cmp	r3, #116	; 0x74
 8006192:	d821      	bhi.n	80061d8 <TouchWSLedActivity+0x234>
				{
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8006194:	88fb      	ldrh	r3, [r7, #6]
 8006196:	2b95      	cmp	r3, #149	; 0x95
 8006198:	d906      	bls.n	80061a8 <TouchWSLedActivity+0x204>
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	2bbe      	cmp	r3, #190	; 0xbe
 800619e:	d803      	bhi.n	80061a8 <TouchWSLedActivity+0x204>
					{
						SendComand(UCMD_WS_LED_WHITE_MAX);
 80061a0:	201d      	movs	r0, #29
 80061a2:	f000 fc1f 	bl	80069e4 <SendComand>
 80061a6:	e016      	b.n	80061d6 <TouchWSLedActivity+0x232>
					}
					else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 80061a8:	88fb      	ldrh	r3, [r7, #6]
 80061aa:	2bc9      	cmp	r3, #201	; 0xc9
 80061ac:	d906      	bls.n	80061bc <TouchWSLedActivity+0x218>
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	2bf2      	cmp	r3, #242	; 0xf2
 80061b2:	d803      	bhi.n	80061bc <TouchWSLedActivity+0x218>
					{
						SendComand(UCMD_WS_LED_WHITE_MID);
 80061b4:	201e      	movs	r0, #30
 80061b6:	f000 fc15 	bl	80069e4 <SendComand>
 80061ba:	e00c      	b.n	80061d6 <TouchWSLedActivity+0x232>
					}
					else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80061bc:	88fb      	ldrh	r3, [r7, #6]
 80061be:	2bfd      	cmp	r3, #253	; 0xfd
 80061c0:	f240 808c 	bls.w	80062dc <TouchWSLedActivity+0x338>
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80061ca:	f200 8087 	bhi.w	80062dc <TouchWSLedActivity+0x338>
					{
						SendComand(UCMD_WS_LED_WHITE_MIN);
 80061ce:	201f      	movs	r0, #31
 80061d0:	f000 fc08 	bl	80069e4 <SendComand>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80061d4:	e082      	b.n	80062dc <TouchWSLedActivity+0x338>
 80061d6:	e081      	b.n	80062dc <TouchWSLedActivity+0x338>
				}

				//
				// Check if it is third line button to change LEDs to BLUE
				//
				else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 80061d8:	88bb      	ldrh	r3, [r7, #4]
 80061da:	2b7c      	cmp	r3, #124	; 0x7c
 80061dc:	d922      	bls.n	8006224 <TouchWSLedActivity+0x280>
 80061de:	88bb      	ldrh	r3, [r7, #4]
 80061e0:	2b92      	cmp	r3, #146	; 0x92
 80061e2:	d81f      	bhi.n	8006224 <TouchWSLedActivity+0x280>
				{
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	2b95      	cmp	r3, #149	; 0x95
 80061e8:	d906      	bls.n	80061f8 <TouchWSLedActivity+0x254>
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	2bbe      	cmp	r3, #190	; 0xbe
 80061ee:	d803      	bhi.n	80061f8 <TouchWSLedActivity+0x254>
					{
						SendComand(UCMD_WS_LED_BLUE_MAX);
 80061f0:	2020      	movs	r0, #32
 80061f2:	f000 fbf7 	bl	80069e4 <SendComand>
 80061f6:	e014      	b.n	8006222 <TouchWSLedActivity+0x27e>
					}
					else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 80061f8:	88fb      	ldrh	r3, [r7, #6]
 80061fa:	2bc9      	cmp	r3, #201	; 0xc9
 80061fc:	d906      	bls.n	800620c <TouchWSLedActivity+0x268>
 80061fe:	88fb      	ldrh	r3, [r7, #6]
 8006200:	2bf2      	cmp	r3, #242	; 0xf2
 8006202:	d803      	bhi.n	800620c <TouchWSLedActivity+0x268>
					{
						SendComand(UCMD_WS_LED_BLUE_MID);
 8006204:	2021      	movs	r0, #33	; 0x21
 8006206:	f000 fbed 	bl	80069e4 <SendComand>
 800620a:	e00a      	b.n	8006222 <TouchWSLedActivity+0x27e>
					}
					else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 800620c:	88fb      	ldrh	r3, [r7, #6]
 800620e:	2bfd      	cmp	r3, #253	; 0xfd
 8006210:	d966      	bls.n	80062e0 <TouchWSLedActivity+0x33c>
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8006218:	d862      	bhi.n	80062e0 <TouchWSLedActivity+0x33c>
					{
						SendComand(UCMD_WS_LED_BLUE_MIN);
 800621a:	2022      	movs	r0, #34	; 0x22
 800621c:	f000 fbe2 	bl	80069e4 <SendComand>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8006220:	e05e      	b.n	80062e0 <TouchWSLedActivity+0x33c>
 8006222:	e05d      	b.n	80062e0 <TouchWSLedActivity+0x33c>
				}

				//
				// Check if it is fourth line button to change LEDs to Predefined
				//
				else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8006224:	88bb      	ldrh	r3, [r7, #4]
 8006226:	2b9b      	cmp	r3, #155	; 0x9b
 8006228:	d93c      	bls.n	80062a4 <TouchWSLedActivity+0x300>
 800622a:	88bb      	ldrh	r3, [r7, #4]
 800622c:	2bb1      	cmp	r3, #177	; 0xb1
 800622e:	d839      	bhi.n	80062a4 <TouchWSLedActivity+0x300>
				{
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8006230:	88fb      	ldrh	r3, [r7, #6]
 8006232:	2b13      	cmp	r3, #19
 8006234:	d906      	bls.n	8006244 <TouchWSLedActivity+0x2a0>
 8006236:	88fb      	ldrh	r3, [r7, #6]
 8006238:	2b64      	cmp	r3, #100	; 0x64
 800623a:	d803      	bhi.n	8006244 <TouchWSLedActivity+0x2a0>
					{
						SendComand(UCMD_WS_LED_DAILY);
 800623c:	2023      	movs	r0, #35	; 0x23
 800623e:	f000 fbd1 	bl	80069e4 <SendComand>
 8006242:	e014      	b.n	800626e <TouchWSLedActivity+0x2ca>
					}
					else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8006244:	88fb      	ldrh	r3, [r7, #6]
 8006246:	2b77      	cmp	r3, #119	; 0x77
 8006248:	d906      	bls.n	8006258 <TouchWSLedActivity+0x2b4>
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	2bc8      	cmp	r3, #200	; 0xc8
 800624e:	d803      	bhi.n	8006258 <TouchWSLedActivity+0x2b4>
					{
						SendComand(UCMD_WS_LED_WHITE_OFF);
 8006250:	201c      	movs	r0, #28
 8006252:	f000 fbc7 	bl	80069e4 <SendComand>
 8006256:	e00a      	b.n	800626e <TouchWSLedActivity+0x2ca>
					}
					else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 8006258:	88fb      	ldrh	r3, [r7, #6]
 800625a:	2bdb      	cmp	r3, #219	; 0xdb
 800625c:	d942      	bls.n	80062e4 <TouchWSLedActivity+0x340>
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006264:	d83e      	bhi.n	80062e4 <TouchWSLedActivity+0x340>
					{
						SendComand(UCMD_WS_LED_NIGHT);
 8006266:	2024      	movs	r0, #36	; 0x24
 8006268:	f000 fbbc 	bl	80069e4 <SendComand>
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 800626c:	e03a      	b.n	80062e4 <TouchWSLedActivity+0x340>
 800626e:	e039      	b.n	80062e4 <TouchWSLedActivity+0x340>
 8006270:	08015f9c 	.word	0x08015f9c
 8006274:	20000258 	.word	0x20000258
 8006278:	20000256 	.word	0x20000256
 800627c:	20000033 	.word	0x20000033
 8006280:	20000257 	.word	0x20000257
 8006284:	2000025c 	.word	0x2000025c
 8006288:	20000255 	.word	0x20000255
 800628c:	08013218 	.word	0x08013218
 8006290:	200002c8 	.word	0x200002c8
 8006294:	08013220 	.word	0x08013220
 8006298:	a57eb503 	.word	0xa57eb503
 800629c:	08014024 	.word	0x08014024
 80062a0:	08013224 	.word	0x08013224
				}

				//
				// Check if it is fifth line button to change LEDs to Predefined animations
				//
				else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 80062a4:	88bb      	ldrh	r3, [r7, #4]
 80062a6:	2bba      	cmp	r3, #186	; 0xba
 80062a8:	d91d      	bls.n	80062e6 <TouchWSLedActivity+0x342>
 80062aa:	88bb      	ldrh	r3, [r7, #4]
 80062ac:	2bd0      	cmp	r3, #208	; 0xd0
 80062ae:	d81a      	bhi.n	80062e6 <TouchWSLedActivity+0x342>
				{
					if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	2b45      	cmp	r3, #69	; 0x45
 80062b4:	d906      	bls.n	80062c4 <TouchWSLedActivity+0x320>
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	2b96      	cmp	r3, #150	; 0x96
 80062ba:	d803      	bhi.n	80062c4 <TouchWSLedActivity+0x320>
					{
						SendComand(UCMD_WS_ANIMATION_SUNRISE);
 80062bc:	2026      	movs	r0, #38	; 0x26
 80062be:	f000 fb91 	bl	80069e4 <SendComand>
 80062c2:	e010      	b.n	80062e6 <TouchWSLedActivity+0x342>
					}
					else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 80062c4:	88fb      	ldrh	r3, [r7, #6]
 80062c6:	2ba9      	cmp	r3, #169	; 0xa9
 80062c8:	d90d      	bls.n	80062e6 <TouchWSLedActivity+0x342>
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	2bfa      	cmp	r3, #250	; 0xfa
 80062ce:	d80a      	bhi.n	80062e6 <TouchWSLedActivity+0x342>
					{
						SendComand(UCMD_WS_ANIMATION_SUNSET);
 80062d0:	2027      	movs	r0, #39	; 0x27
 80062d2:	f000 fb87 	bl	80069e4 <SendComand>
 80062d6:	e006      	b.n	80062e6 <TouchWSLedActivity+0x342>
					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 80062d8:	bf00      	nop
 80062da:	e004      	b.n	80062e6 <TouchWSLedActivity+0x342>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80062dc:	bf00      	nop
 80062de:	e002      	b.n	80062e6 <TouchWSLedActivity+0x342>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80062e0:	bf00      	nop
 80062e2:	e000      	b.n	80062e6 <TouchWSLedActivity+0x342>
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80062e4:	bf00      	nop
					}
				}
				TimerTouch = HAL_GetTick();
 80062e6:	f001 fb83 	bl	80079f0 <HAL_GetTick>
 80062ea:	4603      	mov	r3, r0
 80062ec:	4a02      	ldr	r2, [pc, #8]	; (80062f8 <TouchWSLedActivity+0x354>)
 80062ee:	6013      	str	r3, [r2, #0]
			}
		}
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000258 	.word	0x20000258

080062fc <Schedule1Activity>:

void Schedule1Activity()
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006302:	f7fb ffc3 	bl	800228c <XPT2046_IsTouched>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d042      	beq.n	8006392 <Schedule1Activity+0x96>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800630c:	f001 fb70 	bl	80079f0 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	4b22      	ldr	r3, [pc, #136]	; (800639c <Schedule1Activity+0xa0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800631c:	d339      	bcc.n	8006392 <Schedule1Activity+0x96>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800631e:	1d3a      	adds	r2, r7, #4
 8006320:	1dbb      	adds	r3, r7, #6
 8006322:	4611      	mov	r1, r2
 8006324:	4618      	mov	r0, r3
 8006326:	f7fb ff73 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	2b09      	cmp	r3, #9
 800632e:	d90f      	bls.n	8006350 <Schedule1Activity+0x54>
 8006330:	88fb      	ldrh	r3, [r7, #6]
 8006332:	2b6e      	cmp	r3, #110	; 0x6e
 8006334:	d80c      	bhi.n	8006350 <Schedule1Activity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006336:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006338:	2bd7      	cmp	r3, #215	; 0xd7
 800633a:	d909      	bls.n	8006350 <Schedule1Activity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800633c:	88bb      	ldrh	r3, [r7, #4]
 800633e:	2bec      	cmp	r3, #236	; 0xec
 8006340:	d806      	bhi.n	8006350 <Schedule1Activity+0x54>
			{
				State = MENUTFT_CLOCK;
 8006342:	4b17      	ldr	r3, [pc, #92]	; (80063a0 <Schedule1Activity+0xa4>)
 8006344:	2203      	movs	r2, #3
 8006346:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006348:	4b16      	ldr	r3, [pc, #88]	; (80063a4 <Schedule1Activity+0xa8>)
 800634a:	2201      	movs	r2, #1
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	e01b      	b.n	8006388 <Schedule1Activity+0x8c>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006350:	88fb      	ldrh	r3, [r7, #6]
 8006352:	2bdb      	cmp	r3, #219	; 0xdb
 8006354:	d918      	bls.n	8006388 <Schedule1Activity+0x8c>
 8006356:	88fb      	ldrh	r3, [r7, #6]
 8006358:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800635c:	d214      	bcs.n	8006388 <Schedule1Activity+0x8c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800635e:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006360:	2bd7      	cmp	r3, #215	; 0xd7
 8006362:	d911      	bls.n	8006388 <Schedule1Activity+0x8c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006364:	88bb      	ldrh	r3, [r7, #4]
 8006366:	2bec      	cmp	r3, #236	; 0xec
 8006368:	d806      	bhi.n	8006378 <Schedule1Activity+0x7c>
			{
				State = MENUTFT_SCHEDULE_2;
 800636a:	4b0d      	ldr	r3, [pc, #52]	; (80063a0 <Schedule1Activity+0xa4>)
 800636c:	2208      	movs	r2, #8
 800636e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006370:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <Schedule1Activity+0xa8>)
 8006372:	2201      	movs	r2, #1
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	e007      	b.n	8006388 <Schedule1Activity+0x8c>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	2b77      	cmp	r3, #119	; 0x77
 800637c:	d904      	bls.n	8006388 <Schedule1Activity+0x8c>
 800637e:	88fb      	ldrh	r3, [r7, #6]
 8006380:	2bd2      	cmp	r3, #210	; 0xd2
 8006382:	d801      	bhi.n	8006388 <Schedule1Activity+0x8c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006384:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006386:	2bd7      	cmp	r3, #215	; 0xd7
			{
				// TODO!
			}
			TimerTouch = HAL_GetTick();
 8006388:	f001 fb32 	bl	80079f0 <HAL_GetTick>
 800638c:	4603      	mov	r3, r0
 800638e:	4a03      	ldr	r2, [pc, #12]	; (800639c <Schedule1Activity+0xa0>)
 8006390:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006392:	bf00      	nop
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20000258 	.word	0x20000258
 80063a0:	2000025c 	.word	0x2000025c
 80063a4:	20000255 	.word	0x20000255

080063a8 <Schedule2Activity>:

void Schedule2Activity()
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80063ae:	f7fb ff6d 	bl	800228c <XPT2046_IsTouched>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d02e      	beq.n	8006416 <Schedule2Activity+0x6e>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80063b8:	f001 fb1a 	bl	80079f0 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	4b18      	ldr	r3, [pc, #96]	; (8006420 <Schedule2Activity+0x78>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063c8:	d325      	bcc.n	8006416 <Schedule2Activity+0x6e>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80063ca:	1d3a      	adds	r2, r7, #4
 80063cc:	1dbb      	adds	r3, r7, #6
 80063ce:	4611      	mov	r1, r2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fb ff1d 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	2b09      	cmp	r3, #9
 80063da:	d917      	bls.n	800640c <Schedule2Activity+0x64>
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	2b6e      	cmp	r3, #110	; 0x6e
 80063e0:	d814      	bhi.n	800640c <Schedule2Activity+0x64>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80063e2:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80063e4:	2bd7      	cmp	r3, #215	; 0xd7
 80063e6:	d911      	bls.n	800640c <Schedule2Activity+0x64>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80063e8:	88bb      	ldrh	r3, [r7, #4]
 80063ea:	2bec      	cmp	r3, #236	; 0xec
 80063ec:	d806      	bhi.n	80063fc <Schedule2Activity+0x54>
			{
				State = MENUTFT_SCHEDULE_1;
 80063ee:	4b0d      	ldr	r3, [pc, #52]	; (8006424 <Schedule2Activity+0x7c>)
 80063f0:	2207      	movs	r2, #7
 80063f2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80063f4:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <Schedule2Activity+0x80>)
 80063f6:	2201      	movs	r2, #1
 80063f8:	701a      	strb	r2, [r3, #0]
 80063fa:	e007      	b.n	800640c <Schedule2Activity+0x64>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80063fc:	88fb      	ldrh	r3, [r7, #6]
 80063fe:	2b77      	cmp	r3, #119	; 0x77
 8006400:	d904      	bls.n	800640c <Schedule2Activity+0x64>
 8006402:	88fb      	ldrh	r3, [r7, #6]
 8006404:	2bd2      	cmp	r3, #210	; 0xd2
 8006406:	d801      	bhi.n	800640c <Schedule2Activity+0x64>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006408:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800640a:	2bd7      	cmp	r3, #215	; 0xd7
			{
				// TODO!
			}
			TimerTouch = HAL_GetTick();
 800640c:	f001 faf0 	bl	80079f0 <HAL_GetTick>
 8006410:	4603      	mov	r3, r0
 8006412:	4a03      	ldr	r2, [pc, #12]	; (8006420 <Schedule2Activity+0x78>)
 8006414:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000258 	.word	0x20000258
 8006424:	2000025c 	.word	0x2000025c
 8006428:	20000255 	.word	0x20000255

0800642c <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b094      	sub	sp, #80	; 0x50
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8006434:	f107 0308 	add.w	r3, r7, #8
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 f87f 	bl	800753e <UARTDMA_GetLineFromReceiveBuffer>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d15f      	bne.n	8006506 <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8006446:	f107 0308 	add.w	r3, r7, #8
 800644a:	4931      	ldr	r1, [pc, #196]	; (8006510 <UART_ParseLine+0xe4>)
 800644c:	4618      	mov	r0, r3
 800644e:	f009 fcef 	bl	800fe30 <strtok>
 8006452:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8006454:	492f      	ldr	r1, [pc, #188]	; (8006514 <UART_ParseLine+0xe8>)
 8006456:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006458:	f7f9 fec2 	bl	80001e0 <strcmp>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d102      	bne.n	8006468 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8006462:	f000 f869 	bl	8006538 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8006466:	e04e      	b.n	8006506 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8006468:	492b      	ldr	r1, [pc, #172]	; (8006518 <UART_ParseLine+0xec>)
 800646a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800646c:	f7f9 feb8 	bl	80001e0 <strcmp>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d102      	bne.n	800647c <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8006476:	f000 f8ad 	bl	80065d4 <UART_ParseAnswStatus>
}
 800647a:	e044      	b.n	8006506 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 800647c:	4927      	ldr	r1, [pc, #156]	; (800651c <UART_ParseLine+0xf0>)
 800647e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006480:	f7f9 feae 	bl	80001e0 <strcmp>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d102      	bne.n	8006490 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 800648a:	f000 f8ab 	bl	80065e4 <UART_ParseAnswTemp>
}
 800648e:	e03a      	b.n	8006506 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8006490:	4923      	ldr	r1, [pc, #140]	; (8006520 <UART_ParseLine+0xf4>)
 8006492:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006494:	f7f9 fea4 	bl	80001e0 <strcmp>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d102      	bne.n	80064a4 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 800649e:	f000 f945 	bl	800672c <UART_ParseAnswPres>
}
 80064a2:	e030      	b.n	8006506 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 80064a4:	491f      	ldr	r1, [pc, #124]	; (8006524 <UART_ParseLine+0xf8>)
 80064a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80064a8:	f7f9 fe9a 	bl	80001e0 <strcmp>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d102      	bne.n	80064b8 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 80064b2:	f000 f9bd 	bl	8006830 <UART_ParseAnswChangeRelayState>
}
 80064b6:	e026      	b.n	8006506 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 80064b8:	491b      	ldr	r1, [pc, #108]	; (8006528 <UART_ParseLine+0xfc>)
 80064ba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80064bc:	f7f9 fe90 	bl	80001e0 <strcmp>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 80064c6:	f000 f9ba 	bl	800683e <UART_ParseAnswChangeLightState>
}
 80064ca:	e01c      	b.n	8006506 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 80064cc:	4917      	ldr	r1, [pc, #92]	; (800652c <UART_ParseLine+0x100>)
 80064ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80064d0:	f7f9 fe86 	bl	80001e0 <strcmp>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d102      	bne.n	80064e0 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 80064da:	f000 f9b7 	bl	800684c <UART_ParseAnswRelayStateStatus>
}
 80064de:	e012      	b.n	8006506 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 80064e0:	4913      	ldr	r1, [pc, #76]	; (8006530 <UART_ParseLine+0x104>)
 80064e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80064e4:	f7f9 fe7c 	bl	80001e0 <strcmp>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d102      	bne.n	80064f4 <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 80064ee:	f000 fa13 	bl	8006918 <UART_ParseAnswLightsStateStatus>
}
 80064f2:	e008      	b.n	8006506 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 80064f4:	490f      	ldr	r1, [pc, #60]	; (8006534 <UART_ParseLine+0x108>)
 80064f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80064f8:	f7f9 fe72 	bl	80001e0 <strcmp>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 8006502:	f000 f959 	bl	80067b8 <UART_ParseAnswDist>
}
 8006506:	bf00      	nop
 8006508:	3750      	adds	r7, #80	; 0x50
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	08013228 	.word	0x08013228
 8006514:	0801322c 	.word	0x0801322c
 8006518:	08013230 	.word	0x08013230
 800651c:	08013238 	.word	0x08013238
 8006520:	08013240 	.word	0x08013240
 8006524:	08013248 	.word	0x08013248
 8006528:	08013254 	.word	0x08013254
 800652c:	08013260 	.word	0x08013260
 8006530:	0801326c 	.word	0x0801326c
 8006534:	08013278 	.word	0x08013278

08006538 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800653e:	491f      	ldr	r1, [pc, #124]	; (80065bc <UART_ParseLED+0x84>)
 8006540:	2000      	movs	r0, #0
 8006542:	f009 fc75 	bl	800fe30 <strtok>
 8006546:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d031      	beq.n	80065b4 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b2f      	cmp	r3, #47	; 0x2f
 8006556:	d903      	bls.n	8006560 <UART_ParseLED+0x28>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b39      	cmp	r3, #57	; 0x39
 800655e:	d904      	bls.n	800656a <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8006560:	4917      	ldr	r1, [pc, #92]	; (80065c0 <UART_ParseLED+0x88>)
 8006562:	4818      	ldr	r0, [pc, #96]	; (80065c4 <UART_ParseLED+0x8c>)
 8006564:	f001 f81c 	bl	80075a0 <UARTDMA_Print>
			return;	// And exit parsing
 8006568:	e024      	b.n	80065b4 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f007 ff51 	bl	800e412 <atoi>
 8006570:	4603      	mov	r3, r0
 8006572:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d10a      	bne.n	8006590 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 800657a:	2200      	movs	r2, #0
 800657c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006580:	4811      	ldr	r0, [pc, #68]	; (80065c8 <UART_ParseLED+0x90>)
 8006582:	f002 f9b1 	bl	80088e8 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8006586:	4911      	ldr	r1, [pc, #68]	; (80065cc <UART_ParseLED+0x94>)
 8006588:	480e      	ldr	r0, [pc, #56]	; (80065c4 <UART_ParseLED+0x8c>)
 800658a:	f001 f809 	bl	80075a0 <UARTDMA_Print>
 800658e:	e011      	b.n	80065b4 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 8006596:	2201      	movs	r2, #1
 8006598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800659c:	480a      	ldr	r0, [pc, #40]	; (80065c8 <UART_ParseLED+0x90>)
 800659e:	f002 f9a3 	bl	80088e8 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 80065a2:	490b      	ldr	r1, [pc, #44]	; (80065d0 <UART_ParseLED+0x98>)
 80065a4:	4807      	ldr	r0, [pc, #28]	; (80065c4 <UART_ParseLED+0x8c>)
 80065a6:	f000 fffb 	bl	80075a0 <UARTDMA_Print>
 80065aa:	e003      	b.n	80065b4 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 80065ac:	4904      	ldr	r1, [pc, #16]	; (80065c0 <UART_ParseLED+0x88>)
 80065ae:	4805      	ldr	r0, [pc, #20]	; (80065c4 <UART_ParseLED+0x8c>)
 80065b0:	f000 fff6 	bl	80075a0 <UARTDMA_Print>
		}
	}
}
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	08013280 	.word	0x08013280
 80065c0:	08013284 	.word	0x08013284
 80065c4:	20000470 	.word	0x20000470
 80065c8:	40020800 	.word	0x40020800
 80065cc:	08013294 	.word	0x08013294
 80065d0:	080132a0 	.word	0x080132a0

080065d4 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 80065d8:	bf00      	nop
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
	...

080065e4 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 80065ee:	4947      	ldr	r1, [pc, #284]	; (800670c <UART_ParseAnswTemp+0x128>)
 80065f0:	2000      	movs	r0, #0
 80065f2:	f009 fc1d 	bl	800fe30 <strtok>
 80065f6:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8081 	beq.w	8006704 <UART_ParseAnswTemp+0x120>
	{
			NrCzujnika = atoi(ParsePointer);
 8006602:	68b8      	ldr	r0, [r7, #8]
 8006604:	f007 ff05 	bl	800e412 <atoi>
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d010      	beq.n	8006636 <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8006614:	493d      	ldr	r1, [pc, #244]	; (800670c <UART_ParseAnswTemp+0x128>)
 8006616:	2000      	movs	r0, #0
 8006618:	f009 fc0a 	bl	800fe30 <strtok>
 800661c:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f007 fef4 	bl	800e40c <atof>
 8006624:	ec53 2b10 	vmov	r2, r3, d0
 8006628:	4610      	mov	r0, r2
 800662a:	4619      	mov	r1, r3
 800662c:	f7fa faf4 	bl	8000c18 <__aeabi_d2f>
 8006630:	4603      	mov	r3, r0
 8006632:	4a37      	ldr	r2, [pc, #220]	; (8006710 <UART_ParseAnswTemp+0x12c>)
 8006634:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 8006636:	4b37      	ldr	r3, [pc, #220]	; (8006714 <UART_ParseAnswTemp+0x130>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d162      	bne.n	8006704 <UART_ParseAnswTemp+0x120>
			{
				if(NrCzujnika == 1)
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d119      	bne.n	8006678 <UART_ParseAnswTemp+0x94>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 8006644:	4834      	ldr	r0, [pc, #208]	; (8006718 <UART_ParseAnswTemp+0x134>)
 8006646:	f7fb f853 	bl	80016f0 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 800664a:	4b31      	ldr	r3, [pc, #196]	; (8006710 <UART_ParseAnswTemp+0x12c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f7f9 ff92 	bl	8000578 <__aeabi_f2d>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4930      	ldr	r1, [pc, #192]	; (800671c <UART_ParseAnswTemp+0x138>)
 800665a:	4831      	ldr	r0, [pc, #196]	; (8006720 <UART_ParseAnswTemp+0x13c>)
 800665c:	f008 fd90 	bl	800f180 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006660:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	2301      	movs	r3, #1
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	2300      	movs	r3, #0
 800666c:	2250      	movs	r2, #80	; 0x50
 800666e:	2114      	movs	r1, #20
 8006670:	482b      	ldr	r0, [pc, #172]	; (8006720 <UART_ParseAnswTemp+0x13c>)
 8006672:	f7fb fa57 	bl	8001b24 <EF_PutString>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 8006676:	e045      	b.n	8006704 <UART_ParseAnswTemp+0x120>
				else if(NrCzujnika == 2)
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d142      	bne.n	8006704 <UART_ParseAnswTemp+0x120>
						if (CTemp == 0.0) // Error in connection to ds18b20
 800667e:	4b24      	ldr	r3, [pc, #144]	; (8006710 <UART_ParseAnswTemp+0x12c>)
 8006680:	edd3 7a00 	vldr	s15, [r3]
 8006684:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800668c:	d11d      	bne.n	80066ca <UART_ParseAnswTemp+0xe6>
							CTemp = LCTemp;
 800668e:	4b25      	ldr	r3, [pc, #148]	; (8006724 <UART_ParseAnswTemp+0x140>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1f      	ldr	r2, [pc, #124]	; (8006710 <UART_ParseAnswTemp+0x12c>)
 8006694:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 8006696:	4820      	ldr	r0, [pc, #128]	; (8006718 <UART_ParseAnswTemp+0x134>)
 8006698:	f7fb f82a 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 800669c:	4b1c      	ldr	r3, [pc, #112]	; (8006710 <UART_ParseAnswTemp+0x12c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7f9 ff69 	bl	8000578 <__aeabi_f2d>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	491f      	ldr	r1, [pc, #124]	; (8006728 <UART_ParseAnswTemp+0x144>)
 80066ac:	481c      	ldr	r0, [pc, #112]	; (8006720 <UART_ParseAnswTemp+0x13c>)
 80066ae:	f008 fd67 	bl	800f180 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80066b2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	2301      	movs	r3, #1
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	2300      	movs	r3, #0
 80066be:	226e      	movs	r2, #110	; 0x6e
 80066c0:	2114      	movs	r1, #20
 80066c2:	4817      	ldr	r0, [pc, #92]	; (8006720 <UART_ParseAnswTemp+0x13c>)
 80066c4:	f7fb fa2e 	bl	8001b24 <EF_PutString>
	}
 80066c8:	e01c      	b.n	8006704 <UART_ParseAnswTemp+0x120>
							EF_SetFont(&arialBlack_20ptFontInfo);
 80066ca:	4813      	ldr	r0, [pc, #76]	; (8006718 <UART_ParseAnswTemp+0x134>)
 80066cc:	f7fb f810 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 80066d0:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <UART_ParseAnswTemp+0x12c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7f9 ff4f 	bl	8000578 <__aeabi_f2d>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4912      	ldr	r1, [pc, #72]	; (8006728 <UART_ParseAnswTemp+0x144>)
 80066e0:	480f      	ldr	r0, [pc, #60]	; (8006720 <UART_ParseAnswTemp+0x13c>)
 80066e2:	f008 fd4d 	bl	800f180 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80066e6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	2301      	movs	r3, #1
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	2300      	movs	r3, #0
 80066f2:	226e      	movs	r2, #110	; 0x6e
 80066f4:	2114      	movs	r1, #20
 80066f6:	480a      	ldr	r0, [pc, #40]	; (8006720 <UART_ParseAnswTemp+0x13c>)
 80066f8:	f7fb fa14 	bl	8001b24 <EF_PutString>
							LCTemp = CTemp;
 80066fc:	4b04      	ldr	r3, [pc, #16]	; (8006710 <UART_ParseAnswTemp+0x12c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a08      	ldr	r2, [pc, #32]	; (8006724 <UART_ParseAnswTemp+0x140>)
 8006702:	6013      	str	r3, [r2, #0]
	}
 8006704:	bf00      	nop
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	08013280 	.word	0x08013280
 8006710:	20000260 	.word	0x20000260
 8006714:	2000025c 	.word	0x2000025c
 8006718:	08015f9c 	.word	0x08015f9c
 800671c:	080132ac 	.word	0x080132ac
 8006720:	200002c8 	.word	0x200002c8
 8006724:	20000264 	.word	0x20000264
 8006728:	080132c0 	.word	0x080132c0

0800672c <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8006732:	491b      	ldr	r1, [pc, #108]	; (80067a0 <UART_ParseAnswPres+0x74>)
 8006734:	2000      	movs	r0, #0
 8006736:	f009 fb7b 	bl	800fe30 <strtok>
 800673a:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d028      	beq.n	8006796 <UART_ParseAnswPres+0x6a>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f007 fe61 	bl	800e40c <atof>
 800674a:	ec53 2b10 	vmov	r2, r3, d0
 800674e:	4610      	mov	r0, r2
 8006750:	4619      	mov	r1, r3
 8006752:	f7fa fa61 	bl	8000c18 <__aeabi_d2f>
 8006756:	4603      	mov	r3, r0
 8006758:	4a12      	ldr	r2, [pc, #72]	; (80067a4 <UART_ParseAnswPres+0x78>)
 800675a:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 800675c:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <UART_ParseAnswPres+0x7c>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d118      	bne.n	8006796 <UART_ParseAnswPres+0x6a>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8006764:	4811      	ldr	r0, [pc, #68]	; (80067ac <UART_ParseAnswPres+0x80>)
 8006766:	f7fa ffc3 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 800676a:	4b0e      	ldr	r3, [pc, #56]	; (80067a4 <UART_ParseAnswPres+0x78>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f7f9 ff02 	bl	8000578 <__aeabi_f2d>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	490d      	ldr	r1, [pc, #52]	; (80067b0 <UART_ParseAnswPres+0x84>)
 800677a:	480e      	ldr	r0, [pc, #56]	; (80067b4 <UART_ParseAnswPres+0x88>)
 800677c:	f008 fd00 	bl	800f180 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006780:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006784:	9301      	str	r3, [sp, #4]
 8006786:	2301      	movs	r3, #1
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	2300      	movs	r3, #0
 800678c:	22aa      	movs	r2, #170	; 0xaa
 800678e:	2114      	movs	r1, #20
 8006790:	4808      	ldr	r0, [pc, #32]	; (80067b4 <UART_ParseAnswPres+0x88>)
 8006792:	f7fb f9c7 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	08013280 	.word	0x08013280
 80067a4:	20000268 	.word	0x20000268
 80067a8:	2000025c 	.word	0x2000025c
 80067ac:	08015f9c 	.word	0x08015f9c
 80067b0:	080132d4 	.word	0x080132d4
 80067b4:	200002c8 	.word	0x200002c8

080067b8 <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 80067be:	4916      	ldr	r1, [pc, #88]	; (8006818 <UART_ParseAnswDist+0x60>)
 80067c0:	2000      	movs	r0, #0
 80067c2:	f009 fb35 	bl	800fe30 <strtok>
 80067c6:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d01f      	beq.n	8006810 <UART_ParseAnswDist+0x58>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f007 fe1e 	bl	800e412 <atoi>
 80067d6:	4603      	mov	r3, r0
 80067d8:	461a      	mov	r2, r3
 80067da:	4b10      	ldr	r3, [pc, #64]	; (800681c <UART_ParseAnswDist+0x64>)
 80067dc:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 80067de:	4b10      	ldr	r3, [pc, #64]	; (8006820 <UART_ParseAnswDist+0x68>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d114      	bne.n	8006810 <UART_ParseAnswDist+0x58>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80067e6:	480f      	ldr	r0, [pc, #60]	; (8006824 <UART_ParseAnswDist+0x6c>)
 80067e8:	f7fa ff82 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 80067ec:	4b0b      	ldr	r3, [pc, #44]	; (800681c <UART_ParseAnswDist+0x64>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	461a      	mov	r2, r3
 80067f2:	490d      	ldr	r1, [pc, #52]	; (8006828 <UART_ParseAnswDist+0x70>)
 80067f4:	480d      	ldr	r0, [pc, #52]	; (800682c <UART_ParseAnswDist+0x74>)
 80067f6:	f008 fcc3 	bl	800f180 <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80067fa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	2301      	movs	r3, #1
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	2300      	movs	r3, #0
 8006806:	228c      	movs	r2, #140	; 0x8c
 8006808:	21ad      	movs	r1, #173	; 0xad
 800680a:	4808      	ldr	r0, [pc, #32]	; (800682c <UART_ParseAnswDist+0x74>)
 800680c:	f7fb f98a 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	08013280 	.word	0x08013280
 800681c:	20000270 	.word	0x20000270
 8006820:	2000025c 	.word	0x2000025c
 8006824:	08015f9c 	.word	0x08015f9c
 8006828:	080132ec 	.word	0x080132ec
 800682c:	200002c8 	.word	0x200002c8

08006830 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
	//TODO!
}
 8006834:	bf00      	nop
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 800683e:	b480      	push	{r7}
 8006840:	af00      	add	r7, sp, #0
	//TODO!
}
 8006842:	bf00      	nop
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8006852:	2300      	movs	r3, #0
 8006854:	71fb      	strb	r3, [r7, #7]
 8006856:	e04a      	b.n	80068ee <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8006858:	4928      	ldr	r1, [pc, #160]	; (80068fc <UART_ParseAnswRelayStateStatus+0xb0>)
 800685a:	2000      	movs	r0, #0
 800685c:	f009 fae8 	bl	800fe30 <strtok>
 8006860:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d02f      	beq.n	80068ca <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800686a:	2300      	movs	r3, #0
 800686c:	71bb      	strb	r3, [r7, #6]
 800686e:	e025      	b.n	80068bc <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8006870:	79bb      	ldrb	r3, [r7, #6]
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	4413      	add	r3, r2
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b2f      	cmp	r3, #47	; 0x2f
 800687a:	d905      	bls.n	8006888 <UART_ParseAnswRelayStateStatus+0x3c>
 800687c:	79bb      	ldrb	r3, [r7, #6]
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	4413      	add	r3, r2
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b39      	cmp	r3, #57	; 0x39
 8006886:	d90e      	bls.n	80068a6 <UART_ParseAnswRelayStateStatus+0x5a>
 8006888:	79bb      	ldrb	r3, [r7, #6]
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	4413      	add	r3, r2
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b2e      	cmp	r3, #46	; 0x2e
 8006892:	d008      	beq.n	80068a6 <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8006894:	491a      	ldr	r1, [pc, #104]	; (8006900 <UART_ParseAnswRelayStateStatus+0xb4>)
 8006896:	481b      	ldr	r0, [pc, #108]	; (8006904 <UART_ParseAnswRelayStateStatus+0xb8>)
 8006898:	f008 fc72 	bl	800f180 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 800689c:	4919      	ldr	r1, [pc, #100]	; (8006904 <UART_ParseAnswRelayStateStatus+0xb8>)
 800689e:	481a      	ldr	r0, [pc, #104]	; (8006908 <UART_ParseAnswRelayStateStatus+0xbc>)
 80068a0:	f000 fe7e 	bl	80075a0 <UARTDMA_Print>
					return;	// And exit parsing
 80068a4:	e026      	b.n	80068f4 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 80068a6:	6838      	ldr	r0, [r7, #0]
 80068a8:	f007 fdb3 	bl	800e412 <atoi>
 80068ac:	4602      	mov	r2, r0
 80068ae:	79fb      	ldrb	r3, [r7, #7]
 80068b0:	b2d1      	uxtb	r1, r2
 80068b2:	4a16      	ldr	r2, [pc, #88]	; (800690c <UART_ParseAnswRelayStateStatus+0xc0>)
 80068b4:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80068b6:	79bb      	ldrb	r3, [r7, #6]
 80068b8:	3301      	adds	r3, #1
 80068ba:	71bb      	strb	r3, [r7, #6]
 80068bc:	79bb      	ldrb	r3, [r7, #6]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	4413      	add	r3, r2
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1d3      	bne.n	8006870 <UART_ParseAnswRelayStateStatus+0x24>
 80068c8:	e008      	b.n	80068dc <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 80068ca:	4911      	ldr	r1, [pc, #68]	; (8006910 <UART_ParseAnswRelayStateStatus+0xc4>)
 80068cc:	480d      	ldr	r0, [pc, #52]	; (8006904 <UART_ParseAnswRelayStateStatus+0xb8>)
 80068ce:	f008 fc57 	bl	800f180 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 80068d2:	490c      	ldr	r1, [pc, #48]	; (8006904 <UART_ParseAnswRelayStateStatus+0xb8>)
 80068d4:	480c      	ldr	r0, [pc, #48]	; (8006908 <UART_ParseAnswRelayStateStatus+0xbc>)
 80068d6:	f000 fe63 	bl	80075a0 <UARTDMA_Print>
			return;	// And exit parsing
 80068da:	e00b      	b.n	80068f4 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 80068dc:	4b0d      	ldr	r3, [pc, #52]	; (8006914 <UART_ParseAnswRelayStateStatus+0xc8>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d101      	bne.n	80068e8 <UART_ParseAnswRelayStateStatus+0x9c>
 80068e4:	f7fd fe72 	bl	80045cc <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	3301      	adds	r3, #1
 80068ec:	71fb      	strb	r3, [r7, #7]
 80068ee:	79fb      	ldrb	r3, [r7, #7]
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d9b1      	bls.n	8006858 <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	08013280 	.word	0x08013280
 8006900:	080132f8 	.word	0x080132f8
 8006904:	20000640 	.word	0x20000640
 8006908:	20000470 	.word	0x20000470
 800690c:	20000274 	.word	0x20000274
 8006910:	0801330c 	.word	0x0801330c
 8006914:	2000025c 	.word	0x2000025c

08006918 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 800691e:	2300      	movs	r3, #0
 8006920:	71fb      	strb	r3, [r7, #7]
 8006922:	e04a      	b.n	80069ba <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8006924:	4928      	ldr	r1, [pc, #160]	; (80069c8 <UART_ParseAnswLightsStateStatus+0xb0>)
 8006926:	2000      	movs	r0, #0
 8006928:	f009 fa82 	bl	800fe30 <strtok>
 800692c:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d02f      	beq.n	8006996 <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8006936:	2300      	movs	r3, #0
 8006938:	71bb      	strb	r3, [r7, #6]
 800693a:	e025      	b.n	8006988 <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 800693c:	79bb      	ldrb	r3, [r7, #6]
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	4413      	add	r3, r2
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b2f      	cmp	r3, #47	; 0x2f
 8006946:	d905      	bls.n	8006954 <UART_ParseAnswLightsStateStatus+0x3c>
 8006948:	79bb      	ldrb	r3, [r7, #6]
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	4413      	add	r3, r2
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b39      	cmp	r3, #57	; 0x39
 8006952:	d90e      	bls.n	8006972 <UART_ParseAnswLightsStateStatus+0x5a>
 8006954:	79bb      	ldrb	r3, [r7, #6]
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	4413      	add	r3, r2
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b2e      	cmp	r3, #46	; 0x2e
 800695e:	d008      	beq.n	8006972 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8006960:	491a      	ldr	r1, [pc, #104]	; (80069cc <UART_ParseAnswLightsStateStatus+0xb4>)
 8006962:	481b      	ldr	r0, [pc, #108]	; (80069d0 <UART_ParseAnswLightsStateStatus+0xb8>)
 8006964:	f008 fc0c 	bl	800f180 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8006968:	4919      	ldr	r1, [pc, #100]	; (80069d0 <UART_ParseAnswLightsStateStatus+0xb8>)
 800696a:	481a      	ldr	r0, [pc, #104]	; (80069d4 <UART_ParseAnswLightsStateStatus+0xbc>)
 800696c:	f000 fe18 	bl	80075a0 <UARTDMA_Print>
					return;	// And exit parsing
 8006970:	e026      	b.n	80069c0 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8006972:	6838      	ldr	r0, [r7, #0]
 8006974:	f007 fd4d 	bl	800e412 <atoi>
 8006978:	4602      	mov	r2, r0
 800697a:	79fb      	ldrb	r3, [r7, #7]
 800697c:	b2d1      	uxtb	r1, r2
 800697e:	4a16      	ldr	r2, [pc, #88]	; (80069d8 <UART_ParseAnswLightsStateStatus+0xc0>)
 8006980:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8006982:	79bb      	ldrb	r3, [r7, #6]
 8006984:	3301      	adds	r3, #1
 8006986:	71bb      	strb	r3, [r7, #6]
 8006988:	79bb      	ldrb	r3, [r7, #6]
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	4413      	add	r3, r2
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1d3      	bne.n	800693c <UART_ParseAnswLightsStateStatus+0x24>
 8006994:	e008      	b.n	80069a8 <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8006996:	4911      	ldr	r1, [pc, #68]	; (80069dc <UART_ParseAnswLightsStateStatus+0xc4>)
 8006998:	480d      	ldr	r0, [pc, #52]	; (80069d0 <UART_ParseAnswLightsStateStatus+0xb8>)
 800699a:	f008 fbf1 	bl	800f180 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 800699e:	490c      	ldr	r1, [pc, #48]	; (80069d0 <UART_ParseAnswLightsStateStatus+0xb8>)
 80069a0:	480c      	ldr	r0, [pc, #48]	; (80069d4 <UART_ParseAnswLightsStateStatus+0xbc>)
 80069a2:	f000 fdfd 	bl	80075a0 <UARTDMA_Print>
			return;	// And exit parsing
 80069a6:	e00b      	b.n	80069c0 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 80069a8:	4b0d      	ldr	r3, [pc, #52]	; (80069e0 <UART_ParseAnswLightsStateStatus+0xc8>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b05      	cmp	r3, #5
 80069ae:	d101      	bne.n	80069b4 <UART_ParseAnswLightsStateStatus+0x9c>
 80069b0:	f7fd ff14 	bl	80047dc <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	3301      	adds	r3, #1
 80069b8:	71fb      	strb	r3, [r7, #7]
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d9b1      	bls.n	8006924 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	08013280 	.word	0x08013280
 80069cc:	080132f8 	.word	0x080132f8
 80069d0:	20000640 	.word	0x20000640
 80069d4:	20000470 	.word	0x20000470
 80069d8:	20000278 	.word	0x20000278
 80069dc:	0801330c 	.word	0x0801330c
 80069e0:	2000025c 	.word	0x2000025c

080069e4 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	4603      	mov	r3, r0
 80069ec:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	2b27      	cmp	r3, #39	; 0x27
 80069f6:	f200 8129 	bhi.w	8006c4c <SendComand+0x268>
 80069fa:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <SendComand+0x1c>)
 80069fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a00:	08006aa1 	.word	0x08006aa1
 8006a04:	08006aab 	.word	0x08006aab
 8006a08:	08006ab5 	.word	0x08006ab5
 8006a0c:	08006abf 	.word	0x08006abf
 8006a10:	08006ad3 	.word	0x08006ad3
 8006a14:	08006add 	.word	0x08006add
 8006a18:	08006ae7 	.word	0x08006ae7
 8006a1c:	08006af1 	.word	0x08006af1
 8006a20:	08006afb 	.word	0x08006afb
 8006a24:	08006b05 	.word	0x08006b05
 8006a28:	08006b0f 	.word	0x08006b0f
 8006a2c:	08006b19 	.word	0x08006b19
 8006a30:	08006b23 	.word	0x08006b23
 8006a34:	08006b4b 	.word	0x08006b4b
 8006a38:	08006b55 	.word	0x08006b55
 8006a3c:	08006b5f 	.word	0x08006b5f
 8006a40:	08006b69 	.word	0x08006b69
 8006a44:	08006b73 	.word	0x08006b73
 8006a48:	08006b7d 	.word	0x08006b7d
 8006a4c:	08006b87 	.word	0x08006b87
 8006a50:	08006b91 	.word	0x08006b91
 8006a54:	08006b41 	.word	0x08006b41
 8006a58:	08006baf 	.word	0x08006baf
 8006a5c:	08006b2d 	.word	0x08006b2d
 8006a60:	08006b37 	.word	0x08006b37
 8006a64:	08006b9b 	.word	0x08006b9b
 8006a68:	08006ba5 	.word	0x08006ba5
 8006a6c:	08006ac9 	.word	0x08006ac9
 8006a70:	08006bb9 	.word	0x08006bb9
 8006a74:	08006bc3 	.word	0x08006bc3
 8006a78:	08006bcd 	.word	0x08006bcd
 8006a7c:	08006bd7 	.word	0x08006bd7
 8006a80:	08006be1 	.word	0x08006be1
 8006a84:	08006beb 	.word	0x08006beb
 8006a88:	08006bf5 	.word	0x08006bf5
 8006a8c:	08006bff 	.word	0x08006bff
 8006a90:	08006c09 	.word	0x08006c09
 8006a94:	08006c13 	.word	0x08006c13
 8006a98:	08006c39 	.word	0x08006c39
 8006a9c:	08006c43 	.word	0x08006c43
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8006aa0:	496d      	ldr	r1, [pc, #436]	; (8006c58 <SendComand+0x274>)
 8006aa2:	486e      	ldr	r0, [pc, #440]	; (8006c5c <SendComand+0x278>)
 8006aa4:	f000 fd7c 	bl	80075a0 <UARTDMA_Print>
			break;
 8006aa8:	e0d0      	b.n	8006c4c <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8006aaa:	496d      	ldr	r1, [pc, #436]	; (8006c60 <SendComand+0x27c>)
 8006aac:	486b      	ldr	r0, [pc, #428]	; (8006c5c <SendComand+0x278>)
 8006aae:	f000 fd77 	bl	80075a0 <UARTDMA_Print>
			break;
 8006ab2:	e0cb      	b.n	8006c4c <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8006ab4:	496b      	ldr	r1, [pc, #428]	; (8006c64 <SendComand+0x280>)
 8006ab6:	4869      	ldr	r0, [pc, #420]	; (8006c5c <SendComand+0x278>)
 8006ab8:	f000 fd72 	bl	80075a0 <UARTDMA_Print>
			break;
 8006abc:	e0c6      	b.n	8006c4c <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8006abe:	496a      	ldr	r1, [pc, #424]	; (8006c68 <SendComand+0x284>)
 8006ac0:	4866      	ldr	r0, [pc, #408]	; (8006c5c <SendComand+0x278>)
 8006ac2:	f000 fd6d 	bl	80075a0 <UARTDMA_Print>
			break;
 8006ac6:	e0c1      	b.n	8006c4c <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8006ac8:	4968      	ldr	r1, [pc, #416]	; (8006c6c <SendComand+0x288>)
 8006aca:	4864      	ldr	r0, [pc, #400]	; (8006c5c <SendComand+0x278>)
 8006acc:	f000 fd68 	bl	80075a0 <UARTDMA_Print>
			break;
 8006ad0:	e0bc      	b.n	8006c4c <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8006ad2:	4967      	ldr	r1, [pc, #412]	; (8006c70 <SendComand+0x28c>)
 8006ad4:	4861      	ldr	r0, [pc, #388]	; (8006c5c <SendComand+0x278>)
 8006ad6:	f000 fd63 	bl	80075a0 <UARTDMA_Print>
			break;
 8006ada:	e0b7      	b.n	8006c4c <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8006adc:	4965      	ldr	r1, [pc, #404]	; (8006c74 <SendComand+0x290>)
 8006ade:	485f      	ldr	r0, [pc, #380]	; (8006c5c <SendComand+0x278>)
 8006ae0:	f000 fd5e 	bl	80075a0 <UARTDMA_Print>
			break;
 8006ae4:	e0b2      	b.n	8006c4c <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8006ae6:	4964      	ldr	r1, [pc, #400]	; (8006c78 <SendComand+0x294>)
 8006ae8:	485c      	ldr	r0, [pc, #368]	; (8006c5c <SendComand+0x278>)
 8006aea:	f000 fd59 	bl	80075a0 <UARTDMA_Print>
			break;
 8006aee:	e0ad      	b.n	8006c4c <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8006af0:	4962      	ldr	r1, [pc, #392]	; (8006c7c <SendComand+0x298>)
 8006af2:	485a      	ldr	r0, [pc, #360]	; (8006c5c <SendComand+0x278>)
 8006af4:	f000 fd54 	bl	80075a0 <UARTDMA_Print>
			break;
 8006af8:	e0a8      	b.n	8006c4c <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8006afa:	4961      	ldr	r1, [pc, #388]	; (8006c80 <SendComand+0x29c>)
 8006afc:	4857      	ldr	r0, [pc, #348]	; (8006c5c <SendComand+0x278>)
 8006afe:	f000 fd4f 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b02:	e0a3      	b.n	8006c4c <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8006b04:	495f      	ldr	r1, [pc, #380]	; (8006c84 <SendComand+0x2a0>)
 8006b06:	4855      	ldr	r0, [pc, #340]	; (8006c5c <SendComand+0x278>)
 8006b08:	f000 fd4a 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b0c:	e09e      	b.n	8006c4c <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8006b0e:	495e      	ldr	r1, [pc, #376]	; (8006c88 <SendComand+0x2a4>)
 8006b10:	4852      	ldr	r0, [pc, #328]	; (8006c5c <SendComand+0x278>)
 8006b12:	f000 fd45 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b16:	e099      	b.n	8006c4c <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8006b18:	495c      	ldr	r1, [pc, #368]	; (8006c8c <SendComand+0x2a8>)
 8006b1a:	4850      	ldr	r0, [pc, #320]	; (8006c5c <SendComand+0x278>)
 8006b1c:	f000 fd40 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b20:	e094      	b.n	8006c4c <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8006b22:	495b      	ldr	r1, [pc, #364]	; (8006c90 <SendComand+0x2ac>)
 8006b24:	484d      	ldr	r0, [pc, #308]	; (8006c5c <SendComand+0x278>)
 8006b26:	f000 fd3b 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b2a:	e08f      	b.n	8006c4c <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8006b2c:	4959      	ldr	r1, [pc, #356]	; (8006c94 <SendComand+0x2b0>)
 8006b2e:	484b      	ldr	r0, [pc, #300]	; (8006c5c <SendComand+0x278>)
 8006b30:	f000 fd36 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b34:	e08a      	b.n	8006c4c <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8006b36:	4958      	ldr	r1, [pc, #352]	; (8006c98 <SendComand+0x2b4>)
 8006b38:	4848      	ldr	r0, [pc, #288]	; (8006c5c <SendComand+0x278>)
 8006b3a:	f000 fd31 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b3e:	e085      	b.n	8006c4c <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8006b40:	4956      	ldr	r1, [pc, #344]	; (8006c9c <SendComand+0x2b8>)
 8006b42:	4846      	ldr	r0, [pc, #280]	; (8006c5c <SendComand+0x278>)
 8006b44:	f000 fd2c 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b48:	e080      	b.n	8006c4c <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8006b4a:	4955      	ldr	r1, [pc, #340]	; (8006ca0 <SendComand+0x2bc>)
 8006b4c:	4843      	ldr	r0, [pc, #268]	; (8006c5c <SendComand+0x278>)
 8006b4e:	f000 fd27 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b52:	e07b      	b.n	8006c4c <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8006b54:	4953      	ldr	r1, [pc, #332]	; (8006ca4 <SendComand+0x2c0>)
 8006b56:	4841      	ldr	r0, [pc, #260]	; (8006c5c <SendComand+0x278>)
 8006b58:	f000 fd22 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b5c:	e076      	b.n	8006c4c <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8006b5e:	4952      	ldr	r1, [pc, #328]	; (8006ca8 <SendComand+0x2c4>)
 8006b60:	483e      	ldr	r0, [pc, #248]	; (8006c5c <SendComand+0x278>)
 8006b62:	f000 fd1d 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b66:	e071      	b.n	8006c4c <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8006b68:	4950      	ldr	r1, [pc, #320]	; (8006cac <SendComand+0x2c8>)
 8006b6a:	483c      	ldr	r0, [pc, #240]	; (8006c5c <SendComand+0x278>)
 8006b6c:	f000 fd18 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b70:	e06c      	b.n	8006c4c <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8006b72:	494f      	ldr	r1, [pc, #316]	; (8006cb0 <SendComand+0x2cc>)
 8006b74:	4839      	ldr	r0, [pc, #228]	; (8006c5c <SendComand+0x278>)
 8006b76:	f000 fd13 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b7a:	e067      	b.n	8006c4c <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8006b7c:	494d      	ldr	r1, [pc, #308]	; (8006cb4 <SendComand+0x2d0>)
 8006b7e:	4837      	ldr	r0, [pc, #220]	; (8006c5c <SendComand+0x278>)
 8006b80:	f000 fd0e 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b84:	e062      	b.n	8006c4c <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 8006b86:	494c      	ldr	r1, [pc, #304]	; (8006cb8 <SendComand+0x2d4>)
 8006b88:	4834      	ldr	r0, [pc, #208]	; (8006c5c <SendComand+0x278>)
 8006b8a:	f000 fd09 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b8e:	e05d      	b.n	8006c4c <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8006b90:	494a      	ldr	r1, [pc, #296]	; (8006cbc <SendComand+0x2d8>)
 8006b92:	4832      	ldr	r0, [pc, #200]	; (8006c5c <SendComand+0x278>)
 8006b94:	f000 fd04 	bl	80075a0 <UARTDMA_Print>
			break;
 8006b98:	e058      	b.n	8006c4c <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 8006b9a:	4949      	ldr	r1, [pc, #292]	; (8006cc0 <SendComand+0x2dc>)
 8006b9c:	482f      	ldr	r0, [pc, #188]	; (8006c5c <SendComand+0x278>)
 8006b9e:	f000 fcff 	bl	80075a0 <UARTDMA_Print>
			break;
 8006ba2:	e053      	b.n	8006c4c <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8006ba4:	4947      	ldr	r1, [pc, #284]	; (8006cc4 <SendComand+0x2e0>)
 8006ba6:	482d      	ldr	r0, [pc, #180]	; (8006c5c <SendComand+0x278>)
 8006ba8:	f000 fcfa 	bl	80075a0 <UARTDMA_Print>
			break;
 8006bac:	e04e      	b.n	8006c4c <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8006bae:	4946      	ldr	r1, [pc, #280]	; (8006cc8 <SendComand+0x2e4>)
 8006bb0:	482a      	ldr	r0, [pc, #168]	; (8006c5c <SendComand+0x278>)
 8006bb2:	f000 fcf5 	bl	80075a0 <UARTDMA_Print>
			break;
 8006bb6:	e049      	b.n	8006c4c <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 8006bb8:	4944      	ldr	r1, [pc, #272]	; (8006ccc <SendComand+0x2e8>)
 8006bba:	4828      	ldr	r0, [pc, #160]	; (8006c5c <SendComand+0x278>)
 8006bbc:	f000 fcf0 	bl	80075a0 <UARTDMA_Print>
			break;
 8006bc0:	e044      	b.n	8006c4c <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8006bc2:	4943      	ldr	r1, [pc, #268]	; (8006cd0 <SendComand+0x2ec>)
 8006bc4:	4825      	ldr	r0, [pc, #148]	; (8006c5c <SendComand+0x278>)
 8006bc6:	f000 fceb 	bl	80075a0 <UARTDMA_Print>
			break;
 8006bca:	e03f      	b.n	8006c4c <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8006bcc:	4941      	ldr	r1, [pc, #260]	; (8006cd4 <SendComand+0x2f0>)
 8006bce:	4823      	ldr	r0, [pc, #140]	; (8006c5c <SendComand+0x278>)
 8006bd0:	f000 fce6 	bl	80075a0 <UARTDMA_Print>
			break;
 8006bd4:	e03a      	b.n	8006c4c <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8006bd6:	4940      	ldr	r1, [pc, #256]	; (8006cd8 <SendComand+0x2f4>)
 8006bd8:	4820      	ldr	r0, [pc, #128]	; (8006c5c <SendComand+0x278>)
 8006bda:	f000 fce1 	bl	80075a0 <UARTDMA_Print>
			break;
 8006bde:	e035      	b.n	8006c4c <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8006be0:	493e      	ldr	r1, [pc, #248]	; (8006cdc <SendComand+0x2f8>)
 8006be2:	481e      	ldr	r0, [pc, #120]	; (8006c5c <SendComand+0x278>)
 8006be4:	f000 fcdc 	bl	80075a0 <UARTDMA_Print>
			break;
 8006be8:	e030      	b.n	8006c4c <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8006bea:	493d      	ldr	r1, [pc, #244]	; (8006ce0 <SendComand+0x2fc>)
 8006bec:	481b      	ldr	r0, [pc, #108]	; (8006c5c <SendComand+0x278>)
 8006bee:	f000 fcd7 	bl	80075a0 <UARTDMA_Print>
			break;
 8006bf2:	e02b      	b.n	8006c4c <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8006bf4:	493b      	ldr	r1, [pc, #236]	; (8006ce4 <SendComand+0x300>)
 8006bf6:	4819      	ldr	r0, [pc, #100]	; (8006c5c <SendComand+0x278>)
 8006bf8:	f000 fcd2 	bl	80075a0 <UARTDMA_Print>
			break;
 8006bfc:	e026      	b.n	8006c4c <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 8006bfe:	493a      	ldr	r1, [pc, #232]	; (8006ce8 <SendComand+0x304>)
 8006c00:	4816      	ldr	r0, [pc, #88]	; (8006c5c <SendComand+0x278>)
 8006c02:	f000 fccd 	bl	80075a0 <UARTDMA_Print>
			break;
 8006c06:	e021      	b.n	8006c4c <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8006c08:	4938      	ldr	r1, [pc, #224]	; (8006cec <SendComand+0x308>)
 8006c0a:	4814      	ldr	r0, [pc, #80]	; (8006c5c <SendComand+0x278>)
 8006c0c:	f000 fcc8 	bl	80075a0 <UARTDMA_Print>
			break;
 8006c10:	e01c      	b.n	8006c4c <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8006c12:	4b37      	ldr	r3, [pc, #220]	; (8006cf0 <SendComand+0x30c>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b08      	cmp	r3, #8
 8006c18:	d802      	bhi.n	8006c20 <SendComand+0x23c>
 8006c1a:	4b35      	ldr	r3, [pc, #212]	; (8006cf0 <SendComand+0x30c>)
 8006c1c:	2209      	movs	r2, #9
 8006c1e:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8006c20:	4b33      	ldr	r3, [pc, #204]	; (8006cf0 <SendComand+0x30c>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	4933      	ldr	r1, [pc, #204]	; (8006cf4 <SendComand+0x310>)
 8006c28:	4833      	ldr	r0, [pc, #204]	; (8006cf8 <SendComand+0x314>)
 8006c2a:	f008 faa9 	bl	800f180 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8006c2e:	4932      	ldr	r1, [pc, #200]	; (8006cf8 <SendComand+0x314>)
 8006c30:	480a      	ldr	r0, [pc, #40]	; (8006c5c <SendComand+0x278>)
 8006c32:	f000 fcb5 	bl	80075a0 <UARTDMA_Print>
			break;
 8006c36:	e009      	b.n	8006c4c <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8006c38:	4930      	ldr	r1, [pc, #192]	; (8006cfc <SendComand+0x318>)
 8006c3a:	4808      	ldr	r0, [pc, #32]	; (8006c5c <SendComand+0x278>)
 8006c3c:	f000 fcb0 	bl	80075a0 <UARTDMA_Print>
			break;
 8006c40:	e004      	b.n	8006c4c <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8006c42:	492f      	ldr	r1, [pc, #188]	; (8006d00 <SendComand+0x31c>)
 8006c44:	4805      	ldr	r0, [pc, #20]	; (8006c5c <SendComand+0x278>)
 8006c46:	f000 fcab 	bl	80075a0 <UARTDMA_Print>
			break;
 8006c4a:	bf00      	nop
		}
	return 1;
 8006c4c:	2301      	movs	r3, #1
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	08013328 	.word	0x08013328
 8006c5c:	20000470 	.word	0x20000470
 8006c60:	08013330 	.word	0x08013330
 8006c64:	08013338 	.word	0x08013338
 8006c68:	08013344 	.word	0x08013344
 8006c6c:	0801334c 	.word	0x0801334c
 8006c70:	08013354 	.word	0x08013354
 8006c74:	0801335c 	.word	0x0801335c
 8006c78:	0801336c 	.word	0x0801336c
 8006c7c:	0801337c 	.word	0x0801337c
 8006c80:	0801338c 	.word	0x0801338c
 8006c84:	0801339c 	.word	0x0801339c
 8006c88:	080133ac 	.word	0x080133ac
 8006c8c:	080133bc 	.word	0x080133bc
 8006c90:	080133cc 	.word	0x080133cc
 8006c94:	080133dc 	.word	0x080133dc
 8006c98:	080133ec 	.word	0x080133ec
 8006c9c:	080133fc 	.word	0x080133fc
 8006ca0:	0801340c 	.word	0x0801340c
 8006ca4:	0801341c 	.word	0x0801341c
 8006ca8:	0801342c 	.word	0x0801342c
 8006cac:	0801343c 	.word	0x0801343c
 8006cb0:	0801344c 	.word	0x0801344c
 8006cb4:	0801345c 	.word	0x0801345c
 8006cb8:	0801346c 	.word	0x0801346c
 8006cbc:	0801347c 	.word	0x0801347c
 8006cc0:	0801348c 	.word	0x0801348c
 8006cc4:	0801349c 	.word	0x0801349c
 8006cc8:	080134ac 	.word	0x080134ac
 8006ccc:	080134bc 	.word	0x080134bc
 8006cd0:	080134cc 	.word	0x080134cc
 8006cd4:	080134dc 	.word	0x080134dc
 8006cd8:	080134ec 	.word	0x080134ec
 8006cdc:	080134fc 	.word	0x080134fc
 8006ce0:	0801350c 	.word	0x0801350c
 8006ce4:	0801351c 	.word	0x0801351c
 8006ce8:	0801352c 	.word	0x0801352c
 8006cec:	0801353c 	.word	0x0801353c
 8006cf0:	20000033 	.word	0x20000033
 8006cf4:	0801354c 	.word	0x0801354c
 8006cf8:	20000640 	.word	0x20000640
 8006cfc:	0801355c 	.word	0x0801355c
 8006d00:	0801356c 	.word	0x0801356c

08006d04 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	781a      	ldrb	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	785b      	ldrb	r3, [r3, #1]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d101      	bne.n	8006d1e <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e015      	b.n	8006d4a <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	461a      	mov	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4413      	add	r3, r2
 8006d28:	789a      	ldrb	r2, [r3, #2]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	785b      	ldrb	r3, [r3, #1]
 8006d32:	3301      	adds	r3, #1
 8006d34:	425a      	negs	r2, r3
 8006d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d3e:	bf58      	it	pl
 8006d40:	4253      	negpl	r3, r2
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	3301      	adds	r3, #1
 8006d68:	425a      	negs	r2, r3
 8006d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d72:	bf58      	it	pl
 8006d74:	4253      	negpl	r3, r2
 8006d76:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	785b      	ldrb	r3, [r3, #1]
 8006d7c:	7bfa      	ldrb	r2, [r7, #15]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d101      	bne.n	8006d86 <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 8006d82:	2301      	movs	r3, #1
 8006d84:	e00a      	b.n	8006d9c <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4413      	add	r3, r2
 8006d90:	78fa      	ldrb	r2, [r7, #3]
 8006d92:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	7bfa      	ldrb	r2, [r7, #15]
 8006d98:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006dac:	4b17      	ldr	r3, [pc, #92]	; (8006e0c <MX_SPI1_Init+0x64>)
 8006dae:	4a18      	ldr	r2, [pc, #96]	; (8006e10 <MX_SPI1_Init+0x68>)
 8006db0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006db2:	4b16      	ldr	r3, [pc, #88]	; (8006e0c <MX_SPI1_Init+0x64>)
 8006db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006db8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006dba:	4b14      	ldr	r3, [pc, #80]	; (8006e0c <MX_SPI1_Init+0x64>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006dc0:	4b12      	ldr	r3, [pc, #72]	; (8006e0c <MX_SPI1_Init+0x64>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dc6:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <MX_SPI1_Init+0x64>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006dcc:	4b0f      	ldr	r3, [pc, #60]	; (8006e0c <MX_SPI1_Init+0x64>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006dd2:	4b0e      	ldr	r3, [pc, #56]	; (8006e0c <MX_SPI1_Init+0x64>)
 8006dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006dda:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <MX_SPI1_Init+0x64>)
 8006ddc:	2210      	movs	r2, #16
 8006dde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006de0:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <MX_SPI1_Init+0x64>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006de6:	4b09      	ldr	r3, [pc, #36]	; (8006e0c <MX_SPI1_Init+0x64>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dec:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <MX_SPI1_Init+0x64>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006df2:	4b06      	ldr	r3, [pc, #24]	; (8006e0c <MX_SPI1_Init+0x64>)
 8006df4:	220a      	movs	r2, #10
 8006df6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006df8:	4804      	ldr	r0, [pc, #16]	; (8006e0c <MX_SPI1_Init+0x64>)
 8006dfa:	f005 fb0d 	bl	800c418 <HAL_SPI_Init>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006e04:	f7fe f92e 	bl	8005064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006e08:	bf00      	nop
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	200006dc 	.word	0x200006dc
 8006e10:	40013000 	.word	0x40013000

08006e14 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8006e18:	4b17      	ldr	r3, [pc, #92]	; (8006e78 <MX_SPI3_Init+0x64>)
 8006e1a:	4a18      	ldr	r2, [pc, #96]	; (8006e7c <MX_SPI3_Init+0x68>)
 8006e1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006e1e:	4b16      	ldr	r3, [pc, #88]	; (8006e78 <MX_SPI3_Init+0x64>)
 8006e20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006e24:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006e26:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <MX_SPI3_Init+0x64>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006e2c:	4b12      	ldr	r3, [pc, #72]	; (8006e78 <MX_SPI3_Init+0x64>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e32:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <MX_SPI3_Init+0x64>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006e38:	4b0f      	ldr	r3, [pc, #60]	; (8006e78 <MX_SPI3_Init+0x64>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006e3e:	4b0e      	ldr	r3, [pc, #56]	; (8006e78 <MX_SPI3_Init+0x64>)
 8006e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e44:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006e46:	4b0c      	ldr	r3, [pc, #48]	; (8006e78 <MX_SPI3_Init+0x64>)
 8006e48:	2220      	movs	r2, #32
 8006e4a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006e4c:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <MX_SPI3_Init+0x64>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006e52:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <MX_SPI3_Init+0x64>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e58:	4b07      	ldr	r3, [pc, #28]	; (8006e78 <MX_SPI3_Init+0x64>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8006e5e:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <MX_SPI3_Init+0x64>)
 8006e60:	220a      	movs	r2, #10
 8006e62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006e64:	4804      	ldr	r0, [pc, #16]	; (8006e78 <MX_SPI3_Init+0x64>)
 8006e66:	f005 fad7 	bl	800c418 <HAL_SPI_Init>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8006e70:	f7fe f8f8 	bl	8005064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006e74:	bf00      	nop
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20000684 	.word	0x20000684
 8006e7c:	40003c00 	.word	0x40003c00

08006e80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08c      	sub	sp, #48	; 0x30
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e88:	f107 031c 	add.w	r3, r7, #28
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	605a      	str	r2, [r3, #4]
 8006e92:	609a      	str	r2, [r3, #8]
 8006e94:	60da      	str	r2, [r3, #12]
 8006e96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a32      	ldr	r2, [pc, #200]	; (8006f68 <HAL_SPI_MspInit+0xe8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d12c      	bne.n	8006efc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61bb      	str	r3, [r7, #24]
 8006ea6:	4b31      	ldr	r3, [pc, #196]	; (8006f6c <HAL_SPI_MspInit+0xec>)
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eaa:	4a30      	ldr	r2, [pc, #192]	; (8006f6c <HAL_SPI_MspInit+0xec>)
 8006eac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8006eb2:	4b2e      	ldr	r3, [pc, #184]	; (8006f6c <HAL_SPI_MspInit+0xec>)
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	4b2a      	ldr	r3, [pc, #168]	; (8006f6c <HAL_SPI_MspInit+0xec>)
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec6:	4a29      	ldr	r2, [pc, #164]	; (8006f6c <HAL_SPI_MspInit+0xec>)
 8006ec8:	f043 0301 	orr.w	r3, r3, #1
 8006ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8006ece:	4b27      	ldr	r3, [pc, #156]	; (8006f6c <HAL_SPI_MspInit+0xec>)
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006eda:	23e0      	movs	r3, #224	; 0xe0
 8006edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ede:	2302      	movs	r3, #2
 8006ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006eea:	2305      	movs	r3, #5
 8006eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006eee:	f107 031c 	add.w	r3, r7, #28
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	481e      	ldr	r0, [pc, #120]	; (8006f70 <HAL_SPI_MspInit+0xf0>)
 8006ef6:	f001 fb5b 	bl	80085b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006efa:	e030      	b.n	8006f5e <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1c      	ldr	r2, [pc, #112]	; (8006f74 <HAL_SPI_MspInit+0xf4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d12b      	bne.n	8006f5e <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006f06:	2300      	movs	r3, #0
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	4b18      	ldr	r3, [pc, #96]	; (8006f6c <HAL_SPI_MspInit+0xec>)
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <HAL_SPI_MspInit+0xec>)
 8006f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f14:	6413      	str	r3, [r2, #64]	; 0x40
 8006f16:	4b15      	ldr	r3, [pc, #84]	; (8006f6c <HAL_SPI_MspInit+0xec>)
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	4b11      	ldr	r3, [pc, #68]	; (8006f6c <HAL_SPI_MspInit+0xec>)
 8006f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2a:	4a10      	ldr	r2, [pc, #64]	; (8006f6c <HAL_SPI_MspInit+0xec>)
 8006f2c:	f043 0302 	orr.w	r3, r3, #2
 8006f30:	6313      	str	r3, [r2, #48]	; 0x30
 8006f32:	4b0e      	ldr	r3, [pc, #56]	; (8006f6c <HAL_SPI_MspInit+0xec>)
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8006f3e:	2338      	movs	r3, #56	; 0x38
 8006f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f42:	2302      	movs	r3, #2
 8006f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006f4e:	2306      	movs	r3, #6
 8006f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f52:	f107 031c 	add.w	r3, r7, #28
 8006f56:	4619      	mov	r1, r3
 8006f58:	4807      	ldr	r0, [pc, #28]	; (8006f78 <HAL_SPI_MspInit+0xf8>)
 8006f5a:	f001 fb29 	bl	80085b0 <HAL_GPIO_Init>
}
 8006f5e:	bf00      	nop
 8006f60:	3730      	adds	r7, #48	; 0x30
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	40013000 	.word	0x40013000
 8006f6c:	40023800 	.word	0x40023800
 8006f70:	40020000 	.word	0x40020000
 8006f74:	40003c00 	.word	0x40003c00
 8006f78:	40020400 	.word	0x40020400

08006f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f82:	2300      	movs	r3, #0
 8006f84:	607b      	str	r3, [r7, #4]
 8006f86:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <HAL_MspInit+0x4c>)
 8006f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8a:	4a0f      	ldr	r2, [pc, #60]	; (8006fc8 <HAL_MspInit+0x4c>)
 8006f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f90:	6453      	str	r3, [r2, #68]	; 0x44
 8006f92:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <HAL_MspInit+0x4c>)
 8006f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f9a:	607b      	str	r3, [r7, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	603b      	str	r3, [r7, #0]
 8006fa2:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <HAL_MspInit+0x4c>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	4a08      	ldr	r2, [pc, #32]	; (8006fc8 <HAL_MspInit+0x4c>)
 8006fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fac:	6413      	str	r3, [r2, #64]	; 0x40
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <HAL_MspInit+0x4c>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40023800 	.word	0x40023800

08006fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006fd0:	e7fe      	b.n	8006fd0 <NMI_Handler+0x4>

08006fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006fd6:	e7fe      	b.n	8006fd6 <HardFault_Handler+0x4>

08006fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006fdc:	e7fe      	b.n	8006fdc <MemManage_Handler+0x4>

08006fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006fe2:	e7fe      	b.n	8006fe2 <BusFault_Handler+0x4>

08006fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006fe8:	e7fe      	b.n	8006fe8 <UsageFault_Handler+0x4>

08006fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006fea:	b480      	push	{r7}
 8006fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006fee:	bf00      	nop
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ffc:	bf00      	nop
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007006:	b480      	push	{r7}
 8007008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800700a:	bf00      	nop
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007018:	f000 fcd6 	bl	80079c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800701c:	bf00      	nop
 800701e:	bd80      	pop	{r7, pc}

08007020 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IRQ_Pin);
 8007024:	2010      	movs	r0, #16
 8007026:	f001 fc93 	bl	8008950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800702a:	bf00      	nop
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8007034:	4802      	ldr	r0, [pc, #8]	; (8007040 <DMA1_Stream0_IRQHandler+0x10>)
 8007036:	f001 f843 	bl	80080c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800703a:	bf00      	nop
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000410 	.word	0x20000410

08007044 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8007048:	4802      	ldr	r0, [pc, #8]	; (8007054 <DMA1_Stream1_IRQHandler+0x10>)
 800704a:	f001 f839 	bl	80080c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800704e:	bf00      	nop
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	2000035c 	.word	0x2000035c

08007058 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 800705c:	4802      	ldr	r0, [pc, #8]	; (8007068 <DMA1_Stream5_IRQHandler+0x10>)
 800705e:	f000 f9e9 	bl	8007434 <UARTDMA_DmaReceiveIrqHandler>
	return;
 8007062:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20000470 	.word	0x20000470

0800706c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007070:	4802      	ldr	r0, [pc, #8]	; (800707c <DMA1_Stream6_IRQHandler+0x10>)
 8007072:	f001 f825 	bl	80080c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8007076:	bf00      	nop
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20000824 	.word	0x20000824

08007080 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8007084:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007088:	f001 fc62 	bl	8008950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800708c:	bf00      	nop
 800708e:	bd80      	pop	{r7, pc}

08007090 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8007094:	4802      	ldr	r0, [pc, #8]	; (80070a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007096:	f005 feb4 	bl	800ce02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800709a:	bf00      	nop
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20000734 	.word	0x20000734

080070a4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80070a8:	4802      	ldr	r0, [pc, #8]	; (80070b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80070aa:	f005 feaa 	bl	800ce02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80070ae:	bf00      	nop
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	2000077c 	.word	0x2000077c

080070b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80070bc:	4802      	ldr	r0, [pc, #8]	; (80070c8 <I2C1_EV_IRQHandler+0x10>)
 80070be:	f002 fbe7 	bl	8009890 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80070c2:	bf00      	nop
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	200003bc 	.word	0x200003bc

080070cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80070d0:	4802      	ldr	r0, [pc, #8]	; (80070dc <I2C1_ER_IRQHandler+0x10>)
 80070d2:	f002 fd4e 	bl	8009b72 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80070d6:	bf00      	nop
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	200003bc 	.word	0x200003bc

080070e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 80070e4:	4803      	ldr	r0, [pc, #12]	; (80070f4 <USART2_IRQHandler+0x14>)
 80070e6:	f000 f97b 	bl	80073e0 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80070ea:	4803      	ldr	r0, [pc, #12]	; (80070f8 <USART2_IRQHandler+0x18>)
 80070ec:	f006 f94a 	bl	800d384 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80070f0:	bf00      	nop
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	20000470 	.word	0x20000470
 80070f8:	20000884 	.word	0x20000884

080070fc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8007100:	4802      	ldr	r0, [pc, #8]	; (800710c <SPI3_IRQHandler+0x10>)
 8007102:	f005 fbb5 	bl	800c870 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8007106:	bf00      	nop
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	20000684 	.word	0x20000684

08007110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
	return 1;
 8007114:	2301      	movs	r3, #1
}
 8007116:	4618      	mov	r0, r3
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <_kill>:

int _kill(int pid, int sig)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800712a:	f007 f977 	bl	800e41c <__errno>
 800712e:	4603      	mov	r3, r0
 8007130:	2216      	movs	r2, #22
 8007132:	601a      	str	r2, [r3, #0]
	return -1;
 8007134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007138:	4618      	mov	r0, r3
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <_exit>:

void _exit (int status)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007148:	f04f 31ff 	mov.w	r1, #4294967295
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff ffe7 	bl	8007120 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007152:	e7fe      	b.n	8007152 <_exit+0x12>

08007154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]
 8007164:	e00a      	b.n	800717c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007166:	f3af 8000 	nop.w
 800716a:	4601      	mov	r1, r0
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	60ba      	str	r2, [r7, #8]
 8007172:	b2ca      	uxtb	r2, r1
 8007174:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	3301      	adds	r3, #1
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	429a      	cmp	r2, r3
 8007182:	dbf0      	blt.n	8007166 <_read+0x12>
	}

return len;
 8007184:	687b      	ldr	r3, [r7, #4]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b086      	sub	sp, #24
 8007192:	af00      	add	r7, sp, #0
 8007194:	60f8      	str	r0, [r7, #12]
 8007196:	60b9      	str	r1, [r7, #8]
 8007198:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800719a:	2300      	movs	r3, #0
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	e009      	b.n	80071b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	60ba      	str	r2, [r7, #8]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	3301      	adds	r3, #1
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	dbf1      	blt.n	80071a0 <_write+0x12>
	}
	return len;
 80071bc:	687b      	ldr	r3, [r7, #4]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <_close>:

int _close(int file)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
	return -1;
 80071ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80071ee:	605a      	str	r2, [r3, #4]
	return 0;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <_isatty>:

int _isatty(int file)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
	return 1;
 8007206:	2301      	movs	r3, #1
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
	return 0;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
	...

08007230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007238:	4a14      	ldr	r2, [pc, #80]	; (800728c <_sbrk+0x5c>)
 800723a:	4b15      	ldr	r3, [pc, #84]	; (8007290 <_sbrk+0x60>)
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007244:	4b13      	ldr	r3, [pc, #76]	; (8007294 <_sbrk+0x64>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d102      	bne.n	8007252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800724c:	4b11      	ldr	r3, [pc, #68]	; (8007294 <_sbrk+0x64>)
 800724e:	4a12      	ldr	r2, [pc, #72]	; (8007298 <_sbrk+0x68>)
 8007250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007252:	4b10      	ldr	r3, [pc, #64]	; (8007294 <_sbrk+0x64>)
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4413      	add	r3, r2
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	429a      	cmp	r2, r3
 800725e:	d207      	bcs.n	8007270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007260:	f007 f8dc 	bl	800e41c <__errno>
 8007264:	4603      	mov	r3, r0
 8007266:	220c      	movs	r2, #12
 8007268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800726a:	f04f 33ff 	mov.w	r3, #4294967295
 800726e:	e009      	b.n	8007284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007270:	4b08      	ldr	r3, [pc, #32]	; (8007294 <_sbrk+0x64>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007276:	4b07      	ldr	r3, [pc, #28]	; (8007294 <_sbrk+0x64>)
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4413      	add	r3, r2
 800727e:	4a05      	ldr	r2, [pc, #20]	; (8007294 <_sbrk+0x64>)
 8007280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007282:	68fb      	ldr	r3, [r7, #12]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20020000 	.word	0x20020000
 8007290:	00000400 	.word	0x00000400
 8007294:	20000280 	.word	0x20000280
 8007298:	200008e0 	.word	0x200008e0

0800729c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80072a0:	4b06      	ldr	r3, [pc, #24]	; (80072bc <SystemInit+0x20>)
 80072a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a6:	4a05      	ldr	r2, [pc, #20]	; (80072bc <SystemInit+0x20>)
 80072a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80072b0:	bf00      	nop
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	e000ed00 	.word	0xe000ed00

080072c0 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80072c4:	4b0e      	ldr	r3, [pc, #56]	; (8007300 <MX_TIM10_Init+0x40>)
 80072c6:	4a0f      	ldr	r2, [pc, #60]	; (8007304 <MX_TIM10_Init+0x44>)
 80072c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80072ca:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <MX_TIM10_Init+0x40>)
 80072cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80072d0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072d2:	4b0b      	ldr	r3, [pc, #44]	; (8007300 <MX_TIM10_Init+0x40>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80072d8:	4b09      	ldr	r3, [pc, #36]	; (8007300 <MX_TIM10_Init+0x40>)
 80072da:	f242 720f 	movw	r2, #9999	; 0x270f
 80072de:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072e0:	4b07      	ldr	r3, [pc, #28]	; (8007300 <MX_TIM10_Init+0x40>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072e6:	4b06      	ldr	r3, [pc, #24]	; (8007300 <MX_TIM10_Init+0x40>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80072ec:	4804      	ldr	r0, [pc, #16]	; (8007300 <MX_TIM10_Init+0x40>)
 80072ee:	f005 fca7 	bl	800cc40 <HAL_TIM_Base_Init>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80072f8:	f7fd feb4 	bl	8005064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80072fc:	bf00      	nop
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20000734 	.word	0x20000734
 8007304:	40014400 	.word	0x40014400

08007308 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800730c:	4b0f      	ldr	r3, [pc, #60]	; (800734c <MX_TIM11_Init+0x44>)
 800730e:	4a10      	ldr	r2, [pc, #64]	; (8007350 <MX_TIM11_Init+0x48>)
 8007310:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8007312:	4b0e      	ldr	r3, [pc, #56]	; (800734c <MX_TIM11_Init+0x44>)
 8007314:	f643 2297 	movw	r2, #14999	; 0x3a97
 8007318:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800731a:	4b0c      	ldr	r3, [pc, #48]	; (800734c <MX_TIM11_Init+0x44>)
 800731c:	2200      	movs	r2, #0
 800731e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <MX_TIM11_Init+0x44>)
 8007322:	f247 522f 	movw	r2, #29999	; 0x752f
 8007326:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8007328:	4b08      	ldr	r3, [pc, #32]	; (800734c <MX_TIM11_Init+0x44>)
 800732a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800732e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007330:	4b06      	ldr	r3, [pc, #24]	; (800734c <MX_TIM11_Init+0x44>)
 8007332:	2200      	movs	r2, #0
 8007334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8007336:	4805      	ldr	r0, [pc, #20]	; (800734c <MX_TIM11_Init+0x44>)
 8007338:	f005 fc82 	bl	800cc40 <HAL_TIM_Base_Init>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 8007342:	f7fd fe8f 	bl	8005064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8007346:	bf00      	nop
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	2000077c 	.word	0x2000077c
 8007350:	40014800 	.word	0x40014800

08007354 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1c      	ldr	r2, [pc, #112]	; (80073d4 <HAL_TIM_Base_MspInit+0x80>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d116      	bne.n	8007394 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <HAL_TIM_Base_MspInit+0x84>)
 800736c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736e:	4a1a      	ldr	r2, [pc, #104]	; (80073d8 <HAL_TIM_Base_MspInit+0x84>)
 8007370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007374:	6453      	str	r3, [r2, #68]	; 0x44
 8007376:	4b18      	ldr	r3, [pc, #96]	; (80073d8 <HAL_TIM_Base_MspInit+0x84>)
 8007378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007382:	2200      	movs	r2, #0
 8007384:	2100      	movs	r1, #0
 8007386:	2019      	movs	r0, #25
 8007388:	f000 fca1 	bl	8007cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800738c:	2019      	movs	r0, #25
 800738e:	f000 fcba 	bl	8007d06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8007392:	e01a      	b.n	80073ca <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a10      	ldr	r2, [pc, #64]	; (80073dc <HAL_TIM_Base_MspInit+0x88>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d115      	bne.n	80073ca <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800739e:	2300      	movs	r3, #0
 80073a0:	60bb      	str	r3, [r7, #8]
 80073a2:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <HAL_TIM_Base_MspInit+0x84>)
 80073a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a6:	4a0c      	ldr	r2, [pc, #48]	; (80073d8 <HAL_TIM_Base_MspInit+0x84>)
 80073a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073ac:	6453      	str	r3, [r2, #68]	; 0x44
 80073ae:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <HAL_TIM_Base_MspInit+0x84>)
 80073b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073b6:	60bb      	str	r3, [r7, #8]
 80073b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	201a      	movs	r0, #26
 80073c0:	f000 fc85 	bl	8007cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80073c4:	201a      	movs	r0, #26
 80073c6:	f000 fc9e 	bl	8007d06 <HAL_NVIC_EnableIRQ>
}
 80073ca:	bf00      	nop
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	40014400 	.word	0x40014400
 80073d8:	40023800 	.word	0x40023800
 80073dc:	40014800 	.word	0x40014800

080073e0 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0310 	and.w	r3, r3, #16
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d017      	beq.n	8007428 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0201 	bic.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	60fb      	str	r3, [r7, #12]
	}
}
 8007428:	bf00      	nop
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007444:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b00      	cmp	r3, #0
 8007456:	d056      	beq.n	8007506 <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007460:	2220      	movs	r2, #32
 8007462:	409a      	lsls	r2, r3
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	b29b      	uxth	r3, r3
 8007474:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007478:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3304      	adds	r3, #4
 800747e:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8007480:	2300      	movs	r3, #0
 8007482:	82fb      	strh	r3, [r7, #22]
 8007484:	e01a      	b.n	80074bc <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800748c:	8afb      	ldrh	r3, [r7, #22]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	4413      	add	r3, r2
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	4619      	mov	r1, r3
 8007496:	f7ff fc5e 	bl	8006d56 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 800749a:	8afb      	ldrh	r3, [r7, #22]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	4413      	add	r3, r2
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b0a      	cmp	r3, #10
 80074a4:	d107      	bne.n	80074b6 <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80074ac:	3301      	adds	r3, #1
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 80074b6:	8afb      	ldrh	r3, [r7, #22]
 80074b8:	3301      	adds	r3, #1
 80074ba:	82fb      	strh	r3, [r7, #22]
 80074bc:	8afa      	ldrh	r2, [r7, #22]
 80074be:	89fb      	ldrh	r3, [r7, #14]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d3e0      	bcc.n	8007486 <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074cc:	223f      	movs	r2, #63	; 0x3f
 80074ce:	409a      	lsls	r2, r3
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	1d1a      	adds	r2, r3, #4
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2240      	movs	r2, #64	; 0x40
 80074ec:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f042 0201 	orr.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]
	}
}
 8007506:	bf00      	nop
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b082      	sub	sp, #8
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	460b      	mov	r3, r1
 8007518:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f203 1347 	addw	r3, r3, #327	; 0x147
 8007520:	78fa      	ldrb	r2, [r7, #3]
 8007522:	4611      	mov	r1, r2
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff fc16 	bl	8006d56 <RB_Write>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8007552:	2b00      	cmp	r3, #0
 8007554:	d01f      	beq.n	8007596 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8007556:	e013      	b.n	8007580 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b0a      	cmp	r3, #10
 800755e:	d10c      	bne.n	800757a <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800756c:	3b01      	subs	r3, #1
 800756e:	b2da      	uxtb	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 8007576:	2300      	movs	r3, #0
 8007578:	e00e      	b.n	8007598 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	3301      	adds	r3, #1
 800757e:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3344      	adds	r3, #68	; 0x44
 8007584:	68f9      	ldr	r1, [r7, #12]
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff fbbc 	bl	8006d04 <RB_Read>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0e2      	beq.n	8007558 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 8007592:	2300      	movs	r3, #0
 8007594:	e000      	b.n	8007598 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 8007596:	2301      	movs	r3, #1
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80075ae:	e012      	b.n	80075d6 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 80075b0:	7afb      	ldrb	r3, [r7, #11]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff ffaa 	bl	800750e <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3301      	adds	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	2b0a      	cmp	r3, #10
 80075c4:	d107      	bne.n	80075d6 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 80075cc:	3301      	adds	r3, #1
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	72fb      	strb	r3, [r7, #11]
 80075dc:	7afb      	ldrb	r3, [r7, #11]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e6      	bne.n	80075b0 <UARTDMA_Print+0x10>
		}
	}
}
 80075e2:	bf00      	nop
 80075e4:	bf00      	nop
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 80075fe:	2301      	movs	r3, #1
 8007600:	e000      	b.n	8007604 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8007618:	2300      	movs	r3, #0
 800761a:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007622:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b02      	cmp	r3, #2
 800762a:	d028      	beq.n	800767e <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800762c:	e013      	b.n	8007656 <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 800762e:	7b7b      	ldrb	r3, [r7, #13]
 8007630:	2b0a      	cmp	r3, #10
 8007632:	d107      	bne.n	8007644 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800763a:	3b01      	subs	r3, #1
 800763c:	b2da      	uxtb	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 8007644:	89fb      	ldrh	r3, [r7, #14]
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	81fa      	strh	r2, [r7, #14]
 800764a:	4619      	mov	r1, r3
 800764c:	7b7a      	ldrb	r2, [r7, #13]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	440b      	add	r3, r1
 8007652:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f203 1347 	addw	r3, r3, #327	; 0x147
 800765c:	f107 020d 	add.w	r2, r7, #13
 8007660:	4611      	mov	r1, r2
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff fb4e 	bl	8006d04 <RB_Read>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0df      	beq.n	800762e <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	33c7      	adds	r3, #199	; 0xc7
 8007676:	89fa      	ldrh	r2, [r7, #14]
 8007678:	4619      	mov	r1, r3
 800767a:	f005 fdd5 	bl	800d228 <HAL_UART_Transmit_DMA>
	}
}
 800767e:	bf00      	nop
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0210 	orr.w	r2, r2, #16
 80076a8:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f042 0210 	orr.w	r2, r2, #16
 80076c0:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0210 	orr.w	r2, r2, #16
 80076d8:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6818      	ldr	r0, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3304      	adds	r3, #4
 80076e2:	2240      	movs	r2, #64	; 0x40
 80076e4:	4619      	mov	r1, r3
 80076e6:	f005 fe1d 	bl	800d324 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0208 	bic.w	r2, r2, #8
 8007700:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0208 	bic.w	r2, r2, #8
 8007718:	601a      	str	r2, [r3, #0]
}
 800771a:	bf00      	nop
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007728:	4b11      	ldr	r3, [pc, #68]	; (8007770 <MX_USART2_UART_Init+0x4c>)
 800772a:	4a12      	ldr	r2, [pc, #72]	; (8007774 <MX_USART2_UART_Init+0x50>)
 800772c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800772e:	4b10      	ldr	r3, [pc, #64]	; (8007770 <MX_USART2_UART_Init+0x4c>)
 8007730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007736:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <MX_USART2_UART_Init+0x4c>)
 8007738:	2200      	movs	r2, #0
 800773a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800773c:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <MX_USART2_UART_Init+0x4c>)
 800773e:	2200      	movs	r2, #0
 8007740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007742:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <MX_USART2_UART_Init+0x4c>)
 8007744:	2200      	movs	r2, #0
 8007746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007748:	4b09      	ldr	r3, [pc, #36]	; (8007770 <MX_USART2_UART_Init+0x4c>)
 800774a:	220c      	movs	r2, #12
 800774c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800774e:	4b08      	ldr	r3, [pc, #32]	; (8007770 <MX_USART2_UART_Init+0x4c>)
 8007750:	2200      	movs	r2, #0
 8007752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007754:	4b06      	ldr	r3, [pc, #24]	; (8007770 <MX_USART2_UART_Init+0x4c>)
 8007756:	2200      	movs	r2, #0
 8007758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800775a:	4805      	ldr	r0, [pc, #20]	; (8007770 <MX_USART2_UART_Init+0x4c>)
 800775c:	f005 fd16 	bl	800d18c <HAL_UART_Init>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007766:	f7fd fc7d 	bl	8005064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800776a:	bf00      	nop
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20000884 	.word	0x20000884
 8007774:	40004400 	.word	0x40004400

08007778 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	; 0x28
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007780:	f107 0314 	add.w	r3, r7, #20
 8007784:	2200      	movs	r2, #0
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	605a      	str	r2, [r3, #4]
 800778a:	609a      	str	r2, [r3, #8]
 800778c:	60da      	str	r2, [r3, #12]
 800778e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a47      	ldr	r2, [pc, #284]	; (80078b4 <HAL_UART_MspInit+0x13c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	f040 8088 	bne.w	80078ac <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800779c:	2300      	movs	r3, #0
 800779e:	613b      	str	r3, [r7, #16]
 80077a0:	4b45      	ldr	r3, [pc, #276]	; (80078b8 <HAL_UART_MspInit+0x140>)
 80077a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a4:	4a44      	ldr	r2, [pc, #272]	; (80078b8 <HAL_UART_MspInit+0x140>)
 80077a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077aa:	6413      	str	r3, [r2, #64]	; 0x40
 80077ac:	4b42      	ldr	r3, [pc, #264]	; (80078b8 <HAL_UART_MspInit+0x140>)
 80077ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b4:	613b      	str	r3, [r7, #16]
 80077b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	4b3e      	ldr	r3, [pc, #248]	; (80078b8 <HAL_UART_MspInit+0x140>)
 80077be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c0:	4a3d      	ldr	r2, [pc, #244]	; (80078b8 <HAL_UART_MspInit+0x140>)
 80077c2:	f043 0301 	orr.w	r3, r3, #1
 80077c6:	6313      	str	r3, [r2, #48]	; 0x30
 80077c8:	4b3b      	ldr	r3, [pc, #236]	; (80078b8 <HAL_UART_MspInit+0x140>)
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80077d4:	230c      	movs	r3, #12
 80077d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077d8:	2302      	movs	r3, #2
 80077da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077e0:	2303      	movs	r3, #3
 80077e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80077e4:	2307      	movs	r3, #7
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077e8:	f107 0314 	add.w	r3, r7, #20
 80077ec:	4619      	mov	r1, r3
 80077ee:	4833      	ldr	r0, [pc, #204]	; (80078bc <HAL_UART_MspInit+0x144>)
 80077f0:	f000 fede 	bl	80085b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80077f4:	4b32      	ldr	r3, [pc, #200]	; (80078c0 <HAL_UART_MspInit+0x148>)
 80077f6:	4a33      	ldr	r2, [pc, #204]	; (80078c4 <HAL_UART_MspInit+0x14c>)
 80077f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80077fa:	4b31      	ldr	r3, [pc, #196]	; (80078c0 <HAL_UART_MspInit+0x148>)
 80077fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007800:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007802:	4b2f      	ldr	r3, [pc, #188]	; (80078c0 <HAL_UART_MspInit+0x148>)
 8007804:	2200      	movs	r2, #0
 8007806:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007808:	4b2d      	ldr	r3, [pc, #180]	; (80078c0 <HAL_UART_MspInit+0x148>)
 800780a:	2200      	movs	r2, #0
 800780c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800780e:	4b2c      	ldr	r3, [pc, #176]	; (80078c0 <HAL_UART_MspInit+0x148>)
 8007810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007814:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007816:	4b2a      	ldr	r3, [pc, #168]	; (80078c0 <HAL_UART_MspInit+0x148>)
 8007818:	2200      	movs	r2, #0
 800781a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800781c:	4b28      	ldr	r3, [pc, #160]	; (80078c0 <HAL_UART_MspInit+0x148>)
 800781e:	2200      	movs	r2, #0
 8007820:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007822:	4b27      	ldr	r3, [pc, #156]	; (80078c0 <HAL_UART_MspInit+0x148>)
 8007824:	2200      	movs	r2, #0
 8007826:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007828:	4b25      	ldr	r3, [pc, #148]	; (80078c0 <HAL_UART_MspInit+0x148>)
 800782a:	2200      	movs	r2, #0
 800782c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800782e:	4b24      	ldr	r3, [pc, #144]	; (80078c0 <HAL_UART_MspInit+0x148>)
 8007830:	2200      	movs	r2, #0
 8007832:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007834:	4822      	ldr	r0, [pc, #136]	; (80078c0 <HAL_UART_MspInit+0x148>)
 8007836:	f000 faab 	bl	8007d90 <HAL_DMA_Init>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8007840:	f7fd fc10 	bl	8005064 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a1e      	ldr	r2, [pc, #120]	; (80078c0 <HAL_UART_MspInit+0x148>)
 8007848:	639a      	str	r2, [r3, #56]	; 0x38
 800784a:	4a1d      	ldr	r2, [pc, #116]	; (80078c0 <HAL_UART_MspInit+0x148>)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007850:	4b1d      	ldr	r3, [pc, #116]	; (80078c8 <HAL_UART_MspInit+0x150>)
 8007852:	4a1e      	ldr	r2, [pc, #120]	; (80078cc <HAL_UART_MspInit+0x154>)
 8007854:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007856:	4b1c      	ldr	r3, [pc, #112]	; (80078c8 <HAL_UART_MspInit+0x150>)
 8007858:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800785c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800785e:	4b1a      	ldr	r3, [pc, #104]	; (80078c8 <HAL_UART_MspInit+0x150>)
 8007860:	2240      	movs	r2, #64	; 0x40
 8007862:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007864:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <HAL_UART_MspInit+0x150>)
 8007866:	2200      	movs	r2, #0
 8007868:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800786a:	4b17      	ldr	r3, [pc, #92]	; (80078c8 <HAL_UART_MspInit+0x150>)
 800786c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007870:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007872:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <HAL_UART_MspInit+0x150>)
 8007874:	2200      	movs	r2, #0
 8007876:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007878:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <HAL_UART_MspInit+0x150>)
 800787a:	2200      	movs	r2, #0
 800787c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800787e:	4b12      	ldr	r3, [pc, #72]	; (80078c8 <HAL_UART_MspInit+0x150>)
 8007880:	2200      	movs	r2, #0
 8007882:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007884:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <HAL_UART_MspInit+0x150>)
 8007886:	2200      	movs	r2, #0
 8007888:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800788a:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <HAL_UART_MspInit+0x150>)
 800788c:	2200      	movs	r2, #0
 800788e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007890:	480d      	ldr	r0, [pc, #52]	; (80078c8 <HAL_UART_MspInit+0x150>)
 8007892:	f000 fa7d 	bl	8007d90 <HAL_DMA_Init>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800789c:	f7fd fbe2 	bl	8005064 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a09      	ldr	r2, [pc, #36]	; (80078c8 <HAL_UART_MspInit+0x150>)
 80078a4:	635a      	str	r2, [r3, #52]	; 0x34
 80078a6:	4a08      	ldr	r2, [pc, #32]	; (80078c8 <HAL_UART_MspInit+0x150>)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80078ac:	bf00      	nop
 80078ae:	3728      	adds	r7, #40	; 0x28
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	40004400 	.word	0x40004400
 80078b8:	40023800 	.word	0x40023800
 80078bc:	40020000 	.word	0x40020000
 80078c0:	200007c4 	.word	0x200007c4
 80078c4:	40026088 	.word	0x40026088
 80078c8:	20000824 	.word	0x20000824
 80078cc:	400260a0 	.word	0x400260a0

080078d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80078d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80078d4:	480d      	ldr	r0, [pc, #52]	; (800790c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80078d6:	490e      	ldr	r1, [pc, #56]	; (8007910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80078d8:	4a0e      	ldr	r2, [pc, #56]	; (8007914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80078da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80078dc:	e002      	b.n	80078e4 <LoopCopyDataInit>

080078de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80078de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80078e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80078e2:	3304      	adds	r3, #4

080078e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80078e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80078e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80078e8:	d3f9      	bcc.n	80078de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80078ea:	4a0b      	ldr	r2, [pc, #44]	; (8007918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80078ec:	4c0b      	ldr	r4, [pc, #44]	; (800791c <LoopFillZerobss+0x26>)
  movs r3, #0
 80078ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80078f0:	e001      	b.n	80078f6 <LoopFillZerobss>

080078f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80078f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80078f4:	3204      	adds	r2, #4

080078f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80078f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80078f8:	d3fb      	bcc.n	80078f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80078fa:	f7ff fccf 	bl	800729c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80078fe:	f006 fd93 	bl	800e428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007902:	f7fd fa73 	bl	8004dec <main>
  bx  lr    
 8007906:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800790c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007910:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8007914:	08026bd8 	.word	0x08026bd8
  ldr r2, =_sbss
 8007918:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 800791c:	200008dc 	.word	0x200008dc

08007920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007920:	e7fe      	b.n	8007920 <ADC_IRQHandler>
	...

08007924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007928:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <HAL_Init+0x40>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a0d      	ldr	r2, [pc, #52]	; (8007964 <HAL_Init+0x40>)
 800792e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007934:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <HAL_Init+0x40>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a0a      	ldr	r2, [pc, #40]	; (8007964 <HAL_Init+0x40>)
 800793a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800793e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007940:	4b08      	ldr	r3, [pc, #32]	; (8007964 <HAL_Init+0x40>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a07      	ldr	r2, [pc, #28]	; (8007964 <HAL_Init+0x40>)
 8007946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800794c:	2003      	movs	r0, #3
 800794e:	f000 f9b3 	bl	8007cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007952:	2000      	movs	r0, #0
 8007954:	f000 f808 	bl	8007968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007958:	f7ff fb10 	bl	8006f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	40023c00 	.word	0x40023c00

08007968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007970:	4b12      	ldr	r3, [pc, #72]	; (80079bc <HAL_InitTick+0x54>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	4b12      	ldr	r3, [pc, #72]	; (80079c0 <HAL_InitTick+0x58>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	4619      	mov	r1, r3
 800797a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800797e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007982:	fbb2 f3f3 	udiv	r3, r2, r3
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f9d9 	bl	8007d3e <HAL_SYSTICK_Config>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e00e      	b.n	80079b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b0f      	cmp	r3, #15
 800799a:	d80a      	bhi.n	80079b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800799c:	2200      	movs	r2, #0
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	f04f 30ff 	mov.w	r0, #4294967295
 80079a4:	f000 f993 	bl	8007cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80079a8:	4a06      	ldr	r2, [pc, #24]	; (80079c4 <HAL_InitTick+0x5c>)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	e000      	b.n	80079b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	20000034 	.word	0x20000034
 80079c0:	2000003c 	.word	0x2000003c
 80079c4:	20000038 	.word	0x20000038

080079c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80079cc:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <HAL_IncTick+0x20>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
 80079d2:	4b06      	ldr	r3, [pc, #24]	; (80079ec <HAL_IncTick+0x24>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4413      	add	r3, r2
 80079d8:	4a04      	ldr	r2, [pc, #16]	; (80079ec <HAL_IncTick+0x24>)
 80079da:	6013      	str	r3, [r2, #0]
}
 80079dc:	bf00      	nop
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	2000003c 	.word	0x2000003c
 80079ec:	200008c8 	.word	0x200008c8

080079f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
  return uwTick;
 80079f4:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <HAL_GetTick+0x14>)
 80079f6:	681b      	ldr	r3, [r3, #0]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	200008c8 	.word	0x200008c8

08007a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a10:	f7ff ffee 	bl	80079f0 <HAL_GetTick>
 8007a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a20:	d005      	beq.n	8007a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a22:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <HAL_Delay+0x44>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007a2e:	bf00      	nop
 8007a30:	f7ff ffde 	bl	80079f0 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d8f7      	bhi.n	8007a30 <HAL_Delay+0x28>
  {
  }
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	2000003c 	.word	0x2000003c

08007a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a60:	4b0c      	ldr	r3, [pc, #48]	; (8007a94 <__NVIC_SetPriorityGrouping+0x44>)
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a82:	4a04      	ldr	r2, [pc, #16]	; (8007a94 <__NVIC_SetPriorityGrouping+0x44>)
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	60d3      	str	r3, [r2, #12]
}
 8007a88:	bf00      	nop
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	e000ed00 	.word	0xe000ed00

08007a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a9c:	4b04      	ldr	r3, [pc, #16]	; (8007ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	0a1b      	lsrs	r3, r3, #8
 8007aa2:	f003 0307 	and.w	r3, r3, #7
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	e000ed00 	.word	0xe000ed00

08007ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4603      	mov	r3, r0
 8007abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	db0b      	blt.n	8007ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ac6:	79fb      	ldrb	r3, [r7, #7]
 8007ac8:	f003 021f 	and.w	r2, r3, #31
 8007acc:	4907      	ldr	r1, [pc, #28]	; (8007aec <__NVIC_EnableIRQ+0x38>)
 8007ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ad2:	095b      	lsrs	r3, r3, #5
 8007ad4:	2001      	movs	r0, #1
 8007ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8007ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	e000e100 	.word	0xe000e100

08007af0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	db12      	blt.n	8007b28 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	f003 021f 	and.w	r2, r3, #31
 8007b08:	490a      	ldr	r1, [pc, #40]	; (8007b34 <__NVIC_DisableIRQ+0x44>)
 8007b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	2001      	movs	r0, #1
 8007b12:	fa00 f202 	lsl.w	r2, r0, r2
 8007b16:	3320      	adds	r3, #32
 8007b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007b1c:	f3bf 8f4f 	dsb	sy
}
 8007b20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007b22:	f3bf 8f6f 	isb	sy
}
 8007b26:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	e000e100 	.word	0xe000e100

08007b38 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	db0e      	blt.n	8007b68 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8007b4a:	4a0b      	ldr	r2, [pc, #44]	; (8007b78 <__NVIC_GetPendingIRQ+0x40>)
 8007b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b50:	095b      	lsrs	r3, r3, #5
 8007b52:	3340      	adds	r3, #64	; 0x40
 8007b54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007b58:	79fb      	ldrb	r3, [r7, #7]
 8007b5a:	f003 031f 	and.w	r3, r3, #31
 8007b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	e000      	b.n	8007b6a <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8007b68:	2300      	movs	r3, #0
  }
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	e000e100 	.word	0xe000e100

08007b7c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	db0c      	blt.n	8007ba8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	f003 021f 	and.w	r2, r3, #31
 8007b94:	4907      	ldr	r1, [pc, #28]	; (8007bb4 <__NVIC_ClearPendingIRQ+0x38>)
 8007b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b9a:	095b      	lsrs	r3, r3, #5
 8007b9c:	2001      	movs	r0, #1
 8007b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8007ba2:	3360      	adds	r3, #96	; 0x60
 8007ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	e000e100 	.word	0xe000e100

08007bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	6039      	str	r1, [r7, #0]
 8007bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	db0a      	blt.n	8007be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	490c      	ldr	r1, [pc, #48]	; (8007c04 <__NVIC_SetPriority+0x4c>)
 8007bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bd6:	0112      	lsls	r2, r2, #4
 8007bd8:	b2d2      	uxtb	r2, r2
 8007bda:	440b      	add	r3, r1
 8007bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007be0:	e00a      	b.n	8007bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	4908      	ldr	r1, [pc, #32]	; (8007c08 <__NVIC_SetPriority+0x50>)
 8007be8:	79fb      	ldrb	r3, [r7, #7]
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	3b04      	subs	r3, #4
 8007bf0:	0112      	lsls	r2, r2, #4
 8007bf2:	b2d2      	uxtb	r2, r2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	761a      	strb	r2, [r3, #24]
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	e000e100 	.word	0xe000e100
 8007c08:	e000ed00 	.word	0xe000ed00

08007c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b089      	sub	sp, #36	; 0x24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f003 0307 	and.w	r3, r3, #7
 8007c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	f1c3 0307 	rsb	r3, r3, #7
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	bf28      	it	cs
 8007c2a:	2304      	movcs	r3, #4
 8007c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	3304      	adds	r3, #4
 8007c32:	2b06      	cmp	r3, #6
 8007c34:	d902      	bls.n	8007c3c <NVIC_EncodePriority+0x30>
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	3b03      	subs	r3, #3
 8007c3a:	e000      	b.n	8007c3e <NVIC_EncodePriority+0x32>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c40:	f04f 32ff 	mov.w	r2, #4294967295
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4a:	43da      	mvns	r2, r3
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	401a      	ands	r2, r3
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c54:	f04f 31ff 	mov.w	r1, #4294967295
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c5e:	43d9      	mvns	r1, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c64:	4313      	orrs	r3, r2
         );
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3724      	adds	r7, #36	; 0x24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
	...

08007c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c84:	d301      	bcc.n	8007c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c86:	2301      	movs	r3, #1
 8007c88:	e00f      	b.n	8007caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c8a:	4a0a      	ldr	r2, [pc, #40]	; (8007cb4 <SysTick_Config+0x40>)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c92:	210f      	movs	r1, #15
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	f7ff ff8e 	bl	8007bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c9c:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <SysTick_Config+0x40>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ca2:	4b04      	ldr	r3, [pc, #16]	; (8007cb4 <SysTick_Config+0x40>)
 8007ca4:	2207      	movs	r2, #7
 8007ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	e000e010 	.word	0xe000e010

08007cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fec5 	bl	8007a50 <__NVIC_SetPriorityGrouping>
}
 8007cc6:	bf00      	nop
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b086      	sub	sp, #24
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	607a      	str	r2, [r7, #4]
 8007cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ce0:	f7ff feda 	bl	8007a98 <__NVIC_GetPriorityGrouping>
 8007ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	68b9      	ldr	r1, [r7, #8]
 8007cea:	6978      	ldr	r0, [r7, #20]
 8007cec:	f7ff ff8e 	bl	8007c0c <NVIC_EncodePriority>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff ff5d 	bl	8007bb8 <__NVIC_SetPriority>
}
 8007cfe:	bf00      	nop
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7ff fecd 	bl	8007ab4 <__NVIC_EnableIRQ>
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	4603      	mov	r3, r0
 8007d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff fedd 	bl	8007af0 <__NVIC_DisableIRQ>
}
 8007d36:	bf00      	nop
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7ff ff94 	bl	8007c74 <SysTick_Config>
 8007d4c:	4603      	mov	r3, r0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8007d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7ff fee7 	bl	8007b38 <__NVIC_GetPendingIRQ>
 8007d6a:	4603      	mov	r3, r0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7ff fefa 	bl	8007b7c <__NVIC_ClearPendingIRQ>
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007d9c:	f7ff fe28 	bl	80079f0 <HAL_GetTick>
 8007da0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e099      	b.n	8007ee0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 0201 	bic.w	r2, r2, #1
 8007dca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dcc:	e00f      	b.n	8007dee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007dce:	f7ff fe0f 	bl	80079f0 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	2b05      	cmp	r3, #5
 8007dda:	d908      	bls.n	8007dee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2220      	movs	r2, #32
 8007de0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2203      	movs	r2, #3
 8007de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e078      	b.n	8007ee0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e8      	bne.n	8007dce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	4b38      	ldr	r3, [pc, #224]	; (8007ee8 <HAL_DMA_Init+0x158>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	d107      	bne.n	8007e58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e50:	4313      	orrs	r3, r2
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f023 0307 	bic.w	r3, r3, #7
 8007e6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d117      	bne.n	8007eb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00e      	beq.n	8007eb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fb0f 	bl	80084b8 <DMA_CheckFifoParam>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d008      	beq.n	8007eb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2240      	movs	r2, #64	; 0x40
 8007ea4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e016      	b.n	8007ee0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fac6 	bl	800844c <DMA_CalcBaseAndBitshift>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec8:	223f      	movs	r2, #63	; 0x3f
 8007eca:	409a      	lsls	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	f010803f 	.word	0xf010803f

08007eec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d101      	bne.n	8007f12 <HAL_DMA_Start_IT+0x26>
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e040      	b.n	8007f94 <HAL_DMA_Start_IT+0xa8>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d12f      	bne.n	8007f86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2202      	movs	r2, #2
 8007f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 fa58 	bl	80083f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f44:	223f      	movs	r2, #63	; 0x3f
 8007f46:	409a      	lsls	r2, r3
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0216 	orr.w	r2, r2, #22
 8007f5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d007      	beq.n	8007f74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0208 	orr.w	r2, r2, #8
 8007f72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0201 	orr.w	r2, r2, #1
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	e005      	b.n	8007f92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007f8e:	2302      	movs	r3, #2
 8007f90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007faa:	f7ff fd21 	bl	80079f0 <HAL_GetTick>
 8007fae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d008      	beq.n	8007fce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2280      	movs	r2, #128	; 0x80
 8007fc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e052      	b.n	8008074 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0216 	bic.w	r2, r2, #22
 8007fdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	695a      	ldr	r2, [r3, #20]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d103      	bne.n	8007ffe <HAL_DMA_Abort+0x62>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d007      	beq.n	800800e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0208 	bic.w	r2, r2, #8
 800800c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0201 	bic.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800801e:	e013      	b.n	8008048 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008020:	f7ff fce6 	bl	80079f0 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b05      	cmp	r3, #5
 800802c:	d90c      	bls.n	8008048 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2203      	movs	r2, #3
 8008038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e015      	b.n	8008074 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1e4      	bne.n	8008020 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805a:	223f      	movs	r2, #63	; 0x3f
 800805c:	409a      	lsls	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d004      	beq.n	800809a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2280      	movs	r2, #128	; 0x80
 8008094:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e00c      	b.n	80080b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2205      	movs	r2, #5
 800809e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 0201 	bic.w	r2, r2, #1
 80080b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80080cc:	4b92      	ldr	r3, [pc, #584]	; (8008318 <HAL_DMA_IRQHandler+0x258>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a92      	ldr	r2, [pc, #584]	; (800831c <HAL_DMA_IRQHandler+0x25c>)
 80080d2:	fba2 2303 	umull	r2, r3, r2, r3
 80080d6:	0a9b      	lsrs	r3, r3, #10
 80080d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ea:	2208      	movs	r2, #8
 80080ec:	409a      	lsls	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4013      	ands	r3, r2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d01a      	beq.n	800812c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b00      	cmp	r3, #0
 8008102:	d013      	beq.n	800812c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0204 	bic.w	r2, r2, #4
 8008112:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008118:	2208      	movs	r2, #8
 800811a:	409a      	lsls	r2, r3
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008124:	f043 0201 	orr.w	r2, r3, #1
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008130:	2201      	movs	r2, #1
 8008132:	409a      	lsls	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4013      	ands	r3, r2
 8008138:	2b00      	cmp	r3, #0
 800813a:	d012      	beq.n	8008162 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00b      	beq.n	8008162 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800814e:	2201      	movs	r2, #1
 8008150:	409a      	lsls	r2, r3
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800815a:	f043 0202 	orr.w	r2, r3, #2
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008166:	2204      	movs	r2, #4
 8008168:	409a      	lsls	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4013      	ands	r3, r2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d012      	beq.n	8008198 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0302 	and.w	r3, r3, #2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00b      	beq.n	8008198 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008184:	2204      	movs	r2, #4
 8008186:	409a      	lsls	r2, r3
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008190:	f043 0204 	orr.w	r2, r3, #4
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800819c:	2210      	movs	r2, #16
 800819e:	409a      	lsls	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4013      	ands	r3, r2
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d043      	beq.n	8008230 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d03c      	beq.n	8008230 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ba:	2210      	movs	r2, #16
 80081bc:	409a      	lsls	r2, r3
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d018      	beq.n	8008202 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d108      	bne.n	80081f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d024      	beq.n	8008230 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
 80081ee:	e01f      	b.n	8008230 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01b      	beq.n	8008230 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
 8008200:	e016      	b.n	8008230 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820c:	2b00      	cmp	r3, #0
 800820e:	d107      	bne.n	8008220 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f022 0208 	bic.w	r2, r2, #8
 800821e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008234:	2220      	movs	r2, #32
 8008236:	409a      	lsls	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4013      	ands	r3, r2
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 808e 	beq.w	800835e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0310 	and.w	r3, r3, #16
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 8086 	beq.w	800835e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008256:	2220      	movs	r2, #32
 8008258:	409a      	lsls	r2, r3
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b05      	cmp	r3, #5
 8008268:	d136      	bne.n	80082d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0216 	bic.w	r2, r2, #22
 8008278:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	695a      	ldr	r2, [r3, #20]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008288:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828e:	2b00      	cmp	r3, #0
 8008290:	d103      	bne.n	800829a <HAL_DMA_IRQHandler+0x1da>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008296:	2b00      	cmp	r3, #0
 8008298:	d007      	beq.n	80082aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0208 	bic.w	r2, r2, #8
 80082a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ae:	223f      	movs	r2, #63	; 0x3f
 80082b0:	409a      	lsls	r2, r3
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d07d      	beq.n	80083ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	4798      	blx	r3
        }
        return;
 80082d6:	e078      	b.n	80083ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d01c      	beq.n	8008320 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d108      	bne.n	8008306 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d030      	beq.n	800835e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	4798      	blx	r3
 8008304:	e02b      	b.n	800835e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d027      	beq.n	800835e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
 8008316:	e022      	b.n	800835e <HAL_DMA_IRQHandler+0x29e>
 8008318:	20000034 	.word	0x20000034
 800831c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10f      	bne.n	800834e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0210 	bic.w	r2, r2, #16
 800833c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008362:	2b00      	cmp	r3, #0
 8008364:	d032      	beq.n	80083cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d022      	beq.n	80083b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2205      	movs	r2, #5
 8008376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f022 0201 	bic.w	r2, r2, #1
 8008388:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	3301      	adds	r3, #1
 800838e:	60bb      	str	r3, [r7, #8]
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	429a      	cmp	r2, r3
 8008394:	d307      	bcc.n	80083a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1f2      	bne.n	800838a <HAL_DMA_IRQHandler+0x2ca>
 80083a4:	e000      	b.n	80083a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80083a6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d005      	beq.n	80083cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	4798      	blx	r3
 80083c8:	e000      	b.n	80083cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80083ca:	bf00      	nop
    }
  }
}
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop

080083d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083e2:	b2db      	uxtb	r3, r3
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800840c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	2b40      	cmp	r3, #64	; 0x40
 800841c:	d108      	bne.n	8008430 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800842e:	e007      	b.n	8008440 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	60da      	str	r2, [r3, #12]
}
 8008440:	bf00      	nop
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	b2db      	uxtb	r3, r3
 800845a:	3b10      	subs	r3, #16
 800845c:	4a14      	ldr	r2, [pc, #80]	; (80084b0 <DMA_CalcBaseAndBitshift+0x64>)
 800845e:	fba2 2303 	umull	r2, r3, r2, r3
 8008462:	091b      	lsrs	r3, r3, #4
 8008464:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008466:	4a13      	ldr	r2, [pc, #76]	; (80084b4 <DMA_CalcBaseAndBitshift+0x68>)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4413      	add	r3, r2
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b03      	cmp	r3, #3
 8008478:	d909      	bls.n	800848e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008482:	f023 0303 	bic.w	r3, r3, #3
 8008486:	1d1a      	adds	r2, r3, #4
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	659a      	str	r2, [r3, #88]	; 0x58
 800848c:	e007      	b.n	800849e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008496:	f023 0303 	bic.w	r3, r3, #3
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	aaaaaaab 	.word	0xaaaaaaab
 80084b4:	080266b0 	.word	0x080266b0

080084b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d11f      	bne.n	8008512 <DMA_CheckFifoParam+0x5a>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d856      	bhi.n	8008586 <DMA_CheckFifoParam+0xce>
 80084d8:	a201      	add	r2, pc, #4	; (adr r2, 80084e0 <DMA_CheckFifoParam+0x28>)
 80084da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084de:	bf00      	nop
 80084e0:	080084f1 	.word	0x080084f1
 80084e4:	08008503 	.word	0x08008503
 80084e8:	080084f1 	.word	0x080084f1
 80084ec:	08008587 	.word	0x08008587
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d046      	beq.n	800858a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008500:	e043      	b.n	800858a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008506:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800850a:	d140      	bne.n	800858e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008510:	e03d      	b.n	800858e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800851a:	d121      	bne.n	8008560 <DMA_CheckFifoParam+0xa8>
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2b03      	cmp	r3, #3
 8008520:	d837      	bhi.n	8008592 <DMA_CheckFifoParam+0xda>
 8008522:	a201      	add	r2, pc, #4	; (adr r2, 8008528 <DMA_CheckFifoParam+0x70>)
 8008524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008528:	08008539 	.word	0x08008539
 800852c:	0800853f 	.word	0x0800853f
 8008530:	08008539 	.word	0x08008539
 8008534:	08008551 	.word	0x08008551
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]
      break;
 800853c:	e030      	b.n	80085a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d025      	beq.n	8008596 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800854e:	e022      	b.n	8008596 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008554:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008558:	d11f      	bne.n	800859a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800855e:	e01c      	b.n	800859a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2b02      	cmp	r3, #2
 8008564:	d903      	bls.n	800856e <DMA_CheckFifoParam+0xb6>
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2b03      	cmp	r3, #3
 800856a:	d003      	beq.n	8008574 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800856c:	e018      	b.n	80085a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	73fb      	strb	r3, [r7, #15]
      break;
 8008572:	e015      	b.n	80085a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00e      	beq.n	800859e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	73fb      	strb	r3, [r7, #15]
      break;
 8008584:	e00b      	b.n	800859e <DMA_CheckFifoParam+0xe6>
      break;
 8008586:	bf00      	nop
 8008588:	e00a      	b.n	80085a0 <DMA_CheckFifoParam+0xe8>
      break;
 800858a:	bf00      	nop
 800858c:	e008      	b.n	80085a0 <DMA_CheckFifoParam+0xe8>
      break;
 800858e:	bf00      	nop
 8008590:	e006      	b.n	80085a0 <DMA_CheckFifoParam+0xe8>
      break;
 8008592:	bf00      	nop
 8008594:	e004      	b.n	80085a0 <DMA_CheckFifoParam+0xe8>
      break;
 8008596:	bf00      	nop
 8008598:	e002      	b.n	80085a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800859a:	bf00      	nop
 800859c:	e000      	b.n	80085a0 <DMA_CheckFifoParam+0xe8>
      break;
 800859e:	bf00      	nop
    }
  } 
  
  return status; 
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop

080085b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b089      	sub	sp, #36	; 0x24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80085be:	2300      	movs	r3, #0
 80085c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085c6:	2300      	movs	r3, #0
 80085c8:	61fb      	str	r3, [r7, #28]
 80085ca:	e159      	b.n	8008880 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80085cc:	2201      	movs	r2, #1
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	fa02 f303 	lsl.w	r3, r2, r3
 80085d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	4013      	ands	r3, r2
 80085de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	f040 8148 	bne.w	800887a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d005      	beq.n	8008602 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d130      	bne.n	8008664 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	2203      	movs	r2, #3
 800860e:	fa02 f303 	lsl.w	r3, r2, r3
 8008612:	43db      	mvns	r3, r3
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	4013      	ands	r3, r2
 8008618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68da      	ldr	r2, [r3, #12]
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	005b      	lsls	r3, r3, #1
 8008622:	fa02 f303 	lsl.w	r3, r2, r3
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	4313      	orrs	r3, r2
 800862a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008638:	2201      	movs	r2, #1
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	fa02 f303 	lsl.w	r3, r2, r3
 8008640:	43db      	mvns	r3, r3
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	4013      	ands	r3, r2
 8008646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	091b      	lsrs	r3, r3, #4
 800864e:	f003 0201 	and.w	r2, r3, #1
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	fa02 f303 	lsl.w	r3, r2, r3
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	4313      	orrs	r3, r2
 800865c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f003 0303 	and.w	r3, r3, #3
 800866c:	2b03      	cmp	r3, #3
 800866e:	d017      	beq.n	80086a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	2203      	movs	r2, #3
 800867c:	fa02 f303 	lsl.w	r3, r2, r3
 8008680:	43db      	mvns	r3, r3
 8008682:	69ba      	ldr	r2, [r7, #24]
 8008684:	4013      	ands	r3, r2
 8008686:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	fa02 f303 	lsl.w	r3, r2, r3
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	4313      	orrs	r3, r2
 8008698:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f003 0303 	and.w	r3, r3, #3
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d123      	bne.n	80086f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	08da      	lsrs	r2, r3, #3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3208      	adds	r2, #8
 80086b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	f003 0307 	and.w	r3, r3, #7
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	220f      	movs	r2, #15
 80086c4:	fa02 f303 	lsl.w	r3, r2, r3
 80086c8:	43db      	mvns	r3, r3
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	4013      	ands	r3, r2
 80086ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	691a      	ldr	r2, [r3, #16]
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	fa02 f303 	lsl.w	r3, r2, r3
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	08da      	lsrs	r2, r3, #3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3208      	adds	r2, #8
 80086ee:	69b9      	ldr	r1, [r7, #24]
 80086f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	2203      	movs	r2, #3
 8008700:	fa02 f303 	lsl.w	r3, r2, r3
 8008704:	43db      	mvns	r3, r3
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	4013      	ands	r3, r2
 800870a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f003 0203 	and.w	r2, r3, #3
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	005b      	lsls	r3, r3, #1
 8008718:	fa02 f303 	lsl.w	r3, r2, r3
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	4313      	orrs	r3, r2
 8008720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 80a2 	beq.w	800887a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008736:	2300      	movs	r3, #0
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	4b57      	ldr	r3, [pc, #348]	; (8008898 <HAL_GPIO_Init+0x2e8>)
 800873c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800873e:	4a56      	ldr	r2, [pc, #344]	; (8008898 <HAL_GPIO_Init+0x2e8>)
 8008740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008744:	6453      	str	r3, [r2, #68]	; 0x44
 8008746:	4b54      	ldr	r3, [pc, #336]	; (8008898 <HAL_GPIO_Init+0x2e8>)
 8008748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008752:	4a52      	ldr	r2, [pc, #328]	; (800889c <HAL_GPIO_Init+0x2ec>)
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	089b      	lsrs	r3, r3, #2
 8008758:	3302      	adds	r3, #2
 800875a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800875e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	220f      	movs	r2, #15
 800876a:	fa02 f303 	lsl.w	r3, r2, r3
 800876e:	43db      	mvns	r3, r3
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	4013      	ands	r3, r2
 8008774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a49      	ldr	r2, [pc, #292]	; (80088a0 <HAL_GPIO_Init+0x2f0>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d019      	beq.n	80087b2 <HAL_GPIO_Init+0x202>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a48      	ldr	r2, [pc, #288]	; (80088a4 <HAL_GPIO_Init+0x2f4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d013      	beq.n	80087ae <HAL_GPIO_Init+0x1fe>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a47      	ldr	r2, [pc, #284]	; (80088a8 <HAL_GPIO_Init+0x2f8>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d00d      	beq.n	80087aa <HAL_GPIO_Init+0x1fa>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a46      	ldr	r2, [pc, #280]	; (80088ac <HAL_GPIO_Init+0x2fc>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d007      	beq.n	80087a6 <HAL_GPIO_Init+0x1f6>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a45      	ldr	r2, [pc, #276]	; (80088b0 <HAL_GPIO_Init+0x300>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d101      	bne.n	80087a2 <HAL_GPIO_Init+0x1f2>
 800879e:	2304      	movs	r3, #4
 80087a0:	e008      	b.n	80087b4 <HAL_GPIO_Init+0x204>
 80087a2:	2307      	movs	r3, #7
 80087a4:	e006      	b.n	80087b4 <HAL_GPIO_Init+0x204>
 80087a6:	2303      	movs	r3, #3
 80087a8:	e004      	b.n	80087b4 <HAL_GPIO_Init+0x204>
 80087aa:	2302      	movs	r3, #2
 80087ac:	e002      	b.n	80087b4 <HAL_GPIO_Init+0x204>
 80087ae:	2301      	movs	r3, #1
 80087b0:	e000      	b.n	80087b4 <HAL_GPIO_Init+0x204>
 80087b2:	2300      	movs	r3, #0
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	f002 0203 	and.w	r2, r2, #3
 80087ba:	0092      	lsls	r2, r2, #2
 80087bc:	4093      	lsls	r3, r2
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087c4:	4935      	ldr	r1, [pc, #212]	; (800889c <HAL_GPIO_Init+0x2ec>)
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	089b      	lsrs	r3, r3, #2
 80087ca:	3302      	adds	r3, #2
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80087d2:	4b38      	ldr	r3, [pc, #224]	; (80088b4 <HAL_GPIO_Init+0x304>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	43db      	mvns	r3, r3
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	4013      	ands	r3, r2
 80087e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80087f6:	4a2f      	ldr	r2, [pc, #188]	; (80088b4 <HAL_GPIO_Init+0x304>)
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80087fc:	4b2d      	ldr	r3, [pc, #180]	; (80088b4 <HAL_GPIO_Init+0x304>)
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	43db      	mvns	r3, r3
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	4013      	ands	r3, r2
 800880a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008818:	69ba      	ldr	r2, [r7, #24]
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	4313      	orrs	r3, r2
 800881e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008820:	4a24      	ldr	r2, [pc, #144]	; (80088b4 <HAL_GPIO_Init+0x304>)
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008826:	4b23      	ldr	r3, [pc, #140]	; (80088b4 <HAL_GPIO_Init+0x304>)
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	43db      	mvns	r3, r3
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	4013      	ands	r3, r2
 8008834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	4313      	orrs	r3, r2
 8008848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800884a:	4a1a      	ldr	r2, [pc, #104]	; (80088b4 <HAL_GPIO_Init+0x304>)
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008850:	4b18      	ldr	r3, [pc, #96]	; (80088b4 <HAL_GPIO_Init+0x304>)
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	43db      	mvns	r3, r3
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	4013      	ands	r3, r2
 800885e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d003      	beq.n	8008874 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800886c:	69ba      	ldr	r2, [r7, #24]
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	4313      	orrs	r3, r2
 8008872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008874:	4a0f      	ldr	r2, [pc, #60]	; (80088b4 <HAL_GPIO_Init+0x304>)
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	3301      	adds	r3, #1
 800887e:	61fb      	str	r3, [r7, #28]
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	2b0f      	cmp	r3, #15
 8008884:	f67f aea2 	bls.w	80085cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008888:	bf00      	nop
 800888a:	bf00      	nop
 800888c:	3724      	adds	r7, #36	; 0x24
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	40023800 	.word	0x40023800
 800889c:	40013800 	.word	0x40013800
 80088a0:	40020000 	.word	0x40020000
 80088a4:	40020400 	.word	0x40020400
 80088a8:	40020800 	.word	0x40020800
 80088ac:	40020c00 	.word	0x40020c00
 80088b0:	40021000 	.word	0x40021000
 80088b4:	40013c00 	.word	0x40013c00

080088b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	691a      	ldr	r2, [r3, #16]
 80088c8:	887b      	ldrh	r3, [r7, #2]
 80088ca:	4013      	ands	r3, r2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80088d0:	2301      	movs	r3, #1
 80088d2:	73fb      	strb	r3, [r7, #15]
 80088d4:	e001      	b.n	80088da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80088d6:	2300      	movs	r3, #0
 80088d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80088da:	7bfb      	ldrb	r3, [r7, #15]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	807b      	strh	r3, [r7, #2]
 80088f4:	4613      	mov	r3, r2
 80088f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80088f8:	787b      	ldrb	r3, [r7, #1]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80088fe:	887a      	ldrh	r2, [r7, #2]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008904:	e003      	b.n	800890e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008906:	887b      	ldrh	r3, [r7, #2]
 8008908:	041a      	lsls	r2, r3, #16
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	619a      	str	r2, [r3, #24]
}
 800890e:	bf00      	nop
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800891a:	b480      	push	{r7}
 800891c:	b085      	sub	sp, #20
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	460b      	mov	r3, r1
 8008924:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800892c:	887a      	ldrh	r2, [r7, #2]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	4013      	ands	r3, r2
 8008932:	041a      	lsls	r2, r3, #16
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	43d9      	mvns	r1, r3
 8008938:	887b      	ldrh	r3, [r7, #2]
 800893a:	400b      	ands	r3, r1
 800893c:	431a      	orrs	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	619a      	str	r2, [r3, #24]
}
 8008942:	bf00      	nop
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
	...

08008950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800895a:	4b08      	ldr	r3, [pc, #32]	; (800897c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800895c:	695a      	ldr	r2, [r3, #20]
 800895e:	88fb      	ldrh	r3, [r7, #6]
 8008960:	4013      	ands	r3, r2
 8008962:	2b00      	cmp	r3, #0
 8008964:	d006      	beq.n	8008974 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008966:	4a05      	ldr	r2, [pc, #20]	; (800897c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008968:	88fb      	ldrh	r3, [r7, #6]
 800896a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800896c:	88fb      	ldrh	r3, [r7, #6]
 800896e:	4618      	mov	r0, r3
 8008970:	f7fc fb64 	bl	800503c <HAL_GPIO_EXTI_Callback>
  }
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	40013c00 	.word	0x40013c00

08008980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e12b      	b.n	8008bea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d106      	bne.n	80089ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7fc f916 	bl	8004bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2224      	movs	r2, #36	; 0x24
 80089b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f022 0201 	bic.w	r2, r2, #1
 80089c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80089e4:	f003 fcf0 	bl	800c3c8 <HAL_RCC_GetPCLK1Freq>
 80089e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	4a81      	ldr	r2, [pc, #516]	; (8008bf4 <HAL_I2C_Init+0x274>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d807      	bhi.n	8008a04 <HAL_I2C_Init+0x84>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4a80      	ldr	r2, [pc, #512]	; (8008bf8 <HAL_I2C_Init+0x278>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	bf94      	ite	ls
 80089fc:	2301      	movls	r3, #1
 80089fe:	2300      	movhi	r3, #0
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	e006      	b.n	8008a12 <HAL_I2C_Init+0x92>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4a7d      	ldr	r2, [pc, #500]	; (8008bfc <HAL_I2C_Init+0x27c>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	bf94      	ite	ls
 8008a0c:	2301      	movls	r3, #1
 8008a0e:	2300      	movhi	r3, #0
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e0e7      	b.n	8008bea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	4a78      	ldr	r2, [pc, #480]	; (8008c00 <HAL_I2C_Init+0x280>)
 8008a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a22:	0c9b      	lsrs	r3, r3, #18
 8008a24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6a1b      	ldr	r3, [r3, #32]
 8008a40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	4a6a      	ldr	r2, [pc, #424]	; (8008bf4 <HAL_I2C_Init+0x274>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d802      	bhi.n	8008a54 <HAL_I2C_Init+0xd4>
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	3301      	adds	r3, #1
 8008a52:	e009      	b.n	8008a68 <HAL_I2C_Init+0xe8>
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008a5a:	fb02 f303 	mul.w	r3, r2, r3
 8008a5e:	4a69      	ldr	r2, [pc, #420]	; (8008c04 <HAL_I2C_Init+0x284>)
 8008a60:	fba2 2303 	umull	r2, r3, r2, r3
 8008a64:	099b      	lsrs	r3, r3, #6
 8008a66:	3301      	adds	r3, #1
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	6812      	ldr	r2, [r2, #0]
 8008a6c:	430b      	orrs	r3, r1
 8008a6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008a7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	495c      	ldr	r1, [pc, #368]	; (8008bf4 <HAL_I2C_Init+0x274>)
 8008a84:	428b      	cmp	r3, r1
 8008a86:	d819      	bhi.n	8008abc <HAL_I2C_Init+0x13c>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	1e59      	subs	r1, r3, #1
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a96:	1c59      	adds	r1, r3, #1
 8008a98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008a9c:	400b      	ands	r3, r1
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00a      	beq.n	8008ab8 <HAL_I2C_Init+0x138>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	1e59      	subs	r1, r3, #1
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ab6:	e051      	b.n	8008b5c <HAL_I2C_Init+0x1dc>
 8008ab8:	2304      	movs	r3, #4
 8008aba:	e04f      	b.n	8008b5c <HAL_I2C_Init+0x1dc>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d111      	bne.n	8008ae8 <HAL_I2C_Init+0x168>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	1e58      	subs	r0, r3, #1
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6859      	ldr	r1, [r3, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	440b      	add	r3, r1
 8008ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	bf0c      	ite	eq
 8008ae0:	2301      	moveq	r3, #1
 8008ae2:	2300      	movne	r3, #0
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	e012      	b.n	8008b0e <HAL_I2C_Init+0x18e>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	1e58      	subs	r0, r3, #1
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6859      	ldr	r1, [r3, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	440b      	add	r3, r1
 8008af6:	0099      	lsls	r1, r3, #2
 8008af8:	440b      	add	r3, r1
 8008afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8008afe:	3301      	adds	r3, #1
 8008b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	bf0c      	ite	eq
 8008b08:	2301      	moveq	r3, #1
 8008b0a:	2300      	movne	r3, #0
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <HAL_I2C_Init+0x196>
 8008b12:	2301      	movs	r3, #1
 8008b14:	e022      	b.n	8008b5c <HAL_I2C_Init+0x1dc>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10e      	bne.n	8008b3c <HAL_I2C_Init+0x1bc>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	1e58      	subs	r0, r3, #1
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6859      	ldr	r1, [r3, #4]
 8008b26:	460b      	mov	r3, r1
 8008b28:	005b      	lsls	r3, r3, #1
 8008b2a:	440b      	add	r3, r1
 8008b2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b30:	3301      	adds	r3, #1
 8008b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b3a:	e00f      	b.n	8008b5c <HAL_I2C_Init+0x1dc>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	1e58      	subs	r0, r3, #1
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6859      	ldr	r1, [r3, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	440b      	add	r3, r1
 8008b4a:	0099      	lsls	r1, r3, #2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b52:	3301      	adds	r3, #1
 8008b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b5c:	6879      	ldr	r1, [r7, #4]
 8008b5e:	6809      	ldr	r1, [r1, #0]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	69da      	ldr	r2, [r3, #28]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	431a      	orrs	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008b8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	6911      	ldr	r1, [r2, #16]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	68d2      	ldr	r2, [r2, #12]
 8008b96:	4311      	orrs	r1, r2
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	6812      	ldr	r2, [r2, #0]
 8008b9c:	430b      	orrs	r3, r1
 8008b9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	695a      	ldr	r2, [r3, #20]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f042 0201 	orr.w	r2, r2, #1
 8008bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	000186a0 	.word	0x000186a0
 8008bf8:	001e847f 	.word	0x001e847f
 8008bfc:	003d08ff 	.word	0x003d08ff
 8008c00:	431bde83 	.word	0x431bde83
 8008c04:	10624dd3 	.word	0x10624dd3

08008c08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af02      	add	r7, sp, #8
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	607a      	str	r2, [r7, #4]
 8008c12:	461a      	mov	r2, r3
 8008c14:	460b      	mov	r3, r1
 8008c16:	817b      	strh	r3, [r7, #10]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c1c:	f7fe fee8 	bl	80079f0 <HAL_GetTick>
 8008c20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b20      	cmp	r3, #32
 8008c2c:	f040 80e0 	bne.w	8008df0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	2319      	movs	r3, #25
 8008c36:	2201      	movs	r2, #1
 8008c38:	4970      	ldr	r1, [pc, #448]	; (8008dfc <HAL_I2C_Master_Transmit+0x1f4>)
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f002 fd7a 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008c46:	2302      	movs	r3, #2
 8008c48:	e0d3      	b.n	8008df2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d101      	bne.n	8008c58 <HAL_I2C_Master_Transmit+0x50>
 8008c54:	2302      	movs	r3, #2
 8008c56:	e0cc      	b.n	8008df2 <HAL_I2C_Master_Transmit+0x1ea>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d007      	beq.n	8008c7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f042 0201 	orr.w	r2, r2, #1
 8008c7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2221      	movs	r2, #33	; 0x21
 8008c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2210      	movs	r2, #16
 8008c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	893a      	ldrh	r2, [r7, #8]
 8008cae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	4a50      	ldr	r2, [pc, #320]	; (8008e00 <HAL_I2C_Master_Transmit+0x1f8>)
 8008cbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008cc0:	8979      	ldrh	r1, [r7, #10]
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	6a3a      	ldr	r2, [r7, #32]
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f002 f9be 	bl	800b048 <I2C_MasterRequestWrite>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e08d      	b.n	8008df2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	613b      	str	r3, [r7, #16]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	613b      	str	r3, [r7, #16]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	613b      	str	r3, [r7, #16]
 8008cea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008cec:	e066      	b.n	8008dbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	6a39      	ldr	r1, [r7, #32]
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f002 fdf4 	bl	800b8e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00d      	beq.n	8008d1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	d107      	bne.n	8008d16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e06b      	b.n	8008df2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1e:	781a      	ldrb	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2a:	1c5a      	adds	r2, r3, #1
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	3b01      	subs	r3, #1
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d42:	3b01      	subs	r3, #1
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	f003 0304 	and.w	r3, r3, #4
 8008d54:	2b04      	cmp	r3, #4
 8008d56:	d11b      	bne.n	8008d90 <HAL_I2C_Master_Transmit+0x188>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d017      	beq.n	8008d90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	781a      	ldrb	r2, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	6a39      	ldr	r1, [r7, #32]
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f002 fde4 	bl	800b962 <I2C_WaitOnBTFFlagUntilTimeout>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00d      	beq.n	8008dbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d107      	bne.n	8008db8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008db6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e01a      	b.n	8008df2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d194      	bne.n	8008cee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	e000      	b.n	8008df2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008df0:	2302      	movs	r3, #2
  }
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3718      	adds	r7, #24
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	00100002 	.word	0x00100002
 8008e00:	ffff0000 	.word	0xffff0000

08008e04 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08c      	sub	sp, #48	; 0x30
 8008e08:	af02      	add	r7, sp, #8
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	607a      	str	r2, [r7, #4]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	460b      	mov	r3, r1
 8008e12:	817b      	strh	r3, [r7, #10]
 8008e14:	4613      	mov	r3, r2
 8008e16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e18:	f7fe fdea 	bl	80079f0 <HAL_GetTick>
 8008e1c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b20      	cmp	r3, #32
 8008e28:	f040 820b 	bne.w	8009242 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	2319      	movs	r3, #25
 8008e32:	2201      	movs	r2, #1
 8008e34:	497c      	ldr	r1, [pc, #496]	; (8009028 <HAL_I2C_Master_Receive+0x224>)
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f002 fc7c 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008e42:	2302      	movs	r3, #2
 8008e44:	e1fe      	b.n	8009244 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d101      	bne.n	8008e54 <HAL_I2C_Master_Receive+0x50>
 8008e50:	2302      	movs	r3, #2
 8008e52:	e1f7      	b.n	8009244 <HAL_I2C_Master_Receive+0x440>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d007      	beq.n	8008e7a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f042 0201 	orr.w	r2, r2, #1
 8008e78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2222      	movs	r2, #34	; 0x22
 8008e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2210      	movs	r2, #16
 8008e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	893a      	ldrh	r2, [r7, #8]
 8008eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	4a5c      	ldr	r2, [pc, #368]	; (800902c <HAL_I2C_Master_Receive+0x228>)
 8008eba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008ebc:	8979      	ldrh	r1, [r7, #10]
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f002 f942 	bl	800b14c <I2C_MasterRequestRead>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e1b8      	b.n	8009244 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d113      	bne.n	8008f02 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eda:	2300      	movs	r3, #0
 8008edc:	623b      	str	r3, [r7, #32]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	623b      	str	r3, [r7, #32]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	623b      	str	r3, [r7, #32]
 8008eee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	e18c      	b.n	800921c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d11b      	bne.n	8008f42 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	61fb      	str	r3, [r7, #28]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	61fb      	str	r3, [r7, #28]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	61fb      	str	r3, [r7, #28]
 8008f2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f3e:	601a      	str	r2, [r3, #0]
 8008f40:	e16c      	b.n	800921c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d11b      	bne.n	8008f82 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	61bb      	str	r3, [r7, #24]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	61bb      	str	r3, [r7, #24]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	61bb      	str	r3, [r7, #24]
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	e14c      	b.n	800921c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f92:	2300      	movs	r3, #0
 8008f94:	617b      	str	r3, [r7, #20]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	617b      	str	r3, [r7, #20]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	617b      	str	r3, [r7, #20]
 8008fa6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008fa8:	e138      	b.n	800921c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	f200 80f1 	bhi.w	8009196 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d123      	bne.n	8009004 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f002 fd41 	bl	800ba48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d001      	beq.n	8008fd0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e139      	b.n	8009244 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	691a      	ldr	r2, [r3, #16]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	b2d2      	uxtb	r2, r2
 8008fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fec:	3b01      	subs	r3, #1
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009002:	e10b      	b.n	800921c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009008:	2b02      	cmp	r3, #2
 800900a:	d14e      	bne.n	80090aa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800900c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009012:	2200      	movs	r2, #0
 8009014:	4906      	ldr	r1, [pc, #24]	; (8009030 <HAL_I2C_Master_Receive+0x22c>)
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f002 fb8c 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d008      	beq.n	8009034 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e10e      	b.n	8009244 <HAL_I2C_Master_Receive+0x440>
 8009026:	bf00      	nop
 8009028:	00100002 	.word	0x00100002
 800902c:	ffff0000 	.word	0xffff0000
 8009030:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691a      	ldr	r2, [r3, #16]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	b2d2      	uxtb	r2, r2
 8009050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009060:	3b01      	subs	r3, #1
 8009062:	b29a      	uxth	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800906c:	b29b      	uxth	r3, r3
 800906e:	3b01      	subs	r3, #1
 8009070:	b29a      	uxth	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	691a      	ldr	r2, [r3, #16]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	b2d2      	uxtb	r2, r2
 8009082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009088:	1c5a      	adds	r2, r3, #1
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009092:	3b01      	subs	r3, #1
 8009094:	b29a      	uxth	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800909e:	b29b      	uxth	r3, r3
 80090a0:	3b01      	subs	r3, #1
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090a8:	e0b8      	b.n	800921c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	2200      	movs	r2, #0
 80090b2:	4966      	ldr	r1, [pc, #408]	; (800924c <HAL_I2C_Master_Receive+0x448>)
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f002 fb3d 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e0bf      	b.n	8009244 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	691a      	ldr	r2, [r3, #16]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	b2d2      	uxtb	r2, r2
 80090e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	1c5a      	adds	r2, r3, #1
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090f0:	3b01      	subs	r3, #1
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	3b01      	subs	r3, #1
 8009100:	b29a      	uxth	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	2200      	movs	r2, #0
 800910e:	494f      	ldr	r1, [pc, #316]	; (800924c <HAL_I2C_Master_Receive+0x448>)
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f002 fb0f 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e091      	b.n	8009244 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800912e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	691a      	ldr	r2, [r3, #16]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	b2d2      	uxtb	r2, r2
 800913c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	1c5a      	adds	r2, r3, #1
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800914c:	3b01      	subs	r3, #1
 800914e:	b29a      	uxth	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009158:	b29b      	uxth	r3, r3
 800915a:	3b01      	subs	r3, #1
 800915c:	b29a      	uxth	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	691a      	ldr	r2, [r3, #16]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	b2d2      	uxtb	r2, r2
 800916e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800917e:	3b01      	subs	r3, #1
 8009180:	b29a      	uxth	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800918a:	b29b      	uxth	r3, r3
 800918c:	3b01      	subs	r3, #1
 800918e:	b29a      	uxth	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009194:	e042      	b.n	800921c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f002 fc54 	bl	800ba48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e04c      	b.n	8009244 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	691a      	ldr	r2, [r3, #16]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	b2d2      	uxtb	r2, r2
 80091b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	1c5a      	adds	r2, r3, #1
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091c6:	3b01      	subs	r3, #1
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	3b01      	subs	r3, #1
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	f003 0304 	and.w	r3, r3, #4
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	d118      	bne.n	800921c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	691a      	ldr	r2, [r3, #16]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	b2d2      	uxtb	r2, r2
 80091f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009206:	3b01      	subs	r3, #1
 8009208:	b29a      	uxth	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009212:	b29b      	uxth	r3, r3
 8009214:	3b01      	subs	r3, #1
 8009216:	b29a      	uxth	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009220:	2b00      	cmp	r3, #0
 8009222:	f47f aec2 	bne.w	8008faa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2220      	movs	r2, #32
 800922a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	e000      	b.n	8009244 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009242:	2302      	movs	r3, #2
  }
}
 8009244:	4618      	mov	r0, r3
 8009246:	3728      	adds	r7, #40	; 0x28
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	00010004 	.word	0x00010004

08009250 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af02      	add	r7, sp, #8
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	4608      	mov	r0, r1
 800925a:	4611      	mov	r1, r2
 800925c:	461a      	mov	r2, r3
 800925e:	4603      	mov	r3, r0
 8009260:	817b      	strh	r3, [r7, #10]
 8009262:	460b      	mov	r3, r1
 8009264:	813b      	strh	r3, [r7, #8]
 8009266:	4613      	mov	r3, r2
 8009268:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800926a:	f7fe fbc1 	bl	80079f0 <HAL_GetTick>
 800926e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b20      	cmp	r3, #32
 800927a:	f040 80d9 	bne.w	8009430 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	2319      	movs	r3, #25
 8009284:	2201      	movs	r2, #1
 8009286:	496d      	ldr	r1, [pc, #436]	; (800943c <HAL_I2C_Mem_Write+0x1ec>)
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f002 fa53 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009294:	2302      	movs	r3, #2
 8009296:	e0cc      	b.n	8009432 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d101      	bne.n	80092a6 <HAL_I2C_Mem_Write+0x56>
 80092a2:	2302      	movs	r3, #2
 80092a4:	e0c5      	b.n	8009432 <HAL_I2C_Mem_Write+0x1e2>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d007      	beq.n	80092cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f042 0201 	orr.w	r2, r2, #1
 80092ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2221      	movs	r2, #33	; 0x21
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2240      	movs	r2, #64	; 0x40
 80092e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6a3a      	ldr	r2, [r7, #32]
 80092f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80092fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009302:	b29a      	uxth	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4a4d      	ldr	r2, [pc, #308]	; (8009440 <HAL_I2C_Mem_Write+0x1f0>)
 800930c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800930e:	88f8      	ldrh	r0, [r7, #6]
 8009310:	893a      	ldrh	r2, [r7, #8]
 8009312:	8979      	ldrh	r1, [r7, #10]
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	9301      	str	r3, [sp, #4]
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	4603      	mov	r3, r0
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f001 ffe2 	bl	800b2e8 <I2C_RequestMemoryWrite>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d052      	beq.n	80093d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e081      	b.n	8009432 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f002 fad4 	bl	800b8e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00d      	beq.n	800935a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009342:	2b04      	cmp	r3, #4
 8009344:	d107      	bne.n	8009356 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e06b      	b.n	8009432 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935e:	781a      	ldrb	r2, [r3, #0]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009374:	3b01      	subs	r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009380:	b29b      	uxth	r3, r3
 8009382:	3b01      	subs	r3, #1
 8009384:	b29a      	uxth	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	695b      	ldr	r3, [r3, #20]
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	2b04      	cmp	r3, #4
 8009396:	d11b      	bne.n	80093d0 <HAL_I2C_Mem_Write+0x180>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800939c:	2b00      	cmp	r3, #0
 800939e:	d017      	beq.n	80093d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	781a      	ldrb	r2, [r3, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ba:	3b01      	subs	r3, #1
 80093bc:	b29a      	uxth	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	3b01      	subs	r3, #1
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1aa      	bne.n	800932e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093d8:	697a      	ldr	r2, [r7, #20]
 80093da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f002 fac0 	bl	800b962 <I2C_WaitOnBTFFlagUntilTimeout>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00d      	beq.n	8009404 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ec:	2b04      	cmp	r3, #4
 80093ee:	d107      	bne.n	8009400 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e016      	b.n	8009432 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2220      	movs	r2, #32
 8009418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	e000      	b.n	8009432 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009430:	2302      	movs	r3, #2
  }
}
 8009432:	4618      	mov	r0, r3
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	00100002 	.word	0x00100002
 8009440:	ffff0000 	.word	0xffff0000

08009444 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08c      	sub	sp, #48	; 0x30
 8009448:	af02      	add	r7, sp, #8
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	4608      	mov	r0, r1
 800944e:	4611      	mov	r1, r2
 8009450:	461a      	mov	r2, r3
 8009452:	4603      	mov	r3, r0
 8009454:	817b      	strh	r3, [r7, #10]
 8009456:	460b      	mov	r3, r1
 8009458:	813b      	strh	r3, [r7, #8]
 800945a:	4613      	mov	r3, r2
 800945c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800945e:	f7fe fac7 	bl	80079f0 <HAL_GetTick>
 8009462:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b20      	cmp	r3, #32
 800946e:	f040 8208 	bne.w	8009882 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	2319      	movs	r3, #25
 8009478:	2201      	movs	r2, #1
 800947a:	497b      	ldr	r1, [pc, #492]	; (8009668 <HAL_I2C_Mem_Read+0x224>)
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f002 f959 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009488:	2302      	movs	r3, #2
 800948a:	e1fb      	b.n	8009884 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009492:	2b01      	cmp	r3, #1
 8009494:	d101      	bne.n	800949a <HAL_I2C_Mem_Read+0x56>
 8009496:	2302      	movs	r3, #2
 8009498:	e1f4      	b.n	8009884 <HAL_I2C_Mem_Read+0x440>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d007      	beq.n	80094c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f042 0201 	orr.w	r2, r2, #1
 80094be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2222      	movs	r2, #34	; 0x22
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2240      	movs	r2, #64	; 0x40
 80094dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80094f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	4a5b      	ldr	r2, [pc, #364]	; (800966c <HAL_I2C_Mem_Read+0x228>)
 8009500:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009502:	88f8      	ldrh	r0, [r7, #6]
 8009504:	893a      	ldrh	r2, [r7, #8]
 8009506:	8979      	ldrh	r1, [r7, #10]
 8009508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950a:	9301      	str	r3, [sp, #4]
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	4603      	mov	r3, r0
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f001 ff7e 	bl	800b414 <I2C_RequestMemoryRead>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e1b0      	b.n	8009884 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009526:	2b00      	cmp	r3, #0
 8009528:	d113      	bne.n	8009552 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800952a:	2300      	movs	r3, #0
 800952c:	623b      	str	r3, [r7, #32]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	695b      	ldr	r3, [r3, #20]
 8009534:	623b      	str	r3, [r7, #32]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	623b      	str	r3, [r7, #32]
 800953e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800954e:	601a      	str	r2, [r3, #0]
 8009550:	e184      	b.n	800985c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009556:	2b01      	cmp	r3, #1
 8009558:	d11b      	bne.n	8009592 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009568:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800956a:	2300      	movs	r3, #0
 800956c:	61fb      	str	r3, [r7, #28]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	695b      	ldr	r3, [r3, #20]
 8009574:	61fb      	str	r3, [r7, #28]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	61fb      	str	r3, [r7, #28]
 800957e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	e164      	b.n	800985c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009596:	2b02      	cmp	r3, #2
 8009598:	d11b      	bne.n	80095d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095ba:	2300      	movs	r3, #0
 80095bc:	61bb      	str	r3, [r7, #24]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	61bb      	str	r3, [r7, #24]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	61bb      	str	r3, [r7, #24]
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	e144      	b.n	800985c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095d2:	2300      	movs	r3, #0
 80095d4:	617b      	str	r3, [r7, #20]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	695b      	ldr	r3, [r3, #20]
 80095dc:	617b      	str	r3, [r7, #20]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	617b      	str	r3, [r7, #20]
 80095e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80095e8:	e138      	b.n	800985c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ee:	2b03      	cmp	r3, #3
 80095f0:	f200 80f1 	bhi.w	80097d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d123      	bne.n	8009644 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f002 fa21 	bl	800ba48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e139      	b.n	8009884 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	691a      	ldr	r2, [r3, #16]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961a:	b2d2      	uxtb	r2, r2
 800961c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	1c5a      	adds	r2, r3, #1
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800962c:	3b01      	subs	r3, #1
 800962e:	b29a      	uxth	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009638:	b29b      	uxth	r3, r3
 800963a:	3b01      	subs	r3, #1
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009642:	e10b      	b.n	800985c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009648:	2b02      	cmp	r3, #2
 800964a:	d14e      	bne.n	80096ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009652:	2200      	movs	r2, #0
 8009654:	4906      	ldr	r1, [pc, #24]	; (8009670 <HAL_I2C_Mem_Read+0x22c>)
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f002 f86c 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d008      	beq.n	8009674 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e10e      	b.n	8009884 <HAL_I2C_Mem_Read+0x440>
 8009666:	bf00      	nop
 8009668:	00100002 	.word	0x00100002
 800966c:	ffff0000 	.word	0xffff0000
 8009670:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	691a      	ldr	r2, [r3, #16]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	b2d2      	uxtb	r2, r2
 8009690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	1c5a      	adds	r2, r3, #1
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a0:	3b01      	subs	r3, #1
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	3b01      	subs	r3, #1
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	691a      	ldr	r2, [r3, #16]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	b2d2      	uxtb	r2, r2
 80096c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d2:	3b01      	subs	r3, #1
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096de:	b29b      	uxth	r3, r3
 80096e0:	3b01      	subs	r3, #1
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096e8:	e0b8      	b.n	800985c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f0:	2200      	movs	r2, #0
 80096f2:	4966      	ldr	r1, [pc, #408]	; (800988c <HAL_I2C_Mem_Read+0x448>)
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f002 f81d 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d001      	beq.n	8009704 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e0bf      	b.n	8009884 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	691a      	ldr	r2, [r3, #16]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	b2d2      	uxtb	r2, r2
 8009720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009730:	3b01      	subs	r3, #1
 8009732:	b29a      	uxth	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800973c:	b29b      	uxth	r3, r3
 800973e:	3b01      	subs	r3, #1
 8009740:	b29a      	uxth	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974c:	2200      	movs	r2, #0
 800974e:	494f      	ldr	r1, [pc, #316]	; (800988c <HAL_I2C_Mem_Read+0x448>)
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f001 ffef 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d001      	beq.n	8009760 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e091      	b.n	8009884 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800976e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	691a      	ldr	r2, [r3, #16]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977a:	b2d2      	uxtb	r2, r2
 800977c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	1c5a      	adds	r2, r3, #1
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800978c:	3b01      	subs	r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009798:	b29b      	uxth	r3, r3
 800979a:	3b01      	subs	r3, #1
 800979c:	b29a      	uxth	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	691a      	ldr	r2, [r3, #16]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ac:	b2d2      	uxtb	r2, r2
 80097ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b4:	1c5a      	adds	r2, r3, #1
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097be:	3b01      	subs	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	3b01      	subs	r3, #1
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097d4:	e042      	b.n	800985c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f002 f934 	bl	800ba48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e04c      	b.n	8009884 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	691a      	ldr	r2, [r3, #16]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	b2d2      	uxtb	r2, r2
 80097f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	1c5a      	adds	r2, r3, #1
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009806:	3b01      	subs	r3, #1
 8009808:	b29a      	uxth	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009812:	b29b      	uxth	r3, r3
 8009814:	3b01      	subs	r3, #1
 8009816:	b29a      	uxth	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	f003 0304 	and.w	r3, r3, #4
 8009826:	2b04      	cmp	r3, #4
 8009828:	d118      	bne.n	800985c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	691a      	ldr	r2, [r3, #16]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	b2d2      	uxtb	r2, r2
 8009836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983c:	1c5a      	adds	r2, r3, #1
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009846:	3b01      	subs	r3, #1
 8009848:	b29a      	uxth	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009852:	b29b      	uxth	r3, r3
 8009854:	3b01      	subs	r3, #1
 8009856:	b29a      	uxth	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009860:	2b00      	cmp	r3, #0
 8009862:	f47f aec2 	bne.w	80095ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2220      	movs	r2, #32
 800986a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	e000      	b.n	8009884 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009882:	2302      	movs	r3, #2
  }
}
 8009884:	4618      	mov	r0, r3
 8009886:	3728      	adds	r7, #40	; 0x28
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	00010004 	.word	0x00010004

08009890 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098b0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098b8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	2b10      	cmp	r3, #16
 80098be:	d003      	beq.n	80098c8 <HAL_I2C_EV_IRQHandler+0x38>
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	2b40      	cmp	r3, #64	; 0x40
 80098c4:	f040 80c1 	bne.w	8009a4a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10d      	bne.n	80098fe <HAL_I2C_EV_IRQHandler+0x6e>
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80098e8:	d003      	beq.n	80098f2 <HAL_I2C_EV_IRQHandler+0x62>
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80098f0:	d101      	bne.n	80098f6 <HAL_I2C_EV_IRQHandler+0x66>
 80098f2:	2301      	movs	r3, #1
 80098f4:	e000      	b.n	80098f8 <HAL_I2C_EV_IRQHandler+0x68>
 80098f6:	2300      	movs	r3, #0
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	f000 8132 	beq.w	8009b62 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00c      	beq.n	8009922 <HAL_I2C_EV_IRQHandler+0x92>
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	0a5b      	lsrs	r3, r3, #9
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	2b00      	cmp	r3, #0
 8009912:	d006      	beq.n	8009922 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f002 f91c 	bl	800bb52 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fd79 	bl	800a412 <I2C_Master_SB>
 8009920:	e092      	b.n	8009a48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	08db      	lsrs	r3, r3, #3
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	2b00      	cmp	r3, #0
 800992c:	d009      	beq.n	8009942 <HAL_I2C_EV_IRQHandler+0xb2>
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	0a5b      	lsrs	r3, r3, #9
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fdef 	bl	800a51e <I2C_Master_ADD10>
 8009940:	e082      	b.n	8009a48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	085b      	lsrs	r3, r3, #1
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	2b00      	cmp	r3, #0
 800994c:	d009      	beq.n	8009962 <HAL_I2C_EV_IRQHandler+0xd2>
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	0a5b      	lsrs	r3, r3, #9
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fe09 	bl	800a572 <I2C_Master_ADDR>
 8009960:	e072      	b.n	8009a48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	089b      	lsrs	r3, r3, #2
 8009966:	f003 0301 	and.w	r3, r3, #1
 800996a:	2b00      	cmp	r3, #0
 800996c:	d03b      	beq.n	80099e6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800997c:	f000 80f3 	beq.w	8009b66 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	09db      	lsrs	r3, r3, #7
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00f      	beq.n	80099ac <HAL_I2C_EV_IRQHandler+0x11c>
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	0a9b      	lsrs	r3, r3, #10
 8009990:	f003 0301 	and.w	r3, r3, #1
 8009994:	2b00      	cmp	r3, #0
 8009996:	d009      	beq.n	80099ac <HAL_I2C_EV_IRQHandler+0x11c>
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	089b      	lsrs	r3, r3, #2
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d103      	bne.n	80099ac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f9f3 	bl	8009d90 <I2C_MasterTransmit_TXE>
 80099aa:	e04d      	b.n	8009a48 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	089b      	lsrs	r3, r3, #2
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 80d6 	beq.w	8009b66 <HAL_I2C_EV_IRQHandler+0x2d6>
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	0a5b      	lsrs	r3, r3, #9
 80099be:	f003 0301 	and.w	r3, r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 80cf 	beq.w	8009b66 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	2b21      	cmp	r3, #33	; 0x21
 80099cc:	d103      	bne.n	80099d6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fa7a 	bl	8009ec8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80099d4:	e0c7      	b.n	8009b66 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
 80099d8:	2b40      	cmp	r3, #64	; 0x40
 80099da:	f040 80c4 	bne.w	8009b66 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fae8 	bl	8009fb4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80099e4:	e0bf      	b.n	8009b66 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099f4:	f000 80b7 	beq.w	8009b66 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	099b      	lsrs	r3, r3, #6
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00f      	beq.n	8009a24 <HAL_I2C_EV_IRQHandler+0x194>
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	0a9b      	lsrs	r3, r3, #10
 8009a08:	f003 0301 	and.w	r3, r3, #1
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d009      	beq.n	8009a24 <HAL_I2C_EV_IRQHandler+0x194>
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	089b      	lsrs	r3, r3, #2
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d103      	bne.n	8009a24 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fb5d 	bl	800a0dc <I2C_MasterReceive_RXNE>
 8009a22:	e011      	b.n	8009a48 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	089b      	lsrs	r3, r3, #2
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 809a 	beq.w	8009b66 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	0a5b      	lsrs	r3, r3, #9
 8009a36:	f003 0301 	and.w	r3, r3, #1
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f000 8093 	beq.w	8009b66 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fbfc 	bl	800a23e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a46:	e08e      	b.n	8009b66 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009a48:	e08d      	b.n	8009b66 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d004      	beq.n	8009a5c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	61fb      	str	r3, [r7, #28]
 8009a5a:	e007      	b.n	8009a6c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	085b      	lsrs	r3, r3, #1
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d012      	beq.n	8009a9e <HAL_I2C_EV_IRQHandler+0x20e>
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	0a5b      	lsrs	r3, r3, #9
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00c      	beq.n	8009a9e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d003      	beq.n	8009a94 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8009a94:	69b9      	ldr	r1, [r7, #24]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 ffba 	bl	800aa10 <I2C_Slave_ADDR>
 8009a9c:	e066      	b.n	8009b6c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	091b      	lsrs	r3, r3, #4
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d009      	beq.n	8009abe <HAL_I2C_EV_IRQHandler+0x22e>
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	0a5b      	lsrs	r3, r3, #9
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fff4 	bl	800aaa4 <I2C_Slave_STOPF>
 8009abc:	e056      	b.n	8009b6c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
 8009ac0:	2b21      	cmp	r3, #33	; 0x21
 8009ac2:	d002      	beq.n	8009aca <HAL_I2C_EV_IRQHandler+0x23a>
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	2b29      	cmp	r3, #41	; 0x29
 8009ac8:	d125      	bne.n	8009b16 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	09db      	lsrs	r3, r3, #7
 8009ace:	f003 0301 	and.w	r3, r3, #1
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00f      	beq.n	8009af6 <HAL_I2C_EV_IRQHandler+0x266>
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	0a9b      	lsrs	r3, r3, #10
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d009      	beq.n	8009af6 <HAL_I2C_EV_IRQHandler+0x266>
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	089b      	lsrs	r3, r3, #2
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d103      	bne.n	8009af6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fed0 	bl	800a894 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009af4:	e039      	b.n	8009b6a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	089b      	lsrs	r3, r3, #2
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d033      	beq.n	8009b6a <HAL_I2C_EV_IRQHandler+0x2da>
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	0a5b      	lsrs	r3, r3, #9
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d02d      	beq.n	8009b6a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fefd 	bl	800a90e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009b14:	e029      	b.n	8009b6a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	099b      	lsrs	r3, r3, #6
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00f      	beq.n	8009b42 <HAL_I2C_EV_IRQHandler+0x2b2>
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	0a9b      	lsrs	r3, r3, #10
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d009      	beq.n	8009b42 <HAL_I2C_EV_IRQHandler+0x2b2>
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	089b      	lsrs	r3, r3, #2
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d103      	bne.n	8009b42 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 ff08 	bl	800a950 <I2C_SlaveReceive_RXNE>
 8009b40:	e014      	b.n	8009b6c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	089b      	lsrs	r3, r3, #2
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00e      	beq.n	8009b6c <HAL_I2C_EV_IRQHandler+0x2dc>
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	0a5b      	lsrs	r3, r3, #9
 8009b52:	f003 0301 	and.w	r3, r3, #1
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d008      	beq.n	8009b6c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 ff36 	bl	800a9cc <I2C_SlaveReceive_BTF>
 8009b60:	e004      	b.n	8009b6c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8009b62:	bf00      	nop
 8009b64:	e002      	b.n	8009b6c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009b66:	bf00      	nop
 8009b68:	e000      	b.n	8009b6c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009b6a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8009b6c:	3720      	adds	r7, #32
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b08a      	sub	sp, #40	; 0x28
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b94:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	0a1b      	lsrs	r3, r3, #8
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00e      	beq.n	8009bc0 <HAL_I2C_ER_IRQHandler+0x4e>
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	0a1b      	lsrs	r3, r3, #8
 8009ba6:	f003 0301 	and.w	r3, r3, #1
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d008      	beq.n	8009bc0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	f043 0301 	orr.w	r3, r3, #1
 8009bb4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009bbe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	0a5b      	lsrs	r3, r3, #9
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00e      	beq.n	8009bea <HAL_I2C_ER_IRQHandler+0x78>
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	0a1b      	lsrs	r3, r3, #8
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d008      	beq.n	8009bea <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	f043 0302 	orr.w	r3, r3, #2
 8009bde:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8009be8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009bea:	6a3b      	ldr	r3, [r7, #32]
 8009bec:	0a9b      	lsrs	r3, r3, #10
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d03f      	beq.n	8009c76 <HAL_I2C_ER_IRQHandler+0x104>
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	0a1b      	lsrs	r3, r3, #8
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d039      	beq.n	8009c76 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8009c02:	7efb      	ldrb	r3, [r7, #27]
 8009c04:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c14:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009c1c:	7ebb      	ldrb	r3, [r7, #26]
 8009c1e:	2b20      	cmp	r3, #32
 8009c20:	d112      	bne.n	8009c48 <HAL_I2C_ER_IRQHandler+0xd6>
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10f      	bne.n	8009c48 <HAL_I2C_ER_IRQHandler+0xd6>
 8009c28:	7cfb      	ldrb	r3, [r7, #19]
 8009c2a:	2b21      	cmp	r3, #33	; 0x21
 8009c2c:	d008      	beq.n	8009c40 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8009c2e:	7cfb      	ldrb	r3, [r7, #19]
 8009c30:	2b29      	cmp	r3, #41	; 0x29
 8009c32:	d005      	beq.n	8009c40 <HAL_I2C_ER_IRQHandler+0xce>
 8009c34:	7cfb      	ldrb	r3, [r7, #19]
 8009c36:	2b28      	cmp	r3, #40	; 0x28
 8009c38:	d106      	bne.n	8009c48 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b21      	cmp	r3, #33	; 0x21
 8009c3e:	d103      	bne.n	8009c48 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 f85f 	bl	800ad04 <I2C_Slave_AF>
 8009c46:	e016      	b.n	8009c76 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c50:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	f043 0304 	orr.w	r3, r3, #4
 8009c58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009c5a:	7efb      	ldrb	r3, [r7, #27]
 8009c5c:	2b10      	cmp	r3, #16
 8009c5e:	d002      	beq.n	8009c66 <HAL_I2C_ER_IRQHandler+0xf4>
 8009c60:	7efb      	ldrb	r3, [r7, #27]
 8009c62:	2b40      	cmp	r3, #64	; 0x40
 8009c64:	d107      	bne.n	8009c76 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c74:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	0adb      	lsrs	r3, r3, #11
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00e      	beq.n	8009ca0 <HAL_I2C_ER_IRQHandler+0x12e>
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	0a1b      	lsrs	r3, r3, #8
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d008      	beq.n	8009ca0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	f043 0308 	orr.w	r3, r3, #8
 8009c94:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009c9e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d008      	beq.n	8009cb8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	431a      	orrs	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 f896 	bl	800ade4 <I2C_ITError>
  }
}
 8009cb8:	bf00      	nop
 8009cba:	3728      	adds	r7, #40	; 0x28
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009cc8:	bf00      	nop
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70fb      	strb	r3, [r7, #3]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d9e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009da6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d150      	bne.n	8009e58 <I2C_MasterTransmit_TXE+0xc8>
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
 8009db8:	2b21      	cmp	r3, #33	; 0x21
 8009dba:	d14d      	bne.n	8009e58 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2b08      	cmp	r3, #8
 8009dc0:	d01d      	beq.n	8009dfe <I2C_MasterTransmit_TXE+0x6e>
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2b20      	cmp	r3, #32
 8009dc6:	d01a      	beq.n	8009dfe <I2C_MasterTransmit_TXE+0x6e>
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009dce:	d016      	beq.n	8009dfe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	685a      	ldr	r2, [r3, #4]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009dde:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2211      	movs	r2, #17
 8009de4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2220      	movs	r2, #32
 8009df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7ff ff62 	bl	8009cc0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009dfc:	e060      	b.n	8009ec0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	685a      	ldr	r2, [r3, #4]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009e0c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e1c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2220      	movs	r2, #32
 8009e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	2b40      	cmp	r3, #64	; 0x40
 8009e36:	d107      	bne.n	8009e48 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7ff ff7d 	bl	8009d40 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009e46:	e03b      	b.n	8009ec0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff ff35 	bl	8009cc0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009e56:	e033      	b.n	8009ec0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
 8009e5a:	2b21      	cmp	r3, #33	; 0x21
 8009e5c:	d005      	beq.n	8009e6a <I2C_MasterTransmit_TXE+0xda>
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	2b40      	cmp	r3, #64	; 0x40
 8009e62:	d12d      	bne.n	8009ec0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
 8009e66:	2b22      	cmp	r3, #34	; 0x22
 8009e68:	d12a      	bne.n	8009ec0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d108      	bne.n	8009e86 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685a      	ldr	r2, [r3, #4]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e82:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009e84:	e01c      	b.n	8009ec0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	2b40      	cmp	r3, #64	; 0x40
 8009e90:	d103      	bne.n	8009e9a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f88e 	bl	8009fb4 <I2C_MemoryTransmit_TXE_BTF>
}
 8009e98:	e012      	b.n	8009ec0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9e:	781a      	ldrb	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009ebe:	e7ff      	b.n	8009ec0 <I2C_MasterTransmit_TXE+0x130>
 8009ec0:	bf00      	nop
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b21      	cmp	r3, #33	; 0x21
 8009ee0:	d164      	bne.n	8009fac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d012      	beq.n	8009f12 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef0:	781a      	ldrb	r2, [r3, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8009f10:	e04c      	b.n	8009fac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2b08      	cmp	r3, #8
 8009f16:	d01d      	beq.n	8009f54 <I2C_MasterTransmit_BTF+0x8c>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2b20      	cmp	r3, #32
 8009f1c:	d01a      	beq.n	8009f54 <I2C_MasterTransmit_BTF+0x8c>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f24:	d016      	beq.n	8009f54 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009f34:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2211      	movs	r2, #17
 8009f3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2220      	movs	r2, #32
 8009f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff feb7 	bl	8009cc0 <HAL_I2C_MasterTxCpltCallback>
}
 8009f52:	e02b      	b.n	8009fac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009f62:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f72:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b40      	cmp	r3, #64	; 0x40
 8009f8c:	d107      	bne.n	8009f9e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7ff fed2 	bl	8009d40 <HAL_I2C_MemTxCpltCallback>
}
 8009f9c:	e006      	b.n	8009fac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7ff fe8a 	bl	8009cc0 <HAL_I2C_MasterTxCpltCallback>
}
 8009fac:	bf00      	nop
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d11d      	bne.n	800a008 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d10b      	bne.n	8009fec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fe4:	1c9a      	adds	r2, r3, #2
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8009fea:	e073      	b.n	800a0d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	121b      	asrs	r3, r3, #8
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a000:	1c5a      	adds	r2, r3, #1
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a006:	e065      	b.n	800a0d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d10b      	bne.n	800a028 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a014:	b2da      	uxtb	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a020:	1c5a      	adds	r2, r3, #1
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a026:	e055      	b.n	800a0d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d151      	bne.n	800a0d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800a030:	7bfb      	ldrb	r3, [r7, #15]
 800a032:	2b22      	cmp	r3, #34	; 0x22
 800a034:	d10d      	bne.n	800a052 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a044:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a050:	e040      	b.n	800a0d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a056:	b29b      	uxth	r3, r3
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d015      	beq.n	800a088 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	2b21      	cmp	r3, #33	; 0x21
 800a060:	d112      	bne.n	800a088 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a066:	781a      	ldrb	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	3b01      	subs	r3, #1
 800a080:	b29a      	uxth	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a086:	e025      	b.n	800a0d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d120      	bne.n	800a0d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800a092:	7bfb      	ldrb	r3, [r7, #15]
 800a094:	2b21      	cmp	r3, #33	; 0x21
 800a096:	d11d      	bne.n	800a0d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a0a6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7ff fe36 	bl	8009d40 <HAL_I2C_MemTxCpltCallback>
}
 800a0d4:	bf00      	nop
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b22      	cmp	r3, #34	; 0x22
 800a0ee:	f040 80a2 	bne.w	800a236 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d921      	bls.n	800a144 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	691a      	ldr	r2, [r3, #16]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10a:	b2d2      	uxtb	r2, r2
 800a10c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a112:	1c5a      	adds	r2, r3, #1
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	3b01      	subs	r3, #1
 800a120:	b29a      	uxth	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	f040 8082 	bne.w	800a236 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	685a      	ldr	r2, [r3, #4]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a140:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800a142:	e078      	b.n	800a236 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d074      	beq.n	800a236 <I2C_MasterReceive_RXNE+0x15a>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d002      	beq.n	800a158 <I2C_MasterReceive_RXNE+0x7c>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d16e      	bne.n	800a236 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f001 fc43 	bl	800b9e4 <I2C_WaitOnSTOPRequestThroughIT>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d142      	bne.n	800a1ea <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a172:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a182:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	691a      	ldr	r2, [r3, #16]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	b2d2      	uxtb	r2, r2
 800a190:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	1c5a      	adds	r2, r3, #1
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2220      	movs	r2, #32
 800a1ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b40      	cmp	r3, #64	; 0x40
 800a1bc:	d10a      	bne.n	800a1d4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f7ff fdc1 	bl	8009d54 <HAL_I2C_MemRxCpltCallback>
}
 800a1d2:	e030      	b.n	800a236 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2212      	movs	r2, #18
 800a1e0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7ff fd76 	bl	8009cd4 <HAL_I2C_MasterRxCpltCallback>
}
 800a1e8:	e025      	b.n	800a236 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	685a      	ldr	r2, [r3, #4]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a1f8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	691a      	ldr	r2, [r3, #16]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a204:	b2d2      	uxtb	r2, r2
 800a206:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20c:	1c5a      	adds	r2, r3, #1
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a216:	b29b      	uxth	r3, r3
 800a218:	3b01      	subs	r3, #1
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2220      	movs	r2, #32
 800a224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7ff fd99 	bl	8009d68 <HAL_I2C_ErrorCallback>
}
 800a236:	bf00      	nop
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b084      	sub	sp, #16
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a250:	b29b      	uxth	r3, r3
 800a252:	2b04      	cmp	r3, #4
 800a254:	d11b      	bne.n	800a28e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	685a      	ldr	r2, [r3, #4]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a264:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	691a      	ldr	r2, [r3, #16]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a270:	b2d2      	uxtb	r2, r2
 800a272:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a278:	1c5a      	adds	r2, r3, #1
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a282:	b29b      	uxth	r3, r3
 800a284:	3b01      	subs	r3, #1
 800a286:	b29a      	uxth	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800a28c:	e0bd      	b.n	800a40a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a292:	b29b      	uxth	r3, r3
 800a294:	2b03      	cmp	r3, #3
 800a296:	d129      	bne.n	800a2ec <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2a6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b04      	cmp	r3, #4
 800a2ac:	d00a      	beq.n	800a2c4 <I2C_MasterReceive_BTF+0x86>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d007      	beq.n	800a2c4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	691a      	ldr	r2, [r3, #16]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	b2d2      	uxtb	r2, r2
 800a2d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	1c5a      	adds	r2, r3, #1
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a2ea:	e08e      	b.n	800a40a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d176      	bne.n	800a3e4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d002      	beq.n	800a302 <I2C_MasterReceive_BTF+0xc4>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b10      	cmp	r3, #16
 800a300:	d108      	bne.n	800a314 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a310:	601a      	str	r2, [r3, #0]
 800a312:	e019      	b.n	800a348 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b04      	cmp	r3, #4
 800a318:	d002      	beq.n	800a320 <I2C_MasterReceive_BTF+0xe2>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d108      	bne.n	800a332 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	e00a      	b.n	800a348 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b10      	cmp	r3, #16
 800a336:	d007      	beq.n	800a348 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a346:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	691a      	ldr	r2, [r3, #16]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a352:	b2d2      	uxtb	r2, r2
 800a354:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35a:	1c5a      	adds	r2, r3, #1
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a364:	b29b      	uxth	r3, r3
 800a366:	3b01      	subs	r3, #1
 800a368:	b29a      	uxth	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	691a      	ldr	r2, [r3, #16]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a378:	b2d2      	uxtb	r2, r2
 800a37a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a380:	1c5a      	adds	r2, r3, #1
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	3b01      	subs	r3, #1
 800a38e:	b29a      	uxth	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685a      	ldr	r2, [r3, #4]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a3a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2220      	movs	r2, #32
 800a3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b40      	cmp	r3, #64	; 0x40
 800a3b6:	d10a      	bne.n	800a3ce <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f7ff fcc4 	bl	8009d54 <HAL_I2C_MemRxCpltCallback>
}
 800a3cc:	e01d      	b.n	800a40a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2212      	movs	r2, #18
 800a3da:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff fc79 	bl	8009cd4 <HAL_I2C_MasterRxCpltCallback>
}
 800a3e2:	e012      	b.n	800a40a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	691a      	ldr	r2, [r3, #16]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ee:	b2d2      	uxtb	r2, r2
 800a3f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a400:	b29b      	uxth	r3, r3
 800a402:	3b01      	subs	r3, #1
 800a404:	b29a      	uxth	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a40a:	bf00      	nop
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800a412:	b480      	push	{r7}
 800a414:	b083      	sub	sp, #12
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b40      	cmp	r3, #64	; 0x40
 800a424:	d117      	bne.n	800a456 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d109      	bne.n	800a442 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a432:	b2db      	uxtb	r3, r3
 800a434:	461a      	mov	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a43e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800a440:	e067      	b.n	800a512 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a446:	b2db      	uxtb	r3, r3
 800a448:	f043 0301 	orr.w	r3, r3, #1
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	611a      	str	r2, [r3, #16]
}
 800a454:	e05d      	b.n	800a512 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a45e:	d133      	bne.n	800a4c8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a466:	b2db      	uxtb	r3, r3
 800a468:	2b21      	cmp	r3, #33	; 0x21
 800a46a:	d109      	bne.n	800a480 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a470:	b2db      	uxtb	r3, r3
 800a472:	461a      	mov	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a47c:	611a      	str	r2, [r3, #16]
 800a47e:	e008      	b.n	800a492 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a484:	b2db      	uxtb	r3, r3
 800a486:	f043 0301 	orr.w	r3, r3, #1
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a496:	2b00      	cmp	r3, #0
 800a498:	d004      	beq.n	800a4a4 <I2C_Master_SB+0x92>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d108      	bne.n	800a4b6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d032      	beq.n	800a512 <I2C_Master_SB+0x100>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d02d      	beq.n	800a512 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	685a      	ldr	r2, [r3, #4]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4c4:	605a      	str	r2, [r3, #4]
}
 800a4c6:	e024      	b.n	800a512 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10e      	bne.n	800a4ee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	11db      	asrs	r3, r3, #7
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	f003 0306 	and.w	r3, r3, #6
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	f063 030f 	orn	r3, r3, #15
 800a4e4:	b2da      	uxtb	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	611a      	str	r2, [r3, #16]
}
 800a4ec:	e011      	b.n	800a512 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d10d      	bne.n	800a512 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	11db      	asrs	r3, r3, #7
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	f003 0306 	and.w	r3, r3, #6
 800a504:	b2db      	uxtb	r3, r3
 800a506:	f063 030e 	orn	r3, r3, #14
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	611a      	str	r2, [r3, #16]
}
 800a512:	bf00      	nop
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800a51e:	b480      	push	{r7}
 800a520:	b083      	sub	sp, #12
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a536:	2b00      	cmp	r3, #0
 800a538:	d004      	beq.n	800a544 <I2C_Master_ADD10+0x26>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a53e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a540:	2b00      	cmp	r3, #0
 800a542:	d108      	bne.n	800a556 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00c      	beq.n	800a566 <I2C_Master_ADD10+0x48>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a552:	2b00      	cmp	r3, #0
 800a554:	d007      	beq.n	800a566 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a564:	605a      	str	r2, [r3, #4]
  }
}
 800a566:	bf00      	nop
 800a568:	370c      	adds	r7, #12
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800a572:	b480      	push	{r7}
 800a574:	b091      	sub	sp, #68	; 0x44
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a580:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a588:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a58e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b22      	cmp	r3, #34	; 0x22
 800a59a:	f040 8169 	bne.w	800a870 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10f      	bne.n	800a5c6 <I2C_Master_ADDR+0x54>
 800a5a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a5aa:	2b40      	cmp	r3, #64	; 0x40
 800a5ac:	d10b      	bne.n	800a5c6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	633b      	str	r3, [r7, #48]	; 0x30
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	695b      	ldr	r3, [r3, #20]
 800a5b8:	633b      	str	r3, [r7, #48]	; 0x30
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	633b      	str	r3, [r7, #48]	; 0x30
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	e160      	b.n	800a888 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d11d      	bne.n	800a60a <I2C_Master_ADDR+0x98>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a5d6:	d118      	bne.n	800a60a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5d8:	2300      	movs	r3, #0
 800a5da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a5fc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	651a      	str	r2, [r3, #80]	; 0x50
 800a608:	e13e      	b.n	800a888 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a60e:	b29b      	uxth	r3, r3
 800a610:	2b00      	cmp	r3, #0
 800a612:	d113      	bne.n	800a63c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a614:	2300      	movs	r3, #0
 800a616:	62bb      	str	r3, [r7, #40]	; 0x28
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	699b      	ldr	r3, [r3, #24]
 800a626:	62bb      	str	r3, [r7, #40]	; 0x28
 800a628:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a638:	601a      	str	r2, [r3, #0]
 800a63a:	e115      	b.n	800a868 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a640:	b29b      	uxth	r3, r3
 800a642:	2b01      	cmp	r3, #1
 800a644:	f040 808a 	bne.w	800a75c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800a648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a64e:	d137      	bne.n	800a6c0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a65e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a66a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a66e:	d113      	bne.n	800a698 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a67e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a680:	2300      	movs	r3, #0
 800a682:	627b      	str	r3, [r7, #36]	; 0x24
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	695b      	ldr	r3, [r3, #20]
 800a68a:	627b      	str	r3, [r7, #36]	; 0x24
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	627b      	str	r3, [r7, #36]	; 0x24
 800a694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a696:	e0e7      	b.n	800a868 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a698:	2300      	movs	r3, #0
 800a69a:	623b      	str	r3, [r7, #32]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	623b      	str	r3, [r7, #32]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	623b      	str	r3, [r7, #32]
 800a6ac:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	e0d3      	b.n	800a868 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	2b08      	cmp	r3, #8
 800a6c4:	d02e      	beq.n	800a724 <I2C_Master_ADDR+0x1b2>
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c8:	2b20      	cmp	r3, #32
 800a6ca:	d02b      	beq.n	800a724 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800a6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ce:	2b12      	cmp	r3, #18
 800a6d0:	d102      	bne.n	800a6d8 <I2C_Master_ADDR+0x166>
 800a6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d125      	bne.n	800a724 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6da:	2b04      	cmp	r3, #4
 800a6dc:	d00e      	beq.n	800a6fc <I2C_Master_ADDR+0x18a>
 800a6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d00b      	beq.n	800a6fc <I2C_Master_ADDR+0x18a>
 800a6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e6:	2b10      	cmp	r3, #16
 800a6e8:	d008      	beq.n	800a6fc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6f8:	601a      	str	r2, [r3, #0]
 800a6fa:	e007      	b.n	800a70c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a70a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a70c:	2300      	movs	r3, #0
 800a70e:	61fb      	str	r3, [r7, #28]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	695b      	ldr	r3, [r3, #20]
 800a716:	61fb      	str	r3, [r7, #28]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	61fb      	str	r3, [r7, #28]
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	e0a1      	b.n	800a868 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a732:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a734:	2300      	movs	r3, #0
 800a736:	61bb      	str	r3, [r7, #24]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	695b      	ldr	r3, [r3, #20]
 800a73e:	61bb      	str	r3, [r7, #24]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	61bb      	str	r3, [r7, #24]
 800a748:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	e085      	b.n	800a868 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a760:	b29b      	uxth	r3, r3
 800a762:	2b02      	cmp	r3, #2
 800a764:	d14d      	bne.n	800a802 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a768:	2b04      	cmp	r3, #4
 800a76a:	d016      	beq.n	800a79a <I2C_Master_ADDR+0x228>
 800a76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d013      	beq.n	800a79a <I2C_Master_ADDR+0x228>
 800a772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a774:	2b10      	cmp	r3, #16
 800a776:	d010      	beq.n	800a79a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a786:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	e007      	b.n	800a7aa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a7a8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7b8:	d117      	bne.n	800a7ea <I2C_Master_ADDR+0x278>
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a7c0:	d00b      	beq.n	800a7da <I2C_Master_ADDR+0x268>
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d008      	beq.n	800a7da <I2C_Master_ADDR+0x268>
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	2b08      	cmp	r3, #8
 800a7cc:	d005      	beq.n	800a7da <I2C_Master_ADDR+0x268>
 800a7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d0:	2b10      	cmp	r3, #16
 800a7d2:	d002      	beq.n	800a7da <I2C_Master_ADDR+0x268>
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	d107      	bne.n	800a7ea <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a7e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	617b      	str	r3, [r7, #20]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	617b      	str	r3, [r7, #20]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	617b      	str	r3, [r7, #20]
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	e032      	b.n	800a868 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a810:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a81c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a820:	d117      	bne.n	800a852 <I2C_Master_ADDR+0x2e0>
 800a822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a824:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a828:	d00b      	beq.n	800a842 <I2C_Master_ADDR+0x2d0>
 800a82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d008      	beq.n	800a842 <I2C_Master_ADDR+0x2d0>
 800a830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a832:	2b08      	cmp	r3, #8
 800a834:	d005      	beq.n	800a842 <I2C_Master_ADDR+0x2d0>
 800a836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a838:	2b10      	cmp	r3, #16
 800a83a:	d002      	beq.n	800a842 <I2C_Master_ADDR+0x2d0>
 800a83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83e:	2b20      	cmp	r3, #32
 800a840:	d107      	bne.n	800a852 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a850:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a852:	2300      	movs	r3, #0
 800a854:	613b      	str	r3, [r7, #16]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	695b      	ldr	r3, [r3, #20]
 800a85c:	613b      	str	r3, [r7, #16]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	613b      	str	r3, [r7, #16]
 800a866:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800a86e:	e00b      	b.n	800a888 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a870:	2300      	movs	r3, #0
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	68fb      	ldr	r3, [r7, #12]
}
 800a886:	e7ff      	b.n	800a888 <I2C_Master_ADDR+0x316>
 800a888:	bf00      	nop
 800a88a:	3744      	adds	r7, #68	; 0x44
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d02b      	beq.n	800a906 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b2:	781a      	ldrb	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d114      	bne.n	800a906 <I2C_SlaveTransmit_TXE+0x72>
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
 800a8de:	2b29      	cmp	r3, #41	; 0x29
 800a8e0:	d111      	bne.n	800a906 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2221      	movs	r2, #33	; 0x21
 800a8f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2228      	movs	r2, #40	; 0x28
 800a8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f7ff f9f1 	bl	8009ce8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a906:	bf00      	nop
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a90e:	b480      	push	{r7}
 800a910:	b083      	sub	sp, #12
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d011      	beq.n	800a944 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a924:	781a      	ldrb	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	3b01      	subs	r3, #1
 800a93e:	b29a      	uxth	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a95e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a964:	b29b      	uxth	r3, r3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d02c      	beq.n	800a9c4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	691a      	ldr	r2, [r3, #16]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a974:	b2d2      	uxtb	r2, r2
 800a976:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97c:	1c5a      	adds	r2, r3, #1
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a986:	b29b      	uxth	r3, r3
 800a988:	3b01      	subs	r3, #1
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a994:	b29b      	uxth	r3, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d114      	bne.n	800a9c4 <I2C_SlaveReceive_RXNE+0x74>
 800a99a:	7bfb      	ldrb	r3, [r7, #15]
 800a99c:	2b2a      	cmp	r3, #42	; 0x2a
 800a99e:	d111      	bne.n	800a9c4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9ae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2222      	movs	r2, #34	; 0x22
 800a9b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2228      	movs	r2, #40	; 0x28
 800a9ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7ff f99c 	bl	8009cfc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a9c4:	bf00      	nop
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d012      	beq.n	800aa04 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	691a      	ldr	r2, [r3, #16]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	b2d2      	uxtb	r2, r2
 800a9ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	1c5a      	adds	r2, r3, #1
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aa2a:	2b28      	cmp	r3, #40	; 0x28
 800aa2c:	d127      	bne.n	800aa7e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	685a      	ldr	r2, [r3, #4]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa3c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	089b      	lsrs	r3, r3, #2
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d101      	bne.n	800aa4e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	09db      	lsrs	r3, r3, #7
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d103      	bne.n	800aa62 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	81bb      	strh	r3, [r7, #12]
 800aa60:	e002      	b.n	800aa68 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800aa70:	89ba      	ldrh	r2, [r7, #12]
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
 800aa74:	4619      	mov	r1, r3
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f7ff f94a 	bl	8009d10 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800aa7c:	e00e      	b.n	800aa9c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60bb      	str	r3, [r7, #8]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	60bb      	str	r3, [r7, #8]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	60bb      	str	r3, [r7, #8]
 800aa92:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800aa9c:	bf00      	nop
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aab2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800aac2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800aac4:	2300      	movs	r3, #0
 800aac6:	60bb      	str	r3, [r7, #8]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	60bb      	str	r3, [r7, #8]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f042 0201 	orr.w	r2, r2, #1
 800aade:	601a      	str	r2, [r3, #0]
 800aae0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aaf0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aafc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab00:	d172      	bne.n	800abe8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
 800ab04:	2b22      	cmp	r3, #34	; 0x22
 800ab06:	d002      	beq.n	800ab0e <I2C_Slave_STOPF+0x6a>
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
 800ab0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab0c:	d135      	bne.n	800ab7a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d005      	beq.n	800ab32 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2a:	f043 0204 	orr.w	r2, r3, #4
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	685a      	ldr	r2, [r3, #4]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fd fc44 	bl	80083d4 <HAL_DMA_GetState>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d049      	beq.n	800abe6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab56:	4a69      	ldr	r2, [pc, #420]	; (800acfc <I2C_Slave_STOPF+0x258>)
 800ab58:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fd fa8c 	bl	800807c <HAL_DMA_Abort_IT>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d03d      	beq.n	800abe6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ab74:	4610      	mov	r0, r2
 800ab76:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ab78:	e035      	b.n	800abe6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	b29a      	uxth	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d005      	beq.n	800ab9e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab96:	f043 0204 	orr.w	r2, r3, #4
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800abac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fd fc0e 	bl	80083d4 <HAL_DMA_GetState>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d014      	beq.n	800abe8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc2:	4a4e      	ldr	r2, [pc, #312]	; (800acfc <I2C_Slave_STOPF+0x258>)
 800abc4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fd fa56 	bl	800807c <HAL_DMA_Abort_IT>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d008      	beq.n	800abe8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800abe0:	4610      	mov	r0, r2
 800abe2:	4798      	blx	r3
 800abe4:	e000      	b.n	800abe8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800abe6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abec:	b29b      	uxth	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d03e      	beq.n	800ac70 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	695b      	ldr	r3, [r3, #20]
 800abf8:	f003 0304 	and.w	r3, r3, #4
 800abfc:	2b04      	cmp	r3, #4
 800abfe:	d112      	bne.n	800ac26 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	691a      	ldr	r2, [r3, #16]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0a:	b2d2      	uxtb	r2, r2
 800ac0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac12:	1c5a      	adds	r2, r3, #1
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	695b      	ldr	r3, [r3, #20]
 800ac2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac30:	2b40      	cmp	r3, #64	; 0x40
 800ac32:	d112      	bne.n	800ac5a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	691a      	ldr	r2, [r3, #16]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3e:	b2d2      	uxtb	r2, r2
 800ac40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac46:	1c5a      	adds	r2, r3, #1
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	3b01      	subs	r3, #1
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d005      	beq.n	800ac70 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac68:	f043 0204 	orr.w	r2, r3, #4
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d003      	beq.n	800ac80 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f8b3 	bl	800ade4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800ac7e:	e039      	b.n	800acf4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ac80:	7bfb      	ldrb	r3, [r7, #15]
 800ac82:	2b2a      	cmp	r3, #42	; 0x2a
 800ac84:	d109      	bne.n	800ac9a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2228      	movs	r2, #40	; 0x28
 800ac90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7ff f831 	bl	8009cfc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b28      	cmp	r3, #40	; 0x28
 800aca4:	d111      	bne.n	800acca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a15      	ldr	r2, [pc, #84]	; (800ad00 <I2C_Slave_STOPF+0x25c>)
 800acaa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2220      	movs	r2, #32
 800acb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7ff f832 	bl	8009d2c <HAL_I2C_ListenCpltCallback>
}
 800acc8:	e014      	b.n	800acf4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acce:	2b22      	cmp	r3, #34	; 0x22
 800acd0:	d002      	beq.n	800acd8 <I2C_Slave_STOPF+0x234>
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
 800acd4:	2b22      	cmp	r3, #34	; 0x22
 800acd6:	d10d      	bne.n	800acf4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2220      	movs	r2, #32
 800ace2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7ff f804 	bl	8009cfc <HAL_I2C_SlaveRxCpltCallback>
}
 800acf4:	bf00      	nop
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	0800b5e5 	.word	0x0800b5e5
 800ad00:	ffff0000 	.word	0xffff0000

0800ad04 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad12:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad18:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	2b08      	cmp	r3, #8
 800ad1e:	d002      	beq.n	800ad26 <I2C_Slave_AF+0x22>
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2b20      	cmp	r3, #32
 800ad24:	d129      	bne.n	800ad7a <I2C_Slave_AF+0x76>
 800ad26:	7bfb      	ldrb	r3, [r7, #15]
 800ad28:	2b28      	cmp	r3, #40	; 0x28
 800ad2a:	d126      	bne.n	800ad7a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a2c      	ldr	r2, [pc, #176]	; (800ade0 <I2C_Slave_AF+0xdc>)
 800ad30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ad40:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ad4a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad5a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2220      	movs	r2, #32
 800ad66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7fe ffda 	bl	8009d2c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800ad78:	e02e      	b.n	800add8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
 800ad7c:	2b21      	cmp	r3, #33	; 0x21
 800ad7e:	d126      	bne.n	800adce <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a17      	ldr	r2, [pc, #92]	; (800ade0 <I2C_Slave_AF+0xdc>)
 800ad84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2221      	movs	r2, #33	; 0x21
 800ad8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2220      	movs	r2, #32
 800ad90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800adaa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800adb4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adc4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f7fe ff8e 	bl	8009ce8 <HAL_I2C_SlaveTxCpltCallback>
}
 800adcc:	e004      	b.n	800add8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800add6:	615a      	str	r2, [r3, #20]
}
 800add8:	bf00      	nop
 800adda:	3710      	adds	r7, #16
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	ffff0000 	.word	0xffff0000

0800ade4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adf2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adfa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800adfc:	7bbb      	ldrb	r3, [r7, #14]
 800adfe:	2b10      	cmp	r3, #16
 800ae00:	d002      	beq.n	800ae08 <I2C_ITError+0x24>
 800ae02:	7bbb      	ldrb	r3, [r7, #14]
 800ae04:	2b40      	cmp	r3, #64	; 0x40
 800ae06:	d10a      	bne.n	800ae1e <I2C_ITError+0x3a>
 800ae08:	7bfb      	ldrb	r3, [r7, #15]
 800ae0a:	2b22      	cmp	r3, #34	; 0x22
 800ae0c:	d107      	bne.n	800ae1e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae1c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ae1e:	7bfb      	ldrb	r3, [r7, #15]
 800ae20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ae24:	2b28      	cmp	r3, #40	; 0x28
 800ae26:	d107      	bne.n	800ae38 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2228      	movs	r2, #40	; 0x28
 800ae32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ae36:	e015      	b.n	800ae64 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae46:	d00a      	beq.n	800ae5e <I2C_ITError+0x7a>
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
 800ae4a:	2b60      	cmp	r3, #96	; 0x60
 800ae4c:	d007      	beq.n	800ae5e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2220      	movs	r2, #32
 800ae52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae72:	d162      	bne.n	800af3a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	685a      	ldr	r2, [r3, #4]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae82:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d020      	beq.n	800aed4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae96:	4a6a      	ldr	r2, [pc, #424]	; (800b040 <I2C_ITError+0x25c>)
 800ae98:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fd f8ec 	bl	800807c <HAL_DMA_Abort_IT>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 8089 	beq.w	800afbe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f022 0201 	bic.w	r2, r2, #1
 800aeba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2220      	movs	r2, #32
 800aec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aece:	4610      	mov	r0, r2
 800aed0:	4798      	blx	r3
 800aed2:	e074      	b.n	800afbe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed8:	4a59      	ldr	r2, [pc, #356]	; (800b040 <I2C_ITError+0x25c>)
 800aeda:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7fd f8cb 	bl	800807c <HAL_DMA_Abort_IT>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d068      	beq.n	800afbe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef6:	2b40      	cmp	r3, #64	; 0x40
 800aef8:	d10b      	bne.n	800af12 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	691a      	ldr	r2, [r3, #16]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af04:	b2d2      	uxtb	r2, r2
 800af06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0c:	1c5a      	adds	r2, r3, #1
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f022 0201 	bic.w	r2, r2, #1
 800af20:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2220      	movs	r2, #32
 800af26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af34:	4610      	mov	r0, r2
 800af36:	4798      	blx	r3
 800af38:	e041      	b.n	800afbe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af40:	b2db      	uxtb	r3, r3
 800af42:	2b60      	cmp	r3, #96	; 0x60
 800af44:	d125      	bne.n	800af92 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2220      	movs	r2, #32
 800af4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af5e:	2b40      	cmp	r3, #64	; 0x40
 800af60:	d10b      	bne.n	800af7a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	691a      	ldr	r2, [r3, #16]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6c:	b2d2      	uxtb	r2, r2
 800af6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	1c5a      	adds	r2, r3, #1
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f022 0201 	bic.w	r2, r2, #1
 800af88:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7fe fef6 	bl	8009d7c <HAL_I2C_AbortCpltCallback>
 800af90:	e015      	b.n	800afbe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	695b      	ldr	r3, [r3, #20]
 800af98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af9c:	2b40      	cmp	r3, #64	; 0x40
 800af9e:	d10b      	bne.n	800afb8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	691a      	ldr	r2, [r3, #16]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afaa:	b2d2      	uxtb	r2, r2
 800afac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb2:	1c5a      	adds	r2, r3, #1
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7fe fed5 	bl	8009d68 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	f003 0301 	and.w	r3, r3, #1
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10e      	bne.n	800afec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d109      	bne.n	800afec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d104      	bne.n	800afec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d007      	beq.n	800affc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	685a      	ldr	r2, [r3, #4]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800affa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b002:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b008:	f003 0304 	and.w	r3, r3, #4
 800b00c:	2b04      	cmp	r3, #4
 800b00e:	d113      	bne.n	800b038 <I2C_ITError+0x254>
 800b010:	7bfb      	ldrb	r3, [r7, #15]
 800b012:	2b28      	cmp	r3, #40	; 0x28
 800b014:	d110      	bne.n	800b038 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	4a0a      	ldr	r2, [pc, #40]	; (800b044 <I2C_ITError+0x260>)
 800b01a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2220      	movs	r2, #32
 800b026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7fe fe7a 	bl	8009d2c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b038:	bf00      	nop
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	0800b5e5 	.word	0x0800b5e5
 800b044:	ffff0000 	.word	0xffff0000

0800b048 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af02      	add	r7, sp, #8
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	607a      	str	r2, [r7, #4]
 800b052:	603b      	str	r3, [r7, #0]
 800b054:	460b      	mov	r3, r1
 800b056:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	2b08      	cmp	r3, #8
 800b062:	d006      	beq.n	800b072 <I2C_MasterRequestWrite+0x2a>
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	2b01      	cmp	r3, #1
 800b068:	d003      	beq.n	800b072 <I2C_MasterRequestWrite+0x2a>
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b070:	d108      	bne.n	800b084 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b080:	601a      	str	r2, [r3, #0]
 800b082:	e00b      	b.n	800b09c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b088:	2b12      	cmp	r3, #18
 800b08a:	d107      	bne.n	800b09c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b09a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f000 fb43 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00d      	beq.n	800b0d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0c2:	d103      	bne.n	800b0cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e035      	b.n	800b13c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0d8:	d108      	bne.n	800b0ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b0da:	897b      	ldrh	r3, [r7, #10]
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	461a      	mov	r2, r3
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b0e8:	611a      	str	r2, [r3, #16]
 800b0ea:	e01b      	b.n	800b124 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b0ec:	897b      	ldrh	r3, [r7, #10]
 800b0ee:	11db      	asrs	r3, r3, #7
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	f003 0306 	and.w	r3, r3, #6
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	f063 030f 	orn	r3, r3, #15
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	490e      	ldr	r1, [pc, #56]	; (800b144 <I2C_MasterRequestWrite+0xfc>)
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f000 fb69 	bl	800b7e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	e010      	b.n	800b13c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b11a:	897b      	ldrh	r3, [r7, #10]
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	4907      	ldr	r1, [pc, #28]	; (800b148 <I2C_MasterRequestWrite+0x100>)
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	f000 fb59 	bl	800b7e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d001      	beq.n	800b13a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	e000      	b.n	800b13c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3718      	adds	r7, #24
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	00010008 	.word	0x00010008
 800b148:	00010002 	.word	0x00010002

0800b14c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b088      	sub	sp, #32
 800b150:	af02      	add	r7, sp, #8
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	607a      	str	r2, [r7, #4]
 800b156:	603b      	str	r3, [r7, #0]
 800b158:	460b      	mov	r3, r1
 800b15a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b160:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b170:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	2b08      	cmp	r3, #8
 800b176:	d006      	beq.n	800b186 <I2C_MasterRequestRead+0x3a>
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d003      	beq.n	800b186 <I2C_MasterRequestRead+0x3a>
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b184:	d108      	bne.n	800b198 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b194:	601a      	str	r2, [r3, #0]
 800b196:	e00b      	b.n	800b1b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19c:	2b11      	cmp	r3, #17
 800b19e:	d107      	bne.n	800b1b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f000 fab9 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00d      	beq.n	800b1e4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1d6:	d103      	bne.n	800b1e0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	e079      	b.n	800b2d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1ec:	d108      	bne.n	800b200 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b1ee:	897b      	ldrh	r3, [r7, #10]
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	f043 0301 	orr.w	r3, r3, #1
 800b1f6:	b2da      	uxtb	r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	611a      	str	r2, [r3, #16]
 800b1fe:	e05f      	b.n	800b2c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b200:	897b      	ldrh	r3, [r7, #10]
 800b202:	11db      	asrs	r3, r3, #7
 800b204:	b2db      	uxtb	r3, r3
 800b206:	f003 0306 	and.w	r3, r3, #6
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	f063 030f 	orn	r3, r3, #15
 800b210:	b2da      	uxtb	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	4930      	ldr	r1, [pc, #192]	; (800b2e0 <I2C_MasterRequestRead+0x194>)
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f000 fadf 	bl	800b7e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	e054      	b.n	800b2d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b22e:	897b      	ldrh	r3, [r7, #10]
 800b230:	b2da      	uxtb	r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	4929      	ldr	r1, [pc, #164]	; (800b2e4 <I2C_MasterRequestRead+0x198>)
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f000 facf 	bl	800b7e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d001      	beq.n	800b24e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e044      	b.n	800b2d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b24e:	2300      	movs	r3, #0
 800b250:	613b      	str	r3, [r7, #16]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	695b      	ldr	r3, [r3, #20]
 800b258:	613b      	str	r3, [r7, #16]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	613b      	str	r3, [r7, #16]
 800b262:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b272:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f000 fa57 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00d      	beq.n	800b2a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b29a:	d103      	bne.n	800b2a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e017      	b.n	800b2d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b2a8:	897b      	ldrh	r3, [r7, #10]
 800b2aa:	11db      	asrs	r3, r3, #7
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	f003 0306 	and.w	r3, r3, #6
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	f063 030e 	orn	r3, r3, #14
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	4907      	ldr	r1, [pc, #28]	; (800b2e4 <I2C_MasterRequestRead+0x198>)
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f000 fa8b 	bl	800b7e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e000      	b.n	800b2d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3718      	adds	r7, #24
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	00010008 	.word	0x00010008
 800b2e4:	00010002 	.word	0x00010002

0800b2e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b088      	sub	sp, #32
 800b2ec:	af02      	add	r7, sp, #8
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	4608      	mov	r0, r1
 800b2f2:	4611      	mov	r1, r2
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	817b      	strh	r3, [r7, #10]
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	813b      	strh	r3, [r7, #8]
 800b2fe:	4613      	mov	r3, r2
 800b300:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b310:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	6a3b      	ldr	r3, [r7, #32]
 800b318:	2200      	movs	r2, #0
 800b31a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f000 fa08 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00d      	beq.n	800b346 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b338:	d103      	bne.n	800b342 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b340:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b342:	2303      	movs	r3, #3
 800b344:	e05f      	b.n	800b406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b346:	897b      	ldrh	r3, [r7, #10]
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	461a      	mov	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b354:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b358:	6a3a      	ldr	r2, [r7, #32]
 800b35a:	492d      	ldr	r1, [pc, #180]	; (800b410 <I2C_RequestMemoryWrite+0x128>)
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f000 fa40 	bl	800b7e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e04c      	b.n	800b406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b36c:	2300      	movs	r3, #0
 800b36e:	617b      	str	r3, [r7, #20]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	695b      	ldr	r3, [r3, #20]
 800b376:	617b      	str	r3, [r7, #20]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	699b      	ldr	r3, [r3, #24]
 800b37e:	617b      	str	r3, [r7, #20]
 800b380:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b384:	6a39      	ldr	r1, [r7, #32]
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f000 faaa 	bl	800b8e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00d      	beq.n	800b3ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b396:	2b04      	cmp	r3, #4
 800b398:	d107      	bne.n	800b3aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e02b      	b.n	800b406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b3ae:	88fb      	ldrh	r3, [r7, #6]
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d105      	bne.n	800b3c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b3b4:	893b      	ldrh	r3, [r7, #8]
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	611a      	str	r2, [r3, #16]
 800b3be:	e021      	b.n	800b404 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b3c0:	893b      	ldrh	r3, [r7, #8]
 800b3c2:	0a1b      	lsrs	r3, r3, #8
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	b2da      	uxtb	r2, r3
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3d0:	6a39      	ldr	r1, [r7, #32]
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f000 fa84 	bl	800b8e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00d      	beq.n	800b3fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e2:	2b04      	cmp	r3, #4
 800b3e4:	d107      	bne.n	800b3f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e005      	b.n	800b406 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b3fa:	893b      	ldrh	r3, [r7, #8]
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	00010002 	.word	0x00010002

0800b414 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b088      	sub	sp, #32
 800b418:	af02      	add	r7, sp, #8
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	4608      	mov	r0, r1
 800b41e:	4611      	mov	r1, r2
 800b420:	461a      	mov	r2, r3
 800b422:	4603      	mov	r3, r0
 800b424:	817b      	strh	r3, [r7, #10]
 800b426:	460b      	mov	r3, r1
 800b428:	813b      	strh	r3, [r7, #8]
 800b42a:	4613      	mov	r3, r2
 800b42c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b43c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b44c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	2200      	movs	r2, #0
 800b456:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f000 f96a 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00d      	beq.n	800b482 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b474:	d103      	bne.n	800b47e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b47c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b47e:	2303      	movs	r3, #3
 800b480:	e0aa      	b.n	800b5d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b482:	897b      	ldrh	r3, [r7, #10]
 800b484:	b2db      	uxtb	r3, r3
 800b486:	461a      	mov	r2, r3
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b490:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b494:	6a3a      	ldr	r2, [r7, #32]
 800b496:	4952      	ldr	r1, [pc, #328]	; (800b5e0 <I2C_RequestMemoryRead+0x1cc>)
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f000 f9a2 	bl	800b7e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e097      	b.n	800b5d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	617b      	str	r3, [r7, #20]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	617b      	str	r3, [r7, #20]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	699b      	ldr	r3, [r3, #24]
 800b4ba:	617b      	str	r3, [r7, #20]
 800b4bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4c0:	6a39      	ldr	r1, [r7, #32]
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 fa0c 	bl	800b8e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00d      	beq.n	800b4ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d2:	2b04      	cmp	r3, #4
 800b4d4:	d107      	bne.n	800b4e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e076      	b.n	800b5d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b4ea:	88fb      	ldrh	r3, [r7, #6]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d105      	bne.n	800b4fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b4f0:	893b      	ldrh	r3, [r7, #8]
 800b4f2:	b2da      	uxtb	r2, r3
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	611a      	str	r2, [r3, #16]
 800b4fa:	e021      	b.n	800b540 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b4fc:	893b      	ldrh	r3, [r7, #8]
 800b4fe:	0a1b      	lsrs	r3, r3, #8
 800b500:	b29b      	uxth	r3, r3
 800b502:	b2da      	uxtb	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b50c:	6a39      	ldr	r1, [r7, #32]
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f000 f9e6 	bl	800b8e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00d      	beq.n	800b536 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b51e:	2b04      	cmp	r3, #4
 800b520:	d107      	bne.n	800b532 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b530:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e050      	b.n	800b5d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b536:	893b      	ldrh	r3, [r7, #8]
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b542:	6a39      	ldr	r1, [r7, #32]
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 f9cb 	bl	800b8e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00d      	beq.n	800b56c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b554:	2b04      	cmp	r3, #4
 800b556:	d107      	bne.n	800b568 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b566:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b568:	2301      	movs	r3, #1
 800b56a:	e035      	b.n	800b5d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b57a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	6a3b      	ldr	r3, [r7, #32]
 800b582:	2200      	movs	r2, #0
 800b584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 f8d3 	bl	800b734 <I2C_WaitOnFlagUntilTimeout>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00d      	beq.n	800b5b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5a2:	d103      	bne.n	800b5ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b5ac:	2303      	movs	r3, #3
 800b5ae:	e013      	b.n	800b5d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b5b0:	897b      	ldrh	r3, [r7, #10]
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	f043 0301 	orr.w	r3, r3, #1
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	6a3a      	ldr	r2, [r7, #32]
 800b5c4:	4906      	ldr	r1, [pc, #24]	; (800b5e0 <I2C_RequestMemoryRead+0x1cc>)
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f000 f90b 	bl	800b7e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e000      	b.n	800b5d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3718      	adds	r7, #24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	00010002 	.word	0x00010002

0800b5e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5fc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b5fe:	4b4b      	ldr	r3, [pc, #300]	; (800b72c <I2C_DMAAbort+0x148>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	08db      	lsrs	r3, r3, #3
 800b604:	4a4a      	ldr	r2, [pc, #296]	; (800b730 <I2C_DMAAbort+0x14c>)
 800b606:	fba2 2303 	umull	r2, r3, r2, r3
 800b60a:	0a1a      	lsrs	r2, r3, #8
 800b60c:	4613      	mov	r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	4413      	add	r3, r2
 800b612:	00da      	lsls	r2, r3, #3
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d106      	bne.n	800b62c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b622:	f043 0220 	orr.w	r2, r3, #32
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800b62a:	e00a      	b.n	800b642 <I2C_DMAAbort+0x5e>
    }
    count--;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	3b01      	subs	r3, #1
 800b630:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b63c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b640:	d0ea      	beq.n	800b618 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b646:	2b00      	cmp	r3, #0
 800b648:	d003      	beq.n	800b652 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b64e:	2200      	movs	r2, #0
 800b650:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b656:	2b00      	cmp	r3, #0
 800b658:	d003      	beq.n	800b662 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b65e:	2200      	movs	r2, #0
 800b660:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b670:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2200      	movs	r2, #0
 800b676:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d003      	beq.n	800b688 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b684:	2200      	movs	r2, #0
 800b686:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d003      	beq.n	800b698 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b694:	2200      	movs	r2, #0
 800b696:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f022 0201 	bic.w	r2, r2, #1
 800b6a6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	2b60      	cmp	r3, #96	; 0x60
 800b6b2:	d10e      	bne.n	800b6d2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	2220      	movs	r2, #32
 800b6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b6ca:	6978      	ldr	r0, [r7, #20]
 800b6cc:	f7fe fb56 	bl	8009d7c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b6d0:	e027      	b.n	800b722 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b6d2:	7cfb      	ldrb	r3, [r7, #19]
 800b6d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b6d8:	2b28      	cmp	r3, #40	; 0x28
 800b6da:	d117      	bne.n	800b70c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f042 0201 	orr.w	r2, r2, #1
 800b6ea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b6fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	2200      	movs	r2, #0
 800b700:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	2228      	movs	r2, #40	; 0x28
 800b706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b70a:	e007      	b.n	800b71c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	2220      	movs	r2, #32
 800b710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800b71c:	6978      	ldr	r0, [r7, #20]
 800b71e:	f7fe fb23 	bl	8009d68 <HAL_I2C_ErrorCallback>
}
 800b722:	bf00      	nop
 800b724:	3718      	adds	r7, #24
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	20000034 	.word	0x20000034
 800b730:	14f8b589 	.word	0x14f8b589

0800b734 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	603b      	str	r3, [r7, #0]
 800b740:	4613      	mov	r3, r2
 800b742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b744:	e025      	b.n	800b792 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74c:	d021      	beq.n	800b792 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b74e:	f7fc f94f 	bl	80079f0 <HAL_GetTick>
 800b752:	4602      	mov	r2, r0
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	683a      	ldr	r2, [r7, #0]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d302      	bcc.n	800b764 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d116      	bne.n	800b792 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2200      	movs	r2, #0
 800b768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2220      	movs	r2, #32
 800b76e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77e:	f043 0220 	orr.w	r2, r3, #32
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e023      	b.n	800b7da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	0c1b      	lsrs	r3, r3, #16
 800b796:	b2db      	uxtb	r3, r3
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d10d      	bne.n	800b7b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	695b      	ldr	r3, [r3, #20]
 800b7a2:	43da      	mvns	r2, r3
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	4013      	ands	r3, r2
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	bf0c      	ite	eq
 800b7ae:	2301      	moveq	r3, #1
 800b7b0:	2300      	movne	r3, #0
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	e00c      	b.n	800b7d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	43da      	mvns	r2, r3
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	bf0c      	ite	eq
 800b7ca:	2301      	moveq	r3, #1
 800b7cc:	2300      	movne	r3, #0
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	79fb      	ldrb	r3, [r7, #7]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d0b6      	beq.n	800b746 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b084      	sub	sp, #16
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	60f8      	str	r0, [r7, #12]
 800b7ea:	60b9      	str	r1, [r7, #8]
 800b7ec:	607a      	str	r2, [r7, #4]
 800b7ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b7f0:	e051      	b.n	800b896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	695b      	ldr	r3, [r3, #20]
 800b7f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b800:	d123      	bne.n	800b84a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b810:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b81a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2200      	movs	r2, #0
 800b820:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2220      	movs	r2, #32
 800b826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2200      	movs	r2, #0
 800b82e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b836:	f043 0204 	orr.w	r2, r3, #4
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	e046      	b.n	800b8d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b850:	d021      	beq.n	800b896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b852:	f7fc f8cd 	bl	80079f0 <HAL_GetTick>
 800b856:	4602      	mov	r2, r0
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d302      	bcc.n	800b868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d116      	bne.n	800b896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2220      	movs	r2, #32
 800b872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b882:	f043 0220 	orr.w	r2, r3, #32
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	e020      	b.n	800b8d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	0c1b      	lsrs	r3, r3, #16
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d10c      	bne.n	800b8ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	695b      	ldr	r3, [r3, #20]
 800b8a6:	43da      	mvns	r2, r3
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	bf14      	ite	ne
 800b8b2:	2301      	movne	r3, #1
 800b8b4:	2300      	moveq	r3, #0
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	e00b      	b.n	800b8d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	43da      	mvns	r2, r3
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	bf14      	ite	ne
 800b8cc:	2301      	movne	r3, #1
 800b8ce:	2300      	moveq	r3, #0
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d18d      	bne.n	800b7f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b8ec:	e02d      	b.n	800b94a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f000 f900 	bl	800baf4 <I2C_IsAcknowledgeFailed>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e02d      	b.n	800b95a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b904:	d021      	beq.n	800b94a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b906:	f7fc f873 	bl	80079f0 <HAL_GetTick>
 800b90a:	4602      	mov	r2, r0
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	429a      	cmp	r2, r3
 800b914:	d302      	bcc.n	800b91c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d116      	bne.n	800b94a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2200      	movs	r2, #0
 800b920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2220      	movs	r2, #32
 800b926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b936:	f043 0220 	orr.w	r2, r3, #32
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e007      	b.n	800b95a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	695b      	ldr	r3, [r3, #20]
 800b950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b954:	2b80      	cmp	r3, #128	; 0x80
 800b956:	d1ca      	bne.n	800b8ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b084      	sub	sp, #16
 800b966:	af00      	add	r7, sp, #0
 800b968:	60f8      	str	r0, [r7, #12]
 800b96a:	60b9      	str	r1, [r7, #8]
 800b96c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b96e:	e02d      	b.n	800b9cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f000 f8bf 	bl	800baf4 <I2C_IsAcknowledgeFailed>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d001      	beq.n	800b980 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	e02d      	b.n	800b9dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b986:	d021      	beq.n	800b9cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b988:	f7fc f832 	bl	80079f0 <HAL_GetTick>
 800b98c:	4602      	mov	r2, r0
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	1ad3      	subs	r3, r2, r3
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	429a      	cmp	r2, r3
 800b996:	d302      	bcc.n	800b99e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d116      	bne.n	800b9cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b8:	f043 0220 	orr.w	r2, r3, #32
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e007      	b.n	800b9dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	f003 0304 	and.w	r3, r3, #4
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	d1ca      	bne.n	800b970 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800b9f0:	4b13      	ldr	r3, [pc, #76]	; (800ba40 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	08db      	lsrs	r3, r3, #3
 800b9f6:	4a13      	ldr	r2, [pc, #76]	; (800ba44 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800b9f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b9fc:	0a1a      	lsrs	r2, r3, #8
 800b9fe:	4613      	mov	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	4413      	add	r3, r2
 800ba04:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d107      	bne.n	800ba22 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba16:	f043 0220 	orr.w	r2, r3, #32
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e008      	b.n	800ba34 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba30:	d0e9      	beq.n	800ba06 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr
 800ba40:	20000034 	.word	0x20000034
 800ba44:	14f8b589 	.word	0x14f8b589

0800ba48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ba54:	e042      	b.n	800badc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	f003 0310 	and.w	r3, r3, #16
 800ba60:	2b10      	cmp	r3, #16
 800ba62:	d119      	bne.n	800ba98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f06f 0210 	mvn.w	r2, #16
 800ba6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2220      	movs	r2, #32
 800ba78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ba94:	2301      	movs	r3, #1
 800ba96:	e029      	b.n	800baec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba98:	f7fb ffaa 	bl	80079f0 <HAL_GetTick>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d302      	bcc.n	800baae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d116      	bne.n	800badc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2220      	movs	r2, #32
 800bab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac8:	f043 0220 	orr.w	r2, r3, #32
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	e007      	b.n	800baec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	695b      	ldr	r3, [r3, #20]
 800bae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae6:	2b40      	cmp	r3, #64	; 0x40
 800bae8:	d1b5      	bne.n	800ba56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3710      	adds	r7, #16
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb0a:	d11b      	bne.n	800bb44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bb14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2220      	movs	r2, #32
 800bb20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb30:	f043 0204 	orr.w	r2, r3, #4
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	e000      	b.n	800bb46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	370c      	adds	r7, #12
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800bb52:	b480      	push	{r7}
 800bb54:	b083      	sub	sp, #12
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800bb62:	d103      	bne.n	800bb6c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2201      	movs	r2, #1
 800bb68:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800bb6a:	e007      	b.n	800bb7c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb70:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800bb74:	d102      	bne.n	800bb7c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2208      	movs	r2, #8
 800bb7a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800bb7c:	bf00      	nop
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d101      	bne.n	800bb9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	e264      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 0301 	and.w	r3, r3, #1
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d075      	beq.n	800bc92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bba6:	4ba3      	ldr	r3, [pc, #652]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	f003 030c 	and.w	r3, r3, #12
 800bbae:	2b04      	cmp	r3, #4
 800bbb0:	d00c      	beq.n	800bbcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bbb2:	4ba0      	ldr	r3, [pc, #640]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bbba:	2b08      	cmp	r3, #8
 800bbbc:	d112      	bne.n	800bbe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bbbe:	4b9d      	ldr	r3, [pc, #628]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbca:	d10b      	bne.n	800bbe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbcc:	4b99      	ldr	r3, [pc, #612]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d05b      	beq.n	800bc90 <HAL_RCC_OscConfig+0x108>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d157      	bne.n	800bc90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e23f      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbec:	d106      	bne.n	800bbfc <HAL_RCC_OscConfig+0x74>
 800bbee:	4b91      	ldr	r3, [pc, #580]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a90      	ldr	r2, [pc, #576]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bbf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbf8:	6013      	str	r3, [r2, #0]
 800bbfa:	e01d      	b.n	800bc38 <HAL_RCC_OscConfig+0xb0>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc04:	d10c      	bne.n	800bc20 <HAL_RCC_OscConfig+0x98>
 800bc06:	4b8b      	ldr	r3, [pc, #556]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a8a      	ldr	r2, [pc, #552]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bc0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc10:	6013      	str	r3, [r2, #0]
 800bc12:	4b88      	ldr	r3, [pc, #544]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a87      	ldr	r2, [pc, #540]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bc18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc1c:	6013      	str	r3, [r2, #0]
 800bc1e:	e00b      	b.n	800bc38 <HAL_RCC_OscConfig+0xb0>
 800bc20:	4b84      	ldr	r3, [pc, #528]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a83      	ldr	r2, [pc, #524]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bc26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc2a:	6013      	str	r3, [r2, #0]
 800bc2c:	4b81      	ldr	r3, [pc, #516]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a80      	ldr	r2, [pc, #512]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bc32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d013      	beq.n	800bc68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc40:	f7fb fed6 	bl	80079f0 <HAL_GetTick>
 800bc44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc46:	e008      	b.n	800bc5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc48:	f7fb fed2 	bl	80079f0 <HAL_GetTick>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	2b64      	cmp	r3, #100	; 0x64
 800bc54:	d901      	bls.n	800bc5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bc56:	2303      	movs	r3, #3
 800bc58:	e204      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc5a:	4b76      	ldr	r3, [pc, #472]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d0f0      	beq.n	800bc48 <HAL_RCC_OscConfig+0xc0>
 800bc66:	e014      	b.n	800bc92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc68:	f7fb fec2 	bl	80079f0 <HAL_GetTick>
 800bc6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc6e:	e008      	b.n	800bc82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc70:	f7fb febe 	bl	80079f0 <HAL_GetTick>
 800bc74:	4602      	mov	r2, r0
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	2b64      	cmp	r3, #100	; 0x64
 800bc7c:	d901      	bls.n	800bc82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bc7e:	2303      	movs	r3, #3
 800bc80:	e1f0      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc82:	4b6c      	ldr	r3, [pc, #432]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1f0      	bne.n	800bc70 <HAL_RCC_OscConfig+0xe8>
 800bc8e:	e000      	b.n	800bc92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f003 0302 	and.w	r3, r3, #2
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d063      	beq.n	800bd66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bc9e:	4b65      	ldr	r3, [pc, #404]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	f003 030c 	and.w	r3, r3, #12
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00b      	beq.n	800bcc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bcaa:	4b62      	ldr	r3, [pc, #392]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bcb2:	2b08      	cmp	r3, #8
 800bcb4:	d11c      	bne.n	800bcf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bcb6:	4b5f      	ldr	r3, [pc, #380]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d116      	bne.n	800bcf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bcc2:	4b5c      	ldr	r3, [pc, #368]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f003 0302 	and.w	r3, r3, #2
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d005      	beq.n	800bcda <HAL_RCC_OscConfig+0x152>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d001      	beq.n	800bcda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e1c4      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bcda:	4b56      	ldr	r3, [pc, #344]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	00db      	lsls	r3, r3, #3
 800bce8:	4952      	ldr	r1, [pc, #328]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bcea:	4313      	orrs	r3, r2
 800bcec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bcee:	e03a      	b.n	800bd66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d020      	beq.n	800bd3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bcf8:	4b4f      	ldr	r3, [pc, #316]	; (800be38 <HAL_RCC_OscConfig+0x2b0>)
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcfe:	f7fb fe77 	bl	80079f0 <HAL_GetTick>
 800bd02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd04:	e008      	b.n	800bd18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd06:	f7fb fe73 	bl	80079f0 <HAL_GetTick>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d901      	bls.n	800bd18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bd14:	2303      	movs	r3, #3
 800bd16:	e1a5      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd18:	4b46      	ldr	r3, [pc, #280]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0302 	and.w	r3, r3, #2
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d0f0      	beq.n	800bd06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd24:	4b43      	ldr	r3, [pc, #268]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	00db      	lsls	r3, r3, #3
 800bd32:	4940      	ldr	r1, [pc, #256]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bd34:	4313      	orrs	r3, r2
 800bd36:	600b      	str	r3, [r1, #0]
 800bd38:	e015      	b.n	800bd66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bd3a:	4b3f      	ldr	r3, [pc, #252]	; (800be38 <HAL_RCC_OscConfig+0x2b0>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd40:	f7fb fe56 	bl	80079f0 <HAL_GetTick>
 800bd44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd46:	e008      	b.n	800bd5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd48:	f7fb fe52 	bl	80079f0 <HAL_GetTick>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	2b02      	cmp	r3, #2
 800bd54:	d901      	bls.n	800bd5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bd56:	2303      	movs	r3, #3
 800bd58:	e184      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd5a:	4b36      	ldr	r3, [pc, #216]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f003 0302 	and.w	r3, r3, #2
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d1f0      	bne.n	800bd48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f003 0308 	and.w	r3, r3, #8
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d030      	beq.n	800bdd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	695b      	ldr	r3, [r3, #20]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d016      	beq.n	800bda8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bd7a:	4b30      	ldr	r3, [pc, #192]	; (800be3c <HAL_RCC_OscConfig+0x2b4>)
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd80:	f7fb fe36 	bl	80079f0 <HAL_GetTick>
 800bd84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd86:	e008      	b.n	800bd9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd88:	f7fb fe32 	bl	80079f0 <HAL_GetTick>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	2b02      	cmp	r3, #2
 800bd94:	d901      	bls.n	800bd9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bd96:	2303      	movs	r3, #3
 800bd98:	e164      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd9a:	4b26      	ldr	r3, [pc, #152]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bd9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd9e:	f003 0302 	and.w	r3, r3, #2
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d0f0      	beq.n	800bd88 <HAL_RCC_OscConfig+0x200>
 800bda6:	e015      	b.n	800bdd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bda8:	4b24      	ldr	r3, [pc, #144]	; (800be3c <HAL_RCC_OscConfig+0x2b4>)
 800bdaa:	2200      	movs	r2, #0
 800bdac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bdae:	f7fb fe1f 	bl	80079f0 <HAL_GetTick>
 800bdb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bdb4:	e008      	b.n	800bdc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bdb6:	f7fb fe1b 	bl	80079f0 <HAL_GetTick>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	d901      	bls.n	800bdc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bdc4:	2303      	movs	r3, #3
 800bdc6:	e14d      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bdc8:	4b1a      	ldr	r3, [pc, #104]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bdca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdcc:	f003 0302 	and.w	r3, r3, #2
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1f0      	bne.n	800bdb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 0304 	and.w	r3, r3, #4
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f000 80a0 	beq.w	800bf22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bde2:	2300      	movs	r3, #0
 800bde4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bde6:	4b13      	ldr	r3, [pc, #76]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10f      	bne.n	800be12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	60bb      	str	r3, [r7, #8]
 800bdf6:	4b0f      	ldr	r3, [pc, #60]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdfa:	4a0e      	ldr	r2, [pc, #56]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800bdfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be00:	6413      	str	r3, [r2, #64]	; 0x40
 800be02:	4b0c      	ldr	r3, [pc, #48]	; (800be34 <HAL_RCC_OscConfig+0x2ac>)
 800be04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be0a:	60bb      	str	r3, [r7, #8]
 800be0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800be0e:	2301      	movs	r3, #1
 800be10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be12:	4b0b      	ldr	r3, [pc, #44]	; (800be40 <HAL_RCC_OscConfig+0x2b8>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d121      	bne.n	800be62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800be1e:	4b08      	ldr	r3, [pc, #32]	; (800be40 <HAL_RCC_OscConfig+0x2b8>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a07      	ldr	r2, [pc, #28]	; (800be40 <HAL_RCC_OscConfig+0x2b8>)
 800be24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800be2a:	f7fb fde1 	bl	80079f0 <HAL_GetTick>
 800be2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be30:	e011      	b.n	800be56 <HAL_RCC_OscConfig+0x2ce>
 800be32:	bf00      	nop
 800be34:	40023800 	.word	0x40023800
 800be38:	42470000 	.word	0x42470000
 800be3c:	42470e80 	.word	0x42470e80
 800be40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be44:	f7fb fdd4 	bl	80079f0 <HAL_GetTick>
 800be48:	4602      	mov	r2, r0
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	1ad3      	subs	r3, r2, r3
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d901      	bls.n	800be56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800be52:	2303      	movs	r3, #3
 800be54:	e106      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be56:	4b85      	ldr	r3, [pc, #532]	; (800c06c <HAL_RCC_OscConfig+0x4e4>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d0f0      	beq.n	800be44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d106      	bne.n	800be78 <HAL_RCC_OscConfig+0x2f0>
 800be6a:	4b81      	ldr	r3, [pc, #516]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800be6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be6e:	4a80      	ldr	r2, [pc, #512]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800be70:	f043 0301 	orr.w	r3, r3, #1
 800be74:	6713      	str	r3, [r2, #112]	; 0x70
 800be76:	e01c      	b.n	800beb2 <HAL_RCC_OscConfig+0x32a>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	2b05      	cmp	r3, #5
 800be7e:	d10c      	bne.n	800be9a <HAL_RCC_OscConfig+0x312>
 800be80:	4b7b      	ldr	r3, [pc, #492]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800be82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be84:	4a7a      	ldr	r2, [pc, #488]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800be86:	f043 0304 	orr.w	r3, r3, #4
 800be8a:	6713      	str	r3, [r2, #112]	; 0x70
 800be8c:	4b78      	ldr	r3, [pc, #480]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800be8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be90:	4a77      	ldr	r2, [pc, #476]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800be92:	f043 0301 	orr.w	r3, r3, #1
 800be96:	6713      	str	r3, [r2, #112]	; 0x70
 800be98:	e00b      	b.n	800beb2 <HAL_RCC_OscConfig+0x32a>
 800be9a:	4b75      	ldr	r3, [pc, #468]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800be9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be9e:	4a74      	ldr	r2, [pc, #464]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800bea0:	f023 0301 	bic.w	r3, r3, #1
 800bea4:	6713      	str	r3, [r2, #112]	; 0x70
 800bea6:	4b72      	ldr	r3, [pc, #456]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800bea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beaa:	4a71      	ldr	r2, [pc, #452]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800beac:	f023 0304 	bic.w	r3, r3, #4
 800beb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d015      	beq.n	800bee6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800beba:	f7fb fd99 	bl	80079f0 <HAL_GetTick>
 800bebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bec0:	e00a      	b.n	800bed8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bec2:	f7fb fd95 	bl	80079f0 <HAL_GetTick>
 800bec6:	4602      	mov	r2, r0
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d901      	bls.n	800bed8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800bed4:	2303      	movs	r3, #3
 800bed6:	e0c5      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bed8:	4b65      	ldr	r3, [pc, #404]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800beda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bedc:	f003 0302 	and.w	r3, r3, #2
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d0ee      	beq.n	800bec2 <HAL_RCC_OscConfig+0x33a>
 800bee4:	e014      	b.n	800bf10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bee6:	f7fb fd83 	bl	80079f0 <HAL_GetTick>
 800beea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800beec:	e00a      	b.n	800bf04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800beee:	f7fb fd7f 	bl	80079f0 <HAL_GetTick>
 800bef2:	4602      	mov	r2, r0
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	1ad3      	subs	r3, r2, r3
 800bef8:	f241 3288 	movw	r2, #5000	; 0x1388
 800befc:	4293      	cmp	r3, r2
 800befe:	d901      	bls.n	800bf04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800bf00:	2303      	movs	r3, #3
 800bf02:	e0af      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bf04:	4b5a      	ldr	r3, [pc, #360]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800bf06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf08:	f003 0302 	and.w	r3, r3, #2
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1ee      	bne.n	800beee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bf10:	7dfb      	ldrb	r3, [r7, #23]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d105      	bne.n	800bf22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf16:	4b56      	ldr	r3, [pc, #344]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1a:	4a55      	ldr	r2, [pc, #340]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800bf1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	699b      	ldr	r3, [r3, #24]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f000 809b 	beq.w	800c062 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bf2c:	4b50      	ldr	r3, [pc, #320]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	f003 030c 	and.w	r3, r3, #12
 800bf34:	2b08      	cmp	r3, #8
 800bf36:	d05c      	beq.n	800bff2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	d141      	bne.n	800bfc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf40:	4b4c      	ldr	r3, [pc, #304]	; (800c074 <HAL_RCC_OscConfig+0x4ec>)
 800bf42:	2200      	movs	r2, #0
 800bf44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf46:	f7fb fd53 	bl	80079f0 <HAL_GetTick>
 800bf4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf4c:	e008      	b.n	800bf60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf4e:	f7fb fd4f 	bl	80079f0 <HAL_GetTick>
 800bf52:	4602      	mov	r2, r0
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	d901      	bls.n	800bf60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	e081      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf60:	4b43      	ldr	r3, [pc, #268]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1f0      	bne.n	800bf4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	69da      	ldr	r2, [r3, #28]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a1b      	ldr	r3, [r3, #32]
 800bf74:	431a      	orrs	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7a:	019b      	lsls	r3, r3, #6
 800bf7c:	431a      	orrs	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf82:	085b      	lsrs	r3, r3, #1
 800bf84:	3b01      	subs	r3, #1
 800bf86:	041b      	lsls	r3, r3, #16
 800bf88:	431a      	orrs	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8e:	061b      	lsls	r3, r3, #24
 800bf90:	4937      	ldr	r1, [pc, #220]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800bf92:	4313      	orrs	r3, r2
 800bf94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf96:	4b37      	ldr	r3, [pc, #220]	; (800c074 <HAL_RCC_OscConfig+0x4ec>)
 800bf98:	2201      	movs	r2, #1
 800bf9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf9c:	f7fb fd28 	bl	80079f0 <HAL_GetTick>
 800bfa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bfa2:	e008      	b.n	800bfb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfa4:	f7fb fd24 	bl	80079f0 <HAL_GetTick>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d901      	bls.n	800bfb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800bfb2:	2303      	movs	r3, #3
 800bfb4:	e056      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bfb6:	4b2e      	ldr	r3, [pc, #184]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d0f0      	beq.n	800bfa4 <HAL_RCC_OscConfig+0x41c>
 800bfc2:	e04e      	b.n	800c062 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bfc4:	4b2b      	ldr	r3, [pc, #172]	; (800c074 <HAL_RCC_OscConfig+0x4ec>)
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfca:	f7fb fd11 	bl	80079f0 <HAL_GetTick>
 800bfce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfd0:	e008      	b.n	800bfe4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfd2:	f7fb fd0d 	bl	80079f0 <HAL_GetTick>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	1ad3      	subs	r3, r2, r3
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d901      	bls.n	800bfe4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	e03f      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfe4:	4b22      	ldr	r3, [pc, #136]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1f0      	bne.n	800bfd2 <HAL_RCC_OscConfig+0x44a>
 800bff0:	e037      	b.n	800c062 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	699b      	ldr	r3, [r3, #24]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d101      	bne.n	800bffe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e032      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bffe:	4b1c      	ldr	r3, [pc, #112]	; (800c070 <HAL_RCC_OscConfig+0x4e8>)
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d028      	beq.n	800c05e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c016:	429a      	cmp	r2, r3
 800c018:	d121      	bne.n	800c05e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c024:	429a      	cmp	r2, r3
 800c026:	d11a      	bne.n	800c05e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c02e:	4013      	ands	r3, r2
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c034:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c036:	4293      	cmp	r3, r2
 800c038:	d111      	bne.n	800c05e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c044:	085b      	lsrs	r3, r3, #1
 800c046:	3b01      	subs	r3, #1
 800c048:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d107      	bne.n	800c05e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c058:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d001      	beq.n	800c062 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	e000      	b.n	800c064 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3718      	adds	r7, #24
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	40007000 	.word	0x40007000
 800c070:	40023800 	.word	0x40023800
 800c074:	42470060 	.word	0x42470060

0800c078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d101      	bne.n	800c08c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	e0cc      	b.n	800c226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c08c:	4b68      	ldr	r3, [pc, #416]	; (800c230 <HAL_RCC_ClockConfig+0x1b8>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f003 0307 	and.w	r3, r3, #7
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	429a      	cmp	r2, r3
 800c098:	d90c      	bls.n	800c0b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c09a:	4b65      	ldr	r3, [pc, #404]	; (800c230 <HAL_RCC_ClockConfig+0x1b8>)
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	b2d2      	uxtb	r2, r2
 800c0a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0a2:	4b63      	ldr	r3, [pc, #396]	; (800c230 <HAL_RCC_ClockConfig+0x1b8>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 0307 	and.w	r3, r3, #7
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d001      	beq.n	800c0b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	e0b8      	b.n	800c226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f003 0302 	and.w	r3, r3, #2
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d020      	beq.n	800c102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f003 0304 	and.w	r3, r3, #4
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d005      	beq.n	800c0d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c0cc:	4b59      	ldr	r3, [pc, #356]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	4a58      	ldr	r2, [pc, #352]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c0d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c0d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 0308 	and.w	r3, r3, #8
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d005      	beq.n	800c0f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c0e4:	4b53      	ldr	r3, [pc, #332]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	4a52      	ldr	r2, [pc, #328]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c0ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c0ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c0f0:	4b50      	ldr	r3, [pc, #320]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	494d      	ldr	r1, [pc, #308]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c0fe:	4313      	orrs	r3, r2
 800c100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d044      	beq.n	800c198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	2b01      	cmp	r3, #1
 800c114:	d107      	bne.n	800c126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c116:	4b47      	ldr	r3, [pc, #284]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d119      	bne.n	800c156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c122:	2301      	movs	r3, #1
 800c124:	e07f      	b.n	800c226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	d003      	beq.n	800c136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c132:	2b03      	cmp	r3, #3
 800c134:	d107      	bne.n	800c146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c136:	4b3f      	ldr	r3, [pc, #252]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d109      	bne.n	800c156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e06f      	b.n	800c226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c146:	4b3b      	ldr	r3, [pc, #236]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 0302 	and.w	r3, r3, #2
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d101      	bne.n	800c156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	e067      	b.n	800c226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c156:	4b37      	ldr	r3, [pc, #220]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	f023 0203 	bic.w	r2, r3, #3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	4934      	ldr	r1, [pc, #208]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c164:	4313      	orrs	r3, r2
 800c166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c168:	f7fb fc42 	bl	80079f0 <HAL_GetTick>
 800c16c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c16e:	e00a      	b.n	800c186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c170:	f7fb fc3e 	bl	80079f0 <HAL_GetTick>
 800c174:	4602      	mov	r2, r0
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c17e:	4293      	cmp	r3, r2
 800c180:	d901      	bls.n	800c186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c182:	2303      	movs	r3, #3
 800c184:	e04f      	b.n	800c226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c186:	4b2b      	ldr	r3, [pc, #172]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	f003 020c 	and.w	r2, r3, #12
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	429a      	cmp	r2, r3
 800c196:	d1eb      	bne.n	800c170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c198:	4b25      	ldr	r3, [pc, #148]	; (800c230 <HAL_RCC_ClockConfig+0x1b8>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f003 0307 	and.w	r3, r3, #7
 800c1a0:	683a      	ldr	r2, [r7, #0]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d20c      	bcs.n	800c1c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1a6:	4b22      	ldr	r3, [pc, #136]	; (800c230 <HAL_RCC_ClockConfig+0x1b8>)
 800c1a8:	683a      	ldr	r2, [r7, #0]
 800c1aa:	b2d2      	uxtb	r2, r2
 800c1ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c1ae:	4b20      	ldr	r3, [pc, #128]	; (800c230 <HAL_RCC_ClockConfig+0x1b8>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f003 0307 	and.w	r3, r3, #7
 800c1b6:	683a      	ldr	r2, [r7, #0]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d001      	beq.n	800c1c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e032      	b.n	800c226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f003 0304 	and.w	r3, r3, #4
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d008      	beq.n	800c1de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c1cc:	4b19      	ldr	r3, [pc, #100]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	4916      	ldr	r1, [pc, #88]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f003 0308 	and.w	r3, r3, #8
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d009      	beq.n	800c1fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c1ea:	4b12      	ldr	r3, [pc, #72]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	00db      	lsls	r3, r3, #3
 800c1f8:	490e      	ldr	r1, [pc, #56]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c1fe:	f000 f821 	bl	800c244 <HAL_RCC_GetSysClockFreq>
 800c202:	4602      	mov	r2, r0
 800c204:	4b0b      	ldr	r3, [pc, #44]	; (800c234 <HAL_RCC_ClockConfig+0x1bc>)
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	091b      	lsrs	r3, r3, #4
 800c20a:	f003 030f 	and.w	r3, r3, #15
 800c20e:	490a      	ldr	r1, [pc, #40]	; (800c238 <HAL_RCC_ClockConfig+0x1c0>)
 800c210:	5ccb      	ldrb	r3, [r1, r3]
 800c212:	fa22 f303 	lsr.w	r3, r2, r3
 800c216:	4a09      	ldr	r2, [pc, #36]	; (800c23c <HAL_RCC_ClockConfig+0x1c4>)
 800c218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c21a:	4b09      	ldr	r3, [pc, #36]	; (800c240 <HAL_RCC_ClockConfig+0x1c8>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fb fba2 	bl	8007968 <HAL_InitTick>

  return HAL_OK;
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	3710      	adds	r7, #16
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	40023c00 	.word	0x40023c00
 800c234:	40023800 	.word	0x40023800
 800c238:	08026698 	.word	0x08026698
 800c23c:	20000034 	.word	0x20000034
 800c240:	20000038 	.word	0x20000038

0800c244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c244:	b5b0      	push	{r4, r5, r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c24a:	2100      	movs	r1, #0
 800c24c:	6079      	str	r1, [r7, #4]
 800c24e:	2100      	movs	r1, #0
 800c250:	60f9      	str	r1, [r7, #12]
 800c252:	2100      	movs	r1, #0
 800c254:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c256:	2100      	movs	r1, #0
 800c258:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c25a:	4952      	ldr	r1, [pc, #328]	; (800c3a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800c25c:	6889      	ldr	r1, [r1, #8]
 800c25e:	f001 010c 	and.w	r1, r1, #12
 800c262:	2908      	cmp	r1, #8
 800c264:	d00d      	beq.n	800c282 <HAL_RCC_GetSysClockFreq+0x3e>
 800c266:	2908      	cmp	r1, #8
 800c268:	f200 8094 	bhi.w	800c394 <HAL_RCC_GetSysClockFreq+0x150>
 800c26c:	2900      	cmp	r1, #0
 800c26e:	d002      	beq.n	800c276 <HAL_RCC_GetSysClockFreq+0x32>
 800c270:	2904      	cmp	r1, #4
 800c272:	d003      	beq.n	800c27c <HAL_RCC_GetSysClockFreq+0x38>
 800c274:	e08e      	b.n	800c394 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c276:	4b4c      	ldr	r3, [pc, #304]	; (800c3a8 <HAL_RCC_GetSysClockFreq+0x164>)
 800c278:	60bb      	str	r3, [r7, #8]
       break;
 800c27a:	e08e      	b.n	800c39a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c27c:	4b4b      	ldr	r3, [pc, #300]	; (800c3ac <HAL_RCC_GetSysClockFreq+0x168>)
 800c27e:	60bb      	str	r3, [r7, #8]
      break;
 800c280:	e08b      	b.n	800c39a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c282:	4948      	ldr	r1, [pc, #288]	; (800c3a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800c284:	6849      	ldr	r1, [r1, #4]
 800c286:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800c28a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c28c:	4945      	ldr	r1, [pc, #276]	; (800c3a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800c28e:	6849      	ldr	r1, [r1, #4]
 800c290:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800c294:	2900      	cmp	r1, #0
 800c296:	d024      	beq.n	800c2e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c298:	4942      	ldr	r1, [pc, #264]	; (800c3a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800c29a:	6849      	ldr	r1, [r1, #4]
 800c29c:	0989      	lsrs	r1, r1, #6
 800c29e:	4608      	mov	r0, r1
 800c2a0:	f04f 0100 	mov.w	r1, #0
 800c2a4:	f240 14ff 	movw	r4, #511	; 0x1ff
 800c2a8:	f04f 0500 	mov.w	r5, #0
 800c2ac:	ea00 0204 	and.w	r2, r0, r4
 800c2b0:	ea01 0305 	and.w	r3, r1, r5
 800c2b4:	493d      	ldr	r1, [pc, #244]	; (800c3ac <HAL_RCC_GetSysClockFreq+0x168>)
 800c2b6:	fb01 f003 	mul.w	r0, r1, r3
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	fb01 f102 	mul.w	r1, r1, r2
 800c2c0:	1844      	adds	r4, r0, r1
 800c2c2:	493a      	ldr	r1, [pc, #232]	; (800c3ac <HAL_RCC_GetSysClockFreq+0x168>)
 800c2c4:	fba2 0101 	umull	r0, r1, r2, r1
 800c2c8:	1863      	adds	r3, r4, r1
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	f04f 0300 	mov.w	r3, #0
 800c2d4:	f7f4 fcf0 	bl	8000cb8 <__aeabi_uldivmod>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	460b      	mov	r3, r1
 800c2dc:	4613      	mov	r3, r2
 800c2de:	60fb      	str	r3, [r7, #12]
 800c2e0:	e04a      	b.n	800c378 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c2e2:	4b30      	ldr	r3, [pc, #192]	; (800c3a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	099b      	lsrs	r3, r3, #6
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	f04f 0300 	mov.w	r3, #0
 800c2ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c2f2:	f04f 0100 	mov.w	r1, #0
 800c2f6:	ea02 0400 	and.w	r4, r2, r0
 800c2fa:	ea03 0501 	and.w	r5, r3, r1
 800c2fe:	4620      	mov	r0, r4
 800c300:	4629      	mov	r1, r5
 800c302:	f04f 0200 	mov.w	r2, #0
 800c306:	f04f 0300 	mov.w	r3, #0
 800c30a:	014b      	lsls	r3, r1, #5
 800c30c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c310:	0142      	lsls	r2, r0, #5
 800c312:	4610      	mov	r0, r2
 800c314:	4619      	mov	r1, r3
 800c316:	1b00      	subs	r0, r0, r4
 800c318:	eb61 0105 	sbc.w	r1, r1, r5
 800c31c:	f04f 0200 	mov.w	r2, #0
 800c320:	f04f 0300 	mov.w	r3, #0
 800c324:	018b      	lsls	r3, r1, #6
 800c326:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c32a:	0182      	lsls	r2, r0, #6
 800c32c:	1a12      	subs	r2, r2, r0
 800c32e:	eb63 0301 	sbc.w	r3, r3, r1
 800c332:	f04f 0000 	mov.w	r0, #0
 800c336:	f04f 0100 	mov.w	r1, #0
 800c33a:	00d9      	lsls	r1, r3, #3
 800c33c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c340:	00d0      	lsls	r0, r2, #3
 800c342:	4602      	mov	r2, r0
 800c344:	460b      	mov	r3, r1
 800c346:	1912      	adds	r2, r2, r4
 800c348:	eb45 0303 	adc.w	r3, r5, r3
 800c34c:	f04f 0000 	mov.w	r0, #0
 800c350:	f04f 0100 	mov.w	r1, #0
 800c354:	0299      	lsls	r1, r3, #10
 800c356:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c35a:	0290      	lsls	r0, r2, #10
 800c35c:	4602      	mov	r2, r0
 800c35e:	460b      	mov	r3, r1
 800c360:	4610      	mov	r0, r2
 800c362:	4619      	mov	r1, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	461a      	mov	r2, r3
 800c368:	f04f 0300 	mov.w	r3, #0
 800c36c:	f7f4 fca4 	bl	8000cb8 <__aeabi_uldivmod>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	4613      	mov	r3, r2
 800c376:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c378:	4b0a      	ldr	r3, [pc, #40]	; (800c3a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	0c1b      	lsrs	r3, r3, #16
 800c37e:	f003 0303 	and.w	r3, r3, #3
 800c382:	3301      	adds	r3, #1
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c390:	60bb      	str	r3, [r7, #8]
      break;
 800c392:	e002      	b.n	800c39a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c394:	4b04      	ldr	r3, [pc, #16]	; (800c3a8 <HAL_RCC_GetSysClockFreq+0x164>)
 800c396:	60bb      	str	r3, [r7, #8]
      break;
 800c398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c39a:	68bb      	ldr	r3, [r7, #8]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3710      	adds	r7, #16
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bdb0      	pop	{r4, r5, r7, pc}
 800c3a4:	40023800 	.word	0x40023800
 800c3a8:	00f42400 	.word	0x00f42400
 800c3ac:	017d7840 	.word	0x017d7840

0800c3b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c3b4:	4b03      	ldr	r3, [pc, #12]	; (800c3c4 <HAL_RCC_GetHCLKFreq+0x14>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	20000034 	.word	0x20000034

0800c3c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c3cc:	f7ff fff0 	bl	800c3b0 <HAL_RCC_GetHCLKFreq>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	4b05      	ldr	r3, [pc, #20]	; (800c3e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	0a9b      	lsrs	r3, r3, #10
 800c3d8:	f003 0307 	and.w	r3, r3, #7
 800c3dc:	4903      	ldr	r1, [pc, #12]	; (800c3ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800c3de:	5ccb      	ldrb	r3, [r1, r3]
 800c3e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	40023800 	.word	0x40023800
 800c3ec:	080266a8 	.word	0x080266a8

0800c3f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c3f4:	f7ff ffdc 	bl	800c3b0 <HAL_RCC_GetHCLKFreq>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	4b05      	ldr	r3, [pc, #20]	; (800c410 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	0b5b      	lsrs	r3, r3, #13
 800c400:	f003 0307 	and.w	r3, r3, #7
 800c404:	4903      	ldr	r1, [pc, #12]	; (800c414 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c406:	5ccb      	ldrb	r3, [r1, r3]
 800c408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	40023800 	.word	0x40023800
 800c414:	080266a8 	.word	0x080266a8

0800c418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	e07b      	b.n	800c522 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d108      	bne.n	800c444 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c43a:	d009      	beq.n	800c450 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	61da      	str	r2, [r3, #28]
 800c442:	e005      	b.n	800c450 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2200      	movs	r2, #0
 800c44e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d106      	bne.n	800c470 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f7fa fd08 	bl	8006e80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2202      	movs	r2, #2
 800c474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c486:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c498:	431a      	orrs	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	68db      	ldr	r3, [r3, #12]
 800c49e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4a2:	431a      	orrs	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	691b      	ldr	r3, [r3, #16]
 800c4a8:	f003 0302 	and.w	r3, r3, #2
 800c4ac:	431a      	orrs	r2, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	695b      	ldr	r3, [r3, #20]
 800c4b2:	f003 0301 	and.w	r3, r3, #1
 800c4b6:	431a      	orrs	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c4c0:	431a      	orrs	r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	69db      	ldr	r3, [r3, #28]
 800c4c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4ca:	431a      	orrs	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6a1b      	ldr	r3, [r3, #32]
 800c4d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4d4:	ea42 0103 	orr.w	r1, r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	430a      	orrs	r2, r1
 800c4e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	0c1b      	lsrs	r3, r3, #16
 800c4ee:	f003 0104 	and.w	r1, r3, #4
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f6:	f003 0210 	and.w	r2, r3, #16
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	430a      	orrs	r2, r1
 800c500:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	69da      	ldr	r2, [r3, #28]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c510:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b08c      	sub	sp, #48	; 0x30
 800c52e:	af00      	add	r7, sp, #0
 800c530:	60f8      	str	r0, [r7, #12]
 800c532:	60b9      	str	r1, [r7, #8]
 800c534:	607a      	str	r2, [r7, #4]
 800c536:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c538:	2301      	movs	r3, #1
 800c53a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c53c:	2300      	movs	r3, #0
 800c53e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d101      	bne.n	800c550 <HAL_SPI_TransmitReceive+0x26>
 800c54c:	2302      	movs	r3, #2
 800c54e:	e18a      	b.n	800c866 <HAL_SPI_TransmitReceive+0x33c>
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2201      	movs	r2, #1
 800c554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c558:	f7fb fa4a 	bl	80079f0 <HAL_GetTick>
 800c55c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c56e:	887b      	ldrh	r3, [r7, #2]
 800c570:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c572:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c576:	2b01      	cmp	r3, #1
 800c578:	d00f      	beq.n	800c59a <HAL_SPI_TransmitReceive+0x70>
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c580:	d107      	bne.n	800c592 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d103      	bne.n	800c592 <HAL_SPI_TransmitReceive+0x68>
 800c58a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c58e:	2b04      	cmp	r3, #4
 800c590:	d003      	beq.n	800c59a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c592:	2302      	movs	r3, #2
 800c594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c598:	e15b      	b.n	800c852 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d005      	beq.n	800c5ac <HAL_SPI_TransmitReceive+0x82>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d002      	beq.n	800c5ac <HAL_SPI_TransmitReceive+0x82>
 800c5a6:	887b      	ldrh	r3, [r7, #2]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d103      	bne.n	800c5b4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c5b2:	e14e      	b.n	800c852 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	d003      	beq.n	800c5c8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2205      	movs	r2, #5
 800c5c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	887a      	ldrh	r2, [r7, #2]
 800c5d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	887a      	ldrh	r2, [r7, #2]
 800c5de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	68ba      	ldr	r2, [r7, #8]
 800c5e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	887a      	ldrh	r2, [r7, #2]
 800c5ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	887a      	ldrh	r2, [r7, #2]
 800c5f0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c608:	2b40      	cmp	r3, #64	; 0x40
 800c60a:	d007      	beq.n	800c61c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c61a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c624:	d178      	bne.n	800c718 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d002      	beq.n	800c634 <HAL_SPI_TransmitReceive+0x10a>
 800c62e:	8b7b      	ldrh	r3, [r7, #26]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d166      	bne.n	800c702 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c638:	881a      	ldrh	r2, [r3, #0]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c644:	1c9a      	adds	r2, r3, #2
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c64e:	b29b      	uxth	r3, r3
 800c650:	3b01      	subs	r3, #1
 800c652:	b29a      	uxth	r2, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c658:	e053      	b.n	800c702 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	f003 0302 	and.w	r3, r3, #2
 800c664:	2b02      	cmp	r3, #2
 800c666:	d11b      	bne.n	800c6a0 <HAL_SPI_TransmitReceive+0x176>
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d016      	beq.n	800c6a0 <HAL_SPI_TransmitReceive+0x176>
 800c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c674:	2b01      	cmp	r3, #1
 800c676:	d113      	bne.n	800c6a0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c67c:	881a      	ldrh	r2, [r3, #0]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c688:	1c9a      	adds	r2, r3, #2
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c692:	b29b      	uxth	r3, r3
 800c694:	3b01      	subs	r3, #1
 800c696:	b29a      	uxth	r2, r3
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c69c:	2300      	movs	r3, #0
 800c69e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	f003 0301 	and.w	r3, r3, #1
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d119      	bne.n	800c6e2 <HAL_SPI_TransmitReceive+0x1b8>
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d014      	beq.n	800c6e2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	68da      	ldr	r2, [r3, #12]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c2:	b292      	uxth	r2, r2
 800c6c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ca:	1c9a      	adds	r2, r3, #2
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c6e2:	f7fb f985 	bl	80079f0 <HAL_GetTick>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d807      	bhi.n	800c702 <HAL_SPI_TransmitReceive+0x1d8>
 800c6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f8:	d003      	beq.n	800c702 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c6fa:	2303      	movs	r3, #3
 800c6fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c700:	e0a7      	b.n	800c852 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c706:	b29b      	uxth	r3, r3
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d1a6      	bne.n	800c65a <HAL_SPI_TransmitReceive+0x130>
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c710:	b29b      	uxth	r3, r3
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1a1      	bne.n	800c65a <HAL_SPI_TransmitReceive+0x130>
 800c716:	e07c      	b.n	800c812 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d002      	beq.n	800c726 <HAL_SPI_TransmitReceive+0x1fc>
 800c720:	8b7b      	ldrh	r3, [r7, #26]
 800c722:	2b01      	cmp	r3, #1
 800c724:	d16b      	bne.n	800c7fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	330c      	adds	r3, #12
 800c730:	7812      	ldrb	r2, [r2, #0]
 800c732:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c738:	1c5a      	adds	r2, r3, #1
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c742:	b29b      	uxth	r3, r3
 800c744:	3b01      	subs	r3, #1
 800c746:	b29a      	uxth	r2, r3
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c74c:	e057      	b.n	800c7fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	f003 0302 	and.w	r3, r3, #2
 800c758:	2b02      	cmp	r3, #2
 800c75a:	d11c      	bne.n	800c796 <HAL_SPI_TransmitReceive+0x26c>
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c760:	b29b      	uxth	r3, r3
 800c762:	2b00      	cmp	r3, #0
 800c764:	d017      	beq.n	800c796 <HAL_SPI_TransmitReceive+0x26c>
 800c766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d114      	bne.n	800c796 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	330c      	adds	r3, #12
 800c776:	7812      	ldrb	r2, [r2, #0]
 800c778:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c788:	b29b      	uxth	r3, r3
 800c78a:	3b01      	subs	r3, #1
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c792:	2300      	movs	r3, #0
 800c794:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	f003 0301 	and.w	r3, r3, #1
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d119      	bne.n	800c7d8 <HAL_SPI_TransmitReceive+0x2ae>
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d014      	beq.n	800c7d8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	68da      	ldr	r2, [r3, #12]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b8:	b2d2      	uxtb	r2, r2
 800c7ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c0:	1c5a      	adds	r2, r3, #1
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	3b01      	subs	r3, #1
 800c7ce:	b29a      	uxth	r2, r3
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c7d8:	f7fb f90a 	bl	80079f0 <HAL_GetTick>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d803      	bhi.n	800c7f0 <HAL_SPI_TransmitReceive+0x2c6>
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ee:	d102      	bne.n	800c7f6 <HAL_SPI_TransmitReceive+0x2cc>
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d103      	bne.n	800c7fe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c7f6:	2303      	movs	r3, #3
 800c7f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c7fc:	e029      	b.n	800c852 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c802:	b29b      	uxth	r3, r3
 800c804:	2b00      	cmp	r3, #0
 800c806:	d1a2      	bne.n	800c74e <HAL_SPI_TransmitReceive+0x224>
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d19d      	bne.n	800c74e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c814:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f000 f9d0 	bl	800cbbc <SPI_EndRxTxTransaction>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d006      	beq.n	800c830 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c822:	2301      	movs	r3, #1
 800c824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2220      	movs	r2, #32
 800c82c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c82e:	e010      	b.n	800c852 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d10b      	bne.n	800c850 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c838:	2300      	movs	r3, #0
 800c83a:	617b      	str	r3, [r7, #20]
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	617b      	str	r3, [r7, #20]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	617b      	str	r3, [r7, #20]
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	e000      	b.n	800c852 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c850:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2201      	movs	r2, #1
 800c856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c862:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c866:	4618      	mov	r0, r3
 800c868:	3730      	adds	r7, #48	; 0x30
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
	...

0800c870 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b088      	sub	sp, #32
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	099b      	lsrs	r3, r3, #6
 800c88c:	f003 0301 	and.w	r3, r3, #1
 800c890:	2b00      	cmp	r3, #0
 800c892:	d10f      	bne.n	800c8b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c894:	69bb      	ldr	r3, [r7, #24]
 800c896:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00a      	beq.n	800c8b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c89e:	69fb      	ldr	r3, [r7, #28]
 800c8a0:	099b      	lsrs	r3, r3, #6
 800c8a2:	f003 0301 	and.w	r3, r3, #1
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d004      	beq.n	800c8b4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	4798      	blx	r3
    return;
 800c8b2:	e0d7      	b.n	800ca64 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	085b      	lsrs	r3, r3, #1
 800c8b8:	f003 0301 	and.w	r3, r3, #1
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00a      	beq.n	800c8d6 <HAL_SPI_IRQHandler+0x66>
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	09db      	lsrs	r3, r3, #7
 800c8c4:	f003 0301 	and.w	r3, r3, #1
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d004      	beq.n	800c8d6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	4798      	blx	r3
    return;
 800c8d4:	e0c6      	b.n	800ca64 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	095b      	lsrs	r3, r3, #5
 800c8da:	f003 0301 	and.w	r3, r3, #1
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10c      	bne.n	800c8fc <HAL_SPI_IRQHandler+0x8c>
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	099b      	lsrs	r3, r3, #6
 800c8e6:	f003 0301 	and.w	r3, r3, #1
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d106      	bne.n	800c8fc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	0a1b      	lsrs	r3, r3, #8
 800c8f2:	f003 0301 	and.w	r3, r3, #1
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f000 80b4 	beq.w	800ca64 <HAL_SPI_IRQHandler+0x1f4>
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	095b      	lsrs	r3, r3, #5
 800c900:	f003 0301 	and.w	r3, r3, #1
 800c904:	2b00      	cmp	r3, #0
 800c906:	f000 80ad 	beq.w	800ca64 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	099b      	lsrs	r3, r3, #6
 800c90e:	f003 0301 	and.w	r3, r3, #1
 800c912:	2b00      	cmp	r3, #0
 800c914:	d023      	beq.n	800c95e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b03      	cmp	r3, #3
 800c920:	d011      	beq.n	800c946 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c926:	f043 0204 	orr.w	r2, r3, #4
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c92e:	2300      	movs	r3, #0
 800c930:	617b      	str	r3, [r7, #20]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	617b      	str	r3, [r7, #20]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	617b      	str	r3, [r7, #20]
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	e00b      	b.n	800c95e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c946:	2300      	movs	r3, #0
 800c948:	613b      	str	r3, [r7, #16]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	613b      	str	r3, [r7, #16]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	613b      	str	r3, [r7, #16]
 800c95a:	693b      	ldr	r3, [r7, #16]
        return;
 800c95c:	e082      	b.n	800ca64 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	095b      	lsrs	r3, r3, #5
 800c962:	f003 0301 	and.w	r3, r3, #1
 800c966:	2b00      	cmp	r3, #0
 800c968:	d014      	beq.n	800c994 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c96e:	f043 0201 	orr.w	r2, r3, #1
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c976:	2300      	movs	r3, #0
 800c978:	60fb      	str	r3, [r7, #12]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	60fb      	str	r3, [r7, #12]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c990:	601a      	str	r2, [r3, #0]
 800c992:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	0a1b      	lsrs	r3, r3, #8
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00c      	beq.n	800c9ba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9a4:	f043 0208 	orr.w	r2, r3, #8
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	60bb      	str	r3, [r7, #8]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	60bb      	str	r3, [r7, #8]
 800c9b8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d04f      	beq.n	800ca62 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	685a      	ldr	r2, [r3, #4]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c9d0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	f003 0302 	and.w	r3, r3, #2
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d104      	bne.n	800c9ee <HAL_SPI_IRQHandler+0x17e>
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	f003 0301 	and.w	r3, r3, #1
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d034      	beq.n	800ca58 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f022 0203 	bic.w	r2, r2, #3
 800c9fc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d011      	beq.n	800ca2a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca0a:	4a18      	ldr	r2, [pc, #96]	; (800ca6c <HAL_SPI_IRQHandler+0x1fc>)
 800ca0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7fb fb32 	bl	800807c <HAL_DMA_Abort_IT>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d005      	beq.n	800ca2a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d016      	beq.n	800ca60 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca36:	4a0d      	ldr	r2, [pc, #52]	; (800ca6c <HAL_SPI_IRQHandler+0x1fc>)
 800ca38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fb fb1c 	bl	800807c <HAL_DMA_Abort_IT>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d00a      	beq.n	800ca60 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800ca56:	e003      	b.n	800ca60 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 f809 	bl	800ca70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ca5e:	e000      	b.n	800ca62 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ca60:	bf00      	nop
    return;
 800ca62:	bf00      	nop
  }
}
 800ca64:	3720      	adds	r7, #32
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	0800ca85 	.word	0x0800ca85

0800ca70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ca78:	bf00      	nop
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f7ff ffe6 	bl	800ca70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800caa4:	bf00      	nop
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b088      	sub	sp, #32
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	603b      	str	r3, [r7, #0]
 800cab8:	4613      	mov	r3, r2
 800caba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cabc:	f7fa ff98 	bl	80079f0 <HAL_GetTick>
 800cac0:	4602      	mov	r2, r0
 800cac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac4:	1a9b      	subs	r3, r3, r2
 800cac6:	683a      	ldr	r2, [r7, #0]
 800cac8:	4413      	add	r3, r2
 800caca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cacc:	f7fa ff90 	bl	80079f0 <HAL_GetTick>
 800cad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cad2:	4b39      	ldr	r3, [pc, #228]	; (800cbb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	015b      	lsls	r3, r3, #5
 800cad8:	0d1b      	lsrs	r3, r3, #20
 800cada:	69fa      	ldr	r2, [r7, #28]
 800cadc:	fb02 f303 	mul.w	r3, r2, r3
 800cae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cae2:	e054      	b.n	800cb8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caea:	d050      	beq.n	800cb8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800caec:	f7fa ff80 	bl	80079f0 <HAL_GetTick>
 800caf0:	4602      	mov	r2, r0
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	69fa      	ldr	r2, [r7, #28]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d902      	bls.n	800cb02 <SPI_WaitFlagStateUntilTimeout+0x56>
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d13d      	bne.n	800cb7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	685a      	ldr	r2, [r3, #4]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cb10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb1a:	d111      	bne.n	800cb40 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb24:	d004      	beq.n	800cb30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb2e:	d107      	bne.n	800cb40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb48:	d10f      	bne.n	800cb6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb58:	601a      	str	r2, [r3, #0]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cb68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	e017      	b.n	800cbae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d101      	bne.n	800cb88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cb84:	2300      	movs	r3, #0
 800cb86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	689a      	ldr	r2, [r3, #8]
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	4013      	ands	r3, r2
 800cb98:	68ba      	ldr	r2, [r7, #8]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	bf0c      	ite	eq
 800cb9e:	2301      	moveq	r3, #1
 800cba0:	2300      	movne	r3, #0
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	461a      	mov	r2, r3
 800cba6:	79fb      	ldrb	r3, [r7, #7]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d19b      	bne.n	800cae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3720      	adds	r7, #32
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	20000034 	.word	0x20000034

0800cbbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b088      	sub	sp, #32
 800cbc0:	af02      	add	r7, sp, #8
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cbc8:	4b1b      	ldr	r3, [pc, #108]	; (800cc38 <SPI_EndRxTxTransaction+0x7c>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a1b      	ldr	r2, [pc, #108]	; (800cc3c <SPI_EndRxTxTransaction+0x80>)
 800cbce:	fba2 2303 	umull	r2, r3, r2, r3
 800cbd2:	0d5b      	lsrs	r3, r3, #21
 800cbd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cbd8:	fb02 f303 	mul.w	r3, r2, r3
 800cbdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cbe6:	d112      	bne.n	800cc0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	2180      	movs	r1, #128	; 0x80
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f7ff ff5a 	bl	800caac <SPI_WaitFlagStateUntilTimeout>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d016      	beq.n	800cc2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc02:	f043 0220 	orr.w	r2, r3, #32
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cc0a:	2303      	movs	r3, #3
 800cc0c:	e00f      	b.n	800cc2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00a      	beq.n	800cc2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	3b01      	subs	r3, #1
 800cc18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc24:	2b80      	cmp	r3, #128	; 0x80
 800cc26:	d0f2      	beq.n	800cc0e <SPI_EndRxTxTransaction+0x52>
 800cc28:	e000      	b.n	800cc2c <SPI_EndRxTxTransaction+0x70>
        break;
 800cc2a:	bf00      	nop
  }

  return HAL_OK;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3718      	adds	r7, #24
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	20000034 	.word	0x20000034
 800cc3c:	165e9f81 	.word	0x165e9f81

0800cc40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d101      	bne.n	800cc52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e041      	b.n	800ccd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d106      	bne.n	800cc6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f7fa fb74 	bl	8007354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2202      	movs	r2, #2
 800cc70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	3304      	adds	r3, #4
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	4610      	mov	r0, r2
 800cc80:	f000 f9f0 	bl	800d064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2201      	movs	r2, #1
 800cc98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2201      	movs	r2, #1
 800ccb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ccd4:	2300      	movs	r3, #0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
	...

0800cce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b085      	sub	sp, #20
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d001      	beq.n	800ccf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	e044      	b.n	800cd82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2202      	movs	r2, #2
 800ccfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	68da      	ldr	r2, [r3, #12]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f042 0201 	orr.w	r2, r2, #1
 800cd0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a1e      	ldr	r2, [pc, #120]	; (800cd90 <HAL_TIM_Base_Start_IT+0xb0>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d018      	beq.n	800cd4c <HAL_TIM_Base_Start_IT+0x6c>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd22:	d013      	beq.n	800cd4c <HAL_TIM_Base_Start_IT+0x6c>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a1a      	ldr	r2, [pc, #104]	; (800cd94 <HAL_TIM_Base_Start_IT+0xb4>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d00e      	beq.n	800cd4c <HAL_TIM_Base_Start_IT+0x6c>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a19      	ldr	r2, [pc, #100]	; (800cd98 <HAL_TIM_Base_Start_IT+0xb8>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d009      	beq.n	800cd4c <HAL_TIM_Base_Start_IT+0x6c>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a17      	ldr	r2, [pc, #92]	; (800cd9c <HAL_TIM_Base_Start_IT+0xbc>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d004      	beq.n	800cd4c <HAL_TIM_Base_Start_IT+0x6c>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a16      	ldr	r2, [pc, #88]	; (800cda0 <HAL_TIM_Base_Start_IT+0xc0>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d111      	bne.n	800cd70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	f003 0307 	and.w	r3, r3, #7
 800cd56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2b06      	cmp	r3, #6
 800cd5c:	d010      	beq.n	800cd80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f042 0201 	orr.w	r2, r2, #1
 800cd6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd6e:	e007      	b.n	800cd80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f042 0201 	orr.w	r2, r2, #1
 800cd7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3714      	adds	r7, #20
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	40010000 	.word	0x40010000
 800cd94:	40000400 	.word	0x40000400
 800cd98:	40000800 	.word	0x40000800
 800cd9c:	40000c00 	.word	0x40000c00
 800cda0:	40014000 	.word	0x40014000

0800cda4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	68da      	ldr	r2, [r3, #12]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f022 0201 	bic.w	r2, r2, #1
 800cdba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	6a1a      	ldr	r2, [r3, #32]
 800cdc2:	f241 1311 	movw	r3, #4369	; 0x1111
 800cdc6:	4013      	ands	r3, r2
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10f      	bne.n	800cdec <HAL_TIM_Base_Stop_IT+0x48>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	6a1a      	ldr	r2, [r3, #32]
 800cdd2:	f240 4344 	movw	r3, #1092	; 0x444
 800cdd6:	4013      	ands	r3, r2
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d107      	bne.n	800cdec <HAL_TIM_Base_Stop_IT+0x48>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f022 0201 	bic.w	r2, r2, #1
 800cdea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr

0800ce02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b082      	sub	sp, #8
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	691b      	ldr	r3, [r3, #16]
 800ce10:	f003 0302 	and.w	r3, r3, #2
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d122      	bne.n	800ce5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	f003 0302 	and.w	r3, r3, #2
 800ce22:	2b02      	cmp	r3, #2
 800ce24:	d11b      	bne.n	800ce5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f06f 0202 	mvn.w	r2, #2
 800ce2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	699b      	ldr	r3, [r3, #24]
 800ce3c:	f003 0303 	and.w	r3, r3, #3
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d003      	beq.n	800ce4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 f8ee 	bl	800d026 <HAL_TIM_IC_CaptureCallback>
 800ce4a:	e005      	b.n	800ce58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 f8e0 	bl	800d012 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 f8f1 	bl	800d03a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	691b      	ldr	r3, [r3, #16]
 800ce64:	f003 0304 	and.w	r3, r3, #4
 800ce68:	2b04      	cmp	r3, #4
 800ce6a:	d122      	bne.n	800ceb2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	f003 0304 	and.w	r3, r3, #4
 800ce76:	2b04      	cmp	r3, #4
 800ce78:	d11b      	bne.n	800ceb2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f06f 0204 	mvn.w	r2, #4
 800ce82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2202      	movs	r2, #2
 800ce88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	699b      	ldr	r3, [r3, #24]
 800ce90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d003      	beq.n	800cea0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 f8c4 	bl	800d026 <HAL_TIM_IC_CaptureCallback>
 800ce9e:	e005      	b.n	800ceac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 f8b6 	bl	800d012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 f8c7 	bl	800d03a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	691b      	ldr	r3, [r3, #16]
 800ceb8:	f003 0308 	and.w	r3, r3, #8
 800cebc:	2b08      	cmp	r3, #8
 800cebe:	d122      	bne.n	800cf06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	f003 0308 	and.w	r3, r3, #8
 800ceca:	2b08      	cmp	r3, #8
 800cecc:	d11b      	bne.n	800cf06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f06f 0208 	mvn.w	r2, #8
 800ced6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2204      	movs	r2, #4
 800cedc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	69db      	ldr	r3, [r3, #28]
 800cee4:	f003 0303 	and.w	r3, r3, #3
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d003      	beq.n	800cef4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 f89a 	bl	800d026 <HAL_TIM_IC_CaptureCallback>
 800cef2:	e005      	b.n	800cf00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 f88c 	bl	800d012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 f89d 	bl	800d03a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	691b      	ldr	r3, [r3, #16]
 800cf0c:	f003 0310 	and.w	r3, r3, #16
 800cf10:	2b10      	cmp	r3, #16
 800cf12:	d122      	bne.n	800cf5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	f003 0310 	and.w	r3, r3, #16
 800cf1e:	2b10      	cmp	r3, #16
 800cf20:	d11b      	bne.n	800cf5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f06f 0210 	mvn.w	r2, #16
 800cf2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2208      	movs	r2, #8
 800cf30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	69db      	ldr	r3, [r3, #28]
 800cf38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d003      	beq.n	800cf48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 f870 	bl	800d026 <HAL_TIM_IC_CaptureCallback>
 800cf46:	e005      	b.n	800cf54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 f862 	bl	800d012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 f873 	bl	800d03a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	f003 0301 	and.w	r3, r3, #1
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d10e      	bne.n	800cf86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	f003 0301 	and.w	r3, r3, #1
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d107      	bne.n	800cf86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f06f 0201 	mvn.w	r2, #1
 800cf7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7f8 f825 	bl	8004fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	691b      	ldr	r3, [r3, #16]
 800cf8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf90:	2b80      	cmp	r3, #128	; 0x80
 800cf92:	d10e      	bne.n	800cfb2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	68db      	ldr	r3, [r3, #12]
 800cf9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf9e:	2b80      	cmp	r3, #128	; 0x80
 800cfa0:	d107      	bne.n	800cfb2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cfaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 f8e3 	bl	800d178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfbc:	2b40      	cmp	r3, #64	; 0x40
 800cfbe:	d10e      	bne.n	800cfde <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfca:	2b40      	cmp	r3, #64	; 0x40
 800cfcc:	d107      	bne.n	800cfde <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cfd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 f838 	bl	800d04e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	691b      	ldr	r3, [r3, #16]
 800cfe4:	f003 0320 	and.w	r3, r3, #32
 800cfe8:	2b20      	cmp	r3, #32
 800cfea:	d10e      	bne.n	800d00a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	f003 0320 	and.w	r3, r3, #32
 800cff6:	2b20      	cmp	r3, #32
 800cff8:	d107      	bne.n	800d00a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f06f 0220 	mvn.w	r2, #32
 800d002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 f8ad 	bl	800d164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d00a:	bf00      	nop
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d012:	b480      	push	{r7}
 800d014:	b083      	sub	sp, #12
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d01a:	bf00      	nop
 800d01c:	370c      	adds	r7, #12
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr

0800d026 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d026:	b480      	push	{r7}
 800d028:	b083      	sub	sp, #12
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d02e:	bf00      	nop
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d03a:	b480      	push	{r7}
 800d03c:	b083      	sub	sp, #12
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d042:	bf00      	nop
 800d044:	370c      	adds	r7, #12
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d04e:	b480      	push	{r7}
 800d050:	b083      	sub	sp, #12
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d056:	bf00      	nop
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr
	...

0800d064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d064:	b480      	push	{r7}
 800d066:	b085      	sub	sp, #20
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	4a34      	ldr	r2, [pc, #208]	; (800d148 <TIM_Base_SetConfig+0xe4>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d00f      	beq.n	800d09c <TIM_Base_SetConfig+0x38>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d082:	d00b      	beq.n	800d09c <TIM_Base_SetConfig+0x38>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	4a31      	ldr	r2, [pc, #196]	; (800d14c <TIM_Base_SetConfig+0xe8>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d007      	beq.n	800d09c <TIM_Base_SetConfig+0x38>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4a30      	ldr	r2, [pc, #192]	; (800d150 <TIM_Base_SetConfig+0xec>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d003      	beq.n	800d09c <TIM_Base_SetConfig+0x38>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4a2f      	ldr	r2, [pc, #188]	; (800d154 <TIM_Base_SetConfig+0xf0>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d108      	bne.n	800d0ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	68fa      	ldr	r2, [r7, #12]
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4a25      	ldr	r2, [pc, #148]	; (800d148 <TIM_Base_SetConfig+0xe4>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d01b      	beq.n	800d0ee <TIM_Base_SetConfig+0x8a>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0bc:	d017      	beq.n	800d0ee <TIM_Base_SetConfig+0x8a>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4a22      	ldr	r2, [pc, #136]	; (800d14c <TIM_Base_SetConfig+0xe8>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d013      	beq.n	800d0ee <TIM_Base_SetConfig+0x8a>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4a21      	ldr	r2, [pc, #132]	; (800d150 <TIM_Base_SetConfig+0xec>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d00f      	beq.n	800d0ee <TIM_Base_SetConfig+0x8a>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	4a20      	ldr	r2, [pc, #128]	; (800d154 <TIM_Base_SetConfig+0xf0>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d00b      	beq.n	800d0ee <TIM_Base_SetConfig+0x8a>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4a1f      	ldr	r2, [pc, #124]	; (800d158 <TIM_Base_SetConfig+0xf4>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d007      	beq.n	800d0ee <TIM_Base_SetConfig+0x8a>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4a1e      	ldr	r2, [pc, #120]	; (800d15c <TIM_Base_SetConfig+0xf8>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d003      	beq.n	800d0ee <TIM_Base_SetConfig+0x8a>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4a1d      	ldr	r2, [pc, #116]	; (800d160 <TIM_Base_SetConfig+0xfc>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d108      	bne.n	800d100 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	695b      	ldr	r3, [r3, #20]
 800d10a:	4313      	orrs	r3, r2
 800d10c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	689a      	ldr	r2, [r3, #8]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	681a      	ldr	r2, [r3, #0]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	4a08      	ldr	r2, [pc, #32]	; (800d148 <TIM_Base_SetConfig+0xe4>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d103      	bne.n	800d134 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	691a      	ldr	r2, [r3, #16]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2201      	movs	r2, #1
 800d138:	615a      	str	r2, [r3, #20]
}
 800d13a:	bf00      	nop
 800d13c:	3714      	adds	r7, #20
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop
 800d148:	40010000 	.word	0x40010000
 800d14c:	40000400 	.word	0x40000400
 800d150:	40000800 	.word	0x40000800
 800d154:	40000c00 	.word	0x40000c00
 800d158:	40014000 	.word	0x40014000
 800d15c:	40014400 	.word	0x40014400
 800d160:	40014800 	.word	0x40014800

0800d164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d16c:	bf00      	nop
 800d16e:	370c      	adds	r7, #12
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d180:	bf00      	nop
 800d182:	370c      	adds	r7, #12
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d101      	bne.n	800d19e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	e03f      	b.n	800d21e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d106      	bne.n	800d1b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7fa fae0 	bl	8007778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2224      	movs	r2, #36	; 0x24
 800d1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	68da      	ldr	r2, [r3, #12]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d1ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 ff53 	bl	800e07c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	691a      	ldr	r2, [r3, #16]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d1e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	695a      	ldr	r2, [r3, #20]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d1f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68da      	ldr	r2, [r3, #12]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2200      	movs	r2, #0
 800d20a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2220      	movs	r2, #32
 800d210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2220      	movs	r2, #32
 800d218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3708      	adds	r7, #8
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
	...

0800d228 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b08c      	sub	sp, #48	; 0x30
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	4613      	mov	r3, r2
 800d234:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	2b20      	cmp	r3, #32
 800d240:	d165      	bne.n	800d30e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d002      	beq.n	800d24e <HAL_UART_Transmit_DMA+0x26>
 800d248:	88fb      	ldrh	r3, [r7, #6]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d101      	bne.n	800d252 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800d24e:	2301      	movs	r3, #1
 800d250:	e05e      	b.n	800d310 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d101      	bne.n	800d260 <HAL_UART_Transmit_DMA+0x38>
 800d25c:	2302      	movs	r3, #2
 800d25e:	e057      	b.n	800d310 <HAL_UART_Transmit_DMA+0xe8>
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2201      	movs	r2, #1
 800d264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	88fa      	ldrh	r2, [r7, #6]
 800d272:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	88fa      	ldrh	r2, [r7, #6]
 800d278:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2200      	movs	r2, #0
 800d27e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2221      	movs	r2, #33	; 0x21
 800d284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d28c:	4a22      	ldr	r2, [pc, #136]	; (800d318 <HAL_UART_Transmit_DMA+0xf0>)
 800d28e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d294:	4a21      	ldr	r2, [pc, #132]	; (800d31c <HAL_UART_Transmit_DMA+0xf4>)
 800d296:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d29c:	4a20      	ldr	r2, [pc, #128]	; (800d320 <HAL_UART_Transmit_DMA+0xf8>)
 800d29e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800d2a8:	f107 0308 	add.w	r3, r7, #8
 800d2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b4:	6819      	ldr	r1, [r3, #0]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	3304      	adds	r3, #4
 800d2bc:	461a      	mov	r2, r3
 800d2be:	88fb      	ldrh	r3, [r7, #6]
 800d2c0:	f7fa fe14 	bl	8007eec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d2cc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	3314      	adds	r3, #20
 800d2dc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	e853 3f00 	ldrex	r3, [r3]
 800d2e4:	617b      	str	r3, [r7, #20]
   return(result);
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	3314      	adds	r3, #20
 800d2f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2f6:	627a      	str	r2, [r7, #36]	; 0x24
 800d2f8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2fa:	6a39      	ldr	r1, [r7, #32]
 800d2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2fe:	e841 2300 	strex	r3, r2, [r1]
 800d302:	61fb      	str	r3, [r7, #28]
   return(result);
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d1e5      	bne.n	800d2d6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800d30a:	2300      	movs	r3, #0
 800d30c:	e000      	b.n	800d310 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800d30e:	2302      	movs	r3, #2
  }
}
 800d310:	4618      	mov	r0, r3
 800d312:	3730      	adds	r7, #48	; 0x30
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	0800d91d 	.word	0x0800d91d
 800d31c:	0800d9b7 	.word	0x0800d9b7
 800d320:	0800db2f 	.word	0x0800db2f

0800d324 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	4613      	mov	r3, r2
 800d330:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	2b20      	cmp	r3, #32
 800d33c:	d11d      	bne.n	800d37a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d002      	beq.n	800d34a <HAL_UART_Receive_DMA+0x26>
 800d344:	88fb      	ldrh	r3, [r7, #6]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d101      	bne.n	800d34e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d34a:	2301      	movs	r3, #1
 800d34c:	e016      	b.n	800d37c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d354:	2b01      	cmp	r3, #1
 800d356:	d101      	bne.n	800d35c <HAL_UART_Receive_DMA+0x38>
 800d358:	2302      	movs	r3, #2
 800d35a:	e00f      	b.n	800d37c <HAL_UART_Receive_DMA+0x58>
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2200      	movs	r2, #0
 800d368:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d36a:	88fb      	ldrh	r3, [r7, #6]
 800d36c:	461a      	mov	r2, r3
 800d36e:	68b9      	ldr	r1, [r7, #8]
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f000 fc27 	bl	800dbc4 <UART_Start_Receive_DMA>
 800d376:	4603      	mov	r3, r0
 800d378:	e000      	b.n	800d37c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800d37a:	2302      	movs	r3, #2
  }
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b0ba      	sub	sp, #232	; 0xe8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	695b      	ldr	r3, [r3, #20]
 800d3a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d3b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3ba:	f003 030f 	and.w	r3, r3, #15
 800d3be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d3c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d10f      	bne.n	800d3ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d3ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3ce:	f003 0320 	and.w	r3, r3, #32
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d009      	beq.n	800d3ea <HAL_UART_IRQHandler+0x66>
 800d3d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3da:	f003 0320 	and.w	r3, r3, #32
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d003      	beq.n	800d3ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 fd8f 	bl	800df06 <UART_Receive_IT>
      return;
 800d3e8:	e256      	b.n	800d898 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d3ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f000 80de 	beq.w	800d5b0 <HAL_UART_IRQHandler+0x22c>
 800d3f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3f8:	f003 0301 	and.w	r3, r3, #1
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d106      	bne.n	800d40e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d404:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f000 80d1 	beq.w	800d5b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d40e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d412:	f003 0301 	and.w	r3, r3, #1
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00b      	beq.n	800d432 <HAL_UART_IRQHandler+0xae>
 800d41a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d41e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d422:	2b00      	cmp	r3, #0
 800d424:	d005      	beq.n	800d432 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d42a:	f043 0201 	orr.w	r2, r3, #1
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d436:	f003 0304 	and.w	r3, r3, #4
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d00b      	beq.n	800d456 <HAL_UART_IRQHandler+0xd2>
 800d43e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d442:	f003 0301 	and.w	r3, r3, #1
 800d446:	2b00      	cmp	r3, #0
 800d448:	d005      	beq.n	800d456 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44e:	f043 0202 	orr.w	r2, r3, #2
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d45a:	f003 0302 	and.w	r3, r3, #2
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00b      	beq.n	800d47a <HAL_UART_IRQHandler+0xf6>
 800d462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d466:	f003 0301 	and.w	r3, r3, #1
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d005      	beq.n	800d47a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d472:	f043 0204 	orr.w	r2, r3, #4
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d47a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d47e:	f003 0308 	and.w	r3, r3, #8
 800d482:	2b00      	cmp	r3, #0
 800d484:	d011      	beq.n	800d4aa <HAL_UART_IRQHandler+0x126>
 800d486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d48a:	f003 0320 	and.w	r3, r3, #32
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d105      	bne.n	800d49e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d496:	f003 0301 	and.w	r3, r3, #1
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d005      	beq.n	800d4aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a2:	f043 0208 	orr.w	r2, r3, #8
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f000 81ed 	beq.w	800d88e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d4b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4b8:	f003 0320 	and.w	r3, r3, #32
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d008      	beq.n	800d4d2 <HAL_UART_IRQHandler+0x14e>
 800d4c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4c4:	f003 0320 	and.w	r3, r3, #32
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d002      	beq.n	800d4d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 fd1a 	bl	800df06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4dc:	2b40      	cmp	r3, #64	; 0x40
 800d4de:	bf0c      	ite	eq
 800d4e0:	2301      	moveq	r3, #1
 800d4e2:	2300      	movne	r3, #0
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ee:	f003 0308 	and.w	r3, r3, #8
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d103      	bne.n	800d4fe <HAL_UART_IRQHandler+0x17a>
 800d4f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d04f      	beq.n	800d59e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 fc22 	bl	800dd48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	695b      	ldr	r3, [r3, #20]
 800d50a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d50e:	2b40      	cmp	r3, #64	; 0x40
 800d510:	d141      	bne.n	800d596 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	3314      	adds	r3, #20
 800d518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d51c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d520:	e853 3f00 	ldrex	r3, [r3]
 800d524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d52c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	3314      	adds	r3, #20
 800d53a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d53e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d542:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d546:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d54a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d54e:	e841 2300 	strex	r3, r2, [r1]
 800d552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1d9      	bne.n	800d512 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d562:	2b00      	cmp	r3, #0
 800d564:	d013      	beq.n	800d58e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d56a:	4a7d      	ldr	r2, [pc, #500]	; (800d760 <HAL_UART_IRQHandler+0x3dc>)
 800d56c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d572:	4618      	mov	r0, r3
 800d574:	f7fa fd82 	bl	800807c <HAL_DMA_Abort_IT>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d016      	beq.n	800d5ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d588:	4610      	mov	r0, r2
 800d58a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d58c:	e00e      	b.n	800d5ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 f9ae 	bl	800d8f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d594:	e00a      	b.n	800d5ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 f9aa 	bl	800d8f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d59c:	e006      	b.n	800d5ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 f9a6 	bl	800d8f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d5aa:	e170      	b.n	800d88e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5ac:	bf00      	nop
    return;
 800d5ae:	e16e      	b.n	800d88e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	f040 814a 	bne.w	800d84e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5be:	f003 0310 	and.w	r3, r3, #16
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	f000 8143 	beq.w	800d84e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d5c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5cc:	f003 0310 	and.w	r3, r3, #16
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f000 813c 	beq.w	800d84e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	60bb      	str	r3, [r7, #8]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	60bb      	str	r3, [r7, #8]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	60bb      	str	r3, [r7, #8]
 800d5ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	695b      	ldr	r3, [r3, #20]
 800d5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5f6:	2b40      	cmp	r3, #64	; 0x40
 800d5f8:	f040 80b4 	bne.w	800d764 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d608:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f000 8140 	beq.w	800d892 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d61a:	429a      	cmp	r2, r3
 800d61c:	f080 8139 	bcs.w	800d892 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d626:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d62c:	69db      	ldr	r3, [r3, #28]
 800d62e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d632:	f000 8088 	beq.w	800d746 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	330c      	adds	r3, #12
 800d63c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d644:	e853 3f00 	ldrex	r3, [r3]
 800d648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d64c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	330c      	adds	r3, #12
 800d65e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d662:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d66e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d672:	e841 2300 	strex	r3, r2, [r1]
 800d676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d67a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d1d9      	bne.n	800d636 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	3314      	adds	r3, #20
 800d688:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d68a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d68c:	e853 3f00 	ldrex	r3, [r3]
 800d690:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d694:	f023 0301 	bic.w	r3, r3, #1
 800d698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	3314      	adds	r3, #20
 800d6a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d6a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d6aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d6ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d6b2:	e841 2300 	strex	r3, r2, [r1]
 800d6b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d6b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d1e1      	bne.n	800d682 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	3314      	adds	r3, #20
 800d6c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6c8:	e853 3f00 	ldrex	r3, [r3]
 800d6cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d6ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	3314      	adds	r3, #20
 800d6de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d6e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d6e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d6e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6ea:	e841 2300 	strex	r3, r2, [r1]
 800d6ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d6f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d1e3      	bne.n	800d6be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2220      	movs	r2, #32
 800d6fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	330c      	adds	r3, #12
 800d70a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d70e:	e853 3f00 	ldrex	r3, [r3]
 800d712:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d716:	f023 0310 	bic.w	r3, r3, #16
 800d71a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	330c      	adds	r3, #12
 800d724:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d728:	65ba      	str	r2, [r7, #88]	; 0x58
 800d72a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d72e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d730:	e841 2300 	strex	r3, r2, [r1]
 800d734:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1e3      	bne.n	800d704 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d740:	4618      	mov	r0, r3
 800d742:	f7fa fc2b 	bl	8007f9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d74e:	b29b      	uxth	r3, r3
 800d750:	1ad3      	subs	r3, r2, r3
 800d752:	b29b      	uxth	r3, r3
 800d754:	4619      	mov	r1, r3
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 f8d4 	bl	800d904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d75c:	e099      	b.n	800d892 <HAL_UART_IRQHandler+0x50e>
 800d75e:	bf00      	nop
 800d760:	0800de0f 	.word	0x0800de0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	1ad3      	subs	r3, r2, r3
 800d770:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d778:	b29b      	uxth	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f000 808b 	beq.w	800d896 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d780:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d784:	2b00      	cmp	r3, #0
 800d786:	f000 8086 	beq.w	800d896 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	330c      	adds	r3, #12
 800d790:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d794:	e853 3f00 	ldrex	r3, [r3]
 800d798:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d79c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	330c      	adds	r3, #12
 800d7aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d7ae:	647a      	str	r2, [r7, #68]	; 0x44
 800d7b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d7b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7b6:	e841 2300 	strex	r3, r2, [r1]
 800d7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d1e3      	bne.n	800d78a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	3314      	adds	r3, #20
 800d7c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7cc:	e853 3f00 	ldrex	r3, [r3]
 800d7d0:	623b      	str	r3, [r7, #32]
   return(result);
 800d7d2:	6a3b      	ldr	r3, [r7, #32]
 800d7d4:	f023 0301 	bic.w	r3, r3, #1
 800d7d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	3314      	adds	r3, #20
 800d7e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d7e6:	633a      	str	r2, [r7, #48]	; 0x30
 800d7e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ee:	e841 2300 	strex	r3, r2, [r1]
 800d7f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d1e3      	bne.n	800d7c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2220      	movs	r2, #32
 800d7fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2200      	movs	r2, #0
 800d806:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	330c      	adds	r3, #12
 800d80e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	e853 3f00 	ldrex	r3, [r3]
 800d816:	60fb      	str	r3, [r7, #12]
   return(result);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f023 0310 	bic.w	r3, r3, #16
 800d81e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	330c      	adds	r3, #12
 800d828:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d82c:	61fa      	str	r2, [r7, #28]
 800d82e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d830:	69b9      	ldr	r1, [r7, #24]
 800d832:	69fa      	ldr	r2, [r7, #28]
 800d834:	e841 2300 	strex	r3, r2, [r1]
 800d838:	617b      	str	r3, [r7, #20]
   return(result);
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d1e3      	bne.n	800d808 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d844:	4619      	mov	r1, r3
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 f85c 	bl	800d904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d84c:	e023      	b.n	800d896 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d84e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d856:	2b00      	cmp	r3, #0
 800d858:	d009      	beq.n	800d86e <HAL_UART_IRQHandler+0x4ea>
 800d85a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d862:	2b00      	cmp	r3, #0
 800d864:	d003      	beq.n	800d86e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 fae5 	bl	800de36 <UART_Transmit_IT>
    return;
 800d86c:	e014      	b.n	800d898 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00e      	beq.n	800d898 <HAL_UART_IRQHandler+0x514>
 800d87a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d87e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d882:	2b00      	cmp	r3, #0
 800d884:	d008      	beq.n	800d898 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 fb25 	bl	800ded6 <UART_EndTransmit_IT>
    return;
 800d88c:	e004      	b.n	800d898 <HAL_UART_IRQHandler+0x514>
    return;
 800d88e:	bf00      	nop
 800d890:	e002      	b.n	800d898 <HAL_UART_IRQHandler+0x514>
      return;
 800d892:	bf00      	nop
 800d894:	e000      	b.n	800d898 <HAL_UART_IRQHandler+0x514>
      return;
 800d896:	bf00      	nop
  }
}
 800d898:	37e8      	adds	r7, #232	; 0xe8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop

0800d8a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d8a8:	bf00      	nop
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d8bc:	bf00      	nop
 800d8be:	370c      	adds	r7, #12
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d8d0:	bf00      	nop
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr

0800d8dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d8e4:	bf00      	nop
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d8f8:	bf00      	nop
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	460b      	mov	r3, r1
 800d90e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d910:	bf00      	nop
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b090      	sub	sp, #64	; 0x40
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d928:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d934:	2b00      	cmp	r3, #0
 800d936:	d137      	bne.n	800d9a8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800d938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d93a:	2200      	movs	r2, #0
 800d93c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	3314      	adds	r3, #20
 800d944:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d948:	e853 3f00 	ldrex	r3, [r3]
 800d94c:	623b      	str	r3, [r7, #32]
   return(result);
 800d94e:	6a3b      	ldr	r3, [r7, #32]
 800d950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d954:	63bb      	str	r3, [r7, #56]	; 0x38
 800d956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	3314      	adds	r3, #20
 800d95c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d95e:	633a      	str	r2, [r7, #48]	; 0x30
 800d960:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d966:	e841 2300 	strex	r3, r2, [r1]
 800d96a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1e5      	bne.n	800d93e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	330c      	adds	r3, #12
 800d978:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	e853 3f00 	ldrex	r3, [r3]
 800d980:	60fb      	str	r3, [r7, #12]
   return(result);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d988:	637b      	str	r3, [r7, #52]	; 0x34
 800d98a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	330c      	adds	r3, #12
 800d990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d992:	61fa      	str	r2, [r7, #28]
 800d994:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d996:	69b9      	ldr	r1, [r7, #24]
 800d998:	69fa      	ldr	r2, [r7, #28]
 800d99a:	e841 2300 	strex	r3, r2, [r1]
 800d99e:	617b      	str	r3, [r7, #20]
   return(result);
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d1e5      	bne.n	800d972 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9a6:	e002      	b.n	800d9ae <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d9a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d9aa:	f7ff ff79 	bl	800d8a0 <HAL_UART_TxCpltCallback>
}
 800d9ae:	bf00      	nop
 800d9b0:	3740      	adds	r7, #64	; 0x40
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b084      	sub	sp, #16
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	f7ff ff75 	bl	800d8b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9ca:	bf00      	nop
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b09c      	sub	sp, #112	; 0x70
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9de:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d172      	bne.n	800dad4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d9ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d9f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	330c      	adds	r3, #12
 800d9fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9fe:	e853 3f00 	ldrex	r3, [r3]
 800da02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800da04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da0a:	66bb      	str	r3, [r7, #104]	; 0x68
 800da0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	330c      	adds	r3, #12
 800da12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800da14:	65ba      	str	r2, [r7, #88]	; 0x58
 800da16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da1c:	e841 2300 	strex	r3, r2, [r1]
 800da20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800da22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1e5      	bne.n	800d9f4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	3314      	adds	r3, #20
 800da2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da32:	e853 3f00 	ldrex	r3, [r3]
 800da36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da3a:	f023 0301 	bic.w	r3, r3, #1
 800da3e:	667b      	str	r3, [r7, #100]	; 0x64
 800da40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	3314      	adds	r3, #20
 800da46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800da48:	647a      	str	r2, [r7, #68]	; 0x44
 800da4a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da50:	e841 2300 	strex	r3, r2, [r1]
 800da54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1e5      	bne.n	800da28 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	3314      	adds	r3, #20
 800da62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da66:	e853 3f00 	ldrex	r3, [r3]
 800da6a:	623b      	str	r3, [r7, #32]
   return(result);
 800da6c:	6a3b      	ldr	r3, [r7, #32]
 800da6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da72:	663b      	str	r3, [r7, #96]	; 0x60
 800da74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	3314      	adds	r3, #20
 800da7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da7c:	633a      	str	r2, [r7, #48]	; 0x30
 800da7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da84:	e841 2300 	strex	r3, r2, [r1]
 800da88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1e5      	bne.n	800da5c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800da90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da92:	2220      	movs	r2, #32
 800da94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	d119      	bne.n	800dad4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800daa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	330c      	adds	r3, #12
 800daa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	e853 3f00 	ldrex	r3, [r3]
 800daae:	60fb      	str	r3, [r7, #12]
   return(result);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f023 0310 	bic.w	r3, r3, #16
 800dab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	330c      	adds	r3, #12
 800dabe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dac0:	61fa      	str	r2, [r7, #28]
 800dac2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac4:	69b9      	ldr	r1, [r7, #24]
 800dac6:	69fa      	ldr	r2, [r7, #28]
 800dac8:	e841 2300 	strex	r3, r2, [r1]
 800dacc:	617b      	str	r3, [r7, #20]
   return(result);
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d1e5      	bne.n	800daa0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d106      	bne.n	800daea <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dadc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dade:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dae0:	4619      	mov	r1, r3
 800dae2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dae4:	f7ff ff0e 	bl	800d904 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dae8:	e002      	b.n	800daf0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800daea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800daec:	f7ff feec 	bl	800d8c8 <HAL_UART_RxCpltCallback>
}
 800daf0:	bf00      	nop
 800daf2:	3770      	adds	r7, #112	; 0x70
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db04:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d108      	bne.n	800db20 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800db12:	085b      	lsrs	r3, r3, #1
 800db14:	b29b      	uxth	r3, r3
 800db16:	4619      	mov	r1, r3
 800db18:	68f8      	ldr	r0, [r7, #12]
 800db1a:	f7ff fef3 	bl	800d904 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db1e:	e002      	b.n	800db26 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f7ff fedb 	bl	800d8dc <HAL_UART_RxHalfCpltCallback>
}
 800db26:	bf00      	nop
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b084      	sub	sp, #16
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800db36:	2300      	movs	r3, #0
 800db38:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	695b      	ldr	r3, [r3, #20]
 800db46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db4a:	2b80      	cmp	r3, #128	; 0x80
 800db4c:	bf0c      	ite	eq
 800db4e:	2301      	moveq	r3, #1
 800db50:	2300      	movne	r3, #0
 800db52:	b2db      	uxtb	r3, r3
 800db54:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	2b21      	cmp	r3, #33	; 0x21
 800db60:	d108      	bne.n	800db74 <UART_DMAError+0x46>
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d005      	beq.n	800db74 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	2200      	movs	r2, #0
 800db6c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800db6e:	68b8      	ldr	r0, [r7, #8]
 800db70:	f000 f8c2 	bl	800dcf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	695b      	ldr	r3, [r3, #20]
 800db7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db7e:	2b40      	cmp	r3, #64	; 0x40
 800db80:	bf0c      	ite	eq
 800db82:	2301      	moveq	r3, #1
 800db84:	2300      	movne	r3, #0
 800db86:	b2db      	uxtb	r3, r3
 800db88:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800db90:	b2db      	uxtb	r3, r3
 800db92:	2b22      	cmp	r3, #34	; 0x22
 800db94:	d108      	bne.n	800dba8 <UART_DMAError+0x7a>
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d005      	beq.n	800dba8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	2200      	movs	r2, #0
 800dba0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800dba2:	68b8      	ldr	r0, [r7, #8]
 800dba4:	f000 f8d0 	bl	800dd48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbac:	f043 0210 	orr.w	r2, r3, #16
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbb4:	68b8      	ldr	r0, [r7, #8]
 800dbb6:	f7ff fe9b 	bl	800d8f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbba:	bf00      	nop
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
	...

0800dbc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b098      	sub	sp, #96	; 0x60
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	4613      	mov	r3, r2
 800dbd0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800dbd2:	68ba      	ldr	r2, [r7, #8]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	88fa      	ldrh	r2, [r7, #6]
 800dbdc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	2222      	movs	r2, #34	; 0x22
 800dbe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf0:	4a3e      	ldr	r2, [pc, #248]	; (800dcec <UART_Start_Receive_DMA+0x128>)
 800dbf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf8:	4a3d      	ldr	r2, [pc, #244]	; (800dcf0 <UART_Start_Receive_DMA+0x12c>)
 800dbfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc00:	4a3c      	ldr	r2, [pc, #240]	; (800dcf4 <UART_Start_Receive_DMA+0x130>)
 800dc02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc08:	2200      	movs	r2, #0
 800dc0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800dc0c:	f107 0308 	add.w	r3, r7, #8
 800dc10:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	3304      	adds	r3, #4
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	88fb      	ldrh	r3, [r7, #6]
 800dc24:	f7fa f962 	bl	8007eec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800dc28:	2300      	movs	r3, #0
 800dc2a:	613b      	str	r3, [r7, #16]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	613b      	str	r3, [r7, #16]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	613b      	str	r3, [r7, #16]
 800dc3c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2200      	movs	r2, #0
 800dc42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	330c      	adds	r3, #12
 800dc4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc50:	e853 3f00 	ldrex	r3, [r3]
 800dc54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc5c:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	330c      	adds	r3, #12
 800dc64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc66:	64fa      	str	r2, [r7, #76]	; 0x4c
 800dc68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dc6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc6e:	e841 2300 	strex	r3, r2, [r1]
 800dc72:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800dc74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d1e5      	bne.n	800dc46 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	3314      	adds	r3, #20
 800dc80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc84:	e853 3f00 	ldrex	r3, [r3]
 800dc88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8c:	f043 0301 	orr.w	r3, r3, #1
 800dc90:	657b      	str	r3, [r7, #84]	; 0x54
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	3314      	adds	r3, #20
 800dc98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc9a:	63ba      	str	r2, [r7, #56]	; 0x38
 800dc9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dca2:	e841 2300 	strex	r3, r2, [r1]
 800dca6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d1e5      	bne.n	800dc7a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	3314      	adds	r3, #20
 800dcb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	e853 3f00 	ldrex	r3, [r3]
 800dcbc:	617b      	str	r3, [r7, #20]
   return(result);
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcc4:	653b      	str	r3, [r7, #80]	; 0x50
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	3314      	adds	r3, #20
 800dccc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dcce:	627a      	str	r2, [r7, #36]	; 0x24
 800dcd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcd2:	6a39      	ldr	r1, [r7, #32]
 800dcd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcd6:	e841 2300 	strex	r3, r2, [r1]
 800dcda:	61fb      	str	r3, [r7, #28]
   return(result);
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1e5      	bne.n	800dcae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800dce2:	2300      	movs	r3, #0
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3760      	adds	r7, #96	; 0x60
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	0800d9d3 	.word	0x0800d9d3
 800dcf0:	0800daf9 	.word	0x0800daf9
 800dcf4:	0800db2f 	.word	0x0800db2f

0800dcf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b089      	sub	sp, #36	; 0x24
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	330c      	adds	r3, #12
 800dd06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	e853 3f00 	ldrex	r3, [r3]
 800dd0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dd16:	61fb      	str	r3, [r7, #28]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	330c      	adds	r3, #12
 800dd1e:	69fa      	ldr	r2, [r7, #28]
 800dd20:	61ba      	str	r2, [r7, #24]
 800dd22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd24:	6979      	ldr	r1, [r7, #20]
 800dd26:	69ba      	ldr	r2, [r7, #24]
 800dd28:	e841 2300 	strex	r3, r2, [r1]
 800dd2c:	613b      	str	r3, [r7, #16]
   return(result);
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d1e5      	bne.n	800dd00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2220      	movs	r2, #32
 800dd38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800dd3c:	bf00      	nop
 800dd3e:	3724      	adds	r7, #36	; 0x24
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr

0800dd48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b095      	sub	sp, #84	; 0x54
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	330c      	adds	r3, #12
 800dd56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd5a:	e853 3f00 	ldrex	r3, [r3]
 800dd5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd66:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	330c      	adds	r3, #12
 800dd6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd70:	643a      	str	r2, [r7, #64]	; 0x40
 800dd72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dd76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd78:	e841 2300 	strex	r3, r2, [r1]
 800dd7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d1e5      	bne.n	800dd50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	3314      	adds	r3, #20
 800dd8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd8c:	6a3b      	ldr	r3, [r7, #32]
 800dd8e:	e853 3f00 	ldrex	r3, [r3]
 800dd92:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	f023 0301 	bic.w	r3, r3, #1
 800dd9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	3314      	adds	r3, #20
 800dda2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dda4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dda6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ddaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddac:	e841 2300 	strex	r3, r2, [r1]
 800ddb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ddb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d1e5      	bne.n	800dd84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d119      	bne.n	800ddf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	330c      	adds	r3, #12
 800ddc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	e853 3f00 	ldrex	r3, [r3]
 800ddce:	60bb      	str	r3, [r7, #8]
   return(result);
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	f023 0310 	bic.w	r3, r3, #16
 800ddd6:	647b      	str	r3, [r7, #68]	; 0x44
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	330c      	adds	r3, #12
 800ddde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dde0:	61ba      	str	r2, [r7, #24]
 800dde2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dde4:	6979      	ldr	r1, [r7, #20]
 800dde6:	69ba      	ldr	r2, [r7, #24]
 800dde8:	e841 2300 	strex	r3, r2, [r1]
 800ddec:	613b      	str	r3, [r7, #16]
   return(result);
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d1e5      	bne.n	800ddc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2220      	movs	r2, #32
 800ddf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	631a      	str	r2, [r3, #48]	; 0x30
}
 800de02:	bf00      	nop
 800de04:	3754      	adds	r7, #84	; 0x54
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr

0800de0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800de0e:	b580      	push	{r7, lr}
 800de10:	b084      	sub	sp, #16
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2200      	movs	r2, #0
 800de20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2200      	movs	r2, #0
 800de26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800de28:	68f8      	ldr	r0, [r7, #12]
 800de2a:	f7ff fd61 	bl	800d8f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de2e:	bf00      	nop
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800de36:	b480      	push	{r7}
 800de38:	b085      	sub	sp, #20
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de44:	b2db      	uxtb	r3, r3
 800de46:	2b21      	cmp	r3, #33	; 0x21
 800de48:	d13e      	bne.n	800dec8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de52:	d114      	bne.n	800de7e <UART_Transmit_IT+0x48>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	691b      	ldr	r3, [r3, #16]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d110      	bne.n	800de7e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6a1b      	ldr	r3, [r3, #32]
 800de60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	881b      	ldrh	r3, [r3, #0]
 800de66:	461a      	mov	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a1b      	ldr	r3, [r3, #32]
 800de76:	1c9a      	adds	r2, r3, #2
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	621a      	str	r2, [r3, #32]
 800de7c:	e008      	b.n	800de90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6a1b      	ldr	r3, [r3, #32]
 800de82:	1c59      	adds	r1, r3, #1
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	6211      	str	r1, [r2, #32]
 800de88:	781a      	ldrb	r2, [r3, #0]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800de94:	b29b      	uxth	r3, r3
 800de96:	3b01      	subs	r3, #1
 800de98:	b29b      	uxth	r3, r3
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	4619      	mov	r1, r3
 800de9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d10f      	bne.n	800dec4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	68da      	ldr	r2, [r3, #12]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800deb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	68da      	ldr	r2, [r3, #12]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dec2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dec4:	2300      	movs	r3, #0
 800dec6:	e000      	b.n	800deca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dec8:	2302      	movs	r3, #2
  }
}
 800deca:	4618      	mov	r0, r3
 800decc:	3714      	adds	r7, #20
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr

0800ded6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b082      	sub	sp, #8
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	68da      	ldr	r2, [r3, #12]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800deec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2220      	movs	r2, #32
 800def2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f7ff fcd2 	bl	800d8a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800defc:	2300      	movs	r3, #0
}
 800defe:	4618      	mov	r0, r3
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}

0800df06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800df06:	b580      	push	{r7, lr}
 800df08:	b08c      	sub	sp, #48	; 0x30
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800df14:	b2db      	uxtb	r3, r3
 800df16:	2b22      	cmp	r3, #34	; 0x22
 800df18:	f040 80ab 	bne.w	800e072 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df24:	d117      	bne.n	800df56 <UART_Receive_IT+0x50>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	691b      	ldr	r3, [r3, #16]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d113      	bne.n	800df56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800df2e:	2300      	movs	r3, #0
 800df30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	b29b      	uxth	r3, r3
 800df40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df44:	b29a      	uxth	r2, r3
 800df46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df4e:	1c9a      	adds	r2, r3, #2
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	629a      	str	r2, [r3, #40]	; 0x28
 800df54:	e026      	b.n	800dfa4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800df5c:	2300      	movs	r3, #0
 800df5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	689b      	ldr	r3, [r3, #8]
 800df64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df68:	d007      	beq.n	800df7a <UART_Receive_IT+0x74>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	689b      	ldr	r3, [r3, #8]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d10a      	bne.n	800df88 <UART_Receive_IT+0x82>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	691b      	ldr	r3, [r3, #16]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d106      	bne.n	800df88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	b2da      	uxtb	r2, r3
 800df82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df84:	701a      	strb	r2, [r3, #0]
 800df86:	e008      	b.n	800df9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df94:	b2da      	uxtb	r2, r3
 800df96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df9e:	1c5a      	adds	r2, r3, #1
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	3b01      	subs	r3, #1
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d15a      	bne.n	800e06e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	68da      	ldr	r2, [r3, #12]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f022 0220 	bic.w	r2, r2, #32
 800dfc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	68da      	ldr	r2, [r3, #12]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dfd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	695a      	ldr	r2, [r3, #20]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f022 0201 	bic.w	r2, r2, #1
 800dfe6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2220      	movs	r2, #32
 800dfec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d135      	bne.n	800e064 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2200      	movs	r2, #0
 800dffc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	330c      	adds	r3, #12
 800e004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	e853 3f00 	ldrex	r3, [r3]
 800e00c:	613b      	str	r3, [r7, #16]
   return(result);
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	f023 0310 	bic.w	r3, r3, #16
 800e014:	627b      	str	r3, [r7, #36]	; 0x24
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	330c      	adds	r3, #12
 800e01c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e01e:	623a      	str	r2, [r7, #32]
 800e020:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e022:	69f9      	ldr	r1, [r7, #28]
 800e024:	6a3a      	ldr	r2, [r7, #32]
 800e026:	e841 2300 	strex	r3, r2, [r1]
 800e02a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d1e5      	bne.n	800dffe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f003 0310 	and.w	r3, r3, #16
 800e03c:	2b10      	cmp	r3, #16
 800e03e:	d10a      	bne.n	800e056 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e040:	2300      	movs	r3, #0
 800e042:	60fb      	str	r3, [r7, #12]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	60fb      	str	r3, [r7, #12]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	60fb      	str	r3, [r7, #12]
 800e054:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e05a:	4619      	mov	r1, r3
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f7ff fc51 	bl	800d904 <HAL_UARTEx_RxEventCallback>
 800e062:	e002      	b.n	800e06a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f7ff fc2f 	bl	800d8c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e06a:	2300      	movs	r3, #0
 800e06c:	e002      	b.n	800e074 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800e06e:	2300      	movs	r3, #0
 800e070:	e000      	b.n	800e074 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800e072:	2302      	movs	r3, #2
  }
}
 800e074:	4618      	mov	r0, r3
 800e076:	3730      	adds	r7, #48	; 0x30
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e080:	b09f      	sub	sp, #124	; 0x7c
 800e082:	af00      	add	r7, sp, #0
 800e084:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	691b      	ldr	r3, [r3, #16]
 800e08c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e092:	68d9      	ldr	r1, [r3, #12]
 800e094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	ea40 0301 	orr.w	r3, r0, r1
 800e09c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e09e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0a0:	689a      	ldr	r2, [r3, #8]
 800e0a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	431a      	orrs	r2, r3
 800e0a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0aa:	695b      	ldr	r3, [r3, #20]
 800e0ac:	431a      	orrs	r2, r3
 800e0ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0b0:	69db      	ldr	r3, [r3, #28]
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800e0b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e0c0:	f021 010c 	bic.w	r1, r1, #12
 800e0c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0ca:	430b      	orrs	r3, r1
 800e0cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e0ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	695b      	ldr	r3, [r3, #20]
 800e0d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e0d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0da:	6999      	ldr	r1, [r3, #24]
 800e0dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	ea40 0301 	orr.w	r3, r0, r1
 800e0e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e0e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	4bc5      	ldr	r3, [pc, #788]	; (800e400 <UART_SetConfig+0x384>)
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d004      	beq.n	800e0fa <UART_SetConfig+0x7e>
 800e0f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	4bc3      	ldr	r3, [pc, #780]	; (800e404 <UART_SetConfig+0x388>)
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d103      	bne.n	800e102 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e0fa:	f7fe f979 	bl	800c3f0 <HAL_RCC_GetPCLK2Freq>
 800e0fe:	6778      	str	r0, [r7, #116]	; 0x74
 800e100:	e002      	b.n	800e108 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e102:	f7fe f961 	bl	800c3c8 <HAL_RCC_GetPCLK1Freq>
 800e106:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e10a:	69db      	ldr	r3, [r3, #28]
 800e10c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e110:	f040 80b6 	bne.w	800e280 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e116:	461c      	mov	r4, r3
 800e118:	f04f 0500 	mov.w	r5, #0
 800e11c:	4622      	mov	r2, r4
 800e11e:	462b      	mov	r3, r5
 800e120:	1891      	adds	r1, r2, r2
 800e122:	6439      	str	r1, [r7, #64]	; 0x40
 800e124:	415b      	adcs	r3, r3
 800e126:	647b      	str	r3, [r7, #68]	; 0x44
 800e128:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e12c:	1912      	adds	r2, r2, r4
 800e12e:	eb45 0303 	adc.w	r3, r5, r3
 800e132:	f04f 0000 	mov.w	r0, #0
 800e136:	f04f 0100 	mov.w	r1, #0
 800e13a:	00d9      	lsls	r1, r3, #3
 800e13c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e140:	00d0      	lsls	r0, r2, #3
 800e142:	4602      	mov	r2, r0
 800e144:	460b      	mov	r3, r1
 800e146:	1911      	adds	r1, r2, r4
 800e148:	6639      	str	r1, [r7, #96]	; 0x60
 800e14a:	416b      	adcs	r3, r5
 800e14c:	667b      	str	r3, [r7, #100]	; 0x64
 800e14e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	461a      	mov	r2, r3
 800e154:	f04f 0300 	mov.w	r3, #0
 800e158:	1891      	adds	r1, r2, r2
 800e15a:	63b9      	str	r1, [r7, #56]	; 0x38
 800e15c:	415b      	adcs	r3, r3
 800e15e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e160:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e164:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800e168:	f7f2 fda6 	bl	8000cb8 <__aeabi_uldivmod>
 800e16c:	4602      	mov	r2, r0
 800e16e:	460b      	mov	r3, r1
 800e170:	4ba5      	ldr	r3, [pc, #660]	; (800e408 <UART_SetConfig+0x38c>)
 800e172:	fba3 2302 	umull	r2, r3, r3, r2
 800e176:	095b      	lsrs	r3, r3, #5
 800e178:	011e      	lsls	r6, r3, #4
 800e17a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e17c:	461c      	mov	r4, r3
 800e17e:	f04f 0500 	mov.w	r5, #0
 800e182:	4622      	mov	r2, r4
 800e184:	462b      	mov	r3, r5
 800e186:	1891      	adds	r1, r2, r2
 800e188:	6339      	str	r1, [r7, #48]	; 0x30
 800e18a:	415b      	adcs	r3, r3
 800e18c:	637b      	str	r3, [r7, #52]	; 0x34
 800e18e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e192:	1912      	adds	r2, r2, r4
 800e194:	eb45 0303 	adc.w	r3, r5, r3
 800e198:	f04f 0000 	mov.w	r0, #0
 800e19c:	f04f 0100 	mov.w	r1, #0
 800e1a0:	00d9      	lsls	r1, r3, #3
 800e1a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e1a6:	00d0      	lsls	r0, r2, #3
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	1911      	adds	r1, r2, r4
 800e1ae:	65b9      	str	r1, [r7, #88]	; 0x58
 800e1b0:	416b      	adcs	r3, r5
 800e1b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	f04f 0300 	mov.w	r3, #0
 800e1be:	1891      	adds	r1, r2, r2
 800e1c0:	62b9      	str	r1, [r7, #40]	; 0x28
 800e1c2:	415b      	adcs	r3, r3
 800e1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e1ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e1ce:	f7f2 fd73 	bl	8000cb8 <__aeabi_uldivmod>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	4b8c      	ldr	r3, [pc, #560]	; (800e408 <UART_SetConfig+0x38c>)
 800e1d8:	fba3 1302 	umull	r1, r3, r3, r2
 800e1dc:	095b      	lsrs	r3, r3, #5
 800e1de:	2164      	movs	r1, #100	; 0x64
 800e1e0:	fb01 f303 	mul.w	r3, r1, r3
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	00db      	lsls	r3, r3, #3
 800e1e8:	3332      	adds	r3, #50	; 0x32
 800e1ea:	4a87      	ldr	r2, [pc, #540]	; (800e408 <UART_SetConfig+0x38c>)
 800e1ec:	fba2 2303 	umull	r2, r3, r2, r3
 800e1f0:	095b      	lsrs	r3, r3, #5
 800e1f2:	005b      	lsls	r3, r3, #1
 800e1f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e1f8:	441e      	add	r6, r3
 800e1fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f04f 0100 	mov.w	r1, #0
 800e202:	4602      	mov	r2, r0
 800e204:	460b      	mov	r3, r1
 800e206:	1894      	adds	r4, r2, r2
 800e208:	623c      	str	r4, [r7, #32]
 800e20a:	415b      	adcs	r3, r3
 800e20c:	627b      	str	r3, [r7, #36]	; 0x24
 800e20e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e212:	1812      	adds	r2, r2, r0
 800e214:	eb41 0303 	adc.w	r3, r1, r3
 800e218:	f04f 0400 	mov.w	r4, #0
 800e21c:	f04f 0500 	mov.w	r5, #0
 800e220:	00dd      	lsls	r5, r3, #3
 800e222:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e226:	00d4      	lsls	r4, r2, #3
 800e228:	4622      	mov	r2, r4
 800e22a:	462b      	mov	r3, r5
 800e22c:	1814      	adds	r4, r2, r0
 800e22e:	653c      	str	r4, [r7, #80]	; 0x50
 800e230:	414b      	adcs	r3, r1
 800e232:	657b      	str	r3, [r7, #84]	; 0x54
 800e234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	461a      	mov	r2, r3
 800e23a:	f04f 0300 	mov.w	r3, #0
 800e23e:	1891      	adds	r1, r2, r2
 800e240:	61b9      	str	r1, [r7, #24]
 800e242:	415b      	adcs	r3, r3
 800e244:	61fb      	str	r3, [r7, #28]
 800e246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e24a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e24e:	f7f2 fd33 	bl	8000cb8 <__aeabi_uldivmod>
 800e252:	4602      	mov	r2, r0
 800e254:	460b      	mov	r3, r1
 800e256:	4b6c      	ldr	r3, [pc, #432]	; (800e408 <UART_SetConfig+0x38c>)
 800e258:	fba3 1302 	umull	r1, r3, r3, r2
 800e25c:	095b      	lsrs	r3, r3, #5
 800e25e:	2164      	movs	r1, #100	; 0x64
 800e260:	fb01 f303 	mul.w	r3, r1, r3
 800e264:	1ad3      	subs	r3, r2, r3
 800e266:	00db      	lsls	r3, r3, #3
 800e268:	3332      	adds	r3, #50	; 0x32
 800e26a:	4a67      	ldr	r2, [pc, #412]	; (800e408 <UART_SetConfig+0x38c>)
 800e26c:	fba2 2303 	umull	r2, r3, r2, r3
 800e270:	095b      	lsrs	r3, r3, #5
 800e272:	f003 0207 	and.w	r2, r3, #7
 800e276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4432      	add	r2, r6
 800e27c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e27e:	e0b9      	b.n	800e3f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e282:	461c      	mov	r4, r3
 800e284:	f04f 0500 	mov.w	r5, #0
 800e288:	4622      	mov	r2, r4
 800e28a:	462b      	mov	r3, r5
 800e28c:	1891      	adds	r1, r2, r2
 800e28e:	6139      	str	r1, [r7, #16]
 800e290:	415b      	adcs	r3, r3
 800e292:	617b      	str	r3, [r7, #20]
 800e294:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e298:	1912      	adds	r2, r2, r4
 800e29a:	eb45 0303 	adc.w	r3, r5, r3
 800e29e:	f04f 0000 	mov.w	r0, #0
 800e2a2:	f04f 0100 	mov.w	r1, #0
 800e2a6:	00d9      	lsls	r1, r3, #3
 800e2a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e2ac:	00d0      	lsls	r0, r2, #3
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	eb12 0804 	adds.w	r8, r2, r4
 800e2b6:	eb43 0905 	adc.w	r9, r3, r5
 800e2ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f04f 0100 	mov.w	r1, #0
 800e2c4:	f04f 0200 	mov.w	r2, #0
 800e2c8:	f04f 0300 	mov.w	r3, #0
 800e2cc:	008b      	lsls	r3, r1, #2
 800e2ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e2d2:	0082      	lsls	r2, r0, #2
 800e2d4:	4640      	mov	r0, r8
 800e2d6:	4649      	mov	r1, r9
 800e2d8:	f7f2 fcee 	bl	8000cb8 <__aeabi_uldivmod>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	460b      	mov	r3, r1
 800e2e0:	4b49      	ldr	r3, [pc, #292]	; (800e408 <UART_SetConfig+0x38c>)
 800e2e2:	fba3 2302 	umull	r2, r3, r3, r2
 800e2e6:	095b      	lsrs	r3, r3, #5
 800e2e8:	011e      	lsls	r6, r3, #4
 800e2ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f04f 0100 	mov.w	r1, #0
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	1894      	adds	r4, r2, r2
 800e2f8:	60bc      	str	r4, [r7, #8]
 800e2fa:	415b      	adcs	r3, r3
 800e2fc:	60fb      	str	r3, [r7, #12]
 800e2fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e302:	1812      	adds	r2, r2, r0
 800e304:	eb41 0303 	adc.w	r3, r1, r3
 800e308:	f04f 0400 	mov.w	r4, #0
 800e30c:	f04f 0500 	mov.w	r5, #0
 800e310:	00dd      	lsls	r5, r3, #3
 800e312:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e316:	00d4      	lsls	r4, r2, #3
 800e318:	4622      	mov	r2, r4
 800e31a:	462b      	mov	r3, r5
 800e31c:	1814      	adds	r4, r2, r0
 800e31e:	64bc      	str	r4, [r7, #72]	; 0x48
 800e320:	414b      	adcs	r3, r1
 800e322:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	4618      	mov	r0, r3
 800e32a:	f04f 0100 	mov.w	r1, #0
 800e32e:	f04f 0200 	mov.w	r2, #0
 800e332:	f04f 0300 	mov.w	r3, #0
 800e336:	008b      	lsls	r3, r1, #2
 800e338:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e33c:	0082      	lsls	r2, r0, #2
 800e33e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800e342:	f7f2 fcb9 	bl	8000cb8 <__aeabi_uldivmod>
 800e346:	4602      	mov	r2, r0
 800e348:	460b      	mov	r3, r1
 800e34a:	4b2f      	ldr	r3, [pc, #188]	; (800e408 <UART_SetConfig+0x38c>)
 800e34c:	fba3 1302 	umull	r1, r3, r3, r2
 800e350:	095b      	lsrs	r3, r3, #5
 800e352:	2164      	movs	r1, #100	; 0x64
 800e354:	fb01 f303 	mul.w	r3, r1, r3
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	011b      	lsls	r3, r3, #4
 800e35c:	3332      	adds	r3, #50	; 0x32
 800e35e:	4a2a      	ldr	r2, [pc, #168]	; (800e408 <UART_SetConfig+0x38c>)
 800e360:	fba2 2303 	umull	r2, r3, r2, r3
 800e364:	095b      	lsrs	r3, r3, #5
 800e366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e36a:	441e      	add	r6, r3
 800e36c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e36e:	4618      	mov	r0, r3
 800e370:	f04f 0100 	mov.w	r1, #0
 800e374:	4602      	mov	r2, r0
 800e376:	460b      	mov	r3, r1
 800e378:	1894      	adds	r4, r2, r2
 800e37a:	603c      	str	r4, [r7, #0]
 800e37c:	415b      	adcs	r3, r3
 800e37e:	607b      	str	r3, [r7, #4]
 800e380:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e384:	1812      	adds	r2, r2, r0
 800e386:	eb41 0303 	adc.w	r3, r1, r3
 800e38a:	f04f 0400 	mov.w	r4, #0
 800e38e:	f04f 0500 	mov.w	r5, #0
 800e392:	00dd      	lsls	r5, r3, #3
 800e394:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e398:	00d4      	lsls	r4, r2, #3
 800e39a:	4622      	mov	r2, r4
 800e39c:	462b      	mov	r3, r5
 800e39e:	eb12 0a00 	adds.w	sl, r2, r0
 800e3a2:	eb43 0b01 	adc.w	fp, r3, r1
 800e3a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f04f 0100 	mov.w	r1, #0
 800e3b0:	f04f 0200 	mov.w	r2, #0
 800e3b4:	f04f 0300 	mov.w	r3, #0
 800e3b8:	008b      	lsls	r3, r1, #2
 800e3ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e3be:	0082      	lsls	r2, r0, #2
 800e3c0:	4650      	mov	r0, sl
 800e3c2:	4659      	mov	r1, fp
 800e3c4:	f7f2 fc78 	bl	8000cb8 <__aeabi_uldivmod>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	460b      	mov	r3, r1
 800e3cc:	4b0e      	ldr	r3, [pc, #56]	; (800e408 <UART_SetConfig+0x38c>)
 800e3ce:	fba3 1302 	umull	r1, r3, r3, r2
 800e3d2:	095b      	lsrs	r3, r3, #5
 800e3d4:	2164      	movs	r1, #100	; 0x64
 800e3d6:	fb01 f303 	mul.w	r3, r1, r3
 800e3da:	1ad3      	subs	r3, r2, r3
 800e3dc:	011b      	lsls	r3, r3, #4
 800e3de:	3332      	adds	r3, #50	; 0x32
 800e3e0:	4a09      	ldr	r2, [pc, #36]	; (800e408 <UART_SetConfig+0x38c>)
 800e3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3e6:	095b      	lsrs	r3, r3, #5
 800e3e8:	f003 020f 	and.w	r2, r3, #15
 800e3ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4432      	add	r2, r6
 800e3f2:	609a      	str	r2, [r3, #8]
}
 800e3f4:	bf00      	nop
 800e3f6:	377c      	adds	r7, #124	; 0x7c
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3fe:	bf00      	nop
 800e400:	40011000 	.word	0x40011000
 800e404:	40011400 	.word	0x40011400
 800e408:	51eb851f 	.word	0x51eb851f

0800e40c <atof>:
 800e40c:	2100      	movs	r1, #0
 800e40e:	f001 bd03 	b.w	800fe18 <strtod>

0800e412 <atoi>:
 800e412:	220a      	movs	r2, #10
 800e414:	2100      	movs	r1, #0
 800e416:	f001 bded 	b.w	800fff4 <strtol>
	...

0800e41c <__errno>:
 800e41c:	4b01      	ldr	r3, [pc, #4]	; (800e424 <__errno+0x8>)
 800e41e:	6818      	ldr	r0, [r3, #0]
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop
 800e424:	20000040 	.word	0x20000040

0800e428 <__libc_init_array>:
 800e428:	b570      	push	{r4, r5, r6, lr}
 800e42a:	4d0d      	ldr	r5, [pc, #52]	; (800e460 <__libc_init_array+0x38>)
 800e42c:	4c0d      	ldr	r4, [pc, #52]	; (800e464 <__libc_init_array+0x3c>)
 800e42e:	1b64      	subs	r4, r4, r5
 800e430:	10a4      	asrs	r4, r4, #2
 800e432:	2600      	movs	r6, #0
 800e434:	42a6      	cmp	r6, r4
 800e436:	d109      	bne.n	800e44c <__libc_init_array+0x24>
 800e438:	4d0b      	ldr	r5, [pc, #44]	; (800e468 <__libc_init_array+0x40>)
 800e43a:	4c0c      	ldr	r4, [pc, #48]	; (800e46c <__libc_init_array+0x44>)
 800e43c:	f004 fcb6 	bl	8012dac <_init>
 800e440:	1b64      	subs	r4, r4, r5
 800e442:	10a4      	asrs	r4, r4, #2
 800e444:	2600      	movs	r6, #0
 800e446:	42a6      	cmp	r6, r4
 800e448:	d105      	bne.n	800e456 <__libc_init_array+0x2e>
 800e44a:	bd70      	pop	{r4, r5, r6, pc}
 800e44c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e450:	4798      	blx	r3
 800e452:	3601      	adds	r6, #1
 800e454:	e7ee      	b.n	800e434 <__libc_init_array+0xc>
 800e456:	f855 3b04 	ldr.w	r3, [r5], #4
 800e45a:	4798      	blx	r3
 800e45c:	3601      	adds	r6, #1
 800e45e:	e7f2      	b.n	800e446 <__libc_init_array+0x1e>
 800e460:	08026bd0 	.word	0x08026bd0
 800e464:	08026bd0 	.word	0x08026bd0
 800e468:	08026bd0 	.word	0x08026bd0
 800e46c:	08026bd4 	.word	0x08026bd4

0800e470 <memset>:
 800e470:	4402      	add	r2, r0
 800e472:	4603      	mov	r3, r0
 800e474:	4293      	cmp	r3, r2
 800e476:	d100      	bne.n	800e47a <memset+0xa>
 800e478:	4770      	bx	lr
 800e47a:	f803 1b01 	strb.w	r1, [r3], #1
 800e47e:	e7f9      	b.n	800e474 <memset+0x4>

0800e480 <__cvt>:
 800e480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e484:	ec55 4b10 	vmov	r4, r5, d0
 800e488:	2d00      	cmp	r5, #0
 800e48a:	460e      	mov	r6, r1
 800e48c:	4619      	mov	r1, r3
 800e48e:	462b      	mov	r3, r5
 800e490:	bfbb      	ittet	lt
 800e492:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e496:	461d      	movlt	r5, r3
 800e498:	2300      	movge	r3, #0
 800e49a:	232d      	movlt	r3, #45	; 0x2d
 800e49c:	700b      	strb	r3, [r1, #0]
 800e49e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e4a4:	4691      	mov	r9, r2
 800e4a6:	f023 0820 	bic.w	r8, r3, #32
 800e4aa:	bfbc      	itt	lt
 800e4ac:	4622      	movlt	r2, r4
 800e4ae:	4614      	movlt	r4, r2
 800e4b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e4b4:	d005      	beq.n	800e4c2 <__cvt+0x42>
 800e4b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e4ba:	d100      	bne.n	800e4be <__cvt+0x3e>
 800e4bc:	3601      	adds	r6, #1
 800e4be:	2102      	movs	r1, #2
 800e4c0:	e000      	b.n	800e4c4 <__cvt+0x44>
 800e4c2:	2103      	movs	r1, #3
 800e4c4:	ab03      	add	r3, sp, #12
 800e4c6:	9301      	str	r3, [sp, #4]
 800e4c8:	ab02      	add	r3, sp, #8
 800e4ca:	9300      	str	r3, [sp, #0]
 800e4cc:	ec45 4b10 	vmov	d0, r4, r5
 800e4d0:	4653      	mov	r3, sl
 800e4d2:	4632      	mov	r2, r6
 800e4d4:	f001 fe44 	bl	8010160 <_dtoa_r>
 800e4d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e4dc:	4607      	mov	r7, r0
 800e4de:	d102      	bne.n	800e4e6 <__cvt+0x66>
 800e4e0:	f019 0f01 	tst.w	r9, #1
 800e4e4:	d022      	beq.n	800e52c <__cvt+0xac>
 800e4e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e4ea:	eb07 0906 	add.w	r9, r7, r6
 800e4ee:	d110      	bne.n	800e512 <__cvt+0x92>
 800e4f0:	783b      	ldrb	r3, [r7, #0]
 800e4f2:	2b30      	cmp	r3, #48	; 0x30
 800e4f4:	d10a      	bne.n	800e50c <__cvt+0x8c>
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	4629      	mov	r1, r5
 800e4fe:	f7f2 fafb 	bl	8000af8 <__aeabi_dcmpeq>
 800e502:	b918      	cbnz	r0, 800e50c <__cvt+0x8c>
 800e504:	f1c6 0601 	rsb	r6, r6, #1
 800e508:	f8ca 6000 	str.w	r6, [sl]
 800e50c:	f8da 3000 	ldr.w	r3, [sl]
 800e510:	4499      	add	r9, r3
 800e512:	2200      	movs	r2, #0
 800e514:	2300      	movs	r3, #0
 800e516:	4620      	mov	r0, r4
 800e518:	4629      	mov	r1, r5
 800e51a:	f7f2 faed 	bl	8000af8 <__aeabi_dcmpeq>
 800e51e:	b108      	cbz	r0, 800e524 <__cvt+0xa4>
 800e520:	f8cd 900c 	str.w	r9, [sp, #12]
 800e524:	2230      	movs	r2, #48	; 0x30
 800e526:	9b03      	ldr	r3, [sp, #12]
 800e528:	454b      	cmp	r3, r9
 800e52a:	d307      	bcc.n	800e53c <__cvt+0xbc>
 800e52c:	9b03      	ldr	r3, [sp, #12]
 800e52e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e530:	1bdb      	subs	r3, r3, r7
 800e532:	4638      	mov	r0, r7
 800e534:	6013      	str	r3, [r2, #0]
 800e536:	b004      	add	sp, #16
 800e538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e53c:	1c59      	adds	r1, r3, #1
 800e53e:	9103      	str	r1, [sp, #12]
 800e540:	701a      	strb	r2, [r3, #0]
 800e542:	e7f0      	b.n	800e526 <__cvt+0xa6>

0800e544 <__exponent>:
 800e544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e546:	4603      	mov	r3, r0
 800e548:	2900      	cmp	r1, #0
 800e54a:	bfb8      	it	lt
 800e54c:	4249      	neglt	r1, r1
 800e54e:	f803 2b02 	strb.w	r2, [r3], #2
 800e552:	bfb4      	ite	lt
 800e554:	222d      	movlt	r2, #45	; 0x2d
 800e556:	222b      	movge	r2, #43	; 0x2b
 800e558:	2909      	cmp	r1, #9
 800e55a:	7042      	strb	r2, [r0, #1]
 800e55c:	dd2a      	ble.n	800e5b4 <__exponent+0x70>
 800e55e:	f10d 0407 	add.w	r4, sp, #7
 800e562:	46a4      	mov	ip, r4
 800e564:	270a      	movs	r7, #10
 800e566:	46a6      	mov	lr, r4
 800e568:	460a      	mov	r2, r1
 800e56a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e56e:	fb07 1516 	mls	r5, r7, r6, r1
 800e572:	3530      	adds	r5, #48	; 0x30
 800e574:	2a63      	cmp	r2, #99	; 0x63
 800e576:	f104 34ff 	add.w	r4, r4, #4294967295
 800e57a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e57e:	4631      	mov	r1, r6
 800e580:	dcf1      	bgt.n	800e566 <__exponent+0x22>
 800e582:	3130      	adds	r1, #48	; 0x30
 800e584:	f1ae 0502 	sub.w	r5, lr, #2
 800e588:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e58c:	1c44      	adds	r4, r0, #1
 800e58e:	4629      	mov	r1, r5
 800e590:	4561      	cmp	r1, ip
 800e592:	d30a      	bcc.n	800e5aa <__exponent+0x66>
 800e594:	f10d 0209 	add.w	r2, sp, #9
 800e598:	eba2 020e 	sub.w	r2, r2, lr
 800e59c:	4565      	cmp	r5, ip
 800e59e:	bf88      	it	hi
 800e5a0:	2200      	movhi	r2, #0
 800e5a2:	4413      	add	r3, r2
 800e5a4:	1a18      	subs	r0, r3, r0
 800e5a6:	b003      	add	sp, #12
 800e5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e5b2:	e7ed      	b.n	800e590 <__exponent+0x4c>
 800e5b4:	2330      	movs	r3, #48	; 0x30
 800e5b6:	3130      	adds	r1, #48	; 0x30
 800e5b8:	7083      	strb	r3, [r0, #2]
 800e5ba:	70c1      	strb	r1, [r0, #3]
 800e5bc:	1d03      	adds	r3, r0, #4
 800e5be:	e7f1      	b.n	800e5a4 <__exponent+0x60>

0800e5c0 <_printf_float>:
 800e5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c4:	ed2d 8b02 	vpush	{d8}
 800e5c8:	b08d      	sub	sp, #52	; 0x34
 800e5ca:	460c      	mov	r4, r1
 800e5cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e5d0:	4616      	mov	r6, r2
 800e5d2:	461f      	mov	r7, r3
 800e5d4:	4605      	mov	r5, r0
 800e5d6:	f002 ff31 	bl	801143c <_localeconv_r>
 800e5da:	f8d0 a000 	ldr.w	sl, [r0]
 800e5de:	4650      	mov	r0, sl
 800e5e0:	f7f1 fe08 	bl	80001f4 <strlen>
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	930a      	str	r3, [sp, #40]	; 0x28
 800e5e8:	6823      	ldr	r3, [r4, #0]
 800e5ea:	9305      	str	r3, [sp, #20]
 800e5ec:	f8d8 3000 	ldr.w	r3, [r8]
 800e5f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e5f4:	3307      	adds	r3, #7
 800e5f6:	f023 0307 	bic.w	r3, r3, #7
 800e5fa:	f103 0208 	add.w	r2, r3, #8
 800e5fe:	f8c8 2000 	str.w	r2, [r8]
 800e602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e606:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e60a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e60e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e612:	9307      	str	r3, [sp, #28]
 800e614:	f8cd 8018 	str.w	r8, [sp, #24]
 800e618:	ee08 0a10 	vmov	s16, r0
 800e61c:	4b9f      	ldr	r3, [pc, #636]	; (800e89c <_printf_float+0x2dc>)
 800e61e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e622:	f04f 32ff 	mov.w	r2, #4294967295
 800e626:	f7f2 fa99 	bl	8000b5c <__aeabi_dcmpun>
 800e62a:	bb88      	cbnz	r0, 800e690 <_printf_float+0xd0>
 800e62c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e630:	4b9a      	ldr	r3, [pc, #616]	; (800e89c <_printf_float+0x2dc>)
 800e632:	f04f 32ff 	mov.w	r2, #4294967295
 800e636:	f7f2 fa73 	bl	8000b20 <__aeabi_dcmple>
 800e63a:	bb48      	cbnz	r0, 800e690 <_printf_float+0xd0>
 800e63c:	2200      	movs	r2, #0
 800e63e:	2300      	movs	r3, #0
 800e640:	4640      	mov	r0, r8
 800e642:	4649      	mov	r1, r9
 800e644:	f7f2 fa62 	bl	8000b0c <__aeabi_dcmplt>
 800e648:	b110      	cbz	r0, 800e650 <_printf_float+0x90>
 800e64a:	232d      	movs	r3, #45	; 0x2d
 800e64c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e650:	4b93      	ldr	r3, [pc, #588]	; (800e8a0 <_printf_float+0x2e0>)
 800e652:	4894      	ldr	r0, [pc, #592]	; (800e8a4 <_printf_float+0x2e4>)
 800e654:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e658:	bf94      	ite	ls
 800e65a:	4698      	movls	r8, r3
 800e65c:	4680      	movhi	r8, r0
 800e65e:	2303      	movs	r3, #3
 800e660:	6123      	str	r3, [r4, #16]
 800e662:	9b05      	ldr	r3, [sp, #20]
 800e664:	f023 0204 	bic.w	r2, r3, #4
 800e668:	6022      	str	r2, [r4, #0]
 800e66a:	f04f 0900 	mov.w	r9, #0
 800e66e:	9700      	str	r7, [sp, #0]
 800e670:	4633      	mov	r3, r6
 800e672:	aa0b      	add	r2, sp, #44	; 0x2c
 800e674:	4621      	mov	r1, r4
 800e676:	4628      	mov	r0, r5
 800e678:	f000 f9d8 	bl	800ea2c <_printf_common>
 800e67c:	3001      	adds	r0, #1
 800e67e:	f040 8090 	bne.w	800e7a2 <_printf_float+0x1e2>
 800e682:	f04f 30ff 	mov.w	r0, #4294967295
 800e686:	b00d      	add	sp, #52	; 0x34
 800e688:	ecbd 8b02 	vpop	{d8}
 800e68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e690:	4642      	mov	r2, r8
 800e692:	464b      	mov	r3, r9
 800e694:	4640      	mov	r0, r8
 800e696:	4649      	mov	r1, r9
 800e698:	f7f2 fa60 	bl	8000b5c <__aeabi_dcmpun>
 800e69c:	b140      	cbz	r0, 800e6b0 <_printf_float+0xf0>
 800e69e:	464b      	mov	r3, r9
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	bfbc      	itt	lt
 800e6a4:	232d      	movlt	r3, #45	; 0x2d
 800e6a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e6aa:	487f      	ldr	r0, [pc, #508]	; (800e8a8 <_printf_float+0x2e8>)
 800e6ac:	4b7f      	ldr	r3, [pc, #508]	; (800e8ac <_printf_float+0x2ec>)
 800e6ae:	e7d1      	b.n	800e654 <_printf_float+0x94>
 800e6b0:	6863      	ldr	r3, [r4, #4]
 800e6b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e6b6:	9206      	str	r2, [sp, #24]
 800e6b8:	1c5a      	adds	r2, r3, #1
 800e6ba:	d13f      	bne.n	800e73c <_printf_float+0x17c>
 800e6bc:	2306      	movs	r3, #6
 800e6be:	6063      	str	r3, [r4, #4]
 800e6c0:	9b05      	ldr	r3, [sp, #20]
 800e6c2:	6861      	ldr	r1, [r4, #4]
 800e6c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	9303      	str	r3, [sp, #12]
 800e6cc:	ab0a      	add	r3, sp, #40	; 0x28
 800e6ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e6d2:	ab09      	add	r3, sp, #36	; 0x24
 800e6d4:	ec49 8b10 	vmov	d0, r8, r9
 800e6d8:	9300      	str	r3, [sp, #0]
 800e6da:	6022      	str	r2, [r4, #0]
 800e6dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	f7ff fecd 	bl	800e480 <__cvt>
 800e6e6:	9b06      	ldr	r3, [sp, #24]
 800e6e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6ea:	2b47      	cmp	r3, #71	; 0x47
 800e6ec:	4680      	mov	r8, r0
 800e6ee:	d108      	bne.n	800e702 <_printf_float+0x142>
 800e6f0:	1cc8      	adds	r0, r1, #3
 800e6f2:	db02      	blt.n	800e6fa <_printf_float+0x13a>
 800e6f4:	6863      	ldr	r3, [r4, #4]
 800e6f6:	4299      	cmp	r1, r3
 800e6f8:	dd41      	ble.n	800e77e <_printf_float+0x1be>
 800e6fa:	f1ab 0b02 	sub.w	fp, fp, #2
 800e6fe:	fa5f fb8b 	uxtb.w	fp, fp
 800e702:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e706:	d820      	bhi.n	800e74a <_printf_float+0x18a>
 800e708:	3901      	subs	r1, #1
 800e70a:	465a      	mov	r2, fp
 800e70c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e710:	9109      	str	r1, [sp, #36]	; 0x24
 800e712:	f7ff ff17 	bl	800e544 <__exponent>
 800e716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e718:	1813      	adds	r3, r2, r0
 800e71a:	2a01      	cmp	r2, #1
 800e71c:	4681      	mov	r9, r0
 800e71e:	6123      	str	r3, [r4, #16]
 800e720:	dc02      	bgt.n	800e728 <_printf_float+0x168>
 800e722:	6822      	ldr	r2, [r4, #0]
 800e724:	07d2      	lsls	r2, r2, #31
 800e726:	d501      	bpl.n	800e72c <_printf_float+0x16c>
 800e728:	3301      	adds	r3, #1
 800e72a:	6123      	str	r3, [r4, #16]
 800e72c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e730:	2b00      	cmp	r3, #0
 800e732:	d09c      	beq.n	800e66e <_printf_float+0xae>
 800e734:	232d      	movs	r3, #45	; 0x2d
 800e736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e73a:	e798      	b.n	800e66e <_printf_float+0xae>
 800e73c:	9a06      	ldr	r2, [sp, #24]
 800e73e:	2a47      	cmp	r2, #71	; 0x47
 800e740:	d1be      	bne.n	800e6c0 <_printf_float+0x100>
 800e742:	2b00      	cmp	r3, #0
 800e744:	d1bc      	bne.n	800e6c0 <_printf_float+0x100>
 800e746:	2301      	movs	r3, #1
 800e748:	e7b9      	b.n	800e6be <_printf_float+0xfe>
 800e74a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e74e:	d118      	bne.n	800e782 <_printf_float+0x1c2>
 800e750:	2900      	cmp	r1, #0
 800e752:	6863      	ldr	r3, [r4, #4]
 800e754:	dd0b      	ble.n	800e76e <_printf_float+0x1ae>
 800e756:	6121      	str	r1, [r4, #16]
 800e758:	b913      	cbnz	r3, 800e760 <_printf_float+0x1a0>
 800e75a:	6822      	ldr	r2, [r4, #0]
 800e75c:	07d0      	lsls	r0, r2, #31
 800e75e:	d502      	bpl.n	800e766 <_printf_float+0x1a6>
 800e760:	3301      	adds	r3, #1
 800e762:	440b      	add	r3, r1
 800e764:	6123      	str	r3, [r4, #16]
 800e766:	65a1      	str	r1, [r4, #88]	; 0x58
 800e768:	f04f 0900 	mov.w	r9, #0
 800e76c:	e7de      	b.n	800e72c <_printf_float+0x16c>
 800e76e:	b913      	cbnz	r3, 800e776 <_printf_float+0x1b6>
 800e770:	6822      	ldr	r2, [r4, #0]
 800e772:	07d2      	lsls	r2, r2, #31
 800e774:	d501      	bpl.n	800e77a <_printf_float+0x1ba>
 800e776:	3302      	adds	r3, #2
 800e778:	e7f4      	b.n	800e764 <_printf_float+0x1a4>
 800e77a:	2301      	movs	r3, #1
 800e77c:	e7f2      	b.n	800e764 <_printf_float+0x1a4>
 800e77e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e784:	4299      	cmp	r1, r3
 800e786:	db05      	blt.n	800e794 <_printf_float+0x1d4>
 800e788:	6823      	ldr	r3, [r4, #0]
 800e78a:	6121      	str	r1, [r4, #16]
 800e78c:	07d8      	lsls	r0, r3, #31
 800e78e:	d5ea      	bpl.n	800e766 <_printf_float+0x1a6>
 800e790:	1c4b      	adds	r3, r1, #1
 800e792:	e7e7      	b.n	800e764 <_printf_float+0x1a4>
 800e794:	2900      	cmp	r1, #0
 800e796:	bfd4      	ite	le
 800e798:	f1c1 0202 	rsble	r2, r1, #2
 800e79c:	2201      	movgt	r2, #1
 800e79e:	4413      	add	r3, r2
 800e7a0:	e7e0      	b.n	800e764 <_printf_float+0x1a4>
 800e7a2:	6823      	ldr	r3, [r4, #0]
 800e7a4:	055a      	lsls	r2, r3, #21
 800e7a6:	d407      	bmi.n	800e7b8 <_printf_float+0x1f8>
 800e7a8:	6923      	ldr	r3, [r4, #16]
 800e7aa:	4642      	mov	r2, r8
 800e7ac:	4631      	mov	r1, r6
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	47b8      	blx	r7
 800e7b2:	3001      	adds	r0, #1
 800e7b4:	d12c      	bne.n	800e810 <_printf_float+0x250>
 800e7b6:	e764      	b.n	800e682 <_printf_float+0xc2>
 800e7b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e7bc:	f240 80e0 	bls.w	800e980 <_printf_float+0x3c0>
 800e7c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	f7f2 f996 	bl	8000af8 <__aeabi_dcmpeq>
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	d034      	beq.n	800e83a <_printf_float+0x27a>
 800e7d0:	4a37      	ldr	r2, [pc, #220]	; (800e8b0 <_printf_float+0x2f0>)
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	4631      	mov	r1, r6
 800e7d6:	4628      	mov	r0, r5
 800e7d8:	47b8      	blx	r7
 800e7da:	3001      	adds	r0, #1
 800e7dc:	f43f af51 	beq.w	800e682 <_printf_float+0xc2>
 800e7e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	db02      	blt.n	800e7ee <_printf_float+0x22e>
 800e7e8:	6823      	ldr	r3, [r4, #0]
 800e7ea:	07d8      	lsls	r0, r3, #31
 800e7ec:	d510      	bpl.n	800e810 <_printf_float+0x250>
 800e7ee:	ee18 3a10 	vmov	r3, s16
 800e7f2:	4652      	mov	r2, sl
 800e7f4:	4631      	mov	r1, r6
 800e7f6:	4628      	mov	r0, r5
 800e7f8:	47b8      	blx	r7
 800e7fa:	3001      	adds	r0, #1
 800e7fc:	f43f af41 	beq.w	800e682 <_printf_float+0xc2>
 800e800:	f04f 0800 	mov.w	r8, #0
 800e804:	f104 091a 	add.w	r9, r4, #26
 800e808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e80a:	3b01      	subs	r3, #1
 800e80c:	4543      	cmp	r3, r8
 800e80e:	dc09      	bgt.n	800e824 <_printf_float+0x264>
 800e810:	6823      	ldr	r3, [r4, #0]
 800e812:	079b      	lsls	r3, r3, #30
 800e814:	f100 8105 	bmi.w	800ea22 <_printf_float+0x462>
 800e818:	68e0      	ldr	r0, [r4, #12]
 800e81a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e81c:	4298      	cmp	r0, r3
 800e81e:	bfb8      	it	lt
 800e820:	4618      	movlt	r0, r3
 800e822:	e730      	b.n	800e686 <_printf_float+0xc6>
 800e824:	2301      	movs	r3, #1
 800e826:	464a      	mov	r2, r9
 800e828:	4631      	mov	r1, r6
 800e82a:	4628      	mov	r0, r5
 800e82c:	47b8      	blx	r7
 800e82e:	3001      	adds	r0, #1
 800e830:	f43f af27 	beq.w	800e682 <_printf_float+0xc2>
 800e834:	f108 0801 	add.w	r8, r8, #1
 800e838:	e7e6      	b.n	800e808 <_printf_float+0x248>
 800e83a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	dc39      	bgt.n	800e8b4 <_printf_float+0x2f4>
 800e840:	4a1b      	ldr	r2, [pc, #108]	; (800e8b0 <_printf_float+0x2f0>)
 800e842:	2301      	movs	r3, #1
 800e844:	4631      	mov	r1, r6
 800e846:	4628      	mov	r0, r5
 800e848:	47b8      	blx	r7
 800e84a:	3001      	adds	r0, #1
 800e84c:	f43f af19 	beq.w	800e682 <_printf_float+0xc2>
 800e850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e854:	4313      	orrs	r3, r2
 800e856:	d102      	bne.n	800e85e <_printf_float+0x29e>
 800e858:	6823      	ldr	r3, [r4, #0]
 800e85a:	07d9      	lsls	r1, r3, #31
 800e85c:	d5d8      	bpl.n	800e810 <_printf_float+0x250>
 800e85e:	ee18 3a10 	vmov	r3, s16
 800e862:	4652      	mov	r2, sl
 800e864:	4631      	mov	r1, r6
 800e866:	4628      	mov	r0, r5
 800e868:	47b8      	blx	r7
 800e86a:	3001      	adds	r0, #1
 800e86c:	f43f af09 	beq.w	800e682 <_printf_float+0xc2>
 800e870:	f04f 0900 	mov.w	r9, #0
 800e874:	f104 0a1a 	add.w	sl, r4, #26
 800e878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e87a:	425b      	negs	r3, r3
 800e87c:	454b      	cmp	r3, r9
 800e87e:	dc01      	bgt.n	800e884 <_printf_float+0x2c4>
 800e880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e882:	e792      	b.n	800e7aa <_printf_float+0x1ea>
 800e884:	2301      	movs	r3, #1
 800e886:	4652      	mov	r2, sl
 800e888:	4631      	mov	r1, r6
 800e88a:	4628      	mov	r0, r5
 800e88c:	47b8      	blx	r7
 800e88e:	3001      	adds	r0, #1
 800e890:	f43f aef7 	beq.w	800e682 <_printf_float+0xc2>
 800e894:	f109 0901 	add.w	r9, r9, #1
 800e898:	e7ee      	b.n	800e878 <_printf_float+0x2b8>
 800e89a:	bf00      	nop
 800e89c:	7fefffff 	.word	0x7fefffff
 800e8a0:	080266bc 	.word	0x080266bc
 800e8a4:	080266c0 	.word	0x080266c0
 800e8a8:	080266c8 	.word	0x080266c8
 800e8ac:	080266c4 	.word	0x080266c4
 800e8b0:	080266cc 	.word	0x080266cc
 800e8b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	bfa8      	it	ge
 800e8bc:	461a      	movge	r2, r3
 800e8be:	2a00      	cmp	r2, #0
 800e8c0:	4691      	mov	r9, r2
 800e8c2:	dc37      	bgt.n	800e934 <_printf_float+0x374>
 800e8c4:	f04f 0b00 	mov.w	fp, #0
 800e8c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e8cc:	f104 021a 	add.w	r2, r4, #26
 800e8d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e8d2:	9305      	str	r3, [sp, #20]
 800e8d4:	eba3 0309 	sub.w	r3, r3, r9
 800e8d8:	455b      	cmp	r3, fp
 800e8da:	dc33      	bgt.n	800e944 <_printf_float+0x384>
 800e8dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	db3b      	blt.n	800e95c <_printf_float+0x39c>
 800e8e4:	6823      	ldr	r3, [r4, #0]
 800e8e6:	07da      	lsls	r2, r3, #31
 800e8e8:	d438      	bmi.n	800e95c <_printf_float+0x39c>
 800e8ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8ec:	9b05      	ldr	r3, [sp, #20]
 800e8ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e8f0:	1ad3      	subs	r3, r2, r3
 800e8f2:	eba2 0901 	sub.w	r9, r2, r1
 800e8f6:	4599      	cmp	r9, r3
 800e8f8:	bfa8      	it	ge
 800e8fa:	4699      	movge	r9, r3
 800e8fc:	f1b9 0f00 	cmp.w	r9, #0
 800e900:	dc35      	bgt.n	800e96e <_printf_float+0x3ae>
 800e902:	f04f 0800 	mov.w	r8, #0
 800e906:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e90a:	f104 0a1a 	add.w	sl, r4, #26
 800e90e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e912:	1a9b      	subs	r3, r3, r2
 800e914:	eba3 0309 	sub.w	r3, r3, r9
 800e918:	4543      	cmp	r3, r8
 800e91a:	f77f af79 	ble.w	800e810 <_printf_float+0x250>
 800e91e:	2301      	movs	r3, #1
 800e920:	4652      	mov	r2, sl
 800e922:	4631      	mov	r1, r6
 800e924:	4628      	mov	r0, r5
 800e926:	47b8      	blx	r7
 800e928:	3001      	adds	r0, #1
 800e92a:	f43f aeaa 	beq.w	800e682 <_printf_float+0xc2>
 800e92e:	f108 0801 	add.w	r8, r8, #1
 800e932:	e7ec      	b.n	800e90e <_printf_float+0x34e>
 800e934:	4613      	mov	r3, r2
 800e936:	4631      	mov	r1, r6
 800e938:	4642      	mov	r2, r8
 800e93a:	4628      	mov	r0, r5
 800e93c:	47b8      	blx	r7
 800e93e:	3001      	adds	r0, #1
 800e940:	d1c0      	bne.n	800e8c4 <_printf_float+0x304>
 800e942:	e69e      	b.n	800e682 <_printf_float+0xc2>
 800e944:	2301      	movs	r3, #1
 800e946:	4631      	mov	r1, r6
 800e948:	4628      	mov	r0, r5
 800e94a:	9205      	str	r2, [sp, #20]
 800e94c:	47b8      	blx	r7
 800e94e:	3001      	adds	r0, #1
 800e950:	f43f ae97 	beq.w	800e682 <_printf_float+0xc2>
 800e954:	9a05      	ldr	r2, [sp, #20]
 800e956:	f10b 0b01 	add.w	fp, fp, #1
 800e95a:	e7b9      	b.n	800e8d0 <_printf_float+0x310>
 800e95c:	ee18 3a10 	vmov	r3, s16
 800e960:	4652      	mov	r2, sl
 800e962:	4631      	mov	r1, r6
 800e964:	4628      	mov	r0, r5
 800e966:	47b8      	blx	r7
 800e968:	3001      	adds	r0, #1
 800e96a:	d1be      	bne.n	800e8ea <_printf_float+0x32a>
 800e96c:	e689      	b.n	800e682 <_printf_float+0xc2>
 800e96e:	9a05      	ldr	r2, [sp, #20]
 800e970:	464b      	mov	r3, r9
 800e972:	4442      	add	r2, r8
 800e974:	4631      	mov	r1, r6
 800e976:	4628      	mov	r0, r5
 800e978:	47b8      	blx	r7
 800e97a:	3001      	adds	r0, #1
 800e97c:	d1c1      	bne.n	800e902 <_printf_float+0x342>
 800e97e:	e680      	b.n	800e682 <_printf_float+0xc2>
 800e980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e982:	2a01      	cmp	r2, #1
 800e984:	dc01      	bgt.n	800e98a <_printf_float+0x3ca>
 800e986:	07db      	lsls	r3, r3, #31
 800e988:	d538      	bpl.n	800e9fc <_printf_float+0x43c>
 800e98a:	2301      	movs	r3, #1
 800e98c:	4642      	mov	r2, r8
 800e98e:	4631      	mov	r1, r6
 800e990:	4628      	mov	r0, r5
 800e992:	47b8      	blx	r7
 800e994:	3001      	adds	r0, #1
 800e996:	f43f ae74 	beq.w	800e682 <_printf_float+0xc2>
 800e99a:	ee18 3a10 	vmov	r3, s16
 800e99e:	4652      	mov	r2, sl
 800e9a0:	4631      	mov	r1, r6
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	47b8      	blx	r7
 800e9a6:	3001      	adds	r0, #1
 800e9a8:	f43f ae6b 	beq.w	800e682 <_printf_float+0xc2>
 800e9ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	f7f2 f8a0 	bl	8000af8 <__aeabi_dcmpeq>
 800e9b8:	b9d8      	cbnz	r0, 800e9f2 <_printf_float+0x432>
 800e9ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9bc:	f108 0201 	add.w	r2, r8, #1
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	4631      	mov	r1, r6
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	47b8      	blx	r7
 800e9c8:	3001      	adds	r0, #1
 800e9ca:	d10e      	bne.n	800e9ea <_printf_float+0x42a>
 800e9cc:	e659      	b.n	800e682 <_printf_float+0xc2>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	4652      	mov	r2, sl
 800e9d2:	4631      	mov	r1, r6
 800e9d4:	4628      	mov	r0, r5
 800e9d6:	47b8      	blx	r7
 800e9d8:	3001      	adds	r0, #1
 800e9da:	f43f ae52 	beq.w	800e682 <_printf_float+0xc2>
 800e9de:	f108 0801 	add.w	r8, r8, #1
 800e9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9e4:	3b01      	subs	r3, #1
 800e9e6:	4543      	cmp	r3, r8
 800e9e8:	dcf1      	bgt.n	800e9ce <_printf_float+0x40e>
 800e9ea:	464b      	mov	r3, r9
 800e9ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e9f0:	e6dc      	b.n	800e7ac <_printf_float+0x1ec>
 800e9f2:	f04f 0800 	mov.w	r8, #0
 800e9f6:	f104 0a1a 	add.w	sl, r4, #26
 800e9fa:	e7f2      	b.n	800e9e2 <_printf_float+0x422>
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	4642      	mov	r2, r8
 800ea00:	e7df      	b.n	800e9c2 <_printf_float+0x402>
 800ea02:	2301      	movs	r3, #1
 800ea04:	464a      	mov	r2, r9
 800ea06:	4631      	mov	r1, r6
 800ea08:	4628      	mov	r0, r5
 800ea0a:	47b8      	blx	r7
 800ea0c:	3001      	adds	r0, #1
 800ea0e:	f43f ae38 	beq.w	800e682 <_printf_float+0xc2>
 800ea12:	f108 0801 	add.w	r8, r8, #1
 800ea16:	68e3      	ldr	r3, [r4, #12]
 800ea18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea1a:	1a5b      	subs	r3, r3, r1
 800ea1c:	4543      	cmp	r3, r8
 800ea1e:	dcf0      	bgt.n	800ea02 <_printf_float+0x442>
 800ea20:	e6fa      	b.n	800e818 <_printf_float+0x258>
 800ea22:	f04f 0800 	mov.w	r8, #0
 800ea26:	f104 0919 	add.w	r9, r4, #25
 800ea2a:	e7f4      	b.n	800ea16 <_printf_float+0x456>

0800ea2c <_printf_common>:
 800ea2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea30:	4616      	mov	r6, r2
 800ea32:	4699      	mov	r9, r3
 800ea34:	688a      	ldr	r2, [r1, #8]
 800ea36:	690b      	ldr	r3, [r1, #16]
 800ea38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	bfb8      	it	lt
 800ea40:	4613      	movlt	r3, r2
 800ea42:	6033      	str	r3, [r6, #0]
 800ea44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea48:	4607      	mov	r7, r0
 800ea4a:	460c      	mov	r4, r1
 800ea4c:	b10a      	cbz	r2, 800ea52 <_printf_common+0x26>
 800ea4e:	3301      	adds	r3, #1
 800ea50:	6033      	str	r3, [r6, #0]
 800ea52:	6823      	ldr	r3, [r4, #0]
 800ea54:	0699      	lsls	r1, r3, #26
 800ea56:	bf42      	ittt	mi
 800ea58:	6833      	ldrmi	r3, [r6, #0]
 800ea5a:	3302      	addmi	r3, #2
 800ea5c:	6033      	strmi	r3, [r6, #0]
 800ea5e:	6825      	ldr	r5, [r4, #0]
 800ea60:	f015 0506 	ands.w	r5, r5, #6
 800ea64:	d106      	bne.n	800ea74 <_printf_common+0x48>
 800ea66:	f104 0a19 	add.w	sl, r4, #25
 800ea6a:	68e3      	ldr	r3, [r4, #12]
 800ea6c:	6832      	ldr	r2, [r6, #0]
 800ea6e:	1a9b      	subs	r3, r3, r2
 800ea70:	42ab      	cmp	r3, r5
 800ea72:	dc26      	bgt.n	800eac2 <_printf_common+0x96>
 800ea74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea78:	1e13      	subs	r3, r2, #0
 800ea7a:	6822      	ldr	r2, [r4, #0]
 800ea7c:	bf18      	it	ne
 800ea7e:	2301      	movne	r3, #1
 800ea80:	0692      	lsls	r2, r2, #26
 800ea82:	d42b      	bmi.n	800eadc <_printf_common+0xb0>
 800ea84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea88:	4649      	mov	r1, r9
 800ea8a:	4638      	mov	r0, r7
 800ea8c:	47c0      	blx	r8
 800ea8e:	3001      	adds	r0, #1
 800ea90:	d01e      	beq.n	800ead0 <_printf_common+0xa4>
 800ea92:	6823      	ldr	r3, [r4, #0]
 800ea94:	68e5      	ldr	r5, [r4, #12]
 800ea96:	6832      	ldr	r2, [r6, #0]
 800ea98:	f003 0306 	and.w	r3, r3, #6
 800ea9c:	2b04      	cmp	r3, #4
 800ea9e:	bf08      	it	eq
 800eaa0:	1aad      	subeq	r5, r5, r2
 800eaa2:	68a3      	ldr	r3, [r4, #8]
 800eaa4:	6922      	ldr	r2, [r4, #16]
 800eaa6:	bf0c      	ite	eq
 800eaa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eaac:	2500      	movne	r5, #0
 800eaae:	4293      	cmp	r3, r2
 800eab0:	bfc4      	itt	gt
 800eab2:	1a9b      	subgt	r3, r3, r2
 800eab4:	18ed      	addgt	r5, r5, r3
 800eab6:	2600      	movs	r6, #0
 800eab8:	341a      	adds	r4, #26
 800eaba:	42b5      	cmp	r5, r6
 800eabc:	d11a      	bne.n	800eaf4 <_printf_common+0xc8>
 800eabe:	2000      	movs	r0, #0
 800eac0:	e008      	b.n	800ead4 <_printf_common+0xa8>
 800eac2:	2301      	movs	r3, #1
 800eac4:	4652      	mov	r2, sl
 800eac6:	4649      	mov	r1, r9
 800eac8:	4638      	mov	r0, r7
 800eaca:	47c0      	blx	r8
 800eacc:	3001      	adds	r0, #1
 800eace:	d103      	bne.n	800ead8 <_printf_common+0xac>
 800ead0:	f04f 30ff 	mov.w	r0, #4294967295
 800ead4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ead8:	3501      	adds	r5, #1
 800eada:	e7c6      	b.n	800ea6a <_printf_common+0x3e>
 800eadc:	18e1      	adds	r1, r4, r3
 800eade:	1c5a      	adds	r2, r3, #1
 800eae0:	2030      	movs	r0, #48	; 0x30
 800eae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eae6:	4422      	add	r2, r4
 800eae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eaec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eaf0:	3302      	adds	r3, #2
 800eaf2:	e7c7      	b.n	800ea84 <_printf_common+0x58>
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	4622      	mov	r2, r4
 800eaf8:	4649      	mov	r1, r9
 800eafa:	4638      	mov	r0, r7
 800eafc:	47c0      	blx	r8
 800eafe:	3001      	adds	r0, #1
 800eb00:	d0e6      	beq.n	800ead0 <_printf_common+0xa4>
 800eb02:	3601      	adds	r6, #1
 800eb04:	e7d9      	b.n	800eaba <_printf_common+0x8e>
	...

0800eb08 <_printf_i>:
 800eb08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb0c:	460c      	mov	r4, r1
 800eb0e:	4691      	mov	r9, r2
 800eb10:	7e27      	ldrb	r7, [r4, #24]
 800eb12:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eb14:	2f78      	cmp	r7, #120	; 0x78
 800eb16:	4680      	mov	r8, r0
 800eb18:	469a      	mov	sl, r3
 800eb1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb1e:	d807      	bhi.n	800eb30 <_printf_i+0x28>
 800eb20:	2f62      	cmp	r7, #98	; 0x62
 800eb22:	d80a      	bhi.n	800eb3a <_printf_i+0x32>
 800eb24:	2f00      	cmp	r7, #0
 800eb26:	f000 80d8 	beq.w	800ecda <_printf_i+0x1d2>
 800eb2a:	2f58      	cmp	r7, #88	; 0x58
 800eb2c:	f000 80a3 	beq.w	800ec76 <_printf_i+0x16e>
 800eb30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eb34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb38:	e03a      	b.n	800ebb0 <_printf_i+0xa8>
 800eb3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb3e:	2b15      	cmp	r3, #21
 800eb40:	d8f6      	bhi.n	800eb30 <_printf_i+0x28>
 800eb42:	a001      	add	r0, pc, #4	; (adr r0, 800eb48 <_printf_i+0x40>)
 800eb44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800eb48:	0800eba1 	.word	0x0800eba1
 800eb4c:	0800ebb5 	.word	0x0800ebb5
 800eb50:	0800eb31 	.word	0x0800eb31
 800eb54:	0800eb31 	.word	0x0800eb31
 800eb58:	0800eb31 	.word	0x0800eb31
 800eb5c:	0800eb31 	.word	0x0800eb31
 800eb60:	0800ebb5 	.word	0x0800ebb5
 800eb64:	0800eb31 	.word	0x0800eb31
 800eb68:	0800eb31 	.word	0x0800eb31
 800eb6c:	0800eb31 	.word	0x0800eb31
 800eb70:	0800eb31 	.word	0x0800eb31
 800eb74:	0800ecc1 	.word	0x0800ecc1
 800eb78:	0800ebe5 	.word	0x0800ebe5
 800eb7c:	0800eca3 	.word	0x0800eca3
 800eb80:	0800eb31 	.word	0x0800eb31
 800eb84:	0800eb31 	.word	0x0800eb31
 800eb88:	0800ece3 	.word	0x0800ece3
 800eb8c:	0800eb31 	.word	0x0800eb31
 800eb90:	0800ebe5 	.word	0x0800ebe5
 800eb94:	0800eb31 	.word	0x0800eb31
 800eb98:	0800eb31 	.word	0x0800eb31
 800eb9c:	0800ecab 	.word	0x0800ecab
 800eba0:	680b      	ldr	r3, [r1, #0]
 800eba2:	1d1a      	adds	r2, r3, #4
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	600a      	str	r2, [r1, #0]
 800eba8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ebac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e0a3      	b.n	800ecfc <_printf_i+0x1f4>
 800ebb4:	6825      	ldr	r5, [r4, #0]
 800ebb6:	6808      	ldr	r0, [r1, #0]
 800ebb8:	062e      	lsls	r6, r5, #24
 800ebba:	f100 0304 	add.w	r3, r0, #4
 800ebbe:	d50a      	bpl.n	800ebd6 <_printf_i+0xce>
 800ebc0:	6805      	ldr	r5, [r0, #0]
 800ebc2:	600b      	str	r3, [r1, #0]
 800ebc4:	2d00      	cmp	r5, #0
 800ebc6:	da03      	bge.n	800ebd0 <_printf_i+0xc8>
 800ebc8:	232d      	movs	r3, #45	; 0x2d
 800ebca:	426d      	negs	r5, r5
 800ebcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebd0:	485e      	ldr	r0, [pc, #376]	; (800ed4c <_printf_i+0x244>)
 800ebd2:	230a      	movs	r3, #10
 800ebd4:	e019      	b.n	800ec0a <_printf_i+0x102>
 800ebd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ebda:	6805      	ldr	r5, [r0, #0]
 800ebdc:	600b      	str	r3, [r1, #0]
 800ebde:	bf18      	it	ne
 800ebe0:	b22d      	sxthne	r5, r5
 800ebe2:	e7ef      	b.n	800ebc4 <_printf_i+0xbc>
 800ebe4:	680b      	ldr	r3, [r1, #0]
 800ebe6:	6825      	ldr	r5, [r4, #0]
 800ebe8:	1d18      	adds	r0, r3, #4
 800ebea:	6008      	str	r0, [r1, #0]
 800ebec:	0628      	lsls	r0, r5, #24
 800ebee:	d501      	bpl.n	800ebf4 <_printf_i+0xec>
 800ebf0:	681d      	ldr	r5, [r3, #0]
 800ebf2:	e002      	b.n	800ebfa <_printf_i+0xf2>
 800ebf4:	0669      	lsls	r1, r5, #25
 800ebf6:	d5fb      	bpl.n	800ebf0 <_printf_i+0xe8>
 800ebf8:	881d      	ldrh	r5, [r3, #0]
 800ebfa:	4854      	ldr	r0, [pc, #336]	; (800ed4c <_printf_i+0x244>)
 800ebfc:	2f6f      	cmp	r7, #111	; 0x6f
 800ebfe:	bf0c      	ite	eq
 800ec00:	2308      	moveq	r3, #8
 800ec02:	230a      	movne	r3, #10
 800ec04:	2100      	movs	r1, #0
 800ec06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec0a:	6866      	ldr	r6, [r4, #4]
 800ec0c:	60a6      	str	r6, [r4, #8]
 800ec0e:	2e00      	cmp	r6, #0
 800ec10:	bfa2      	ittt	ge
 800ec12:	6821      	ldrge	r1, [r4, #0]
 800ec14:	f021 0104 	bicge.w	r1, r1, #4
 800ec18:	6021      	strge	r1, [r4, #0]
 800ec1a:	b90d      	cbnz	r5, 800ec20 <_printf_i+0x118>
 800ec1c:	2e00      	cmp	r6, #0
 800ec1e:	d04d      	beq.n	800ecbc <_printf_i+0x1b4>
 800ec20:	4616      	mov	r6, r2
 800ec22:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec26:	fb03 5711 	mls	r7, r3, r1, r5
 800ec2a:	5dc7      	ldrb	r7, [r0, r7]
 800ec2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec30:	462f      	mov	r7, r5
 800ec32:	42bb      	cmp	r3, r7
 800ec34:	460d      	mov	r5, r1
 800ec36:	d9f4      	bls.n	800ec22 <_printf_i+0x11a>
 800ec38:	2b08      	cmp	r3, #8
 800ec3a:	d10b      	bne.n	800ec54 <_printf_i+0x14c>
 800ec3c:	6823      	ldr	r3, [r4, #0]
 800ec3e:	07df      	lsls	r7, r3, #31
 800ec40:	d508      	bpl.n	800ec54 <_printf_i+0x14c>
 800ec42:	6923      	ldr	r3, [r4, #16]
 800ec44:	6861      	ldr	r1, [r4, #4]
 800ec46:	4299      	cmp	r1, r3
 800ec48:	bfde      	ittt	le
 800ec4a:	2330      	movle	r3, #48	; 0x30
 800ec4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec50:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec54:	1b92      	subs	r2, r2, r6
 800ec56:	6122      	str	r2, [r4, #16]
 800ec58:	f8cd a000 	str.w	sl, [sp]
 800ec5c:	464b      	mov	r3, r9
 800ec5e:	aa03      	add	r2, sp, #12
 800ec60:	4621      	mov	r1, r4
 800ec62:	4640      	mov	r0, r8
 800ec64:	f7ff fee2 	bl	800ea2c <_printf_common>
 800ec68:	3001      	adds	r0, #1
 800ec6a:	d14c      	bne.n	800ed06 <_printf_i+0x1fe>
 800ec6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec70:	b004      	add	sp, #16
 800ec72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec76:	4835      	ldr	r0, [pc, #212]	; (800ed4c <_printf_i+0x244>)
 800ec78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ec7c:	6823      	ldr	r3, [r4, #0]
 800ec7e:	680e      	ldr	r6, [r1, #0]
 800ec80:	061f      	lsls	r7, r3, #24
 800ec82:	f856 5b04 	ldr.w	r5, [r6], #4
 800ec86:	600e      	str	r6, [r1, #0]
 800ec88:	d514      	bpl.n	800ecb4 <_printf_i+0x1ac>
 800ec8a:	07d9      	lsls	r1, r3, #31
 800ec8c:	bf44      	itt	mi
 800ec8e:	f043 0320 	orrmi.w	r3, r3, #32
 800ec92:	6023      	strmi	r3, [r4, #0]
 800ec94:	b91d      	cbnz	r5, 800ec9e <_printf_i+0x196>
 800ec96:	6823      	ldr	r3, [r4, #0]
 800ec98:	f023 0320 	bic.w	r3, r3, #32
 800ec9c:	6023      	str	r3, [r4, #0]
 800ec9e:	2310      	movs	r3, #16
 800eca0:	e7b0      	b.n	800ec04 <_printf_i+0xfc>
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	f043 0320 	orr.w	r3, r3, #32
 800eca8:	6023      	str	r3, [r4, #0]
 800ecaa:	2378      	movs	r3, #120	; 0x78
 800ecac:	4828      	ldr	r0, [pc, #160]	; (800ed50 <_printf_i+0x248>)
 800ecae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ecb2:	e7e3      	b.n	800ec7c <_printf_i+0x174>
 800ecb4:	065e      	lsls	r6, r3, #25
 800ecb6:	bf48      	it	mi
 800ecb8:	b2ad      	uxthmi	r5, r5
 800ecba:	e7e6      	b.n	800ec8a <_printf_i+0x182>
 800ecbc:	4616      	mov	r6, r2
 800ecbe:	e7bb      	b.n	800ec38 <_printf_i+0x130>
 800ecc0:	680b      	ldr	r3, [r1, #0]
 800ecc2:	6826      	ldr	r6, [r4, #0]
 800ecc4:	6960      	ldr	r0, [r4, #20]
 800ecc6:	1d1d      	adds	r5, r3, #4
 800ecc8:	600d      	str	r5, [r1, #0]
 800ecca:	0635      	lsls	r5, r6, #24
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	d501      	bpl.n	800ecd4 <_printf_i+0x1cc>
 800ecd0:	6018      	str	r0, [r3, #0]
 800ecd2:	e002      	b.n	800ecda <_printf_i+0x1d2>
 800ecd4:	0671      	lsls	r1, r6, #25
 800ecd6:	d5fb      	bpl.n	800ecd0 <_printf_i+0x1c8>
 800ecd8:	8018      	strh	r0, [r3, #0]
 800ecda:	2300      	movs	r3, #0
 800ecdc:	6123      	str	r3, [r4, #16]
 800ecde:	4616      	mov	r6, r2
 800ece0:	e7ba      	b.n	800ec58 <_printf_i+0x150>
 800ece2:	680b      	ldr	r3, [r1, #0]
 800ece4:	1d1a      	adds	r2, r3, #4
 800ece6:	600a      	str	r2, [r1, #0]
 800ece8:	681e      	ldr	r6, [r3, #0]
 800ecea:	6862      	ldr	r2, [r4, #4]
 800ecec:	2100      	movs	r1, #0
 800ecee:	4630      	mov	r0, r6
 800ecf0:	f7f1 fa8e 	bl	8000210 <memchr>
 800ecf4:	b108      	cbz	r0, 800ecfa <_printf_i+0x1f2>
 800ecf6:	1b80      	subs	r0, r0, r6
 800ecf8:	6060      	str	r0, [r4, #4]
 800ecfa:	6863      	ldr	r3, [r4, #4]
 800ecfc:	6123      	str	r3, [r4, #16]
 800ecfe:	2300      	movs	r3, #0
 800ed00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed04:	e7a8      	b.n	800ec58 <_printf_i+0x150>
 800ed06:	6923      	ldr	r3, [r4, #16]
 800ed08:	4632      	mov	r2, r6
 800ed0a:	4649      	mov	r1, r9
 800ed0c:	4640      	mov	r0, r8
 800ed0e:	47d0      	blx	sl
 800ed10:	3001      	adds	r0, #1
 800ed12:	d0ab      	beq.n	800ec6c <_printf_i+0x164>
 800ed14:	6823      	ldr	r3, [r4, #0]
 800ed16:	079b      	lsls	r3, r3, #30
 800ed18:	d413      	bmi.n	800ed42 <_printf_i+0x23a>
 800ed1a:	68e0      	ldr	r0, [r4, #12]
 800ed1c:	9b03      	ldr	r3, [sp, #12]
 800ed1e:	4298      	cmp	r0, r3
 800ed20:	bfb8      	it	lt
 800ed22:	4618      	movlt	r0, r3
 800ed24:	e7a4      	b.n	800ec70 <_printf_i+0x168>
 800ed26:	2301      	movs	r3, #1
 800ed28:	4632      	mov	r2, r6
 800ed2a:	4649      	mov	r1, r9
 800ed2c:	4640      	mov	r0, r8
 800ed2e:	47d0      	blx	sl
 800ed30:	3001      	adds	r0, #1
 800ed32:	d09b      	beq.n	800ec6c <_printf_i+0x164>
 800ed34:	3501      	adds	r5, #1
 800ed36:	68e3      	ldr	r3, [r4, #12]
 800ed38:	9903      	ldr	r1, [sp, #12]
 800ed3a:	1a5b      	subs	r3, r3, r1
 800ed3c:	42ab      	cmp	r3, r5
 800ed3e:	dcf2      	bgt.n	800ed26 <_printf_i+0x21e>
 800ed40:	e7eb      	b.n	800ed1a <_printf_i+0x212>
 800ed42:	2500      	movs	r5, #0
 800ed44:	f104 0619 	add.w	r6, r4, #25
 800ed48:	e7f5      	b.n	800ed36 <_printf_i+0x22e>
 800ed4a:	bf00      	nop
 800ed4c:	080266ce 	.word	0x080266ce
 800ed50:	080266df 	.word	0x080266df

0800ed54 <_scanf_float>:
 800ed54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed58:	b087      	sub	sp, #28
 800ed5a:	4617      	mov	r7, r2
 800ed5c:	9303      	str	r3, [sp, #12]
 800ed5e:	688b      	ldr	r3, [r1, #8]
 800ed60:	1e5a      	subs	r2, r3, #1
 800ed62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ed66:	bf83      	ittte	hi
 800ed68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ed6c:	195b      	addhi	r3, r3, r5
 800ed6e:	9302      	strhi	r3, [sp, #8]
 800ed70:	2300      	movls	r3, #0
 800ed72:	bf86      	itte	hi
 800ed74:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ed78:	608b      	strhi	r3, [r1, #8]
 800ed7a:	9302      	strls	r3, [sp, #8]
 800ed7c:	680b      	ldr	r3, [r1, #0]
 800ed7e:	468b      	mov	fp, r1
 800ed80:	2500      	movs	r5, #0
 800ed82:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ed86:	f84b 3b1c 	str.w	r3, [fp], #28
 800ed8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ed8e:	4680      	mov	r8, r0
 800ed90:	460c      	mov	r4, r1
 800ed92:	465e      	mov	r6, fp
 800ed94:	46aa      	mov	sl, r5
 800ed96:	46a9      	mov	r9, r5
 800ed98:	9501      	str	r5, [sp, #4]
 800ed9a:	68a2      	ldr	r2, [r4, #8]
 800ed9c:	b152      	cbz	r2, 800edb4 <_scanf_float+0x60>
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	2b4e      	cmp	r3, #78	; 0x4e
 800eda4:	d864      	bhi.n	800ee70 <_scanf_float+0x11c>
 800eda6:	2b40      	cmp	r3, #64	; 0x40
 800eda8:	d83c      	bhi.n	800ee24 <_scanf_float+0xd0>
 800edaa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800edae:	b2c8      	uxtb	r0, r1
 800edb0:	280e      	cmp	r0, #14
 800edb2:	d93a      	bls.n	800ee2a <_scanf_float+0xd6>
 800edb4:	f1b9 0f00 	cmp.w	r9, #0
 800edb8:	d003      	beq.n	800edc2 <_scanf_float+0x6e>
 800edba:	6823      	ldr	r3, [r4, #0]
 800edbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800edc0:	6023      	str	r3, [r4, #0]
 800edc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800edc6:	f1ba 0f01 	cmp.w	sl, #1
 800edca:	f200 8113 	bhi.w	800eff4 <_scanf_float+0x2a0>
 800edce:	455e      	cmp	r6, fp
 800edd0:	f200 8105 	bhi.w	800efde <_scanf_float+0x28a>
 800edd4:	2501      	movs	r5, #1
 800edd6:	4628      	mov	r0, r5
 800edd8:	b007      	add	sp, #28
 800edda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edde:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ede2:	2a0d      	cmp	r2, #13
 800ede4:	d8e6      	bhi.n	800edb4 <_scanf_float+0x60>
 800ede6:	a101      	add	r1, pc, #4	; (adr r1, 800edec <_scanf_float+0x98>)
 800ede8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800edec:	0800ef2b 	.word	0x0800ef2b
 800edf0:	0800edb5 	.word	0x0800edb5
 800edf4:	0800edb5 	.word	0x0800edb5
 800edf8:	0800edb5 	.word	0x0800edb5
 800edfc:	0800ef8b 	.word	0x0800ef8b
 800ee00:	0800ef63 	.word	0x0800ef63
 800ee04:	0800edb5 	.word	0x0800edb5
 800ee08:	0800edb5 	.word	0x0800edb5
 800ee0c:	0800ef39 	.word	0x0800ef39
 800ee10:	0800edb5 	.word	0x0800edb5
 800ee14:	0800edb5 	.word	0x0800edb5
 800ee18:	0800edb5 	.word	0x0800edb5
 800ee1c:	0800edb5 	.word	0x0800edb5
 800ee20:	0800eef1 	.word	0x0800eef1
 800ee24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ee28:	e7db      	b.n	800ede2 <_scanf_float+0x8e>
 800ee2a:	290e      	cmp	r1, #14
 800ee2c:	d8c2      	bhi.n	800edb4 <_scanf_float+0x60>
 800ee2e:	a001      	add	r0, pc, #4	; (adr r0, 800ee34 <_scanf_float+0xe0>)
 800ee30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ee34:	0800eee3 	.word	0x0800eee3
 800ee38:	0800edb5 	.word	0x0800edb5
 800ee3c:	0800eee3 	.word	0x0800eee3
 800ee40:	0800ef77 	.word	0x0800ef77
 800ee44:	0800edb5 	.word	0x0800edb5
 800ee48:	0800ee91 	.word	0x0800ee91
 800ee4c:	0800eecd 	.word	0x0800eecd
 800ee50:	0800eecd 	.word	0x0800eecd
 800ee54:	0800eecd 	.word	0x0800eecd
 800ee58:	0800eecd 	.word	0x0800eecd
 800ee5c:	0800eecd 	.word	0x0800eecd
 800ee60:	0800eecd 	.word	0x0800eecd
 800ee64:	0800eecd 	.word	0x0800eecd
 800ee68:	0800eecd 	.word	0x0800eecd
 800ee6c:	0800eecd 	.word	0x0800eecd
 800ee70:	2b6e      	cmp	r3, #110	; 0x6e
 800ee72:	d809      	bhi.n	800ee88 <_scanf_float+0x134>
 800ee74:	2b60      	cmp	r3, #96	; 0x60
 800ee76:	d8b2      	bhi.n	800edde <_scanf_float+0x8a>
 800ee78:	2b54      	cmp	r3, #84	; 0x54
 800ee7a:	d077      	beq.n	800ef6c <_scanf_float+0x218>
 800ee7c:	2b59      	cmp	r3, #89	; 0x59
 800ee7e:	d199      	bne.n	800edb4 <_scanf_float+0x60>
 800ee80:	2d07      	cmp	r5, #7
 800ee82:	d197      	bne.n	800edb4 <_scanf_float+0x60>
 800ee84:	2508      	movs	r5, #8
 800ee86:	e029      	b.n	800eedc <_scanf_float+0x188>
 800ee88:	2b74      	cmp	r3, #116	; 0x74
 800ee8a:	d06f      	beq.n	800ef6c <_scanf_float+0x218>
 800ee8c:	2b79      	cmp	r3, #121	; 0x79
 800ee8e:	e7f6      	b.n	800ee7e <_scanf_float+0x12a>
 800ee90:	6821      	ldr	r1, [r4, #0]
 800ee92:	05c8      	lsls	r0, r1, #23
 800ee94:	d51a      	bpl.n	800eecc <_scanf_float+0x178>
 800ee96:	9b02      	ldr	r3, [sp, #8]
 800ee98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ee9c:	6021      	str	r1, [r4, #0]
 800ee9e:	f109 0901 	add.w	r9, r9, #1
 800eea2:	b11b      	cbz	r3, 800eeac <_scanf_float+0x158>
 800eea4:	3b01      	subs	r3, #1
 800eea6:	3201      	adds	r2, #1
 800eea8:	9302      	str	r3, [sp, #8]
 800eeaa:	60a2      	str	r2, [r4, #8]
 800eeac:	68a3      	ldr	r3, [r4, #8]
 800eeae:	3b01      	subs	r3, #1
 800eeb0:	60a3      	str	r3, [r4, #8]
 800eeb2:	6923      	ldr	r3, [r4, #16]
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	6123      	str	r3, [r4, #16]
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	3b01      	subs	r3, #1
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	607b      	str	r3, [r7, #4]
 800eec0:	f340 8084 	ble.w	800efcc <_scanf_float+0x278>
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	3301      	adds	r3, #1
 800eec8:	603b      	str	r3, [r7, #0]
 800eeca:	e766      	b.n	800ed9a <_scanf_float+0x46>
 800eecc:	eb1a 0f05 	cmn.w	sl, r5
 800eed0:	f47f af70 	bne.w	800edb4 <_scanf_float+0x60>
 800eed4:	6822      	ldr	r2, [r4, #0]
 800eed6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800eeda:	6022      	str	r2, [r4, #0]
 800eedc:	f806 3b01 	strb.w	r3, [r6], #1
 800eee0:	e7e4      	b.n	800eeac <_scanf_float+0x158>
 800eee2:	6822      	ldr	r2, [r4, #0]
 800eee4:	0610      	lsls	r0, r2, #24
 800eee6:	f57f af65 	bpl.w	800edb4 <_scanf_float+0x60>
 800eeea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eeee:	e7f4      	b.n	800eeda <_scanf_float+0x186>
 800eef0:	f1ba 0f00 	cmp.w	sl, #0
 800eef4:	d10e      	bne.n	800ef14 <_scanf_float+0x1c0>
 800eef6:	f1b9 0f00 	cmp.w	r9, #0
 800eefa:	d10e      	bne.n	800ef1a <_scanf_float+0x1c6>
 800eefc:	6822      	ldr	r2, [r4, #0]
 800eefe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ef02:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ef06:	d108      	bne.n	800ef1a <_scanf_float+0x1c6>
 800ef08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ef0c:	6022      	str	r2, [r4, #0]
 800ef0e:	f04f 0a01 	mov.w	sl, #1
 800ef12:	e7e3      	b.n	800eedc <_scanf_float+0x188>
 800ef14:	f1ba 0f02 	cmp.w	sl, #2
 800ef18:	d055      	beq.n	800efc6 <_scanf_float+0x272>
 800ef1a:	2d01      	cmp	r5, #1
 800ef1c:	d002      	beq.n	800ef24 <_scanf_float+0x1d0>
 800ef1e:	2d04      	cmp	r5, #4
 800ef20:	f47f af48 	bne.w	800edb4 <_scanf_float+0x60>
 800ef24:	3501      	adds	r5, #1
 800ef26:	b2ed      	uxtb	r5, r5
 800ef28:	e7d8      	b.n	800eedc <_scanf_float+0x188>
 800ef2a:	f1ba 0f01 	cmp.w	sl, #1
 800ef2e:	f47f af41 	bne.w	800edb4 <_scanf_float+0x60>
 800ef32:	f04f 0a02 	mov.w	sl, #2
 800ef36:	e7d1      	b.n	800eedc <_scanf_float+0x188>
 800ef38:	b97d      	cbnz	r5, 800ef5a <_scanf_float+0x206>
 800ef3a:	f1b9 0f00 	cmp.w	r9, #0
 800ef3e:	f47f af3c 	bne.w	800edba <_scanf_float+0x66>
 800ef42:	6822      	ldr	r2, [r4, #0]
 800ef44:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ef48:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ef4c:	f47f af39 	bne.w	800edc2 <_scanf_float+0x6e>
 800ef50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ef54:	6022      	str	r2, [r4, #0]
 800ef56:	2501      	movs	r5, #1
 800ef58:	e7c0      	b.n	800eedc <_scanf_float+0x188>
 800ef5a:	2d03      	cmp	r5, #3
 800ef5c:	d0e2      	beq.n	800ef24 <_scanf_float+0x1d0>
 800ef5e:	2d05      	cmp	r5, #5
 800ef60:	e7de      	b.n	800ef20 <_scanf_float+0x1cc>
 800ef62:	2d02      	cmp	r5, #2
 800ef64:	f47f af26 	bne.w	800edb4 <_scanf_float+0x60>
 800ef68:	2503      	movs	r5, #3
 800ef6a:	e7b7      	b.n	800eedc <_scanf_float+0x188>
 800ef6c:	2d06      	cmp	r5, #6
 800ef6e:	f47f af21 	bne.w	800edb4 <_scanf_float+0x60>
 800ef72:	2507      	movs	r5, #7
 800ef74:	e7b2      	b.n	800eedc <_scanf_float+0x188>
 800ef76:	6822      	ldr	r2, [r4, #0]
 800ef78:	0591      	lsls	r1, r2, #22
 800ef7a:	f57f af1b 	bpl.w	800edb4 <_scanf_float+0x60>
 800ef7e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ef82:	6022      	str	r2, [r4, #0]
 800ef84:	f8cd 9004 	str.w	r9, [sp, #4]
 800ef88:	e7a8      	b.n	800eedc <_scanf_float+0x188>
 800ef8a:	6822      	ldr	r2, [r4, #0]
 800ef8c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ef90:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ef94:	d006      	beq.n	800efa4 <_scanf_float+0x250>
 800ef96:	0550      	lsls	r0, r2, #21
 800ef98:	f57f af0c 	bpl.w	800edb4 <_scanf_float+0x60>
 800ef9c:	f1b9 0f00 	cmp.w	r9, #0
 800efa0:	f43f af0f 	beq.w	800edc2 <_scanf_float+0x6e>
 800efa4:	0591      	lsls	r1, r2, #22
 800efa6:	bf58      	it	pl
 800efa8:	9901      	ldrpl	r1, [sp, #4]
 800efaa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800efae:	bf58      	it	pl
 800efb0:	eba9 0101 	subpl.w	r1, r9, r1
 800efb4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800efb8:	bf58      	it	pl
 800efba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800efbe:	6022      	str	r2, [r4, #0]
 800efc0:	f04f 0900 	mov.w	r9, #0
 800efc4:	e78a      	b.n	800eedc <_scanf_float+0x188>
 800efc6:	f04f 0a03 	mov.w	sl, #3
 800efca:	e787      	b.n	800eedc <_scanf_float+0x188>
 800efcc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800efd0:	4639      	mov	r1, r7
 800efd2:	4640      	mov	r0, r8
 800efd4:	4798      	blx	r3
 800efd6:	2800      	cmp	r0, #0
 800efd8:	f43f aedf 	beq.w	800ed9a <_scanf_float+0x46>
 800efdc:	e6ea      	b.n	800edb4 <_scanf_float+0x60>
 800efde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800efe2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800efe6:	463a      	mov	r2, r7
 800efe8:	4640      	mov	r0, r8
 800efea:	4798      	blx	r3
 800efec:	6923      	ldr	r3, [r4, #16]
 800efee:	3b01      	subs	r3, #1
 800eff0:	6123      	str	r3, [r4, #16]
 800eff2:	e6ec      	b.n	800edce <_scanf_float+0x7a>
 800eff4:	1e6b      	subs	r3, r5, #1
 800eff6:	2b06      	cmp	r3, #6
 800eff8:	d825      	bhi.n	800f046 <_scanf_float+0x2f2>
 800effa:	2d02      	cmp	r5, #2
 800effc:	d836      	bhi.n	800f06c <_scanf_float+0x318>
 800effe:	455e      	cmp	r6, fp
 800f000:	f67f aee8 	bls.w	800edd4 <_scanf_float+0x80>
 800f004:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f008:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f00c:	463a      	mov	r2, r7
 800f00e:	4640      	mov	r0, r8
 800f010:	4798      	blx	r3
 800f012:	6923      	ldr	r3, [r4, #16]
 800f014:	3b01      	subs	r3, #1
 800f016:	6123      	str	r3, [r4, #16]
 800f018:	e7f1      	b.n	800effe <_scanf_float+0x2aa>
 800f01a:	9802      	ldr	r0, [sp, #8]
 800f01c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f020:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f024:	9002      	str	r0, [sp, #8]
 800f026:	463a      	mov	r2, r7
 800f028:	4640      	mov	r0, r8
 800f02a:	4798      	blx	r3
 800f02c:	6923      	ldr	r3, [r4, #16]
 800f02e:	3b01      	subs	r3, #1
 800f030:	6123      	str	r3, [r4, #16]
 800f032:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f036:	fa5f fa8a 	uxtb.w	sl, sl
 800f03a:	f1ba 0f02 	cmp.w	sl, #2
 800f03e:	d1ec      	bne.n	800f01a <_scanf_float+0x2c6>
 800f040:	3d03      	subs	r5, #3
 800f042:	b2ed      	uxtb	r5, r5
 800f044:	1b76      	subs	r6, r6, r5
 800f046:	6823      	ldr	r3, [r4, #0]
 800f048:	05da      	lsls	r2, r3, #23
 800f04a:	d52f      	bpl.n	800f0ac <_scanf_float+0x358>
 800f04c:	055b      	lsls	r3, r3, #21
 800f04e:	d510      	bpl.n	800f072 <_scanf_float+0x31e>
 800f050:	455e      	cmp	r6, fp
 800f052:	f67f aebf 	bls.w	800edd4 <_scanf_float+0x80>
 800f056:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f05a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f05e:	463a      	mov	r2, r7
 800f060:	4640      	mov	r0, r8
 800f062:	4798      	blx	r3
 800f064:	6923      	ldr	r3, [r4, #16]
 800f066:	3b01      	subs	r3, #1
 800f068:	6123      	str	r3, [r4, #16]
 800f06a:	e7f1      	b.n	800f050 <_scanf_float+0x2fc>
 800f06c:	46aa      	mov	sl, r5
 800f06e:	9602      	str	r6, [sp, #8]
 800f070:	e7df      	b.n	800f032 <_scanf_float+0x2de>
 800f072:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f076:	6923      	ldr	r3, [r4, #16]
 800f078:	2965      	cmp	r1, #101	; 0x65
 800f07a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f07e:	f106 35ff 	add.w	r5, r6, #4294967295
 800f082:	6123      	str	r3, [r4, #16]
 800f084:	d00c      	beq.n	800f0a0 <_scanf_float+0x34c>
 800f086:	2945      	cmp	r1, #69	; 0x45
 800f088:	d00a      	beq.n	800f0a0 <_scanf_float+0x34c>
 800f08a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f08e:	463a      	mov	r2, r7
 800f090:	4640      	mov	r0, r8
 800f092:	4798      	blx	r3
 800f094:	6923      	ldr	r3, [r4, #16]
 800f096:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f09a:	3b01      	subs	r3, #1
 800f09c:	1eb5      	subs	r5, r6, #2
 800f09e:	6123      	str	r3, [r4, #16]
 800f0a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f0a4:	463a      	mov	r2, r7
 800f0a6:	4640      	mov	r0, r8
 800f0a8:	4798      	blx	r3
 800f0aa:	462e      	mov	r6, r5
 800f0ac:	6825      	ldr	r5, [r4, #0]
 800f0ae:	f015 0510 	ands.w	r5, r5, #16
 800f0b2:	d158      	bne.n	800f166 <_scanf_float+0x412>
 800f0b4:	7035      	strb	r5, [r6, #0]
 800f0b6:	6823      	ldr	r3, [r4, #0]
 800f0b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f0bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0c0:	d11c      	bne.n	800f0fc <_scanf_float+0x3a8>
 800f0c2:	9b01      	ldr	r3, [sp, #4]
 800f0c4:	454b      	cmp	r3, r9
 800f0c6:	eba3 0209 	sub.w	r2, r3, r9
 800f0ca:	d124      	bne.n	800f116 <_scanf_float+0x3c2>
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	4659      	mov	r1, fp
 800f0d0:	4640      	mov	r0, r8
 800f0d2:	f000 fe9b 	bl	800fe0c <_strtod_r>
 800f0d6:	9b03      	ldr	r3, [sp, #12]
 800f0d8:	6821      	ldr	r1, [r4, #0]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f011 0f02 	tst.w	r1, #2
 800f0e0:	ec57 6b10 	vmov	r6, r7, d0
 800f0e4:	f103 0204 	add.w	r2, r3, #4
 800f0e8:	d020      	beq.n	800f12c <_scanf_float+0x3d8>
 800f0ea:	9903      	ldr	r1, [sp, #12]
 800f0ec:	600a      	str	r2, [r1, #0]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	e9c3 6700 	strd	r6, r7, [r3]
 800f0f4:	68e3      	ldr	r3, [r4, #12]
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	60e3      	str	r3, [r4, #12]
 800f0fa:	e66c      	b.n	800edd6 <_scanf_float+0x82>
 800f0fc:	9b04      	ldr	r3, [sp, #16]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d0e4      	beq.n	800f0cc <_scanf_float+0x378>
 800f102:	9905      	ldr	r1, [sp, #20]
 800f104:	230a      	movs	r3, #10
 800f106:	462a      	mov	r2, r5
 800f108:	3101      	adds	r1, #1
 800f10a:	4640      	mov	r0, r8
 800f10c:	f000 ff70 	bl	800fff0 <_strtol_r>
 800f110:	9b04      	ldr	r3, [sp, #16]
 800f112:	9e05      	ldr	r6, [sp, #20]
 800f114:	1ac2      	subs	r2, r0, r3
 800f116:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f11a:	429e      	cmp	r6, r3
 800f11c:	bf28      	it	cs
 800f11e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f122:	4912      	ldr	r1, [pc, #72]	; (800f16c <_scanf_float+0x418>)
 800f124:	4630      	mov	r0, r6
 800f126:	f000 f82b 	bl	800f180 <siprintf>
 800f12a:	e7cf      	b.n	800f0cc <_scanf_float+0x378>
 800f12c:	f011 0f04 	tst.w	r1, #4
 800f130:	9903      	ldr	r1, [sp, #12]
 800f132:	600a      	str	r2, [r1, #0]
 800f134:	d1db      	bne.n	800f0ee <_scanf_float+0x39a>
 800f136:	f8d3 8000 	ldr.w	r8, [r3]
 800f13a:	ee10 2a10 	vmov	r2, s0
 800f13e:	ee10 0a10 	vmov	r0, s0
 800f142:	463b      	mov	r3, r7
 800f144:	4639      	mov	r1, r7
 800f146:	f7f1 fd09 	bl	8000b5c <__aeabi_dcmpun>
 800f14a:	b128      	cbz	r0, 800f158 <_scanf_float+0x404>
 800f14c:	4808      	ldr	r0, [pc, #32]	; (800f170 <_scanf_float+0x41c>)
 800f14e:	f000 f811 	bl	800f174 <nanf>
 800f152:	ed88 0a00 	vstr	s0, [r8]
 800f156:	e7cd      	b.n	800f0f4 <_scanf_float+0x3a0>
 800f158:	4630      	mov	r0, r6
 800f15a:	4639      	mov	r1, r7
 800f15c:	f7f1 fd5c 	bl	8000c18 <__aeabi_d2f>
 800f160:	f8c8 0000 	str.w	r0, [r8]
 800f164:	e7c6      	b.n	800f0f4 <_scanf_float+0x3a0>
 800f166:	2500      	movs	r5, #0
 800f168:	e635      	b.n	800edd6 <_scanf_float+0x82>
 800f16a:	bf00      	nop
 800f16c:	080266f0 	.word	0x080266f0
 800f170:	080267fb 	.word	0x080267fb

0800f174 <nanf>:
 800f174:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f17c <nanf+0x8>
 800f178:	4770      	bx	lr
 800f17a:	bf00      	nop
 800f17c:	7fc00000 	.word	0x7fc00000

0800f180 <siprintf>:
 800f180:	b40e      	push	{r1, r2, r3}
 800f182:	b500      	push	{lr}
 800f184:	b09c      	sub	sp, #112	; 0x70
 800f186:	ab1d      	add	r3, sp, #116	; 0x74
 800f188:	9002      	str	r0, [sp, #8]
 800f18a:	9006      	str	r0, [sp, #24]
 800f18c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f190:	4809      	ldr	r0, [pc, #36]	; (800f1b8 <siprintf+0x38>)
 800f192:	9107      	str	r1, [sp, #28]
 800f194:	9104      	str	r1, [sp, #16]
 800f196:	4909      	ldr	r1, [pc, #36]	; (800f1bc <siprintf+0x3c>)
 800f198:	f853 2b04 	ldr.w	r2, [r3], #4
 800f19c:	9105      	str	r1, [sp, #20]
 800f19e:	6800      	ldr	r0, [r0, #0]
 800f1a0:	9301      	str	r3, [sp, #4]
 800f1a2:	a902      	add	r1, sp, #8
 800f1a4:	f002 ff46 	bl	8012034 <_svfiprintf_r>
 800f1a8:	9b02      	ldr	r3, [sp, #8]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	701a      	strb	r2, [r3, #0]
 800f1ae:	b01c      	add	sp, #112	; 0x70
 800f1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1b4:	b003      	add	sp, #12
 800f1b6:	4770      	bx	lr
 800f1b8:	20000040 	.word	0x20000040
 800f1bc:	ffff0208 	.word	0xffff0208

0800f1c0 <sulp>:
 800f1c0:	b570      	push	{r4, r5, r6, lr}
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	460d      	mov	r5, r1
 800f1c6:	ec45 4b10 	vmov	d0, r4, r5
 800f1ca:	4616      	mov	r6, r2
 800f1cc:	f002 fcce 	bl	8011b6c <__ulp>
 800f1d0:	ec51 0b10 	vmov	r0, r1, d0
 800f1d4:	b17e      	cbz	r6, 800f1f6 <sulp+0x36>
 800f1d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f1da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	dd09      	ble.n	800f1f6 <sulp+0x36>
 800f1e2:	051b      	lsls	r3, r3, #20
 800f1e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f1e8:	2400      	movs	r4, #0
 800f1ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f1ee:	4622      	mov	r2, r4
 800f1f0:	462b      	mov	r3, r5
 800f1f2:	f7f1 fa19 	bl	8000628 <__aeabi_dmul>
 800f1f6:	bd70      	pop	{r4, r5, r6, pc}

0800f1f8 <_strtod_l>:
 800f1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1fc:	b0a3      	sub	sp, #140	; 0x8c
 800f1fe:	461f      	mov	r7, r3
 800f200:	2300      	movs	r3, #0
 800f202:	931e      	str	r3, [sp, #120]	; 0x78
 800f204:	4ba4      	ldr	r3, [pc, #656]	; (800f498 <_strtod_l+0x2a0>)
 800f206:	9219      	str	r2, [sp, #100]	; 0x64
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	9307      	str	r3, [sp, #28]
 800f20c:	4604      	mov	r4, r0
 800f20e:	4618      	mov	r0, r3
 800f210:	4688      	mov	r8, r1
 800f212:	f7f0 ffef 	bl	80001f4 <strlen>
 800f216:	f04f 0a00 	mov.w	sl, #0
 800f21a:	4605      	mov	r5, r0
 800f21c:	f04f 0b00 	mov.w	fp, #0
 800f220:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f226:	781a      	ldrb	r2, [r3, #0]
 800f228:	2a2b      	cmp	r2, #43	; 0x2b
 800f22a:	d04c      	beq.n	800f2c6 <_strtod_l+0xce>
 800f22c:	d839      	bhi.n	800f2a2 <_strtod_l+0xaa>
 800f22e:	2a0d      	cmp	r2, #13
 800f230:	d832      	bhi.n	800f298 <_strtod_l+0xa0>
 800f232:	2a08      	cmp	r2, #8
 800f234:	d832      	bhi.n	800f29c <_strtod_l+0xa4>
 800f236:	2a00      	cmp	r2, #0
 800f238:	d03c      	beq.n	800f2b4 <_strtod_l+0xbc>
 800f23a:	2300      	movs	r3, #0
 800f23c:	930e      	str	r3, [sp, #56]	; 0x38
 800f23e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f240:	7833      	ldrb	r3, [r6, #0]
 800f242:	2b30      	cmp	r3, #48	; 0x30
 800f244:	f040 80b4 	bne.w	800f3b0 <_strtod_l+0x1b8>
 800f248:	7873      	ldrb	r3, [r6, #1]
 800f24a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f24e:	2b58      	cmp	r3, #88	; 0x58
 800f250:	d16c      	bne.n	800f32c <_strtod_l+0x134>
 800f252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f254:	9301      	str	r3, [sp, #4]
 800f256:	ab1e      	add	r3, sp, #120	; 0x78
 800f258:	9702      	str	r7, [sp, #8]
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	4a8f      	ldr	r2, [pc, #572]	; (800f49c <_strtod_l+0x2a4>)
 800f25e:	ab1f      	add	r3, sp, #124	; 0x7c
 800f260:	a91d      	add	r1, sp, #116	; 0x74
 800f262:	4620      	mov	r0, r4
 800f264:	f001 fde2 	bl	8010e2c <__gethex>
 800f268:	f010 0707 	ands.w	r7, r0, #7
 800f26c:	4605      	mov	r5, r0
 800f26e:	d005      	beq.n	800f27c <_strtod_l+0x84>
 800f270:	2f06      	cmp	r7, #6
 800f272:	d12a      	bne.n	800f2ca <_strtod_l+0xd2>
 800f274:	3601      	adds	r6, #1
 800f276:	2300      	movs	r3, #0
 800f278:	961d      	str	r6, [sp, #116]	; 0x74
 800f27a:	930e      	str	r3, [sp, #56]	; 0x38
 800f27c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f27e:	2b00      	cmp	r3, #0
 800f280:	f040 8596 	bne.w	800fdb0 <_strtod_l+0xbb8>
 800f284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f286:	b1db      	cbz	r3, 800f2c0 <_strtod_l+0xc8>
 800f288:	4652      	mov	r2, sl
 800f28a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f28e:	ec43 2b10 	vmov	d0, r2, r3
 800f292:	b023      	add	sp, #140	; 0x8c
 800f294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f298:	2a20      	cmp	r2, #32
 800f29a:	d1ce      	bne.n	800f23a <_strtod_l+0x42>
 800f29c:	3301      	adds	r3, #1
 800f29e:	931d      	str	r3, [sp, #116]	; 0x74
 800f2a0:	e7c0      	b.n	800f224 <_strtod_l+0x2c>
 800f2a2:	2a2d      	cmp	r2, #45	; 0x2d
 800f2a4:	d1c9      	bne.n	800f23a <_strtod_l+0x42>
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	920e      	str	r2, [sp, #56]	; 0x38
 800f2aa:	1c5a      	adds	r2, r3, #1
 800f2ac:	921d      	str	r2, [sp, #116]	; 0x74
 800f2ae:	785b      	ldrb	r3, [r3, #1]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d1c4      	bne.n	800f23e <_strtod_l+0x46>
 800f2b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f2b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	f040 8576 	bne.w	800fdac <_strtod_l+0xbb4>
 800f2c0:	4652      	mov	r2, sl
 800f2c2:	465b      	mov	r3, fp
 800f2c4:	e7e3      	b.n	800f28e <_strtod_l+0x96>
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	e7ee      	b.n	800f2a8 <_strtod_l+0xb0>
 800f2ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f2cc:	b13a      	cbz	r2, 800f2de <_strtod_l+0xe6>
 800f2ce:	2135      	movs	r1, #53	; 0x35
 800f2d0:	a820      	add	r0, sp, #128	; 0x80
 800f2d2:	f002 fd56 	bl	8011d82 <__copybits>
 800f2d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f2d8:	4620      	mov	r0, r4
 800f2da:	f002 f91b 	bl	8011514 <_Bfree>
 800f2de:	3f01      	subs	r7, #1
 800f2e0:	2f05      	cmp	r7, #5
 800f2e2:	d807      	bhi.n	800f2f4 <_strtod_l+0xfc>
 800f2e4:	e8df f007 	tbb	[pc, r7]
 800f2e8:	1d180b0e 	.word	0x1d180b0e
 800f2ec:	030e      	.short	0x030e
 800f2ee:	f04f 0b00 	mov.w	fp, #0
 800f2f2:	46da      	mov	sl, fp
 800f2f4:	0728      	lsls	r0, r5, #28
 800f2f6:	d5c1      	bpl.n	800f27c <_strtod_l+0x84>
 800f2f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f2fc:	e7be      	b.n	800f27c <_strtod_l+0x84>
 800f2fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800f302:	e7f7      	b.n	800f2f4 <_strtod_l+0xfc>
 800f304:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800f308:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f30a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f30e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f312:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f316:	e7ed      	b.n	800f2f4 <_strtod_l+0xfc>
 800f318:	f8df b184 	ldr.w	fp, [pc, #388]	; 800f4a0 <_strtod_l+0x2a8>
 800f31c:	f04f 0a00 	mov.w	sl, #0
 800f320:	e7e8      	b.n	800f2f4 <_strtod_l+0xfc>
 800f322:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f326:	f04f 3aff 	mov.w	sl, #4294967295
 800f32a:	e7e3      	b.n	800f2f4 <_strtod_l+0xfc>
 800f32c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f32e:	1c5a      	adds	r2, r3, #1
 800f330:	921d      	str	r2, [sp, #116]	; 0x74
 800f332:	785b      	ldrb	r3, [r3, #1]
 800f334:	2b30      	cmp	r3, #48	; 0x30
 800f336:	d0f9      	beq.n	800f32c <_strtod_l+0x134>
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d09f      	beq.n	800f27c <_strtod_l+0x84>
 800f33c:	2301      	movs	r3, #1
 800f33e:	f04f 0900 	mov.w	r9, #0
 800f342:	9304      	str	r3, [sp, #16]
 800f344:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f346:	930a      	str	r3, [sp, #40]	; 0x28
 800f348:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f34c:	464f      	mov	r7, r9
 800f34e:	220a      	movs	r2, #10
 800f350:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f352:	7806      	ldrb	r6, [r0, #0]
 800f354:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f358:	b2d9      	uxtb	r1, r3
 800f35a:	2909      	cmp	r1, #9
 800f35c:	d92a      	bls.n	800f3b4 <_strtod_l+0x1bc>
 800f35e:	9907      	ldr	r1, [sp, #28]
 800f360:	462a      	mov	r2, r5
 800f362:	f003 f8d9 	bl	8012518 <strncmp>
 800f366:	b398      	cbz	r0, 800f3d0 <_strtod_l+0x1d8>
 800f368:	2000      	movs	r0, #0
 800f36a:	4633      	mov	r3, r6
 800f36c:	463d      	mov	r5, r7
 800f36e:	9007      	str	r0, [sp, #28]
 800f370:	4602      	mov	r2, r0
 800f372:	2b65      	cmp	r3, #101	; 0x65
 800f374:	d001      	beq.n	800f37a <_strtod_l+0x182>
 800f376:	2b45      	cmp	r3, #69	; 0x45
 800f378:	d118      	bne.n	800f3ac <_strtod_l+0x1b4>
 800f37a:	b91d      	cbnz	r5, 800f384 <_strtod_l+0x18c>
 800f37c:	9b04      	ldr	r3, [sp, #16]
 800f37e:	4303      	orrs	r3, r0
 800f380:	d098      	beq.n	800f2b4 <_strtod_l+0xbc>
 800f382:	2500      	movs	r5, #0
 800f384:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800f388:	f108 0301 	add.w	r3, r8, #1
 800f38c:	931d      	str	r3, [sp, #116]	; 0x74
 800f38e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f392:	2b2b      	cmp	r3, #43	; 0x2b
 800f394:	d075      	beq.n	800f482 <_strtod_l+0x28a>
 800f396:	2b2d      	cmp	r3, #45	; 0x2d
 800f398:	d07b      	beq.n	800f492 <_strtod_l+0x29a>
 800f39a:	f04f 0c00 	mov.w	ip, #0
 800f39e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f3a2:	2909      	cmp	r1, #9
 800f3a4:	f240 8082 	bls.w	800f4ac <_strtod_l+0x2b4>
 800f3a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f3ac:	2600      	movs	r6, #0
 800f3ae:	e09d      	b.n	800f4ec <_strtod_l+0x2f4>
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	e7c4      	b.n	800f33e <_strtod_l+0x146>
 800f3b4:	2f08      	cmp	r7, #8
 800f3b6:	bfd8      	it	le
 800f3b8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f3ba:	f100 0001 	add.w	r0, r0, #1
 800f3be:	bfda      	itte	le
 800f3c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800f3c4:	9309      	strle	r3, [sp, #36]	; 0x24
 800f3c6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f3ca:	3701      	adds	r7, #1
 800f3cc:	901d      	str	r0, [sp, #116]	; 0x74
 800f3ce:	e7bf      	b.n	800f350 <_strtod_l+0x158>
 800f3d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f3d2:	195a      	adds	r2, r3, r5
 800f3d4:	921d      	str	r2, [sp, #116]	; 0x74
 800f3d6:	5d5b      	ldrb	r3, [r3, r5]
 800f3d8:	2f00      	cmp	r7, #0
 800f3da:	d037      	beq.n	800f44c <_strtod_l+0x254>
 800f3dc:	9007      	str	r0, [sp, #28]
 800f3de:	463d      	mov	r5, r7
 800f3e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f3e4:	2a09      	cmp	r2, #9
 800f3e6:	d912      	bls.n	800f40e <_strtod_l+0x216>
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	e7c2      	b.n	800f372 <_strtod_l+0x17a>
 800f3ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f3ee:	1c5a      	adds	r2, r3, #1
 800f3f0:	921d      	str	r2, [sp, #116]	; 0x74
 800f3f2:	785b      	ldrb	r3, [r3, #1]
 800f3f4:	3001      	adds	r0, #1
 800f3f6:	2b30      	cmp	r3, #48	; 0x30
 800f3f8:	d0f8      	beq.n	800f3ec <_strtod_l+0x1f4>
 800f3fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f3fe:	2a08      	cmp	r2, #8
 800f400:	f200 84db 	bhi.w	800fdba <_strtod_l+0xbc2>
 800f404:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f406:	9007      	str	r0, [sp, #28]
 800f408:	2000      	movs	r0, #0
 800f40a:	920a      	str	r2, [sp, #40]	; 0x28
 800f40c:	4605      	mov	r5, r0
 800f40e:	3b30      	subs	r3, #48	; 0x30
 800f410:	f100 0201 	add.w	r2, r0, #1
 800f414:	d014      	beq.n	800f440 <_strtod_l+0x248>
 800f416:	9907      	ldr	r1, [sp, #28]
 800f418:	4411      	add	r1, r2
 800f41a:	9107      	str	r1, [sp, #28]
 800f41c:	462a      	mov	r2, r5
 800f41e:	eb00 0e05 	add.w	lr, r0, r5
 800f422:	210a      	movs	r1, #10
 800f424:	4572      	cmp	r2, lr
 800f426:	d113      	bne.n	800f450 <_strtod_l+0x258>
 800f428:	182a      	adds	r2, r5, r0
 800f42a:	2a08      	cmp	r2, #8
 800f42c:	f105 0501 	add.w	r5, r5, #1
 800f430:	4405      	add	r5, r0
 800f432:	dc1c      	bgt.n	800f46e <_strtod_l+0x276>
 800f434:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f436:	220a      	movs	r2, #10
 800f438:	fb02 3301 	mla	r3, r2, r1, r3
 800f43c:	9309      	str	r3, [sp, #36]	; 0x24
 800f43e:	2200      	movs	r2, #0
 800f440:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f442:	1c59      	adds	r1, r3, #1
 800f444:	911d      	str	r1, [sp, #116]	; 0x74
 800f446:	785b      	ldrb	r3, [r3, #1]
 800f448:	4610      	mov	r0, r2
 800f44a:	e7c9      	b.n	800f3e0 <_strtod_l+0x1e8>
 800f44c:	4638      	mov	r0, r7
 800f44e:	e7d2      	b.n	800f3f6 <_strtod_l+0x1fe>
 800f450:	2a08      	cmp	r2, #8
 800f452:	dc04      	bgt.n	800f45e <_strtod_l+0x266>
 800f454:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f456:	434e      	muls	r6, r1
 800f458:	9609      	str	r6, [sp, #36]	; 0x24
 800f45a:	3201      	adds	r2, #1
 800f45c:	e7e2      	b.n	800f424 <_strtod_l+0x22c>
 800f45e:	f102 0c01 	add.w	ip, r2, #1
 800f462:	f1bc 0f10 	cmp.w	ip, #16
 800f466:	bfd8      	it	le
 800f468:	fb01 f909 	mulle.w	r9, r1, r9
 800f46c:	e7f5      	b.n	800f45a <_strtod_l+0x262>
 800f46e:	2d10      	cmp	r5, #16
 800f470:	bfdc      	itt	le
 800f472:	220a      	movle	r2, #10
 800f474:	fb02 3909 	mlale	r9, r2, r9, r3
 800f478:	e7e1      	b.n	800f43e <_strtod_l+0x246>
 800f47a:	2300      	movs	r3, #0
 800f47c:	9307      	str	r3, [sp, #28]
 800f47e:	2201      	movs	r2, #1
 800f480:	e77c      	b.n	800f37c <_strtod_l+0x184>
 800f482:	f04f 0c00 	mov.w	ip, #0
 800f486:	f108 0302 	add.w	r3, r8, #2
 800f48a:	931d      	str	r3, [sp, #116]	; 0x74
 800f48c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f490:	e785      	b.n	800f39e <_strtod_l+0x1a6>
 800f492:	f04f 0c01 	mov.w	ip, #1
 800f496:	e7f6      	b.n	800f486 <_strtod_l+0x28e>
 800f498:	080269e4 	.word	0x080269e4
 800f49c:	080266f8 	.word	0x080266f8
 800f4a0:	7ff00000 	.word	0x7ff00000
 800f4a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f4a6:	1c59      	adds	r1, r3, #1
 800f4a8:	911d      	str	r1, [sp, #116]	; 0x74
 800f4aa:	785b      	ldrb	r3, [r3, #1]
 800f4ac:	2b30      	cmp	r3, #48	; 0x30
 800f4ae:	d0f9      	beq.n	800f4a4 <_strtod_l+0x2ac>
 800f4b0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800f4b4:	2908      	cmp	r1, #8
 800f4b6:	f63f af79 	bhi.w	800f3ac <_strtod_l+0x1b4>
 800f4ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800f4be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f4c0:	9308      	str	r3, [sp, #32]
 800f4c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f4c4:	1c59      	adds	r1, r3, #1
 800f4c6:	911d      	str	r1, [sp, #116]	; 0x74
 800f4c8:	785b      	ldrb	r3, [r3, #1]
 800f4ca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800f4ce:	2e09      	cmp	r6, #9
 800f4d0:	d937      	bls.n	800f542 <_strtod_l+0x34a>
 800f4d2:	9e08      	ldr	r6, [sp, #32]
 800f4d4:	1b89      	subs	r1, r1, r6
 800f4d6:	2908      	cmp	r1, #8
 800f4d8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f4dc:	dc02      	bgt.n	800f4e4 <_strtod_l+0x2ec>
 800f4de:	4576      	cmp	r6, lr
 800f4e0:	bfa8      	it	ge
 800f4e2:	4676      	movge	r6, lr
 800f4e4:	f1bc 0f00 	cmp.w	ip, #0
 800f4e8:	d000      	beq.n	800f4ec <_strtod_l+0x2f4>
 800f4ea:	4276      	negs	r6, r6
 800f4ec:	2d00      	cmp	r5, #0
 800f4ee:	d14f      	bne.n	800f590 <_strtod_l+0x398>
 800f4f0:	9904      	ldr	r1, [sp, #16]
 800f4f2:	4301      	orrs	r1, r0
 800f4f4:	f47f aec2 	bne.w	800f27c <_strtod_l+0x84>
 800f4f8:	2a00      	cmp	r2, #0
 800f4fa:	f47f aedb 	bne.w	800f2b4 <_strtod_l+0xbc>
 800f4fe:	2b69      	cmp	r3, #105	; 0x69
 800f500:	d027      	beq.n	800f552 <_strtod_l+0x35a>
 800f502:	dc24      	bgt.n	800f54e <_strtod_l+0x356>
 800f504:	2b49      	cmp	r3, #73	; 0x49
 800f506:	d024      	beq.n	800f552 <_strtod_l+0x35a>
 800f508:	2b4e      	cmp	r3, #78	; 0x4e
 800f50a:	f47f aed3 	bne.w	800f2b4 <_strtod_l+0xbc>
 800f50e:	499e      	ldr	r1, [pc, #632]	; (800f788 <_strtod_l+0x590>)
 800f510:	a81d      	add	r0, sp, #116	; 0x74
 800f512:	f001 fee3 	bl	80112dc <__match>
 800f516:	2800      	cmp	r0, #0
 800f518:	f43f aecc 	beq.w	800f2b4 <_strtod_l+0xbc>
 800f51c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	2b28      	cmp	r3, #40	; 0x28
 800f522:	d12d      	bne.n	800f580 <_strtod_l+0x388>
 800f524:	4999      	ldr	r1, [pc, #612]	; (800f78c <_strtod_l+0x594>)
 800f526:	aa20      	add	r2, sp, #128	; 0x80
 800f528:	a81d      	add	r0, sp, #116	; 0x74
 800f52a:	f001 feeb 	bl	8011304 <__hexnan>
 800f52e:	2805      	cmp	r0, #5
 800f530:	d126      	bne.n	800f580 <_strtod_l+0x388>
 800f532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f534:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800f538:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f53c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f540:	e69c      	b.n	800f27c <_strtod_l+0x84>
 800f542:	210a      	movs	r1, #10
 800f544:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f548:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f54c:	e7b9      	b.n	800f4c2 <_strtod_l+0x2ca>
 800f54e:	2b6e      	cmp	r3, #110	; 0x6e
 800f550:	e7db      	b.n	800f50a <_strtod_l+0x312>
 800f552:	498f      	ldr	r1, [pc, #572]	; (800f790 <_strtod_l+0x598>)
 800f554:	a81d      	add	r0, sp, #116	; 0x74
 800f556:	f001 fec1 	bl	80112dc <__match>
 800f55a:	2800      	cmp	r0, #0
 800f55c:	f43f aeaa 	beq.w	800f2b4 <_strtod_l+0xbc>
 800f560:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f562:	498c      	ldr	r1, [pc, #560]	; (800f794 <_strtod_l+0x59c>)
 800f564:	3b01      	subs	r3, #1
 800f566:	a81d      	add	r0, sp, #116	; 0x74
 800f568:	931d      	str	r3, [sp, #116]	; 0x74
 800f56a:	f001 feb7 	bl	80112dc <__match>
 800f56e:	b910      	cbnz	r0, 800f576 <_strtod_l+0x37e>
 800f570:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f572:	3301      	adds	r3, #1
 800f574:	931d      	str	r3, [sp, #116]	; 0x74
 800f576:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800f7a4 <_strtod_l+0x5ac>
 800f57a:	f04f 0a00 	mov.w	sl, #0
 800f57e:	e67d      	b.n	800f27c <_strtod_l+0x84>
 800f580:	4885      	ldr	r0, [pc, #532]	; (800f798 <_strtod_l+0x5a0>)
 800f582:	f002 ffb1 	bl	80124e8 <nan>
 800f586:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f58a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f58e:	e675      	b.n	800f27c <_strtod_l+0x84>
 800f590:	9b07      	ldr	r3, [sp, #28]
 800f592:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f594:	1af3      	subs	r3, r6, r3
 800f596:	2f00      	cmp	r7, #0
 800f598:	bf08      	it	eq
 800f59a:	462f      	moveq	r7, r5
 800f59c:	2d10      	cmp	r5, #16
 800f59e:	9308      	str	r3, [sp, #32]
 800f5a0:	46a8      	mov	r8, r5
 800f5a2:	bfa8      	it	ge
 800f5a4:	f04f 0810 	movge.w	r8, #16
 800f5a8:	f7f0 ffc4 	bl	8000534 <__aeabi_ui2d>
 800f5ac:	2d09      	cmp	r5, #9
 800f5ae:	4682      	mov	sl, r0
 800f5b0:	468b      	mov	fp, r1
 800f5b2:	dd13      	ble.n	800f5dc <_strtod_l+0x3e4>
 800f5b4:	4b79      	ldr	r3, [pc, #484]	; (800f79c <_strtod_l+0x5a4>)
 800f5b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f5ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f5be:	f7f1 f833 	bl	8000628 <__aeabi_dmul>
 800f5c2:	4682      	mov	sl, r0
 800f5c4:	4648      	mov	r0, r9
 800f5c6:	468b      	mov	fp, r1
 800f5c8:	f7f0 ffb4 	bl	8000534 <__aeabi_ui2d>
 800f5cc:	4602      	mov	r2, r0
 800f5ce:	460b      	mov	r3, r1
 800f5d0:	4650      	mov	r0, sl
 800f5d2:	4659      	mov	r1, fp
 800f5d4:	f7f0 fe72 	bl	80002bc <__adddf3>
 800f5d8:	4682      	mov	sl, r0
 800f5da:	468b      	mov	fp, r1
 800f5dc:	2d0f      	cmp	r5, #15
 800f5de:	dc38      	bgt.n	800f652 <_strtod_l+0x45a>
 800f5e0:	9b08      	ldr	r3, [sp, #32]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	f43f ae4a 	beq.w	800f27c <_strtod_l+0x84>
 800f5e8:	dd24      	ble.n	800f634 <_strtod_l+0x43c>
 800f5ea:	2b16      	cmp	r3, #22
 800f5ec:	dc0b      	bgt.n	800f606 <_strtod_l+0x40e>
 800f5ee:	4d6b      	ldr	r5, [pc, #428]	; (800f79c <_strtod_l+0x5a4>)
 800f5f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800f5f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f5f8:	4652      	mov	r2, sl
 800f5fa:	465b      	mov	r3, fp
 800f5fc:	f7f1 f814 	bl	8000628 <__aeabi_dmul>
 800f600:	4682      	mov	sl, r0
 800f602:	468b      	mov	fp, r1
 800f604:	e63a      	b.n	800f27c <_strtod_l+0x84>
 800f606:	9a08      	ldr	r2, [sp, #32]
 800f608:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f60c:	4293      	cmp	r3, r2
 800f60e:	db20      	blt.n	800f652 <_strtod_l+0x45a>
 800f610:	4c62      	ldr	r4, [pc, #392]	; (800f79c <_strtod_l+0x5a4>)
 800f612:	f1c5 050f 	rsb	r5, r5, #15
 800f616:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f61a:	4652      	mov	r2, sl
 800f61c:	465b      	mov	r3, fp
 800f61e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f622:	f7f1 f801 	bl	8000628 <__aeabi_dmul>
 800f626:	9b08      	ldr	r3, [sp, #32]
 800f628:	1b5d      	subs	r5, r3, r5
 800f62a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f62e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f632:	e7e3      	b.n	800f5fc <_strtod_l+0x404>
 800f634:	9b08      	ldr	r3, [sp, #32]
 800f636:	3316      	adds	r3, #22
 800f638:	db0b      	blt.n	800f652 <_strtod_l+0x45a>
 800f63a:	9b07      	ldr	r3, [sp, #28]
 800f63c:	4a57      	ldr	r2, [pc, #348]	; (800f79c <_strtod_l+0x5a4>)
 800f63e:	1b9e      	subs	r6, r3, r6
 800f640:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f644:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f648:	4650      	mov	r0, sl
 800f64a:	4659      	mov	r1, fp
 800f64c:	f7f1 f916 	bl	800087c <__aeabi_ddiv>
 800f650:	e7d6      	b.n	800f600 <_strtod_l+0x408>
 800f652:	9b08      	ldr	r3, [sp, #32]
 800f654:	eba5 0808 	sub.w	r8, r5, r8
 800f658:	4498      	add	r8, r3
 800f65a:	f1b8 0f00 	cmp.w	r8, #0
 800f65e:	dd71      	ble.n	800f744 <_strtod_l+0x54c>
 800f660:	f018 030f 	ands.w	r3, r8, #15
 800f664:	d00a      	beq.n	800f67c <_strtod_l+0x484>
 800f666:	494d      	ldr	r1, [pc, #308]	; (800f79c <_strtod_l+0x5a4>)
 800f668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f66c:	4652      	mov	r2, sl
 800f66e:	465b      	mov	r3, fp
 800f670:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f674:	f7f0 ffd8 	bl	8000628 <__aeabi_dmul>
 800f678:	4682      	mov	sl, r0
 800f67a:	468b      	mov	fp, r1
 800f67c:	f038 080f 	bics.w	r8, r8, #15
 800f680:	d04d      	beq.n	800f71e <_strtod_l+0x526>
 800f682:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f686:	dd22      	ble.n	800f6ce <_strtod_l+0x4d6>
 800f688:	2500      	movs	r5, #0
 800f68a:	462e      	mov	r6, r5
 800f68c:	9509      	str	r5, [sp, #36]	; 0x24
 800f68e:	9507      	str	r5, [sp, #28]
 800f690:	2322      	movs	r3, #34	; 0x22
 800f692:	f8df b110 	ldr.w	fp, [pc, #272]	; 800f7a4 <_strtod_l+0x5ac>
 800f696:	6023      	str	r3, [r4, #0]
 800f698:	f04f 0a00 	mov.w	sl, #0
 800f69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	f43f adec 	beq.w	800f27c <_strtod_l+0x84>
 800f6a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	f001 ff34 	bl	8011514 <_Bfree>
 800f6ac:	9907      	ldr	r1, [sp, #28]
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f001 ff30 	bl	8011514 <_Bfree>
 800f6b4:	4631      	mov	r1, r6
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	f001 ff2c 	bl	8011514 <_Bfree>
 800f6bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f001 ff28 	bl	8011514 <_Bfree>
 800f6c4:	4629      	mov	r1, r5
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f001 ff24 	bl	8011514 <_Bfree>
 800f6cc:	e5d6      	b.n	800f27c <_strtod_l+0x84>
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f6d4:	4650      	mov	r0, sl
 800f6d6:	4659      	mov	r1, fp
 800f6d8:	4699      	mov	r9, r3
 800f6da:	f1b8 0f01 	cmp.w	r8, #1
 800f6de:	dc21      	bgt.n	800f724 <_strtod_l+0x52c>
 800f6e0:	b10b      	cbz	r3, 800f6e6 <_strtod_l+0x4ee>
 800f6e2:	4682      	mov	sl, r0
 800f6e4:	468b      	mov	fp, r1
 800f6e6:	4b2e      	ldr	r3, [pc, #184]	; (800f7a0 <_strtod_l+0x5a8>)
 800f6e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f6ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f6f0:	4652      	mov	r2, sl
 800f6f2:	465b      	mov	r3, fp
 800f6f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f6f8:	f7f0 ff96 	bl	8000628 <__aeabi_dmul>
 800f6fc:	4b29      	ldr	r3, [pc, #164]	; (800f7a4 <_strtod_l+0x5ac>)
 800f6fe:	460a      	mov	r2, r1
 800f700:	400b      	ands	r3, r1
 800f702:	4929      	ldr	r1, [pc, #164]	; (800f7a8 <_strtod_l+0x5b0>)
 800f704:	428b      	cmp	r3, r1
 800f706:	4682      	mov	sl, r0
 800f708:	d8be      	bhi.n	800f688 <_strtod_l+0x490>
 800f70a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f70e:	428b      	cmp	r3, r1
 800f710:	bf86      	itte	hi
 800f712:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f7ac <_strtod_l+0x5b4>
 800f716:	f04f 3aff 	movhi.w	sl, #4294967295
 800f71a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f71e:	2300      	movs	r3, #0
 800f720:	9304      	str	r3, [sp, #16]
 800f722:	e081      	b.n	800f828 <_strtod_l+0x630>
 800f724:	f018 0f01 	tst.w	r8, #1
 800f728:	d007      	beq.n	800f73a <_strtod_l+0x542>
 800f72a:	4b1d      	ldr	r3, [pc, #116]	; (800f7a0 <_strtod_l+0x5a8>)
 800f72c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f734:	f7f0 ff78 	bl	8000628 <__aeabi_dmul>
 800f738:	2301      	movs	r3, #1
 800f73a:	f109 0901 	add.w	r9, r9, #1
 800f73e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f742:	e7ca      	b.n	800f6da <_strtod_l+0x4e2>
 800f744:	d0eb      	beq.n	800f71e <_strtod_l+0x526>
 800f746:	f1c8 0800 	rsb	r8, r8, #0
 800f74a:	f018 020f 	ands.w	r2, r8, #15
 800f74e:	d00a      	beq.n	800f766 <_strtod_l+0x56e>
 800f750:	4b12      	ldr	r3, [pc, #72]	; (800f79c <_strtod_l+0x5a4>)
 800f752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f756:	4650      	mov	r0, sl
 800f758:	4659      	mov	r1, fp
 800f75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75e:	f7f1 f88d 	bl	800087c <__aeabi_ddiv>
 800f762:	4682      	mov	sl, r0
 800f764:	468b      	mov	fp, r1
 800f766:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f76a:	d0d8      	beq.n	800f71e <_strtod_l+0x526>
 800f76c:	f1b8 0f1f 	cmp.w	r8, #31
 800f770:	dd1e      	ble.n	800f7b0 <_strtod_l+0x5b8>
 800f772:	2500      	movs	r5, #0
 800f774:	462e      	mov	r6, r5
 800f776:	9509      	str	r5, [sp, #36]	; 0x24
 800f778:	9507      	str	r5, [sp, #28]
 800f77a:	2322      	movs	r3, #34	; 0x22
 800f77c:	f04f 0a00 	mov.w	sl, #0
 800f780:	f04f 0b00 	mov.w	fp, #0
 800f784:	6023      	str	r3, [r4, #0]
 800f786:	e789      	b.n	800f69c <_strtod_l+0x4a4>
 800f788:	080266c9 	.word	0x080266c9
 800f78c:	0802670c 	.word	0x0802670c
 800f790:	080266c1 	.word	0x080266c1
 800f794:	08026900 	.word	0x08026900
 800f798:	080267fb 	.word	0x080267fb
 800f79c:	08026a80 	.word	0x08026a80
 800f7a0:	08026a58 	.word	0x08026a58
 800f7a4:	7ff00000 	.word	0x7ff00000
 800f7a8:	7ca00000 	.word	0x7ca00000
 800f7ac:	7fefffff 	.word	0x7fefffff
 800f7b0:	f018 0310 	ands.w	r3, r8, #16
 800f7b4:	bf18      	it	ne
 800f7b6:	236a      	movne	r3, #106	; 0x6a
 800f7b8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800fb70 <_strtod_l+0x978>
 800f7bc:	9304      	str	r3, [sp, #16]
 800f7be:	4650      	mov	r0, sl
 800f7c0:	4659      	mov	r1, fp
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	f018 0f01 	tst.w	r8, #1
 800f7c8:	d004      	beq.n	800f7d4 <_strtod_l+0x5dc>
 800f7ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f7ce:	f7f0 ff2b 	bl	8000628 <__aeabi_dmul>
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f7d8:	f109 0908 	add.w	r9, r9, #8
 800f7dc:	d1f2      	bne.n	800f7c4 <_strtod_l+0x5cc>
 800f7de:	b10b      	cbz	r3, 800f7e4 <_strtod_l+0x5ec>
 800f7e0:	4682      	mov	sl, r0
 800f7e2:	468b      	mov	fp, r1
 800f7e4:	9b04      	ldr	r3, [sp, #16]
 800f7e6:	b1bb      	cbz	r3, 800f818 <_strtod_l+0x620>
 800f7e8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f7ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	4659      	mov	r1, fp
 800f7f4:	dd10      	ble.n	800f818 <_strtod_l+0x620>
 800f7f6:	2b1f      	cmp	r3, #31
 800f7f8:	f340 8128 	ble.w	800fa4c <_strtod_l+0x854>
 800f7fc:	2b34      	cmp	r3, #52	; 0x34
 800f7fe:	bfde      	ittt	le
 800f800:	3b20      	suble	r3, #32
 800f802:	f04f 32ff 	movle.w	r2, #4294967295
 800f806:	fa02 f303 	lslle.w	r3, r2, r3
 800f80a:	f04f 0a00 	mov.w	sl, #0
 800f80e:	bfcc      	ite	gt
 800f810:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f814:	ea03 0b01 	andle.w	fp, r3, r1
 800f818:	2200      	movs	r2, #0
 800f81a:	2300      	movs	r3, #0
 800f81c:	4650      	mov	r0, sl
 800f81e:	4659      	mov	r1, fp
 800f820:	f7f1 f96a 	bl	8000af8 <__aeabi_dcmpeq>
 800f824:	2800      	cmp	r0, #0
 800f826:	d1a4      	bne.n	800f772 <_strtod_l+0x57a>
 800f828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f82a:	9300      	str	r3, [sp, #0]
 800f82c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f82e:	462b      	mov	r3, r5
 800f830:	463a      	mov	r2, r7
 800f832:	4620      	mov	r0, r4
 800f834:	f001 feda 	bl	80115ec <__s2b>
 800f838:	9009      	str	r0, [sp, #36]	; 0x24
 800f83a:	2800      	cmp	r0, #0
 800f83c:	f43f af24 	beq.w	800f688 <_strtod_l+0x490>
 800f840:	9b07      	ldr	r3, [sp, #28]
 800f842:	1b9e      	subs	r6, r3, r6
 800f844:	9b08      	ldr	r3, [sp, #32]
 800f846:	2b00      	cmp	r3, #0
 800f848:	bfb4      	ite	lt
 800f84a:	4633      	movlt	r3, r6
 800f84c:	2300      	movge	r3, #0
 800f84e:	9310      	str	r3, [sp, #64]	; 0x40
 800f850:	9b08      	ldr	r3, [sp, #32]
 800f852:	2500      	movs	r5, #0
 800f854:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f858:	9318      	str	r3, [sp, #96]	; 0x60
 800f85a:	462e      	mov	r6, r5
 800f85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f85e:	4620      	mov	r0, r4
 800f860:	6859      	ldr	r1, [r3, #4]
 800f862:	f001 fe17 	bl	8011494 <_Balloc>
 800f866:	9007      	str	r0, [sp, #28]
 800f868:	2800      	cmp	r0, #0
 800f86a:	f43f af11 	beq.w	800f690 <_strtod_l+0x498>
 800f86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f870:	691a      	ldr	r2, [r3, #16]
 800f872:	3202      	adds	r2, #2
 800f874:	f103 010c 	add.w	r1, r3, #12
 800f878:	0092      	lsls	r2, r2, #2
 800f87a:	300c      	adds	r0, #12
 800f87c:	f001 fdfc 	bl	8011478 <memcpy>
 800f880:	ec4b ab10 	vmov	d0, sl, fp
 800f884:	aa20      	add	r2, sp, #128	; 0x80
 800f886:	a91f      	add	r1, sp, #124	; 0x7c
 800f888:	4620      	mov	r0, r4
 800f88a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f88e:	f002 f9e9 	bl	8011c64 <__d2b>
 800f892:	901e      	str	r0, [sp, #120]	; 0x78
 800f894:	2800      	cmp	r0, #0
 800f896:	f43f aefb 	beq.w	800f690 <_strtod_l+0x498>
 800f89a:	2101      	movs	r1, #1
 800f89c:	4620      	mov	r0, r4
 800f89e:	f001 ff3f 	bl	8011720 <__i2b>
 800f8a2:	4606      	mov	r6, r0
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	f43f aef3 	beq.w	800f690 <_strtod_l+0x498>
 800f8aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f8ac:	9904      	ldr	r1, [sp, #16]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	bfab      	itete	ge
 800f8b2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800f8b4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800f8b6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800f8b8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800f8bc:	bfac      	ite	ge
 800f8be:	eb03 0902 	addge.w	r9, r3, r2
 800f8c2:	1ad7      	sublt	r7, r2, r3
 800f8c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f8c6:	eba3 0801 	sub.w	r8, r3, r1
 800f8ca:	4490      	add	r8, r2
 800f8cc:	4ba3      	ldr	r3, [pc, #652]	; (800fb5c <_strtod_l+0x964>)
 800f8ce:	f108 38ff 	add.w	r8, r8, #4294967295
 800f8d2:	4598      	cmp	r8, r3
 800f8d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f8d8:	f280 80cc 	bge.w	800fa74 <_strtod_l+0x87c>
 800f8dc:	eba3 0308 	sub.w	r3, r3, r8
 800f8e0:	2b1f      	cmp	r3, #31
 800f8e2:	eba2 0203 	sub.w	r2, r2, r3
 800f8e6:	f04f 0101 	mov.w	r1, #1
 800f8ea:	f300 80b6 	bgt.w	800fa5a <_strtod_l+0x862>
 800f8ee:	fa01 f303 	lsl.w	r3, r1, r3
 800f8f2:	9311      	str	r3, [sp, #68]	; 0x44
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	930c      	str	r3, [sp, #48]	; 0x30
 800f8f8:	eb09 0802 	add.w	r8, r9, r2
 800f8fc:	9b04      	ldr	r3, [sp, #16]
 800f8fe:	45c1      	cmp	r9, r8
 800f900:	4417      	add	r7, r2
 800f902:	441f      	add	r7, r3
 800f904:	464b      	mov	r3, r9
 800f906:	bfa8      	it	ge
 800f908:	4643      	movge	r3, r8
 800f90a:	42bb      	cmp	r3, r7
 800f90c:	bfa8      	it	ge
 800f90e:	463b      	movge	r3, r7
 800f910:	2b00      	cmp	r3, #0
 800f912:	bfc2      	ittt	gt
 800f914:	eba8 0803 	subgt.w	r8, r8, r3
 800f918:	1aff      	subgt	r7, r7, r3
 800f91a:	eba9 0903 	subgt.w	r9, r9, r3
 800f91e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f920:	2b00      	cmp	r3, #0
 800f922:	dd17      	ble.n	800f954 <_strtod_l+0x75c>
 800f924:	4631      	mov	r1, r6
 800f926:	461a      	mov	r2, r3
 800f928:	4620      	mov	r0, r4
 800f92a:	f001 ffb5 	bl	8011898 <__pow5mult>
 800f92e:	4606      	mov	r6, r0
 800f930:	2800      	cmp	r0, #0
 800f932:	f43f aead 	beq.w	800f690 <_strtod_l+0x498>
 800f936:	4601      	mov	r1, r0
 800f938:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f93a:	4620      	mov	r0, r4
 800f93c:	f001 ff06 	bl	801174c <__multiply>
 800f940:	900f      	str	r0, [sp, #60]	; 0x3c
 800f942:	2800      	cmp	r0, #0
 800f944:	f43f aea4 	beq.w	800f690 <_strtod_l+0x498>
 800f948:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f94a:	4620      	mov	r0, r4
 800f94c:	f001 fde2 	bl	8011514 <_Bfree>
 800f950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f952:	931e      	str	r3, [sp, #120]	; 0x78
 800f954:	f1b8 0f00 	cmp.w	r8, #0
 800f958:	f300 8091 	bgt.w	800fa7e <_strtod_l+0x886>
 800f95c:	9b08      	ldr	r3, [sp, #32]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	dd08      	ble.n	800f974 <_strtod_l+0x77c>
 800f962:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f964:	9907      	ldr	r1, [sp, #28]
 800f966:	4620      	mov	r0, r4
 800f968:	f001 ff96 	bl	8011898 <__pow5mult>
 800f96c:	9007      	str	r0, [sp, #28]
 800f96e:	2800      	cmp	r0, #0
 800f970:	f43f ae8e 	beq.w	800f690 <_strtod_l+0x498>
 800f974:	2f00      	cmp	r7, #0
 800f976:	dd08      	ble.n	800f98a <_strtod_l+0x792>
 800f978:	9907      	ldr	r1, [sp, #28]
 800f97a:	463a      	mov	r2, r7
 800f97c:	4620      	mov	r0, r4
 800f97e:	f001 ffe5 	bl	801194c <__lshift>
 800f982:	9007      	str	r0, [sp, #28]
 800f984:	2800      	cmp	r0, #0
 800f986:	f43f ae83 	beq.w	800f690 <_strtod_l+0x498>
 800f98a:	f1b9 0f00 	cmp.w	r9, #0
 800f98e:	dd08      	ble.n	800f9a2 <_strtod_l+0x7aa>
 800f990:	4631      	mov	r1, r6
 800f992:	464a      	mov	r2, r9
 800f994:	4620      	mov	r0, r4
 800f996:	f001 ffd9 	bl	801194c <__lshift>
 800f99a:	4606      	mov	r6, r0
 800f99c:	2800      	cmp	r0, #0
 800f99e:	f43f ae77 	beq.w	800f690 <_strtod_l+0x498>
 800f9a2:	9a07      	ldr	r2, [sp, #28]
 800f9a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	f002 f858 	bl	8011a5c <__mdiff>
 800f9ac:	4605      	mov	r5, r0
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	f43f ae6e 	beq.w	800f690 <_strtod_l+0x498>
 800f9b4:	68c3      	ldr	r3, [r0, #12]
 800f9b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	60c3      	str	r3, [r0, #12]
 800f9bc:	4631      	mov	r1, r6
 800f9be:	f002 f831 	bl	8011a24 <__mcmp>
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	da65      	bge.n	800fa92 <_strtod_l+0x89a>
 800f9c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9c8:	ea53 030a 	orrs.w	r3, r3, sl
 800f9cc:	f040 8087 	bne.w	800fade <_strtod_l+0x8e6>
 800f9d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	f040 8082 	bne.w	800fade <_strtod_l+0x8e6>
 800f9da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f9de:	0d1b      	lsrs	r3, r3, #20
 800f9e0:	051b      	lsls	r3, r3, #20
 800f9e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f9e6:	d97a      	bls.n	800fade <_strtod_l+0x8e6>
 800f9e8:	696b      	ldr	r3, [r5, #20]
 800f9ea:	b913      	cbnz	r3, 800f9f2 <_strtod_l+0x7fa>
 800f9ec:	692b      	ldr	r3, [r5, #16]
 800f9ee:	2b01      	cmp	r3, #1
 800f9f0:	dd75      	ble.n	800fade <_strtod_l+0x8e6>
 800f9f2:	4629      	mov	r1, r5
 800f9f4:	2201      	movs	r2, #1
 800f9f6:	4620      	mov	r0, r4
 800f9f8:	f001 ffa8 	bl	801194c <__lshift>
 800f9fc:	4631      	mov	r1, r6
 800f9fe:	4605      	mov	r5, r0
 800fa00:	f002 f810 	bl	8011a24 <__mcmp>
 800fa04:	2800      	cmp	r0, #0
 800fa06:	dd6a      	ble.n	800fade <_strtod_l+0x8e6>
 800fa08:	9904      	ldr	r1, [sp, #16]
 800fa0a:	4a55      	ldr	r2, [pc, #340]	; (800fb60 <_strtod_l+0x968>)
 800fa0c:	465b      	mov	r3, fp
 800fa0e:	2900      	cmp	r1, #0
 800fa10:	f000 8085 	beq.w	800fb1e <_strtod_l+0x926>
 800fa14:	ea02 010b 	and.w	r1, r2, fp
 800fa18:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fa1c:	dc7f      	bgt.n	800fb1e <_strtod_l+0x926>
 800fa1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fa22:	f77f aeaa 	ble.w	800f77a <_strtod_l+0x582>
 800fa26:	4a4f      	ldr	r2, [pc, #316]	; (800fb64 <_strtod_l+0x96c>)
 800fa28:	2300      	movs	r3, #0
 800fa2a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800fa2e:	4650      	mov	r0, sl
 800fa30:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800fa34:	4659      	mov	r1, fp
 800fa36:	f7f0 fdf7 	bl	8000628 <__aeabi_dmul>
 800fa3a:	460b      	mov	r3, r1
 800fa3c:	4303      	orrs	r3, r0
 800fa3e:	bf08      	it	eq
 800fa40:	2322      	moveq	r3, #34	; 0x22
 800fa42:	4682      	mov	sl, r0
 800fa44:	468b      	mov	fp, r1
 800fa46:	bf08      	it	eq
 800fa48:	6023      	streq	r3, [r4, #0]
 800fa4a:	e62b      	b.n	800f6a4 <_strtod_l+0x4ac>
 800fa4c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa50:	fa02 f303 	lsl.w	r3, r2, r3
 800fa54:	ea03 0a0a 	and.w	sl, r3, sl
 800fa58:	e6de      	b.n	800f818 <_strtod_l+0x620>
 800fa5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fa5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800fa62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800fa66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800fa6a:	fa01 f308 	lsl.w	r3, r1, r8
 800fa6e:	930c      	str	r3, [sp, #48]	; 0x30
 800fa70:	9111      	str	r1, [sp, #68]	; 0x44
 800fa72:	e741      	b.n	800f8f8 <_strtod_l+0x700>
 800fa74:	2300      	movs	r3, #0
 800fa76:	930c      	str	r3, [sp, #48]	; 0x30
 800fa78:	2301      	movs	r3, #1
 800fa7a:	9311      	str	r3, [sp, #68]	; 0x44
 800fa7c:	e73c      	b.n	800f8f8 <_strtod_l+0x700>
 800fa7e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fa80:	4642      	mov	r2, r8
 800fa82:	4620      	mov	r0, r4
 800fa84:	f001 ff62 	bl	801194c <__lshift>
 800fa88:	901e      	str	r0, [sp, #120]	; 0x78
 800fa8a:	2800      	cmp	r0, #0
 800fa8c:	f47f af66 	bne.w	800f95c <_strtod_l+0x764>
 800fa90:	e5fe      	b.n	800f690 <_strtod_l+0x498>
 800fa92:	465f      	mov	r7, fp
 800fa94:	d16e      	bne.n	800fb74 <_strtod_l+0x97c>
 800fa96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa9c:	b342      	cbz	r2, 800faf0 <_strtod_l+0x8f8>
 800fa9e:	4a32      	ldr	r2, [pc, #200]	; (800fb68 <_strtod_l+0x970>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d128      	bne.n	800faf6 <_strtod_l+0x8fe>
 800faa4:	9b04      	ldr	r3, [sp, #16]
 800faa6:	4650      	mov	r0, sl
 800faa8:	b1eb      	cbz	r3, 800fae6 <_strtod_l+0x8ee>
 800faaa:	4a2d      	ldr	r2, [pc, #180]	; (800fb60 <_strtod_l+0x968>)
 800faac:	403a      	ands	r2, r7
 800faae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800fab2:	f04f 31ff 	mov.w	r1, #4294967295
 800fab6:	d819      	bhi.n	800faec <_strtod_l+0x8f4>
 800fab8:	0d12      	lsrs	r2, r2, #20
 800faba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fabe:	fa01 f303 	lsl.w	r3, r1, r3
 800fac2:	4298      	cmp	r0, r3
 800fac4:	d117      	bne.n	800faf6 <_strtod_l+0x8fe>
 800fac6:	4b29      	ldr	r3, [pc, #164]	; (800fb6c <_strtod_l+0x974>)
 800fac8:	429f      	cmp	r7, r3
 800faca:	d102      	bne.n	800fad2 <_strtod_l+0x8da>
 800facc:	3001      	adds	r0, #1
 800face:	f43f addf 	beq.w	800f690 <_strtod_l+0x498>
 800fad2:	4b23      	ldr	r3, [pc, #140]	; (800fb60 <_strtod_l+0x968>)
 800fad4:	403b      	ands	r3, r7
 800fad6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fada:	f04f 0a00 	mov.w	sl, #0
 800fade:	9b04      	ldr	r3, [sp, #16]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d1a0      	bne.n	800fa26 <_strtod_l+0x82e>
 800fae4:	e5de      	b.n	800f6a4 <_strtod_l+0x4ac>
 800fae6:	f04f 33ff 	mov.w	r3, #4294967295
 800faea:	e7ea      	b.n	800fac2 <_strtod_l+0x8ca>
 800faec:	460b      	mov	r3, r1
 800faee:	e7e8      	b.n	800fac2 <_strtod_l+0x8ca>
 800faf0:	ea53 030a 	orrs.w	r3, r3, sl
 800faf4:	d088      	beq.n	800fa08 <_strtod_l+0x810>
 800faf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800faf8:	b1db      	cbz	r3, 800fb32 <_strtod_l+0x93a>
 800fafa:	423b      	tst	r3, r7
 800fafc:	d0ef      	beq.n	800fade <_strtod_l+0x8e6>
 800fafe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb00:	9a04      	ldr	r2, [sp, #16]
 800fb02:	4650      	mov	r0, sl
 800fb04:	4659      	mov	r1, fp
 800fb06:	b1c3      	cbz	r3, 800fb3a <_strtod_l+0x942>
 800fb08:	f7ff fb5a 	bl	800f1c0 <sulp>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	460b      	mov	r3, r1
 800fb10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fb14:	f7f0 fbd2 	bl	80002bc <__adddf3>
 800fb18:	4682      	mov	sl, r0
 800fb1a:	468b      	mov	fp, r1
 800fb1c:	e7df      	b.n	800fade <_strtod_l+0x8e6>
 800fb1e:	4013      	ands	r3, r2
 800fb20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fb24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fb28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fb2c:	f04f 3aff 	mov.w	sl, #4294967295
 800fb30:	e7d5      	b.n	800fade <_strtod_l+0x8e6>
 800fb32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb34:	ea13 0f0a 	tst.w	r3, sl
 800fb38:	e7e0      	b.n	800fafc <_strtod_l+0x904>
 800fb3a:	f7ff fb41 	bl	800f1c0 <sulp>
 800fb3e:	4602      	mov	r2, r0
 800fb40:	460b      	mov	r3, r1
 800fb42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fb46:	f7f0 fbb7 	bl	80002b8 <__aeabi_dsub>
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	4682      	mov	sl, r0
 800fb50:	468b      	mov	fp, r1
 800fb52:	f7f0 ffd1 	bl	8000af8 <__aeabi_dcmpeq>
 800fb56:	2800      	cmp	r0, #0
 800fb58:	d0c1      	beq.n	800fade <_strtod_l+0x8e6>
 800fb5a:	e60e      	b.n	800f77a <_strtod_l+0x582>
 800fb5c:	fffffc02 	.word	0xfffffc02
 800fb60:	7ff00000 	.word	0x7ff00000
 800fb64:	39500000 	.word	0x39500000
 800fb68:	000fffff 	.word	0x000fffff
 800fb6c:	7fefffff 	.word	0x7fefffff
 800fb70:	08026720 	.word	0x08026720
 800fb74:	4631      	mov	r1, r6
 800fb76:	4628      	mov	r0, r5
 800fb78:	f002 f8d0 	bl	8011d1c <__ratio>
 800fb7c:	ec59 8b10 	vmov	r8, r9, d0
 800fb80:	ee10 0a10 	vmov	r0, s0
 800fb84:	2200      	movs	r2, #0
 800fb86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fb8a:	4649      	mov	r1, r9
 800fb8c:	f7f0 ffc8 	bl	8000b20 <__aeabi_dcmple>
 800fb90:	2800      	cmp	r0, #0
 800fb92:	d07c      	beq.n	800fc8e <_strtod_l+0xa96>
 800fb94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d04c      	beq.n	800fc34 <_strtod_l+0xa3c>
 800fb9a:	4b95      	ldr	r3, [pc, #596]	; (800fdf0 <_strtod_l+0xbf8>)
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fba2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fdf0 <_strtod_l+0xbf8>
 800fba6:	f04f 0800 	mov.w	r8, #0
 800fbaa:	4b92      	ldr	r3, [pc, #584]	; (800fdf4 <_strtod_l+0xbfc>)
 800fbac:	403b      	ands	r3, r7
 800fbae:	9311      	str	r3, [sp, #68]	; 0x44
 800fbb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fbb2:	4b91      	ldr	r3, [pc, #580]	; (800fdf8 <_strtod_l+0xc00>)
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	f040 80b2 	bne.w	800fd1e <_strtod_l+0xb26>
 800fbba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fbbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fbc2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800fbc6:	ec4b ab10 	vmov	d0, sl, fp
 800fbca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800fbce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fbd2:	f001 ffcb 	bl	8011b6c <__ulp>
 800fbd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fbda:	ec53 2b10 	vmov	r2, r3, d0
 800fbde:	f7f0 fd23 	bl	8000628 <__aeabi_dmul>
 800fbe2:	4652      	mov	r2, sl
 800fbe4:	465b      	mov	r3, fp
 800fbe6:	f7f0 fb69 	bl	80002bc <__adddf3>
 800fbea:	460b      	mov	r3, r1
 800fbec:	4981      	ldr	r1, [pc, #516]	; (800fdf4 <_strtod_l+0xbfc>)
 800fbee:	4a83      	ldr	r2, [pc, #524]	; (800fdfc <_strtod_l+0xc04>)
 800fbf0:	4019      	ands	r1, r3
 800fbf2:	4291      	cmp	r1, r2
 800fbf4:	4682      	mov	sl, r0
 800fbf6:	d95e      	bls.n	800fcb6 <_strtod_l+0xabe>
 800fbf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbfa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d103      	bne.n	800fc0a <_strtod_l+0xa12>
 800fc02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc04:	3301      	adds	r3, #1
 800fc06:	f43f ad43 	beq.w	800f690 <_strtod_l+0x498>
 800fc0a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800fe08 <_strtod_l+0xc10>
 800fc0e:	f04f 3aff 	mov.w	sl, #4294967295
 800fc12:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fc14:	4620      	mov	r0, r4
 800fc16:	f001 fc7d 	bl	8011514 <_Bfree>
 800fc1a:	9907      	ldr	r1, [sp, #28]
 800fc1c:	4620      	mov	r0, r4
 800fc1e:	f001 fc79 	bl	8011514 <_Bfree>
 800fc22:	4631      	mov	r1, r6
 800fc24:	4620      	mov	r0, r4
 800fc26:	f001 fc75 	bl	8011514 <_Bfree>
 800fc2a:	4629      	mov	r1, r5
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	f001 fc71 	bl	8011514 <_Bfree>
 800fc32:	e613      	b.n	800f85c <_strtod_l+0x664>
 800fc34:	f1ba 0f00 	cmp.w	sl, #0
 800fc38:	d11b      	bne.n	800fc72 <_strtod_l+0xa7a>
 800fc3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc3e:	b9f3      	cbnz	r3, 800fc7e <_strtod_l+0xa86>
 800fc40:	4b6b      	ldr	r3, [pc, #428]	; (800fdf0 <_strtod_l+0xbf8>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	4640      	mov	r0, r8
 800fc46:	4649      	mov	r1, r9
 800fc48:	f7f0 ff60 	bl	8000b0c <__aeabi_dcmplt>
 800fc4c:	b9d0      	cbnz	r0, 800fc84 <_strtod_l+0xa8c>
 800fc4e:	4640      	mov	r0, r8
 800fc50:	4649      	mov	r1, r9
 800fc52:	4b6b      	ldr	r3, [pc, #428]	; (800fe00 <_strtod_l+0xc08>)
 800fc54:	2200      	movs	r2, #0
 800fc56:	f7f0 fce7 	bl	8000628 <__aeabi_dmul>
 800fc5a:	4680      	mov	r8, r0
 800fc5c:	4689      	mov	r9, r1
 800fc5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fc62:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800fc66:	931b      	str	r3, [sp, #108]	; 0x6c
 800fc68:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800fc6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fc70:	e79b      	b.n	800fbaa <_strtod_l+0x9b2>
 800fc72:	f1ba 0f01 	cmp.w	sl, #1
 800fc76:	d102      	bne.n	800fc7e <_strtod_l+0xa86>
 800fc78:	2f00      	cmp	r7, #0
 800fc7a:	f43f ad7e 	beq.w	800f77a <_strtod_l+0x582>
 800fc7e:	4b61      	ldr	r3, [pc, #388]	; (800fe04 <_strtod_l+0xc0c>)
 800fc80:	2200      	movs	r2, #0
 800fc82:	e78c      	b.n	800fb9e <_strtod_l+0x9a6>
 800fc84:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800fe00 <_strtod_l+0xc08>
 800fc88:	f04f 0800 	mov.w	r8, #0
 800fc8c:	e7e7      	b.n	800fc5e <_strtod_l+0xa66>
 800fc8e:	4b5c      	ldr	r3, [pc, #368]	; (800fe00 <_strtod_l+0xc08>)
 800fc90:	4640      	mov	r0, r8
 800fc92:	4649      	mov	r1, r9
 800fc94:	2200      	movs	r2, #0
 800fc96:	f7f0 fcc7 	bl	8000628 <__aeabi_dmul>
 800fc9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc9c:	4680      	mov	r8, r0
 800fc9e:	4689      	mov	r9, r1
 800fca0:	b933      	cbnz	r3, 800fcb0 <_strtod_l+0xab8>
 800fca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fca6:	9012      	str	r0, [sp, #72]	; 0x48
 800fca8:	9313      	str	r3, [sp, #76]	; 0x4c
 800fcaa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800fcae:	e7dd      	b.n	800fc6c <_strtod_l+0xa74>
 800fcb0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800fcb4:	e7f9      	b.n	800fcaa <_strtod_l+0xab2>
 800fcb6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fcba:	9b04      	ldr	r3, [sp, #16]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d1a8      	bne.n	800fc12 <_strtod_l+0xa1a>
 800fcc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fcc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fcc6:	0d1b      	lsrs	r3, r3, #20
 800fcc8:	051b      	lsls	r3, r3, #20
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d1a1      	bne.n	800fc12 <_strtod_l+0xa1a>
 800fcce:	4640      	mov	r0, r8
 800fcd0:	4649      	mov	r1, r9
 800fcd2:	f7f1 f809 	bl	8000ce8 <__aeabi_d2lz>
 800fcd6:	f7f0 fc79 	bl	80005cc <__aeabi_l2d>
 800fcda:	4602      	mov	r2, r0
 800fcdc:	460b      	mov	r3, r1
 800fcde:	4640      	mov	r0, r8
 800fce0:	4649      	mov	r1, r9
 800fce2:	f7f0 fae9 	bl	80002b8 <__aeabi_dsub>
 800fce6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fce8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fcec:	ea43 030a 	orr.w	r3, r3, sl
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	4680      	mov	r8, r0
 800fcf4:	4689      	mov	r9, r1
 800fcf6:	d053      	beq.n	800fda0 <_strtod_l+0xba8>
 800fcf8:	a335      	add	r3, pc, #212	; (adr r3, 800fdd0 <_strtod_l+0xbd8>)
 800fcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfe:	f7f0 ff05 	bl	8000b0c <__aeabi_dcmplt>
 800fd02:	2800      	cmp	r0, #0
 800fd04:	f47f acce 	bne.w	800f6a4 <_strtod_l+0x4ac>
 800fd08:	a333      	add	r3, pc, #204	; (adr r3, 800fdd8 <_strtod_l+0xbe0>)
 800fd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0e:	4640      	mov	r0, r8
 800fd10:	4649      	mov	r1, r9
 800fd12:	f7f0 ff19 	bl	8000b48 <__aeabi_dcmpgt>
 800fd16:	2800      	cmp	r0, #0
 800fd18:	f43f af7b 	beq.w	800fc12 <_strtod_l+0xa1a>
 800fd1c:	e4c2      	b.n	800f6a4 <_strtod_l+0x4ac>
 800fd1e:	9b04      	ldr	r3, [sp, #16]
 800fd20:	b333      	cbz	r3, 800fd70 <_strtod_l+0xb78>
 800fd22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fd28:	d822      	bhi.n	800fd70 <_strtod_l+0xb78>
 800fd2a:	a32d      	add	r3, pc, #180	; (adr r3, 800fde0 <_strtod_l+0xbe8>)
 800fd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd30:	4640      	mov	r0, r8
 800fd32:	4649      	mov	r1, r9
 800fd34:	f7f0 fef4 	bl	8000b20 <__aeabi_dcmple>
 800fd38:	b1a0      	cbz	r0, 800fd64 <_strtod_l+0xb6c>
 800fd3a:	4649      	mov	r1, r9
 800fd3c:	4640      	mov	r0, r8
 800fd3e:	f7f0 ff4b 	bl	8000bd8 <__aeabi_d2uiz>
 800fd42:	2801      	cmp	r0, #1
 800fd44:	bf38      	it	cc
 800fd46:	2001      	movcc	r0, #1
 800fd48:	f7f0 fbf4 	bl	8000534 <__aeabi_ui2d>
 800fd4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd4e:	4680      	mov	r8, r0
 800fd50:	4689      	mov	r9, r1
 800fd52:	bb13      	cbnz	r3, 800fd9a <_strtod_l+0xba2>
 800fd54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd58:	9014      	str	r0, [sp, #80]	; 0x50
 800fd5a:	9315      	str	r3, [sp, #84]	; 0x54
 800fd5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fd60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fd64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fd68:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fd6c:	1a9b      	subs	r3, r3, r2
 800fd6e:	930d      	str	r3, [sp, #52]	; 0x34
 800fd70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fd74:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fd78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fd7c:	f001 fef6 	bl	8011b6c <__ulp>
 800fd80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fd84:	ec53 2b10 	vmov	r2, r3, d0
 800fd88:	f7f0 fc4e 	bl	8000628 <__aeabi_dmul>
 800fd8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fd90:	f7f0 fa94 	bl	80002bc <__adddf3>
 800fd94:	4682      	mov	sl, r0
 800fd96:	468b      	mov	fp, r1
 800fd98:	e78f      	b.n	800fcba <_strtod_l+0xac2>
 800fd9a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800fd9e:	e7dd      	b.n	800fd5c <_strtod_l+0xb64>
 800fda0:	a311      	add	r3, pc, #68	; (adr r3, 800fde8 <_strtod_l+0xbf0>)
 800fda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda6:	f7f0 feb1 	bl	8000b0c <__aeabi_dcmplt>
 800fdaa:	e7b4      	b.n	800fd16 <_strtod_l+0xb1e>
 800fdac:	2300      	movs	r3, #0
 800fdae:	930e      	str	r3, [sp, #56]	; 0x38
 800fdb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fdb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fdb4:	6013      	str	r3, [r2, #0]
 800fdb6:	f7ff ba65 	b.w	800f284 <_strtod_l+0x8c>
 800fdba:	2b65      	cmp	r3, #101	; 0x65
 800fdbc:	f43f ab5d 	beq.w	800f47a <_strtod_l+0x282>
 800fdc0:	2b45      	cmp	r3, #69	; 0x45
 800fdc2:	f43f ab5a 	beq.w	800f47a <_strtod_l+0x282>
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	f7ff bb92 	b.w	800f4f0 <_strtod_l+0x2f8>
 800fdcc:	f3af 8000 	nop.w
 800fdd0:	94a03595 	.word	0x94a03595
 800fdd4:	3fdfffff 	.word	0x3fdfffff
 800fdd8:	35afe535 	.word	0x35afe535
 800fddc:	3fe00000 	.word	0x3fe00000
 800fde0:	ffc00000 	.word	0xffc00000
 800fde4:	41dfffff 	.word	0x41dfffff
 800fde8:	94a03595 	.word	0x94a03595
 800fdec:	3fcfffff 	.word	0x3fcfffff
 800fdf0:	3ff00000 	.word	0x3ff00000
 800fdf4:	7ff00000 	.word	0x7ff00000
 800fdf8:	7fe00000 	.word	0x7fe00000
 800fdfc:	7c9fffff 	.word	0x7c9fffff
 800fe00:	3fe00000 	.word	0x3fe00000
 800fe04:	bff00000 	.word	0xbff00000
 800fe08:	7fefffff 	.word	0x7fefffff

0800fe0c <_strtod_r>:
 800fe0c:	4b01      	ldr	r3, [pc, #4]	; (800fe14 <_strtod_r+0x8>)
 800fe0e:	f7ff b9f3 	b.w	800f1f8 <_strtod_l>
 800fe12:	bf00      	nop
 800fe14:	200000a8 	.word	0x200000a8

0800fe18 <strtod>:
 800fe18:	460a      	mov	r2, r1
 800fe1a:	4601      	mov	r1, r0
 800fe1c:	4802      	ldr	r0, [pc, #8]	; (800fe28 <strtod+0x10>)
 800fe1e:	4b03      	ldr	r3, [pc, #12]	; (800fe2c <strtod+0x14>)
 800fe20:	6800      	ldr	r0, [r0, #0]
 800fe22:	f7ff b9e9 	b.w	800f1f8 <_strtod_l>
 800fe26:	bf00      	nop
 800fe28:	20000040 	.word	0x20000040
 800fe2c:	200000a8 	.word	0x200000a8

0800fe30 <strtok>:
 800fe30:	4b16      	ldr	r3, [pc, #88]	; (800fe8c <strtok+0x5c>)
 800fe32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe34:	681e      	ldr	r6, [r3, #0]
 800fe36:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800fe38:	4605      	mov	r5, r0
 800fe3a:	b9fc      	cbnz	r4, 800fe7c <strtok+0x4c>
 800fe3c:	2050      	movs	r0, #80	; 0x50
 800fe3e:	9101      	str	r1, [sp, #4]
 800fe40:	f001 fb00 	bl	8011444 <malloc>
 800fe44:	9901      	ldr	r1, [sp, #4]
 800fe46:	65b0      	str	r0, [r6, #88]	; 0x58
 800fe48:	4602      	mov	r2, r0
 800fe4a:	b920      	cbnz	r0, 800fe56 <strtok+0x26>
 800fe4c:	4b10      	ldr	r3, [pc, #64]	; (800fe90 <strtok+0x60>)
 800fe4e:	4811      	ldr	r0, [pc, #68]	; (800fe94 <strtok+0x64>)
 800fe50:	2157      	movs	r1, #87	; 0x57
 800fe52:	f000 f8d9 	bl	8010008 <__assert_func>
 800fe56:	e9c0 4400 	strd	r4, r4, [r0]
 800fe5a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800fe5e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800fe62:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800fe66:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800fe6a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800fe6e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800fe72:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800fe76:	6184      	str	r4, [r0, #24]
 800fe78:	7704      	strb	r4, [r0, #28]
 800fe7a:	6244      	str	r4, [r0, #36]	; 0x24
 800fe7c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800fe7e:	2301      	movs	r3, #1
 800fe80:	4628      	mov	r0, r5
 800fe82:	b002      	add	sp, #8
 800fe84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe88:	f000 b806 	b.w	800fe98 <__strtok_r>
 800fe8c:	20000040 	.word	0x20000040
 800fe90:	08026748 	.word	0x08026748
 800fe94:	0802675f 	.word	0x0802675f

0800fe98 <__strtok_r>:
 800fe98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe9a:	b908      	cbnz	r0, 800fea0 <__strtok_r+0x8>
 800fe9c:	6810      	ldr	r0, [r2, #0]
 800fe9e:	b188      	cbz	r0, 800fec4 <__strtok_r+0x2c>
 800fea0:	4604      	mov	r4, r0
 800fea2:	4620      	mov	r0, r4
 800fea4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800fea8:	460f      	mov	r7, r1
 800feaa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800feae:	b91e      	cbnz	r6, 800feb8 <__strtok_r+0x20>
 800feb0:	b965      	cbnz	r5, 800fecc <__strtok_r+0x34>
 800feb2:	6015      	str	r5, [r2, #0]
 800feb4:	4628      	mov	r0, r5
 800feb6:	e005      	b.n	800fec4 <__strtok_r+0x2c>
 800feb8:	42b5      	cmp	r5, r6
 800feba:	d1f6      	bne.n	800feaa <__strtok_r+0x12>
 800febc:	2b00      	cmp	r3, #0
 800febe:	d1f0      	bne.n	800fea2 <__strtok_r+0xa>
 800fec0:	6014      	str	r4, [r2, #0]
 800fec2:	7003      	strb	r3, [r0, #0]
 800fec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fec6:	461c      	mov	r4, r3
 800fec8:	e00c      	b.n	800fee4 <__strtok_r+0x4c>
 800feca:	b915      	cbnz	r5, 800fed2 <__strtok_r+0x3a>
 800fecc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fed0:	460e      	mov	r6, r1
 800fed2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800fed6:	42ab      	cmp	r3, r5
 800fed8:	d1f7      	bne.n	800feca <__strtok_r+0x32>
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d0f3      	beq.n	800fec6 <__strtok_r+0x2e>
 800fede:	2300      	movs	r3, #0
 800fee0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800fee4:	6014      	str	r4, [r2, #0]
 800fee6:	e7ed      	b.n	800fec4 <__strtok_r+0x2c>

0800fee8 <_strtol_l.isra.0>:
 800fee8:	2b01      	cmp	r3, #1
 800feea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800feee:	d001      	beq.n	800fef4 <_strtol_l.isra.0+0xc>
 800fef0:	2b24      	cmp	r3, #36	; 0x24
 800fef2:	d906      	bls.n	800ff02 <_strtol_l.isra.0+0x1a>
 800fef4:	f7fe fa92 	bl	800e41c <__errno>
 800fef8:	2316      	movs	r3, #22
 800fefa:	6003      	str	r3, [r0, #0]
 800fefc:	2000      	movs	r0, #0
 800fefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff02:	4f3a      	ldr	r7, [pc, #232]	; (800ffec <_strtol_l.isra.0+0x104>)
 800ff04:	468e      	mov	lr, r1
 800ff06:	4676      	mov	r6, lr
 800ff08:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ff0c:	5de5      	ldrb	r5, [r4, r7]
 800ff0e:	f015 0508 	ands.w	r5, r5, #8
 800ff12:	d1f8      	bne.n	800ff06 <_strtol_l.isra.0+0x1e>
 800ff14:	2c2d      	cmp	r4, #45	; 0x2d
 800ff16:	d134      	bne.n	800ff82 <_strtol_l.isra.0+0x9a>
 800ff18:	f89e 4000 	ldrb.w	r4, [lr]
 800ff1c:	f04f 0801 	mov.w	r8, #1
 800ff20:	f106 0e02 	add.w	lr, r6, #2
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d05c      	beq.n	800ffe2 <_strtol_l.isra.0+0xfa>
 800ff28:	2b10      	cmp	r3, #16
 800ff2a:	d10c      	bne.n	800ff46 <_strtol_l.isra.0+0x5e>
 800ff2c:	2c30      	cmp	r4, #48	; 0x30
 800ff2e:	d10a      	bne.n	800ff46 <_strtol_l.isra.0+0x5e>
 800ff30:	f89e 4000 	ldrb.w	r4, [lr]
 800ff34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ff38:	2c58      	cmp	r4, #88	; 0x58
 800ff3a:	d14d      	bne.n	800ffd8 <_strtol_l.isra.0+0xf0>
 800ff3c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ff40:	2310      	movs	r3, #16
 800ff42:	f10e 0e02 	add.w	lr, lr, #2
 800ff46:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ff4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ff4e:	2600      	movs	r6, #0
 800ff50:	fbbc f9f3 	udiv	r9, ip, r3
 800ff54:	4635      	mov	r5, r6
 800ff56:	fb03 ca19 	mls	sl, r3, r9, ip
 800ff5a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ff5e:	2f09      	cmp	r7, #9
 800ff60:	d818      	bhi.n	800ff94 <_strtol_l.isra.0+0xac>
 800ff62:	463c      	mov	r4, r7
 800ff64:	42a3      	cmp	r3, r4
 800ff66:	dd24      	ble.n	800ffb2 <_strtol_l.isra.0+0xca>
 800ff68:	2e00      	cmp	r6, #0
 800ff6a:	db1f      	blt.n	800ffac <_strtol_l.isra.0+0xc4>
 800ff6c:	45a9      	cmp	r9, r5
 800ff6e:	d31d      	bcc.n	800ffac <_strtol_l.isra.0+0xc4>
 800ff70:	d101      	bne.n	800ff76 <_strtol_l.isra.0+0x8e>
 800ff72:	45a2      	cmp	sl, r4
 800ff74:	db1a      	blt.n	800ffac <_strtol_l.isra.0+0xc4>
 800ff76:	fb05 4503 	mla	r5, r5, r3, r4
 800ff7a:	2601      	movs	r6, #1
 800ff7c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ff80:	e7eb      	b.n	800ff5a <_strtol_l.isra.0+0x72>
 800ff82:	2c2b      	cmp	r4, #43	; 0x2b
 800ff84:	bf08      	it	eq
 800ff86:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ff8a:	46a8      	mov	r8, r5
 800ff8c:	bf08      	it	eq
 800ff8e:	f106 0e02 	addeq.w	lr, r6, #2
 800ff92:	e7c7      	b.n	800ff24 <_strtol_l.isra.0+0x3c>
 800ff94:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ff98:	2f19      	cmp	r7, #25
 800ff9a:	d801      	bhi.n	800ffa0 <_strtol_l.isra.0+0xb8>
 800ff9c:	3c37      	subs	r4, #55	; 0x37
 800ff9e:	e7e1      	b.n	800ff64 <_strtol_l.isra.0+0x7c>
 800ffa0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ffa4:	2f19      	cmp	r7, #25
 800ffa6:	d804      	bhi.n	800ffb2 <_strtol_l.isra.0+0xca>
 800ffa8:	3c57      	subs	r4, #87	; 0x57
 800ffaa:	e7db      	b.n	800ff64 <_strtol_l.isra.0+0x7c>
 800ffac:	f04f 36ff 	mov.w	r6, #4294967295
 800ffb0:	e7e4      	b.n	800ff7c <_strtol_l.isra.0+0x94>
 800ffb2:	2e00      	cmp	r6, #0
 800ffb4:	da05      	bge.n	800ffc2 <_strtol_l.isra.0+0xda>
 800ffb6:	2322      	movs	r3, #34	; 0x22
 800ffb8:	6003      	str	r3, [r0, #0]
 800ffba:	4665      	mov	r5, ip
 800ffbc:	b942      	cbnz	r2, 800ffd0 <_strtol_l.isra.0+0xe8>
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	e79d      	b.n	800fefe <_strtol_l.isra.0+0x16>
 800ffc2:	f1b8 0f00 	cmp.w	r8, #0
 800ffc6:	d000      	beq.n	800ffca <_strtol_l.isra.0+0xe2>
 800ffc8:	426d      	negs	r5, r5
 800ffca:	2a00      	cmp	r2, #0
 800ffcc:	d0f7      	beq.n	800ffbe <_strtol_l.isra.0+0xd6>
 800ffce:	b10e      	cbz	r6, 800ffd4 <_strtol_l.isra.0+0xec>
 800ffd0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ffd4:	6011      	str	r1, [r2, #0]
 800ffd6:	e7f2      	b.n	800ffbe <_strtol_l.isra.0+0xd6>
 800ffd8:	2430      	movs	r4, #48	; 0x30
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d1b3      	bne.n	800ff46 <_strtol_l.isra.0+0x5e>
 800ffde:	2308      	movs	r3, #8
 800ffe0:	e7b1      	b.n	800ff46 <_strtol_l.isra.0+0x5e>
 800ffe2:	2c30      	cmp	r4, #48	; 0x30
 800ffe4:	d0a4      	beq.n	800ff30 <_strtol_l.isra.0+0x48>
 800ffe6:	230a      	movs	r3, #10
 800ffe8:	e7ad      	b.n	800ff46 <_strtol_l.isra.0+0x5e>
 800ffea:	bf00      	nop
 800ffec:	080267fd 	.word	0x080267fd

0800fff0 <_strtol_r>:
 800fff0:	f7ff bf7a 	b.w	800fee8 <_strtol_l.isra.0>

0800fff4 <strtol>:
 800fff4:	4613      	mov	r3, r2
 800fff6:	460a      	mov	r2, r1
 800fff8:	4601      	mov	r1, r0
 800fffa:	4802      	ldr	r0, [pc, #8]	; (8010004 <strtol+0x10>)
 800fffc:	6800      	ldr	r0, [r0, #0]
 800fffe:	f7ff bf73 	b.w	800fee8 <_strtol_l.isra.0>
 8010002:	bf00      	nop
 8010004:	20000040 	.word	0x20000040

08010008 <__assert_func>:
 8010008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801000a:	4614      	mov	r4, r2
 801000c:	461a      	mov	r2, r3
 801000e:	4b09      	ldr	r3, [pc, #36]	; (8010034 <__assert_func+0x2c>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	4605      	mov	r5, r0
 8010014:	68d8      	ldr	r0, [r3, #12]
 8010016:	b14c      	cbz	r4, 801002c <__assert_func+0x24>
 8010018:	4b07      	ldr	r3, [pc, #28]	; (8010038 <__assert_func+0x30>)
 801001a:	9100      	str	r1, [sp, #0]
 801001c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010020:	4906      	ldr	r1, [pc, #24]	; (801003c <__assert_func+0x34>)
 8010022:	462b      	mov	r3, r5
 8010024:	f000 fe88 	bl	8010d38 <fiprintf>
 8010028:	f002 fb56 	bl	80126d8 <abort>
 801002c:	4b04      	ldr	r3, [pc, #16]	; (8010040 <__assert_func+0x38>)
 801002e:	461c      	mov	r4, r3
 8010030:	e7f3      	b.n	801001a <__assert_func+0x12>
 8010032:	bf00      	nop
 8010034:	20000040 	.word	0x20000040
 8010038:	080267c0 	.word	0x080267c0
 801003c:	080267cd 	.word	0x080267cd
 8010040:	080267fb 	.word	0x080267fb

08010044 <quorem>:
 8010044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010048:	6903      	ldr	r3, [r0, #16]
 801004a:	690c      	ldr	r4, [r1, #16]
 801004c:	42a3      	cmp	r3, r4
 801004e:	4607      	mov	r7, r0
 8010050:	f2c0 8081 	blt.w	8010156 <quorem+0x112>
 8010054:	3c01      	subs	r4, #1
 8010056:	f101 0814 	add.w	r8, r1, #20
 801005a:	f100 0514 	add.w	r5, r0, #20
 801005e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010062:	9301      	str	r3, [sp, #4]
 8010064:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801006c:	3301      	adds	r3, #1
 801006e:	429a      	cmp	r2, r3
 8010070:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010074:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010078:	fbb2 f6f3 	udiv	r6, r2, r3
 801007c:	d331      	bcc.n	80100e2 <quorem+0x9e>
 801007e:	f04f 0e00 	mov.w	lr, #0
 8010082:	4640      	mov	r0, r8
 8010084:	46ac      	mov	ip, r5
 8010086:	46f2      	mov	sl, lr
 8010088:	f850 2b04 	ldr.w	r2, [r0], #4
 801008c:	b293      	uxth	r3, r2
 801008e:	fb06 e303 	mla	r3, r6, r3, lr
 8010092:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010096:	b29b      	uxth	r3, r3
 8010098:	ebaa 0303 	sub.w	r3, sl, r3
 801009c:	0c12      	lsrs	r2, r2, #16
 801009e:	f8dc a000 	ldr.w	sl, [ip]
 80100a2:	fb06 e202 	mla	r2, r6, r2, lr
 80100a6:	fa13 f38a 	uxtah	r3, r3, sl
 80100aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80100ae:	fa1f fa82 	uxth.w	sl, r2
 80100b2:	f8dc 2000 	ldr.w	r2, [ip]
 80100b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80100ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80100be:	b29b      	uxth	r3, r3
 80100c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100c4:	4581      	cmp	r9, r0
 80100c6:	f84c 3b04 	str.w	r3, [ip], #4
 80100ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80100ce:	d2db      	bcs.n	8010088 <quorem+0x44>
 80100d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80100d4:	b92b      	cbnz	r3, 80100e2 <quorem+0x9e>
 80100d6:	9b01      	ldr	r3, [sp, #4]
 80100d8:	3b04      	subs	r3, #4
 80100da:	429d      	cmp	r5, r3
 80100dc:	461a      	mov	r2, r3
 80100de:	d32e      	bcc.n	801013e <quorem+0xfa>
 80100e0:	613c      	str	r4, [r7, #16]
 80100e2:	4638      	mov	r0, r7
 80100e4:	f001 fc9e 	bl	8011a24 <__mcmp>
 80100e8:	2800      	cmp	r0, #0
 80100ea:	db24      	blt.n	8010136 <quorem+0xf2>
 80100ec:	3601      	adds	r6, #1
 80100ee:	4628      	mov	r0, r5
 80100f0:	f04f 0c00 	mov.w	ip, #0
 80100f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80100f8:	f8d0 e000 	ldr.w	lr, [r0]
 80100fc:	b293      	uxth	r3, r2
 80100fe:	ebac 0303 	sub.w	r3, ip, r3
 8010102:	0c12      	lsrs	r2, r2, #16
 8010104:	fa13 f38e 	uxtah	r3, r3, lr
 8010108:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801010c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010110:	b29b      	uxth	r3, r3
 8010112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010116:	45c1      	cmp	r9, r8
 8010118:	f840 3b04 	str.w	r3, [r0], #4
 801011c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010120:	d2e8      	bcs.n	80100f4 <quorem+0xb0>
 8010122:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010126:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801012a:	b922      	cbnz	r2, 8010136 <quorem+0xf2>
 801012c:	3b04      	subs	r3, #4
 801012e:	429d      	cmp	r5, r3
 8010130:	461a      	mov	r2, r3
 8010132:	d30a      	bcc.n	801014a <quorem+0x106>
 8010134:	613c      	str	r4, [r7, #16]
 8010136:	4630      	mov	r0, r6
 8010138:	b003      	add	sp, #12
 801013a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801013e:	6812      	ldr	r2, [r2, #0]
 8010140:	3b04      	subs	r3, #4
 8010142:	2a00      	cmp	r2, #0
 8010144:	d1cc      	bne.n	80100e0 <quorem+0x9c>
 8010146:	3c01      	subs	r4, #1
 8010148:	e7c7      	b.n	80100da <quorem+0x96>
 801014a:	6812      	ldr	r2, [r2, #0]
 801014c:	3b04      	subs	r3, #4
 801014e:	2a00      	cmp	r2, #0
 8010150:	d1f0      	bne.n	8010134 <quorem+0xf0>
 8010152:	3c01      	subs	r4, #1
 8010154:	e7eb      	b.n	801012e <quorem+0xea>
 8010156:	2000      	movs	r0, #0
 8010158:	e7ee      	b.n	8010138 <quorem+0xf4>
 801015a:	0000      	movs	r0, r0
 801015c:	0000      	movs	r0, r0
	...

08010160 <_dtoa_r>:
 8010160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010164:	ed2d 8b02 	vpush	{d8}
 8010168:	ec57 6b10 	vmov	r6, r7, d0
 801016c:	b095      	sub	sp, #84	; 0x54
 801016e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010170:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010174:	9105      	str	r1, [sp, #20]
 8010176:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801017a:	4604      	mov	r4, r0
 801017c:	9209      	str	r2, [sp, #36]	; 0x24
 801017e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010180:	b975      	cbnz	r5, 80101a0 <_dtoa_r+0x40>
 8010182:	2010      	movs	r0, #16
 8010184:	f001 f95e 	bl	8011444 <malloc>
 8010188:	4602      	mov	r2, r0
 801018a:	6260      	str	r0, [r4, #36]	; 0x24
 801018c:	b920      	cbnz	r0, 8010198 <_dtoa_r+0x38>
 801018e:	4bb2      	ldr	r3, [pc, #712]	; (8010458 <_dtoa_r+0x2f8>)
 8010190:	21ea      	movs	r1, #234	; 0xea
 8010192:	48b2      	ldr	r0, [pc, #712]	; (801045c <_dtoa_r+0x2fc>)
 8010194:	f7ff ff38 	bl	8010008 <__assert_func>
 8010198:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801019c:	6005      	str	r5, [r0, #0]
 801019e:	60c5      	str	r5, [r0, #12]
 80101a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101a2:	6819      	ldr	r1, [r3, #0]
 80101a4:	b151      	cbz	r1, 80101bc <_dtoa_r+0x5c>
 80101a6:	685a      	ldr	r2, [r3, #4]
 80101a8:	604a      	str	r2, [r1, #4]
 80101aa:	2301      	movs	r3, #1
 80101ac:	4093      	lsls	r3, r2
 80101ae:	608b      	str	r3, [r1, #8]
 80101b0:	4620      	mov	r0, r4
 80101b2:	f001 f9af 	bl	8011514 <_Bfree>
 80101b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101b8:	2200      	movs	r2, #0
 80101ba:	601a      	str	r2, [r3, #0]
 80101bc:	1e3b      	subs	r3, r7, #0
 80101be:	bfb9      	ittee	lt
 80101c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80101c4:	9303      	strlt	r3, [sp, #12]
 80101c6:	2300      	movge	r3, #0
 80101c8:	f8c8 3000 	strge.w	r3, [r8]
 80101cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80101d0:	4ba3      	ldr	r3, [pc, #652]	; (8010460 <_dtoa_r+0x300>)
 80101d2:	bfbc      	itt	lt
 80101d4:	2201      	movlt	r2, #1
 80101d6:	f8c8 2000 	strlt.w	r2, [r8]
 80101da:	ea33 0309 	bics.w	r3, r3, r9
 80101de:	d11b      	bne.n	8010218 <_dtoa_r+0xb8>
 80101e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80101e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80101e6:	6013      	str	r3, [r2, #0]
 80101e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80101ec:	4333      	orrs	r3, r6
 80101ee:	f000 857a 	beq.w	8010ce6 <_dtoa_r+0xb86>
 80101f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101f4:	b963      	cbnz	r3, 8010210 <_dtoa_r+0xb0>
 80101f6:	4b9b      	ldr	r3, [pc, #620]	; (8010464 <_dtoa_r+0x304>)
 80101f8:	e024      	b.n	8010244 <_dtoa_r+0xe4>
 80101fa:	4b9b      	ldr	r3, [pc, #620]	; (8010468 <_dtoa_r+0x308>)
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	3308      	adds	r3, #8
 8010200:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010202:	6013      	str	r3, [r2, #0]
 8010204:	9800      	ldr	r0, [sp, #0]
 8010206:	b015      	add	sp, #84	; 0x54
 8010208:	ecbd 8b02 	vpop	{d8}
 801020c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010210:	4b94      	ldr	r3, [pc, #592]	; (8010464 <_dtoa_r+0x304>)
 8010212:	9300      	str	r3, [sp, #0]
 8010214:	3303      	adds	r3, #3
 8010216:	e7f3      	b.n	8010200 <_dtoa_r+0xa0>
 8010218:	ed9d 7b02 	vldr	d7, [sp, #8]
 801021c:	2200      	movs	r2, #0
 801021e:	ec51 0b17 	vmov	r0, r1, d7
 8010222:	2300      	movs	r3, #0
 8010224:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010228:	f7f0 fc66 	bl	8000af8 <__aeabi_dcmpeq>
 801022c:	4680      	mov	r8, r0
 801022e:	b158      	cbz	r0, 8010248 <_dtoa_r+0xe8>
 8010230:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010232:	2301      	movs	r3, #1
 8010234:	6013      	str	r3, [r2, #0]
 8010236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010238:	2b00      	cmp	r3, #0
 801023a:	f000 8551 	beq.w	8010ce0 <_dtoa_r+0xb80>
 801023e:	488b      	ldr	r0, [pc, #556]	; (801046c <_dtoa_r+0x30c>)
 8010240:	6018      	str	r0, [r3, #0]
 8010242:	1e43      	subs	r3, r0, #1
 8010244:	9300      	str	r3, [sp, #0]
 8010246:	e7dd      	b.n	8010204 <_dtoa_r+0xa4>
 8010248:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801024c:	aa12      	add	r2, sp, #72	; 0x48
 801024e:	a913      	add	r1, sp, #76	; 0x4c
 8010250:	4620      	mov	r0, r4
 8010252:	f001 fd07 	bl	8011c64 <__d2b>
 8010256:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801025a:	4683      	mov	fp, r0
 801025c:	2d00      	cmp	r5, #0
 801025e:	d07c      	beq.n	801035a <_dtoa_r+0x1fa>
 8010260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010262:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801026a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801026e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010272:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801027a:	4b7d      	ldr	r3, [pc, #500]	; (8010470 <_dtoa_r+0x310>)
 801027c:	2200      	movs	r2, #0
 801027e:	4630      	mov	r0, r6
 8010280:	4639      	mov	r1, r7
 8010282:	f7f0 f819 	bl	80002b8 <__aeabi_dsub>
 8010286:	a36e      	add	r3, pc, #440	; (adr r3, 8010440 <_dtoa_r+0x2e0>)
 8010288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028c:	f7f0 f9cc 	bl	8000628 <__aeabi_dmul>
 8010290:	a36d      	add	r3, pc, #436	; (adr r3, 8010448 <_dtoa_r+0x2e8>)
 8010292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010296:	f7f0 f811 	bl	80002bc <__adddf3>
 801029a:	4606      	mov	r6, r0
 801029c:	4628      	mov	r0, r5
 801029e:	460f      	mov	r7, r1
 80102a0:	f7f0 f958 	bl	8000554 <__aeabi_i2d>
 80102a4:	a36a      	add	r3, pc, #424	; (adr r3, 8010450 <_dtoa_r+0x2f0>)
 80102a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102aa:	f7f0 f9bd 	bl	8000628 <__aeabi_dmul>
 80102ae:	4602      	mov	r2, r0
 80102b0:	460b      	mov	r3, r1
 80102b2:	4630      	mov	r0, r6
 80102b4:	4639      	mov	r1, r7
 80102b6:	f7f0 f801 	bl	80002bc <__adddf3>
 80102ba:	4606      	mov	r6, r0
 80102bc:	460f      	mov	r7, r1
 80102be:	f7f0 fc63 	bl	8000b88 <__aeabi_d2iz>
 80102c2:	2200      	movs	r2, #0
 80102c4:	4682      	mov	sl, r0
 80102c6:	2300      	movs	r3, #0
 80102c8:	4630      	mov	r0, r6
 80102ca:	4639      	mov	r1, r7
 80102cc:	f7f0 fc1e 	bl	8000b0c <__aeabi_dcmplt>
 80102d0:	b148      	cbz	r0, 80102e6 <_dtoa_r+0x186>
 80102d2:	4650      	mov	r0, sl
 80102d4:	f7f0 f93e 	bl	8000554 <__aeabi_i2d>
 80102d8:	4632      	mov	r2, r6
 80102da:	463b      	mov	r3, r7
 80102dc:	f7f0 fc0c 	bl	8000af8 <__aeabi_dcmpeq>
 80102e0:	b908      	cbnz	r0, 80102e6 <_dtoa_r+0x186>
 80102e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80102e6:	f1ba 0f16 	cmp.w	sl, #22
 80102ea:	d854      	bhi.n	8010396 <_dtoa_r+0x236>
 80102ec:	4b61      	ldr	r3, [pc, #388]	; (8010474 <_dtoa_r+0x314>)
 80102ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80102f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80102fa:	f7f0 fc07 	bl	8000b0c <__aeabi_dcmplt>
 80102fe:	2800      	cmp	r0, #0
 8010300:	d04b      	beq.n	801039a <_dtoa_r+0x23a>
 8010302:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010306:	2300      	movs	r3, #0
 8010308:	930e      	str	r3, [sp, #56]	; 0x38
 801030a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801030c:	1b5d      	subs	r5, r3, r5
 801030e:	1e6b      	subs	r3, r5, #1
 8010310:	9304      	str	r3, [sp, #16]
 8010312:	bf43      	ittte	mi
 8010314:	2300      	movmi	r3, #0
 8010316:	f1c5 0801 	rsbmi	r8, r5, #1
 801031a:	9304      	strmi	r3, [sp, #16]
 801031c:	f04f 0800 	movpl.w	r8, #0
 8010320:	f1ba 0f00 	cmp.w	sl, #0
 8010324:	db3b      	blt.n	801039e <_dtoa_r+0x23e>
 8010326:	9b04      	ldr	r3, [sp, #16]
 8010328:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801032c:	4453      	add	r3, sl
 801032e:	9304      	str	r3, [sp, #16]
 8010330:	2300      	movs	r3, #0
 8010332:	9306      	str	r3, [sp, #24]
 8010334:	9b05      	ldr	r3, [sp, #20]
 8010336:	2b09      	cmp	r3, #9
 8010338:	d869      	bhi.n	801040e <_dtoa_r+0x2ae>
 801033a:	2b05      	cmp	r3, #5
 801033c:	bfc4      	itt	gt
 801033e:	3b04      	subgt	r3, #4
 8010340:	9305      	strgt	r3, [sp, #20]
 8010342:	9b05      	ldr	r3, [sp, #20]
 8010344:	f1a3 0302 	sub.w	r3, r3, #2
 8010348:	bfcc      	ite	gt
 801034a:	2500      	movgt	r5, #0
 801034c:	2501      	movle	r5, #1
 801034e:	2b03      	cmp	r3, #3
 8010350:	d869      	bhi.n	8010426 <_dtoa_r+0x2c6>
 8010352:	e8df f003 	tbb	[pc, r3]
 8010356:	4e2c      	.short	0x4e2c
 8010358:	5a4c      	.short	0x5a4c
 801035a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801035e:	441d      	add	r5, r3
 8010360:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010364:	2b20      	cmp	r3, #32
 8010366:	bfc1      	itttt	gt
 8010368:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801036c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010370:	fa09 f303 	lslgt.w	r3, r9, r3
 8010374:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010378:	bfda      	itte	le
 801037a:	f1c3 0320 	rsble	r3, r3, #32
 801037e:	fa06 f003 	lslle.w	r0, r6, r3
 8010382:	4318      	orrgt	r0, r3
 8010384:	f7f0 f8d6 	bl	8000534 <__aeabi_ui2d>
 8010388:	2301      	movs	r3, #1
 801038a:	4606      	mov	r6, r0
 801038c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010390:	3d01      	subs	r5, #1
 8010392:	9310      	str	r3, [sp, #64]	; 0x40
 8010394:	e771      	b.n	801027a <_dtoa_r+0x11a>
 8010396:	2301      	movs	r3, #1
 8010398:	e7b6      	b.n	8010308 <_dtoa_r+0x1a8>
 801039a:	900e      	str	r0, [sp, #56]	; 0x38
 801039c:	e7b5      	b.n	801030a <_dtoa_r+0x1aa>
 801039e:	f1ca 0300 	rsb	r3, sl, #0
 80103a2:	9306      	str	r3, [sp, #24]
 80103a4:	2300      	movs	r3, #0
 80103a6:	eba8 080a 	sub.w	r8, r8, sl
 80103aa:	930d      	str	r3, [sp, #52]	; 0x34
 80103ac:	e7c2      	b.n	8010334 <_dtoa_r+0x1d4>
 80103ae:	2300      	movs	r3, #0
 80103b0:	9308      	str	r3, [sp, #32]
 80103b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	dc39      	bgt.n	801042c <_dtoa_r+0x2cc>
 80103b8:	f04f 0901 	mov.w	r9, #1
 80103bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80103c0:	464b      	mov	r3, r9
 80103c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80103c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80103c8:	2200      	movs	r2, #0
 80103ca:	6042      	str	r2, [r0, #4]
 80103cc:	2204      	movs	r2, #4
 80103ce:	f102 0614 	add.w	r6, r2, #20
 80103d2:	429e      	cmp	r6, r3
 80103d4:	6841      	ldr	r1, [r0, #4]
 80103d6:	d92f      	bls.n	8010438 <_dtoa_r+0x2d8>
 80103d8:	4620      	mov	r0, r4
 80103da:	f001 f85b 	bl	8011494 <_Balloc>
 80103de:	9000      	str	r0, [sp, #0]
 80103e0:	2800      	cmp	r0, #0
 80103e2:	d14b      	bne.n	801047c <_dtoa_r+0x31c>
 80103e4:	4b24      	ldr	r3, [pc, #144]	; (8010478 <_dtoa_r+0x318>)
 80103e6:	4602      	mov	r2, r0
 80103e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80103ec:	e6d1      	b.n	8010192 <_dtoa_r+0x32>
 80103ee:	2301      	movs	r3, #1
 80103f0:	e7de      	b.n	80103b0 <_dtoa_r+0x250>
 80103f2:	2300      	movs	r3, #0
 80103f4:	9308      	str	r3, [sp, #32]
 80103f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103f8:	eb0a 0903 	add.w	r9, sl, r3
 80103fc:	f109 0301 	add.w	r3, r9, #1
 8010400:	2b01      	cmp	r3, #1
 8010402:	9301      	str	r3, [sp, #4]
 8010404:	bfb8      	it	lt
 8010406:	2301      	movlt	r3, #1
 8010408:	e7dd      	b.n	80103c6 <_dtoa_r+0x266>
 801040a:	2301      	movs	r3, #1
 801040c:	e7f2      	b.n	80103f4 <_dtoa_r+0x294>
 801040e:	2501      	movs	r5, #1
 8010410:	2300      	movs	r3, #0
 8010412:	9305      	str	r3, [sp, #20]
 8010414:	9508      	str	r5, [sp, #32]
 8010416:	f04f 39ff 	mov.w	r9, #4294967295
 801041a:	2200      	movs	r2, #0
 801041c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010420:	2312      	movs	r3, #18
 8010422:	9209      	str	r2, [sp, #36]	; 0x24
 8010424:	e7cf      	b.n	80103c6 <_dtoa_r+0x266>
 8010426:	2301      	movs	r3, #1
 8010428:	9308      	str	r3, [sp, #32]
 801042a:	e7f4      	b.n	8010416 <_dtoa_r+0x2b6>
 801042c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010430:	f8cd 9004 	str.w	r9, [sp, #4]
 8010434:	464b      	mov	r3, r9
 8010436:	e7c6      	b.n	80103c6 <_dtoa_r+0x266>
 8010438:	3101      	adds	r1, #1
 801043a:	6041      	str	r1, [r0, #4]
 801043c:	0052      	lsls	r2, r2, #1
 801043e:	e7c6      	b.n	80103ce <_dtoa_r+0x26e>
 8010440:	636f4361 	.word	0x636f4361
 8010444:	3fd287a7 	.word	0x3fd287a7
 8010448:	8b60c8b3 	.word	0x8b60c8b3
 801044c:	3fc68a28 	.word	0x3fc68a28
 8010450:	509f79fb 	.word	0x509f79fb
 8010454:	3fd34413 	.word	0x3fd34413
 8010458:	08026748 	.word	0x08026748
 801045c:	0802690a 	.word	0x0802690a
 8010460:	7ff00000 	.word	0x7ff00000
 8010464:	08026906 	.word	0x08026906
 8010468:	080268fd 	.word	0x080268fd
 801046c:	080266cd 	.word	0x080266cd
 8010470:	3ff80000 	.word	0x3ff80000
 8010474:	08026a80 	.word	0x08026a80
 8010478:	08026969 	.word	0x08026969
 801047c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801047e:	9a00      	ldr	r2, [sp, #0]
 8010480:	601a      	str	r2, [r3, #0]
 8010482:	9b01      	ldr	r3, [sp, #4]
 8010484:	2b0e      	cmp	r3, #14
 8010486:	f200 80ad 	bhi.w	80105e4 <_dtoa_r+0x484>
 801048a:	2d00      	cmp	r5, #0
 801048c:	f000 80aa 	beq.w	80105e4 <_dtoa_r+0x484>
 8010490:	f1ba 0f00 	cmp.w	sl, #0
 8010494:	dd36      	ble.n	8010504 <_dtoa_r+0x3a4>
 8010496:	4ac3      	ldr	r2, [pc, #780]	; (80107a4 <_dtoa_r+0x644>)
 8010498:	f00a 030f 	and.w	r3, sl, #15
 801049c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80104a0:	ed93 7b00 	vldr	d7, [r3]
 80104a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80104a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80104ac:	eeb0 8a47 	vmov.f32	s16, s14
 80104b0:	eef0 8a67 	vmov.f32	s17, s15
 80104b4:	d016      	beq.n	80104e4 <_dtoa_r+0x384>
 80104b6:	4bbc      	ldr	r3, [pc, #752]	; (80107a8 <_dtoa_r+0x648>)
 80104b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80104bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80104c0:	f7f0 f9dc 	bl	800087c <__aeabi_ddiv>
 80104c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104c8:	f007 070f 	and.w	r7, r7, #15
 80104cc:	2503      	movs	r5, #3
 80104ce:	4eb6      	ldr	r6, [pc, #728]	; (80107a8 <_dtoa_r+0x648>)
 80104d0:	b957      	cbnz	r7, 80104e8 <_dtoa_r+0x388>
 80104d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104d6:	ec53 2b18 	vmov	r2, r3, d8
 80104da:	f7f0 f9cf 	bl	800087c <__aeabi_ddiv>
 80104de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104e2:	e029      	b.n	8010538 <_dtoa_r+0x3d8>
 80104e4:	2502      	movs	r5, #2
 80104e6:	e7f2      	b.n	80104ce <_dtoa_r+0x36e>
 80104e8:	07f9      	lsls	r1, r7, #31
 80104ea:	d508      	bpl.n	80104fe <_dtoa_r+0x39e>
 80104ec:	ec51 0b18 	vmov	r0, r1, d8
 80104f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80104f4:	f7f0 f898 	bl	8000628 <__aeabi_dmul>
 80104f8:	ec41 0b18 	vmov	d8, r0, r1
 80104fc:	3501      	adds	r5, #1
 80104fe:	107f      	asrs	r7, r7, #1
 8010500:	3608      	adds	r6, #8
 8010502:	e7e5      	b.n	80104d0 <_dtoa_r+0x370>
 8010504:	f000 80a6 	beq.w	8010654 <_dtoa_r+0x4f4>
 8010508:	f1ca 0600 	rsb	r6, sl, #0
 801050c:	4ba5      	ldr	r3, [pc, #660]	; (80107a4 <_dtoa_r+0x644>)
 801050e:	4fa6      	ldr	r7, [pc, #664]	; (80107a8 <_dtoa_r+0x648>)
 8010510:	f006 020f 	and.w	r2, r6, #15
 8010514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010520:	f7f0 f882 	bl	8000628 <__aeabi_dmul>
 8010524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010528:	1136      	asrs	r6, r6, #4
 801052a:	2300      	movs	r3, #0
 801052c:	2502      	movs	r5, #2
 801052e:	2e00      	cmp	r6, #0
 8010530:	f040 8085 	bne.w	801063e <_dtoa_r+0x4de>
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1d2      	bne.n	80104de <_dtoa_r+0x37e>
 8010538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801053a:	2b00      	cmp	r3, #0
 801053c:	f000 808c 	beq.w	8010658 <_dtoa_r+0x4f8>
 8010540:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010544:	4b99      	ldr	r3, [pc, #612]	; (80107ac <_dtoa_r+0x64c>)
 8010546:	2200      	movs	r2, #0
 8010548:	4630      	mov	r0, r6
 801054a:	4639      	mov	r1, r7
 801054c:	f7f0 fade 	bl	8000b0c <__aeabi_dcmplt>
 8010550:	2800      	cmp	r0, #0
 8010552:	f000 8081 	beq.w	8010658 <_dtoa_r+0x4f8>
 8010556:	9b01      	ldr	r3, [sp, #4]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d07d      	beq.n	8010658 <_dtoa_r+0x4f8>
 801055c:	f1b9 0f00 	cmp.w	r9, #0
 8010560:	dd3c      	ble.n	80105dc <_dtoa_r+0x47c>
 8010562:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010566:	9307      	str	r3, [sp, #28]
 8010568:	2200      	movs	r2, #0
 801056a:	4b91      	ldr	r3, [pc, #580]	; (80107b0 <_dtoa_r+0x650>)
 801056c:	4630      	mov	r0, r6
 801056e:	4639      	mov	r1, r7
 8010570:	f7f0 f85a 	bl	8000628 <__aeabi_dmul>
 8010574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010578:	3501      	adds	r5, #1
 801057a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801057e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010582:	4628      	mov	r0, r5
 8010584:	f7ef ffe6 	bl	8000554 <__aeabi_i2d>
 8010588:	4632      	mov	r2, r6
 801058a:	463b      	mov	r3, r7
 801058c:	f7f0 f84c 	bl	8000628 <__aeabi_dmul>
 8010590:	4b88      	ldr	r3, [pc, #544]	; (80107b4 <_dtoa_r+0x654>)
 8010592:	2200      	movs	r2, #0
 8010594:	f7ef fe92 	bl	80002bc <__adddf3>
 8010598:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801059c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105a0:	9303      	str	r3, [sp, #12]
 80105a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d15c      	bne.n	8010662 <_dtoa_r+0x502>
 80105a8:	4b83      	ldr	r3, [pc, #524]	; (80107b8 <_dtoa_r+0x658>)
 80105aa:	2200      	movs	r2, #0
 80105ac:	4630      	mov	r0, r6
 80105ae:	4639      	mov	r1, r7
 80105b0:	f7ef fe82 	bl	80002b8 <__aeabi_dsub>
 80105b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80105b8:	4606      	mov	r6, r0
 80105ba:	460f      	mov	r7, r1
 80105bc:	f7f0 fac4 	bl	8000b48 <__aeabi_dcmpgt>
 80105c0:	2800      	cmp	r0, #0
 80105c2:	f040 8296 	bne.w	8010af2 <_dtoa_r+0x992>
 80105c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80105ca:	4630      	mov	r0, r6
 80105cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80105d0:	4639      	mov	r1, r7
 80105d2:	f7f0 fa9b 	bl	8000b0c <__aeabi_dcmplt>
 80105d6:	2800      	cmp	r0, #0
 80105d8:	f040 8288 	bne.w	8010aec <_dtoa_r+0x98c>
 80105dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80105e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80105e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	f2c0 8158 	blt.w	801089c <_dtoa_r+0x73c>
 80105ec:	f1ba 0f0e 	cmp.w	sl, #14
 80105f0:	f300 8154 	bgt.w	801089c <_dtoa_r+0x73c>
 80105f4:	4b6b      	ldr	r3, [pc, #428]	; (80107a4 <_dtoa_r+0x644>)
 80105f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80105fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80105fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010600:	2b00      	cmp	r3, #0
 8010602:	f280 80e3 	bge.w	80107cc <_dtoa_r+0x66c>
 8010606:	9b01      	ldr	r3, [sp, #4]
 8010608:	2b00      	cmp	r3, #0
 801060a:	f300 80df 	bgt.w	80107cc <_dtoa_r+0x66c>
 801060e:	f040 826d 	bne.w	8010aec <_dtoa_r+0x98c>
 8010612:	4b69      	ldr	r3, [pc, #420]	; (80107b8 <_dtoa_r+0x658>)
 8010614:	2200      	movs	r2, #0
 8010616:	4640      	mov	r0, r8
 8010618:	4649      	mov	r1, r9
 801061a:	f7f0 f805 	bl	8000628 <__aeabi_dmul>
 801061e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010622:	f7f0 fa87 	bl	8000b34 <__aeabi_dcmpge>
 8010626:	9e01      	ldr	r6, [sp, #4]
 8010628:	4637      	mov	r7, r6
 801062a:	2800      	cmp	r0, #0
 801062c:	f040 8243 	bne.w	8010ab6 <_dtoa_r+0x956>
 8010630:	9d00      	ldr	r5, [sp, #0]
 8010632:	2331      	movs	r3, #49	; 0x31
 8010634:	f805 3b01 	strb.w	r3, [r5], #1
 8010638:	f10a 0a01 	add.w	sl, sl, #1
 801063c:	e23f      	b.n	8010abe <_dtoa_r+0x95e>
 801063e:	07f2      	lsls	r2, r6, #31
 8010640:	d505      	bpl.n	801064e <_dtoa_r+0x4ee>
 8010642:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010646:	f7ef ffef 	bl	8000628 <__aeabi_dmul>
 801064a:	3501      	adds	r5, #1
 801064c:	2301      	movs	r3, #1
 801064e:	1076      	asrs	r6, r6, #1
 8010650:	3708      	adds	r7, #8
 8010652:	e76c      	b.n	801052e <_dtoa_r+0x3ce>
 8010654:	2502      	movs	r5, #2
 8010656:	e76f      	b.n	8010538 <_dtoa_r+0x3d8>
 8010658:	9b01      	ldr	r3, [sp, #4]
 801065a:	f8cd a01c 	str.w	sl, [sp, #28]
 801065e:	930c      	str	r3, [sp, #48]	; 0x30
 8010660:	e78d      	b.n	801057e <_dtoa_r+0x41e>
 8010662:	9900      	ldr	r1, [sp, #0]
 8010664:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010668:	4b4e      	ldr	r3, [pc, #312]	; (80107a4 <_dtoa_r+0x644>)
 801066a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801066e:	4401      	add	r1, r0
 8010670:	9102      	str	r1, [sp, #8]
 8010672:	9908      	ldr	r1, [sp, #32]
 8010674:	eeb0 8a47 	vmov.f32	s16, s14
 8010678:	eef0 8a67 	vmov.f32	s17, s15
 801067c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010680:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010684:	2900      	cmp	r1, #0
 8010686:	d045      	beq.n	8010714 <_dtoa_r+0x5b4>
 8010688:	494c      	ldr	r1, [pc, #304]	; (80107bc <_dtoa_r+0x65c>)
 801068a:	2000      	movs	r0, #0
 801068c:	f7f0 f8f6 	bl	800087c <__aeabi_ddiv>
 8010690:	ec53 2b18 	vmov	r2, r3, d8
 8010694:	f7ef fe10 	bl	80002b8 <__aeabi_dsub>
 8010698:	9d00      	ldr	r5, [sp, #0]
 801069a:	ec41 0b18 	vmov	d8, r0, r1
 801069e:	4639      	mov	r1, r7
 80106a0:	4630      	mov	r0, r6
 80106a2:	f7f0 fa71 	bl	8000b88 <__aeabi_d2iz>
 80106a6:	900c      	str	r0, [sp, #48]	; 0x30
 80106a8:	f7ef ff54 	bl	8000554 <__aeabi_i2d>
 80106ac:	4602      	mov	r2, r0
 80106ae:	460b      	mov	r3, r1
 80106b0:	4630      	mov	r0, r6
 80106b2:	4639      	mov	r1, r7
 80106b4:	f7ef fe00 	bl	80002b8 <__aeabi_dsub>
 80106b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106ba:	3330      	adds	r3, #48	; 0x30
 80106bc:	f805 3b01 	strb.w	r3, [r5], #1
 80106c0:	ec53 2b18 	vmov	r2, r3, d8
 80106c4:	4606      	mov	r6, r0
 80106c6:	460f      	mov	r7, r1
 80106c8:	f7f0 fa20 	bl	8000b0c <__aeabi_dcmplt>
 80106cc:	2800      	cmp	r0, #0
 80106ce:	d165      	bne.n	801079c <_dtoa_r+0x63c>
 80106d0:	4632      	mov	r2, r6
 80106d2:	463b      	mov	r3, r7
 80106d4:	4935      	ldr	r1, [pc, #212]	; (80107ac <_dtoa_r+0x64c>)
 80106d6:	2000      	movs	r0, #0
 80106d8:	f7ef fdee 	bl	80002b8 <__aeabi_dsub>
 80106dc:	ec53 2b18 	vmov	r2, r3, d8
 80106e0:	f7f0 fa14 	bl	8000b0c <__aeabi_dcmplt>
 80106e4:	2800      	cmp	r0, #0
 80106e6:	f040 80b9 	bne.w	801085c <_dtoa_r+0x6fc>
 80106ea:	9b02      	ldr	r3, [sp, #8]
 80106ec:	429d      	cmp	r5, r3
 80106ee:	f43f af75 	beq.w	80105dc <_dtoa_r+0x47c>
 80106f2:	4b2f      	ldr	r3, [pc, #188]	; (80107b0 <_dtoa_r+0x650>)
 80106f4:	ec51 0b18 	vmov	r0, r1, d8
 80106f8:	2200      	movs	r2, #0
 80106fa:	f7ef ff95 	bl	8000628 <__aeabi_dmul>
 80106fe:	4b2c      	ldr	r3, [pc, #176]	; (80107b0 <_dtoa_r+0x650>)
 8010700:	ec41 0b18 	vmov	d8, r0, r1
 8010704:	2200      	movs	r2, #0
 8010706:	4630      	mov	r0, r6
 8010708:	4639      	mov	r1, r7
 801070a:	f7ef ff8d 	bl	8000628 <__aeabi_dmul>
 801070e:	4606      	mov	r6, r0
 8010710:	460f      	mov	r7, r1
 8010712:	e7c4      	b.n	801069e <_dtoa_r+0x53e>
 8010714:	ec51 0b17 	vmov	r0, r1, d7
 8010718:	f7ef ff86 	bl	8000628 <__aeabi_dmul>
 801071c:	9b02      	ldr	r3, [sp, #8]
 801071e:	9d00      	ldr	r5, [sp, #0]
 8010720:	930c      	str	r3, [sp, #48]	; 0x30
 8010722:	ec41 0b18 	vmov	d8, r0, r1
 8010726:	4639      	mov	r1, r7
 8010728:	4630      	mov	r0, r6
 801072a:	f7f0 fa2d 	bl	8000b88 <__aeabi_d2iz>
 801072e:	9011      	str	r0, [sp, #68]	; 0x44
 8010730:	f7ef ff10 	bl	8000554 <__aeabi_i2d>
 8010734:	4602      	mov	r2, r0
 8010736:	460b      	mov	r3, r1
 8010738:	4630      	mov	r0, r6
 801073a:	4639      	mov	r1, r7
 801073c:	f7ef fdbc 	bl	80002b8 <__aeabi_dsub>
 8010740:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010742:	3330      	adds	r3, #48	; 0x30
 8010744:	f805 3b01 	strb.w	r3, [r5], #1
 8010748:	9b02      	ldr	r3, [sp, #8]
 801074a:	429d      	cmp	r5, r3
 801074c:	4606      	mov	r6, r0
 801074e:	460f      	mov	r7, r1
 8010750:	f04f 0200 	mov.w	r2, #0
 8010754:	d134      	bne.n	80107c0 <_dtoa_r+0x660>
 8010756:	4b19      	ldr	r3, [pc, #100]	; (80107bc <_dtoa_r+0x65c>)
 8010758:	ec51 0b18 	vmov	r0, r1, d8
 801075c:	f7ef fdae 	bl	80002bc <__adddf3>
 8010760:	4602      	mov	r2, r0
 8010762:	460b      	mov	r3, r1
 8010764:	4630      	mov	r0, r6
 8010766:	4639      	mov	r1, r7
 8010768:	f7f0 f9ee 	bl	8000b48 <__aeabi_dcmpgt>
 801076c:	2800      	cmp	r0, #0
 801076e:	d175      	bne.n	801085c <_dtoa_r+0x6fc>
 8010770:	ec53 2b18 	vmov	r2, r3, d8
 8010774:	4911      	ldr	r1, [pc, #68]	; (80107bc <_dtoa_r+0x65c>)
 8010776:	2000      	movs	r0, #0
 8010778:	f7ef fd9e 	bl	80002b8 <__aeabi_dsub>
 801077c:	4602      	mov	r2, r0
 801077e:	460b      	mov	r3, r1
 8010780:	4630      	mov	r0, r6
 8010782:	4639      	mov	r1, r7
 8010784:	f7f0 f9c2 	bl	8000b0c <__aeabi_dcmplt>
 8010788:	2800      	cmp	r0, #0
 801078a:	f43f af27 	beq.w	80105dc <_dtoa_r+0x47c>
 801078e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010790:	1e6b      	subs	r3, r5, #1
 8010792:	930c      	str	r3, [sp, #48]	; 0x30
 8010794:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010798:	2b30      	cmp	r3, #48	; 0x30
 801079a:	d0f8      	beq.n	801078e <_dtoa_r+0x62e>
 801079c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80107a0:	e04a      	b.n	8010838 <_dtoa_r+0x6d8>
 80107a2:	bf00      	nop
 80107a4:	08026a80 	.word	0x08026a80
 80107a8:	08026a58 	.word	0x08026a58
 80107ac:	3ff00000 	.word	0x3ff00000
 80107b0:	40240000 	.word	0x40240000
 80107b4:	401c0000 	.word	0x401c0000
 80107b8:	40140000 	.word	0x40140000
 80107bc:	3fe00000 	.word	0x3fe00000
 80107c0:	4baf      	ldr	r3, [pc, #700]	; (8010a80 <_dtoa_r+0x920>)
 80107c2:	f7ef ff31 	bl	8000628 <__aeabi_dmul>
 80107c6:	4606      	mov	r6, r0
 80107c8:	460f      	mov	r7, r1
 80107ca:	e7ac      	b.n	8010726 <_dtoa_r+0x5c6>
 80107cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80107d0:	9d00      	ldr	r5, [sp, #0]
 80107d2:	4642      	mov	r2, r8
 80107d4:	464b      	mov	r3, r9
 80107d6:	4630      	mov	r0, r6
 80107d8:	4639      	mov	r1, r7
 80107da:	f7f0 f84f 	bl	800087c <__aeabi_ddiv>
 80107de:	f7f0 f9d3 	bl	8000b88 <__aeabi_d2iz>
 80107e2:	9002      	str	r0, [sp, #8]
 80107e4:	f7ef feb6 	bl	8000554 <__aeabi_i2d>
 80107e8:	4642      	mov	r2, r8
 80107ea:	464b      	mov	r3, r9
 80107ec:	f7ef ff1c 	bl	8000628 <__aeabi_dmul>
 80107f0:	4602      	mov	r2, r0
 80107f2:	460b      	mov	r3, r1
 80107f4:	4630      	mov	r0, r6
 80107f6:	4639      	mov	r1, r7
 80107f8:	f7ef fd5e 	bl	80002b8 <__aeabi_dsub>
 80107fc:	9e02      	ldr	r6, [sp, #8]
 80107fe:	9f01      	ldr	r7, [sp, #4]
 8010800:	3630      	adds	r6, #48	; 0x30
 8010802:	f805 6b01 	strb.w	r6, [r5], #1
 8010806:	9e00      	ldr	r6, [sp, #0]
 8010808:	1bae      	subs	r6, r5, r6
 801080a:	42b7      	cmp	r7, r6
 801080c:	4602      	mov	r2, r0
 801080e:	460b      	mov	r3, r1
 8010810:	d137      	bne.n	8010882 <_dtoa_r+0x722>
 8010812:	f7ef fd53 	bl	80002bc <__adddf3>
 8010816:	4642      	mov	r2, r8
 8010818:	464b      	mov	r3, r9
 801081a:	4606      	mov	r6, r0
 801081c:	460f      	mov	r7, r1
 801081e:	f7f0 f993 	bl	8000b48 <__aeabi_dcmpgt>
 8010822:	b9c8      	cbnz	r0, 8010858 <_dtoa_r+0x6f8>
 8010824:	4642      	mov	r2, r8
 8010826:	464b      	mov	r3, r9
 8010828:	4630      	mov	r0, r6
 801082a:	4639      	mov	r1, r7
 801082c:	f7f0 f964 	bl	8000af8 <__aeabi_dcmpeq>
 8010830:	b110      	cbz	r0, 8010838 <_dtoa_r+0x6d8>
 8010832:	9b02      	ldr	r3, [sp, #8]
 8010834:	07d9      	lsls	r1, r3, #31
 8010836:	d40f      	bmi.n	8010858 <_dtoa_r+0x6f8>
 8010838:	4620      	mov	r0, r4
 801083a:	4659      	mov	r1, fp
 801083c:	f000 fe6a 	bl	8011514 <_Bfree>
 8010840:	2300      	movs	r3, #0
 8010842:	702b      	strb	r3, [r5, #0]
 8010844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010846:	f10a 0001 	add.w	r0, sl, #1
 801084a:	6018      	str	r0, [r3, #0]
 801084c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801084e:	2b00      	cmp	r3, #0
 8010850:	f43f acd8 	beq.w	8010204 <_dtoa_r+0xa4>
 8010854:	601d      	str	r5, [r3, #0]
 8010856:	e4d5      	b.n	8010204 <_dtoa_r+0xa4>
 8010858:	f8cd a01c 	str.w	sl, [sp, #28]
 801085c:	462b      	mov	r3, r5
 801085e:	461d      	mov	r5, r3
 8010860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010864:	2a39      	cmp	r2, #57	; 0x39
 8010866:	d108      	bne.n	801087a <_dtoa_r+0x71a>
 8010868:	9a00      	ldr	r2, [sp, #0]
 801086a:	429a      	cmp	r2, r3
 801086c:	d1f7      	bne.n	801085e <_dtoa_r+0x6fe>
 801086e:	9a07      	ldr	r2, [sp, #28]
 8010870:	9900      	ldr	r1, [sp, #0]
 8010872:	3201      	adds	r2, #1
 8010874:	9207      	str	r2, [sp, #28]
 8010876:	2230      	movs	r2, #48	; 0x30
 8010878:	700a      	strb	r2, [r1, #0]
 801087a:	781a      	ldrb	r2, [r3, #0]
 801087c:	3201      	adds	r2, #1
 801087e:	701a      	strb	r2, [r3, #0]
 8010880:	e78c      	b.n	801079c <_dtoa_r+0x63c>
 8010882:	4b7f      	ldr	r3, [pc, #508]	; (8010a80 <_dtoa_r+0x920>)
 8010884:	2200      	movs	r2, #0
 8010886:	f7ef fecf 	bl	8000628 <__aeabi_dmul>
 801088a:	2200      	movs	r2, #0
 801088c:	2300      	movs	r3, #0
 801088e:	4606      	mov	r6, r0
 8010890:	460f      	mov	r7, r1
 8010892:	f7f0 f931 	bl	8000af8 <__aeabi_dcmpeq>
 8010896:	2800      	cmp	r0, #0
 8010898:	d09b      	beq.n	80107d2 <_dtoa_r+0x672>
 801089a:	e7cd      	b.n	8010838 <_dtoa_r+0x6d8>
 801089c:	9a08      	ldr	r2, [sp, #32]
 801089e:	2a00      	cmp	r2, #0
 80108a0:	f000 80c4 	beq.w	8010a2c <_dtoa_r+0x8cc>
 80108a4:	9a05      	ldr	r2, [sp, #20]
 80108a6:	2a01      	cmp	r2, #1
 80108a8:	f300 80a8 	bgt.w	80109fc <_dtoa_r+0x89c>
 80108ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80108ae:	2a00      	cmp	r2, #0
 80108b0:	f000 80a0 	beq.w	80109f4 <_dtoa_r+0x894>
 80108b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80108b8:	9e06      	ldr	r6, [sp, #24]
 80108ba:	4645      	mov	r5, r8
 80108bc:	9a04      	ldr	r2, [sp, #16]
 80108be:	2101      	movs	r1, #1
 80108c0:	441a      	add	r2, r3
 80108c2:	4620      	mov	r0, r4
 80108c4:	4498      	add	r8, r3
 80108c6:	9204      	str	r2, [sp, #16]
 80108c8:	f000 ff2a 	bl	8011720 <__i2b>
 80108cc:	4607      	mov	r7, r0
 80108ce:	2d00      	cmp	r5, #0
 80108d0:	dd0b      	ble.n	80108ea <_dtoa_r+0x78a>
 80108d2:	9b04      	ldr	r3, [sp, #16]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	dd08      	ble.n	80108ea <_dtoa_r+0x78a>
 80108d8:	42ab      	cmp	r3, r5
 80108da:	9a04      	ldr	r2, [sp, #16]
 80108dc:	bfa8      	it	ge
 80108de:	462b      	movge	r3, r5
 80108e0:	eba8 0803 	sub.w	r8, r8, r3
 80108e4:	1aed      	subs	r5, r5, r3
 80108e6:	1ad3      	subs	r3, r2, r3
 80108e8:	9304      	str	r3, [sp, #16]
 80108ea:	9b06      	ldr	r3, [sp, #24]
 80108ec:	b1fb      	cbz	r3, 801092e <_dtoa_r+0x7ce>
 80108ee:	9b08      	ldr	r3, [sp, #32]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	f000 809f 	beq.w	8010a34 <_dtoa_r+0x8d4>
 80108f6:	2e00      	cmp	r6, #0
 80108f8:	dd11      	ble.n	801091e <_dtoa_r+0x7be>
 80108fa:	4639      	mov	r1, r7
 80108fc:	4632      	mov	r2, r6
 80108fe:	4620      	mov	r0, r4
 8010900:	f000 ffca 	bl	8011898 <__pow5mult>
 8010904:	465a      	mov	r2, fp
 8010906:	4601      	mov	r1, r0
 8010908:	4607      	mov	r7, r0
 801090a:	4620      	mov	r0, r4
 801090c:	f000 ff1e 	bl	801174c <__multiply>
 8010910:	4659      	mov	r1, fp
 8010912:	9007      	str	r0, [sp, #28]
 8010914:	4620      	mov	r0, r4
 8010916:	f000 fdfd 	bl	8011514 <_Bfree>
 801091a:	9b07      	ldr	r3, [sp, #28]
 801091c:	469b      	mov	fp, r3
 801091e:	9b06      	ldr	r3, [sp, #24]
 8010920:	1b9a      	subs	r2, r3, r6
 8010922:	d004      	beq.n	801092e <_dtoa_r+0x7ce>
 8010924:	4659      	mov	r1, fp
 8010926:	4620      	mov	r0, r4
 8010928:	f000 ffb6 	bl	8011898 <__pow5mult>
 801092c:	4683      	mov	fp, r0
 801092e:	2101      	movs	r1, #1
 8010930:	4620      	mov	r0, r4
 8010932:	f000 fef5 	bl	8011720 <__i2b>
 8010936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010938:	2b00      	cmp	r3, #0
 801093a:	4606      	mov	r6, r0
 801093c:	dd7c      	ble.n	8010a38 <_dtoa_r+0x8d8>
 801093e:	461a      	mov	r2, r3
 8010940:	4601      	mov	r1, r0
 8010942:	4620      	mov	r0, r4
 8010944:	f000 ffa8 	bl	8011898 <__pow5mult>
 8010948:	9b05      	ldr	r3, [sp, #20]
 801094a:	2b01      	cmp	r3, #1
 801094c:	4606      	mov	r6, r0
 801094e:	dd76      	ble.n	8010a3e <_dtoa_r+0x8de>
 8010950:	2300      	movs	r3, #0
 8010952:	9306      	str	r3, [sp, #24]
 8010954:	6933      	ldr	r3, [r6, #16]
 8010956:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801095a:	6918      	ldr	r0, [r3, #16]
 801095c:	f000 fe90 	bl	8011680 <__hi0bits>
 8010960:	f1c0 0020 	rsb	r0, r0, #32
 8010964:	9b04      	ldr	r3, [sp, #16]
 8010966:	4418      	add	r0, r3
 8010968:	f010 001f 	ands.w	r0, r0, #31
 801096c:	f000 8086 	beq.w	8010a7c <_dtoa_r+0x91c>
 8010970:	f1c0 0320 	rsb	r3, r0, #32
 8010974:	2b04      	cmp	r3, #4
 8010976:	dd7f      	ble.n	8010a78 <_dtoa_r+0x918>
 8010978:	f1c0 001c 	rsb	r0, r0, #28
 801097c:	9b04      	ldr	r3, [sp, #16]
 801097e:	4403      	add	r3, r0
 8010980:	4480      	add	r8, r0
 8010982:	4405      	add	r5, r0
 8010984:	9304      	str	r3, [sp, #16]
 8010986:	f1b8 0f00 	cmp.w	r8, #0
 801098a:	dd05      	ble.n	8010998 <_dtoa_r+0x838>
 801098c:	4659      	mov	r1, fp
 801098e:	4642      	mov	r2, r8
 8010990:	4620      	mov	r0, r4
 8010992:	f000 ffdb 	bl	801194c <__lshift>
 8010996:	4683      	mov	fp, r0
 8010998:	9b04      	ldr	r3, [sp, #16]
 801099a:	2b00      	cmp	r3, #0
 801099c:	dd05      	ble.n	80109aa <_dtoa_r+0x84a>
 801099e:	4631      	mov	r1, r6
 80109a0:	461a      	mov	r2, r3
 80109a2:	4620      	mov	r0, r4
 80109a4:	f000 ffd2 	bl	801194c <__lshift>
 80109a8:	4606      	mov	r6, r0
 80109aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d069      	beq.n	8010a84 <_dtoa_r+0x924>
 80109b0:	4631      	mov	r1, r6
 80109b2:	4658      	mov	r0, fp
 80109b4:	f001 f836 	bl	8011a24 <__mcmp>
 80109b8:	2800      	cmp	r0, #0
 80109ba:	da63      	bge.n	8010a84 <_dtoa_r+0x924>
 80109bc:	2300      	movs	r3, #0
 80109be:	4659      	mov	r1, fp
 80109c0:	220a      	movs	r2, #10
 80109c2:	4620      	mov	r0, r4
 80109c4:	f000 fdc8 	bl	8011558 <__multadd>
 80109c8:	9b08      	ldr	r3, [sp, #32]
 80109ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80109ce:	4683      	mov	fp, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	f000 818f 	beq.w	8010cf4 <_dtoa_r+0xb94>
 80109d6:	4639      	mov	r1, r7
 80109d8:	2300      	movs	r3, #0
 80109da:	220a      	movs	r2, #10
 80109dc:	4620      	mov	r0, r4
 80109de:	f000 fdbb 	bl	8011558 <__multadd>
 80109e2:	f1b9 0f00 	cmp.w	r9, #0
 80109e6:	4607      	mov	r7, r0
 80109e8:	f300 808e 	bgt.w	8010b08 <_dtoa_r+0x9a8>
 80109ec:	9b05      	ldr	r3, [sp, #20]
 80109ee:	2b02      	cmp	r3, #2
 80109f0:	dc50      	bgt.n	8010a94 <_dtoa_r+0x934>
 80109f2:	e089      	b.n	8010b08 <_dtoa_r+0x9a8>
 80109f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80109f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80109fa:	e75d      	b.n	80108b8 <_dtoa_r+0x758>
 80109fc:	9b01      	ldr	r3, [sp, #4]
 80109fe:	1e5e      	subs	r6, r3, #1
 8010a00:	9b06      	ldr	r3, [sp, #24]
 8010a02:	42b3      	cmp	r3, r6
 8010a04:	bfbf      	itttt	lt
 8010a06:	9b06      	ldrlt	r3, [sp, #24]
 8010a08:	9606      	strlt	r6, [sp, #24]
 8010a0a:	1af2      	sublt	r2, r6, r3
 8010a0c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8010a0e:	bfb6      	itet	lt
 8010a10:	189b      	addlt	r3, r3, r2
 8010a12:	1b9e      	subge	r6, r3, r6
 8010a14:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010a16:	9b01      	ldr	r3, [sp, #4]
 8010a18:	bfb8      	it	lt
 8010a1a:	2600      	movlt	r6, #0
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	bfb5      	itete	lt
 8010a20:	eba8 0503 	sublt.w	r5, r8, r3
 8010a24:	9b01      	ldrge	r3, [sp, #4]
 8010a26:	2300      	movlt	r3, #0
 8010a28:	4645      	movge	r5, r8
 8010a2a:	e747      	b.n	80108bc <_dtoa_r+0x75c>
 8010a2c:	9e06      	ldr	r6, [sp, #24]
 8010a2e:	9f08      	ldr	r7, [sp, #32]
 8010a30:	4645      	mov	r5, r8
 8010a32:	e74c      	b.n	80108ce <_dtoa_r+0x76e>
 8010a34:	9a06      	ldr	r2, [sp, #24]
 8010a36:	e775      	b.n	8010924 <_dtoa_r+0x7c4>
 8010a38:	9b05      	ldr	r3, [sp, #20]
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	dc18      	bgt.n	8010a70 <_dtoa_r+0x910>
 8010a3e:	9b02      	ldr	r3, [sp, #8]
 8010a40:	b9b3      	cbnz	r3, 8010a70 <_dtoa_r+0x910>
 8010a42:	9b03      	ldr	r3, [sp, #12]
 8010a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a48:	b9a3      	cbnz	r3, 8010a74 <_dtoa_r+0x914>
 8010a4a:	9b03      	ldr	r3, [sp, #12]
 8010a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010a50:	0d1b      	lsrs	r3, r3, #20
 8010a52:	051b      	lsls	r3, r3, #20
 8010a54:	b12b      	cbz	r3, 8010a62 <_dtoa_r+0x902>
 8010a56:	9b04      	ldr	r3, [sp, #16]
 8010a58:	3301      	adds	r3, #1
 8010a5a:	9304      	str	r3, [sp, #16]
 8010a5c:	f108 0801 	add.w	r8, r8, #1
 8010a60:	2301      	movs	r3, #1
 8010a62:	9306      	str	r3, [sp, #24]
 8010a64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	f47f af74 	bne.w	8010954 <_dtoa_r+0x7f4>
 8010a6c:	2001      	movs	r0, #1
 8010a6e:	e779      	b.n	8010964 <_dtoa_r+0x804>
 8010a70:	2300      	movs	r3, #0
 8010a72:	e7f6      	b.n	8010a62 <_dtoa_r+0x902>
 8010a74:	9b02      	ldr	r3, [sp, #8]
 8010a76:	e7f4      	b.n	8010a62 <_dtoa_r+0x902>
 8010a78:	d085      	beq.n	8010986 <_dtoa_r+0x826>
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	301c      	adds	r0, #28
 8010a7e:	e77d      	b.n	801097c <_dtoa_r+0x81c>
 8010a80:	40240000 	.word	0x40240000
 8010a84:	9b01      	ldr	r3, [sp, #4]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	dc38      	bgt.n	8010afc <_dtoa_r+0x99c>
 8010a8a:	9b05      	ldr	r3, [sp, #20]
 8010a8c:	2b02      	cmp	r3, #2
 8010a8e:	dd35      	ble.n	8010afc <_dtoa_r+0x99c>
 8010a90:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010a94:	f1b9 0f00 	cmp.w	r9, #0
 8010a98:	d10d      	bne.n	8010ab6 <_dtoa_r+0x956>
 8010a9a:	4631      	mov	r1, r6
 8010a9c:	464b      	mov	r3, r9
 8010a9e:	2205      	movs	r2, #5
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	f000 fd59 	bl	8011558 <__multadd>
 8010aa6:	4601      	mov	r1, r0
 8010aa8:	4606      	mov	r6, r0
 8010aaa:	4658      	mov	r0, fp
 8010aac:	f000 ffba 	bl	8011a24 <__mcmp>
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	f73f adbd 	bgt.w	8010630 <_dtoa_r+0x4d0>
 8010ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ab8:	9d00      	ldr	r5, [sp, #0]
 8010aba:	ea6f 0a03 	mvn.w	sl, r3
 8010abe:	f04f 0800 	mov.w	r8, #0
 8010ac2:	4631      	mov	r1, r6
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	f000 fd25 	bl	8011514 <_Bfree>
 8010aca:	2f00      	cmp	r7, #0
 8010acc:	f43f aeb4 	beq.w	8010838 <_dtoa_r+0x6d8>
 8010ad0:	f1b8 0f00 	cmp.w	r8, #0
 8010ad4:	d005      	beq.n	8010ae2 <_dtoa_r+0x982>
 8010ad6:	45b8      	cmp	r8, r7
 8010ad8:	d003      	beq.n	8010ae2 <_dtoa_r+0x982>
 8010ada:	4641      	mov	r1, r8
 8010adc:	4620      	mov	r0, r4
 8010ade:	f000 fd19 	bl	8011514 <_Bfree>
 8010ae2:	4639      	mov	r1, r7
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f000 fd15 	bl	8011514 <_Bfree>
 8010aea:	e6a5      	b.n	8010838 <_dtoa_r+0x6d8>
 8010aec:	2600      	movs	r6, #0
 8010aee:	4637      	mov	r7, r6
 8010af0:	e7e1      	b.n	8010ab6 <_dtoa_r+0x956>
 8010af2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010af4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010af8:	4637      	mov	r7, r6
 8010afa:	e599      	b.n	8010630 <_dtoa_r+0x4d0>
 8010afc:	9b08      	ldr	r3, [sp, #32]
 8010afe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	f000 80fd 	beq.w	8010d02 <_dtoa_r+0xba2>
 8010b08:	2d00      	cmp	r5, #0
 8010b0a:	dd05      	ble.n	8010b18 <_dtoa_r+0x9b8>
 8010b0c:	4639      	mov	r1, r7
 8010b0e:	462a      	mov	r2, r5
 8010b10:	4620      	mov	r0, r4
 8010b12:	f000 ff1b 	bl	801194c <__lshift>
 8010b16:	4607      	mov	r7, r0
 8010b18:	9b06      	ldr	r3, [sp, #24]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d05c      	beq.n	8010bd8 <_dtoa_r+0xa78>
 8010b1e:	6879      	ldr	r1, [r7, #4]
 8010b20:	4620      	mov	r0, r4
 8010b22:	f000 fcb7 	bl	8011494 <_Balloc>
 8010b26:	4605      	mov	r5, r0
 8010b28:	b928      	cbnz	r0, 8010b36 <_dtoa_r+0x9d6>
 8010b2a:	4b80      	ldr	r3, [pc, #512]	; (8010d2c <_dtoa_r+0xbcc>)
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010b32:	f7ff bb2e 	b.w	8010192 <_dtoa_r+0x32>
 8010b36:	693a      	ldr	r2, [r7, #16]
 8010b38:	3202      	adds	r2, #2
 8010b3a:	0092      	lsls	r2, r2, #2
 8010b3c:	f107 010c 	add.w	r1, r7, #12
 8010b40:	300c      	adds	r0, #12
 8010b42:	f000 fc99 	bl	8011478 <memcpy>
 8010b46:	2201      	movs	r2, #1
 8010b48:	4629      	mov	r1, r5
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f000 fefe 	bl	801194c <__lshift>
 8010b50:	9b00      	ldr	r3, [sp, #0]
 8010b52:	3301      	adds	r3, #1
 8010b54:	9301      	str	r3, [sp, #4]
 8010b56:	9b00      	ldr	r3, [sp, #0]
 8010b58:	444b      	add	r3, r9
 8010b5a:	9307      	str	r3, [sp, #28]
 8010b5c:	9b02      	ldr	r3, [sp, #8]
 8010b5e:	f003 0301 	and.w	r3, r3, #1
 8010b62:	46b8      	mov	r8, r7
 8010b64:	9306      	str	r3, [sp, #24]
 8010b66:	4607      	mov	r7, r0
 8010b68:	9b01      	ldr	r3, [sp, #4]
 8010b6a:	4631      	mov	r1, r6
 8010b6c:	3b01      	subs	r3, #1
 8010b6e:	4658      	mov	r0, fp
 8010b70:	9302      	str	r3, [sp, #8]
 8010b72:	f7ff fa67 	bl	8010044 <quorem>
 8010b76:	4603      	mov	r3, r0
 8010b78:	3330      	adds	r3, #48	; 0x30
 8010b7a:	9004      	str	r0, [sp, #16]
 8010b7c:	4641      	mov	r1, r8
 8010b7e:	4658      	mov	r0, fp
 8010b80:	9308      	str	r3, [sp, #32]
 8010b82:	f000 ff4f 	bl	8011a24 <__mcmp>
 8010b86:	463a      	mov	r2, r7
 8010b88:	4681      	mov	r9, r0
 8010b8a:	4631      	mov	r1, r6
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f000 ff65 	bl	8011a5c <__mdiff>
 8010b92:	68c2      	ldr	r2, [r0, #12]
 8010b94:	9b08      	ldr	r3, [sp, #32]
 8010b96:	4605      	mov	r5, r0
 8010b98:	bb02      	cbnz	r2, 8010bdc <_dtoa_r+0xa7c>
 8010b9a:	4601      	mov	r1, r0
 8010b9c:	4658      	mov	r0, fp
 8010b9e:	f000 ff41 	bl	8011a24 <__mcmp>
 8010ba2:	9b08      	ldr	r3, [sp, #32]
 8010ba4:	4602      	mov	r2, r0
 8010ba6:	4629      	mov	r1, r5
 8010ba8:	4620      	mov	r0, r4
 8010baa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8010bae:	f000 fcb1 	bl	8011514 <_Bfree>
 8010bb2:	9b05      	ldr	r3, [sp, #20]
 8010bb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bb6:	9d01      	ldr	r5, [sp, #4]
 8010bb8:	ea43 0102 	orr.w	r1, r3, r2
 8010bbc:	9b06      	ldr	r3, [sp, #24]
 8010bbe:	430b      	orrs	r3, r1
 8010bc0:	9b08      	ldr	r3, [sp, #32]
 8010bc2:	d10d      	bne.n	8010be0 <_dtoa_r+0xa80>
 8010bc4:	2b39      	cmp	r3, #57	; 0x39
 8010bc6:	d029      	beq.n	8010c1c <_dtoa_r+0xabc>
 8010bc8:	f1b9 0f00 	cmp.w	r9, #0
 8010bcc:	dd01      	ble.n	8010bd2 <_dtoa_r+0xa72>
 8010bce:	9b04      	ldr	r3, [sp, #16]
 8010bd0:	3331      	adds	r3, #49	; 0x31
 8010bd2:	9a02      	ldr	r2, [sp, #8]
 8010bd4:	7013      	strb	r3, [r2, #0]
 8010bd6:	e774      	b.n	8010ac2 <_dtoa_r+0x962>
 8010bd8:	4638      	mov	r0, r7
 8010bda:	e7b9      	b.n	8010b50 <_dtoa_r+0x9f0>
 8010bdc:	2201      	movs	r2, #1
 8010bde:	e7e2      	b.n	8010ba6 <_dtoa_r+0xa46>
 8010be0:	f1b9 0f00 	cmp.w	r9, #0
 8010be4:	db06      	blt.n	8010bf4 <_dtoa_r+0xa94>
 8010be6:	9905      	ldr	r1, [sp, #20]
 8010be8:	ea41 0909 	orr.w	r9, r1, r9
 8010bec:	9906      	ldr	r1, [sp, #24]
 8010bee:	ea59 0101 	orrs.w	r1, r9, r1
 8010bf2:	d120      	bne.n	8010c36 <_dtoa_r+0xad6>
 8010bf4:	2a00      	cmp	r2, #0
 8010bf6:	ddec      	ble.n	8010bd2 <_dtoa_r+0xa72>
 8010bf8:	4659      	mov	r1, fp
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	9301      	str	r3, [sp, #4]
 8010c00:	f000 fea4 	bl	801194c <__lshift>
 8010c04:	4631      	mov	r1, r6
 8010c06:	4683      	mov	fp, r0
 8010c08:	f000 ff0c 	bl	8011a24 <__mcmp>
 8010c0c:	2800      	cmp	r0, #0
 8010c0e:	9b01      	ldr	r3, [sp, #4]
 8010c10:	dc02      	bgt.n	8010c18 <_dtoa_r+0xab8>
 8010c12:	d1de      	bne.n	8010bd2 <_dtoa_r+0xa72>
 8010c14:	07da      	lsls	r2, r3, #31
 8010c16:	d5dc      	bpl.n	8010bd2 <_dtoa_r+0xa72>
 8010c18:	2b39      	cmp	r3, #57	; 0x39
 8010c1a:	d1d8      	bne.n	8010bce <_dtoa_r+0xa6e>
 8010c1c:	9a02      	ldr	r2, [sp, #8]
 8010c1e:	2339      	movs	r3, #57	; 0x39
 8010c20:	7013      	strb	r3, [r2, #0]
 8010c22:	462b      	mov	r3, r5
 8010c24:	461d      	mov	r5, r3
 8010c26:	3b01      	subs	r3, #1
 8010c28:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010c2c:	2a39      	cmp	r2, #57	; 0x39
 8010c2e:	d050      	beq.n	8010cd2 <_dtoa_r+0xb72>
 8010c30:	3201      	adds	r2, #1
 8010c32:	701a      	strb	r2, [r3, #0]
 8010c34:	e745      	b.n	8010ac2 <_dtoa_r+0x962>
 8010c36:	2a00      	cmp	r2, #0
 8010c38:	dd03      	ble.n	8010c42 <_dtoa_r+0xae2>
 8010c3a:	2b39      	cmp	r3, #57	; 0x39
 8010c3c:	d0ee      	beq.n	8010c1c <_dtoa_r+0xabc>
 8010c3e:	3301      	adds	r3, #1
 8010c40:	e7c7      	b.n	8010bd2 <_dtoa_r+0xa72>
 8010c42:	9a01      	ldr	r2, [sp, #4]
 8010c44:	9907      	ldr	r1, [sp, #28]
 8010c46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010c4a:	428a      	cmp	r2, r1
 8010c4c:	d02a      	beq.n	8010ca4 <_dtoa_r+0xb44>
 8010c4e:	4659      	mov	r1, fp
 8010c50:	2300      	movs	r3, #0
 8010c52:	220a      	movs	r2, #10
 8010c54:	4620      	mov	r0, r4
 8010c56:	f000 fc7f 	bl	8011558 <__multadd>
 8010c5a:	45b8      	cmp	r8, r7
 8010c5c:	4683      	mov	fp, r0
 8010c5e:	f04f 0300 	mov.w	r3, #0
 8010c62:	f04f 020a 	mov.w	r2, #10
 8010c66:	4641      	mov	r1, r8
 8010c68:	4620      	mov	r0, r4
 8010c6a:	d107      	bne.n	8010c7c <_dtoa_r+0xb1c>
 8010c6c:	f000 fc74 	bl	8011558 <__multadd>
 8010c70:	4680      	mov	r8, r0
 8010c72:	4607      	mov	r7, r0
 8010c74:	9b01      	ldr	r3, [sp, #4]
 8010c76:	3301      	adds	r3, #1
 8010c78:	9301      	str	r3, [sp, #4]
 8010c7a:	e775      	b.n	8010b68 <_dtoa_r+0xa08>
 8010c7c:	f000 fc6c 	bl	8011558 <__multadd>
 8010c80:	4639      	mov	r1, r7
 8010c82:	4680      	mov	r8, r0
 8010c84:	2300      	movs	r3, #0
 8010c86:	220a      	movs	r2, #10
 8010c88:	4620      	mov	r0, r4
 8010c8a:	f000 fc65 	bl	8011558 <__multadd>
 8010c8e:	4607      	mov	r7, r0
 8010c90:	e7f0      	b.n	8010c74 <_dtoa_r+0xb14>
 8010c92:	f1b9 0f00 	cmp.w	r9, #0
 8010c96:	9a00      	ldr	r2, [sp, #0]
 8010c98:	bfcc      	ite	gt
 8010c9a:	464d      	movgt	r5, r9
 8010c9c:	2501      	movle	r5, #1
 8010c9e:	4415      	add	r5, r2
 8010ca0:	f04f 0800 	mov.w	r8, #0
 8010ca4:	4659      	mov	r1, fp
 8010ca6:	2201      	movs	r2, #1
 8010ca8:	4620      	mov	r0, r4
 8010caa:	9301      	str	r3, [sp, #4]
 8010cac:	f000 fe4e 	bl	801194c <__lshift>
 8010cb0:	4631      	mov	r1, r6
 8010cb2:	4683      	mov	fp, r0
 8010cb4:	f000 feb6 	bl	8011a24 <__mcmp>
 8010cb8:	2800      	cmp	r0, #0
 8010cba:	dcb2      	bgt.n	8010c22 <_dtoa_r+0xac2>
 8010cbc:	d102      	bne.n	8010cc4 <_dtoa_r+0xb64>
 8010cbe:	9b01      	ldr	r3, [sp, #4]
 8010cc0:	07db      	lsls	r3, r3, #31
 8010cc2:	d4ae      	bmi.n	8010c22 <_dtoa_r+0xac2>
 8010cc4:	462b      	mov	r3, r5
 8010cc6:	461d      	mov	r5, r3
 8010cc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ccc:	2a30      	cmp	r2, #48	; 0x30
 8010cce:	d0fa      	beq.n	8010cc6 <_dtoa_r+0xb66>
 8010cd0:	e6f7      	b.n	8010ac2 <_dtoa_r+0x962>
 8010cd2:	9a00      	ldr	r2, [sp, #0]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d1a5      	bne.n	8010c24 <_dtoa_r+0xac4>
 8010cd8:	f10a 0a01 	add.w	sl, sl, #1
 8010cdc:	2331      	movs	r3, #49	; 0x31
 8010cde:	e779      	b.n	8010bd4 <_dtoa_r+0xa74>
 8010ce0:	4b13      	ldr	r3, [pc, #76]	; (8010d30 <_dtoa_r+0xbd0>)
 8010ce2:	f7ff baaf 	b.w	8010244 <_dtoa_r+0xe4>
 8010ce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	f47f aa86 	bne.w	80101fa <_dtoa_r+0x9a>
 8010cee:	4b11      	ldr	r3, [pc, #68]	; (8010d34 <_dtoa_r+0xbd4>)
 8010cf0:	f7ff baa8 	b.w	8010244 <_dtoa_r+0xe4>
 8010cf4:	f1b9 0f00 	cmp.w	r9, #0
 8010cf8:	dc03      	bgt.n	8010d02 <_dtoa_r+0xba2>
 8010cfa:	9b05      	ldr	r3, [sp, #20]
 8010cfc:	2b02      	cmp	r3, #2
 8010cfe:	f73f aec9 	bgt.w	8010a94 <_dtoa_r+0x934>
 8010d02:	9d00      	ldr	r5, [sp, #0]
 8010d04:	4631      	mov	r1, r6
 8010d06:	4658      	mov	r0, fp
 8010d08:	f7ff f99c 	bl	8010044 <quorem>
 8010d0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010d10:	f805 3b01 	strb.w	r3, [r5], #1
 8010d14:	9a00      	ldr	r2, [sp, #0]
 8010d16:	1aaa      	subs	r2, r5, r2
 8010d18:	4591      	cmp	r9, r2
 8010d1a:	ddba      	ble.n	8010c92 <_dtoa_r+0xb32>
 8010d1c:	4659      	mov	r1, fp
 8010d1e:	2300      	movs	r3, #0
 8010d20:	220a      	movs	r2, #10
 8010d22:	4620      	mov	r0, r4
 8010d24:	f000 fc18 	bl	8011558 <__multadd>
 8010d28:	4683      	mov	fp, r0
 8010d2a:	e7eb      	b.n	8010d04 <_dtoa_r+0xba4>
 8010d2c:	08026969 	.word	0x08026969
 8010d30:	080266cc 	.word	0x080266cc
 8010d34:	080268fd 	.word	0x080268fd

08010d38 <fiprintf>:
 8010d38:	b40e      	push	{r1, r2, r3}
 8010d3a:	b503      	push	{r0, r1, lr}
 8010d3c:	4601      	mov	r1, r0
 8010d3e:	ab03      	add	r3, sp, #12
 8010d40:	4805      	ldr	r0, [pc, #20]	; (8010d58 <fiprintf+0x20>)
 8010d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d46:	6800      	ldr	r0, [r0, #0]
 8010d48:	9301      	str	r3, [sp, #4]
 8010d4a:	f001 fa9d 	bl	8012288 <_vfiprintf_r>
 8010d4e:	b002      	add	sp, #8
 8010d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d54:	b003      	add	sp, #12
 8010d56:	4770      	bx	lr
 8010d58:	20000040 	.word	0x20000040

08010d5c <rshift>:
 8010d5c:	6903      	ldr	r3, [r0, #16]
 8010d5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010d62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d66:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010d6a:	f100 0414 	add.w	r4, r0, #20
 8010d6e:	dd45      	ble.n	8010dfc <rshift+0xa0>
 8010d70:	f011 011f 	ands.w	r1, r1, #31
 8010d74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010d78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010d7c:	d10c      	bne.n	8010d98 <rshift+0x3c>
 8010d7e:	f100 0710 	add.w	r7, r0, #16
 8010d82:	4629      	mov	r1, r5
 8010d84:	42b1      	cmp	r1, r6
 8010d86:	d334      	bcc.n	8010df2 <rshift+0x96>
 8010d88:	1a9b      	subs	r3, r3, r2
 8010d8a:	009b      	lsls	r3, r3, #2
 8010d8c:	1eea      	subs	r2, r5, #3
 8010d8e:	4296      	cmp	r6, r2
 8010d90:	bf38      	it	cc
 8010d92:	2300      	movcc	r3, #0
 8010d94:	4423      	add	r3, r4
 8010d96:	e015      	b.n	8010dc4 <rshift+0x68>
 8010d98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010d9c:	f1c1 0820 	rsb	r8, r1, #32
 8010da0:	40cf      	lsrs	r7, r1
 8010da2:	f105 0e04 	add.w	lr, r5, #4
 8010da6:	46a1      	mov	r9, r4
 8010da8:	4576      	cmp	r6, lr
 8010daa:	46f4      	mov	ip, lr
 8010dac:	d815      	bhi.n	8010dda <rshift+0x7e>
 8010dae:	1a9b      	subs	r3, r3, r2
 8010db0:	009a      	lsls	r2, r3, #2
 8010db2:	3a04      	subs	r2, #4
 8010db4:	3501      	adds	r5, #1
 8010db6:	42ae      	cmp	r6, r5
 8010db8:	bf38      	it	cc
 8010dba:	2200      	movcc	r2, #0
 8010dbc:	18a3      	adds	r3, r4, r2
 8010dbe:	50a7      	str	r7, [r4, r2]
 8010dc0:	b107      	cbz	r7, 8010dc4 <rshift+0x68>
 8010dc2:	3304      	adds	r3, #4
 8010dc4:	1b1a      	subs	r2, r3, r4
 8010dc6:	42a3      	cmp	r3, r4
 8010dc8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010dcc:	bf08      	it	eq
 8010dce:	2300      	moveq	r3, #0
 8010dd0:	6102      	str	r2, [r0, #16]
 8010dd2:	bf08      	it	eq
 8010dd4:	6143      	streq	r3, [r0, #20]
 8010dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dda:	f8dc c000 	ldr.w	ip, [ip]
 8010dde:	fa0c fc08 	lsl.w	ip, ip, r8
 8010de2:	ea4c 0707 	orr.w	r7, ip, r7
 8010de6:	f849 7b04 	str.w	r7, [r9], #4
 8010dea:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010dee:	40cf      	lsrs	r7, r1
 8010df0:	e7da      	b.n	8010da8 <rshift+0x4c>
 8010df2:	f851 cb04 	ldr.w	ip, [r1], #4
 8010df6:	f847 cf04 	str.w	ip, [r7, #4]!
 8010dfa:	e7c3      	b.n	8010d84 <rshift+0x28>
 8010dfc:	4623      	mov	r3, r4
 8010dfe:	e7e1      	b.n	8010dc4 <rshift+0x68>

08010e00 <__hexdig_fun>:
 8010e00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010e04:	2b09      	cmp	r3, #9
 8010e06:	d802      	bhi.n	8010e0e <__hexdig_fun+0xe>
 8010e08:	3820      	subs	r0, #32
 8010e0a:	b2c0      	uxtb	r0, r0
 8010e0c:	4770      	bx	lr
 8010e0e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010e12:	2b05      	cmp	r3, #5
 8010e14:	d801      	bhi.n	8010e1a <__hexdig_fun+0x1a>
 8010e16:	3847      	subs	r0, #71	; 0x47
 8010e18:	e7f7      	b.n	8010e0a <__hexdig_fun+0xa>
 8010e1a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010e1e:	2b05      	cmp	r3, #5
 8010e20:	d801      	bhi.n	8010e26 <__hexdig_fun+0x26>
 8010e22:	3827      	subs	r0, #39	; 0x27
 8010e24:	e7f1      	b.n	8010e0a <__hexdig_fun+0xa>
 8010e26:	2000      	movs	r0, #0
 8010e28:	4770      	bx	lr
	...

08010e2c <__gethex>:
 8010e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e30:	ed2d 8b02 	vpush	{d8}
 8010e34:	b089      	sub	sp, #36	; 0x24
 8010e36:	ee08 0a10 	vmov	s16, r0
 8010e3a:	9304      	str	r3, [sp, #16]
 8010e3c:	4bbc      	ldr	r3, [pc, #752]	; (8011130 <__gethex+0x304>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	9301      	str	r3, [sp, #4]
 8010e42:	4618      	mov	r0, r3
 8010e44:	468b      	mov	fp, r1
 8010e46:	4690      	mov	r8, r2
 8010e48:	f7ef f9d4 	bl	80001f4 <strlen>
 8010e4c:	9b01      	ldr	r3, [sp, #4]
 8010e4e:	f8db 2000 	ldr.w	r2, [fp]
 8010e52:	4403      	add	r3, r0
 8010e54:	4682      	mov	sl, r0
 8010e56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010e5a:	9305      	str	r3, [sp, #20]
 8010e5c:	1c93      	adds	r3, r2, #2
 8010e5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010e62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010e66:	32fe      	adds	r2, #254	; 0xfe
 8010e68:	18d1      	adds	r1, r2, r3
 8010e6a:	461f      	mov	r7, r3
 8010e6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010e70:	9100      	str	r1, [sp, #0]
 8010e72:	2830      	cmp	r0, #48	; 0x30
 8010e74:	d0f8      	beq.n	8010e68 <__gethex+0x3c>
 8010e76:	f7ff ffc3 	bl	8010e00 <__hexdig_fun>
 8010e7a:	4604      	mov	r4, r0
 8010e7c:	2800      	cmp	r0, #0
 8010e7e:	d13a      	bne.n	8010ef6 <__gethex+0xca>
 8010e80:	9901      	ldr	r1, [sp, #4]
 8010e82:	4652      	mov	r2, sl
 8010e84:	4638      	mov	r0, r7
 8010e86:	f001 fb47 	bl	8012518 <strncmp>
 8010e8a:	4605      	mov	r5, r0
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	d168      	bne.n	8010f62 <__gethex+0x136>
 8010e90:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010e94:	eb07 060a 	add.w	r6, r7, sl
 8010e98:	f7ff ffb2 	bl	8010e00 <__hexdig_fun>
 8010e9c:	2800      	cmp	r0, #0
 8010e9e:	d062      	beq.n	8010f66 <__gethex+0x13a>
 8010ea0:	4633      	mov	r3, r6
 8010ea2:	7818      	ldrb	r0, [r3, #0]
 8010ea4:	2830      	cmp	r0, #48	; 0x30
 8010ea6:	461f      	mov	r7, r3
 8010ea8:	f103 0301 	add.w	r3, r3, #1
 8010eac:	d0f9      	beq.n	8010ea2 <__gethex+0x76>
 8010eae:	f7ff ffa7 	bl	8010e00 <__hexdig_fun>
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	fab0 f480 	clz	r4, r0
 8010eb8:	0964      	lsrs	r4, r4, #5
 8010eba:	4635      	mov	r5, r6
 8010ebc:	9300      	str	r3, [sp, #0]
 8010ebe:	463a      	mov	r2, r7
 8010ec0:	4616      	mov	r6, r2
 8010ec2:	3201      	adds	r2, #1
 8010ec4:	7830      	ldrb	r0, [r6, #0]
 8010ec6:	f7ff ff9b 	bl	8010e00 <__hexdig_fun>
 8010eca:	2800      	cmp	r0, #0
 8010ecc:	d1f8      	bne.n	8010ec0 <__gethex+0x94>
 8010ece:	9901      	ldr	r1, [sp, #4]
 8010ed0:	4652      	mov	r2, sl
 8010ed2:	4630      	mov	r0, r6
 8010ed4:	f001 fb20 	bl	8012518 <strncmp>
 8010ed8:	b980      	cbnz	r0, 8010efc <__gethex+0xd0>
 8010eda:	b94d      	cbnz	r5, 8010ef0 <__gethex+0xc4>
 8010edc:	eb06 050a 	add.w	r5, r6, sl
 8010ee0:	462a      	mov	r2, r5
 8010ee2:	4616      	mov	r6, r2
 8010ee4:	3201      	adds	r2, #1
 8010ee6:	7830      	ldrb	r0, [r6, #0]
 8010ee8:	f7ff ff8a 	bl	8010e00 <__hexdig_fun>
 8010eec:	2800      	cmp	r0, #0
 8010eee:	d1f8      	bne.n	8010ee2 <__gethex+0xb6>
 8010ef0:	1bad      	subs	r5, r5, r6
 8010ef2:	00ad      	lsls	r5, r5, #2
 8010ef4:	e004      	b.n	8010f00 <__gethex+0xd4>
 8010ef6:	2400      	movs	r4, #0
 8010ef8:	4625      	mov	r5, r4
 8010efa:	e7e0      	b.n	8010ebe <__gethex+0x92>
 8010efc:	2d00      	cmp	r5, #0
 8010efe:	d1f7      	bne.n	8010ef0 <__gethex+0xc4>
 8010f00:	7833      	ldrb	r3, [r6, #0]
 8010f02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010f06:	2b50      	cmp	r3, #80	; 0x50
 8010f08:	d13b      	bne.n	8010f82 <__gethex+0x156>
 8010f0a:	7873      	ldrb	r3, [r6, #1]
 8010f0c:	2b2b      	cmp	r3, #43	; 0x2b
 8010f0e:	d02c      	beq.n	8010f6a <__gethex+0x13e>
 8010f10:	2b2d      	cmp	r3, #45	; 0x2d
 8010f12:	d02e      	beq.n	8010f72 <__gethex+0x146>
 8010f14:	1c71      	adds	r1, r6, #1
 8010f16:	f04f 0900 	mov.w	r9, #0
 8010f1a:	7808      	ldrb	r0, [r1, #0]
 8010f1c:	f7ff ff70 	bl	8010e00 <__hexdig_fun>
 8010f20:	1e43      	subs	r3, r0, #1
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	2b18      	cmp	r3, #24
 8010f26:	d82c      	bhi.n	8010f82 <__gethex+0x156>
 8010f28:	f1a0 0210 	sub.w	r2, r0, #16
 8010f2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010f30:	f7ff ff66 	bl	8010e00 <__hexdig_fun>
 8010f34:	1e43      	subs	r3, r0, #1
 8010f36:	b2db      	uxtb	r3, r3
 8010f38:	2b18      	cmp	r3, #24
 8010f3a:	d91d      	bls.n	8010f78 <__gethex+0x14c>
 8010f3c:	f1b9 0f00 	cmp.w	r9, #0
 8010f40:	d000      	beq.n	8010f44 <__gethex+0x118>
 8010f42:	4252      	negs	r2, r2
 8010f44:	4415      	add	r5, r2
 8010f46:	f8cb 1000 	str.w	r1, [fp]
 8010f4a:	b1e4      	cbz	r4, 8010f86 <__gethex+0x15a>
 8010f4c:	9b00      	ldr	r3, [sp, #0]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	bf14      	ite	ne
 8010f52:	2700      	movne	r7, #0
 8010f54:	2706      	moveq	r7, #6
 8010f56:	4638      	mov	r0, r7
 8010f58:	b009      	add	sp, #36	; 0x24
 8010f5a:	ecbd 8b02 	vpop	{d8}
 8010f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f62:	463e      	mov	r6, r7
 8010f64:	4625      	mov	r5, r4
 8010f66:	2401      	movs	r4, #1
 8010f68:	e7ca      	b.n	8010f00 <__gethex+0xd4>
 8010f6a:	f04f 0900 	mov.w	r9, #0
 8010f6e:	1cb1      	adds	r1, r6, #2
 8010f70:	e7d3      	b.n	8010f1a <__gethex+0xee>
 8010f72:	f04f 0901 	mov.w	r9, #1
 8010f76:	e7fa      	b.n	8010f6e <__gethex+0x142>
 8010f78:	230a      	movs	r3, #10
 8010f7a:	fb03 0202 	mla	r2, r3, r2, r0
 8010f7e:	3a10      	subs	r2, #16
 8010f80:	e7d4      	b.n	8010f2c <__gethex+0x100>
 8010f82:	4631      	mov	r1, r6
 8010f84:	e7df      	b.n	8010f46 <__gethex+0x11a>
 8010f86:	1bf3      	subs	r3, r6, r7
 8010f88:	3b01      	subs	r3, #1
 8010f8a:	4621      	mov	r1, r4
 8010f8c:	2b07      	cmp	r3, #7
 8010f8e:	dc0b      	bgt.n	8010fa8 <__gethex+0x17c>
 8010f90:	ee18 0a10 	vmov	r0, s16
 8010f94:	f000 fa7e 	bl	8011494 <_Balloc>
 8010f98:	4604      	mov	r4, r0
 8010f9a:	b940      	cbnz	r0, 8010fae <__gethex+0x182>
 8010f9c:	4b65      	ldr	r3, [pc, #404]	; (8011134 <__gethex+0x308>)
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	21de      	movs	r1, #222	; 0xde
 8010fa2:	4865      	ldr	r0, [pc, #404]	; (8011138 <__gethex+0x30c>)
 8010fa4:	f7ff f830 	bl	8010008 <__assert_func>
 8010fa8:	3101      	adds	r1, #1
 8010faa:	105b      	asrs	r3, r3, #1
 8010fac:	e7ee      	b.n	8010f8c <__gethex+0x160>
 8010fae:	f100 0914 	add.w	r9, r0, #20
 8010fb2:	f04f 0b00 	mov.w	fp, #0
 8010fb6:	f1ca 0301 	rsb	r3, sl, #1
 8010fba:	f8cd 9008 	str.w	r9, [sp, #8]
 8010fbe:	f8cd b000 	str.w	fp, [sp]
 8010fc2:	9306      	str	r3, [sp, #24]
 8010fc4:	42b7      	cmp	r7, r6
 8010fc6:	d340      	bcc.n	801104a <__gethex+0x21e>
 8010fc8:	9802      	ldr	r0, [sp, #8]
 8010fca:	9b00      	ldr	r3, [sp, #0]
 8010fcc:	f840 3b04 	str.w	r3, [r0], #4
 8010fd0:	eba0 0009 	sub.w	r0, r0, r9
 8010fd4:	1080      	asrs	r0, r0, #2
 8010fd6:	0146      	lsls	r6, r0, #5
 8010fd8:	6120      	str	r0, [r4, #16]
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f000 fb50 	bl	8011680 <__hi0bits>
 8010fe0:	1a30      	subs	r0, r6, r0
 8010fe2:	f8d8 6000 	ldr.w	r6, [r8]
 8010fe6:	42b0      	cmp	r0, r6
 8010fe8:	dd63      	ble.n	80110b2 <__gethex+0x286>
 8010fea:	1b87      	subs	r7, r0, r6
 8010fec:	4639      	mov	r1, r7
 8010fee:	4620      	mov	r0, r4
 8010ff0:	f000 feea 	bl	8011dc8 <__any_on>
 8010ff4:	4682      	mov	sl, r0
 8010ff6:	b1a8      	cbz	r0, 8011024 <__gethex+0x1f8>
 8010ff8:	1e7b      	subs	r3, r7, #1
 8010ffa:	1159      	asrs	r1, r3, #5
 8010ffc:	f003 021f 	and.w	r2, r3, #31
 8011000:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011004:	f04f 0a01 	mov.w	sl, #1
 8011008:	fa0a f202 	lsl.w	r2, sl, r2
 801100c:	420a      	tst	r2, r1
 801100e:	d009      	beq.n	8011024 <__gethex+0x1f8>
 8011010:	4553      	cmp	r3, sl
 8011012:	dd05      	ble.n	8011020 <__gethex+0x1f4>
 8011014:	1eb9      	subs	r1, r7, #2
 8011016:	4620      	mov	r0, r4
 8011018:	f000 fed6 	bl	8011dc8 <__any_on>
 801101c:	2800      	cmp	r0, #0
 801101e:	d145      	bne.n	80110ac <__gethex+0x280>
 8011020:	f04f 0a02 	mov.w	sl, #2
 8011024:	4639      	mov	r1, r7
 8011026:	4620      	mov	r0, r4
 8011028:	f7ff fe98 	bl	8010d5c <rshift>
 801102c:	443d      	add	r5, r7
 801102e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011032:	42ab      	cmp	r3, r5
 8011034:	da4c      	bge.n	80110d0 <__gethex+0x2a4>
 8011036:	ee18 0a10 	vmov	r0, s16
 801103a:	4621      	mov	r1, r4
 801103c:	f000 fa6a 	bl	8011514 <_Bfree>
 8011040:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011042:	2300      	movs	r3, #0
 8011044:	6013      	str	r3, [r2, #0]
 8011046:	27a3      	movs	r7, #163	; 0xa3
 8011048:	e785      	b.n	8010f56 <__gethex+0x12a>
 801104a:	1e73      	subs	r3, r6, #1
 801104c:	9a05      	ldr	r2, [sp, #20]
 801104e:	9303      	str	r3, [sp, #12]
 8011050:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011054:	4293      	cmp	r3, r2
 8011056:	d019      	beq.n	801108c <__gethex+0x260>
 8011058:	f1bb 0f20 	cmp.w	fp, #32
 801105c:	d107      	bne.n	801106e <__gethex+0x242>
 801105e:	9b02      	ldr	r3, [sp, #8]
 8011060:	9a00      	ldr	r2, [sp, #0]
 8011062:	f843 2b04 	str.w	r2, [r3], #4
 8011066:	9302      	str	r3, [sp, #8]
 8011068:	2300      	movs	r3, #0
 801106a:	9300      	str	r3, [sp, #0]
 801106c:	469b      	mov	fp, r3
 801106e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011072:	f7ff fec5 	bl	8010e00 <__hexdig_fun>
 8011076:	9b00      	ldr	r3, [sp, #0]
 8011078:	f000 000f 	and.w	r0, r0, #15
 801107c:	fa00 f00b 	lsl.w	r0, r0, fp
 8011080:	4303      	orrs	r3, r0
 8011082:	9300      	str	r3, [sp, #0]
 8011084:	f10b 0b04 	add.w	fp, fp, #4
 8011088:	9b03      	ldr	r3, [sp, #12]
 801108a:	e00d      	b.n	80110a8 <__gethex+0x27c>
 801108c:	9b03      	ldr	r3, [sp, #12]
 801108e:	9a06      	ldr	r2, [sp, #24]
 8011090:	4413      	add	r3, r2
 8011092:	42bb      	cmp	r3, r7
 8011094:	d3e0      	bcc.n	8011058 <__gethex+0x22c>
 8011096:	4618      	mov	r0, r3
 8011098:	9901      	ldr	r1, [sp, #4]
 801109a:	9307      	str	r3, [sp, #28]
 801109c:	4652      	mov	r2, sl
 801109e:	f001 fa3b 	bl	8012518 <strncmp>
 80110a2:	9b07      	ldr	r3, [sp, #28]
 80110a4:	2800      	cmp	r0, #0
 80110a6:	d1d7      	bne.n	8011058 <__gethex+0x22c>
 80110a8:	461e      	mov	r6, r3
 80110aa:	e78b      	b.n	8010fc4 <__gethex+0x198>
 80110ac:	f04f 0a03 	mov.w	sl, #3
 80110b0:	e7b8      	b.n	8011024 <__gethex+0x1f8>
 80110b2:	da0a      	bge.n	80110ca <__gethex+0x29e>
 80110b4:	1a37      	subs	r7, r6, r0
 80110b6:	4621      	mov	r1, r4
 80110b8:	ee18 0a10 	vmov	r0, s16
 80110bc:	463a      	mov	r2, r7
 80110be:	f000 fc45 	bl	801194c <__lshift>
 80110c2:	1bed      	subs	r5, r5, r7
 80110c4:	4604      	mov	r4, r0
 80110c6:	f100 0914 	add.w	r9, r0, #20
 80110ca:	f04f 0a00 	mov.w	sl, #0
 80110ce:	e7ae      	b.n	801102e <__gethex+0x202>
 80110d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80110d4:	42a8      	cmp	r0, r5
 80110d6:	dd72      	ble.n	80111be <__gethex+0x392>
 80110d8:	1b45      	subs	r5, r0, r5
 80110da:	42ae      	cmp	r6, r5
 80110dc:	dc36      	bgt.n	801114c <__gethex+0x320>
 80110de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80110e2:	2b02      	cmp	r3, #2
 80110e4:	d02a      	beq.n	801113c <__gethex+0x310>
 80110e6:	2b03      	cmp	r3, #3
 80110e8:	d02c      	beq.n	8011144 <__gethex+0x318>
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	d115      	bne.n	801111a <__gethex+0x2ee>
 80110ee:	42ae      	cmp	r6, r5
 80110f0:	d113      	bne.n	801111a <__gethex+0x2ee>
 80110f2:	2e01      	cmp	r6, #1
 80110f4:	d10b      	bne.n	801110e <__gethex+0x2e2>
 80110f6:	9a04      	ldr	r2, [sp, #16]
 80110f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80110fc:	6013      	str	r3, [r2, #0]
 80110fe:	2301      	movs	r3, #1
 8011100:	6123      	str	r3, [r4, #16]
 8011102:	f8c9 3000 	str.w	r3, [r9]
 8011106:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011108:	2762      	movs	r7, #98	; 0x62
 801110a:	601c      	str	r4, [r3, #0]
 801110c:	e723      	b.n	8010f56 <__gethex+0x12a>
 801110e:	1e71      	subs	r1, r6, #1
 8011110:	4620      	mov	r0, r4
 8011112:	f000 fe59 	bl	8011dc8 <__any_on>
 8011116:	2800      	cmp	r0, #0
 8011118:	d1ed      	bne.n	80110f6 <__gethex+0x2ca>
 801111a:	ee18 0a10 	vmov	r0, s16
 801111e:	4621      	mov	r1, r4
 8011120:	f000 f9f8 	bl	8011514 <_Bfree>
 8011124:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011126:	2300      	movs	r3, #0
 8011128:	6013      	str	r3, [r2, #0]
 801112a:	2750      	movs	r7, #80	; 0x50
 801112c:	e713      	b.n	8010f56 <__gethex+0x12a>
 801112e:	bf00      	nop
 8011130:	080269e4 	.word	0x080269e4
 8011134:	08026969 	.word	0x08026969
 8011138:	0802697a 	.word	0x0802697a
 801113c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801113e:	2b00      	cmp	r3, #0
 8011140:	d1eb      	bne.n	801111a <__gethex+0x2ee>
 8011142:	e7d8      	b.n	80110f6 <__gethex+0x2ca>
 8011144:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011146:	2b00      	cmp	r3, #0
 8011148:	d1d5      	bne.n	80110f6 <__gethex+0x2ca>
 801114a:	e7e6      	b.n	801111a <__gethex+0x2ee>
 801114c:	1e6f      	subs	r7, r5, #1
 801114e:	f1ba 0f00 	cmp.w	sl, #0
 8011152:	d131      	bne.n	80111b8 <__gethex+0x38c>
 8011154:	b127      	cbz	r7, 8011160 <__gethex+0x334>
 8011156:	4639      	mov	r1, r7
 8011158:	4620      	mov	r0, r4
 801115a:	f000 fe35 	bl	8011dc8 <__any_on>
 801115e:	4682      	mov	sl, r0
 8011160:	117b      	asrs	r3, r7, #5
 8011162:	2101      	movs	r1, #1
 8011164:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011168:	f007 071f 	and.w	r7, r7, #31
 801116c:	fa01 f707 	lsl.w	r7, r1, r7
 8011170:	421f      	tst	r7, r3
 8011172:	4629      	mov	r1, r5
 8011174:	4620      	mov	r0, r4
 8011176:	bf18      	it	ne
 8011178:	f04a 0a02 	orrne.w	sl, sl, #2
 801117c:	1b76      	subs	r6, r6, r5
 801117e:	f7ff fded 	bl	8010d5c <rshift>
 8011182:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011186:	2702      	movs	r7, #2
 8011188:	f1ba 0f00 	cmp.w	sl, #0
 801118c:	d048      	beq.n	8011220 <__gethex+0x3f4>
 801118e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011192:	2b02      	cmp	r3, #2
 8011194:	d015      	beq.n	80111c2 <__gethex+0x396>
 8011196:	2b03      	cmp	r3, #3
 8011198:	d017      	beq.n	80111ca <__gethex+0x39e>
 801119a:	2b01      	cmp	r3, #1
 801119c:	d109      	bne.n	80111b2 <__gethex+0x386>
 801119e:	f01a 0f02 	tst.w	sl, #2
 80111a2:	d006      	beq.n	80111b2 <__gethex+0x386>
 80111a4:	f8d9 0000 	ldr.w	r0, [r9]
 80111a8:	ea4a 0a00 	orr.w	sl, sl, r0
 80111ac:	f01a 0f01 	tst.w	sl, #1
 80111b0:	d10e      	bne.n	80111d0 <__gethex+0x3a4>
 80111b2:	f047 0710 	orr.w	r7, r7, #16
 80111b6:	e033      	b.n	8011220 <__gethex+0x3f4>
 80111b8:	f04f 0a01 	mov.w	sl, #1
 80111bc:	e7d0      	b.n	8011160 <__gethex+0x334>
 80111be:	2701      	movs	r7, #1
 80111c0:	e7e2      	b.n	8011188 <__gethex+0x35c>
 80111c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111c4:	f1c3 0301 	rsb	r3, r3, #1
 80111c8:	9315      	str	r3, [sp, #84]	; 0x54
 80111ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d0f0      	beq.n	80111b2 <__gethex+0x386>
 80111d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80111d4:	f104 0314 	add.w	r3, r4, #20
 80111d8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80111dc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80111e0:	f04f 0c00 	mov.w	ip, #0
 80111e4:	4618      	mov	r0, r3
 80111e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80111ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 80111ee:	d01c      	beq.n	801122a <__gethex+0x3fe>
 80111f0:	3201      	adds	r2, #1
 80111f2:	6002      	str	r2, [r0, #0]
 80111f4:	2f02      	cmp	r7, #2
 80111f6:	f104 0314 	add.w	r3, r4, #20
 80111fa:	d13f      	bne.n	801127c <__gethex+0x450>
 80111fc:	f8d8 2000 	ldr.w	r2, [r8]
 8011200:	3a01      	subs	r2, #1
 8011202:	42b2      	cmp	r2, r6
 8011204:	d10a      	bne.n	801121c <__gethex+0x3f0>
 8011206:	1171      	asrs	r1, r6, #5
 8011208:	2201      	movs	r2, #1
 801120a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801120e:	f006 061f 	and.w	r6, r6, #31
 8011212:	fa02 f606 	lsl.w	r6, r2, r6
 8011216:	421e      	tst	r6, r3
 8011218:	bf18      	it	ne
 801121a:	4617      	movne	r7, r2
 801121c:	f047 0720 	orr.w	r7, r7, #32
 8011220:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011222:	601c      	str	r4, [r3, #0]
 8011224:	9b04      	ldr	r3, [sp, #16]
 8011226:	601d      	str	r5, [r3, #0]
 8011228:	e695      	b.n	8010f56 <__gethex+0x12a>
 801122a:	4299      	cmp	r1, r3
 801122c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011230:	d8d8      	bhi.n	80111e4 <__gethex+0x3b8>
 8011232:	68a3      	ldr	r3, [r4, #8]
 8011234:	459b      	cmp	fp, r3
 8011236:	db19      	blt.n	801126c <__gethex+0x440>
 8011238:	6861      	ldr	r1, [r4, #4]
 801123a:	ee18 0a10 	vmov	r0, s16
 801123e:	3101      	adds	r1, #1
 8011240:	f000 f928 	bl	8011494 <_Balloc>
 8011244:	4681      	mov	r9, r0
 8011246:	b918      	cbnz	r0, 8011250 <__gethex+0x424>
 8011248:	4b1a      	ldr	r3, [pc, #104]	; (80112b4 <__gethex+0x488>)
 801124a:	4602      	mov	r2, r0
 801124c:	2184      	movs	r1, #132	; 0x84
 801124e:	e6a8      	b.n	8010fa2 <__gethex+0x176>
 8011250:	6922      	ldr	r2, [r4, #16]
 8011252:	3202      	adds	r2, #2
 8011254:	f104 010c 	add.w	r1, r4, #12
 8011258:	0092      	lsls	r2, r2, #2
 801125a:	300c      	adds	r0, #12
 801125c:	f000 f90c 	bl	8011478 <memcpy>
 8011260:	4621      	mov	r1, r4
 8011262:	ee18 0a10 	vmov	r0, s16
 8011266:	f000 f955 	bl	8011514 <_Bfree>
 801126a:	464c      	mov	r4, r9
 801126c:	6923      	ldr	r3, [r4, #16]
 801126e:	1c5a      	adds	r2, r3, #1
 8011270:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011274:	6122      	str	r2, [r4, #16]
 8011276:	2201      	movs	r2, #1
 8011278:	615a      	str	r2, [r3, #20]
 801127a:	e7bb      	b.n	80111f4 <__gethex+0x3c8>
 801127c:	6922      	ldr	r2, [r4, #16]
 801127e:	455a      	cmp	r2, fp
 8011280:	dd0b      	ble.n	801129a <__gethex+0x46e>
 8011282:	2101      	movs	r1, #1
 8011284:	4620      	mov	r0, r4
 8011286:	f7ff fd69 	bl	8010d5c <rshift>
 801128a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801128e:	3501      	adds	r5, #1
 8011290:	42ab      	cmp	r3, r5
 8011292:	f6ff aed0 	blt.w	8011036 <__gethex+0x20a>
 8011296:	2701      	movs	r7, #1
 8011298:	e7c0      	b.n	801121c <__gethex+0x3f0>
 801129a:	f016 061f 	ands.w	r6, r6, #31
 801129e:	d0fa      	beq.n	8011296 <__gethex+0x46a>
 80112a0:	449a      	add	sl, r3
 80112a2:	f1c6 0620 	rsb	r6, r6, #32
 80112a6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80112aa:	f000 f9e9 	bl	8011680 <__hi0bits>
 80112ae:	42b0      	cmp	r0, r6
 80112b0:	dbe7      	blt.n	8011282 <__gethex+0x456>
 80112b2:	e7f0      	b.n	8011296 <__gethex+0x46a>
 80112b4:	08026969 	.word	0x08026969

080112b8 <L_shift>:
 80112b8:	f1c2 0208 	rsb	r2, r2, #8
 80112bc:	0092      	lsls	r2, r2, #2
 80112be:	b570      	push	{r4, r5, r6, lr}
 80112c0:	f1c2 0620 	rsb	r6, r2, #32
 80112c4:	6843      	ldr	r3, [r0, #4]
 80112c6:	6804      	ldr	r4, [r0, #0]
 80112c8:	fa03 f506 	lsl.w	r5, r3, r6
 80112cc:	432c      	orrs	r4, r5
 80112ce:	40d3      	lsrs	r3, r2
 80112d0:	6004      	str	r4, [r0, #0]
 80112d2:	f840 3f04 	str.w	r3, [r0, #4]!
 80112d6:	4288      	cmp	r0, r1
 80112d8:	d3f4      	bcc.n	80112c4 <L_shift+0xc>
 80112da:	bd70      	pop	{r4, r5, r6, pc}

080112dc <__match>:
 80112dc:	b530      	push	{r4, r5, lr}
 80112de:	6803      	ldr	r3, [r0, #0]
 80112e0:	3301      	adds	r3, #1
 80112e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112e6:	b914      	cbnz	r4, 80112ee <__match+0x12>
 80112e8:	6003      	str	r3, [r0, #0]
 80112ea:	2001      	movs	r0, #1
 80112ec:	bd30      	pop	{r4, r5, pc}
 80112ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80112f6:	2d19      	cmp	r5, #25
 80112f8:	bf98      	it	ls
 80112fa:	3220      	addls	r2, #32
 80112fc:	42a2      	cmp	r2, r4
 80112fe:	d0f0      	beq.n	80112e2 <__match+0x6>
 8011300:	2000      	movs	r0, #0
 8011302:	e7f3      	b.n	80112ec <__match+0x10>

08011304 <__hexnan>:
 8011304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011308:	680b      	ldr	r3, [r1, #0]
 801130a:	6801      	ldr	r1, [r0, #0]
 801130c:	115e      	asrs	r6, r3, #5
 801130e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011312:	f013 031f 	ands.w	r3, r3, #31
 8011316:	b087      	sub	sp, #28
 8011318:	bf18      	it	ne
 801131a:	3604      	addne	r6, #4
 801131c:	2500      	movs	r5, #0
 801131e:	1f37      	subs	r7, r6, #4
 8011320:	4682      	mov	sl, r0
 8011322:	4690      	mov	r8, r2
 8011324:	9301      	str	r3, [sp, #4]
 8011326:	f846 5c04 	str.w	r5, [r6, #-4]
 801132a:	46b9      	mov	r9, r7
 801132c:	463c      	mov	r4, r7
 801132e:	9502      	str	r5, [sp, #8]
 8011330:	46ab      	mov	fp, r5
 8011332:	784a      	ldrb	r2, [r1, #1]
 8011334:	1c4b      	adds	r3, r1, #1
 8011336:	9303      	str	r3, [sp, #12]
 8011338:	b342      	cbz	r2, 801138c <__hexnan+0x88>
 801133a:	4610      	mov	r0, r2
 801133c:	9105      	str	r1, [sp, #20]
 801133e:	9204      	str	r2, [sp, #16]
 8011340:	f7ff fd5e 	bl	8010e00 <__hexdig_fun>
 8011344:	2800      	cmp	r0, #0
 8011346:	d14f      	bne.n	80113e8 <__hexnan+0xe4>
 8011348:	9a04      	ldr	r2, [sp, #16]
 801134a:	9905      	ldr	r1, [sp, #20]
 801134c:	2a20      	cmp	r2, #32
 801134e:	d818      	bhi.n	8011382 <__hexnan+0x7e>
 8011350:	9b02      	ldr	r3, [sp, #8]
 8011352:	459b      	cmp	fp, r3
 8011354:	dd13      	ble.n	801137e <__hexnan+0x7a>
 8011356:	454c      	cmp	r4, r9
 8011358:	d206      	bcs.n	8011368 <__hexnan+0x64>
 801135a:	2d07      	cmp	r5, #7
 801135c:	dc04      	bgt.n	8011368 <__hexnan+0x64>
 801135e:	462a      	mov	r2, r5
 8011360:	4649      	mov	r1, r9
 8011362:	4620      	mov	r0, r4
 8011364:	f7ff ffa8 	bl	80112b8 <L_shift>
 8011368:	4544      	cmp	r4, r8
 801136a:	d950      	bls.n	801140e <__hexnan+0x10a>
 801136c:	2300      	movs	r3, #0
 801136e:	f1a4 0904 	sub.w	r9, r4, #4
 8011372:	f844 3c04 	str.w	r3, [r4, #-4]
 8011376:	f8cd b008 	str.w	fp, [sp, #8]
 801137a:	464c      	mov	r4, r9
 801137c:	461d      	mov	r5, r3
 801137e:	9903      	ldr	r1, [sp, #12]
 8011380:	e7d7      	b.n	8011332 <__hexnan+0x2e>
 8011382:	2a29      	cmp	r2, #41	; 0x29
 8011384:	d156      	bne.n	8011434 <__hexnan+0x130>
 8011386:	3102      	adds	r1, #2
 8011388:	f8ca 1000 	str.w	r1, [sl]
 801138c:	f1bb 0f00 	cmp.w	fp, #0
 8011390:	d050      	beq.n	8011434 <__hexnan+0x130>
 8011392:	454c      	cmp	r4, r9
 8011394:	d206      	bcs.n	80113a4 <__hexnan+0xa0>
 8011396:	2d07      	cmp	r5, #7
 8011398:	dc04      	bgt.n	80113a4 <__hexnan+0xa0>
 801139a:	462a      	mov	r2, r5
 801139c:	4649      	mov	r1, r9
 801139e:	4620      	mov	r0, r4
 80113a0:	f7ff ff8a 	bl	80112b8 <L_shift>
 80113a4:	4544      	cmp	r4, r8
 80113a6:	d934      	bls.n	8011412 <__hexnan+0x10e>
 80113a8:	f1a8 0204 	sub.w	r2, r8, #4
 80113ac:	4623      	mov	r3, r4
 80113ae:	f853 1b04 	ldr.w	r1, [r3], #4
 80113b2:	f842 1f04 	str.w	r1, [r2, #4]!
 80113b6:	429f      	cmp	r7, r3
 80113b8:	d2f9      	bcs.n	80113ae <__hexnan+0xaa>
 80113ba:	1b3b      	subs	r3, r7, r4
 80113bc:	f023 0303 	bic.w	r3, r3, #3
 80113c0:	3304      	adds	r3, #4
 80113c2:	3401      	adds	r4, #1
 80113c4:	3e03      	subs	r6, #3
 80113c6:	42b4      	cmp	r4, r6
 80113c8:	bf88      	it	hi
 80113ca:	2304      	movhi	r3, #4
 80113cc:	4443      	add	r3, r8
 80113ce:	2200      	movs	r2, #0
 80113d0:	f843 2b04 	str.w	r2, [r3], #4
 80113d4:	429f      	cmp	r7, r3
 80113d6:	d2fb      	bcs.n	80113d0 <__hexnan+0xcc>
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	b91b      	cbnz	r3, 80113e4 <__hexnan+0xe0>
 80113dc:	4547      	cmp	r7, r8
 80113de:	d127      	bne.n	8011430 <__hexnan+0x12c>
 80113e0:	2301      	movs	r3, #1
 80113e2:	603b      	str	r3, [r7, #0]
 80113e4:	2005      	movs	r0, #5
 80113e6:	e026      	b.n	8011436 <__hexnan+0x132>
 80113e8:	3501      	adds	r5, #1
 80113ea:	2d08      	cmp	r5, #8
 80113ec:	f10b 0b01 	add.w	fp, fp, #1
 80113f0:	dd06      	ble.n	8011400 <__hexnan+0xfc>
 80113f2:	4544      	cmp	r4, r8
 80113f4:	d9c3      	bls.n	801137e <__hexnan+0x7a>
 80113f6:	2300      	movs	r3, #0
 80113f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80113fc:	2501      	movs	r5, #1
 80113fe:	3c04      	subs	r4, #4
 8011400:	6822      	ldr	r2, [r4, #0]
 8011402:	f000 000f 	and.w	r0, r0, #15
 8011406:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801140a:	6022      	str	r2, [r4, #0]
 801140c:	e7b7      	b.n	801137e <__hexnan+0x7a>
 801140e:	2508      	movs	r5, #8
 8011410:	e7b5      	b.n	801137e <__hexnan+0x7a>
 8011412:	9b01      	ldr	r3, [sp, #4]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d0df      	beq.n	80113d8 <__hexnan+0xd4>
 8011418:	f04f 32ff 	mov.w	r2, #4294967295
 801141c:	f1c3 0320 	rsb	r3, r3, #32
 8011420:	fa22 f303 	lsr.w	r3, r2, r3
 8011424:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011428:	401a      	ands	r2, r3
 801142a:	f846 2c04 	str.w	r2, [r6, #-4]
 801142e:	e7d3      	b.n	80113d8 <__hexnan+0xd4>
 8011430:	3f04      	subs	r7, #4
 8011432:	e7d1      	b.n	80113d8 <__hexnan+0xd4>
 8011434:	2004      	movs	r0, #4
 8011436:	b007      	add	sp, #28
 8011438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801143c <_localeconv_r>:
 801143c:	4800      	ldr	r0, [pc, #0]	; (8011440 <_localeconv_r+0x4>)
 801143e:	4770      	bx	lr
 8011440:	20000198 	.word	0x20000198

08011444 <malloc>:
 8011444:	4b02      	ldr	r3, [pc, #8]	; (8011450 <malloc+0xc>)
 8011446:	4601      	mov	r1, r0
 8011448:	6818      	ldr	r0, [r3, #0]
 801144a:	f000 bd3d 	b.w	8011ec8 <_malloc_r>
 801144e:	bf00      	nop
 8011450:	20000040 	.word	0x20000040

08011454 <__ascii_mbtowc>:
 8011454:	b082      	sub	sp, #8
 8011456:	b901      	cbnz	r1, 801145a <__ascii_mbtowc+0x6>
 8011458:	a901      	add	r1, sp, #4
 801145a:	b142      	cbz	r2, 801146e <__ascii_mbtowc+0x1a>
 801145c:	b14b      	cbz	r3, 8011472 <__ascii_mbtowc+0x1e>
 801145e:	7813      	ldrb	r3, [r2, #0]
 8011460:	600b      	str	r3, [r1, #0]
 8011462:	7812      	ldrb	r2, [r2, #0]
 8011464:	1e10      	subs	r0, r2, #0
 8011466:	bf18      	it	ne
 8011468:	2001      	movne	r0, #1
 801146a:	b002      	add	sp, #8
 801146c:	4770      	bx	lr
 801146e:	4610      	mov	r0, r2
 8011470:	e7fb      	b.n	801146a <__ascii_mbtowc+0x16>
 8011472:	f06f 0001 	mvn.w	r0, #1
 8011476:	e7f8      	b.n	801146a <__ascii_mbtowc+0x16>

08011478 <memcpy>:
 8011478:	440a      	add	r2, r1
 801147a:	4291      	cmp	r1, r2
 801147c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011480:	d100      	bne.n	8011484 <memcpy+0xc>
 8011482:	4770      	bx	lr
 8011484:	b510      	push	{r4, lr}
 8011486:	f811 4b01 	ldrb.w	r4, [r1], #1
 801148a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801148e:	4291      	cmp	r1, r2
 8011490:	d1f9      	bne.n	8011486 <memcpy+0xe>
 8011492:	bd10      	pop	{r4, pc}

08011494 <_Balloc>:
 8011494:	b570      	push	{r4, r5, r6, lr}
 8011496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011498:	4604      	mov	r4, r0
 801149a:	460d      	mov	r5, r1
 801149c:	b976      	cbnz	r6, 80114bc <_Balloc+0x28>
 801149e:	2010      	movs	r0, #16
 80114a0:	f7ff ffd0 	bl	8011444 <malloc>
 80114a4:	4602      	mov	r2, r0
 80114a6:	6260      	str	r0, [r4, #36]	; 0x24
 80114a8:	b920      	cbnz	r0, 80114b4 <_Balloc+0x20>
 80114aa:	4b18      	ldr	r3, [pc, #96]	; (801150c <_Balloc+0x78>)
 80114ac:	4818      	ldr	r0, [pc, #96]	; (8011510 <_Balloc+0x7c>)
 80114ae:	2166      	movs	r1, #102	; 0x66
 80114b0:	f7fe fdaa 	bl	8010008 <__assert_func>
 80114b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114b8:	6006      	str	r6, [r0, #0]
 80114ba:	60c6      	str	r6, [r0, #12]
 80114bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80114be:	68f3      	ldr	r3, [r6, #12]
 80114c0:	b183      	cbz	r3, 80114e4 <_Balloc+0x50>
 80114c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114c4:	68db      	ldr	r3, [r3, #12]
 80114c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114ca:	b9b8      	cbnz	r0, 80114fc <_Balloc+0x68>
 80114cc:	2101      	movs	r1, #1
 80114ce:	fa01 f605 	lsl.w	r6, r1, r5
 80114d2:	1d72      	adds	r2, r6, #5
 80114d4:	0092      	lsls	r2, r2, #2
 80114d6:	4620      	mov	r0, r4
 80114d8:	f000 fc97 	bl	8011e0a <_calloc_r>
 80114dc:	b160      	cbz	r0, 80114f8 <_Balloc+0x64>
 80114de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114e2:	e00e      	b.n	8011502 <_Balloc+0x6e>
 80114e4:	2221      	movs	r2, #33	; 0x21
 80114e6:	2104      	movs	r1, #4
 80114e8:	4620      	mov	r0, r4
 80114ea:	f000 fc8e 	bl	8011e0a <_calloc_r>
 80114ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114f0:	60f0      	str	r0, [r6, #12]
 80114f2:	68db      	ldr	r3, [r3, #12]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d1e4      	bne.n	80114c2 <_Balloc+0x2e>
 80114f8:	2000      	movs	r0, #0
 80114fa:	bd70      	pop	{r4, r5, r6, pc}
 80114fc:	6802      	ldr	r2, [r0, #0]
 80114fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011502:	2300      	movs	r3, #0
 8011504:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011508:	e7f7      	b.n	80114fa <_Balloc+0x66>
 801150a:	bf00      	nop
 801150c:	08026748 	.word	0x08026748
 8011510:	080269f8 	.word	0x080269f8

08011514 <_Bfree>:
 8011514:	b570      	push	{r4, r5, r6, lr}
 8011516:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011518:	4605      	mov	r5, r0
 801151a:	460c      	mov	r4, r1
 801151c:	b976      	cbnz	r6, 801153c <_Bfree+0x28>
 801151e:	2010      	movs	r0, #16
 8011520:	f7ff ff90 	bl	8011444 <malloc>
 8011524:	4602      	mov	r2, r0
 8011526:	6268      	str	r0, [r5, #36]	; 0x24
 8011528:	b920      	cbnz	r0, 8011534 <_Bfree+0x20>
 801152a:	4b09      	ldr	r3, [pc, #36]	; (8011550 <_Bfree+0x3c>)
 801152c:	4809      	ldr	r0, [pc, #36]	; (8011554 <_Bfree+0x40>)
 801152e:	218a      	movs	r1, #138	; 0x8a
 8011530:	f7fe fd6a 	bl	8010008 <__assert_func>
 8011534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011538:	6006      	str	r6, [r0, #0]
 801153a:	60c6      	str	r6, [r0, #12]
 801153c:	b13c      	cbz	r4, 801154e <_Bfree+0x3a>
 801153e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011540:	6862      	ldr	r2, [r4, #4]
 8011542:	68db      	ldr	r3, [r3, #12]
 8011544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011548:	6021      	str	r1, [r4, #0]
 801154a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801154e:	bd70      	pop	{r4, r5, r6, pc}
 8011550:	08026748 	.word	0x08026748
 8011554:	080269f8 	.word	0x080269f8

08011558 <__multadd>:
 8011558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801155c:	690e      	ldr	r6, [r1, #16]
 801155e:	4607      	mov	r7, r0
 8011560:	4698      	mov	r8, r3
 8011562:	460c      	mov	r4, r1
 8011564:	f101 0014 	add.w	r0, r1, #20
 8011568:	2300      	movs	r3, #0
 801156a:	6805      	ldr	r5, [r0, #0]
 801156c:	b2a9      	uxth	r1, r5
 801156e:	fb02 8101 	mla	r1, r2, r1, r8
 8011572:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011576:	0c2d      	lsrs	r5, r5, #16
 8011578:	fb02 c505 	mla	r5, r2, r5, ip
 801157c:	b289      	uxth	r1, r1
 801157e:	3301      	adds	r3, #1
 8011580:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011584:	429e      	cmp	r6, r3
 8011586:	f840 1b04 	str.w	r1, [r0], #4
 801158a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801158e:	dcec      	bgt.n	801156a <__multadd+0x12>
 8011590:	f1b8 0f00 	cmp.w	r8, #0
 8011594:	d022      	beq.n	80115dc <__multadd+0x84>
 8011596:	68a3      	ldr	r3, [r4, #8]
 8011598:	42b3      	cmp	r3, r6
 801159a:	dc19      	bgt.n	80115d0 <__multadd+0x78>
 801159c:	6861      	ldr	r1, [r4, #4]
 801159e:	4638      	mov	r0, r7
 80115a0:	3101      	adds	r1, #1
 80115a2:	f7ff ff77 	bl	8011494 <_Balloc>
 80115a6:	4605      	mov	r5, r0
 80115a8:	b928      	cbnz	r0, 80115b6 <__multadd+0x5e>
 80115aa:	4602      	mov	r2, r0
 80115ac:	4b0d      	ldr	r3, [pc, #52]	; (80115e4 <__multadd+0x8c>)
 80115ae:	480e      	ldr	r0, [pc, #56]	; (80115e8 <__multadd+0x90>)
 80115b0:	21b5      	movs	r1, #181	; 0xb5
 80115b2:	f7fe fd29 	bl	8010008 <__assert_func>
 80115b6:	6922      	ldr	r2, [r4, #16]
 80115b8:	3202      	adds	r2, #2
 80115ba:	f104 010c 	add.w	r1, r4, #12
 80115be:	0092      	lsls	r2, r2, #2
 80115c0:	300c      	adds	r0, #12
 80115c2:	f7ff ff59 	bl	8011478 <memcpy>
 80115c6:	4621      	mov	r1, r4
 80115c8:	4638      	mov	r0, r7
 80115ca:	f7ff ffa3 	bl	8011514 <_Bfree>
 80115ce:	462c      	mov	r4, r5
 80115d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80115d4:	3601      	adds	r6, #1
 80115d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80115da:	6126      	str	r6, [r4, #16]
 80115dc:	4620      	mov	r0, r4
 80115de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e2:	bf00      	nop
 80115e4:	08026969 	.word	0x08026969
 80115e8:	080269f8 	.word	0x080269f8

080115ec <__s2b>:
 80115ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115f0:	460c      	mov	r4, r1
 80115f2:	4615      	mov	r5, r2
 80115f4:	461f      	mov	r7, r3
 80115f6:	2209      	movs	r2, #9
 80115f8:	3308      	adds	r3, #8
 80115fa:	4606      	mov	r6, r0
 80115fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8011600:	2100      	movs	r1, #0
 8011602:	2201      	movs	r2, #1
 8011604:	429a      	cmp	r2, r3
 8011606:	db09      	blt.n	801161c <__s2b+0x30>
 8011608:	4630      	mov	r0, r6
 801160a:	f7ff ff43 	bl	8011494 <_Balloc>
 801160e:	b940      	cbnz	r0, 8011622 <__s2b+0x36>
 8011610:	4602      	mov	r2, r0
 8011612:	4b19      	ldr	r3, [pc, #100]	; (8011678 <__s2b+0x8c>)
 8011614:	4819      	ldr	r0, [pc, #100]	; (801167c <__s2b+0x90>)
 8011616:	21ce      	movs	r1, #206	; 0xce
 8011618:	f7fe fcf6 	bl	8010008 <__assert_func>
 801161c:	0052      	lsls	r2, r2, #1
 801161e:	3101      	adds	r1, #1
 8011620:	e7f0      	b.n	8011604 <__s2b+0x18>
 8011622:	9b08      	ldr	r3, [sp, #32]
 8011624:	6143      	str	r3, [r0, #20]
 8011626:	2d09      	cmp	r5, #9
 8011628:	f04f 0301 	mov.w	r3, #1
 801162c:	6103      	str	r3, [r0, #16]
 801162e:	dd16      	ble.n	801165e <__s2b+0x72>
 8011630:	f104 0909 	add.w	r9, r4, #9
 8011634:	46c8      	mov	r8, r9
 8011636:	442c      	add	r4, r5
 8011638:	f818 3b01 	ldrb.w	r3, [r8], #1
 801163c:	4601      	mov	r1, r0
 801163e:	3b30      	subs	r3, #48	; 0x30
 8011640:	220a      	movs	r2, #10
 8011642:	4630      	mov	r0, r6
 8011644:	f7ff ff88 	bl	8011558 <__multadd>
 8011648:	45a0      	cmp	r8, r4
 801164a:	d1f5      	bne.n	8011638 <__s2b+0x4c>
 801164c:	f1a5 0408 	sub.w	r4, r5, #8
 8011650:	444c      	add	r4, r9
 8011652:	1b2d      	subs	r5, r5, r4
 8011654:	1963      	adds	r3, r4, r5
 8011656:	42bb      	cmp	r3, r7
 8011658:	db04      	blt.n	8011664 <__s2b+0x78>
 801165a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801165e:	340a      	adds	r4, #10
 8011660:	2509      	movs	r5, #9
 8011662:	e7f6      	b.n	8011652 <__s2b+0x66>
 8011664:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011668:	4601      	mov	r1, r0
 801166a:	3b30      	subs	r3, #48	; 0x30
 801166c:	220a      	movs	r2, #10
 801166e:	4630      	mov	r0, r6
 8011670:	f7ff ff72 	bl	8011558 <__multadd>
 8011674:	e7ee      	b.n	8011654 <__s2b+0x68>
 8011676:	bf00      	nop
 8011678:	08026969 	.word	0x08026969
 801167c:	080269f8 	.word	0x080269f8

08011680 <__hi0bits>:
 8011680:	0c03      	lsrs	r3, r0, #16
 8011682:	041b      	lsls	r3, r3, #16
 8011684:	b9d3      	cbnz	r3, 80116bc <__hi0bits+0x3c>
 8011686:	0400      	lsls	r0, r0, #16
 8011688:	2310      	movs	r3, #16
 801168a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801168e:	bf04      	itt	eq
 8011690:	0200      	lsleq	r0, r0, #8
 8011692:	3308      	addeq	r3, #8
 8011694:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011698:	bf04      	itt	eq
 801169a:	0100      	lsleq	r0, r0, #4
 801169c:	3304      	addeq	r3, #4
 801169e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80116a2:	bf04      	itt	eq
 80116a4:	0080      	lsleq	r0, r0, #2
 80116a6:	3302      	addeq	r3, #2
 80116a8:	2800      	cmp	r0, #0
 80116aa:	db05      	blt.n	80116b8 <__hi0bits+0x38>
 80116ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80116b0:	f103 0301 	add.w	r3, r3, #1
 80116b4:	bf08      	it	eq
 80116b6:	2320      	moveq	r3, #32
 80116b8:	4618      	mov	r0, r3
 80116ba:	4770      	bx	lr
 80116bc:	2300      	movs	r3, #0
 80116be:	e7e4      	b.n	801168a <__hi0bits+0xa>

080116c0 <__lo0bits>:
 80116c0:	6803      	ldr	r3, [r0, #0]
 80116c2:	f013 0207 	ands.w	r2, r3, #7
 80116c6:	4601      	mov	r1, r0
 80116c8:	d00b      	beq.n	80116e2 <__lo0bits+0x22>
 80116ca:	07da      	lsls	r2, r3, #31
 80116cc:	d424      	bmi.n	8011718 <__lo0bits+0x58>
 80116ce:	0798      	lsls	r0, r3, #30
 80116d0:	bf49      	itett	mi
 80116d2:	085b      	lsrmi	r3, r3, #1
 80116d4:	089b      	lsrpl	r3, r3, #2
 80116d6:	2001      	movmi	r0, #1
 80116d8:	600b      	strmi	r3, [r1, #0]
 80116da:	bf5c      	itt	pl
 80116dc:	600b      	strpl	r3, [r1, #0]
 80116de:	2002      	movpl	r0, #2
 80116e0:	4770      	bx	lr
 80116e2:	b298      	uxth	r0, r3
 80116e4:	b9b0      	cbnz	r0, 8011714 <__lo0bits+0x54>
 80116e6:	0c1b      	lsrs	r3, r3, #16
 80116e8:	2010      	movs	r0, #16
 80116ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80116ee:	bf04      	itt	eq
 80116f0:	0a1b      	lsreq	r3, r3, #8
 80116f2:	3008      	addeq	r0, #8
 80116f4:	071a      	lsls	r2, r3, #28
 80116f6:	bf04      	itt	eq
 80116f8:	091b      	lsreq	r3, r3, #4
 80116fa:	3004      	addeq	r0, #4
 80116fc:	079a      	lsls	r2, r3, #30
 80116fe:	bf04      	itt	eq
 8011700:	089b      	lsreq	r3, r3, #2
 8011702:	3002      	addeq	r0, #2
 8011704:	07da      	lsls	r2, r3, #31
 8011706:	d403      	bmi.n	8011710 <__lo0bits+0x50>
 8011708:	085b      	lsrs	r3, r3, #1
 801170a:	f100 0001 	add.w	r0, r0, #1
 801170e:	d005      	beq.n	801171c <__lo0bits+0x5c>
 8011710:	600b      	str	r3, [r1, #0]
 8011712:	4770      	bx	lr
 8011714:	4610      	mov	r0, r2
 8011716:	e7e8      	b.n	80116ea <__lo0bits+0x2a>
 8011718:	2000      	movs	r0, #0
 801171a:	4770      	bx	lr
 801171c:	2020      	movs	r0, #32
 801171e:	4770      	bx	lr

08011720 <__i2b>:
 8011720:	b510      	push	{r4, lr}
 8011722:	460c      	mov	r4, r1
 8011724:	2101      	movs	r1, #1
 8011726:	f7ff feb5 	bl	8011494 <_Balloc>
 801172a:	4602      	mov	r2, r0
 801172c:	b928      	cbnz	r0, 801173a <__i2b+0x1a>
 801172e:	4b05      	ldr	r3, [pc, #20]	; (8011744 <__i2b+0x24>)
 8011730:	4805      	ldr	r0, [pc, #20]	; (8011748 <__i2b+0x28>)
 8011732:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011736:	f7fe fc67 	bl	8010008 <__assert_func>
 801173a:	2301      	movs	r3, #1
 801173c:	6144      	str	r4, [r0, #20]
 801173e:	6103      	str	r3, [r0, #16]
 8011740:	bd10      	pop	{r4, pc}
 8011742:	bf00      	nop
 8011744:	08026969 	.word	0x08026969
 8011748:	080269f8 	.word	0x080269f8

0801174c <__multiply>:
 801174c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011750:	4614      	mov	r4, r2
 8011752:	690a      	ldr	r2, [r1, #16]
 8011754:	6923      	ldr	r3, [r4, #16]
 8011756:	429a      	cmp	r2, r3
 8011758:	bfb8      	it	lt
 801175a:	460b      	movlt	r3, r1
 801175c:	460d      	mov	r5, r1
 801175e:	bfbc      	itt	lt
 8011760:	4625      	movlt	r5, r4
 8011762:	461c      	movlt	r4, r3
 8011764:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011768:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801176c:	68ab      	ldr	r3, [r5, #8]
 801176e:	6869      	ldr	r1, [r5, #4]
 8011770:	eb0a 0709 	add.w	r7, sl, r9
 8011774:	42bb      	cmp	r3, r7
 8011776:	b085      	sub	sp, #20
 8011778:	bfb8      	it	lt
 801177a:	3101      	addlt	r1, #1
 801177c:	f7ff fe8a 	bl	8011494 <_Balloc>
 8011780:	b930      	cbnz	r0, 8011790 <__multiply+0x44>
 8011782:	4602      	mov	r2, r0
 8011784:	4b42      	ldr	r3, [pc, #264]	; (8011890 <__multiply+0x144>)
 8011786:	4843      	ldr	r0, [pc, #268]	; (8011894 <__multiply+0x148>)
 8011788:	f240 115d 	movw	r1, #349	; 0x15d
 801178c:	f7fe fc3c 	bl	8010008 <__assert_func>
 8011790:	f100 0614 	add.w	r6, r0, #20
 8011794:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011798:	4633      	mov	r3, r6
 801179a:	2200      	movs	r2, #0
 801179c:	4543      	cmp	r3, r8
 801179e:	d31e      	bcc.n	80117de <__multiply+0x92>
 80117a0:	f105 0c14 	add.w	ip, r5, #20
 80117a4:	f104 0314 	add.w	r3, r4, #20
 80117a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80117ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80117b0:	9202      	str	r2, [sp, #8]
 80117b2:	ebac 0205 	sub.w	r2, ip, r5
 80117b6:	3a15      	subs	r2, #21
 80117b8:	f022 0203 	bic.w	r2, r2, #3
 80117bc:	3204      	adds	r2, #4
 80117be:	f105 0115 	add.w	r1, r5, #21
 80117c2:	458c      	cmp	ip, r1
 80117c4:	bf38      	it	cc
 80117c6:	2204      	movcc	r2, #4
 80117c8:	9201      	str	r2, [sp, #4]
 80117ca:	9a02      	ldr	r2, [sp, #8]
 80117cc:	9303      	str	r3, [sp, #12]
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d808      	bhi.n	80117e4 <__multiply+0x98>
 80117d2:	2f00      	cmp	r7, #0
 80117d4:	dc55      	bgt.n	8011882 <__multiply+0x136>
 80117d6:	6107      	str	r7, [r0, #16]
 80117d8:	b005      	add	sp, #20
 80117da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117de:	f843 2b04 	str.w	r2, [r3], #4
 80117e2:	e7db      	b.n	801179c <__multiply+0x50>
 80117e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80117e8:	f1ba 0f00 	cmp.w	sl, #0
 80117ec:	d020      	beq.n	8011830 <__multiply+0xe4>
 80117ee:	f105 0e14 	add.w	lr, r5, #20
 80117f2:	46b1      	mov	r9, r6
 80117f4:	2200      	movs	r2, #0
 80117f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80117fa:	f8d9 b000 	ldr.w	fp, [r9]
 80117fe:	b2a1      	uxth	r1, r4
 8011800:	fa1f fb8b 	uxth.w	fp, fp
 8011804:	fb0a b101 	mla	r1, sl, r1, fp
 8011808:	4411      	add	r1, r2
 801180a:	f8d9 2000 	ldr.w	r2, [r9]
 801180e:	0c24      	lsrs	r4, r4, #16
 8011810:	0c12      	lsrs	r2, r2, #16
 8011812:	fb0a 2404 	mla	r4, sl, r4, r2
 8011816:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801181a:	b289      	uxth	r1, r1
 801181c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011820:	45f4      	cmp	ip, lr
 8011822:	f849 1b04 	str.w	r1, [r9], #4
 8011826:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801182a:	d8e4      	bhi.n	80117f6 <__multiply+0xaa>
 801182c:	9901      	ldr	r1, [sp, #4]
 801182e:	5072      	str	r2, [r6, r1]
 8011830:	9a03      	ldr	r2, [sp, #12]
 8011832:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011836:	3304      	adds	r3, #4
 8011838:	f1b9 0f00 	cmp.w	r9, #0
 801183c:	d01f      	beq.n	801187e <__multiply+0x132>
 801183e:	6834      	ldr	r4, [r6, #0]
 8011840:	f105 0114 	add.w	r1, r5, #20
 8011844:	46b6      	mov	lr, r6
 8011846:	f04f 0a00 	mov.w	sl, #0
 801184a:	880a      	ldrh	r2, [r1, #0]
 801184c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011850:	fb09 b202 	mla	r2, r9, r2, fp
 8011854:	4492      	add	sl, r2
 8011856:	b2a4      	uxth	r4, r4
 8011858:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801185c:	f84e 4b04 	str.w	r4, [lr], #4
 8011860:	f851 4b04 	ldr.w	r4, [r1], #4
 8011864:	f8be 2000 	ldrh.w	r2, [lr]
 8011868:	0c24      	lsrs	r4, r4, #16
 801186a:	fb09 2404 	mla	r4, r9, r4, r2
 801186e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011872:	458c      	cmp	ip, r1
 8011874:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011878:	d8e7      	bhi.n	801184a <__multiply+0xfe>
 801187a:	9a01      	ldr	r2, [sp, #4]
 801187c:	50b4      	str	r4, [r6, r2]
 801187e:	3604      	adds	r6, #4
 8011880:	e7a3      	b.n	80117ca <__multiply+0x7e>
 8011882:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011886:	2b00      	cmp	r3, #0
 8011888:	d1a5      	bne.n	80117d6 <__multiply+0x8a>
 801188a:	3f01      	subs	r7, #1
 801188c:	e7a1      	b.n	80117d2 <__multiply+0x86>
 801188e:	bf00      	nop
 8011890:	08026969 	.word	0x08026969
 8011894:	080269f8 	.word	0x080269f8

08011898 <__pow5mult>:
 8011898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801189c:	4615      	mov	r5, r2
 801189e:	f012 0203 	ands.w	r2, r2, #3
 80118a2:	4606      	mov	r6, r0
 80118a4:	460f      	mov	r7, r1
 80118a6:	d007      	beq.n	80118b8 <__pow5mult+0x20>
 80118a8:	4c25      	ldr	r4, [pc, #148]	; (8011940 <__pow5mult+0xa8>)
 80118aa:	3a01      	subs	r2, #1
 80118ac:	2300      	movs	r3, #0
 80118ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118b2:	f7ff fe51 	bl	8011558 <__multadd>
 80118b6:	4607      	mov	r7, r0
 80118b8:	10ad      	asrs	r5, r5, #2
 80118ba:	d03d      	beq.n	8011938 <__pow5mult+0xa0>
 80118bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80118be:	b97c      	cbnz	r4, 80118e0 <__pow5mult+0x48>
 80118c0:	2010      	movs	r0, #16
 80118c2:	f7ff fdbf 	bl	8011444 <malloc>
 80118c6:	4602      	mov	r2, r0
 80118c8:	6270      	str	r0, [r6, #36]	; 0x24
 80118ca:	b928      	cbnz	r0, 80118d8 <__pow5mult+0x40>
 80118cc:	4b1d      	ldr	r3, [pc, #116]	; (8011944 <__pow5mult+0xac>)
 80118ce:	481e      	ldr	r0, [pc, #120]	; (8011948 <__pow5mult+0xb0>)
 80118d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80118d4:	f7fe fb98 	bl	8010008 <__assert_func>
 80118d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118dc:	6004      	str	r4, [r0, #0]
 80118de:	60c4      	str	r4, [r0, #12]
 80118e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80118e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80118e8:	b94c      	cbnz	r4, 80118fe <__pow5mult+0x66>
 80118ea:	f240 2171 	movw	r1, #625	; 0x271
 80118ee:	4630      	mov	r0, r6
 80118f0:	f7ff ff16 	bl	8011720 <__i2b>
 80118f4:	2300      	movs	r3, #0
 80118f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80118fa:	4604      	mov	r4, r0
 80118fc:	6003      	str	r3, [r0, #0]
 80118fe:	f04f 0900 	mov.w	r9, #0
 8011902:	07eb      	lsls	r3, r5, #31
 8011904:	d50a      	bpl.n	801191c <__pow5mult+0x84>
 8011906:	4639      	mov	r1, r7
 8011908:	4622      	mov	r2, r4
 801190a:	4630      	mov	r0, r6
 801190c:	f7ff ff1e 	bl	801174c <__multiply>
 8011910:	4639      	mov	r1, r7
 8011912:	4680      	mov	r8, r0
 8011914:	4630      	mov	r0, r6
 8011916:	f7ff fdfd 	bl	8011514 <_Bfree>
 801191a:	4647      	mov	r7, r8
 801191c:	106d      	asrs	r5, r5, #1
 801191e:	d00b      	beq.n	8011938 <__pow5mult+0xa0>
 8011920:	6820      	ldr	r0, [r4, #0]
 8011922:	b938      	cbnz	r0, 8011934 <__pow5mult+0x9c>
 8011924:	4622      	mov	r2, r4
 8011926:	4621      	mov	r1, r4
 8011928:	4630      	mov	r0, r6
 801192a:	f7ff ff0f 	bl	801174c <__multiply>
 801192e:	6020      	str	r0, [r4, #0]
 8011930:	f8c0 9000 	str.w	r9, [r0]
 8011934:	4604      	mov	r4, r0
 8011936:	e7e4      	b.n	8011902 <__pow5mult+0x6a>
 8011938:	4638      	mov	r0, r7
 801193a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801193e:	bf00      	nop
 8011940:	08026b48 	.word	0x08026b48
 8011944:	08026748 	.word	0x08026748
 8011948:	080269f8 	.word	0x080269f8

0801194c <__lshift>:
 801194c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011950:	460c      	mov	r4, r1
 8011952:	6849      	ldr	r1, [r1, #4]
 8011954:	6923      	ldr	r3, [r4, #16]
 8011956:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801195a:	68a3      	ldr	r3, [r4, #8]
 801195c:	4607      	mov	r7, r0
 801195e:	4691      	mov	r9, r2
 8011960:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011964:	f108 0601 	add.w	r6, r8, #1
 8011968:	42b3      	cmp	r3, r6
 801196a:	db0b      	blt.n	8011984 <__lshift+0x38>
 801196c:	4638      	mov	r0, r7
 801196e:	f7ff fd91 	bl	8011494 <_Balloc>
 8011972:	4605      	mov	r5, r0
 8011974:	b948      	cbnz	r0, 801198a <__lshift+0x3e>
 8011976:	4602      	mov	r2, r0
 8011978:	4b28      	ldr	r3, [pc, #160]	; (8011a1c <__lshift+0xd0>)
 801197a:	4829      	ldr	r0, [pc, #164]	; (8011a20 <__lshift+0xd4>)
 801197c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011980:	f7fe fb42 	bl	8010008 <__assert_func>
 8011984:	3101      	adds	r1, #1
 8011986:	005b      	lsls	r3, r3, #1
 8011988:	e7ee      	b.n	8011968 <__lshift+0x1c>
 801198a:	2300      	movs	r3, #0
 801198c:	f100 0114 	add.w	r1, r0, #20
 8011990:	f100 0210 	add.w	r2, r0, #16
 8011994:	4618      	mov	r0, r3
 8011996:	4553      	cmp	r3, sl
 8011998:	db33      	blt.n	8011a02 <__lshift+0xb6>
 801199a:	6920      	ldr	r0, [r4, #16]
 801199c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119a0:	f104 0314 	add.w	r3, r4, #20
 80119a4:	f019 091f 	ands.w	r9, r9, #31
 80119a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80119b0:	d02b      	beq.n	8011a0a <__lshift+0xbe>
 80119b2:	f1c9 0e20 	rsb	lr, r9, #32
 80119b6:	468a      	mov	sl, r1
 80119b8:	2200      	movs	r2, #0
 80119ba:	6818      	ldr	r0, [r3, #0]
 80119bc:	fa00 f009 	lsl.w	r0, r0, r9
 80119c0:	4302      	orrs	r2, r0
 80119c2:	f84a 2b04 	str.w	r2, [sl], #4
 80119c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80119ca:	459c      	cmp	ip, r3
 80119cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80119d0:	d8f3      	bhi.n	80119ba <__lshift+0x6e>
 80119d2:	ebac 0304 	sub.w	r3, ip, r4
 80119d6:	3b15      	subs	r3, #21
 80119d8:	f023 0303 	bic.w	r3, r3, #3
 80119dc:	3304      	adds	r3, #4
 80119de:	f104 0015 	add.w	r0, r4, #21
 80119e2:	4584      	cmp	ip, r0
 80119e4:	bf38      	it	cc
 80119e6:	2304      	movcc	r3, #4
 80119e8:	50ca      	str	r2, [r1, r3]
 80119ea:	b10a      	cbz	r2, 80119f0 <__lshift+0xa4>
 80119ec:	f108 0602 	add.w	r6, r8, #2
 80119f0:	3e01      	subs	r6, #1
 80119f2:	4638      	mov	r0, r7
 80119f4:	612e      	str	r6, [r5, #16]
 80119f6:	4621      	mov	r1, r4
 80119f8:	f7ff fd8c 	bl	8011514 <_Bfree>
 80119fc:	4628      	mov	r0, r5
 80119fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a02:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a06:	3301      	adds	r3, #1
 8011a08:	e7c5      	b.n	8011996 <__lshift+0x4a>
 8011a0a:	3904      	subs	r1, #4
 8011a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a10:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a14:	459c      	cmp	ip, r3
 8011a16:	d8f9      	bhi.n	8011a0c <__lshift+0xc0>
 8011a18:	e7ea      	b.n	80119f0 <__lshift+0xa4>
 8011a1a:	bf00      	nop
 8011a1c:	08026969 	.word	0x08026969
 8011a20:	080269f8 	.word	0x080269f8

08011a24 <__mcmp>:
 8011a24:	b530      	push	{r4, r5, lr}
 8011a26:	6902      	ldr	r2, [r0, #16]
 8011a28:	690c      	ldr	r4, [r1, #16]
 8011a2a:	1b12      	subs	r2, r2, r4
 8011a2c:	d10e      	bne.n	8011a4c <__mcmp+0x28>
 8011a2e:	f100 0314 	add.w	r3, r0, #20
 8011a32:	3114      	adds	r1, #20
 8011a34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011a38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011a3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011a40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011a44:	42a5      	cmp	r5, r4
 8011a46:	d003      	beq.n	8011a50 <__mcmp+0x2c>
 8011a48:	d305      	bcc.n	8011a56 <__mcmp+0x32>
 8011a4a:	2201      	movs	r2, #1
 8011a4c:	4610      	mov	r0, r2
 8011a4e:	bd30      	pop	{r4, r5, pc}
 8011a50:	4283      	cmp	r3, r0
 8011a52:	d3f3      	bcc.n	8011a3c <__mcmp+0x18>
 8011a54:	e7fa      	b.n	8011a4c <__mcmp+0x28>
 8011a56:	f04f 32ff 	mov.w	r2, #4294967295
 8011a5a:	e7f7      	b.n	8011a4c <__mcmp+0x28>

08011a5c <__mdiff>:
 8011a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a60:	460c      	mov	r4, r1
 8011a62:	4606      	mov	r6, r0
 8011a64:	4611      	mov	r1, r2
 8011a66:	4620      	mov	r0, r4
 8011a68:	4617      	mov	r7, r2
 8011a6a:	f7ff ffdb 	bl	8011a24 <__mcmp>
 8011a6e:	1e05      	subs	r5, r0, #0
 8011a70:	d110      	bne.n	8011a94 <__mdiff+0x38>
 8011a72:	4629      	mov	r1, r5
 8011a74:	4630      	mov	r0, r6
 8011a76:	f7ff fd0d 	bl	8011494 <_Balloc>
 8011a7a:	b930      	cbnz	r0, 8011a8a <__mdiff+0x2e>
 8011a7c:	4b39      	ldr	r3, [pc, #228]	; (8011b64 <__mdiff+0x108>)
 8011a7e:	4602      	mov	r2, r0
 8011a80:	f240 2132 	movw	r1, #562	; 0x232
 8011a84:	4838      	ldr	r0, [pc, #224]	; (8011b68 <__mdiff+0x10c>)
 8011a86:	f7fe fabf 	bl	8010008 <__assert_func>
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a94:	bfa4      	itt	ge
 8011a96:	463b      	movge	r3, r7
 8011a98:	4627      	movge	r7, r4
 8011a9a:	4630      	mov	r0, r6
 8011a9c:	6879      	ldr	r1, [r7, #4]
 8011a9e:	bfa6      	itte	ge
 8011aa0:	461c      	movge	r4, r3
 8011aa2:	2500      	movge	r5, #0
 8011aa4:	2501      	movlt	r5, #1
 8011aa6:	f7ff fcf5 	bl	8011494 <_Balloc>
 8011aaa:	b920      	cbnz	r0, 8011ab6 <__mdiff+0x5a>
 8011aac:	4b2d      	ldr	r3, [pc, #180]	; (8011b64 <__mdiff+0x108>)
 8011aae:	4602      	mov	r2, r0
 8011ab0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011ab4:	e7e6      	b.n	8011a84 <__mdiff+0x28>
 8011ab6:	693e      	ldr	r6, [r7, #16]
 8011ab8:	60c5      	str	r5, [r0, #12]
 8011aba:	6925      	ldr	r5, [r4, #16]
 8011abc:	f107 0114 	add.w	r1, r7, #20
 8011ac0:	f104 0914 	add.w	r9, r4, #20
 8011ac4:	f100 0e14 	add.w	lr, r0, #20
 8011ac8:	f107 0210 	add.w	r2, r7, #16
 8011acc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011ad0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011ad4:	46f2      	mov	sl, lr
 8011ad6:	2700      	movs	r7, #0
 8011ad8:	f859 3b04 	ldr.w	r3, [r9], #4
 8011adc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011ae0:	fa1f f883 	uxth.w	r8, r3
 8011ae4:	fa17 f78b 	uxtah	r7, r7, fp
 8011ae8:	0c1b      	lsrs	r3, r3, #16
 8011aea:	eba7 0808 	sub.w	r8, r7, r8
 8011aee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011af2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011af6:	fa1f f888 	uxth.w	r8, r8
 8011afa:	141f      	asrs	r7, r3, #16
 8011afc:	454d      	cmp	r5, r9
 8011afe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011b02:	f84a 3b04 	str.w	r3, [sl], #4
 8011b06:	d8e7      	bhi.n	8011ad8 <__mdiff+0x7c>
 8011b08:	1b2b      	subs	r3, r5, r4
 8011b0a:	3b15      	subs	r3, #21
 8011b0c:	f023 0303 	bic.w	r3, r3, #3
 8011b10:	3304      	adds	r3, #4
 8011b12:	3415      	adds	r4, #21
 8011b14:	42a5      	cmp	r5, r4
 8011b16:	bf38      	it	cc
 8011b18:	2304      	movcc	r3, #4
 8011b1a:	4419      	add	r1, r3
 8011b1c:	4473      	add	r3, lr
 8011b1e:	469e      	mov	lr, r3
 8011b20:	460d      	mov	r5, r1
 8011b22:	4565      	cmp	r5, ip
 8011b24:	d30e      	bcc.n	8011b44 <__mdiff+0xe8>
 8011b26:	f10c 0203 	add.w	r2, ip, #3
 8011b2a:	1a52      	subs	r2, r2, r1
 8011b2c:	f022 0203 	bic.w	r2, r2, #3
 8011b30:	3903      	subs	r1, #3
 8011b32:	458c      	cmp	ip, r1
 8011b34:	bf38      	it	cc
 8011b36:	2200      	movcc	r2, #0
 8011b38:	441a      	add	r2, r3
 8011b3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011b3e:	b17b      	cbz	r3, 8011b60 <__mdiff+0x104>
 8011b40:	6106      	str	r6, [r0, #16]
 8011b42:	e7a5      	b.n	8011a90 <__mdiff+0x34>
 8011b44:	f855 8b04 	ldr.w	r8, [r5], #4
 8011b48:	fa17 f488 	uxtah	r4, r7, r8
 8011b4c:	1422      	asrs	r2, r4, #16
 8011b4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011b52:	b2a4      	uxth	r4, r4
 8011b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011b58:	f84e 4b04 	str.w	r4, [lr], #4
 8011b5c:	1417      	asrs	r7, r2, #16
 8011b5e:	e7e0      	b.n	8011b22 <__mdiff+0xc6>
 8011b60:	3e01      	subs	r6, #1
 8011b62:	e7ea      	b.n	8011b3a <__mdiff+0xde>
 8011b64:	08026969 	.word	0x08026969
 8011b68:	080269f8 	.word	0x080269f8

08011b6c <__ulp>:
 8011b6c:	b082      	sub	sp, #8
 8011b6e:	ed8d 0b00 	vstr	d0, [sp]
 8011b72:	9b01      	ldr	r3, [sp, #4]
 8011b74:	4912      	ldr	r1, [pc, #72]	; (8011bc0 <__ulp+0x54>)
 8011b76:	4019      	ands	r1, r3
 8011b78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011b7c:	2900      	cmp	r1, #0
 8011b7e:	dd05      	ble.n	8011b8c <__ulp+0x20>
 8011b80:	2200      	movs	r2, #0
 8011b82:	460b      	mov	r3, r1
 8011b84:	ec43 2b10 	vmov	d0, r2, r3
 8011b88:	b002      	add	sp, #8
 8011b8a:	4770      	bx	lr
 8011b8c:	4249      	negs	r1, r1
 8011b8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011b92:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011b96:	f04f 0200 	mov.w	r2, #0
 8011b9a:	f04f 0300 	mov.w	r3, #0
 8011b9e:	da04      	bge.n	8011baa <__ulp+0x3e>
 8011ba0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011ba4:	fa41 f300 	asr.w	r3, r1, r0
 8011ba8:	e7ec      	b.n	8011b84 <__ulp+0x18>
 8011baa:	f1a0 0114 	sub.w	r1, r0, #20
 8011bae:	291e      	cmp	r1, #30
 8011bb0:	bfda      	itte	le
 8011bb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011bb6:	fa20 f101 	lsrle.w	r1, r0, r1
 8011bba:	2101      	movgt	r1, #1
 8011bbc:	460a      	mov	r2, r1
 8011bbe:	e7e1      	b.n	8011b84 <__ulp+0x18>
 8011bc0:	7ff00000 	.word	0x7ff00000

08011bc4 <__b2d>:
 8011bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bc6:	6905      	ldr	r5, [r0, #16]
 8011bc8:	f100 0714 	add.w	r7, r0, #20
 8011bcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011bd0:	1f2e      	subs	r6, r5, #4
 8011bd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011bd6:	4620      	mov	r0, r4
 8011bd8:	f7ff fd52 	bl	8011680 <__hi0bits>
 8011bdc:	f1c0 0320 	rsb	r3, r0, #32
 8011be0:	280a      	cmp	r0, #10
 8011be2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011c60 <__b2d+0x9c>
 8011be6:	600b      	str	r3, [r1, #0]
 8011be8:	dc14      	bgt.n	8011c14 <__b2d+0x50>
 8011bea:	f1c0 0e0b 	rsb	lr, r0, #11
 8011bee:	fa24 f10e 	lsr.w	r1, r4, lr
 8011bf2:	42b7      	cmp	r7, r6
 8011bf4:	ea41 030c 	orr.w	r3, r1, ip
 8011bf8:	bf34      	ite	cc
 8011bfa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011bfe:	2100      	movcs	r1, #0
 8011c00:	3015      	adds	r0, #21
 8011c02:	fa04 f000 	lsl.w	r0, r4, r0
 8011c06:	fa21 f10e 	lsr.w	r1, r1, lr
 8011c0a:	ea40 0201 	orr.w	r2, r0, r1
 8011c0e:	ec43 2b10 	vmov	d0, r2, r3
 8011c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c14:	42b7      	cmp	r7, r6
 8011c16:	bf3a      	itte	cc
 8011c18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011c1c:	f1a5 0608 	subcc.w	r6, r5, #8
 8011c20:	2100      	movcs	r1, #0
 8011c22:	380b      	subs	r0, #11
 8011c24:	d017      	beq.n	8011c56 <__b2d+0x92>
 8011c26:	f1c0 0c20 	rsb	ip, r0, #32
 8011c2a:	fa04 f500 	lsl.w	r5, r4, r0
 8011c2e:	42be      	cmp	r6, r7
 8011c30:	fa21 f40c 	lsr.w	r4, r1, ip
 8011c34:	ea45 0504 	orr.w	r5, r5, r4
 8011c38:	bf8c      	ite	hi
 8011c3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011c3e:	2400      	movls	r4, #0
 8011c40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011c44:	fa01 f000 	lsl.w	r0, r1, r0
 8011c48:	fa24 f40c 	lsr.w	r4, r4, ip
 8011c4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011c50:	ea40 0204 	orr.w	r2, r0, r4
 8011c54:	e7db      	b.n	8011c0e <__b2d+0x4a>
 8011c56:	ea44 030c 	orr.w	r3, r4, ip
 8011c5a:	460a      	mov	r2, r1
 8011c5c:	e7d7      	b.n	8011c0e <__b2d+0x4a>
 8011c5e:	bf00      	nop
 8011c60:	3ff00000 	.word	0x3ff00000

08011c64 <__d2b>:
 8011c64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c68:	4689      	mov	r9, r1
 8011c6a:	2101      	movs	r1, #1
 8011c6c:	ec57 6b10 	vmov	r6, r7, d0
 8011c70:	4690      	mov	r8, r2
 8011c72:	f7ff fc0f 	bl	8011494 <_Balloc>
 8011c76:	4604      	mov	r4, r0
 8011c78:	b930      	cbnz	r0, 8011c88 <__d2b+0x24>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	4b25      	ldr	r3, [pc, #148]	; (8011d14 <__d2b+0xb0>)
 8011c7e:	4826      	ldr	r0, [pc, #152]	; (8011d18 <__d2b+0xb4>)
 8011c80:	f240 310a 	movw	r1, #778	; 0x30a
 8011c84:	f7fe f9c0 	bl	8010008 <__assert_func>
 8011c88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011c8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011c90:	bb35      	cbnz	r5, 8011ce0 <__d2b+0x7c>
 8011c92:	2e00      	cmp	r6, #0
 8011c94:	9301      	str	r3, [sp, #4]
 8011c96:	d028      	beq.n	8011cea <__d2b+0x86>
 8011c98:	4668      	mov	r0, sp
 8011c9a:	9600      	str	r6, [sp, #0]
 8011c9c:	f7ff fd10 	bl	80116c0 <__lo0bits>
 8011ca0:	9900      	ldr	r1, [sp, #0]
 8011ca2:	b300      	cbz	r0, 8011ce6 <__d2b+0x82>
 8011ca4:	9a01      	ldr	r2, [sp, #4]
 8011ca6:	f1c0 0320 	rsb	r3, r0, #32
 8011caa:	fa02 f303 	lsl.w	r3, r2, r3
 8011cae:	430b      	orrs	r3, r1
 8011cb0:	40c2      	lsrs	r2, r0
 8011cb2:	6163      	str	r3, [r4, #20]
 8011cb4:	9201      	str	r2, [sp, #4]
 8011cb6:	9b01      	ldr	r3, [sp, #4]
 8011cb8:	61a3      	str	r3, [r4, #24]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	bf14      	ite	ne
 8011cbe:	2202      	movne	r2, #2
 8011cc0:	2201      	moveq	r2, #1
 8011cc2:	6122      	str	r2, [r4, #16]
 8011cc4:	b1d5      	cbz	r5, 8011cfc <__d2b+0x98>
 8011cc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011cca:	4405      	add	r5, r0
 8011ccc:	f8c9 5000 	str.w	r5, [r9]
 8011cd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011cd4:	f8c8 0000 	str.w	r0, [r8]
 8011cd8:	4620      	mov	r0, r4
 8011cda:	b003      	add	sp, #12
 8011cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ce4:	e7d5      	b.n	8011c92 <__d2b+0x2e>
 8011ce6:	6161      	str	r1, [r4, #20]
 8011ce8:	e7e5      	b.n	8011cb6 <__d2b+0x52>
 8011cea:	a801      	add	r0, sp, #4
 8011cec:	f7ff fce8 	bl	80116c0 <__lo0bits>
 8011cf0:	9b01      	ldr	r3, [sp, #4]
 8011cf2:	6163      	str	r3, [r4, #20]
 8011cf4:	2201      	movs	r2, #1
 8011cf6:	6122      	str	r2, [r4, #16]
 8011cf8:	3020      	adds	r0, #32
 8011cfa:	e7e3      	b.n	8011cc4 <__d2b+0x60>
 8011cfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011d04:	f8c9 0000 	str.w	r0, [r9]
 8011d08:	6918      	ldr	r0, [r3, #16]
 8011d0a:	f7ff fcb9 	bl	8011680 <__hi0bits>
 8011d0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d12:	e7df      	b.n	8011cd4 <__d2b+0x70>
 8011d14:	08026969 	.word	0x08026969
 8011d18:	080269f8 	.word	0x080269f8

08011d1c <__ratio>:
 8011d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d20:	4688      	mov	r8, r1
 8011d22:	4669      	mov	r1, sp
 8011d24:	4681      	mov	r9, r0
 8011d26:	f7ff ff4d 	bl	8011bc4 <__b2d>
 8011d2a:	a901      	add	r1, sp, #4
 8011d2c:	4640      	mov	r0, r8
 8011d2e:	ec55 4b10 	vmov	r4, r5, d0
 8011d32:	f7ff ff47 	bl	8011bc4 <__b2d>
 8011d36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011d3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011d3e:	eba3 0c02 	sub.w	ip, r3, r2
 8011d42:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011d46:	1a9b      	subs	r3, r3, r2
 8011d48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011d4c:	ec51 0b10 	vmov	r0, r1, d0
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	bfd6      	itet	le
 8011d54:	460a      	movle	r2, r1
 8011d56:	462a      	movgt	r2, r5
 8011d58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d5c:	468b      	mov	fp, r1
 8011d5e:	462f      	mov	r7, r5
 8011d60:	bfd4      	ite	le
 8011d62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011d66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	ee10 2a10 	vmov	r2, s0
 8011d70:	465b      	mov	r3, fp
 8011d72:	4639      	mov	r1, r7
 8011d74:	f7ee fd82 	bl	800087c <__aeabi_ddiv>
 8011d78:	ec41 0b10 	vmov	d0, r0, r1
 8011d7c:	b003      	add	sp, #12
 8011d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d82 <__copybits>:
 8011d82:	3901      	subs	r1, #1
 8011d84:	b570      	push	{r4, r5, r6, lr}
 8011d86:	1149      	asrs	r1, r1, #5
 8011d88:	6914      	ldr	r4, [r2, #16]
 8011d8a:	3101      	adds	r1, #1
 8011d8c:	f102 0314 	add.w	r3, r2, #20
 8011d90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011d94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d98:	1f05      	subs	r5, r0, #4
 8011d9a:	42a3      	cmp	r3, r4
 8011d9c:	d30c      	bcc.n	8011db8 <__copybits+0x36>
 8011d9e:	1aa3      	subs	r3, r4, r2
 8011da0:	3b11      	subs	r3, #17
 8011da2:	f023 0303 	bic.w	r3, r3, #3
 8011da6:	3211      	adds	r2, #17
 8011da8:	42a2      	cmp	r2, r4
 8011daa:	bf88      	it	hi
 8011dac:	2300      	movhi	r3, #0
 8011dae:	4418      	add	r0, r3
 8011db0:	2300      	movs	r3, #0
 8011db2:	4288      	cmp	r0, r1
 8011db4:	d305      	bcc.n	8011dc2 <__copybits+0x40>
 8011db6:	bd70      	pop	{r4, r5, r6, pc}
 8011db8:	f853 6b04 	ldr.w	r6, [r3], #4
 8011dbc:	f845 6f04 	str.w	r6, [r5, #4]!
 8011dc0:	e7eb      	b.n	8011d9a <__copybits+0x18>
 8011dc2:	f840 3b04 	str.w	r3, [r0], #4
 8011dc6:	e7f4      	b.n	8011db2 <__copybits+0x30>

08011dc8 <__any_on>:
 8011dc8:	f100 0214 	add.w	r2, r0, #20
 8011dcc:	6900      	ldr	r0, [r0, #16]
 8011dce:	114b      	asrs	r3, r1, #5
 8011dd0:	4298      	cmp	r0, r3
 8011dd2:	b510      	push	{r4, lr}
 8011dd4:	db11      	blt.n	8011dfa <__any_on+0x32>
 8011dd6:	dd0a      	ble.n	8011dee <__any_on+0x26>
 8011dd8:	f011 011f 	ands.w	r1, r1, #31
 8011ddc:	d007      	beq.n	8011dee <__any_on+0x26>
 8011dde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011de2:	fa24 f001 	lsr.w	r0, r4, r1
 8011de6:	fa00 f101 	lsl.w	r1, r0, r1
 8011dea:	428c      	cmp	r4, r1
 8011dec:	d10b      	bne.n	8011e06 <__any_on+0x3e>
 8011dee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011df2:	4293      	cmp	r3, r2
 8011df4:	d803      	bhi.n	8011dfe <__any_on+0x36>
 8011df6:	2000      	movs	r0, #0
 8011df8:	bd10      	pop	{r4, pc}
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	e7f7      	b.n	8011dee <__any_on+0x26>
 8011dfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011e02:	2900      	cmp	r1, #0
 8011e04:	d0f5      	beq.n	8011df2 <__any_on+0x2a>
 8011e06:	2001      	movs	r0, #1
 8011e08:	e7f6      	b.n	8011df8 <__any_on+0x30>

08011e0a <_calloc_r>:
 8011e0a:	b513      	push	{r0, r1, r4, lr}
 8011e0c:	434a      	muls	r2, r1
 8011e0e:	4611      	mov	r1, r2
 8011e10:	9201      	str	r2, [sp, #4]
 8011e12:	f000 f859 	bl	8011ec8 <_malloc_r>
 8011e16:	4604      	mov	r4, r0
 8011e18:	b118      	cbz	r0, 8011e22 <_calloc_r+0x18>
 8011e1a:	9a01      	ldr	r2, [sp, #4]
 8011e1c:	2100      	movs	r1, #0
 8011e1e:	f7fc fb27 	bl	800e470 <memset>
 8011e22:	4620      	mov	r0, r4
 8011e24:	b002      	add	sp, #8
 8011e26:	bd10      	pop	{r4, pc}

08011e28 <_free_r>:
 8011e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e2a:	2900      	cmp	r1, #0
 8011e2c:	d048      	beq.n	8011ec0 <_free_r+0x98>
 8011e2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e32:	9001      	str	r0, [sp, #4]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	f1a1 0404 	sub.w	r4, r1, #4
 8011e3a:	bfb8      	it	lt
 8011e3c:	18e4      	addlt	r4, r4, r3
 8011e3e:	f000 fe8b 	bl	8012b58 <__malloc_lock>
 8011e42:	4a20      	ldr	r2, [pc, #128]	; (8011ec4 <_free_r+0x9c>)
 8011e44:	9801      	ldr	r0, [sp, #4]
 8011e46:	6813      	ldr	r3, [r2, #0]
 8011e48:	4615      	mov	r5, r2
 8011e4a:	b933      	cbnz	r3, 8011e5a <_free_r+0x32>
 8011e4c:	6063      	str	r3, [r4, #4]
 8011e4e:	6014      	str	r4, [r2, #0]
 8011e50:	b003      	add	sp, #12
 8011e52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e56:	f000 be85 	b.w	8012b64 <__malloc_unlock>
 8011e5a:	42a3      	cmp	r3, r4
 8011e5c:	d90b      	bls.n	8011e76 <_free_r+0x4e>
 8011e5e:	6821      	ldr	r1, [r4, #0]
 8011e60:	1862      	adds	r2, r4, r1
 8011e62:	4293      	cmp	r3, r2
 8011e64:	bf04      	itt	eq
 8011e66:	681a      	ldreq	r2, [r3, #0]
 8011e68:	685b      	ldreq	r3, [r3, #4]
 8011e6a:	6063      	str	r3, [r4, #4]
 8011e6c:	bf04      	itt	eq
 8011e6e:	1852      	addeq	r2, r2, r1
 8011e70:	6022      	streq	r2, [r4, #0]
 8011e72:	602c      	str	r4, [r5, #0]
 8011e74:	e7ec      	b.n	8011e50 <_free_r+0x28>
 8011e76:	461a      	mov	r2, r3
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	b10b      	cbz	r3, 8011e80 <_free_r+0x58>
 8011e7c:	42a3      	cmp	r3, r4
 8011e7e:	d9fa      	bls.n	8011e76 <_free_r+0x4e>
 8011e80:	6811      	ldr	r1, [r2, #0]
 8011e82:	1855      	adds	r5, r2, r1
 8011e84:	42a5      	cmp	r5, r4
 8011e86:	d10b      	bne.n	8011ea0 <_free_r+0x78>
 8011e88:	6824      	ldr	r4, [r4, #0]
 8011e8a:	4421      	add	r1, r4
 8011e8c:	1854      	adds	r4, r2, r1
 8011e8e:	42a3      	cmp	r3, r4
 8011e90:	6011      	str	r1, [r2, #0]
 8011e92:	d1dd      	bne.n	8011e50 <_free_r+0x28>
 8011e94:	681c      	ldr	r4, [r3, #0]
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	6053      	str	r3, [r2, #4]
 8011e9a:	4421      	add	r1, r4
 8011e9c:	6011      	str	r1, [r2, #0]
 8011e9e:	e7d7      	b.n	8011e50 <_free_r+0x28>
 8011ea0:	d902      	bls.n	8011ea8 <_free_r+0x80>
 8011ea2:	230c      	movs	r3, #12
 8011ea4:	6003      	str	r3, [r0, #0]
 8011ea6:	e7d3      	b.n	8011e50 <_free_r+0x28>
 8011ea8:	6825      	ldr	r5, [r4, #0]
 8011eaa:	1961      	adds	r1, r4, r5
 8011eac:	428b      	cmp	r3, r1
 8011eae:	bf04      	itt	eq
 8011eb0:	6819      	ldreq	r1, [r3, #0]
 8011eb2:	685b      	ldreq	r3, [r3, #4]
 8011eb4:	6063      	str	r3, [r4, #4]
 8011eb6:	bf04      	itt	eq
 8011eb8:	1949      	addeq	r1, r1, r5
 8011eba:	6021      	streq	r1, [r4, #0]
 8011ebc:	6054      	str	r4, [r2, #4]
 8011ebe:	e7c7      	b.n	8011e50 <_free_r+0x28>
 8011ec0:	b003      	add	sp, #12
 8011ec2:	bd30      	pop	{r4, r5, pc}
 8011ec4:	20000284 	.word	0x20000284

08011ec8 <_malloc_r>:
 8011ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eca:	1ccd      	adds	r5, r1, #3
 8011ecc:	f025 0503 	bic.w	r5, r5, #3
 8011ed0:	3508      	adds	r5, #8
 8011ed2:	2d0c      	cmp	r5, #12
 8011ed4:	bf38      	it	cc
 8011ed6:	250c      	movcc	r5, #12
 8011ed8:	2d00      	cmp	r5, #0
 8011eda:	4606      	mov	r6, r0
 8011edc:	db01      	blt.n	8011ee2 <_malloc_r+0x1a>
 8011ede:	42a9      	cmp	r1, r5
 8011ee0:	d903      	bls.n	8011eea <_malloc_r+0x22>
 8011ee2:	230c      	movs	r3, #12
 8011ee4:	6033      	str	r3, [r6, #0]
 8011ee6:	2000      	movs	r0, #0
 8011ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011eea:	f000 fe35 	bl	8012b58 <__malloc_lock>
 8011eee:	4921      	ldr	r1, [pc, #132]	; (8011f74 <_malloc_r+0xac>)
 8011ef0:	680a      	ldr	r2, [r1, #0]
 8011ef2:	4614      	mov	r4, r2
 8011ef4:	b99c      	cbnz	r4, 8011f1e <_malloc_r+0x56>
 8011ef6:	4f20      	ldr	r7, [pc, #128]	; (8011f78 <_malloc_r+0xb0>)
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	b923      	cbnz	r3, 8011f06 <_malloc_r+0x3e>
 8011efc:	4621      	mov	r1, r4
 8011efe:	4630      	mov	r0, r6
 8011f00:	f000 fafa 	bl	80124f8 <_sbrk_r>
 8011f04:	6038      	str	r0, [r7, #0]
 8011f06:	4629      	mov	r1, r5
 8011f08:	4630      	mov	r0, r6
 8011f0a:	f000 faf5 	bl	80124f8 <_sbrk_r>
 8011f0e:	1c43      	adds	r3, r0, #1
 8011f10:	d123      	bne.n	8011f5a <_malloc_r+0x92>
 8011f12:	230c      	movs	r3, #12
 8011f14:	6033      	str	r3, [r6, #0]
 8011f16:	4630      	mov	r0, r6
 8011f18:	f000 fe24 	bl	8012b64 <__malloc_unlock>
 8011f1c:	e7e3      	b.n	8011ee6 <_malloc_r+0x1e>
 8011f1e:	6823      	ldr	r3, [r4, #0]
 8011f20:	1b5b      	subs	r3, r3, r5
 8011f22:	d417      	bmi.n	8011f54 <_malloc_r+0x8c>
 8011f24:	2b0b      	cmp	r3, #11
 8011f26:	d903      	bls.n	8011f30 <_malloc_r+0x68>
 8011f28:	6023      	str	r3, [r4, #0]
 8011f2a:	441c      	add	r4, r3
 8011f2c:	6025      	str	r5, [r4, #0]
 8011f2e:	e004      	b.n	8011f3a <_malloc_r+0x72>
 8011f30:	6863      	ldr	r3, [r4, #4]
 8011f32:	42a2      	cmp	r2, r4
 8011f34:	bf0c      	ite	eq
 8011f36:	600b      	streq	r3, [r1, #0]
 8011f38:	6053      	strne	r3, [r2, #4]
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	f000 fe12 	bl	8012b64 <__malloc_unlock>
 8011f40:	f104 000b 	add.w	r0, r4, #11
 8011f44:	1d23      	adds	r3, r4, #4
 8011f46:	f020 0007 	bic.w	r0, r0, #7
 8011f4a:	1ac2      	subs	r2, r0, r3
 8011f4c:	d0cc      	beq.n	8011ee8 <_malloc_r+0x20>
 8011f4e:	1a1b      	subs	r3, r3, r0
 8011f50:	50a3      	str	r3, [r4, r2]
 8011f52:	e7c9      	b.n	8011ee8 <_malloc_r+0x20>
 8011f54:	4622      	mov	r2, r4
 8011f56:	6864      	ldr	r4, [r4, #4]
 8011f58:	e7cc      	b.n	8011ef4 <_malloc_r+0x2c>
 8011f5a:	1cc4      	adds	r4, r0, #3
 8011f5c:	f024 0403 	bic.w	r4, r4, #3
 8011f60:	42a0      	cmp	r0, r4
 8011f62:	d0e3      	beq.n	8011f2c <_malloc_r+0x64>
 8011f64:	1a21      	subs	r1, r4, r0
 8011f66:	4630      	mov	r0, r6
 8011f68:	f000 fac6 	bl	80124f8 <_sbrk_r>
 8011f6c:	3001      	adds	r0, #1
 8011f6e:	d1dd      	bne.n	8011f2c <_malloc_r+0x64>
 8011f70:	e7cf      	b.n	8011f12 <_malloc_r+0x4a>
 8011f72:	bf00      	nop
 8011f74:	20000284 	.word	0x20000284
 8011f78:	20000288 	.word	0x20000288

08011f7c <__ssputs_r>:
 8011f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f80:	688e      	ldr	r6, [r1, #8]
 8011f82:	429e      	cmp	r6, r3
 8011f84:	4682      	mov	sl, r0
 8011f86:	460c      	mov	r4, r1
 8011f88:	4690      	mov	r8, r2
 8011f8a:	461f      	mov	r7, r3
 8011f8c:	d838      	bhi.n	8012000 <__ssputs_r+0x84>
 8011f8e:	898a      	ldrh	r2, [r1, #12]
 8011f90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011f94:	d032      	beq.n	8011ffc <__ssputs_r+0x80>
 8011f96:	6825      	ldr	r5, [r4, #0]
 8011f98:	6909      	ldr	r1, [r1, #16]
 8011f9a:	eba5 0901 	sub.w	r9, r5, r1
 8011f9e:	6965      	ldr	r5, [r4, #20]
 8011fa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011fa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011fa8:	3301      	adds	r3, #1
 8011faa:	444b      	add	r3, r9
 8011fac:	106d      	asrs	r5, r5, #1
 8011fae:	429d      	cmp	r5, r3
 8011fb0:	bf38      	it	cc
 8011fb2:	461d      	movcc	r5, r3
 8011fb4:	0553      	lsls	r3, r2, #21
 8011fb6:	d531      	bpl.n	801201c <__ssputs_r+0xa0>
 8011fb8:	4629      	mov	r1, r5
 8011fba:	f7ff ff85 	bl	8011ec8 <_malloc_r>
 8011fbe:	4606      	mov	r6, r0
 8011fc0:	b950      	cbnz	r0, 8011fd8 <__ssputs_r+0x5c>
 8011fc2:	230c      	movs	r3, #12
 8011fc4:	f8ca 3000 	str.w	r3, [sl]
 8011fc8:	89a3      	ldrh	r3, [r4, #12]
 8011fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fce:	81a3      	strh	r3, [r4, #12]
 8011fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8011fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fd8:	6921      	ldr	r1, [r4, #16]
 8011fda:	464a      	mov	r2, r9
 8011fdc:	f7ff fa4c 	bl	8011478 <memcpy>
 8011fe0:	89a3      	ldrh	r3, [r4, #12]
 8011fe2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fea:	81a3      	strh	r3, [r4, #12]
 8011fec:	6126      	str	r6, [r4, #16]
 8011fee:	6165      	str	r5, [r4, #20]
 8011ff0:	444e      	add	r6, r9
 8011ff2:	eba5 0509 	sub.w	r5, r5, r9
 8011ff6:	6026      	str	r6, [r4, #0]
 8011ff8:	60a5      	str	r5, [r4, #8]
 8011ffa:	463e      	mov	r6, r7
 8011ffc:	42be      	cmp	r6, r7
 8011ffe:	d900      	bls.n	8012002 <__ssputs_r+0x86>
 8012000:	463e      	mov	r6, r7
 8012002:	4632      	mov	r2, r6
 8012004:	6820      	ldr	r0, [r4, #0]
 8012006:	4641      	mov	r1, r8
 8012008:	f000 fd8c 	bl	8012b24 <memmove>
 801200c:	68a3      	ldr	r3, [r4, #8]
 801200e:	6822      	ldr	r2, [r4, #0]
 8012010:	1b9b      	subs	r3, r3, r6
 8012012:	4432      	add	r2, r6
 8012014:	60a3      	str	r3, [r4, #8]
 8012016:	6022      	str	r2, [r4, #0]
 8012018:	2000      	movs	r0, #0
 801201a:	e7db      	b.n	8011fd4 <__ssputs_r+0x58>
 801201c:	462a      	mov	r2, r5
 801201e:	f000 fda7 	bl	8012b70 <_realloc_r>
 8012022:	4606      	mov	r6, r0
 8012024:	2800      	cmp	r0, #0
 8012026:	d1e1      	bne.n	8011fec <__ssputs_r+0x70>
 8012028:	6921      	ldr	r1, [r4, #16]
 801202a:	4650      	mov	r0, sl
 801202c:	f7ff fefc 	bl	8011e28 <_free_r>
 8012030:	e7c7      	b.n	8011fc2 <__ssputs_r+0x46>
	...

08012034 <_svfiprintf_r>:
 8012034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012038:	4698      	mov	r8, r3
 801203a:	898b      	ldrh	r3, [r1, #12]
 801203c:	061b      	lsls	r3, r3, #24
 801203e:	b09d      	sub	sp, #116	; 0x74
 8012040:	4607      	mov	r7, r0
 8012042:	460d      	mov	r5, r1
 8012044:	4614      	mov	r4, r2
 8012046:	d50e      	bpl.n	8012066 <_svfiprintf_r+0x32>
 8012048:	690b      	ldr	r3, [r1, #16]
 801204a:	b963      	cbnz	r3, 8012066 <_svfiprintf_r+0x32>
 801204c:	2140      	movs	r1, #64	; 0x40
 801204e:	f7ff ff3b 	bl	8011ec8 <_malloc_r>
 8012052:	6028      	str	r0, [r5, #0]
 8012054:	6128      	str	r0, [r5, #16]
 8012056:	b920      	cbnz	r0, 8012062 <_svfiprintf_r+0x2e>
 8012058:	230c      	movs	r3, #12
 801205a:	603b      	str	r3, [r7, #0]
 801205c:	f04f 30ff 	mov.w	r0, #4294967295
 8012060:	e0d1      	b.n	8012206 <_svfiprintf_r+0x1d2>
 8012062:	2340      	movs	r3, #64	; 0x40
 8012064:	616b      	str	r3, [r5, #20]
 8012066:	2300      	movs	r3, #0
 8012068:	9309      	str	r3, [sp, #36]	; 0x24
 801206a:	2320      	movs	r3, #32
 801206c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012070:	f8cd 800c 	str.w	r8, [sp, #12]
 8012074:	2330      	movs	r3, #48	; 0x30
 8012076:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012220 <_svfiprintf_r+0x1ec>
 801207a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801207e:	f04f 0901 	mov.w	r9, #1
 8012082:	4623      	mov	r3, r4
 8012084:	469a      	mov	sl, r3
 8012086:	f813 2b01 	ldrb.w	r2, [r3], #1
 801208a:	b10a      	cbz	r2, 8012090 <_svfiprintf_r+0x5c>
 801208c:	2a25      	cmp	r2, #37	; 0x25
 801208e:	d1f9      	bne.n	8012084 <_svfiprintf_r+0x50>
 8012090:	ebba 0b04 	subs.w	fp, sl, r4
 8012094:	d00b      	beq.n	80120ae <_svfiprintf_r+0x7a>
 8012096:	465b      	mov	r3, fp
 8012098:	4622      	mov	r2, r4
 801209a:	4629      	mov	r1, r5
 801209c:	4638      	mov	r0, r7
 801209e:	f7ff ff6d 	bl	8011f7c <__ssputs_r>
 80120a2:	3001      	adds	r0, #1
 80120a4:	f000 80aa 	beq.w	80121fc <_svfiprintf_r+0x1c8>
 80120a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120aa:	445a      	add	r2, fp
 80120ac:	9209      	str	r2, [sp, #36]	; 0x24
 80120ae:	f89a 3000 	ldrb.w	r3, [sl]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	f000 80a2 	beq.w	80121fc <_svfiprintf_r+0x1c8>
 80120b8:	2300      	movs	r3, #0
 80120ba:	f04f 32ff 	mov.w	r2, #4294967295
 80120be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120c2:	f10a 0a01 	add.w	sl, sl, #1
 80120c6:	9304      	str	r3, [sp, #16]
 80120c8:	9307      	str	r3, [sp, #28]
 80120ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120ce:	931a      	str	r3, [sp, #104]	; 0x68
 80120d0:	4654      	mov	r4, sl
 80120d2:	2205      	movs	r2, #5
 80120d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120d8:	4851      	ldr	r0, [pc, #324]	; (8012220 <_svfiprintf_r+0x1ec>)
 80120da:	f7ee f899 	bl	8000210 <memchr>
 80120de:	9a04      	ldr	r2, [sp, #16]
 80120e0:	b9d8      	cbnz	r0, 801211a <_svfiprintf_r+0xe6>
 80120e2:	06d0      	lsls	r0, r2, #27
 80120e4:	bf44      	itt	mi
 80120e6:	2320      	movmi	r3, #32
 80120e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120ec:	0711      	lsls	r1, r2, #28
 80120ee:	bf44      	itt	mi
 80120f0:	232b      	movmi	r3, #43	; 0x2b
 80120f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120f6:	f89a 3000 	ldrb.w	r3, [sl]
 80120fa:	2b2a      	cmp	r3, #42	; 0x2a
 80120fc:	d015      	beq.n	801212a <_svfiprintf_r+0xf6>
 80120fe:	9a07      	ldr	r2, [sp, #28]
 8012100:	4654      	mov	r4, sl
 8012102:	2000      	movs	r0, #0
 8012104:	f04f 0c0a 	mov.w	ip, #10
 8012108:	4621      	mov	r1, r4
 801210a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801210e:	3b30      	subs	r3, #48	; 0x30
 8012110:	2b09      	cmp	r3, #9
 8012112:	d94e      	bls.n	80121b2 <_svfiprintf_r+0x17e>
 8012114:	b1b0      	cbz	r0, 8012144 <_svfiprintf_r+0x110>
 8012116:	9207      	str	r2, [sp, #28]
 8012118:	e014      	b.n	8012144 <_svfiprintf_r+0x110>
 801211a:	eba0 0308 	sub.w	r3, r0, r8
 801211e:	fa09 f303 	lsl.w	r3, r9, r3
 8012122:	4313      	orrs	r3, r2
 8012124:	9304      	str	r3, [sp, #16]
 8012126:	46a2      	mov	sl, r4
 8012128:	e7d2      	b.n	80120d0 <_svfiprintf_r+0x9c>
 801212a:	9b03      	ldr	r3, [sp, #12]
 801212c:	1d19      	adds	r1, r3, #4
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	9103      	str	r1, [sp, #12]
 8012132:	2b00      	cmp	r3, #0
 8012134:	bfbb      	ittet	lt
 8012136:	425b      	neglt	r3, r3
 8012138:	f042 0202 	orrlt.w	r2, r2, #2
 801213c:	9307      	strge	r3, [sp, #28]
 801213e:	9307      	strlt	r3, [sp, #28]
 8012140:	bfb8      	it	lt
 8012142:	9204      	strlt	r2, [sp, #16]
 8012144:	7823      	ldrb	r3, [r4, #0]
 8012146:	2b2e      	cmp	r3, #46	; 0x2e
 8012148:	d10c      	bne.n	8012164 <_svfiprintf_r+0x130>
 801214a:	7863      	ldrb	r3, [r4, #1]
 801214c:	2b2a      	cmp	r3, #42	; 0x2a
 801214e:	d135      	bne.n	80121bc <_svfiprintf_r+0x188>
 8012150:	9b03      	ldr	r3, [sp, #12]
 8012152:	1d1a      	adds	r2, r3, #4
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	9203      	str	r2, [sp, #12]
 8012158:	2b00      	cmp	r3, #0
 801215a:	bfb8      	it	lt
 801215c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012160:	3402      	adds	r4, #2
 8012162:	9305      	str	r3, [sp, #20]
 8012164:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012230 <_svfiprintf_r+0x1fc>
 8012168:	7821      	ldrb	r1, [r4, #0]
 801216a:	2203      	movs	r2, #3
 801216c:	4650      	mov	r0, sl
 801216e:	f7ee f84f 	bl	8000210 <memchr>
 8012172:	b140      	cbz	r0, 8012186 <_svfiprintf_r+0x152>
 8012174:	2340      	movs	r3, #64	; 0x40
 8012176:	eba0 000a 	sub.w	r0, r0, sl
 801217a:	fa03 f000 	lsl.w	r0, r3, r0
 801217e:	9b04      	ldr	r3, [sp, #16]
 8012180:	4303      	orrs	r3, r0
 8012182:	3401      	adds	r4, #1
 8012184:	9304      	str	r3, [sp, #16]
 8012186:	f814 1b01 	ldrb.w	r1, [r4], #1
 801218a:	4826      	ldr	r0, [pc, #152]	; (8012224 <_svfiprintf_r+0x1f0>)
 801218c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012190:	2206      	movs	r2, #6
 8012192:	f7ee f83d 	bl	8000210 <memchr>
 8012196:	2800      	cmp	r0, #0
 8012198:	d038      	beq.n	801220c <_svfiprintf_r+0x1d8>
 801219a:	4b23      	ldr	r3, [pc, #140]	; (8012228 <_svfiprintf_r+0x1f4>)
 801219c:	bb1b      	cbnz	r3, 80121e6 <_svfiprintf_r+0x1b2>
 801219e:	9b03      	ldr	r3, [sp, #12]
 80121a0:	3307      	adds	r3, #7
 80121a2:	f023 0307 	bic.w	r3, r3, #7
 80121a6:	3308      	adds	r3, #8
 80121a8:	9303      	str	r3, [sp, #12]
 80121aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121ac:	4433      	add	r3, r6
 80121ae:	9309      	str	r3, [sp, #36]	; 0x24
 80121b0:	e767      	b.n	8012082 <_svfiprintf_r+0x4e>
 80121b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80121b6:	460c      	mov	r4, r1
 80121b8:	2001      	movs	r0, #1
 80121ba:	e7a5      	b.n	8012108 <_svfiprintf_r+0xd4>
 80121bc:	2300      	movs	r3, #0
 80121be:	3401      	adds	r4, #1
 80121c0:	9305      	str	r3, [sp, #20]
 80121c2:	4619      	mov	r1, r3
 80121c4:	f04f 0c0a 	mov.w	ip, #10
 80121c8:	4620      	mov	r0, r4
 80121ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121ce:	3a30      	subs	r2, #48	; 0x30
 80121d0:	2a09      	cmp	r2, #9
 80121d2:	d903      	bls.n	80121dc <_svfiprintf_r+0x1a8>
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d0c5      	beq.n	8012164 <_svfiprintf_r+0x130>
 80121d8:	9105      	str	r1, [sp, #20]
 80121da:	e7c3      	b.n	8012164 <_svfiprintf_r+0x130>
 80121dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80121e0:	4604      	mov	r4, r0
 80121e2:	2301      	movs	r3, #1
 80121e4:	e7f0      	b.n	80121c8 <_svfiprintf_r+0x194>
 80121e6:	ab03      	add	r3, sp, #12
 80121e8:	9300      	str	r3, [sp, #0]
 80121ea:	462a      	mov	r2, r5
 80121ec:	4b0f      	ldr	r3, [pc, #60]	; (801222c <_svfiprintf_r+0x1f8>)
 80121ee:	a904      	add	r1, sp, #16
 80121f0:	4638      	mov	r0, r7
 80121f2:	f7fc f9e5 	bl	800e5c0 <_printf_float>
 80121f6:	1c42      	adds	r2, r0, #1
 80121f8:	4606      	mov	r6, r0
 80121fa:	d1d6      	bne.n	80121aa <_svfiprintf_r+0x176>
 80121fc:	89ab      	ldrh	r3, [r5, #12]
 80121fe:	065b      	lsls	r3, r3, #25
 8012200:	f53f af2c 	bmi.w	801205c <_svfiprintf_r+0x28>
 8012204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012206:	b01d      	add	sp, #116	; 0x74
 8012208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801220c:	ab03      	add	r3, sp, #12
 801220e:	9300      	str	r3, [sp, #0]
 8012210:	462a      	mov	r2, r5
 8012212:	4b06      	ldr	r3, [pc, #24]	; (801222c <_svfiprintf_r+0x1f8>)
 8012214:	a904      	add	r1, sp, #16
 8012216:	4638      	mov	r0, r7
 8012218:	f7fc fc76 	bl	800eb08 <_printf_i>
 801221c:	e7eb      	b.n	80121f6 <_svfiprintf_r+0x1c2>
 801221e:	bf00      	nop
 8012220:	08026b54 	.word	0x08026b54
 8012224:	08026b5e 	.word	0x08026b5e
 8012228:	0800e5c1 	.word	0x0800e5c1
 801222c:	08011f7d 	.word	0x08011f7d
 8012230:	08026b5a 	.word	0x08026b5a

08012234 <__sfputc_r>:
 8012234:	6893      	ldr	r3, [r2, #8]
 8012236:	3b01      	subs	r3, #1
 8012238:	2b00      	cmp	r3, #0
 801223a:	b410      	push	{r4}
 801223c:	6093      	str	r3, [r2, #8]
 801223e:	da08      	bge.n	8012252 <__sfputc_r+0x1e>
 8012240:	6994      	ldr	r4, [r2, #24]
 8012242:	42a3      	cmp	r3, r4
 8012244:	db01      	blt.n	801224a <__sfputc_r+0x16>
 8012246:	290a      	cmp	r1, #10
 8012248:	d103      	bne.n	8012252 <__sfputc_r+0x1e>
 801224a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801224e:	f000 b975 	b.w	801253c <__swbuf_r>
 8012252:	6813      	ldr	r3, [r2, #0]
 8012254:	1c58      	adds	r0, r3, #1
 8012256:	6010      	str	r0, [r2, #0]
 8012258:	7019      	strb	r1, [r3, #0]
 801225a:	4608      	mov	r0, r1
 801225c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012260:	4770      	bx	lr

08012262 <__sfputs_r>:
 8012262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012264:	4606      	mov	r6, r0
 8012266:	460f      	mov	r7, r1
 8012268:	4614      	mov	r4, r2
 801226a:	18d5      	adds	r5, r2, r3
 801226c:	42ac      	cmp	r4, r5
 801226e:	d101      	bne.n	8012274 <__sfputs_r+0x12>
 8012270:	2000      	movs	r0, #0
 8012272:	e007      	b.n	8012284 <__sfputs_r+0x22>
 8012274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012278:	463a      	mov	r2, r7
 801227a:	4630      	mov	r0, r6
 801227c:	f7ff ffda 	bl	8012234 <__sfputc_r>
 8012280:	1c43      	adds	r3, r0, #1
 8012282:	d1f3      	bne.n	801226c <__sfputs_r+0xa>
 8012284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012288 <_vfiprintf_r>:
 8012288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801228c:	460d      	mov	r5, r1
 801228e:	b09d      	sub	sp, #116	; 0x74
 8012290:	4614      	mov	r4, r2
 8012292:	4698      	mov	r8, r3
 8012294:	4606      	mov	r6, r0
 8012296:	b118      	cbz	r0, 80122a0 <_vfiprintf_r+0x18>
 8012298:	6983      	ldr	r3, [r0, #24]
 801229a:	b90b      	cbnz	r3, 80122a0 <_vfiprintf_r+0x18>
 801229c:	f000 fb3e 	bl	801291c <__sinit>
 80122a0:	4b89      	ldr	r3, [pc, #548]	; (80124c8 <_vfiprintf_r+0x240>)
 80122a2:	429d      	cmp	r5, r3
 80122a4:	d11b      	bne.n	80122de <_vfiprintf_r+0x56>
 80122a6:	6875      	ldr	r5, [r6, #4]
 80122a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122aa:	07d9      	lsls	r1, r3, #31
 80122ac:	d405      	bmi.n	80122ba <_vfiprintf_r+0x32>
 80122ae:	89ab      	ldrh	r3, [r5, #12]
 80122b0:	059a      	lsls	r2, r3, #22
 80122b2:	d402      	bmi.n	80122ba <_vfiprintf_r+0x32>
 80122b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122b6:	f000 fbcf 	bl	8012a58 <__retarget_lock_acquire_recursive>
 80122ba:	89ab      	ldrh	r3, [r5, #12]
 80122bc:	071b      	lsls	r3, r3, #28
 80122be:	d501      	bpl.n	80122c4 <_vfiprintf_r+0x3c>
 80122c0:	692b      	ldr	r3, [r5, #16]
 80122c2:	b9eb      	cbnz	r3, 8012300 <_vfiprintf_r+0x78>
 80122c4:	4629      	mov	r1, r5
 80122c6:	4630      	mov	r0, r6
 80122c8:	f000 f998 	bl	80125fc <__swsetup_r>
 80122cc:	b1c0      	cbz	r0, 8012300 <_vfiprintf_r+0x78>
 80122ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122d0:	07dc      	lsls	r4, r3, #31
 80122d2:	d50e      	bpl.n	80122f2 <_vfiprintf_r+0x6a>
 80122d4:	f04f 30ff 	mov.w	r0, #4294967295
 80122d8:	b01d      	add	sp, #116	; 0x74
 80122da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122de:	4b7b      	ldr	r3, [pc, #492]	; (80124cc <_vfiprintf_r+0x244>)
 80122e0:	429d      	cmp	r5, r3
 80122e2:	d101      	bne.n	80122e8 <_vfiprintf_r+0x60>
 80122e4:	68b5      	ldr	r5, [r6, #8]
 80122e6:	e7df      	b.n	80122a8 <_vfiprintf_r+0x20>
 80122e8:	4b79      	ldr	r3, [pc, #484]	; (80124d0 <_vfiprintf_r+0x248>)
 80122ea:	429d      	cmp	r5, r3
 80122ec:	bf08      	it	eq
 80122ee:	68f5      	ldreq	r5, [r6, #12]
 80122f0:	e7da      	b.n	80122a8 <_vfiprintf_r+0x20>
 80122f2:	89ab      	ldrh	r3, [r5, #12]
 80122f4:	0598      	lsls	r0, r3, #22
 80122f6:	d4ed      	bmi.n	80122d4 <_vfiprintf_r+0x4c>
 80122f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122fa:	f000 fbae 	bl	8012a5a <__retarget_lock_release_recursive>
 80122fe:	e7e9      	b.n	80122d4 <_vfiprintf_r+0x4c>
 8012300:	2300      	movs	r3, #0
 8012302:	9309      	str	r3, [sp, #36]	; 0x24
 8012304:	2320      	movs	r3, #32
 8012306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801230a:	f8cd 800c 	str.w	r8, [sp, #12]
 801230e:	2330      	movs	r3, #48	; 0x30
 8012310:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80124d4 <_vfiprintf_r+0x24c>
 8012314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012318:	f04f 0901 	mov.w	r9, #1
 801231c:	4623      	mov	r3, r4
 801231e:	469a      	mov	sl, r3
 8012320:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012324:	b10a      	cbz	r2, 801232a <_vfiprintf_r+0xa2>
 8012326:	2a25      	cmp	r2, #37	; 0x25
 8012328:	d1f9      	bne.n	801231e <_vfiprintf_r+0x96>
 801232a:	ebba 0b04 	subs.w	fp, sl, r4
 801232e:	d00b      	beq.n	8012348 <_vfiprintf_r+0xc0>
 8012330:	465b      	mov	r3, fp
 8012332:	4622      	mov	r2, r4
 8012334:	4629      	mov	r1, r5
 8012336:	4630      	mov	r0, r6
 8012338:	f7ff ff93 	bl	8012262 <__sfputs_r>
 801233c:	3001      	adds	r0, #1
 801233e:	f000 80aa 	beq.w	8012496 <_vfiprintf_r+0x20e>
 8012342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012344:	445a      	add	r2, fp
 8012346:	9209      	str	r2, [sp, #36]	; 0x24
 8012348:	f89a 3000 	ldrb.w	r3, [sl]
 801234c:	2b00      	cmp	r3, #0
 801234e:	f000 80a2 	beq.w	8012496 <_vfiprintf_r+0x20e>
 8012352:	2300      	movs	r3, #0
 8012354:	f04f 32ff 	mov.w	r2, #4294967295
 8012358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801235c:	f10a 0a01 	add.w	sl, sl, #1
 8012360:	9304      	str	r3, [sp, #16]
 8012362:	9307      	str	r3, [sp, #28]
 8012364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012368:	931a      	str	r3, [sp, #104]	; 0x68
 801236a:	4654      	mov	r4, sl
 801236c:	2205      	movs	r2, #5
 801236e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012372:	4858      	ldr	r0, [pc, #352]	; (80124d4 <_vfiprintf_r+0x24c>)
 8012374:	f7ed ff4c 	bl	8000210 <memchr>
 8012378:	9a04      	ldr	r2, [sp, #16]
 801237a:	b9d8      	cbnz	r0, 80123b4 <_vfiprintf_r+0x12c>
 801237c:	06d1      	lsls	r1, r2, #27
 801237e:	bf44      	itt	mi
 8012380:	2320      	movmi	r3, #32
 8012382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012386:	0713      	lsls	r3, r2, #28
 8012388:	bf44      	itt	mi
 801238a:	232b      	movmi	r3, #43	; 0x2b
 801238c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012390:	f89a 3000 	ldrb.w	r3, [sl]
 8012394:	2b2a      	cmp	r3, #42	; 0x2a
 8012396:	d015      	beq.n	80123c4 <_vfiprintf_r+0x13c>
 8012398:	9a07      	ldr	r2, [sp, #28]
 801239a:	4654      	mov	r4, sl
 801239c:	2000      	movs	r0, #0
 801239e:	f04f 0c0a 	mov.w	ip, #10
 80123a2:	4621      	mov	r1, r4
 80123a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80123a8:	3b30      	subs	r3, #48	; 0x30
 80123aa:	2b09      	cmp	r3, #9
 80123ac:	d94e      	bls.n	801244c <_vfiprintf_r+0x1c4>
 80123ae:	b1b0      	cbz	r0, 80123de <_vfiprintf_r+0x156>
 80123b0:	9207      	str	r2, [sp, #28]
 80123b2:	e014      	b.n	80123de <_vfiprintf_r+0x156>
 80123b4:	eba0 0308 	sub.w	r3, r0, r8
 80123b8:	fa09 f303 	lsl.w	r3, r9, r3
 80123bc:	4313      	orrs	r3, r2
 80123be:	9304      	str	r3, [sp, #16]
 80123c0:	46a2      	mov	sl, r4
 80123c2:	e7d2      	b.n	801236a <_vfiprintf_r+0xe2>
 80123c4:	9b03      	ldr	r3, [sp, #12]
 80123c6:	1d19      	adds	r1, r3, #4
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	9103      	str	r1, [sp, #12]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	bfbb      	ittet	lt
 80123d0:	425b      	neglt	r3, r3
 80123d2:	f042 0202 	orrlt.w	r2, r2, #2
 80123d6:	9307      	strge	r3, [sp, #28]
 80123d8:	9307      	strlt	r3, [sp, #28]
 80123da:	bfb8      	it	lt
 80123dc:	9204      	strlt	r2, [sp, #16]
 80123de:	7823      	ldrb	r3, [r4, #0]
 80123e0:	2b2e      	cmp	r3, #46	; 0x2e
 80123e2:	d10c      	bne.n	80123fe <_vfiprintf_r+0x176>
 80123e4:	7863      	ldrb	r3, [r4, #1]
 80123e6:	2b2a      	cmp	r3, #42	; 0x2a
 80123e8:	d135      	bne.n	8012456 <_vfiprintf_r+0x1ce>
 80123ea:	9b03      	ldr	r3, [sp, #12]
 80123ec:	1d1a      	adds	r2, r3, #4
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	9203      	str	r2, [sp, #12]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	bfb8      	it	lt
 80123f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80123fa:	3402      	adds	r4, #2
 80123fc:	9305      	str	r3, [sp, #20]
 80123fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80124e4 <_vfiprintf_r+0x25c>
 8012402:	7821      	ldrb	r1, [r4, #0]
 8012404:	2203      	movs	r2, #3
 8012406:	4650      	mov	r0, sl
 8012408:	f7ed ff02 	bl	8000210 <memchr>
 801240c:	b140      	cbz	r0, 8012420 <_vfiprintf_r+0x198>
 801240e:	2340      	movs	r3, #64	; 0x40
 8012410:	eba0 000a 	sub.w	r0, r0, sl
 8012414:	fa03 f000 	lsl.w	r0, r3, r0
 8012418:	9b04      	ldr	r3, [sp, #16]
 801241a:	4303      	orrs	r3, r0
 801241c:	3401      	adds	r4, #1
 801241e:	9304      	str	r3, [sp, #16]
 8012420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012424:	482c      	ldr	r0, [pc, #176]	; (80124d8 <_vfiprintf_r+0x250>)
 8012426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801242a:	2206      	movs	r2, #6
 801242c:	f7ed fef0 	bl	8000210 <memchr>
 8012430:	2800      	cmp	r0, #0
 8012432:	d03f      	beq.n	80124b4 <_vfiprintf_r+0x22c>
 8012434:	4b29      	ldr	r3, [pc, #164]	; (80124dc <_vfiprintf_r+0x254>)
 8012436:	bb1b      	cbnz	r3, 8012480 <_vfiprintf_r+0x1f8>
 8012438:	9b03      	ldr	r3, [sp, #12]
 801243a:	3307      	adds	r3, #7
 801243c:	f023 0307 	bic.w	r3, r3, #7
 8012440:	3308      	adds	r3, #8
 8012442:	9303      	str	r3, [sp, #12]
 8012444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012446:	443b      	add	r3, r7
 8012448:	9309      	str	r3, [sp, #36]	; 0x24
 801244a:	e767      	b.n	801231c <_vfiprintf_r+0x94>
 801244c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012450:	460c      	mov	r4, r1
 8012452:	2001      	movs	r0, #1
 8012454:	e7a5      	b.n	80123a2 <_vfiprintf_r+0x11a>
 8012456:	2300      	movs	r3, #0
 8012458:	3401      	adds	r4, #1
 801245a:	9305      	str	r3, [sp, #20]
 801245c:	4619      	mov	r1, r3
 801245e:	f04f 0c0a 	mov.w	ip, #10
 8012462:	4620      	mov	r0, r4
 8012464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012468:	3a30      	subs	r2, #48	; 0x30
 801246a:	2a09      	cmp	r2, #9
 801246c:	d903      	bls.n	8012476 <_vfiprintf_r+0x1ee>
 801246e:	2b00      	cmp	r3, #0
 8012470:	d0c5      	beq.n	80123fe <_vfiprintf_r+0x176>
 8012472:	9105      	str	r1, [sp, #20]
 8012474:	e7c3      	b.n	80123fe <_vfiprintf_r+0x176>
 8012476:	fb0c 2101 	mla	r1, ip, r1, r2
 801247a:	4604      	mov	r4, r0
 801247c:	2301      	movs	r3, #1
 801247e:	e7f0      	b.n	8012462 <_vfiprintf_r+0x1da>
 8012480:	ab03      	add	r3, sp, #12
 8012482:	9300      	str	r3, [sp, #0]
 8012484:	462a      	mov	r2, r5
 8012486:	4b16      	ldr	r3, [pc, #88]	; (80124e0 <_vfiprintf_r+0x258>)
 8012488:	a904      	add	r1, sp, #16
 801248a:	4630      	mov	r0, r6
 801248c:	f7fc f898 	bl	800e5c0 <_printf_float>
 8012490:	4607      	mov	r7, r0
 8012492:	1c78      	adds	r0, r7, #1
 8012494:	d1d6      	bne.n	8012444 <_vfiprintf_r+0x1bc>
 8012496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012498:	07d9      	lsls	r1, r3, #31
 801249a:	d405      	bmi.n	80124a8 <_vfiprintf_r+0x220>
 801249c:	89ab      	ldrh	r3, [r5, #12]
 801249e:	059a      	lsls	r2, r3, #22
 80124a0:	d402      	bmi.n	80124a8 <_vfiprintf_r+0x220>
 80124a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124a4:	f000 fad9 	bl	8012a5a <__retarget_lock_release_recursive>
 80124a8:	89ab      	ldrh	r3, [r5, #12]
 80124aa:	065b      	lsls	r3, r3, #25
 80124ac:	f53f af12 	bmi.w	80122d4 <_vfiprintf_r+0x4c>
 80124b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80124b2:	e711      	b.n	80122d8 <_vfiprintf_r+0x50>
 80124b4:	ab03      	add	r3, sp, #12
 80124b6:	9300      	str	r3, [sp, #0]
 80124b8:	462a      	mov	r2, r5
 80124ba:	4b09      	ldr	r3, [pc, #36]	; (80124e0 <_vfiprintf_r+0x258>)
 80124bc:	a904      	add	r1, sp, #16
 80124be:	4630      	mov	r0, r6
 80124c0:	f7fc fb22 	bl	800eb08 <_printf_i>
 80124c4:	e7e4      	b.n	8012490 <_vfiprintf_r+0x208>
 80124c6:	bf00      	nop
 80124c8:	08026b88 	.word	0x08026b88
 80124cc:	08026ba8 	.word	0x08026ba8
 80124d0:	08026b68 	.word	0x08026b68
 80124d4:	08026b54 	.word	0x08026b54
 80124d8:	08026b5e 	.word	0x08026b5e
 80124dc:	0800e5c1 	.word	0x0800e5c1
 80124e0:	08012263 	.word	0x08012263
 80124e4:	08026b5a 	.word	0x08026b5a

080124e8 <nan>:
 80124e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80124f0 <nan+0x8>
 80124ec:	4770      	bx	lr
 80124ee:	bf00      	nop
 80124f0:	00000000 	.word	0x00000000
 80124f4:	7ff80000 	.word	0x7ff80000

080124f8 <_sbrk_r>:
 80124f8:	b538      	push	{r3, r4, r5, lr}
 80124fa:	4d06      	ldr	r5, [pc, #24]	; (8012514 <_sbrk_r+0x1c>)
 80124fc:	2300      	movs	r3, #0
 80124fe:	4604      	mov	r4, r0
 8012500:	4608      	mov	r0, r1
 8012502:	602b      	str	r3, [r5, #0]
 8012504:	f7f4 fe94 	bl	8007230 <_sbrk>
 8012508:	1c43      	adds	r3, r0, #1
 801250a:	d102      	bne.n	8012512 <_sbrk_r+0x1a>
 801250c:	682b      	ldr	r3, [r5, #0]
 801250e:	b103      	cbz	r3, 8012512 <_sbrk_r+0x1a>
 8012510:	6023      	str	r3, [r4, #0]
 8012512:	bd38      	pop	{r3, r4, r5, pc}
 8012514:	200008d8 	.word	0x200008d8

08012518 <strncmp>:
 8012518:	b510      	push	{r4, lr}
 801251a:	b16a      	cbz	r2, 8012538 <strncmp+0x20>
 801251c:	3901      	subs	r1, #1
 801251e:	1884      	adds	r4, r0, r2
 8012520:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012524:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012528:	4293      	cmp	r3, r2
 801252a:	d103      	bne.n	8012534 <strncmp+0x1c>
 801252c:	42a0      	cmp	r0, r4
 801252e:	d001      	beq.n	8012534 <strncmp+0x1c>
 8012530:	2b00      	cmp	r3, #0
 8012532:	d1f5      	bne.n	8012520 <strncmp+0x8>
 8012534:	1a98      	subs	r0, r3, r2
 8012536:	bd10      	pop	{r4, pc}
 8012538:	4610      	mov	r0, r2
 801253a:	e7fc      	b.n	8012536 <strncmp+0x1e>

0801253c <__swbuf_r>:
 801253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801253e:	460e      	mov	r6, r1
 8012540:	4614      	mov	r4, r2
 8012542:	4605      	mov	r5, r0
 8012544:	b118      	cbz	r0, 801254e <__swbuf_r+0x12>
 8012546:	6983      	ldr	r3, [r0, #24]
 8012548:	b90b      	cbnz	r3, 801254e <__swbuf_r+0x12>
 801254a:	f000 f9e7 	bl	801291c <__sinit>
 801254e:	4b21      	ldr	r3, [pc, #132]	; (80125d4 <__swbuf_r+0x98>)
 8012550:	429c      	cmp	r4, r3
 8012552:	d12b      	bne.n	80125ac <__swbuf_r+0x70>
 8012554:	686c      	ldr	r4, [r5, #4]
 8012556:	69a3      	ldr	r3, [r4, #24]
 8012558:	60a3      	str	r3, [r4, #8]
 801255a:	89a3      	ldrh	r3, [r4, #12]
 801255c:	071a      	lsls	r2, r3, #28
 801255e:	d52f      	bpl.n	80125c0 <__swbuf_r+0x84>
 8012560:	6923      	ldr	r3, [r4, #16]
 8012562:	b36b      	cbz	r3, 80125c0 <__swbuf_r+0x84>
 8012564:	6923      	ldr	r3, [r4, #16]
 8012566:	6820      	ldr	r0, [r4, #0]
 8012568:	1ac0      	subs	r0, r0, r3
 801256a:	6963      	ldr	r3, [r4, #20]
 801256c:	b2f6      	uxtb	r6, r6
 801256e:	4283      	cmp	r3, r0
 8012570:	4637      	mov	r7, r6
 8012572:	dc04      	bgt.n	801257e <__swbuf_r+0x42>
 8012574:	4621      	mov	r1, r4
 8012576:	4628      	mov	r0, r5
 8012578:	f000 f93c 	bl	80127f4 <_fflush_r>
 801257c:	bb30      	cbnz	r0, 80125cc <__swbuf_r+0x90>
 801257e:	68a3      	ldr	r3, [r4, #8]
 8012580:	3b01      	subs	r3, #1
 8012582:	60a3      	str	r3, [r4, #8]
 8012584:	6823      	ldr	r3, [r4, #0]
 8012586:	1c5a      	adds	r2, r3, #1
 8012588:	6022      	str	r2, [r4, #0]
 801258a:	701e      	strb	r6, [r3, #0]
 801258c:	6963      	ldr	r3, [r4, #20]
 801258e:	3001      	adds	r0, #1
 8012590:	4283      	cmp	r3, r0
 8012592:	d004      	beq.n	801259e <__swbuf_r+0x62>
 8012594:	89a3      	ldrh	r3, [r4, #12]
 8012596:	07db      	lsls	r3, r3, #31
 8012598:	d506      	bpl.n	80125a8 <__swbuf_r+0x6c>
 801259a:	2e0a      	cmp	r6, #10
 801259c:	d104      	bne.n	80125a8 <__swbuf_r+0x6c>
 801259e:	4621      	mov	r1, r4
 80125a0:	4628      	mov	r0, r5
 80125a2:	f000 f927 	bl	80127f4 <_fflush_r>
 80125a6:	b988      	cbnz	r0, 80125cc <__swbuf_r+0x90>
 80125a8:	4638      	mov	r0, r7
 80125aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125ac:	4b0a      	ldr	r3, [pc, #40]	; (80125d8 <__swbuf_r+0x9c>)
 80125ae:	429c      	cmp	r4, r3
 80125b0:	d101      	bne.n	80125b6 <__swbuf_r+0x7a>
 80125b2:	68ac      	ldr	r4, [r5, #8]
 80125b4:	e7cf      	b.n	8012556 <__swbuf_r+0x1a>
 80125b6:	4b09      	ldr	r3, [pc, #36]	; (80125dc <__swbuf_r+0xa0>)
 80125b8:	429c      	cmp	r4, r3
 80125ba:	bf08      	it	eq
 80125bc:	68ec      	ldreq	r4, [r5, #12]
 80125be:	e7ca      	b.n	8012556 <__swbuf_r+0x1a>
 80125c0:	4621      	mov	r1, r4
 80125c2:	4628      	mov	r0, r5
 80125c4:	f000 f81a 	bl	80125fc <__swsetup_r>
 80125c8:	2800      	cmp	r0, #0
 80125ca:	d0cb      	beq.n	8012564 <__swbuf_r+0x28>
 80125cc:	f04f 37ff 	mov.w	r7, #4294967295
 80125d0:	e7ea      	b.n	80125a8 <__swbuf_r+0x6c>
 80125d2:	bf00      	nop
 80125d4:	08026b88 	.word	0x08026b88
 80125d8:	08026ba8 	.word	0x08026ba8
 80125dc:	08026b68 	.word	0x08026b68

080125e0 <__ascii_wctomb>:
 80125e0:	b149      	cbz	r1, 80125f6 <__ascii_wctomb+0x16>
 80125e2:	2aff      	cmp	r2, #255	; 0xff
 80125e4:	bf85      	ittet	hi
 80125e6:	238a      	movhi	r3, #138	; 0x8a
 80125e8:	6003      	strhi	r3, [r0, #0]
 80125ea:	700a      	strbls	r2, [r1, #0]
 80125ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80125f0:	bf98      	it	ls
 80125f2:	2001      	movls	r0, #1
 80125f4:	4770      	bx	lr
 80125f6:	4608      	mov	r0, r1
 80125f8:	4770      	bx	lr
	...

080125fc <__swsetup_r>:
 80125fc:	4b32      	ldr	r3, [pc, #200]	; (80126c8 <__swsetup_r+0xcc>)
 80125fe:	b570      	push	{r4, r5, r6, lr}
 8012600:	681d      	ldr	r5, [r3, #0]
 8012602:	4606      	mov	r6, r0
 8012604:	460c      	mov	r4, r1
 8012606:	b125      	cbz	r5, 8012612 <__swsetup_r+0x16>
 8012608:	69ab      	ldr	r3, [r5, #24]
 801260a:	b913      	cbnz	r3, 8012612 <__swsetup_r+0x16>
 801260c:	4628      	mov	r0, r5
 801260e:	f000 f985 	bl	801291c <__sinit>
 8012612:	4b2e      	ldr	r3, [pc, #184]	; (80126cc <__swsetup_r+0xd0>)
 8012614:	429c      	cmp	r4, r3
 8012616:	d10f      	bne.n	8012638 <__swsetup_r+0x3c>
 8012618:	686c      	ldr	r4, [r5, #4]
 801261a:	89a3      	ldrh	r3, [r4, #12]
 801261c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012620:	0719      	lsls	r1, r3, #28
 8012622:	d42c      	bmi.n	801267e <__swsetup_r+0x82>
 8012624:	06dd      	lsls	r5, r3, #27
 8012626:	d411      	bmi.n	801264c <__swsetup_r+0x50>
 8012628:	2309      	movs	r3, #9
 801262a:	6033      	str	r3, [r6, #0]
 801262c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012630:	81a3      	strh	r3, [r4, #12]
 8012632:	f04f 30ff 	mov.w	r0, #4294967295
 8012636:	e03e      	b.n	80126b6 <__swsetup_r+0xba>
 8012638:	4b25      	ldr	r3, [pc, #148]	; (80126d0 <__swsetup_r+0xd4>)
 801263a:	429c      	cmp	r4, r3
 801263c:	d101      	bne.n	8012642 <__swsetup_r+0x46>
 801263e:	68ac      	ldr	r4, [r5, #8]
 8012640:	e7eb      	b.n	801261a <__swsetup_r+0x1e>
 8012642:	4b24      	ldr	r3, [pc, #144]	; (80126d4 <__swsetup_r+0xd8>)
 8012644:	429c      	cmp	r4, r3
 8012646:	bf08      	it	eq
 8012648:	68ec      	ldreq	r4, [r5, #12]
 801264a:	e7e6      	b.n	801261a <__swsetup_r+0x1e>
 801264c:	0758      	lsls	r0, r3, #29
 801264e:	d512      	bpl.n	8012676 <__swsetup_r+0x7a>
 8012650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012652:	b141      	cbz	r1, 8012666 <__swsetup_r+0x6a>
 8012654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012658:	4299      	cmp	r1, r3
 801265a:	d002      	beq.n	8012662 <__swsetup_r+0x66>
 801265c:	4630      	mov	r0, r6
 801265e:	f7ff fbe3 	bl	8011e28 <_free_r>
 8012662:	2300      	movs	r3, #0
 8012664:	6363      	str	r3, [r4, #52]	; 0x34
 8012666:	89a3      	ldrh	r3, [r4, #12]
 8012668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801266c:	81a3      	strh	r3, [r4, #12]
 801266e:	2300      	movs	r3, #0
 8012670:	6063      	str	r3, [r4, #4]
 8012672:	6923      	ldr	r3, [r4, #16]
 8012674:	6023      	str	r3, [r4, #0]
 8012676:	89a3      	ldrh	r3, [r4, #12]
 8012678:	f043 0308 	orr.w	r3, r3, #8
 801267c:	81a3      	strh	r3, [r4, #12]
 801267e:	6923      	ldr	r3, [r4, #16]
 8012680:	b94b      	cbnz	r3, 8012696 <__swsetup_r+0x9a>
 8012682:	89a3      	ldrh	r3, [r4, #12]
 8012684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801268c:	d003      	beq.n	8012696 <__swsetup_r+0x9a>
 801268e:	4621      	mov	r1, r4
 8012690:	4630      	mov	r0, r6
 8012692:	f000 fa07 	bl	8012aa4 <__smakebuf_r>
 8012696:	89a0      	ldrh	r0, [r4, #12]
 8012698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801269c:	f010 0301 	ands.w	r3, r0, #1
 80126a0:	d00a      	beq.n	80126b8 <__swsetup_r+0xbc>
 80126a2:	2300      	movs	r3, #0
 80126a4:	60a3      	str	r3, [r4, #8]
 80126a6:	6963      	ldr	r3, [r4, #20]
 80126a8:	425b      	negs	r3, r3
 80126aa:	61a3      	str	r3, [r4, #24]
 80126ac:	6923      	ldr	r3, [r4, #16]
 80126ae:	b943      	cbnz	r3, 80126c2 <__swsetup_r+0xc6>
 80126b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80126b4:	d1ba      	bne.n	801262c <__swsetup_r+0x30>
 80126b6:	bd70      	pop	{r4, r5, r6, pc}
 80126b8:	0781      	lsls	r1, r0, #30
 80126ba:	bf58      	it	pl
 80126bc:	6963      	ldrpl	r3, [r4, #20]
 80126be:	60a3      	str	r3, [r4, #8]
 80126c0:	e7f4      	b.n	80126ac <__swsetup_r+0xb0>
 80126c2:	2000      	movs	r0, #0
 80126c4:	e7f7      	b.n	80126b6 <__swsetup_r+0xba>
 80126c6:	bf00      	nop
 80126c8:	20000040 	.word	0x20000040
 80126cc:	08026b88 	.word	0x08026b88
 80126d0:	08026ba8 	.word	0x08026ba8
 80126d4:	08026b68 	.word	0x08026b68

080126d8 <abort>:
 80126d8:	b508      	push	{r3, lr}
 80126da:	2006      	movs	r0, #6
 80126dc:	f000 fa96 	bl	8012c0c <raise>
 80126e0:	2001      	movs	r0, #1
 80126e2:	f7f4 fd2d 	bl	8007140 <_exit>
	...

080126e8 <__sflush_r>:
 80126e8:	898a      	ldrh	r2, [r1, #12]
 80126ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126ee:	4605      	mov	r5, r0
 80126f0:	0710      	lsls	r0, r2, #28
 80126f2:	460c      	mov	r4, r1
 80126f4:	d458      	bmi.n	80127a8 <__sflush_r+0xc0>
 80126f6:	684b      	ldr	r3, [r1, #4]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	dc05      	bgt.n	8012708 <__sflush_r+0x20>
 80126fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80126fe:	2b00      	cmp	r3, #0
 8012700:	dc02      	bgt.n	8012708 <__sflush_r+0x20>
 8012702:	2000      	movs	r0, #0
 8012704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801270a:	2e00      	cmp	r6, #0
 801270c:	d0f9      	beq.n	8012702 <__sflush_r+0x1a>
 801270e:	2300      	movs	r3, #0
 8012710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012714:	682f      	ldr	r7, [r5, #0]
 8012716:	602b      	str	r3, [r5, #0]
 8012718:	d032      	beq.n	8012780 <__sflush_r+0x98>
 801271a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801271c:	89a3      	ldrh	r3, [r4, #12]
 801271e:	075a      	lsls	r2, r3, #29
 8012720:	d505      	bpl.n	801272e <__sflush_r+0x46>
 8012722:	6863      	ldr	r3, [r4, #4]
 8012724:	1ac0      	subs	r0, r0, r3
 8012726:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012728:	b10b      	cbz	r3, 801272e <__sflush_r+0x46>
 801272a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801272c:	1ac0      	subs	r0, r0, r3
 801272e:	2300      	movs	r3, #0
 8012730:	4602      	mov	r2, r0
 8012732:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012734:	6a21      	ldr	r1, [r4, #32]
 8012736:	4628      	mov	r0, r5
 8012738:	47b0      	blx	r6
 801273a:	1c43      	adds	r3, r0, #1
 801273c:	89a3      	ldrh	r3, [r4, #12]
 801273e:	d106      	bne.n	801274e <__sflush_r+0x66>
 8012740:	6829      	ldr	r1, [r5, #0]
 8012742:	291d      	cmp	r1, #29
 8012744:	d82c      	bhi.n	80127a0 <__sflush_r+0xb8>
 8012746:	4a2a      	ldr	r2, [pc, #168]	; (80127f0 <__sflush_r+0x108>)
 8012748:	40ca      	lsrs	r2, r1
 801274a:	07d6      	lsls	r6, r2, #31
 801274c:	d528      	bpl.n	80127a0 <__sflush_r+0xb8>
 801274e:	2200      	movs	r2, #0
 8012750:	6062      	str	r2, [r4, #4]
 8012752:	04d9      	lsls	r1, r3, #19
 8012754:	6922      	ldr	r2, [r4, #16]
 8012756:	6022      	str	r2, [r4, #0]
 8012758:	d504      	bpl.n	8012764 <__sflush_r+0x7c>
 801275a:	1c42      	adds	r2, r0, #1
 801275c:	d101      	bne.n	8012762 <__sflush_r+0x7a>
 801275e:	682b      	ldr	r3, [r5, #0]
 8012760:	b903      	cbnz	r3, 8012764 <__sflush_r+0x7c>
 8012762:	6560      	str	r0, [r4, #84]	; 0x54
 8012764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012766:	602f      	str	r7, [r5, #0]
 8012768:	2900      	cmp	r1, #0
 801276a:	d0ca      	beq.n	8012702 <__sflush_r+0x1a>
 801276c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012770:	4299      	cmp	r1, r3
 8012772:	d002      	beq.n	801277a <__sflush_r+0x92>
 8012774:	4628      	mov	r0, r5
 8012776:	f7ff fb57 	bl	8011e28 <_free_r>
 801277a:	2000      	movs	r0, #0
 801277c:	6360      	str	r0, [r4, #52]	; 0x34
 801277e:	e7c1      	b.n	8012704 <__sflush_r+0x1c>
 8012780:	6a21      	ldr	r1, [r4, #32]
 8012782:	2301      	movs	r3, #1
 8012784:	4628      	mov	r0, r5
 8012786:	47b0      	blx	r6
 8012788:	1c41      	adds	r1, r0, #1
 801278a:	d1c7      	bne.n	801271c <__sflush_r+0x34>
 801278c:	682b      	ldr	r3, [r5, #0]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d0c4      	beq.n	801271c <__sflush_r+0x34>
 8012792:	2b1d      	cmp	r3, #29
 8012794:	d001      	beq.n	801279a <__sflush_r+0xb2>
 8012796:	2b16      	cmp	r3, #22
 8012798:	d101      	bne.n	801279e <__sflush_r+0xb6>
 801279a:	602f      	str	r7, [r5, #0]
 801279c:	e7b1      	b.n	8012702 <__sflush_r+0x1a>
 801279e:	89a3      	ldrh	r3, [r4, #12]
 80127a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127a4:	81a3      	strh	r3, [r4, #12]
 80127a6:	e7ad      	b.n	8012704 <__sflush_r+0x1c>
 80127a8:	690f      	ldr	r7, [r1, #16]
 80127aa:	2f00      	cmp	r7, #0
 80127ac:	d0a9      	beq.n	8012702 <__sflush_r+0x1a>
 80127ae:	0793      	lsls	r3, r2, #30
 80127b0:	680e      	ldr	r6, [r1, #0]
 80127b2:	bf08      	it	eq
 80127b4:	694b      	ldreq	r3, [r1, #20]
 80127b6:	600f      	str	r7, [r1, #0]
 80127b8:	bf18      	it	ne
 80127ba:	2300      	movne	r3, #0
 80127bc:	eba6 0807 	sub.w	r8, r6, r7
 80127c0:	608b      	str	r3, [r1, #8]
 80127c2:	f1b8 0f00 	cmp.w	r8, #0
 80127c6:	dd9c      	ble.n	8012702 <__sflush_r+0x1a>
 80127c8:	6a21      	ldr	r1, [r4, #32]
 80127ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80127cc:	4643      	mov	r3, r8
 80127ce:	463a      	mov	r2, r7
 80127d0:	4628      	mov	r0, r5
 80127d2:	47b0      	blx	r6
 80127d4:	2800      	cmp	r0, #0
 80127d6:	dc06      	bgt.n	80127e6 <__sflush_r+0xfe>
 80127d8:	89a3      	ldrh	r3, [r4, #12]
 80127da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127de:	81a3      	strh	r3, [r4, #12]
 80127e0:	f04f 30ff 	mov.w	r0, #4294967295
 80127e4:	e78e      	b.n	8012704 <__sflush_r+0x1c>
 80127e6:	4407      	add	r7, r0
 80127e8:	eba8 0800 	sub.w	r8, r8, r0
 80127ec:	e7e9      	b.n	80127c2 <__sflush_r+0xda>
 80127ee:	bf00      	nop
 80127f0:	20400001 	.word	0x20400001

080127f4 <_fflush_r>:
 80127f4:	b538      	push	{r3, r4, r5, lr}
 80127f6:	690b      	ldr	r3, [r1, #16]
 80127f8:	4605      	mov	r5, r0
 80127fa:	460c      	mov	r4, r1
 80127fc:	b913      	cbnz	r3, 8012804 <_fflush_r+0x10>
 80127fe:	2500      	movs	r5, #0
 8012800:	4628      	mov	r0, r5
 8012802:	bd38      	pop	{r3, r4, r5, pc}
 8012804:	b118      	cbz	r0, 801280e <_fflush_r+0x1a>
 8012806:	6983      	ldr	r3, [r0, #24]
 8012808:	b90b      	cbnz	r3, 801280e <_fflush_r+0x1a>
 801280a:	f000 f887 	bl	801291c <__sinit>
 801280e:	4b14      	ldr	r3, [pc, #80]	; (8012860 <_fflush_r+0x6c>)
 8012810:	429c      	cmp	r4, r3
 8012812:	d11b      	bne.n	801284c <_fflush_r+0x58>
 8012814:	686c      	ldr	r4, [r5, #4]
 8012816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d0ef      	beq.n	80127fe <_fflush_r+0xa>
 801281e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012820:	07d0      	lsls	r0, r2, #31
 8012822:	d404      	bmi.n	801282e <_fflush_r+0x3a>
 8012824:	0599      	lsls	r1, r3, #22
 8012826:	d402      	bmi.n	801282e <_fflush_r+0x3a>
 8012828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801282a:	f000 f915 	bl	8012a58 <__retarget_lock_acquire_recursive>
 801282e:	4628      	mov	r0, r5
 8012830:	4621      	mov	r1, r4
 8012832:	f7ff ff59 	bl	80126e8 <__sflush_r>
 8012836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012838:	07da      	lsls	r2, r3, #31
 801283a:	4605      	mov	r5, r0
 801283c:	d4e0      	bmi.n	8012800 <_fflush_r+0xc>
 801283e:	89a3      	ldrh	r3, [r4, #12]
 8012840:	059b      	lsls	r3, r3, #22
 8012842:	d4dd      	bmi.n	8012800 <_fflush_r+0xc>
 8012844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012846:	f000 f908 	bl	8012a5a <__retarget_lock_release_recursive>
 801284a:	e7d9      	b.n	8012800 <_fflush_r+0xc>
 801284c:	4b05      	ldr	r3, [pc, #20]	; (8012864 <_fflush_r+0x70>)
 801284e:	429c      	cmp	r4, r3
 8012850:	d101      	bne.n	8012856 <_fflush_r+0x62>
 8012852:	68ac      	ldr	r4, [r5, #8]
 8012854:	e7df      	b.n	8012816 <_fflush_r+0x22>
 8012856:	4b04      	ldr	r3, [pc, #16]	; (8012868 <_fflush_r+0x74>)
 8012858:	429c      	cmp	r4, r3
 801285a:	bf08      	it	eq
 801285c:	68ec      	ldreq	r4, [r5, #12]
 801285e:	e7da      	b.n	8012816 <_fflush_r+0x22>
 8012860:	08026b88 	.word	0x08026b88
 8012864:	08026ba8 	.word	0x08026ba8
 8012868:	08026b68 	.word	0x08026b68

0801286c <std>:
 801286c:	2300      	movs	r3, #0
 801286e:	b510      	push	{r4, lr}
 8012870:	4604      	mov	r4, r0
 8012872:	e9c0 3300 	strd	r3, r3, [r0]
 8012876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801287a:	6083      	str	r3, [r0, #8]
 801287c:	8181      	strh	r1, [r0, #12]
 801287e:	6643      	str	r3, [r0, #100]	; 0x64
 8012880:	81c2      	strh	r2, [r0, #14]
 8012882:	6183      	str	r3, [r0, #24]
 8012884:	4619      	mov	r1, r3
 8012886:	2208      	movs	r2, #8
 8012888:	305c      	adds	r0, #92	; 0x5c
 801288a:	f7fb fdf1 	bl	800e470 <memset>
 801288e:	4b05      	ldr	r3, [pc, #20]	; (80128a4 <std+0x38>)
 8012890:	6263      	str	r3, [r4, #36]	; 0x24
 8012892:	4b05      	ldr	r3, [pc, #20]	; (80128a8 <std+0x3c>)
 8012894:	62a3      	str	r3, [r4, #40]	; 0x28
 8012896:	4b05      	ldr	r3, [pc, #20]	; (80128ac <std+0x40>)
 8012898:	62e3      	str	r3, [r4, #44]	; 0x2c
 801289a:	4b05      	ldr	r3, [pc, #20]	; (80128b0 <std+0x44>)
 801289c:	6224      	str	r4, [r4, #32]
 801289e:	6323      	str	r3, [r4, #48]	; 0x30
 80128a0:	bd10      	pop	{r4, pc}
 80128a2:	bf00      	nop
 80128a4:	08012c45 	.word	0x08012c45
 80128a8:	08012c67 	.word	0x08012c67
 80128ac:	08012c9f 	.word	0x08012c9f
 80128b0:	08012cc3 	.word	0x08012cc3

080128b4 <_cleanup_r>:
 80128b4:	4901      	ldr	r1, [pc, #4]	; (80128bc <_cleanup_r+0x8>)
 80128b6:	f000 b8af 	b.w	8012a18 <_fwalk_reent>
 80128ba:	bf00      	nop
 80128bc:	080127f5 	.word	0x080127f5

080128c0 <__sfmoreglue>:
 80128c0:	b570      	push	{r4, r5, r6, lr}
 80128c2:	1e4a      	subs	r2, r1, #1
 80128c4:	2568      	movs	r5, #104	; 0x68
 80128c6:	4355      	muls	r5, r2
 80128c8:	460e      	mov	r6, r1
 80128ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80128ce:	f7ff fafb 	bl	8011ec8 <_malloc_r>
 80128d2:	4604      	mov	r4, r0
 80128d4:	b140      	cbz	r0, 80128e8 <__sfmoreglue+0x28>
 80128d6:	2100      	movs	r1, #0
 80128d8:	e9c0 1600 	strd	r1, r6, [r0]
 80128dc:	300c      	adds	r0, #12
 80128de:	60a0      	str	r0, [r4, #8]
 80128e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80128e4:	f7fb fdc4 	bl	800e470 <memset>
 80128e8:	4620      	mov	r0, r4
 80128ea:	bd70      	pop	{r4, r5, r6, pc}

080128ec <__sfp_lock_acquire>:
 80128ec:	4801      	ldr	r0, [pc, #4]	; (80128f4 <__sfp_lock_acquire+0x8>)
 80128ee:	f000 b8b3 	b.w	8012a58 <__retarget_lock_acquire_recursive>
 80128f2:	bf00      	nop
 80128f4:	200008d4 	.word	0x200008d4

080128f8 <__sfp_lock_release>:
 80128f8:	4801      	ldr	r0, [pc, #4]	; (8012900 <__sfp_lock_release+0x8>)
 80128fa:	f000 b8ae 	b.w	8012a5a <__retarget_lock_release_recursive>
 80128fe:	bf00      	nop
 8012900:	200008d4 	.word	0x200008d4

08012904 <__sinit_lock_acquire>:
 8012904:	4801      	ldr	r0, [pc, #4]	; (801290c <__sinit_lock_acquire+0x8>)
 8012906:	f000 b8a7 	b.w	8012a58 <__retarget_lock_acquire_recursive>
 801290a:	bf00      	nop
 801290c:	200008cf 	.word	0x200008cf

08012910 <__sinit_lock_release>:
 8012910:	4801      	ldr	r0, [pc, #4]	; (8012918 <__sinit_lock_release+0x8>)
 8012912:	f000 b8a2 	b.w	8012a5a <__retarget_lock_release_recursive>
 8012916:	bf00      	nop
 8012918:	200008cf 	.word	0x200008cf

0801291c <__sinit>:
 801291c:	b510      	push	{r4, lr}
 801291e:	4604      	mov	r4, r0
 8012920:	f7ff fff0 	bl	8012904 <__sinit_lock_acquire>
 8012924:	69a3      	ldr	r3, [r4, #24]
 8012926:	b11b      	cbz	r3, 8012930 <__sinit+0x14>
 8012928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801292c:	f7ff bff0 	b.w	8012910 <__sinit_lock_release>
 8012930:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012934:	6523      	str	r3, [r4, #80]	; 0x50
 8012936:	4b13      	ldr	r3, [pc, #76]	; (8012984 <__sinit+0x68>)
 8012938:	4a13      	ldr	r2, [pc, #76]	; (8012988 <__sinit+0x6c>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	62a2      	str	r2, [r4, #40]	; 0x28
 801293e:	42a3      	cmp	r3, r4
 8012940:	bf04      	itt	eq
 8012942:	2301      	moveq	r3, #1
 8012944:	61a3      	streq	r3, [r4, #24]
 8012946:	4620      	mov	r0, r4
 8012948:	f000 f820 	bl	801298c <__sfp>
 801294c:	6060      	str	r0, [r4, #4]
 801294e:	4620      	mov	r0, r4
 8012950:	f000 f81c 	bl	801298c <__sfp>
 8012954:	60a0      	str	r0, [r4, #8]
 8012956:	4620      	mov	r0, r4
 8012958:	f000 f818 	bl	801298c <__sfp>
 801295c:	2200      	movs	r2, #0
 801295e:	60e0      	str	r0, [r4, #12]
 8012960:	2104      	movs	r1, #4
 8012962:	6860      	ldr	r0, [r4, #4]
 8012964:	f7ff ff82 	bl	801286c <std>
 8012968:	68a0      	ldr	r0, [r4, #8]
 801296a:	2201      	movs	r2, #1
 801296c:	2109      	movs	r1, #9
 801296e:	f7ff ff7d 	bl	801286c <std>
 8012972:	68e0      	ldr	r0, [r4, #12]
 8012974:	2202      	movs	r2, #2
 8012976:	2112      	movs	r1, #18
 8012978:	f7ff ff78 	bl	801286c <std>
 801297c:	2301      	movs	r3, #1
 801297e:	61a3      	str	r3, [r4, #24]
 8012980:	e7d2      	b.n	8012928 <__sinit+0xc>
 8012982:	bf00      	nop
 8012984:	080266b8 	.word	0x080266b8
 8012988:	080128b5 	.word	0x080128b5

0801298c <__sfp>:
 801298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801298e:	4607      	mov	r7, r0
 8012990:	f7ff ffac 	bl	80128ec <__sfp_lock_acquire>
 8012994:	4b1e      	ldr	r3, [pc, #120]	; (8012a10 <__sfp+0x84>)
 8012996:	681e      	ldr	r6, [r3, #0]
 8012998:	69b3      	ldr	r3, [r6, #24]
 801299a:	b913      	cbnz	r3, 80129a2 <__sfp+0x16>
 801299c:	4630      	mov	r0, r6
 801299e:	f7ff ffbd 	bl	801291c <__sinit>
 80129a2:	3648      	adds	r6, #72	; 0x48
 80129a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80129a8:	3b01      	subs	r3, #1
 80129aa:	d503      	bpl.n	80129b4 <__sfp+0x28>
 80129ac:	6833      	ldr	r3, [r6, #0]
 80129ae:	b30b      	cbz	r3, 80129f4 <__sfp+0x68>
 80129b0:	6836      	ldr	r6, [r6, #0]
 80129b2:	e7f7      	b.n	80129a4 <__sfp+0x18>
 80129b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80129b8:	b9d5      	cbnz	r5, 80129f0 <__sfp+0x64>
 80129ba:	4b16      	ldr	r3, [pc, #88]	; (8012a14 <__sfp+0x88>)
 80129bc:	60e3      	str	r3, [r4, #12]
 80129be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80129c2:	6665      	str	r5, [r4, #100]	; 0x64
 80129c4:	f000 f847 	bl	8012a56 <__retarget_lock_init_recursive>
 80129c8:	f7ff ff96 	bl	80128f8 <__sfp_lock_release>
 80129cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80129d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80129d4:	6025      	str	r5, [r4, #0]
 80129d6:	61a5      	str	r5, [r4, #24]
 80129d8:	2208      	movs	r2, #8
 80129da:	4629      	mov	r1, r5
 80129dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80129e0:	f7fb fd46 	bl	800e470 <memset>
 80129e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80129e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80129ec:	4620      	mov	r0, r4
 80129ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129f0:	3468      	adds	r4, #104	; 0x68
 80129f2:	e7d9      	b.n	80129a8 <__sfp+0x1c>
 80129f4:	2104      	movs	r1, #4
 80129f6:	4638      	mov	r0, r7
 80129f8:	f7ff ff62 	bl	80128c0 <__sfmoreglue>
 80129fc:	4604      	mov	r4, r0
 80129fe:	6030      	str	r0, [r6, #0]
 8012a00:	2800      	cmp	r0, #0
 8012a02:	d1d5      	bne.n	80129b0 <__sfp+0x24>
 8012a04:	f7ff ff78 	bl	80128f8 <__sfp_lock_release>
 8012a08:	230c      	movs	r3, #12
 8012a0a:	603b      	str	r3, [r7, #0]
 8012a0c:	e7ee      	b.n	80129ec <__sfp+0x60>
 8012a0e:	bf00      	nop
 8012a10:	080266b8 	.word	0x080266b8
 8012a14:	ffff0001 	.word	0xffff0001

08012a18 <_fwalk_reent>:
 8012a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a1c:	4606      	mov	r6, r0
 8012a1e:	4688      	mov	r8, r1
 8012a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012a24:	2700      	movs	r7, #0
 8012a26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012a2a:	f1b9 0901 	subs.w	r9, r9, #1
 8012a2e:	d505      	bpl.n	8012a3c <_fwalk_reent+0x24>
 8012a30:	6824      	ldr	r4, [r4, #0]
 8012a32:	2c00      	cmp	r4, #0
 8012a34:	d1f7      	bne.n	8012a26 <_fwalk_reent+0xe>
 8012a36:	4638      	mov	r0, r7
 8012a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a3c:	89ab      	ldrh	r3, [r5, #12]
 8012a3e:	2b01      	cmp	r3, #1
 8012a40:	d907      	bls.n	8012a52 <_fwalk_reent+0x3a>
 8012a42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a46:	3301      	adds	r3, #1
 8012a48:	d003      	beq.n	8012a52 <_fwalk_reent+0x3a>
 8012a4a:	4629      	mov	r1, r5
 8012a4c:	4630      	mov	r0, r6
 8012a4e:	47c0      	blx	r8
 8012a50:	4307      	orrs	r7, r0
 8012a52:	3568      	adds	r5, #104	; 0x68
 8012a54:	e7e9      	b.n	8012a2a <_fwalk_reent+0x12>

08012a56 <__retarget_lock_init_recursive>:
 8012a56:	4770      	bx	lr

08012a58 <__retarget_lock_acquire_recursive>:
 8012a58:	4770      	bx	lr

08012a5a <__retarget_lock_release_recursive>:
 8012a5a:	4770      	bx	lr

08012a5c <__swhatbuf_r>:
 8012a5c:	b570      	push	{r4, r5, r6, lr}
 8012a5e:	460e      	mov	r6, r1
 8012a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a64:	2900      	cmp	r1, #0
 8012a66:	b096      	sub	sp, #88	; 0x58
 8012a68:	4614      	mov	r4, r2
 8012a6a:	461d      	mov	r5, r3
 8012a6c:	da07      	bge.n	8012a7e <__swhatbuf_r+0x22>
 8012a6e:	2300      	movs	r3, #0
 8012a70:	602b      	str	r3, [r5, #0]
 8012a72:	89b3      	ldrh	r3, [r6, #12]
 8012a74:	061a      	lsls	r2, r3, #24
 8012a76:	d410      	bmi.n	8012a9a <__swhatbuf_r+0x3e>
 8012a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a7c:	e00e      	b.n	8012a9c <__swhatbuf_r+0x40>
 8012a7e:	466a      	mov	r2, sp
 8012a80:	f000 f946 	bl	8012d10 <_fstat_r>
 8012a84:	2800      	cmp	r0, #0
 8012a86:	dbf2      	blt.n	8012a6e <__swhatbuf_r+0x12>
 8012a88:	9a01      	ldr	r2, [sp, #4]
 8012a8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012a8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012a92:	425a      	negs	r2, r3
 8012a94:	415a      	adcs	r2, r3
 8012a96:	602a      	str	r2, [r5, #0]
 8012a98:	e7ee      	b.n	8012a78 <__swhatbuf_r+0x1c>
 8012a9a:	2340      	movs	r3, #64	; 0x40
 8012a9c:	2000      	movs	r0, #0
 8012a9e:	6023      	str	r3, [r4, #0]
 8012aa0:	b016      	add	sp, #88	; 0x58
 8012aa2:	bd70      	pop	{r4, r5, r6, pc}

08012aa4 <__smakebuf_r>:
 8012aa4:	898b      	ldrh	r3, [r1, #12]
 8012aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012aa8:	079d      	lsls	r5, r3, #30
 8012aaa:	4606      	mov	r6, r0
 8012aac:	460c      	mov	r4, r1
 8012aae:	d507      	bpl.n	8012ac0 <__smakebuf_r+0x1c>
 8012ab0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012ab4:	6023      	str	r3, [r4, #0]
 8012ab6:	6123      	str	r3, [r4, #16]
 8012ab8:	2301      	movs	r3, #1
 8012aba:	6163      	str	r3, [r4, #20]
 8012abc:	b002      	add	sp, #8
 8012abe:	bd70      	pop	{r4, r5, r6, pc}
 8012ac0:	ab01      	add	r3, sp, #4
 8012ac2:	466a      	mov	r2, sp
 8012ac4:	f7ff ffca 	bl	8012a5c <__swhatbuf_r>
 8012ac8:	9900      	ldr	r1, [sp, #0]
 8012aca:	4605      	mov	r5, r0
 8012acc:	4630      	mov	r0, r6
 8012ace:	f7ff f9fb 	bl	8011ec8 <_malloc_r>
 8012ad2:	b948      	cbnz	r0, 8012ae8 <__smakebuf_r+0x44>
 8012ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ad8:	059a      	lsls	r2, r3, #22
 8012ada:	d4ef      	bmi.n	8012abc <__smakebuf_r+0x18>
 8012adc:	f023 0303 	bic.w	r3, r3, #3
 8012ae0:	f043 0302 	orr.w	r3, r3, #2
 8012ae4:	81a3      	strh	r3, [r4, #12]
 8012ae6:	e7e3      	b.n	8012ab0 <__smakebuf_r+0xc>
 8012ae8:	4b0d      	ldr	r3, [pc, #52]	; (8012b20 <__smakebuf_r+0x7c>)
 8012aea:	62b3      	str	r3, [r6, #40]	; 0x28
 8012aec:	89a3      	ldrh	r3, [r4, #12]
 8012aee:	6020      	str	r0, [r4, #0]
 8012af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012af4:	81a3      	strh	r3, [r4, #12]
 8012af6:	9b00      	ldr	r3, [sp, #0]
 8012af8:	6163      	str	r3, [r4, #20]
 8012afa:	9b01      	ldr	r3, [sp, #4]
 8012afc:	6120      	str	r0, [r4, #16]
 8012afe:	b15b      	cbz	r3, 8012b18 <__smakebuf_r+0x74>
 8012b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b04:	4630      	mov	r0, r6
 8012b06:	f000 f915 	bl	8012d34 <_isatty_r>
 8012b0a:	b128      	cbz	r0, 8012b18 <__smakebuf_r+0x74>
 8012b0c:	89a3      	ldrh	r3, [r4, #12]
 8012b0e:	f023 0303 	bic.w	r3, r3, #3
 8012b12:	f043 0301 	orr.w	r3, r3, #1
 8012b16:	81a3      	strh	r3, [r4, #12]
 8012b18:	89a0      	ldrh	r0, [r4, #12]
 8012b1a:	4305      	orrs	r5, r0
 8012b1c:	81a5      	strh	r5, [r4, #12]
 8012b1e:	e7cd      	b.n	8012abc <__smakebuf_r+0x18>
 8012b20:	080128b5 	.word	0x080128b5

08012b24 <memmove>:
 8012b24:	4288      	cmp	r0, r1
 8012b26:	b510      	push	{r4, lr}
 8012b28:	eb01 0402 	add.w	r4, r1, r2
 8012b2c:	d902      	bls.n	8012b34 <memmove+0x10>
 8012b2e:	4284      	cmp	r4, r0
 8012b30:	4623      	mov	r3, r4
 8012b32:	d807      	bhi.n	8012b44 <memmove+0x20>
 8012b34:	1e43      	subs	r3, r0, #1
 8012b36:	42a1      	cmp	r1, r4
 8012b38:	d008      	beq.n	8012b4c <memmove+0x28>
 8012b3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b42:	e7f8      	b.n	8012b36 <memmove+0x12>
 8012b44:	4402      	add	r2, r0
 8012b46:	4601      	mov	r1, r0
 8012b48:	428a      	cmp	r2, r1
 8012b4a:	d100      	bne.n	8012b4e <memmove+0x2a>
 8012b4c:	bd10      	pop	{r4, pc}
 8012b4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b56:	e7f7      	b.n	8012b48 <memmove+0x24>

08012b58 <__malloc_lock>:
 8012b58:	4801      	ldr	r0, [pc, #4]	; (8012b60 <__malloc_lock+0x8>)
 8012b5a:	f7ff bf7d 	b.w	8012a58 <__retarget_lock_acquire_recursive>
 8012b5e:	bf00      	nop
 8012b60:	200008d0 	.word	0x200008d0

08012b64 <__malloc_unlock>:
 8012b64:	4801      	ldr	r0, [pc, #4]	; (8012b6c <__malloc_unlock+0x8>)
 8012b66:	f7ff bf78 	b.w	8012a5a <__retarget_lock_release_recursive>
 8012b6a:	bf00      	nop
 8012b6c:	200008d0 	.word	0x200008d0

08012b70 <_realloc_r>:
 8012b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b72:	4607      	mov	r7, r0
 8012b74:	4614      	mov	r4, r2
 8012b76:	460e      	mov	r6, r1
 8012b78:	b921      	cbnz	r1, 8012b84 <_realloc_r+0x14>
 8012b7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012b7e:	4611      	mov	r1, r2
 8012b80:	f7ff b9a2 	b.w	8011ec8 <_malloc_r>
 8012b84:	b922      	cbnz	r2, 8012b90 <_realloc_r+0x20>
 8012b86:	f7ff f94f 	bl	8011e28 <_free_r>
 8012b8a:	4625      	mov	r5, r4
 8012b8c:	4628      	mov	r0, r5
 8012b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b90:	f000 f8f2 	bl	8012d78 <_malloc_usable_size_r>
 8012b94:	42a0      	cmp	r0, r4
 8012b96:	d20f      	bcs.n	8012bb8 <_realloc_r+0x48>
 8012b98:	4621      	mov	r1, r4
 8012b9a:	4638      	mov	r0, r7
 8012b9c:	f7ff f994 	bl	8011ec8 <_malloc_r>
 8012ba0:	4605      	mov	r5, r0
 8012ba2:	2800      	cmp	r0, #0
 8012ba4:	d0f2      	beq.n	8012b8c <_realloc_r+0x1c>
 8012ba6:	4631      	mov	r1, r6
 8012ba8:	4622      	mov	r2, r4
 8012baa:	f7fe fc65 	bl	8011478 <memcpy>
 8012bae:	4631      	mov	r1, r6
 8012bb0:	4638      	mov	r0, r7
 8012bb2:	f7ff f939 	bl	8011e28 <_free_r>
 8012bb6:	e7e9      	b.n	8012b8c <_realloc_r+0x1c>
 8012bb8:	4635      	mov	r5, r6
 8012bba:	e7e7      	b.n	8012b8c <_realloc_r+0x1c>

08012bbc <_raise_r>:
 8012bbc:	291f      	cmp	r1, #31
 8012bbe:	b538      	push	{r3, r4, r5, lr}
 8012bc0:	4604      	mov	r4, r0
 8012bc2:	460d      	mov	r5, r1
 8012bc4:	d904      	bls.n	8012bd0 <_raise_r+0x14>
 8012bc6:	2316      	movs	r3, #22
 8012bc8:	6003      	str	r3, [r0, #0]
 8012bca:	f04f 30ff 	mov.w	r0, #4294967295
 8012bce:	bd38      	pop	{r3, r4, r5, pc}
 8012bd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012bd2:	b112      	cbz	r2, 8012bda <_raise_r+0x1e>
 8012bd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012bd8:	b94b      	cbnz	r3, 8012bee <_raise_r+0x32>
 8012bda:	4620      	mov	r0, r4
 8012bdc:	f000 f830 	bl	8012c40 <_getpid_r>
 8012be0:	462a      	mov	r2, r5
 8012be2:	4601      	mov	r1, r0
 8012be4:	4620      	mov	r0, r4
 8012be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bea:	f000 b817 	b.w	8012c1c <_kill_r>
 8012bee:	2b01      	cmp	r3, #1
 8012bf0:	d00a      	beq.n	8012c08 <_raise_r+0x4c>
 8012bf2:	1c59      	adds	r1, r3, #1
 8012bf4:	d103      	bne.n	8012bfe <_raise_r+0x42>
 8012bf6:	2316      	movs	r3, #22
 8012bf8:	6003      	str	r3, [r0, #0]
 8012bfa:	2001      	movs	r0, #1
 8012bfc:	e7e7      	b.n	8012bce <_raise_r+0x12>
 8012bfe:	2400      	movs	r4, #0
 8012c00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012c04:	4628      	mov	r0, r5
 8012c06:	4798      	blx	r3
 8012c08:	2000      	movs	r0, #0
 8012c0a:	e7e0      	b.n	8012bce <_raise_r+0x12>

08012c0c <raise>:
 8012c0c:	4b02      	ldr	r3, [pc, #8]	; (8012c18 <raise+0xc>)
 8012c0e:	4601      	mov	r1, r0
 8012c10:	6818      	ldr	r0, [r3, #0]
 8012c12:	f7ff bfd3 	b.w	8012bbc <_raise_r>
 8012c16:	bf00      	nop
 8012c18:	20000040 	.word	0x20000040

08012c1c <_kill_r>:
 8012c1c:	b538      	push	{r3, r4, r5, lr}
 8012c1e:	4d07      	ldr	r5, [pc, #28]	; (8012c3c <_kill_r+0x20>)
 8012c20:	2300      	movs	r3, #0
 8012c22:	4604      	mov	r4, r0
 8012c24:	4608      	mov	r0, r1
 8012c26:	4611      	mov	r1, r2
 8012c28:	602b      	str	r3, [r5, #0]
 8012c2a:	f7f4 fa79 	bl	8007120 <_kill>
 8012c2e:	1c43      	adds	r3, r0, #1
 8012c30:	d102      	bne.n	8012c38 <_kill_r+0x1c>
 8012c32:	682b      	ldr	r3, [r5, #0]
 8012c34:	b103      	cbz	r3, 8012c38 <_kill_r+0x1c>
 8012c36:	6023      	str	r3, [r4, #0]
 8012c38:	bd38      	pop	{r3, r4, r5, pc}
 8012c3a:	bf00      	nop
 8012c3c:	200008d8 	.word	0x200008d8

08012c40 <_getpid_r>:
 8012c40:	f7f4 ba66 	b.w	8007110 <_getpid>

08012c44 <__sread>:
 8012c44:	b510      	push	{r4, lr}
 8012c46:	460c      	mov	r4, r1
 8012c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c4c:	f000 f89c 	bl	8012d88 <_read_r>
 8012c50:	2800      	cmp	r0, #0
 8012c52:	bfab      	itete	ge
 8012c54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012c56:	89a3      	ldrhlt	r3, [r4, #12]
 8012c58:	181b      	addge	r3, r3, r0
 8012c5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012c5e:	bfac      	ite	ge
 8012c60:	6563      	strge	r3, [r4, #84]	; 0x54
 8012c62:	81a3      	strhlt	r3, [r4, #12]
 8012c64:	bd10      	pop	{r4, pc}

08012c66 <__swrite>:
 8012c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c6a:	461f      	mov	r7, r3
 8012c6c:	898b      	ldrh	r3, [r1, #12]
 8012c6e:	05db      	lsls	r3, r3, #23
 8012c70:	4605      	mov	r5, r0
 8012c72:	460c      	mov	r4, r1
 8012c74:	4616      	mov	r6, r2
 8012c76:	d505      	bpl.n	8012c84 <__swrite+0x1e>
 8012c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c7c:	2302      	movs	r3, #2
 8012c7e:	2200      	movs	r2, #0
 8012c80:	f000 f868 	bl	8012d54 <_lseek_r>
 8012c84:	89a3      	ldrh	r3, [r4, #12]
 8012c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c8e:	81a3      	strh	r3, [r4, #12]
 8012c90:	4632      	mov	r2, r6
 8012c92:	463b      	mov	r3, r7
 8012c94:	4628      	mov	r0, r5
 8012c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c9a:	f000 b817 	b.w	8012ccc <_write_r>

08012c9e <__sseek>:
 8012c9e:	b510      	push	{r4, lr}
 8012ca0:	460c      	mov	r4, r1
 8012ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ca6:	f000 f855 	bl	8012d54 <_lseek_r>
 8012caa:	1c43      	adds	r3, r0, #1
 8012cac:	89a3      	ldrh	r3, [r4, #12]
 8012cae:	bf15      	itete	ne
 8012cb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8012cb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012cb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012cba:	81a3      	strheq	r3, [r4, #12]
 8012cbc:	bf18      	it	ne
 8012cbe:	81a3      	strhne	r3, [r4, #12]
 8012cc0:	bd10      	pop	{r4, pc}

08012cc2 <__sclose>:
 8012cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cc6:	f000 b813 	b.w	8012cf0 <_close_r>
	...

08012ccc <_write_r>:
 8012ccc:	b538      	push	{r3, r4, r5, lr}
 8012cce:	4d07      	ldr	r5, [pc, #28]	; (8012cec <_write_r+0x20>)
 8012cd0:	4604      	mov	r4, r0
 8012cd2:	4608      	mov	r0, r1
 8012cd4:	4611      	mov	r1, r2
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	602a      	str	r2, [r5, #0]
 8012cda:	461a      	mov	r2, r3
 8012cdc:	f7f4 fa57 	bl	800718e <_write>
 8012ce0:	1c43      	adds	r3, r0, #1
 8012ce2:	d102      	bne.n	8012cea <_write_r+0x1e>
 8012ce4:	682b      	ldr	r3, [r5, #0]
 8012ce6:	b103      	cbz	r3, 8012cea <_write_r+0x1e>
 8012ce8:	6023      	str	r3, [r4, #0]
 8012cea:	bd38      	pop	{r3, r4, r5, pc}
 8012cec:	200008d8 	.word	0x200008d8

08012cf0 <_close_r>:
 8012cf0:	b538      	push	{r3, r4, r5, lr}
 8012cf2:	4d06      	ldr	r5, [pc, #24]	; (8012d0c <_close_r+0x1c>)
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	4604      	mov	r4, r0
 8012cf8:	4608      	mov	r0, r1
 8012cfa:	602b      	str	r3, [r5, #0]
 8012cfc:	f7f4 fa63 	bl	80071c6 <_close>
 8012d00:	1c43      	adds	r3, r0, #1
 8012d02:	d102      	bne.n	8012d0a <_close_r+0x1a>
 8012d04:	682b      	ldr	r3, [r5, #0]
 8012d06:	b103      	cbz	r3, 8012d0a <_close_r+0x1a>
 8012d08:	6023      	str	r3, [r4, #0]
 8012d0a:	bd38      	pop	{r3, r4, r5, pc}
 8012d0c:	200008d8 	.word	0x200008d8

08012d10 <_fstat_r>:
 8012d10:	b538      	push	{r3, r4, r5, lr}
 8012d12:	4d07      	ldr	r5, [pc, #28]	; (8012d30 <_fstat_r+0x20>)
 8012d14:	2300      	movs	r3, #0
 8012d16:	4604      	mov	r4, r0
 8012d18:	4608      	mov	r0, r1
 8012d1a:	4611      	mov	r1, r2
 8012d1c:	602b      	str	r3, [r5, #0]
 8012d1e:	f7f4 fa5e 	bl	80071de <_fstat>
 8012d22:	1c43      	adds	r3, r0, #1
 8012d24:	d102      	bne.n	8012d2c <_fstat_r+0x1c>
 8012d26:	682b      	ldr	r3, [r5, #0]
 8012d28:	b103      	cbz	r3, 8012d2c <_fstat_r+0x1c>
 8012d2a:	6023      	str	r3, [r4, #0]
 8012d2c:	bd38      	pop	{r3, r4, r5, pc}
 8012d2e:	bf00      	nop
 8012d30:	200008d8 	.word	0x200008d8

08012d34 <_isatty_r>:
 8012d34:	b538      	push	{r3, r4, r5, lr}
 8012d36:	4d06      	ldr	r5, [pc, #24]	; (8012d50 <_isatty_r+0x1c>)
 8012d38:	2300      	movs	r3, #0
 8012d3a:	4604      	mov	r4, r0
 8012d3c:	4608      	mov	r0, r1
 8012d3e:	602b      	str	r3, [r5, #0]
 8012d40:	f7f4 fa5d 	bl	80071fe <_isatty>
 8012d44:	1c43      	adds	r3, r0, #1
 8012d46:	d102      	bne.n	8012d4e <_isatty_r+0x1a>
 8012d48:	682b      	ldr	r3, [r5, #0]
 8012d4a:	b103      	cbz	r3, 8012d4e <_isatty_r+0x1a>
 8012d4c:	6023      	str	r3, [r4, #0]
 8012d4e:	bd38      	pop	{r3, r4, r5, pc}
 8012d50:	200008d8 	.word	0x200008d8

08012d54 <_lseek_r>:
 8012d54:	b538      	push	{r3, r4, r5, lr}
 8012d56:	4d07      	ldr	r5, [pc, #28]	; (8012d74 <_lseek_r+0x20>)
 8012d58:	4604      	mov	r4, r0
 8012d5a:	4608      	mov	r0, r1
 8012d5c:	4611      	mov	r1, r2
 8012d5e:	2200      	movs	r2, #0
 8012d60:	602a      	str	r2, [r5, #0]
 8012d62:	461a      	mov	r2, r3
 8012d64:	f7f4 fa56 	bl	8007214 <_lseek>
 8012d68:	1c43      	adds	r3, r0, #1
 8012d6a:	d102      	bne.n	8012d72 <_lseek_r+0x1e>
 8012d6c:	682b      	ldr	r3, [r5, #0]
 8012d6e:	b103      	cbz	r3, 8012d72 <_lseek_r+0x1e>
 8012d70:	6023      	str	r3, [r4, #0]
 8012d72:	bd38      	pop	{r3, r4, r5, pc}
 8012d74:	200008d8 	.word	0x200008d8

08012d78 <_malloc_usable_size_r>:
 8012d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d7c:	1f18      	subs	r0, r3, #4
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	bfbc      	itt	lt
 8012d82:	580b      	ldrlt	r3, [r1, r0]
 8012d84:	18c0      	addlt	r0, r0, r3
 8012d86:	4770      	bx	lr

08012d88 <_read_r>:
 8012d88:	b538      	push	{r3, r4, r5, lr}
 8012d8a:	4d07      	ldr	r5, [pc, #28]	; (8012da8 <_read_r+0x20>)
 8012d8c:	4604      	mov	r4, r0
 8012d8e:	4608      	mov	r0, r1
 8012d90:	4611      	mov	r1, r2
 8012d92:	2200      	movs	r2, #0
 8012d94:	602a      	str	r2, [r5, #0]
 8012d96:	461a      	mov	r2, r3
 8012d98:	f7f4 f9dc 	bl	8007154 <_read>
 8012d9c:	1c43      	adds	r3, r0, #1
 8012d9e:	d102      	bne.n	8012da6 <_read_r+0x1e>
 8012da0:	682b      	ldr	r3, [r5, #0]
 8012da2:	b103      	cbz	r3, 8012da6 <_read_r+0x1e>
 8012da4:	6023      	str	r3, [r4, #0]
 8012da6:	bd38      	pop	{r3, r4, r5, pc}
 8012da8:	200008d8 	.word	0x200008d8

08012dac <_init>:
 8012dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dae:	bf00      	nop
 8012db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012db2:	bc08      	pop	{r3}
 8012db4:	469e      	mov	lr, r3
 8012db6:	4770      	bx	lr

08012db8 <_fini>:
 8012db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dba:	bf00      	nop
 8012dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dbe:	bc08      	pop	{r3}
 8012dc0:	469e      	mov	lr, r3
 8012dc2:	4770      	bx	lr
