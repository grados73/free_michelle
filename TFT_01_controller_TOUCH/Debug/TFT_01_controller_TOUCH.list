
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013b58  08010b98  08010b98  00020b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080246f0  080246f0  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  080246f0  080246f0  000346f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080246f8  080246f8  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080246f8  080246f8  000346f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080246fc  080246fc  000346fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08024700  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000214  08024914  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  08024914  000407a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002145b  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000485e  00000000  00000000  0006169f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  00065f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00006f2a  00000000  00000000  000676d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023535  00000000  00000000  0006e5fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00096e3f  00000000  00000000  00091b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0012896e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001638  00000000  00000000  001289c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007710  00000000  00000000  0012a000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010b7c 	.word	0x08010b7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	08010b7c 	.word	0x08010b7c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000280 	.word	0x20000280

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	20000280 	.word	0x20000280

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	20000280 	.word	0x20000280

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	20000280 	.word	0x20000280

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	20000280 	.word	0x20000280

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000280 	.word	0x20000280

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f004 fa70 	bl	8006114 <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	20000284 	.word	0x20000284

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f005 f9a1 	bl	8006ff4 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f005 f99b 	bl	8006ff4 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f005 f990 	bl	8006ff4 <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f005 f97d 	bl	8006ff4 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f005 f977 	bl	8006ff4 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f005 f96b 	bl	8006ff4 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f005 f961 	bl	8006ff4 <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f005 f866 	bl	8006ff4 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f005 f860 	bl	8006ff4 <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f005 f829 	bl	8006ff4 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	20000284 	.word	0x20000284

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f005 f809 	bl	8006ff4 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f005 f800 	bl	8006ff4 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000284 	.word	0x20000284
 8002054:	08013acc 	.word	0x08013acc
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f004 ffc3 	bl	8006ff4 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f008 f93c 	bl	800a2fa <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f004 ffb3 	bl	8006ff4 <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000288 	.word	0x20000288
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002b1 	.word	0x200002b1

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f003 ff10 	bl	80060fc <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f004 fe47 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f003 fedb 	bl	80060fc <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f003 fed5 	bl	80060fc <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f004 fe09 	bl	8006fc4 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f003 fe9d 	bl	80060fc <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 f84a 	bl	8006480 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 f835 	bl	8006462 <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f004 f804 	bl	8006412 <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002b1 	.word	0x200002b1
 8002420:	200002b4 	.word	0x200002b4
 8002424:	200002b0 	.word	0x200002b0
 8002428:	20000288 	.word	0x20000288
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f003 fff4 	bl	800642e <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002b1 	.word	0x200002b1

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f004 fdbb 	bl	8006ff4 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f003 fe3d 	bl	8006114 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002b1 	.word	0x200002b1
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_DMA_Init+0x6c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <MX_DMA_Init+0x6c>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_DMA_Init+0x6c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	200b      	movs	r0, #11
 800251c:	f003 ff5d 	bl	80063da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002520:	200b      	movs	r0, #11
 8002522:	f003 ff76 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	200c      	movs	r0, #12
 800252c:	f003 ff55 	bl	80063da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002530:	200c      	movs	r0, #12
 8002532:	f003 ff6e 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2010      	movs	r0, #16
 800253c:	f003 ff4d 	bl	80063da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002540:	2010      	movs	r0, #16
 8002542:	f003 ff66 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2011      	movs	r0, #17
 800254c:	f003 ff45 	bl	80063da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002550:	2011      	movs	r0, #17
 8002552:	f003 ff5e 	bl	8006412 <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <DS3231_Init+0x30>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f8ca 	bl	800270c <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 f88e 	bl	800269a <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800257e:	f000 f8e7 	bl	8002750 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002582:	f000 f8ad 	bl	80026e0 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f846 	bl	8002618 <DS3231_SetInterruptMode>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200002b8 	.word	0x200002b8

08002598 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	733b      	strb	r3, [r7, #12]
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <DS3231_SetRegByte+0x38>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2302      	movs	r3, #2
 80025c0:	21d0      	movs	r1, #208	; 0xd0
 80025c2:	f004 fea7 	bl	8007314 <HAL_I2C_Master_Transmit>
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002b8 	.word	0x200002b8

080025d4 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2301      	movs	r3, #1
 80025ec:	21d0      	movs	r1, #208	; 0xd0
 80025ee:	f004 fe91 	bl	8007314 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	f107 020f 	add.w	r2, r7, #15
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	21d0      	movs	r1, #208	; 0xd0
 8002604:	f004 ff84 	bl	8007510 <HAL_I2C_Master_Receive>
	return val;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200002b8 	.word	0x200002b8

08002618 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002622:	200e      	movs	r0, #14
 8002624:	f7ff ffd6 	bl	80025d4 <DS3231_GetRegByte>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	b25a      	sxtb	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b25b      	sxtb	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	200e      	movs	r0, #14
 800264c:	f7ff ffa4 	bl	8002598 <DS3231_SetRegByte>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002662:	200e      	movs	r0, #14
 8002664:	f7ff ffb6 	bl	80025d4 <DS3231_GetRegByte>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	b25b      	sxtb	r3, r3
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d102      	bne.n	8002682 <DS3231_EnableOscillator+0x2a>
 800267c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002680:	e000      	b.n	8002684 <DS3231_EnableOscillator+0x2c>
 8002682:	2200      	movs	r2, #0
 8002684:	4313      	orrs	r3, r2
 8002686:	b25b      	sxtb	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	200e      	movs	r0, #14
 800268e:	f7ff ff83 	bl	8002598 <DS3231_SetRegByte>
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80026a4:	200e      	movs	r0, #14
 80026a6:	f7ff ff95 	bl	80025d4 <DS3231_GetRegByte>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	200e      	movs	r0, #14
 80026ce:	f7ff ff63 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff ffa0 	bl	8002618 <DS3231_SetInterruptMode>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80026e6:	200f      	movs	r0, #15
 80026e8:	f7ff ff74 	bl	80025d4 <DS3231_GetRegByte>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	200f      	movs	r0, #15
 8002700:	f7ff ff4a 	bl	8002598 <DS3231_SetRegByte>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002716:	200e      	movs	r0, #14
 8002718:	f7ff ff5c 	bl	80025d4 <DS3231_GetRegByte>
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	b25a      	sxtb	r2, r3
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b25b      	sxtb	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b25b      	sxtb	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4619      	mov	r1, r3
 800273c:	200e      	movs	r0, #14
 800273e:	f7ff ff2b 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff ff68 	bl	8002618 <DS3231_SetInterruptMode>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002756:	200f      	movs	r0, #15
 8002758:	f7ff ff3c 	bl	80025d4 <DS3231_GetRegByte>
 800275c:	4603      	mov	r3, r0
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	200f      	movs	r0, #15
 8002770:	f7ff ff12 	bl	8002598 <DS3231_SetRegByte>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002780:	2002      	movs	r0, #2
 8002782:	f7ff ff27 	bl	80025d4 <DS3231_GetRegByte>
 8002786:	4603      	mov	r3, r0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f848 	bl	800281e <DS3231_DecodeBCD>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002798:	2001      	movs	r0, #1
 800279a:	f7ff ff1b 	bl	80025d4 <DS3231_GetRegByte>
 800279e:	4603      	mov	r3, r0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f83c 	bl	800281e <DS3231_DecodeBCD>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f846 	bl	8002850 <DS3231_EncodeBCD>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4619      	mov	r1, r3
 80027c8:	2002      	movs	r0, #2
 80027ca:	f7ff fee5 	bl	8002598 <DS3231_SetRegByte>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f834 	bl	8002850 <DS3231_EncodeBCD>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4619      	mov	r1, r3
 80027ec:	2001      	movs	r0, #1
 80027ee:	f7ff fed3 	bl	8002598 <DS3231_SetRegByte>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f822 	bl	8002850 <DS3231_EncodeBCD>
 800280c:	4603      	mov	r3, r0
 800280e:	4619      	mov	r1, r3
 8002810:	2000      	movs	r0, #0
 8002812:	f7ff fec1 	bl	8002598 <DS3231_SetRegByte>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	b2db      	uxtb	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	0092      	lsls	r2, r2, #2
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	b2da      	uxtb	r2, r3
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4413      	add	r3, r2
 8002842:	b2db      	uxtb	r3, r3
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 800285a:	79fa      	ldrb	r2, [r7, #7]
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <DS3231_EncodeBCD+0x40>)
 800285e:	fba3 1302 	umull	r1, r3, r3, r2
 8002862:	08d9      	lsrs	r1, r3, #3
 8002864:	460b      	mov	r3, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	b2da      	uxtb	r2, r3
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	4907      	ldr	r1, [pc, #28]	; (8002890 <DS3231_EncodeBCD+0x40>)
 8002874:	fba1 1303 	umull	r1, r3, r1, r3
 8002878:	08db      	lsrs	r3, r3, #3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4413      	add	r3, r2
 8002882:	b2db      	uxtb	r3, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	cccccccd 	.word	0xcccccccd

08002894 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800289a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800289e:	f7ff fb2b 	bl	8001ef8 <ILI9341_ClearDisplay>
	  ILI9341_DrawImage(40, 50, logo, 240, 140);
 80028a2:	238c      	movs	r3, #140	; 0x8c
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	23f0      	movs	r3, #240	; 0xf0
 80028a8:	4a6d      	ldr	r2, [pc, #436]	; (8002a60 <system_init+0x1cc>)
 80028aa:	2132      	movs	r1, #50	; 0x32
 80028ac:	2028      	movs	r0, #40	; 0x28
 80028ae:	f7ff faf8 	bl	8001ea2 <ILI9341_DrawImage>
//	  GFX_Image(40, 50, logo, 240, 140); //usunieta wolniejsza wersja rysowania

	  EF_SetFont(&arialBlack_20ptFontInfo);
 80028b2:	486c      	ldr	r0, [pc, #432]	; (8002a64 <system_init+0x1d0>)
 80028b4:	f7fe ff1c 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 80028b8:	496b      	ldr	r1, [pc, #428]	; (8002a68 <system_init+0x1d4>)
 80028ba:	486c      	ldr	r0, [pc, #432]	; (8002a6c <system_init+0x1d8>)
 80028bc:	f00a fb48 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, 60, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 80028c0:	2300      	movs	r3, #0
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	2300      	movs	r3, #0
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	2300      	movs	r3, #0
 80028ca:	2214      	movs	r2, #20
 80028cc:	213c      	movs	r1, #60	; 0x3c
 80028ce:	4867      	ldr	r0, [pc, #412]	; (8002a6c <system_init+0x1d8>)
 80028d0:	f7ff f928 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  GFX_DrawRoundRectangle(60, 200, 20, 20, 5, ILI9341_RED);
 80028d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	2305      	movs	r3, #5
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	2314      	movs	r3, #20
 80028e0:	2214      	movs	r2, #20
 80028e2:	21c8      	movs	r1, #200	; 0xc8
 80028e4:	203c      	movs	r0, #60	; 0x3c
 80028e6:	f7fe fe35 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 200, 20, 20, 5, ILI9341_RED);
 80028ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	2305      	movs	r3, #5
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2314      	movs	r3, #20
 80028f6:	2214      	movs	r2, #20
 80028f8:	21c8      	movs	r1, #200	; 0xc8
 80028fa:	205a      	movs	r0, #90	; 0x5a
 80028fc:	f7fe fe2a 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 200, 20, 20, 5, ILI9341_RED);
 8002900:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	2305      	movs	r3, #5
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2314      	movs	r3, #20
 800290c:	2214      	movs	r2, #20
 800290e:	21c8      	movs	r1, #200	; 0xc8
 8002910:	2078      	movs	r0, #120	; 0x78
 8002912:	f7fe fe1f 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 200, 20, 20, 5, ILI9341_RED);
 8002916:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	2305      	movs	r3, #5
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	2314      	movs	r3, #20
 8002922:	2214      	movs	r2, #20
 8002924:	21c8      	movs	r1, #200	; 0xc8
 8002926:	2096      	movs	r0, #150	; 0x96
 8002928:	f7fe fe14 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 200, 20, 20, 5, ILI9341_RED);
 800292c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	2305      	movs	r3, #5
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2314      	movs	r3, #20
 8002938:	2214      	movs	r2, #20
 800293a:	21c8      	movs	r1, #200	; 0xc8
 800293c:	20b4      	movs	r0, #180	; 0xb4
 800293e:	f7fe fe09 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 200, 20, 20, 5, ILI9341_RED);
 8002942:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	2305      	movs	r3, #5
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2314      	movs	r3, #20
 800294e:	2214      	movs	r2, #20
 8002950:	21c8      	movs	r1, #200	; 0xc8
 8002952:	20d2      	movs	r0, #210	; 0xd2
 8002954:	f7fe fdfe 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 200, 20, 20, 5, ILI9341_RED);
 8002958:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	2305      	movs	r3, #5
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	2314      	movs	r3, #20
 8002964:	2214      	movs	r2, #20
 8002966:	21c8      	movs	r1, #200	; 0xc8
 8002968:	20f0      	movs	r0, #240	; 0xf0
 800296a:	f7fe fdf3 	bl	8001554 <GFX_DrawRoundRectangle>
	  	  HAL_Delay(200);
 800296e:	20c8      	movs	r0, #200	; 0xc8
 8002970:	f003 fbd0 	bl	8006114 <HAL_Delay>

	  GFX_DrawFillRoundRectangle(60, 200, 20, 20, 5, ILI9341_GREEN);
 8002974:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2305      	movs	r3, #5
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2314      	movs	r3, #20
 8002980:	2214      	movs	r2, #20
 8002982:	21c8      	movs	r1, #200	; 0xc8
 8002984:	203c      	movs	r0, #60	; 0x3c
 8002986:	f7fe fe62 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(100);
 800298a:	2064      	movs	r0, #100	; 0x64
 800298c:	f003 fbc2 	bl	8006114 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(90, 200, 20, 20, 5, ILI9341_GREEN);
 8002990:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	2305      	movs	r3, #5
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	2314      	movs	r3, #20
 800299c:	2214      	movs	r2, #20
 800299e:	21c8      	movs	r1, #200	; 0xc8
 80029a0:	205a      	movs	r0, #90	; 0x5a
 80029a2:	f7fe fe54 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_TEMP_1);	// ASK for current temperature
 80029a6:	2003      	movs	r0, #3
 80029a8:	f002 fc16 	bl	80051d8 <SendComand>
	  	  HAL_Delay(100);
 80029ac:	2064      	movs	r0, #100	; 0x64
 80029ae:	f003 fbb1 	bl	8006114 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(120, 200, 20, 20, 5, ILI9341_GREEN);
 80029b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2305      	movs	r3, #5
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2314      	movs	r3, #20
 80029be:	2214      	movs	r2, #20
 80029c0:	21c8      	movs	r1, #200	; 0xc8
 80029c2:	2078      	movs	r0, #120	; 0x78
 80029c4:	f7fe fe43 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 80029c8:	2004      	movs	r0, #4
 80029ca:	f002 fc05 	bl	80051d8 <SendComand>
	  	  HAL_Delay(100);
 80029ce:	2064      	movs	r0, #100	; 0x64
 80029d0:	f003 fba0 	bl	8006114 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(150, 200, 20, 20, 5, ILI9341_GREEN);
 80029d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	2305      	movs	r3, #5
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	2314      	movs	r3, #20
 80029e0:	2214      	movs	r2, #20
 80029e2:	21c8      	movs	r1, #200	; 0xc8
 80029e4:	2096      	movs	r0, #150	; 0x96
 80029e6:	f7fe fe32 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80029ea:	2015      	movs	r0, #21
 80029ec:	f002 fbf4 	bl	80051d8 <SendComand>
	  	  HAL_Delay(100);
 80029f0:	2064      	movs	r0, #100	; 0x64
 80029f2:	f003 fb8f 	bl	8006114 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(180, 200, 20, 20, 5, ILI9341_GREEN);
 80029f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	2305      	movs	r3, #5
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2314      	movs	r3, #20
 8002a02:	2214      	movs	r2, #20
 8002a04:	21c8      	movs	r1, #200	; 0xc8
 8002a06:	20b4      	movs	r0, #180	; 0xb4
 8002a08:	f7fe fe21 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8002a0c:	2016      	movs	r0, #22
 8002a0e:	f002 fbe3 	bl	80051d8 <SendComand>
	  	  HAL_Delay(100);
 8002a12:	2064      	movs	r0, #100	; 0x64
 8002a14:	f003 fb7e 	bl	8006114 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(210, 200, 20, 20, 5, ILI9341_GREEN);
 8002a18:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	2305      	movs	r3, #5
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	2314      	movs	r3, #20
 8002a24:	2214      	movs	r2, #20
 8002a26:	21c8      	movs	r1, #200	; 0xc8
 8002a28:	20d2      	movs	r0, #210	; 0xd2
 8002a2a:	f7fe fe10 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);
 8002a2e:	201b      	movs	r0, #27
 8002a30:	f002 fbd2 	bl	80051d8 <SendComand>
	  	  HAL_Delay(100);
 8002a34:	2064      	movs	r0, #100	; 0x64
 8002a36:	f003 fb6d 	bl	8006114 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(240, 200, 20, 20, 5, ILI9341_GREEN);
 8002a3a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	2305      	movs	r3, #5
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2314      	movs	r3, #20
 8002a46:	2214      	movs	r2, #20
 8002a48:	21c8      	movs	r1, #200	; 0xc8
 8002a4a:	20f0      	movs	r0, #240	; 0xf0
 8002a4c:	f7fe fdff 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(200);
 8002a50:	20c8      	movs	r0, #200	; 0xc8
 8002a52:	f003 fb5f 	bl	8006114 <HAL_Delay>

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	08013b3c 	.word	0x08013b3c
 8002a64:	08013ac0 	.word	0x08013ac0
 8002a68:	08010b98 	.word	0x08010b98
 8002a6c:	200002bc 	.word	0x200002bc

08002a70 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	ed87 0a05 	vstr	s0, [r7, #20]
 8002a7a:	edc7 0a04 	vstr	s1, [r7, #16]
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	460b      	mov	r3, r1
 8002a82:	ed87 1a01 	vstr	s2, [r7, #4]
 8002a86:	72fb      	strb	r3, [r7, #11]
	  SendComand(UCMD_TEMP_1);
 8002a88:	2003      	movs	r0, #3
 8002a8a:	f002 fba5 	bl	80051d8 <SendComand>
	  SendComand(UCMD_PRES_1);
 8002a8e:	2004      	movs	r0, #4
 8002a90:	f002 fba2 	bl	80051d8 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8002a94:	201b      	movs	r0, #27
 8002a96:	f002 fb9f 	bl	80051d8 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8002a9a:	f7ff fe6f 	bl	800277c <DS3231_GetHour>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8002aa2:	f7ff fe77 	bl	8002794 <DS3231_GetMinute>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	77bb      	strb	r3, [r7, #30]

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002aaa:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002aae:	f7ff fa23 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002ab2:	4881      	ldr	r0, [pc, #516]	; (8002cb8 <showCurrentParameters+0x248>)
 8002ab4:	f7fe fe1c 	bl	80016f0 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8002ab8:	4980      	ldr	r1, [pc, #512]	; (8002cbc <showCurrentParameters+0x24c>)
 8002aba:	4881      	ldr	r0, [pc, #516]	; (8002cc0 <showCurrentParameters+0x250>)
 8002abc:	f00a fa48 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002ac0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002ace:	220a      	movs	r2, #10
 8002ad0:	212f      	movs	r1, #47	; 0x2f
 8002ad2:	487b      	ldr	r0, [pc, #492]	; (8002cc0 <showCurrentParameters+0x250>)
 8002ad4:	f7ff f826 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002ad8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2329      	movs	r3, #41	; 0x29
 8002ae0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ae4:	2129      	movs	r1, #41	; 0x29
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7fe fb52 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002aec:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	232b      	movs	r3, #43	; 0x2b
 8002af4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002af8:	212b      	movs	r1, #43	; 0x2b
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7fe fb48 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8002b00:	7ffb      	ldrb	r3, [r7, #31]
 8002b02:	2b09      	cmp	r3, #9
 8002b04:	d809      	bhi.n	8002b1a <showCurrentParameters+0xaa>
 8002b06:	7fbb      	ldrb	r3, [r7, #30]
 8002b08:	2b09      	cmp	r3, #9
 8002b0a:	d806      	bhi.n	8002b1a <showCurrentParameters+0xaa>
 8002b0c:	7ffa      	ldrb	r2, [r7, #31]
 8002b0e:	7fbb      	ldrb	r3, [r7, #30]
 8002b10:	496c      	ldr	r1, [pc, #432]	; (8002cc4 <showCurrentParameters+0x254>)
 8002b12:	486b      	ldr	r0, [pc, #428]	; (8002cc0 <showCurrentParameters+0x250>)
 8002b14:	f00a fa1c 	bl	800cf50 <siprintf>
 8002b18:	e019      	b.n	8002b4e <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 8002b1a:	7ffb      	ldrb	r3, [r7, #31]
 8002b1c:	2b09      	cmp	r3, #9
 8002b1e:	d806      	bhi.n	8002b2e <showCurrentParameters+0xbe>
 8002b20:	7ffa      	ldrb	r2, [r7, #31]
 8002b22:	7fbb      	ldrb	r3, [r7, #30]
 8002b24:	4968      	ldr	r1, [pc, #416]	; (8002cc8 <showCurrentParameters+0x258>)
 8002b26:	4866      	ldr	r0, [pc, #408]	; (8002cc0 <showCurrentParameters+0x250>)
 8002b28:	f00a fa12 	bl	800cf50 <siprintf>
 8002b2c:	e00f      	b.n	8002b4e <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 8002b2e:	7fbb      	ldrb	r3, [r7, #30]
 8002b30:	2b09      	cmp	r3, #9
 8002b32:	d806      	bhi.n	8002b42 <showCurrentParameters+0xd2>
 8002b34:	7ffa      	ldrb	r2, [r7, #31]
 8002b36:	7fbb      	ldrb	r3, [r7, #30]
 8002b38:	4964      	ldr	r1, [pc, #400]	; (8002ccc <showCurrentParameters+0x25c>)
 8002b3a:	4861      	ldr	r0, [pc, #388]	; (8002cc0 <showCurrentParameters+0x250>)
 8002b3c:	f00a fa08 	bl	800cf50 <siprintf>
 8002b40:	e005      	b.n	8002b4e <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 8002b42:	7ffa      	ldrb	r2, [r7, #31]
 8002b44:	7fbb      	ldrb	r3, [r7, #30]
 8002b46:	4962      	ldr	r1, [pc, #392]	; (8002cd0 <showCurrentParameters+0x260>)
 8002b48:	485d      	ldr	r0, [pc, #372]	; (8002cc0 <showCurrentParameters+0x250>)
 8002b4a:	f00a fa01 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002b4e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	2300      	movs	r3, #0
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2232      	movs	r2, #50	; 0x32
 8002b5c:	2114      	movs	r1, #20
 8002b5e:	4858      	ldr	r0, [pc, #352]	; (8002cc0 <showCurrentParameters+0x250>)
 8002b60:	f7fe ffe0 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 8002b64:	4b5b      	ldr	r3, [pc, #364]	; (8002cd4 <showCurrentParameters+0x264>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fd05 	bl	8000578 <__aeabi_f2d>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4959      	ldr	r1, [pc, #356]	; (8002cd8 <showCurrentParameters+0x268>)
 8002b74:	4852      	ldr	r0, [pc, #328]	; (8002cc0 <showCurrentParameters+0x250>)
 8002b76:	f00a f9eb 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002b7a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	2301      	movs	r3, #1
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2300      	movs	r3, #0
 8002b86:	2250      	movs	r2, #80	; 0x50
 8002b88:	2114      	movs	r1, #20
 8002b8a:	484d      	ldr	r0, [pc, #308]	; (8002cc0 <showCurrentParameters+0x250>)
 8002b8c:	f7fe ffca 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8002b90:	4b52      	ldr	r3, [pc, #328]	; (8002cdc <showCurrentParameters+0x26c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fcef 	bl	8000578 <__aeabi_f2d>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4950      	ldr	r1, [pc, #320]	; (8002ce0 <showCurrentParameters+0x270>)
 8002ba0:	4847      	ldr	r0, [pc, #284]	; (8002cc0 <showCurrentParameters+0x250>)
 8002ba2:	f00a f9d5 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002ba6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	2300      	movs	r3, #0
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	226e      	movs	r2, #110	; 0x6e
 8002bb4:	2114      	movs	r1, #20
 8002bb6:	4842      	ldr	r0, [pc, #264]	; (8002cc0 <showCurrentParameters+0x250>)
 8002bb8:	f7fe ffb4 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: %d", CWaterLvl);
 8002bbc:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <showCurrentParameters+0x274>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4949      	ldr	r1, [pc, #292]	; (8002ce8 <showCurrentParameters+0x278>)
 8002bc4:	483e      	ldr	r0, [pc, #248]	; (8002cc0 <showCurrentParameters+0x250>)
 8002bc6:	f00a f9c3 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002bca:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	228c      	movs	r2, #140	; 0x8c
 8002bd8:	2114      	movs	r1, #20
 8002bda:	4839      	ldr	r0, [pc, #228]	; (8002cc0 <showCurrentParameters+0x250>)
 8002bdc:	f7fe ffa2 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8002be0:	4b42      	ldr	r3, [pc, #264]	; (8002cec <showCurrentParameters+0x27c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd fcc7 	bl	8000578 <__aeabi_f2d>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4940      	ldr	r1, [pc, #256]	; (8002cf0 <showCurrentParameters+0x280>)
 8002bf0:	4833      	ldr	r0, [pc, #204]	; (8002cc0 <showCurrentParameters+0x250>)
 8002bf2:	f00a f9ad 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002bf6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2300      	movs	r3, #0
 8002c02:	22aa      	movs	r2, #170	; 0xaa
 8002c04:	2114      	movs	r1, #20
 8002c06:	482e      	ldr	r0, [pc, #184]	; (8002cc0 <showCurrentParameters+0x250>)
 8002c08:	f7fe ff8c 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8002c0c:	4839      	ldr	r0, [pc, #228]	; (8002cf4 <showCurrentParameters+0x284>)
 8002c0e:	f7fe fd6f 	bl	80016f0 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002c12:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	2305      	movs	r3, #5
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2314      	movs	r3, #20
 8002c1e:	225f      	movs	r2, #95	; 0x5f
 8002c20:	21d8      	movs	r1, #216	; 0xd8
 8002c22:	20dc      	movs	r0, #220	; 0xdc
 8002c24:	f7fe fd13 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 8002c28:	4933      	ldr	r1, [pc, #204]	; (8002cf8 <showCurrentParameters+0x288>)
 8002c2a:	4825      	ldr	r0, [pc, #148]	; (8002cc0 <showCurrentParameters+0x250>)
 8002c2c:	f00a f990 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002c30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	2300      	movs	r3, #0
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	22da      	movs	r2, #218	; 0xda
 8002c3e:	21df      	movs	r1, #223	; 0xdf
 8002c40:	481f      	ldr	r0, [pc, #124]	; (8002cc0 <showCurrentParameters+0x250>)
 8002c42:	f7fe ff6f 	bl	8001b24 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002c46:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c4a:	9301      	str	r3, [sp, #4]
 8002c4c:	2305      	movs	r3, #5
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	2314      	movs	r3, #20
 8002c52:	2264      	movs	r2, #100	; 0x64
 8002c54:	21d8      	movs	r1, #216	; 0xd8
 8002c56:	200a      	movs	r0, #10
 8002c58:	f7fe fcf9 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 8002c5c:	4927      	ldr	r1, [pc, #156]	; (8002cfc <showCurrentParameters+0x28c>)
 8002c5e:	4818      	ldr	r0, [pc, #96]	; (8002cc0 <showCurrentParameters+0x250>)
 8002c60:	f00a f976 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002c64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c68:	9301      	str	r3, [sp, #4]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	22da      	movs	r2, #218	; 0xda
 8002c72:	2114      	movs	r1, #20
 8002c74:	4812      	ldr	r0, [pc, #72]	; (8002cc0 <showCurrentParameters+0x250>)
 8002c76:	f7fe ff55 	bl	8001b24 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8002c7a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	2305      	movs	r3, #5
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2314      	movs	r3, #20
 8002c86:	225a      	movs	r2, #90	; 0x5a
 8002c88:	21d8      	movs	r1, #216	; 0xd8
 8002c8a:	2078      	movs	r0, #120	; 0x78
 8002c8c:	f7fe fcdf 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8002c90:	491b      	ldr	r1, [pc, #108]	; (8002d00 <showCurrentParameters+0x290>)
 8002c92:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <showCurrentParameters+0x250>)
 8002c94:	f00a f95c 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002c98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	22da      	movs	r2, #218	; 0xda
 8002ca6:	2184      	movs	r1, #132	; 0x84
 8002ca8:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <showCurrentParameters+0x250>)
 8002caa:	f7fe ff3b 	bl	8001b24 <EF_PutString>
}
 8002cae:	bf00      	nop
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	08013ac0 	.word	0x08013ac0
 8002cbc:	08010bac 	.word	0x08010bac
 8002cc0:	200002bc 	.word	0x200002bc
 8002cc4:	08010bbc 	.word	0x08010bbc
 8002cc8:	08010bcc 	.word	0x08010bcc
 8002ccc:	08010bdc 	.word	0x08010bdc
 8002cd0:	08010bec 	.word	0x08010bec
 8002cd4:	20000254 	.word	0x20000254
 8002cd8:	08010bfc 	.word	0x08010bfc
 8002cdc:	20000260 	.word	0x20000260
 8002ce0:	08010c10 	.word	0x08010c10
 8002ce4:	20000264 	.word	0x20000264
 8002ce8:	08010c24 	.word	0x08010c24
 8002cec:	2000025c 	.word	0x2000025c
 8002cf0:	08010c34 	.word	0x08010c34
 8002cf4:	08011b48 	.word	0x08011b48
 8002cf8:	08010c4c 	.word	0x08010c4c
 8002cfc:	08010c58 	.word	0x08010c58
 8002d00:	08010c64 	.word	0x08010c64

08002d04 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8002d0a:	2015      	movs	r0, #21
 8002d0c:	f002 fa64 	bl	80051d8 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002d10:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002d14:	f7ff f8f0 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002d18:	485c      	ldr	r0, [pc, #368]	; (8002e8c <showControlPanel+0x188>)
 8002d1a:	f7fe fce9 	bl	80016f0 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 8002d1e:	495c      	ldr	r1, [pc, #368]	; (8002e90 <showControlPanel+0x18c>)
 8002d20:	485c      	ldr	r0, [pc, #368]	; (8002e94 <showControlPanel+0x190>)
 8002d22:	f00a f915 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002d26:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	231f      	movs	r3, #31
 8002d32:	220a      	movs	r2, #10
 8002d34:	2123      	movs	r1, #35	; 0x23
 8002d36:	4857      	ldr	r0, [pc, #348]	; (8002e94 <showControlPanel+0x190>)
 8002d38:	f7fe fef4 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002d3c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2329      	movs	r3, #41	; 0x29
 8002d44:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d48:	2129      	movs	r1, #41	; 0x29
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7fe fa20 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002d50:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	232b      	movs	r3, #43	; 0x2b
 8002d58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d5c:	212b      	movs	r1, #43	; 0x2b
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7fe fa16 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 8002d64:	494c      	ldr	r1, [pc, #304]	; (8002e98 <showControlPanel+0x194>)
 8002d66:	484b      	ldr	r0, [pc, #300]	; (8002e94 <showControlPanel+0x190>)
 8002d68:	f00a f8f2 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002d6c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2300      	movs	r3, #0
 8002d78:	223c      	movs	r2, #60	; 0x3c
 8002d7a:	2114      	movs	r1, #20
 8002d7c:	4845      	ldr	r0, [pc, #276]	; (8002e94 <showControlPanel+0x190>)
 8002d7e:	f7fe fed1 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 8002d82:	4946      	ldr	r1, [pc, #280]	; (8002e9c <showControlPanel+0x198>)
 8002d84:	4843      	ldr	r0, [pc, #268]	; (8002e94 <showControlPanel+0x190>)
 8002d86:	f00a f8e3 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002d8a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	2301      	movs	r3, #1
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2300      	movs	r3, #0
 8002d96:	225a      	movs	r2, #90	; 0x5a
 8002d98:	2114      	movs	r1, #20
 8002d9a:	483e      	ldr	r0, [pc, #248]	; (8002e94 <showControlPanel+0x190>)
 8002d9c:	f7fe fec2 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8002da0:	493f      	ldr	r1, [pc, #252]	; (8002ea0 <showControlPanel+0x19c>)
 8002da2:	483c      	ldr	r0, [pc, #240]	; (8002e94 <showControlPanel+0x190>)
 8002da4:	f00a f8d4 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002da8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	2300      	movs	r3, #0
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2300      	movs	r3, #0
 8002db4:	2278      	movs	r2, #120	; 0x78
 8002db6:	2114      	movs	r1, #20
 8002db8:	4836      	ldr	r0, [pc, #216]	; (8002e94 <showControlPanel+0x190>)
 8002dba:	f7fe feb3 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8002dbe:	4939      	ldr	r1, [pc, #228]	; (8002ea4 <showControlPanel+0x1a0>)
 8002dc0:	4834      	ldr	r0, [pc, #208]	; (8002e94 <showControlPanel+0x190>)
 8002dc2:	f00a f8c5 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002dc6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2296      	movs	r2, #150	; 0x96
 8002dd4:	2114      	movs	r1, #20
 8002dd6:	482f      	ldr	r0, [pc, #188]	; (8002e94 <showControlPanel+0x190>)
 8002dd8:	f7fe fea4 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8002ddc:	4832      	ldr	r0, [pc, #200]	; (8002ea8 <showControlPanel+0x1a4>)
 8002dde:	f7fe fc87 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002de2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	2305      	movs	r3, #5
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	2314      	movs	r3, #20
 8002dee:	225f      	movs	r2, #95	; 0x5f
 8002df0:	21d8      	movs	r1, #216	; 0xd8
 8002df2:	20dc      	movs	r0, #220	; 0xdc
 8002df4:	f7fe fc2b 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8002df8:	492c      	ldr	r1, [pc, #176]	; (8002eac <showControlPanel+0x1a8>)
 8002dfa:	4826      	ldr	r0, [pc, #152]	; (8002e94 <showControlPanel+0x190>)
 8002dfc:	f00a f8a8 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002e00:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e04:	9301      	str	r3, [sp, #4]
 8002e06:	2300      	movs	r3, #0
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	22da      	movs	r2, #218	; 0xda
 8002e0e:	21df      	movs	r1, #223	; 0xdf
 8002e10:	4820      	ldr	r0, [pc, #128]	; (8002e94 <showControlPanel+0x190>)
 8002e12:	f7fe fe87 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002e16:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	2305      	movs	r3, #5
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	2314      	movs	r3, #20
 8002e22:	2264      	movs	r2, #100	; 0x64
 8002e24:	21d8      	movs	r1, #216	; 0xd8
 8002e26:	200a      	movs	r0, #10
 8002e28:	f7fe fc11 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 8002e2c:	4920      	ldr	r1, [pc, #128]	; (8002eb0 <showControlPanel+0x1ac>)
 8002e2e:	4819      	ldr	r0, [pc, #100]	; (8002e94 <showControlPanel+0x190>)
 8002e30:	f00a f88e 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002e34:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	22da      	movs	r2, #218	; 0xda
 8002e42:	2114      	movs	r1, #20
 8002e44:	4813      	ldr	r0, [pc, #76]	; (8002e94 <showControlPanel+0x190>)
 8002e46:	f7fe fe6d 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8002e4a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	2305      	movs	r3, #5
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2314      	movs	r3, #20
 8002e56:	225a      	movs	r2, #90	; 0x5a
 8002e58:	21d8      	movs	r1, #216	; 0xd8
 8002e5a:	2078      	movs	r0, #120	; 0x78
 8002e5c:	f7fe fbf7 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 8002e60:	4914      	ldr	r1, [pc, #80]	; (8002eb4 <showControlPanel+0x1b0>)
 8002e62:	480c      	ldr	r0, [pc, #48]	; (8002e94 <showControlPanel+0x190>)
 8002e64:	f00a f874 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002e68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	22da      	movs	r2, #218	; 0xda
 8002e76:	217e      	movs	r1, #126	; 0x7e
 8002e78:	4806      	ldr	r0, [pc, #24]	; (8002e94 <showControlPanel+0x190>)
 8002e7a:	f7fe fe53 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002e7e:	4803      	ldr	r0, [pc, #12]	; (8002e8c <showControlPanel+0x188>)
 8002e80:	f7fe fc36 	bl	80016f0 <EF_SetFont>


}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	08013ac0 	.word	0x08013ac0
 8002e90:	08010c6c 	.word	0x08010c6c
 8002e94:	200002bc 	.word	0x200002bc
 8002e98:	08010c80 	.word	0x08010c80
 8002e9c:	08010c94 	.word	0x08010c94
 8002ea0:	08010ca8 	.word	0x08010ca8
 8002ea4:	08010cbc 	.word	0x08010cbc
 8002ea8:	08011b48 	.word	0x08011b48
 8002eac:	08010cd0 	.word	0x08010cd0
 8002eb0:	08010cdc 	.word	0x08010cdc
 8002eb4:	08010ce4 	.word	0x08010ce4

08002eb8 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8002ebe:	2016      	movs	r0, #22
 8002ec0:	f002 f98a 	bl	80051d8 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002ec4:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002ec8:	f7ff f816 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002ecc:	484e      	ldr	r0, [pc, #312]	; (8003008 <showLightsControlPanel+0x150>)
 8002ece:	f7fe fc0f 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8002ed2:	494e      	ldr	r1, [pc, #312]	; (800300c <showLightsControlPanel+0x154>)
 8002ed4:	484e      	ldr	r0, [pc, #312]	; (8003010 <showLightsControlPanel+0x158>)
 8002ed6:	f00a f83b 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002eda:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002ee8:	220a      	movs	r2, #10
 8002eea:	2146      	movs	r1, #70	; 0x46
 8002eec:	4848      	ldr	r0, [pc, #288]	; (8003010 <showLightsControlPanel+0x158>)
 8002eee:	f7fe fe19 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002ef2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2329      	movs	r3, #41	; 0x29
 8002efa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002efe:	2129      	movs	r1, #41	; 0x29
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fe f945 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002f06:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	232b      	movs	r3, #43	; 0x2b
 8002f0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002f12:	212b      	movs	r1, #43	; 0x2b
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7fe f93b 	bl	8001190 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 8002f1a:	493e      	ldr	r1, [pc, #248]	; (8003014 <showLightsControlPanel+0x15c>)
 8002f1c:	483c      	ldr	r0, [pc, #240]	; (8003010 <showLightsControlPanel+0x158>)
 8002f1e:	f00a f817 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f22:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	223c      	movs	r2, #60	; 0x3c
 8002f30:	2114      	movs	r1, #20
 8002f32:	4837      	ldr	r0, [pc, #220]	; (8003010 <showLightsControlPanel+0x158>)
 8002f34:	f7fe fdf6 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 8002f38:	4937      	ldr	r1, [pc, #220]	; (8003018 <showLightsControlPanel+0x160>)
 8002f3a:	4835      	ldr	r0, [pc, #212]	; (8003010 <showLightsControlPanel+0x158>)
 8002f3c:	f00a f808 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002f40:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	2301      	movs	r3, #1
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	225a      	movs	r2, #90	; 0x5a
 8002f4e:	2114      	movs	r1, #20
 8002f50:	482f      	ldr	r0, [pc, #188]	; (8003010 <showLightsControlPanel+0x158>)
 8002f52:	f7fe fde7 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 8002f56:	4931      	ldr	r1, [pc, #196]	; (800301c <showLightsControlPanel+0x164>)
 8002f58:	482d      	ldr	r0, [pc, #180]	; (8003010 <showLightsControlPanel+0x158>)
 8002f5a:	f009 fff9 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f5e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	2300      	movs	r3, #0
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	2278      	movs	r2, #120	; 0x78
 8002f6c:	2114      	movs	r1, #20
 8002f6e:	4828      	ldr	r0, [pc, #160]	; (8003010 <showLightsControlPanel+0x158>)
 8002f70:	f7fe fdd8 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 8002f74:	492a      	ldr	r1, [pc, #168]	; (8003020 <showLightsControlPanel+0x168>)
 8002f76:	4826      	ldr	r0, [pc, #152]	; (8003010 <showLightsControlPanel+0x158>)
 8002f78:	f009 ffea 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f7c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	2300      	movs	r3, #0
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2300      	movs	r3, #0
 8002f88:	2296      	movs	r2, #150	; 0x96
 8002f8a:	2114      	movs	r1, #20
 8002f8c:	4820      	ldr	r0, [pc, #128]	; (8003010 <showLightsControlPanel+0x158>)
 8002f8e:	f7fe fdc9 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8002f92:	4824      	ldr	r0, [pc, #144]	; (8003024 <showLightsControlPanel+0x16c>)
 8002f94:	f7fe fbac 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002f98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	2305      	movs	r3, #5
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2314      	movs	r3, #20
 8002fa4:	225f      	movs	r2, #95	; 0x5f
 8002fa6:	21d8      	movs	r1, #216	; 0xd8
 8002fa8:	20dc      	movs	r0, #220	; 0xdc
 8002faa:	f7fe fb50 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8002fae:	491e      	ldr	r1, [pc, #120]	; (8003028 <showLightsControlPanel+0x170>)
 8002fb0:	4817      	ldr	r0, [pc, #92]	; (8003010 <showLightsControlPanel+0x158>)
 8002fb2:	f009 ffcd 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002fb6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	22da      	movs	r2, #218	; 0xda
 8002fc4:	21e6      	movs	r1, #230	; 0xe6
 8002fc6:	4812      	ldr	r0, [pc, #72]	; (8003010 <showLightsControlPanel+0x158>)
 8002fc8:	f7fe fdac 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002fcc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	2305      	movs	r3, #5
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2314      	movs	r3, #20
 8002fd8:	2264      	movs	r2, #100	; 0x64
 8002fda:	21d8      	movs	r1, #216	; 0xd8
 8002fdc:	200a      	movs	r0, #10
 8002fde:	f7fe fb36 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 8002fe2:	4912      	ldr	r1, [pc, #72]	; (800302c <showLightsControlPanel+0x174>)
 8002fe4:	480a      	ldr	r0, [pc, #40]	; (8003010 <showLightsControlPanel+0x158>)
 8002fe6:	f009 ffb3 	bl	800cf50 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002fea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	22da      	movs	r2, #218	; 0xda
 8002ff8:	210d      	movs	r1, #13
 8002ffa:	4805      	ldr	r0, [pc, #20]	; (8003010 <showLightsControlPanel+0x158>)
 8002ffc:	f7fe fd92 	bl	8001b24 <EF_PutString>


}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	08013ac0 	.word	0x08013ac0
 800300c:	08010cf0 	.word	0x08010cf0
 8003010:	200002bc 	.word	0x200002bc
 8003014:	08010d00 	.word	0x08010d00
 8003018:	08010d10 	.word	0x08010d10
 800301c:	08010d20 	.word	0x08010d20
 8003020:	08010d30 	.word	0x08010d30
 8003024:	08011b48 	.word	0x08011b48
 8003028:	08010d40 	.word	0x08010d40
 800302c:	08010d48 	.word	0x08010d48

08003030 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003036:	f24c 6018 	movw	r0, #50712	; 0xc618
 800303a:	f7fe ff5d 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 800303e:	487d      	ldr	r0, [pc, #500]	; (8003234 <showClockSetPanel+0x204>)
 8003040:	f7fe fb56 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003044:	f7ff fb9a 	bl	800277c <DS3231_GetHour>
 8003048:	4603      	mov	r3, r0
 800304a:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 800304c:	f7ff fba2 	bl	8002794 <DS3231_GetMinute>
 8003050:	4603      	mov	r3, r0
 8003052:	71bb      	strb	r3, [r7, #6]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003054:	4978      	ldr	r1, [pc, #480]	; (8003238 <showClockSetPanel+0x208>)
 8003056:	4879      	ldr	r0, [pc, #484]	; (800323c <showClockSetPanel+0x20c>)
 8003058:	f009 ff7a 	bl	800cf50 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800305c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	2300      	movs	r3, #0
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800306a:	220a      	movs	r2, #10
 800306c:	212f      	movs	r1, #47	; 0x2f
 800306e:	4873      	ldr	r0, [pc, #460]	; (800323c <showClockSetPanel+0x20c>)
 8003070:	f7fe fd58 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003074:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	2329      	movs	r3, #41	; 0x29
 800307c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003080:	2129      	movs	r1, #41	; 0x29
 8003082:	2000      	movs	r0, #0
 8003084:	f7fe f884 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003088:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	232b      	movs	r3, #43	; 0x2b
 8003090:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003094:	212b      	movs	r1, #43	; 0x2b
 8003096:	2000      	movs	r0, #0
 8003098:	f7fe f87a 	bl	8001190 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	461a      	mov	r2, r3
 80030a0:	4967      	ldr	r1, [pc, #412]	; (8003240 <showClockSetPanel+0x210>)
 80030a2:	4866      	ldr	r0, [pc, #408]	; (800323c <showClockSetPanel+0x20c>)
 80030a4:	f009 ff54 	bl	800cf50 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80030a8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	2300      	movs	r3, #0
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2300      	movs	r3, #0
 80030b4:	2246      	movs	r2, #70	; 0x46
 80030b6:	2114      	movs	r1, #20
 80030b8:	4860      	ldr	r0, [pc, #384]	; (800323c <showClockSetPanel+0x20c>)
 80030ba:	f7fe fd33 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 80030be:	79bb      	ldrb	r3, [r7, #6]
 80030c0:	461a      	mov	r2, r3
 80030c2:	4960      	ldr	r1, [pc, #384]	; (8003244 <showClockSetPanel+0x214>)
 80030c4:	485d      	ldr	r0, [pc, #372]	; (800323c <showClockSetPanel+0x20c>)
 80030c6:	f009 ff43 	bl	800cf50 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80030ca:	f24c 6318 	movw	r3, #50712	; 0xc618
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	2301      	movs	r3, #1
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	2300      	movs	r3, #0
 80030d6:	226e      	movs	r2, #110	; 0x6e
 80030d8:	2114      	movs	r1, #20
 80030da:	4858      	ldr	r0, [pc, #352]	; (800323c <showClockSetPanel+0x20c>)
 80030dc:	f7fe fd22 	bl	8001b24 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 80030e0:	4859      	ldr	r0, [pc, #356]	; (8003248 <showClockSetPanel+0x218>)
 80030e2:	f7fe fb05 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80030e6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	2305      	movs	r3, #5
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2315      	movs	r3, #21
 80030f2:	221e      	movs	r2, #30
 80030f4:	214b      	movs	r1, #75	; 0x4b
 80030f6:	20f0      	movs	r0, #240	; 0xf0
 80030f8:	f7fe faa9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80030fc:	4953      	ldr	r1, [pc, #332]	; (800324c <showClockSetPanel+0x21c>)
 80030fe:	484f      	ldr	r0, [pc, #316]	; (800323c <showClockSetPanel+0x20c>)
 8003100:	f009 ff26 	bl	800cf50 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003104:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003108:	9301      	str	r3, [sp, #4]
 800310a:	2300      	movs	r3, #0
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	2300      	movs	r3, #0
 8003110:	224d      	movs	r2, #77	; 0x4d
 8003112:	21f3      	movs	r1, #243	; 0xf3
 8003114:	4849      	ldr	r0, [pc, #292]	; (800323c <showClockSetPanel+0x20c>)
 8003116:	f7fe fd05 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 800311a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	2305      	movs	r3, #5
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2315      	movs	r3, #21
 8003126:	221e      	movs	r2, #30
 8003128:	214b      	movs	r1, #75	; 0x4b
 800312a:	f44f 708c 	mov.w	r0, #280	; 0x118
 800312e:	f7fe fa8e 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003132:	4947      	ldr	r1, [pc, #284]	; (8003250 <showClockSetPanel+0x220>)
 8003134:	4841      	ldr	r0, [pc, #260]	; (800323c <showClockSetPanel+0x20c>)
 8003136:	f009 ff0b 	bl	800cf50 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 800313a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	2300      	movs	r3, #0
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	2300      	movs	r3, #0
 8003146:	224d      	movs	r2, #77	; 0x4d
 8003148:	f240 111d 	movw	r1, #285	; 0x11d
 800314c:	483b      	ldr	r0, [pc, #236]	; (800323c <showClockSetPanel+0x20c>)
 800314e:	f7fe fce9 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003152:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003156:	9301      	str	r3, [sp, #4]
 8003158:	2305      	movs	r3, #5
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	2315      	movs	r3, #21
 800315e:	221e      	movs	r2, #30
 8003160:	2173      	movs	r1, #115	; 0x73
 8003162:	20f0      	movs	r0, #240	; 0xf0
 8003164:	f7fe fa73 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003168:	4938      	ldr	r1, [pc, #224]	; (800324c <showClockSetPanel+0x21c>)
 800316a:	4834      	ldr	r0, [pc, #208]	; (800323c <showClockSetPanel+0x20c>)
 800316c:	f009 fef0 	bl	800cf50 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003170:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2300      	movs	r3, #0
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2300      	movs	r3, #0
 800317c:	2275      	movs	r2, #117	; 0x75
 800317e:	21f5      	movs	r1, #245	; 0xf5
 8003180:	482e      	ldr	r0, [pc, #184]	; (800323c <showClockSetPanel+0x20c>)
 8003182:	f7fe fccf 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003186:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	2305      	movs	r3, #5
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2315      	movs	r3, #21
 8003192:	221e      	movs	r2, #30
 8003194:	2173      	movs	r1, #115	; 0x73
 8003196:	f44f 708c 	mov.w	r0, #280	; 0x118
 800319a:	f7fe fa58 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 800319e:	492d      	ldr	r1, [pc, #180]	; (8003254 <showClockSetPanel+0x224>)
 80031a0:	4826      	ldr	r0, [pc, #152]	; (800323c <showClockSetPanel+0x20c>)
 80031a2:	f009 fed5 	bl	800cf50 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80031a6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	2300      	movs	r3, #0
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	2300      	movs	r3, #0
 80031b2:	2275      	movs	r2, #117	; 0x75
 80031b4:	f240 111b 	movw	r1, #283	; 0x11b
 80031b8:	4820      	ldr	r0, [pc, #128]	; (800323c <showClockSetPanel+0x20c>)
 80031ba:	f7fe fcb3 	bl	8001b24 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80031be:	4822      	ldr	r0, [pc, #136]	; (8003248 <showClockSetPanel+0x218>)
 80031c0:	f7fe fa96 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80031c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	2305      	movs	r3, #5
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	2314      	movs	r3, #20
 80031d0:	225f      	movs	r2, #95	; 0x5f
 80031d2:	21d8      	movs	r1, #216	; 0xd8
 80031d4:	20dc      	movs	r0, #220	; 0xdc
 80031d6:	f7fe fa3a 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 80031da:	491f      	ldr	r1, [pc, #124]	; (8003258 <showClockSetPanel+0x228>)
 80031dc:	4817      	ldr	r0, [pc, #92]	; (800323c <showClockSetPanel+0x20c>)
 80031de:	f009 feb7 	bl	800cf50 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80031e2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	2300      	movs	r3, #0
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2300      	movs	r3, #0
 80031ee:	22da      	movs	r2, #218	; 0xda
 80031f0:	21e6      	movs	r1, #230	; 0xe6
 80031f2:	4812      	ldr	r0, [pc, #72]	; (800323c <showClockSetPanel+0x20c>)
 80031f4:	f7fe fc96 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80031f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	2305      	movs	r3, #5
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	2314      	movs	r3, #20
 8003204:	2264      	movs	r2, #100	; 0x64
 8003206:	21d8      	movs	r1, #216	; 0xd8
 8003208:	200a      	movs	r0, #10
 800320a:	f7fe fa20 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 800320e:	4913      	ldr	r1, [pc, #76]	; (800325c <showClockSetPanel+0x22c>)
 8003210:	480a      	ldr	r0, [pc, #40]	; (800323c <showClockSetPanel+0x20c>)
 8003212:	f009 fe9d 	bl	800cf50 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003216:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	2300      	movs	r3, #0
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2300      	movs	r3, #0
 8003222:	22da      	movs	r2, #218	; 0xda
 8003224:	210d      	movs	r1, #13
 8003226:	4805      	ldr	r0, [pc, #20]	; (800323c <showClockSetPanel+0x20c>)
 8003228:	f7fe fc7c 	bl	8001b24 <EF_PutString>
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	08013ac0 	.word	0x08013ac0
 8003238:	08010d54 	.word	0x08010d54
 800323c:	200002bc 	.word	0x200002bc
 8003240:	08010d64 	.word	0x08010d64
 8003244:	08010d70 	.word	0x08010d70
 8003248:	08011b48 	.word	0x08011b48
 800324c:	08010d80 	.word	0x08010d80
 8003250:	08010d84 	.word	0x08010d84
 8003254:	08010d88 	.word	0x08010d88
 8003258:	08010d8c 	.word	0x08010d8c
 800325c:	08010d94 	.word	0x08010d94

08003260 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003266:	f24c 6018 	movw	r0, #50712	; 0xc618
 800326a:	f7fe fe45 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 800326e:	487a      	ldr	r0, [pc, #488]	; (8003458 <showPreparedActivitiesPanel+0x1f8>)
 8003270:	f7fe fa3e 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003274:	4979      	ldr	r1, [pc, #484]	; (800345c <showPreparedActivitiesPanel+0x1fc>)
 8003276:	487a      	ldr	r0, [pc, #488]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 8003278:	f009 fe6a 	bl	800cf50 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800327c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003280:	9301      	str	r3, [sp, #4]
 8003282:	2300      	movs	r3, #0
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	231f      	movs	r3, #31
 8003288:	220a      	movs	r2, #10
 800328a:	212f      	movs	r1, #47	; 0x2f
 800328c:	4874      	ldr	r0, [pc, #464]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 800328e:	f7fe fc49 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003292:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	2329      	movs	r3, #41	; 0x29
 800329a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800329e:	2129      	movs	r1, #41	; 0x29
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7fd ff75 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80032a6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	232b      	movs	r3, #43	; 0x2b
 80032ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032b2:	212b      	movs	r1, #43	; 0x2b
 80032b4:	2000      	movs	r0, #0
 80032b6:	f7fd ff6b 	bl	8001190 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80032ba:	486a      	ldr	r0, [pc, #424]	; (8003464 <showPreparedActivitiesPanel+0x204>)
 80032bc:	f7fe fa18 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80032c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	2305      	movs	r3, #5
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	2314      	movs	r3, #20
 80032cc:	2264      	movs	r2, #100	; 0x64
 80032ce:	21d8      	movs	r1, #216	; 0xd8
 80032d0:	200a      	movs	r0, #10
 80032d2:	f7fe f9bc 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80032d6:	4964      	ldr	r1, [pc, #400]	; (8003468 <showPreparedActivitiesPanel+0x208>)
 80032d8:	4861      	ldr	r0, [pc, #388]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 80032da:	f009 fe39 	bl	800cf50 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80032de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	2300      	movs	r3, #0
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	2300      	movs	r3, #0
 80032ea:	22da      	movs	r2, #218	; 0xda
 80032ec:	210d      	movs	r1, #13
 80032ee:	485c      	ldr	r0, [pc, #368]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 80032f0:	f7fe fc18 	bl	8001b24 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 80032f4:	4b5d      	ldr	r3, [pc, #372]	; (800346c <showPreparedActivitiesPanel+0x20c>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d029      	beq.n	8003350 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80032fc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	230a      	movs	r3, #10
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2328      	movs	r3, #40	; 0x28
 8003308:	2278      	movs	r2, #120	; 0x78
 800330a:	213c      	movs	r1, #60	; 0x3c
 800330c:	2064      	movs	r0, #100	; 0x64
 800330e:	f7fe f99e 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003312:	4957      	ldr	r1, [pc, #348]	; (8003470 <showPreparedActivitiesPanel+0x210>)
 8003314:	4852      	ldr	r0, [pc, #328]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 8003316:	f009 fe1b 	bl	800cf50 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800331a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	2300      	movs	r3, #0
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2300      	movs	r3, #0
 8003326:	223e      	movs	r2, #62	; 0x3e
 8003328:	2177      	movs	r1, #119	; 0x77
 800332a:	484d      	ldr	r0, [pc, #308]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 800332c:	f7fe fbfa 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003330:	4950      	ldr	r1, [pc, #320]	; (8003474 <showPreparedActivitiesPanel+0x214>)
 8003332:	484b      	ldr	r0, [pc, #300]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 8003334:	f009 fe0c 	bl	800cf50 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003338:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	2300      	movs	r3, #0
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	2300      	movs	r3, #0
 8003344:	2250      	movs	r2, #80	; 0x50
 8003346:	2193      	movs	r1, #147	; 0x93
 8003348:	4845      	ldr	r0, [pc, #276]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 800334a:	f7fe fbeb 	bl	8001b24 <EF_PutString>
 800334e:	e028      	b.n	80033a2 <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003350:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	230a      	movs	r3, #10
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2328      	movs	r3, #40	; 0x28
 800335c:	2278      	movs	r2, #120	; 0x78
 800335e:	213c      	movs	r1, #60	; 0x3c
 8003360:	2064      	movs	r0, #100	; 0x64
 8003362:	f7fe f974 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003366:	4942      	ldr	r1, [pc, #264]	; (8003470 <showPreparedActivitiesPanel+0x210>)
 8003368:	483d      	ldr	r0, [pc, #244]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 800336a:	f009 fdf1 	bl	800cf50 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800336e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	2300      	movs	r3, #0
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2300      	movs	r3, #0
 800337a:	223e      	movs	r2, #62	; 0x3e
 800337c:	2177      	movs	r1, #119	; 0x77
 800337e:	4838      	ldr	r0, [pc, #224]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 8003380:	f7fe fbd0 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003384:	493c      	ldr	r1, [pc, #240]	; (8003478 <showPreparedActivitiesPanel+0x218>)
 8003386:	4836      	ldr	r0, [pc, #216]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 8003388:	f009 fde2 	bl	800cf50 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800338c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	2300      	movs	r3, #0
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	2300      	movs	r3, #0
 8003398:	2250      	movs	r2, #80	; 0x50
 800339a:	2193      	movs	r1, #147	; 0x93
 800339c:	4830      	ldr	r0, [pc, #192]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 800339e:	f7fe fbc1 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 80033a2:	4b32      	ldr	r3, [pc, #200]	; (800346c <showPreparedActivitiesPanel+0x20c>)
 80033a4:	785b      	ldrb	r3, [r3, #1]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d029      	beq.n	80033fe <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80033aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	230a      	movs	r3, #10
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2328      	movs	r3, #40	; 0x28
 80033b6:	2278      	movs	r2, #120	; 0x78
 80033b8:	2178      	movs	r1, #120	; 0x78
 80033ba:	2064      	movs	r0, #100	; 0x64
 80033bc:	f7fe f947 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 80033c0:	492e      	ldr	r1, [pc, #184]	; (800347c <showPreparedActivitiesPanel+0x21c>)
 80033c2:	4827      	ldr	r0, [pc, #156]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 80033c4:	f009 fdc4 	bl	800cf50 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80033c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	2300      	movs	r3, #0
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	2300      	movs	r3, #0
 80033d4:	227a      	movs	r2, #122	; 0x7a
 80033d6:	2169      	movs	r1, #105	; 0x69
 80033d8:	4821      	ldr	r0, [pc, #132]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 80033da:	f7fe fba3 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 80033de:	4925      	ldr	r1, [pc, #148]	; (8003474 <showPreparedActivitiesPanel+0x214>)
 80033e0:	481f      	ldr	r0, [pc, #124]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 80033e2:	f009 fdb5 	bl	800cf50 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80033e6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	2300      	movs	r3, #0
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	2300      	movs	r3, #0
 80033f2:	228c      	movs	r2, #140	; 0x8c
 80033f4:	2193      	movs	r1, #147	; 0x93
 80033f6:	481a      	ldr	r0, [pc, #104]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 80033f8:	f7fe fb94 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 80033fc:	e028      	b.n	8003450 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80033fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003402:	9301      	str	r3, [sp, #4]
 8003404:	230a      	movs	r3, #10
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	2328      	movs	r3, #40	; 0x28
 800340a:	2278      	movs	r2, #120	; 0x78
 800340c:	2178      	movs	r1, #120	; 0x78
 800340e:	2064      	movs	r0, #100	; 0x64
 8003410:	f7fe f91d 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003414:	4919      	ldr	r1, [pc, #100]	; (800347c <showPreparedActivitiesPanel+0x21c>)
 8003416:	4812      	ldr	r0, [pc, #72]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 8003418:	f009 fd9a 	bl	800cf50 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800341c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	2300      	movs	r3, #0
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	2300      	movs	r3, #0
 8003428:	227a      	movs	r2, #122	; 0x7a
 800342a:	2169      	movs	r1, #105	; 0x69
 800342c:	480c      	ldr	r0, [pc, #48]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 800342e:	f7fe fb79 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003432:	4911      	ldr	r1, [pc, #68]	; (8003478 <showPreparedActivitiesPanel+0x218>)
 8003434:	480a      	ldr	r0, [pc, #40]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 8003436:	f009 fd8b 	bl	800cf50 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800343a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800343e:	9301      	str	r3, [sp, #4]
 8003440:	2300      	movs	r3, #0
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	2300      	movs	r3, #0
 8003446:	228c      	movs	r2, #140	; 0x8c
 8003448:	2193      	movs	r1, #147	; 0x93
 800344a:	4805      	ldr	r0, [pc, #20]	; (8003460 <showPreparedActivitiesPanel+0x200>)
 800344c:	f7fe fb6a 	bl	8001b24 <EF_PutString>
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	08013ac0 	.word	0x08013ac0
 800345c:	08010d9c 	.word	0x08010d9c
 8003460:	200002bc 	.word	0x200002bc
 8003464:	08011b48 	.word	0x08011b48
 8003468:	08010d94 	.word	0x08010d94
 800346c:	20000270 	.word	0x20000270
 8003470:	08010dac 	.word	0x08010dac
 8003474:	08010db8 	.word	0x08010db8
 8003478:	08010dbc 	.word	0x08010dbc
 800347c:	08010dc0 	.word	0x08010dc0

08003480 <ChangeHourOnScreen>:
//
// Change displayed time, if is other than current time
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ChangeHourOnScreen()
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8003486:	f7ff f979 	bl	800277c <DS3231_GetHour>
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 800348e:	f7ff f981 	bl	8002794 <DS3231_GetMinute>
 8003492:	4603      	mov	r3, r0
 8003494:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003496:	482a      	ldr	r0, [pc, #168]	; (8003540 <ChangeHourOnScreen+0xc0>)
 8003498:	f7fe f92a 	bl	80016f0 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 800349c:	4b29      	ldr	r3, [pc, #164]	; (8003544 <ChangeHourOnScreen+0xc4>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	79fa      	ldrb	r2, [r7, #7]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d021      	beq.n	80034ea <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 80034a6:	4b28      	ldr	r3, [pc, #160]	; (8003548 <ChangeHourOnScreen+0xc8>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d11d      	bne.n	80034ea <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	2b09      	cmp	r3, #9
 80034b2:	d806      	bhi.n	80034c2 <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	461a      	mov	r2, r3
 80034b8:	4924      	ldr	r1, [pc, #144]	; (800354c <ChangeHourOnScreen+0xcc>)
 80034ba:	4825      	ldr	r0, [pc, #148]	; (8003550 <ChangeHourOnScreen+0xd0>)
 80034bc:	f009 fd48 	bl	800cf50 <siprintf>
 80034c0:	e005      	b.n	80034ce <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	461a      	mov	r2, r3
 80034c6:	4923      	ldr	r1, [pc, #140]	; (8003554 <ChangeHourOnScreen+0xd4>)
 80034c8:	4821      	ldr	r0, [pc, #132]	; (8003550 <ChangeHourOnScreen+0xd0>)
 80034ca:	f009 fd41 	bl	800cf50 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80034ce:	f24c 6318 	movw	r3, #50712	; 0xc618
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	2301      	movs	r3, #1
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	2300      	movs	r3, #0
 80034da:	2232      	movs	r2, #50	; 0x32
 80034dc:	2161      	movs	r1, #97	; 0x61
 80034de:	481c      	ldr	r0, [pc, #112]	; (8003550 <ChangeHourOnScreen+0xd0>)
 80034e0:	f7fe fb20 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 80034e4:	4a17      	ldr	r2, [pc, #92]	; (8003544 <ChangeHourOnScreen+0xc4>)
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 80034ea:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <ChangeHourOnScreen+0xd8>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	79ba      	ldrb	r2, [r7, #6]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d021      	beq.n	8003538 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 80034f4:	4b14      	ldr	r3, [pc, #80]	; (8003548 <ChangeHourOnScreen+0xc8>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d11d      	bne.n	8003538 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 80034fc:	79bb      	ldrb	r3, [r7, #6]
 80034fe:	2b09      	cmp	r3, #9
 8003500:	d806      	bhi.n	8003510 <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8003502:	79bb      	ldrb	r3, [r7, #6]
 8003504:	461a      	mov	r2, r3
 8003506:	4915      	ldr	r1, [pc, #84]	; (800355c <ChangeHourOnScreen+0xdc>)
 8003508:	4811      	ldr	r0, [pc, #68]	; (8003550 <ChangeHourOnScreen+0xd0>)
 800350a:	f009 fd21 	bl	800cf50 <siprintf>
 800350e:	e005      	b.n	800351c <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8003510:	79bb      	ldrb	r3, [r7, #6]
 8003512:	461a      	mov	r2, r3
 8003514:	4912      	ldr	r1, [pc, #72]	; (8003560 <ChangeHourOnScreen+0xe0>)
 8003516:	480e      	ldr	r0, [pc, #56]	; (8003550 <ChangeHourOnScreen+0xd0>)
 8003518:	f009 fd1a 	bl	800cf50 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800351c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	2301      	movs	r3, #1
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2300      	movs	r3, #0
 8003528:	2232      	movs	r2, #50	; 0x32
 800352a:	2196      	movs	r1, #150	; 0x96
 800352c:	4808      	ldr	r0, [pc, #32]	; (8003550 <ChangeHourOnScreen+0xd0>)
 800352e:	f7fe faf9 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <ChangeHourOnScreen+0xd8>)
 8003534:	79bb      	ldrb	r3, [r7, #6]
 8003536:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	08013ac0 	.word	0x08013ac0
 8003544:	20000246 	.word	0x20000246
 8003548:	20000250 	.word	0x20000250
 800354c:	08010dcc 	.word	0x08010dcc
 8003550:	200002bc 	.word	0x200002bc
 8003554:	08010dd4 	.word	0x08010dd4
 8003558:	20000247 	.word	0x20000247
 800355c:	08010dd8 	.word	0x08010dd8
 8003560:	08010de0 	.word	0x08010de0

08003564 <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <predefinedActivityCzyszczenie+0x1c>
	{
		SendComand(UCMD_RELAY_ALL_ON);
 8003578:	2017      	movs	r0, #23
 800357a:	f001 fe2d 	bl	80051d8 <SendComand>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 800357e:	e005      	b.n	800358c <predefinedActivityCzyszczenie+0x28>
		SendComand(UCMD_RELAY_ALL_OFF);
 8003580:	2018      	movs	r0, #24
 8003582:	f001 fe29 	bl	80051d8 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8003586:	2019      	movs	r0, #25
 8003588:	f001 fe26 	bl	80051d8 <SendComand>
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af02      	add	r7, sp, #8
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d12f      	bne.n	8003608 <predefinedActivityKarmienie+0x74>
	{
		SendComand(UCMD_RELAY_ALL_ON);
 80035a8:	2017      	movs	r0, #23
 80035aa:	f001 fe15 	bl	80051d8 <SendComand>
		EF_SetFont(&arial_11ptFontInfo);
 80035ae:	481b      	ldr	r0, [pc, #108]	; (800361c <predefinedActivityKarmienie+0x88>)
 80035b0:	f7fe f89e 	bl	80016f0 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80035b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	230a      	movs	r3, #10
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2328      	movs	r3, #40	; 0x28
 80035c0:	2278      	movs	r2, #120	; 0x78
 80035c2:	213c      	movs	r1, #60	; 0x3c
 80035c4:	2064      	movs	r0, #100	; 0x64
 80035c6:	f7fe f842 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 80035ca:	4915      	ldr	r1, [pc, #84]	; (8003620 <predefinedActivityKarmienie+0x8c>)
 80035cc:	4815      	ldr	r0, [pc, #84]	; (8003624 <predefinedActivityKarmienie+0x90>)
 80035ce:	f009 fcbf 	bl	800cf50 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80035d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	2300      	movs	r3, #0
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	2300      	movs	r3, #0
 80035de:	223e      	movs	r2, #62	; 0x3e
 80035e0:	2177      	movs	r1, #119	; 0x77
 80035e2:	4810      	ldr	r0, [pc, #64]	; (8003624 <predefinedActivityKarmienie+0x90>)
 80035e4:	f7fe fa9e 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 80035e8:	490f      	ldr	r1, [pc, #60]	; (8003628 <predefinedActivityKarmienie+0x94>)
 80035ea:	480e      	ldr	r0, [pc, #56]	; (8003624 <predefinedActivityKarmienie+0x90>)
 80035ec:	f009 fcb0 	bl	800cf50 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80035f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	2300      	movs	r3, #0
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	2300      	movs	r3, #0
 80035fc:	2250      	movs	r2, #80	; 0x50
 80035fe:	2193      	movs	r1, #147	; 0x93
 8003600:	4808      	ldr	r0, [pc, #32]	; (8003624 <predefinedActivityKarmienie+0x90>)
 8003602:	f7fe fa8f 	bl	8001b24 <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8003606:	e005      	b.n	8003614 <predefinedActivityKarmienie+0x80>
		SendComand(UCMD_RELAY_ALL_OFF);
 8003608:	2018      	movs	r0, #24
 800360a:	f001 fde5 	bl	80051d8 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 800360e:	4807      	ldr	r0, [pc, #28]	; (800362c <predefinedActivityKarmienie+0x98>)
 8003610:	f007 fa4e 	bl	800aab0 <HAL_TIM_Base_Start_IT>
}
 8003614:	bf00      	nop
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	08011b48 	.word	0x08011b48
 8003620:	08010dac 	.word	0x08010dac
 8003624:	200002bc 	.word	0x200002bc
 8003628:	08010dbc 	.word	0x08010dbc
 800362c:	200005f8 	.word	0x200005f8

08003630 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button

void drawCurrentStateOfSwitches()
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8003636:	487d      	ldr	r0, [pc, #500]	; (800382c <drawCurrentStateOfSwitches+0x1fc>)
 8003638:	f7fe f85a 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 800363c:	4b7c      	ldr	r3, [pc, #496]	; (8003830 <drawCurrentStateOfSwitches+0x200>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01c      	beq.n	800367e <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003644:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	2305      	movs	r3, #5
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2315      	movs	r3, #21
 8003650:	2221      	movs	r2, #33	; 0x21
 8003652:	2141      	movs	r1, #65	; 0x41
 8003654:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003658:	f7fd fff9 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800365c:	4975      	ldr	r1, [pc, #468]	; (8003834 <drawCurrentStateOfSwitches+0x204>)
 800365e:	4876      	ldr	r0, [pc, #472]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 8003660:	f009 fc76 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003664:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	2300      	movs	r3, #0
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	2300      	movs	r3, #0
 8003670:	2243      	movs	r2, #67	; 0x43
 8003672:	f240 1111 	movw	r1, #273	; 0x111
 8003676:	4870      	ldr	r0, [pc, #448]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 8003678:	f7fe fa54 	bl	8001b24 <EF_PutString>
 800367c:	e01b      	b.n	80036b6 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800367e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	2305      	movs	r3, #5
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	2315      	movs	r3, #21
 800368a:	2221      	movs	r2, #33	; 0x21
 800368c:	2141      	movs	r1, #65	; 0x41
 800368e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003692:	f7fd ffdc 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003696:	4969      	ldr	r1, [pc, #420]	; (800383c <drawCurrentStateOfSwitches+0x20c>)
 8003698:	4867      	ldr	r0, [pc, #412]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 800369a:	f009 fc59 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800369e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	2300      	movs	r3, #0
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2300      	movs	r3, #0
 80036aa:	2243      	movs	r2, #67	; 0x43
 80036ac:	f240 1111 	movw	r1, #273	; 0x111
 80036b0:	4861      	ldr	r0, [pc, #388]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 80036b2:	f7fe fa37 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 80036b6:	4b5e      	ldr	r3, [pc, #376]	; (8003830 <drawCurrentStateOfSwitches+0x200>)
 80036b8:	785b      	ldrb	r3, [r3, #1]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d01c      	beq.n	80036f8 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80036be:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	2305      	movs	r3, #5
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	2315      	movs	r3, #21
 80036ca:	2221      	movs	r2, #33	; 0x21
 80036cc:	215f      	movs	r1, #95	; 0x5f
 80036ce:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80036d2:	f7fd ffbc 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80036d6:	4957      	ldr	r1, [pc, #348]	; (8003834 <drawCurrentStateOfSwitches+0x204>)
 80036d8:	4857      	ldr	r0, [pc, #348]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 80036da:	f009 fc39 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80036de:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	2300      	movs	r3, #0
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	2300      	movs	r3, #0
 80036ea:	2261      	movs	r2, #97	; 0x61
 80036ec:	f240 1111 	movw	r1, #273	; 0x111
 80036f0:	4851      	ldr	r0, [pc, #324]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 80036f2:	f7fe fa17 	bl	8001b24 <EF_PutString>
 80036f6:	e01b      	b.n	8003730 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80036f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	2305      	movs	r3, #5
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	2315      	movs	r3, #21
 8003704:	2221      	movs	r2, #33	; 0x21
 8003706:	215f      	movs	r1, #95	; 0x5f
 8003708:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800370c:	f7fd ff9f 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003710:	494a      	ldr	r1, [pc, #296]	; (800383c <drawCurrentStateOfSwitches+0x20c>)
 8003712:	4849      	ldr	r0, [pc, #292]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 8003714:	f009 fc1c 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003718:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	2300      	movs	r3, #0
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	2300      	movs	r3, #0
 8003724:	2261      	movs	r2, #97	; 0x61
 8003726:	f240 1111 	movw	r1, #273	; 0x111
 800372a:	4843      	ldr	r0, [pc, #268]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 800372c:	f7fe f9fa 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8003730:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <drawCurrentStateOfSwitches+0x200>)
 8003732:	789b      	ldrb	r3, [r3, #2]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01c      	beq.n	8003772 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003738:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	2305      	movs	r3, #5
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	2315      	movs	r3, #21
 8003744:	2221      	movs	r2, #33	; 0x21
 8003746:	217d      	movs	r1, #125	; 0x7d
 8003748:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800374c:	f7fd ff7f 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003750:	4938      	ldr	r1, [pc, #224]	; (8003834 <drawCurrentStateOfSwitches+0x204>)
 8003752:	4839      	ldr	r0, [pc, #228]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 8003754:	f009 fbfc 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003758:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	2300      	movs	r3, #0
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	2300      	movs	r3, #0
 8003764:	227f      	movs	r2, #127	; 0x7f
 8003766:	f240 1111 	movw	r1, #273	; 0x111
 800376a:	4833      	ldr	r0, [pc, #204]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 800376c:	f7fe f9da 	bl	8001b24 <EF_PutString>
 8003770:	e01b      	b.n	80037aa <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003772:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	2305      	movs	r3, #5
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2315      	movs	r3, #21
 800377e:	2221      	movs	r2, #33	; 0x21
 8003780:	217d      	movs	r1, #125	; 0x7d
 8003782:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003786:	f7fd ff62 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800378a:	492c      	ldr	r1, [pc, #176]	; (800383c <drawCurrentStateOfSwitches+0x20c>)
 800378c:	482a      	ldr	r0, [pc, #168]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 800378e:	f009 fbdf 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003792:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	2300      	movs	r3, #0
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2300      	movs	r3, #0
 800379e:	227f      	movs	r2, #127	; 0x7f
 80037a0:	f240 1111 	movw	r1, #273	; 0x111
 80037a4:	4824      	ldr	r0, [pc, #144]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 80037a6:	f7fe f9bd 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 80037aa:	4b21      	ldr	r3, [pc, #132]	; (8003830 <drawCurrentStateOfSwitches+0x200>)
 80037ac:	78db      	ldrb	r3, [r3, #3]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01c      	beq.n	80037ec <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80037b2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	2305      	movs	r3, #5
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	2315      	movs	r3, #21
 80037be:	2221      	movs	r2, #33	; 0x21
 80037c0:	219b      	movs	r1, #155	; 0x9b
 80037c2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80037c6:	f7fd ff42 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80037ca:	491a      	ldr	r1, [pc, #104]	; (8003834 <drawCurrentStateOfSwitches+0x204>)
 80037cc:	481a      	ldr	r0, [pc, #104]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 80037ce:	f009 fbbf 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80037d2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	2300      	movs	r3, #0
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	2300      	movs	r3, #0
 80037de:	229d      	movs	r2, #157	; 0x9d
 80037e0:	f240 1111 	movw	r1, #273	; 0x111
 80037e4:	4814      	ldr	r0, [pc, #80]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 80037e6:	f7fe f99d 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80037ea:	e01b      	b.n	8003824 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80037ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	2305      	movs	r3, #5
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	2315      	movs	r3, #21
 80037f8:	2221      	movs	r2, #33	; 0x21
 80037fa:	219b      	movs	r1, #155	; 0x9b
 80037fc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003800:	f7fd ff25 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003804:	490d      	ldr	r1, [pc, #52]	; (800383c <drawCurrentStateOfSwitches+0x20c>)
 8003806:	480c      	ldr	r0, [pc, #48]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 8003808:	f009 fba2 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800380c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	2300      	movs	r3, #0
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2300      	movs	r3, #0
 8003818:	229d      	movs	r2, #157	; 0x9d
 800381a:	f240 1111 	movw	r1, #273	; 0x111
 800381e:	4806      	ldr	r0, [pc, #24]	; (8003838 <drawCurrentStateOfSwitches+0x208>)
 8003820:	f7fe f980 	bl	8001b24 <EF_PutString>
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	08011b48 	.word	0x08011b48
 8003830:	20000268 	.word	0x20000268
 8003834:	08010db8 	.word	0x08010db8
 8003838:	200002bc 	.word	0x200002bc
 800383c:	08010dbc 	.word	0x08010dbc

08003840 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8003846:	4875      	ldr	r0, [pc, #468]	; (8003a1c <drawCurrentStateOfLights+0x1dc>)
 8003848:	f7fd ff52 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 800384c:	4b74      	ldr	r3, [pc, #464]	; (8003a20 <drawCurrentStateOfLights+0x1e0>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01a      	beq.n	800388a <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003854:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	2305      	movs	r3, #5
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	2315      	movs	r3, #21
 8003860:	2221      	movs	r2, #33	; 0x21
 8003862:	2141      	movs	r1, #65	; 0x41
 8003864:	20c8      	movs	r0, #200	; 0xc8
 8003866:	f7fd fef2 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800386a:	496e      	ldr	r1, [pc, #440]	; (8003a24 <drawCurrentStateOfLights+0x1e4>)
 800386c:	486e      	ldr	r0, [pc, #440]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 800386e:	f009 fb6f 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003872:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	2300      	movs	r3, #0
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2300      	movs	r3, #0
 800387e:	2243      	movs	r2, #67	; 0x43
 8003880:	21cb      	movs	r1, #203	; 0xcb
 8003882:	4869      	ldr	r0, [pc, #420]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 8003884:	f7fe f94e 	bl	8001b24 <EF_PutString>
 8003888:	e019      	b.n	80038be <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800388a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	2305      	movs	r3, #5
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	2315      	movs	r3, #21
 8003896:	2221      	movs	r2, #33	; 0x21
 8003898:	2141      	movs	r1, #65	; 0x41
 800389a:	20c8      	movs	r0, #200	; 0xc8
 800389c:	f7fd fed7 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80038a0:	4962      	ldr	r1, [pc, #392]	; (8003a2c <drawCurrentStateOfLights+0x1ec>)
 80038a2:	4861      	ldr	r0, [pc, #388]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 80038a4:	f009 fb54 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80038a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	2300      	movs	r3, #0
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	2300      	movs	r3, #0
 80038b4:	2243      	movs	r2, #67	; 0x43
 80038b6:	21cb      	movs	r1, #203	; 0xcb
 80038b8:	485b      	ldr	r0, [pc, #364]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 80038ba:	f7fe f933 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 80038be:	4b58      	ldr	r3, [pc, #352]	; (8003a20 <drawCurrentStateOfLights+0x1e0>)
 80038c0:	785b      	ldrb	r3, [r3, #1]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01a      	beq.n	80038fc <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80038c6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	2305      	movs	r3, #5
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2315      	movs	r3, #21
 80038d2:	2221      	movs	r2, #33	; 0x21
 80038d4:	215f      	movs	r1, #95	; 0x5f
 80038d6:	20c8      	movs	r0, #200	; 0xc8
 80038d8:	f7fd feb9 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80038dc:	4951      	ldr	r1, [pc, #324]	; (8003a24 <drawCurrentStateOfLights+0x1e4>)
 80038de:	4852      	ldr	r0, [pc, #328]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 80038e0:	f009 fb36 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80038e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	2300      	movs	r3, #0
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	2300      	movs	r3, #0
 80038f0:	2261      	movs	r2, #97	; 0x61
 80038f2:	21cb      	movs	r1, #203	; 0xcb
 80038f4:	484c      	ldr	r0, [pc, #304]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 80038f6:	f7fe f915 	bl	8001b24 <EF_PutString>
 80038fa:	e019      	b.n	8003930 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80038fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	2305      	movs	r3, #5
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	2315      	movs	r3, #21
 8003908:	2221      	movs	r2, #33	; 0x21
 800390a:	215f      	movs	r1, #95	; 0x5f
 800390c:	20c8      	movs	r0, #200	; 0xc8
 800390e:	f7fd fe9e 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003912:	4946      	ldr	r1, [pc, #280]	; (8003a2c <drawCurrentStateOfLights+0x1ec>)
 8003914:	4844      	ldr	r0, [pc, #272]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 8003916:	f009 fb1b 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800391a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	2300      	movs	r3, #0
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	2300      	movs	r3, #0
 8003926:	2261      	movs	r2, #97	; 0x61
 8003928:	21cb      	movs	r1, #203	; 0xcb
 800392a:	483f      	ldr	r0, [pc, #252]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 800392c:	f7fe f8fa 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 8003930:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <drawCurrentStateOfLights+0x1e0>)
 8003932:	789b      	ldrb	r3, [r3, #2]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01a      	beq.n	800396e <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003938:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	2305      	movs	r3, #5
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	2315      	movs	r3, #21
 8003944:	2221      	movs	r2, #33	; 0x21
 8003946:	217d      	movs	r1, #125	; 0x7d
 8003948:	20c8      	movs	r0, #200	; 0xc8
 800394a:	f7fd fe80 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800394e:	4935      	ldr	r1, [pc, #212]	; (8003a24 <drawCurrentStateOfLights+0x1e4>)
 8003950:	4835      	ldr	r0, [pc, #212]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 8003952:	f009 fafd 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003956:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800395a:	9301      	str	r3, [sp, #4]
 800395c:	2300      	movs	r3, #0
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	2300      	movs	r3, #0
 8003962:	227f      	movs	r2, #127	; 0x7f
 8003964:	21cb      	movs	r1, #203	; 0xcb
 8003966:	4830      	ldr	r0, [pc, #192]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 8003968:	f7fe f8dc 	bl	8001b24 <EF_PutString>
 800396c:	e019      	b.n	80039a2 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800396e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	2305      	movs	r3, #5
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2315      	movs	r3, #21
 800397a:	2221      	movs	r2, #33	; 0x21
 800397c:	217d      	movs	r1, #125	; 0x7d
 800397e:	20c8      	movs	r0, #200	; 0xc8
 8003980:	f7fd fe65 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003984:	4929      	ldr	r1, [pc, #164]	; (8003a2c <drawCurrentStateOfLights+0x1ec>)
 8003986:	4828      	ldr	r0, [pc, #160]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 8003988:	f009 fae2 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800398c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	2300      	movs	r3, #0
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	227f      	movs	r2, #127	; 0x7f
 800399a:	21cb      	movs	r1, #203	; 0xcb
 800399c:	4822      	ldr	r0, [pc, #136]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 800399e:	f7fe f8c1 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 80039a2:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <drawCurrentStateOfLights+0x1e0>)
 80039a4:	78db      	ldrb	r3, [r3, #3]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01a      	beq.n	80039e0 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80039aa:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	2305      	movs	r3, #5
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2315      	movs	r3, #21
 80039b6:	2221      	movs	r2, #33	; 0x21
 80039b8:	219b      	movs	r1, #155	; 0x9b
 80039ba:	20c8      	movs	r0, #200	; 0xc8
 80039bc:	f7fd fe47 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80039c0:	4918      	ldr	r1, [pc, #96]	; (8003a24 <drawCurrentStateOfLights+0x1e4>)
 80039c2:	4819      	ldr	r0, [pc, #100]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 80039c4:	f009 fac4 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80039c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	2300      	movs	r3, #0
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	2300      	movs	r3, #0
 80039d4:	229d      	movs	r2, #157	; 0x9d
 80039d6:	21cb      	movs	r1, #203	; 0xcb
 80039d8:	4813      	ldr	r0, [pc, #76]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 80039da:	f7fe f8a3 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80039de:	e019      	b.n	8003a14 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80039e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	2305      	movs	r3, #5
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2315      	movs	r3, #21
 80039ec:	2221      	movs	r2, #33	; 0x21
 80039ee:	219b      	movs	r1, #155	; 0x9b
 80039f0:	20c8      	movs	r0, #200	; 0xc8
 80039f2:	f7fd fe2c 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80039f6:	490d      	ldr	r1, [pc, #52]	; (8003a2c <drawCurrentStateOfLights+0x1ec>)
 80039f8:	480b      	ldr	r0, [pc, #44]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 80039fa:	f009 faa9 	bl	800cf50 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80039fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	2300      	movs	r3, #0
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	229d      	movs	r2, #157	; 0x9d
 8003a0c:	21cb      	movs	r1, #203	; 0xcb
 8003a0e:	4806      	ldr	r0, [pc, #24]	; (8003a28 <drawCurrentStateOfLights+0x1e8>)
 8003a10:	f7fe f888 	bl	8001b24 <EF_PutString>
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	08011b48 	.word	0x08011b48
 8003a20:	2000026c 	.word	0x2000026c
 8003a24:	08010db8 	.word	0x08010db8
 8003a28:	200002bc 	.word	0x200002bc
 8003a2c:	08010dbc 	.word	0x08010dbc

08003a30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	; 0x28
 8003a34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a36:	f107 0314 	add.w	r3, r7, #20
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	609a      	str	r2, [r3, #8]
 8003a42:	60da      	str	r2, [r3, #12]
 8003a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	4b3f      	ldr	r3, [pc, #252]	; (8003b48 <MX_GPIO_Init+0x118>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	4a3e      	ldr	r2, [pc, #248]	; (8003b48 <MX_GPIO_Init+0x118>)
 8003a50:	f043 0304 	orr.w	r3, r3, #4
 8003a54:	6313      	str	r3, [r2, #48]	; 0x30
 8003a56:	4b3c      	ldr	r3, [pc, #240]	; (8003b48 <MX_GPIO_Init+0x118>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <MX_GPIO_Init+0x118>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	4a37      	ldr	r2, [pc, #220]	; (8003b48 <MX_GPIO_Init+0x118>)
 8003a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a70:	6313      	str	r3, [r2, #48]	; 0x30
 8003a72:	4b35      	ldr	r3, [pc, #212]	; (8003b48 <MX_GPIO_Init+0x118>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <MX_GPIO_Init+0x118>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a30      	ldr	r2, [pc, #192]	; (8003b48 <MX_GPIO_Init+0x118>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <MX_GPIO_Init+0x118>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	4b2a      	ldr	r3, [pc, #168]	; (8003b48 <MX_GPIO_Init+0x118>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4a29      	ldr	r2, [pc, #164]	; (8003b48 <MX_GPIO_Init+0x118>)
 8003aa4:	f043 0302 	orr.w	r3, r3, #2
 8003aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aaa:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <MX_GPIO_Init+0x118>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003abc:	4823      	ldr	r0, [pc, #140]	; (8003b4c <MX_GPIO_Init+0x11c>)
 8003abe:	f003 fa99 	bl	8006ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8003ac8:	4821      	ldr	r0, [pc, #132]	; (8003b50 <MX_GPIO_Init+0x120>)
 8003aca:	f003 fa93 	bl	8006ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 8003ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003adc:	2300      	movs	r3, #0
 8003ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8003ae0:	f107 0314 	add.w	r3, r7, #20
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4819      	ldr	r0, [pc, #100]	; (8003b4c <MX_GPIO_Init+0x11c>)
 8003ae8:	f003 f8e8 	bl	8006cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTC_IRQ_Pin;
 8003aec:	2310      	movs	r3, #16
 8003aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003af0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003af6:	2301      	movs	r3, #1
 8003af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003afa:	f107 0314 	add.w	r3, r7, #20
 8003afe:	4619      	mov	r1, r3
 8003b00:	4814      	ldr	r0, [pc, #80]	; (8003b54 <MX_GPIO_Init+0x124>)
 8003b02:	f003 f8db 	bl	8006cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8003b06:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8003b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b14:	2300      	movs	r3, #0
 8003b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	480c      	ldr	r0, [pc, #48]	; (8003b50 <MX_GPIO_Init+0x120>)
 8003b20:	f003 f8cc 	bl	8006cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003b24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b2a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4806      	ldr	r0, [pc, #24]	; (8003b54 <MX_GPIO_Init+0x124>)
 8003b3c:	f003 f8be 	bl	8006cbc <HAL_GPIO_Init>

}
 8003b40:	bf00      	nop
 8003b42:	3728      	adds	r7, #40	; 0x28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40020800 	.word	0x40020800
 8003b50:	40020400 	.word	0x40020400
 8003b54:	40020000 	.word	0x40020000

08003b58 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b5c:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <MX_I2C1_Init+0x50>)
 8003b5e:	4a13      	ldr	r2, [pc, #76]	; (8003bac <MX_I2C1_Init+0x54>)
 8003b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003b62:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <MX_I2C1_Init+0x50>)
 8003b64:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <MX_I2C1_Init+0x58>)
 8003b66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b68:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <MX_I2C1_Init+0x50>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003b6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <MX_I2C1_Init+0x50>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <MX_I2C1_Init+0x50>)
 8003b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <MX_I2C1_Init+0x50>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <MX_I2C1_Init+0x50>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b88:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <MX_I2C1_Init+0x50>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <MX_I2C1_Init+0x50>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b94:	4804      	ldr	r0, [pc, #16]	; (8003ba8 <MX_I2C1_Init+0x50>)
 8003b96:	f003 fa79 	bl	800708c <HAL_I2C_Init>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ba0:	f000 f9e6 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ba4:	bf00      	nop
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	2000033c 	.word	0x2000033c
 8003bac:	40005400 	.word	0x40005400
 8003bb0:	00061a80 	.word	0x00061a80

08003bb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	60da      	str	r2, [r3, #12]
 8003bca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a4b      	ldr	r2, [pc, #300]	; (8003d00 <HAL_I2C_MspInit+0x14c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	f040 808f 	bne.w	8003cf6 <HAL_I2C_MspInit+0x142>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd8:	2300      	movs	r3, #0
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	4b49      	ldr	r3, [pc, #292]	; (8003d04 <HAL_I2C_MspInit+0x150>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	4a48      	ldr	r2, [pc, #288]	; (8003d04 <HAL_I2C_MspInit+0x150>)
 8003be2:	f043 0302 	orr.w	r3, r3, #2
 8003be6:	6313      	str	r3, [r2, #48]	; 0x30
 8003be8:	4b46      	ldr	r3, [pc, #280]	; (8003d04 <HAL_I2C_MspInit+0x150>)
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bf4:	23c0      	movs	r3, #192	; 0xc0
 8003bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bf8:	2312      	movs	r3, #18
 8003bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c00:	2303      	movs	r3, #3
 8003c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c04:	2304      	movs	r3, #4
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	483e      	ldr	r0, [pc, #248]	; (8003d08 <HAL_I2C_MspInit+0x154>)
 8003c10:	f003 f854 	bl	8006cbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	4b3a      	ldr	r3, [pc, #232]	; (8003d04 <HAL_I2C_MspInit+0x150>)
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	4a39      	ldr	r2, [pc, #228]	; (8003d04 <HAL_I2C_MspInit+0x150>)
 8003c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c22:	6413      	str	r3, [r2, #64]	; 0x40
 8003c24:	4b37      	ldr	r3, [pc, #220]	; (8003d04 <HAL_I2C_MspInit+0x150>)
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003c30:	4b36      	ldr	r3, [pc, #216]	; (8003d0c <HAL_I2C_MspInit+0x158>)
 8003c32:	4a37      	ldr	r2, [pc, #220]	; (8003d10 <HAL_I2C_MspInit+0x15c>)
 8003c34:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003c36:	4b35      	ldr	r3, [pc, #212]	; (8003d0c <HAL_I2C_MspInit+0x158>)
 8003c38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c3c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c3e:	4b33      	ldr	r3, [pc, #204]	; (8003d0c <HAL_I2C_MspInit+0x158>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c44:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <HAL_I2C_MspInit+0x158>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c4a:	4b30      	ldr	r3, [pc, #192]	; (8003d0c <HAL_I2C_MspInit+0x158>)
 8003c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c50:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c52:	4b2e      	ldr	r3, [pc, #184]	; (8003d0c <HAL_I2C_MspInit+0x158>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c58:	4b2c      	ldr	r3, [pc, #176]	; (8003d0c <HAL_I2C_MspInit+0x158>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003c5e:	4b2b      	ldr	r3, [pc, #172]	; (8003d0c <HAL_I2C_MspInit+0x158>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c64:	4b29      	ldr	r3, [pc, #164]	; (8003d0c <HAL_I2C_MspInit+0x158>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c6a:	4b28      	ldr	r3, [pc, #160]	; (8003d0c <HAL_I2C_MspInit+0x158>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003c70:	4826      	ldr	r0, [pc, #152]	; (8003d0c <HAL_I2C_MspInit+0x158>)
 8003c72:	f002 fc13 	bl	800649c <HAL_DMA_Init>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003c7c:	f000 f978 	bl	8003f70 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <HAL_I2C_MspInit+0x158>)
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38
 8003c86:	4a21      	ldr	r2, [pc, #132]	; (8003d0c <HAL_I2C_MspInit+0x158>)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8003c8c:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <HAL_I2C_MspInit+0x160>)
 8003c8e:	4a22      	ldr	r2, [pc, #136]	; (8003d18 <HAL_I2C_MspInit+0x164>)
 8003c90:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_I2C_MspInit+0x160>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c98:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <HAL_I2C_MspInit+0x160>)
 8003c9a:	2240      	movs	r2, #64	; 0x40
 8003c9c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <HAL_I2C_MspInit+0x160>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ca4:	4b1b      	ldr	r3, [pc, #108]	; (8003d14 <HAL_I2C_MspInit+0x160>)
 8003ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003caa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cac:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <HAL_I2C_MspInit+0x160>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cb2:	4b18      	ldr	r3, [pc, #96]	; (8003d14 <HAL_I2C_MspInit+0x160>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003cb8:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <HAL_I2C_MspInit+0x160>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003cbe:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <HAL_I2C_MspInit+0x160>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cc4:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <HAL_I2C_MspInit+0x160>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003cca:	4812      	ldr	r0, [pc, #72]	; (8003d14 <HAL_I2C_MspInit+0x160>)
 8003ccc:	f002 fbe6 	bl	800649c <HAL_DMA_Init>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8003cd6:	f000 f94b 	bl	8003f70 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a0d      	ldr	r2, [pc, #52]	; (8003d14 <HAL_I2C_MspInit+0x160>)
 8003cde:	635a      	str	r2, [r3, #52]	; 0x34
 8003ce0:	4a0c      	ldr	r2, [pc, #48]	; (8003d14 <HAL_I2C_MspInit+0x160>)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2100      	movs	r1, #0
 8003cea:	2020      	movs	r0, #32
 8003cec:	f002 fb75 	bl	80063da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003cf0:	2020      	movs	r0, #32
 8003cf2:	f002 fb8e 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003cf6:	bf00      	nop
 8003cf8:	3728      	adds	r7, #40	; 0x28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40005400 	.word	0x40005400
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40020400 	.word	0x40020400
 8003d0c:	20000390 	.word	0x20000390
 8003d10:	40026010 	.word	0x40026010
 8003d14:	200002dc 	.word	0x200002dc
 8003d18:	40026028 	.word	0x40026028

08003d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d20:	f002 f986 	bl	8006030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d24:	f000 f846 	bl	8003db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d28:	f7ff fe82 	bl	8003a30 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003d2c:	f001 fbc4 	bl	80054b8 <MX_SPI1_Init>
  MX_DMA_Init();
 8003d30:	f7fe fbe0 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003d34:	f002 f87c 	bl	8005e30 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8003d38:	f001 fbf4 	bl	8005524 <MX_SPI3_Init>
  MX_I2C1_Init();
 8003d3c:	f7ff ff0c 	bl	8003b58 <MX_I2C1_Init>
  MX_TIM11_Init();
 8003d40:	f001 fe6a 	bl	8005a18 <MX_TIM11_Init>
  MX_TIM10_Init();
 8003d44:	f001 fe44 	bl	80059d0 <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003d48:	f000 f89c 	bl	8003e84 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 8003d4c:	4813      	ldr	r0, [pc, #76]	; (8003d9c <main+0x80>)
 8003d4e:	f006 feaf 	bl	800aab0 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 8003d52:	4813      	ldr	r0, [pc, #76]	; (8003da0 <main+0x84>)
 8003d54:	f7fe f92e 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8003d58:	4912      	ldr	r1, [pc, #72]	; (8003da4 <main+0x88>)
 8003d5a:	4813      	ldr	r0, [pc, #76]	; (8003da8 <main+0x8c>)
 8003d5c:	f002 f819 	bl	8005d92 <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 8003d60:	2117      	movs	r1, #23
 8003d62:	4812      	ldr	r0, [pc, #72]	; (8003dac <main+0x90>)
 8003d64:	f7fe fb76 	bl	8002454 <XPT2046_Init>
  // RTC Initialization
  DS3231_Init(&hi2c1);
 8003d68:	4811      	ldr	r0, [pc, #68]	; (8003db0 <main+0x94>)
 8003d6a:	f7fe fbfb 	bl	8002564 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8003d6e:	2001      	movs	r0, #1
 8003d70:	f7fe fc52 	bl	8002618 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 8003d74:	2001      	movs	r0, #1
 8003d76:	f7fe fc6f 	bl	8002658 <DS3231_EnableOscillator>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8003d7a:	480b      	ldr	r0, [pc, #44]	; (8003da8 <main+0x8c>)
 8003d7c:	f001 ffbd 	bl	8005cfa <UARTDMA_IsDataReceivedReady>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <main+0x70>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8003d86:	4808      	ldr	r0, [pc, #32]	; (8003da8 <main+0x8c>)
 8003d88:	f000 ff92 	bl	8004cb0 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8003d8c:	4806      	ldr	r0, [pc, #24]	; (8003da8 <main+0x8c>)
 8003d8e:	f001 ffc6 	bl	8005d1e <UARTDMA_TransmitEvent>

	  //
	  // TOUCH
	  //
	  XPT2046_Task();
 8003d92:	f7fe fa8d 	bl	80022b0 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  MenuTFT();
 8003d96:	f000 f8f1 	bl	8003f7c <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8003d9a:	e7ee      	b.n	8003d7a <main+0x5e>
 8003d9c:	20000640 	.word	0x20000640
 8003da0:	200005a0 	.word	0x200005a0
 8003da4:	20000748 	.word	0x20000748
 8003da8:	200003f0 	.word	0x200003f0
 8003dac:	20000548 	.word	0x20000548
 8003db0:	2000033c 	.word	0x2000033c

08003db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b094      	sub	sp, #80	; 0x50
 8003db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dba:	f107 0320 	add.w	r3, r7, #32
 8003dbe:	2230      	movs	r2, #48	; 0x30
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f008 fa3c 	bl	800c240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dc8:	f107 030c 	add.w	r3, r7, #12
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	60da      	str	r2, [r3, #12]
 8003dd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	4b27      	ldr	r3, [pc, #156]	; (8003e7c <SystemClock_Config+0xc8>)
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <SystemClock_Config+0xc8>)
 8003de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de6:	6413      	str	r3, [r2, #64]	; 0x40
 8003de8:	4b24      	ldr	r3, [pc, #144]	; (8003e7c <SystemClock_Config+0xc8>)
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003df4:	2300      	movs	r3, #0
 8003df6:	607b      	str	r3, [r7, #4]
 8003df8:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <SystemClock_Config+0xcc>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a20      	ldr	r2, [pc, #128]	; (8003e80 <SystemClock_Config+0xcc>)
 8003dfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <SystemClock_Config+0xcc>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e10:	2301      	movs	r3, #1
 8003e12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003e24:	230c      	movs	r3, #12
 8003e26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003e28:	2360      	movs	r3, #96	; 0x60
 8003e2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e30:	2304      	movs	r3, #4
 8003e32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e34:	f107 0320 	add.w	r3, r7, #32
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f005 fd8d 	bl	8009958 <HAL_RCC_OscConfig>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003e44:	f000 f894 	bl	8003f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e48:	230f      	movs	r3, #15
 8003e4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003e5e:	f107 030c 	add.w	r3, r7, #12
 8003e62:	2103      	movs	r1, #3
 8003e64:	4618      	mov	r0, r3
 8003e66:	f005 ffef 	bl	8009e48 <HAL_RCC_ClockConfig>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003e70:	f000 f87e 	bl	8003f70 <Error_Handler>
  }
}
 8003e74:	bf00      	nop
 8003e76:	3750      	adds	r7, #80	; 0x50
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40007000 	.word	0x40007000

08003e84 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	200a      	movs	r0, #10
 8003e8e:	f002 faa4 	bl	80063da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003e92:	200a      	movs	r0, #10
 8003e94:	f002 fabd 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	2017      	movs	r0, #23
 8003e9e:	f002 fa9c 	bl	80063da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003ea2:	2017      	movs	r0, #23
 8003ea4:	f002 fab5 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2100      	movs	r1, #0
 8003eac:	201f      	movs	r0, #31
 8003eae:	f002 fa94 	bl	80063da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003eb2:	201f      	movs	r0, #31
 8003eb4:	f002 faad 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2100      	movs	r1, #0
 8003ebc:	2026      	movs	r0, #38	; 0x26
 8003ebe:	f002 fa8c 	bl	80063da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ec2:	2026      	movs	r0, #38	; 0x26
 8003ec4:	f002 faa5 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2100      	movs	r1, #0
 8003ecc:	2033      	movs	r0, #51	; 0x33
 8003ece:	f002 fa84 	bl	80063da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003ed2:	2033      	movs	r0, #51	; 0x33
 8003ed4:	f002 fa9d 	bl	8006412 <HAL_NVIC_EnableIRQ>
}
 8003ed8:	bf00      	nop
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d101      	bne.n	8003ef2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen();
 8003eee:	f7ff fac7 	bl	8003480 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a10      	ldr	r2, [pc, #64]	; (8003f38 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d117      	bne.n	8003f2c <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S)
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d90d      	bls.n	8003f20 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin);
 8003f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f08:	480d      	ldr	r0, [pc, #52]	; (8003f40 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003f0a:	f003 f88c 	bl	8007026 <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f7ff fb40 	bl	8003594 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8003f1a:	480a      	ldr	r0, [pc, #40]	; (8003f44 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003f1c:	f006 fe2a 	bl	800ab74 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	3301      	adds	r3, #1
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003f2a:	701a      	strb	r2, [r3, #0]
	}
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40014800 	.word	0x40014800
 8003f38:	40014400 	.word	0x40014400
 8003f3c:	20000248 	.word	0x20000248
 8003f40:	40020800 	.word	0x40020800
 8003f44:	200005f8 	.word	0x200005f8

08003f48 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin)
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f58:	d101      	bne.n	8003f5e <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8003f5a:	f7fe fa6f 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == RTC_IRQ_Pin) // Interrupt from RTC - alarm one per minute
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2b10      	cmp	r3, #16
 8003f62:	d101      	bne.n	8003f68 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8003f64:	f7fe fbbc 	bl	80026e0 <DS3231_ClearAlarm2Flag>

	}
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f74:	b672      	cpsid	i
}
 8003f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f78:	e7fe      	b.n	8003f78 <Error_Handler+0x8>
	...

08003f7c <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
	switch(State)
 8003f80:	4b35      	ldr	r3, [pc, #212]	; (8004058 <MenuTFT+0xdc>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b05      	cmp	r3, #5
 8003f86:	d865      	bhi.n	8004054 <MenuTFT+0xd8>
 8003f88:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <MenuTFT+0x14>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	08003fa9 	.word	0x08003fa9
 8003f94:	08003fbb 	.word	0x08003fbb
 8003f98:	08003fef 	.word	0x08003fef
 8003f9c:	0800401f 	.word	0x0800401f
 8003fa0:	0800403d 	.word	0x0800403d
 8003fa4:	08004007 	.word	0x08004007
	{
	case MENUTFT_INIT:
		system_init();
 8003fa8:	f7fe fc74 	bl	8002894 <system_init>
		State = MENUTFT_PARAMETERS;
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <MenuTFT+0xdc>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8003fb2:	4b2a      	ldr	r3, [pc, #168]	; (800405c <MenuTFT+0xe0>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
		break;
 8003fb8:	e04c      	b.n	8004054 <MenuTFT+0xd8>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8003fba:	4b28      	ldr	r3, [pc, #160]	; (800405c <MenuTFT+0xe0>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d112      	bne.n	8003fe8 <MenuTFT+0x6c>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8003fc2:	4b27      	ldr	r3, [pc, #156]	; (8004060 <MenuTFT+0xe4>)
 8003fc4:	edd3 7a00 	vldr	s15, [r3]
 8003fc8:	4b26      	ldr	r3, [pc, #152]	; (8004064 <MenuTFT+0xe8>)
 8003fca:	ed93 7a00 	vldr	s14, [r3]
 8003fce:	eeb0 1a47 	vmov.f32	s2, s14
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	eddf 0a24 	vldr	s1, [pc, #144]	; 8004068 <MenuTFT+0xec>
 8003fda:	eeb0 0a67 	vmov.f32	s0, s15
 8003fde:	f7fe fd47 	bl	8002a70 <showCurrentParameters>
			StateChangeFlag = 0;
 8003fe2:	4b1e      	ldr	r3, [pc, #120]	; (800405c <MenuTFT+0xe0>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8003fe8:	f000 f842 	bl	8004070 <TouchParametersActivity>
		break;
 8003fec:	e032      	b.n	8004054 <MenuTFT+0xd8>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8003fee:	4b1b      	ldr	r3, [pc, #108]	; (800405c <MenuTFT+0xe0>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d104      	bne.n	8004000 <MenuTFT+0x84>
		{
			showControlPanel();
 8003ff6:	f7fe fe85 	bl	8002d04 <showControlPanel>
			StateChangeFlag = 0;
 8003ffa:	4b18      	ldr	r3, [pc, #96]	; (800405c <MenuTFT+0xe0>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8004000:	f000 f896 	bl	8004130 <TouchSwitchActivity>
		break;
 8004004:	e026      	b.n	8004054 <MenuTFT+0xd8>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <MenuTFT+0xe0>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d104      	bne.n	8004018 <MenuTFT+0x9c>
		{
			showLightsControlPanel();
 800400e:	f7fe ff53 	bl	8002eb8 <showLightsControlPanel>
			StateChangeFlag = 0;
 8004012:	4b12      	ldr	r3, [pc, #72]	; (800405c <MenuTFT+0xe0>)
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 8004018:	f000 fa50 	bl	80044bc <TouchLightsActivity>
		break;
 800401c:	e01a      	b.n	8004054 <MenuTFT+0xd8>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 800401e:	4b0f      	ldr	r3, [pc, #60]	; (800405c <MenuTFT+0xe0>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d107      	bne.n	8004036 <MenuTFT+0xba>
		{
			showClockSetPanel();
 8004026:	f7ff f803 	bl	8003030 <showClockSetPanel>
			ClockChangeFlag = 1;
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <MenuTFT+0xf0>)
 800402c:	2201      	movs	r2, #1
 800402e:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <MenuTFT+0xe0>)
 8004032:	2200      	movs	r2, #0
 8004034:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8004036:	f000 fbd9 	bl	80047ec <TouchClockActivity>
		break;
 800403a:	e00b      	b.n	8004054 <MenuTFT+0xd8>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 800403c:	4b07      	ldr	r3, [pc, #28]	; (800405c <MenuTFT+0xe0>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d104      	bne.n	800404e <MenuTFT+0xd2>
		{
			showPreparedActivitiesPanel();
 8004044:	f7ff f90c 	bl	8003260 <showPreparedActivitiesPanel>
			StateChangeFlag =0;
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <MenuTFT+0xe0>)
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 800404e:	f000 fd07 	bl	8004a60 <TouchPredefinedActivityActivity>
		break;
 8004052:	bf00      	nop
	}
}
 8004054:	bf00      	nop
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000250 	.word	0x20000250
 800405c:	20000249 	.word	0x20000249
 8004060:	20000254 	.word	0x20000254
 8004064:	2000025c 	.word	0x2000025c
 8004068:	00000000 	.word	0x00000000
 800406c:	2000024a 	.word	0x2000024a

08004070 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8004076:	f7fe f909 	bl	800228c <XPT2046_IsTouched>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d04c      	beq.n	800411a <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004080:	f002 f83c 	bl	80060fc <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	4b27      	ldr	r3, [pc, #156]	; (8004124 <TouchParametersActivity+0xb4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004090:	d343      	bcc.n	800411a <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004092:	1d3a      	adds	r2, r7, #4
 8004094:	1dbb      	adds	r3, r7, #6
 8004096:	4611      	mov	r1, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe f8b9 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	2b09      	cmp	r3, #9
 80040a2:	d90f      	bls.n	80040c4 <TouchParametersActivity+0x54>
 80040a4:	88fb      	ldrh	r3, [r7, #6]
 80040a6:	2b6e      	cmp	r3, #110	; 0x6e
 80040a8:	d80c      	bhi.n	80040c4 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80040aa:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80040ac:	2bd7      	cmp	r3, #215	; 0xd7
 80040ae:	d909      	bls.n	80040c4 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80040b0:	88bb      	ldrh	r3, [r7, #4]
 80040b2:	2bec      	cmp	r3, #236	; 0xec
 80040b4:	d806      	bhi.n	80040c4 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 80040b6:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <TouchParametersActivity+0xb8>)
 80040b8:	2205      	movs	r2, #5
 80040ba:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80040bc:	4b1b      	ldr	r3, [pc, #108]	; (800412c <TouchParametersActivity+0xbc>)
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e025      	b.n	8004110 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80040c4:	88fb      	ldrh	r3, [r7, #6]
 80040c6:	2bdb      	cmp	r3, #219	; 0xdb
 80040c8:	d910      	bls.n	80040ec <TouchParametersActivity+0x7c>
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80040d0:	d20c      	bcs.n	80040ec <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80040d2:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80040d4:	2bd7      	cmp	r3, #215	; 0xd7
 80040d6:	d909      	bls.n	80040ec <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80040d8:	88bb      	ldrh	r3, [r7, #4]
 80040da:	2bec      	cmp	r3, #236	; 0xec
 80040dc:	d806      	bhi.n	80040ec <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 80040de:	4b12      	ldr	r3, [pc, #72]	; (8004128 <TouchParametersActivity+0xb8>)
 80040e0:	2202      	movs	r2, #2
 80040e2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <TouchParametersActivity+0xbc>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	e011      	b.n	8004110 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	2b77      	cmp	r3, #119	; 0x77
 80040f0:	d90e      	bls.n	8004110 <TouchParametersActivity+0xa0>
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	2bd2      	cmp	r3, #210	; 0xd2
 80040f6:	d80b      	bhi.n	8004110 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80040f8:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80040fa:	2bd7      	cmp	r3, #215	; 0xd7
 80040fc:	d908      	bls.n	8004110 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80040fe:	88bb      	ldrh	r3, [r7, #4]
 8004100:	2bec      	cmp	r3, #236	; 0xec
 8004102:	d805      	bhi.n	8004110 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8004104:	4b08      	ldr	r3, [pc, #32]	; (8004128 <TouchParametersActivity+0xb8>)
 8004106:	2203      	movs	r2, #3
 8004108:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <TouchParametersActivity+0xbc>)
 800410c:	2201      	movs	r2, #1
 800410e:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8004110:	f001 fff4 	bl	80060fc <HAL_GetTick>
 8004114:	4603      	mov	r3, r0
 8004116:	4a03      	ldr	r2, [pc, #12]	; (8004124 <TouchParametersActivity+0xb4>)
 8004118:	6013      	str	r3, [r2, #0]
		}
	}
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	2000024c 	.word	0x2000024c
 8004128:	20000250 	.word	0x20000250
 800412c:	20000249 	.word	0x20000249

08004130 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8004136:	f7fe f8a9 	bl	800228c <XPT2046_IsTouched>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 81af 	beq.w	80044a0 <TouchSwitchActivity+0x370>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004142:	f001 ffdb 	bl	80060fc <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	4bb8      	ldr	r3, [pc, #736]	; (800442c <TouchSwitchActivity+0x2fc>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004152:	f0c0 81a5 	bcc.w	80044a0 <TouchSwitchActivity+0x370>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004156:	1d3a      	adds	r2, r7, #4
 8004158:	1dbb      	adds	r3, r7, #6
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe f857 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	2b09      	cmp	r3, #9
 8004166:	d90f      	bls.n	8004188 <TouchSwitchActivity+0x58>
 8004168:	88fb      	ldrh	r3, [r7, #6]
 800416a:	2b6e      	cmp	r3, #110	; 0x6e
 800416c:	d80c      	bhi.n	8004188 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800416e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004170:	2bd7      	cmp	r3, #215	; 0xd7
 8004172:	d909      	bls.n	8004188 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004174:	88bb      	ldrh	r3, [r7, #4]
 8004176:	2bec      	cmp	r3, #236	; 0xec
 8004178:	d806      	bhi.n	8004188 <TouchSwitchActivity+0x58>
			{
				State = MENUTFT_PARAMETERS;
 800417a:	4bad      	ldr	r3, [pc, #692]	; (8004430 <TouchSwitchActivity+0x300>)
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004180:	4bac      	ldr	r3, [pc, #688]	; (8004434 <TouchSwitchActivity+0x304>)
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	e186      	b.n	8004496 <TouchSwitchActivity+0x366>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	2bdb      	cmp	r3, #219	; 0xdb
 800418c:	d910      	bls.n	80041b0 <TouchSwitchActivity+0x80>
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004194:	d20c      	bcs.n	80041b0 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004196:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004198:	2bd7      	cmp	r3, #215	; 0xd7
 800419a:	d909      	bls.n	80041b0 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800419c:	88bb      	ldrh	r3, [r7, #4]
 800419e:	2bec      	cmp	r3, #236	; 0xec
 80041a0:	d806      	bhi.n	80041b0 <TouchSwitchActivity+0x80>
			{
				State = MENUTFT_LIGHTS;
 80041a2:	4ba3      	ldr	r3, [pc, #652]	; (8004430 <TouchSwitchActivity+0x300>)
 80041a4:	2205      	movs	r2, #5
 80041a6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80041a8:	4ba2      	ldr	r3, [pc, #648]	; (8004434 <TouchSwitchActivity+0x304>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	701a      	strb	r2, [r3, #0]
 80041ae:	e172      	b.n	8004496 <TouchSwitchActivity+0x366>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	2b77      	cmp	r3, #119	; 0x77
 80041b4:	d90f      	bls.n	80041d6 <TouchSwitchActivity+0xa6>
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	2bd2      	cmp	r3, #210	; 0xd2
 80041ba:	d80c      	bhi.n	80041d6 <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80041bc:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80041be:	2bd7      	cmp	r3, #215	; 0xd7
 80041c0:	d909      	bls.n	80041d6 <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80041c2:	88bb      	ldrh	r3, [r7, #4]
 80041c4:	2bec      	cmp	r3, #236	; 0xec
 80041c6:	d806      	bhi.n	80041d6 <TouchSwitchActivity+0xa6>
			{
				State = MENUTFT_ACTIVITIES;
 80041c8:	4b99      	ldr	r3, [pc, #612]	; (8004430 <TouchSwitchActivity+0x300>)
 80041ca:	2204      	movs	r2, #4
 80041cc:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80041ce:	4b99      	ldr	r3, [pc, #612]	; (8004434 <TouchSwitchActivity+0x304>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e15f      	b.n	8004496 <TouchSwitchActivity+0x366>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80041dc:	f0c0 815b 	bcc.w	8004496 <TouchSwitchActivity+0x366>
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80041e6:	f080 8156 	bcs.w	8004496 <TouchSwitchActivity+0x366>
			{
				EF_SetFont(&arial_11ptFontInfo);
 80041ea:	4893      	ldr	r0, [pc, #588]	; (8004438 <TouchSwitchActivity+0x308>)
 80041ec:	f7fd fa80 	bl	80016f0 <EF_SetFont>
				//
				// FIRST SWITCH
				if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 80041f0:	88bb      	ldrh	r3, [r7, #4]
 80041f2:	2b40      	cmp	r3, #64	; 0x40
 80041f4:	d94c      	bls.n	8004290 <TouchSwitchActivity+0x160>
 80041f6:	88bb      	ldrh	r3, [r7, #4]
 80041f8:	2b56      	cmp	r3, #86	; 0x56
 80041fa:	d849      	bhi.n	8004290 <TouchSwitchActivity+0x160>
				{
					if(SwitchesButtonState[0] >= 1) // if is ON
 80041fc:	4b8f      	ldr	r3, [pc, #572]	; (800443c <TouchSwitchActivity+0x30c>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d022      	beq.n	800424a <TouchSwitchActivity+0x11a>
					{
						SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8004204:	2006      	movs	r0, #6
 8004206:	f000 ffe7 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800420a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	2305      	movs	r3, #5
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2315      	movs	r3, #21
 8004216:	2221      	movs	r2, #33	; 0x21
 8004218:	2141      	movs	r1, #65	; 0x41
 800421a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800421e:	f7fd fa16 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004222:	4987      	ldr	r1, [pc, #540]	; (8004440 <TouchSwitchActivity+0x310>)
 8004224:	4887      	ldr	r0, [pc, #540]	; (8004444 <TouchSwitchActivity+0x314>)
 8004226:	f008 fe93 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800422a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800422e:	9301      	str	r3, [sp, #4]
 8004230:	2300      	movs	r3, #0
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	2300      	movs	r3, #0
 8004236:	2243      	movs	r2, #67	; 0x43
 8004238:	f240 1111 	movw	r1, #273	; 0x111
 800423c:	4881      	ldr	r0, [pc, #516]	; (8004444 <TouchSwitchActivity+0x314>)
 800423e:	f7fd fc71 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 0;
 8004242:	4b7e      	ldr	r3, [pc, #504]	; (800443c <TouchSwitchActivity+0x30c>)
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
					if(SwitchesButtonState[0] >= 1) // if is ON
 8004248:	e122      	b.n	8004490 <TouchSwitchActivity+0x360>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 800424a:	2005      	movs	r0, #5
 800424c:	f000 ffc4 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004250:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	2305      	movs	r3, #5
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	2315      	movs	r3, #21
 800425c:	2221      	movs	r2, #33	; 0x21
 800425e:	2141      	movs	r1, #65	; 0x41
 8004260:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004264:	f7fd f9f3 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004268:	4977      	ldr	r1, [pc, #476]	; (8004448 <TouchSwitchActivity+0x318>)
 800426a:	4876      	ldr	r0, [pc, #472]	; (8004444 <TouchSwitchActivity+0x314>)
 800426c:	f008 fe70 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004270:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	2300      	movs	r3, #0
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	2300      	movs	r3, #0
 800427c:	2243      	movs	r2, #67	; 0x43
 800427e:	f240 1111 	movw	r1, #273	; 0x111
 8004282:	4870      	ldr	r0, [pc, #448]	; (8004444 <TouchSwitchActivity+0x314>)
 8004284:	f7fd fc4e 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 1;
 8004288:	4b6c      	ldr	r3, [pc, #432]	; (800443c <TouchSwitchActivity+0x30c>)
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
					if(SwitchesButtonState[0] >= 1) // if is ON
 800428e:	e0ff      	b.n	8004490 <TouchSwitchActivity+0x360>
					}

				}
				//
				// SECOND SWITCH
				else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8004290:	88bb      	ldrh	r3, [r7, #4]
 8004292:	2b5e      	cmp	r3, #94	; 0x5e
 8004294:	d94c      	bls.n	8004330 <TouchSwitchActivity+0x200>
 8004296:	88bb      	ldrh	r3, [r7, #4]
 8004298:	2b74      	cmp	r3, #116	; 0x74
 800429a:	d849      	bhi.n	8004330 <TouchSwitchActivity+0x200>
				{
					if(SwitchesButtonState[1] >= 1) // if is ON
 800429c:	4b67      	ldr	r3, [pc, #412]	; (800443c <TouchSwitchActivity+0x30c>)
 800429e:	785b      	ldrb	r3, [r3, #1]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d022      	beq.n	80042ea <TouchSwitchActivity+0x1ba>
					{
						SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 80042a4:	2008      	movs	r0, #8
 80042a6:	f000 ff97 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80042aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	2305      	movs	r3, #5
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	2315      	movs	r3, #21
 80042b6:	2221      	movs	r2, #33	; 0x21
 80042b8:	215f      	movs	r1, #95	; 0x5f
 80042ba:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80042be:	f7fd f9c6 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 80042c2:	495f      	ldr	r1, [pc, #380]	; (8004440 <TouchSwitchActivity+0x310>)
 80042c4:	485f      	ldr	r0, [pc, #380]	; (8004444 <TouchSwitchActivity+0x314>)
 80042c6:	f008 fe43 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80042ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042ce:	9301      	str	r3, [sp, #4]
 80042d0:	2300      	movs	r3, #0
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	2300      	movs	r3, #0
 80042d6:	2261      	movs	r2, #97	; 0x61
 80042d8:	f240 1111 	movw	r1, #273	; 0x111
 80042dc:	4859      	ldr	r0, [pc, #356]	; (8004444 <TouchSwitchActivity+0x314>)
 80042de:	f7fd fc21 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 0;
 80042e2:	4b56      	ldr	r3, [pc, #344]	; (800443c <TouchSwitchActivity+0x30c>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	705a      	strb	r2, [r3, #1]
					if(SwitchesButtonState[1] >= 1) // if is ON
 80042e8:	e0d2      	b.n	8004490 <TouchSwitchActivity+0x360>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 80042ea:	2007      	movs	r0, #7
 80042ec:	f000 ff74 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80042f0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	2305      	movs	r3, #5
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	2315      	movs	r3, #21
 80042fc:	2221      	movs	r2, #33	; 0x21
 80042fe:	215f      	movs	r1, #95	; 0x5f
 8004300:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004304:	f7fd f9a3 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004308:	494f      	ldr	r1, [pc, #316]	; (8004448 <TouchSwitchActivity+0x318>)
 800430a:	484e      	ldr	r0, [pc, #312]	; (8004444 <TouchSwitchActivity+0x314>)
 800430c:	f008 fe20 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004310:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	2300      	movs	r3, #0
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	2300      	movs	r3, #0
 800431c:	2261      	movs	r2, #97	; 0x61
 800431e:	f240 1111 	movw	r1, #273	; 0x111
 8004322:	4848      	ldr	r0, [pc, #288]	; (8004444 <TouchSwitchActivity+0x314>)
 8004324:	f7fd fbfe 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 1;
 8004328:	4b44      	ldr	r3, [pc, #272]	; (800443c <TouchSwitchActivity+0x30c>)
 800432a:	2201      	movs	r2, #1
 800432c:	705a      	strb	r2, [r3, #1]
					if(SwitchesButtonState[1] >= 1) // if is ON
 800432e:	e0af      	b.n	8004490 <TouchSwitchActivity+0x360>
					}
				}
				//
				// THIRD SWITCH
				else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8004330:	88bb      	ldrh	r3, [r7, #4]
 8004332:	2b7c      	cmp	r3, #124	; 0x7c
 8004334:	d94c      	bls.n	80043d0 <TouchSwitchActivity+0x2a0>
 8004336:	88bb      	ldrh	r3, [r7, #4]
 8004338:	2b92      	cmp	r3, #146	; 0x92
 800433a:	d849      	bhi.n	80043d0 <TouchSwitchActivity+0x2a0>
				{
					if(SwitchesButtonState[2] >= 1) // if is ON
 800433c:	4b3f      	ldr	r3, [pc, #252]	; (800443c <TouchSwitchActivity+0x30c>)
 800433e:	789b      	ldrb	r3, [r3, #2]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d022      	beq.n	800438a <TouchSwitchActivity+0x25a>
					{
						SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8004344:	200a      	movs	r0, #10
 8004346:	f000 ff47 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800434a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	2305      	movs	r3, #5
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	2315      	movs	r3, #21
 8004356:	2221      	movs	r2, #33	; 0x21
 8004358:	217d      	movs	r1, #125	; 0x7d
 800435a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800435e:	f7fd f976 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004362:	4937      	ldr	r1, [pc, #220]	; (8004440 <TouchSwitchActivity+0x310>)
 8004364:	4837      	ldr	r0, [pc, #220]	; (8004444 <TouchSwitchActivity+0x314>)
 8004366:	f008 fdf3 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800436a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	2300      	movs	r3, #0
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2300      	movs	r3, #0
 8004376:	227f      	movs	r2, #127	; 0x7f
 8004378:	f240 1111 	movw	r1, #273	; 0x111
 800437c:	4831      	ldr	r0, [pc, #196]	; (8004444 <TouchSwitchActivity+0x314>)
 800437e:	f7fd fbd1 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 0;
 8004382:	4b2e      	ldr	r3, [pc, #184]	; (800443c <TouchSwitchActivity+0x30c>)
 8004384:	2200      	movs	r2, #0
 8004386:	709a      	strb	r2, [r3, #2]
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004388:	e082      	b.n	8004490 <TouchSwitchActivity+0x360>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 800438a:	2009      	movs	r0, #9
 800438c:	f000 ff24 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004390:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	2305      	movs	r3, #5
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	2315      	movs	r3, #21
 800439c:	2221      	movs	r2, #33	; 0x21
 800439e:	217d      	movs	r1, #125	; 0x7d
 80043a0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80043a4:	f7fd f953 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 80043a8:	4927      	ldr	r1, [pc, #156]	; (8004448 <TouchSwitchActivity+0x318>)
 80043aa:	4826      	ldr	r0, [pc, #152]	; (8004444 <TouchSwitchActivity+0x314>)
 80043ac:	f008 fdd0 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80043b0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80043b4:	9301      	str	r3, [sp, #4]
 80043b6:	2300      	movs	r3, #0
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	2300      	movs	r3, #0
 80043bc:	227f      	movs	r2, #127	; 0x7f
 80043be:	f240 1111 	movw	r1, #273	; 0x111
 80043c2:	4820      	ldr	r0, [pc, #128]	; (8004444 <TouchSwitchActivity+0x314>)
 80043c4:	f7fd fbae 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 1;
 80043c8:	4b1c      	ldr	r3, [pc, #112]	; (800443c <TouchSwitchActivity+0x30c>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	709a      	strb	r2, [r3, #2]
					if(SwitchesButtonState[2] >= 1) // if is ON
 80043ce:	e05f      	b.n	8004490 <TouchSwitchActivity+0x360>
					}
				}
				//
				// FOURTH SWITCH
				else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 80043d0:	88bb      	ldrh	r3, [r7, #4]
 80043d2:	2b9a      	cmp	r3, #154	; 0x9a
 80043d4:	d95c      	bls.n	8004490 <TouchSwitchActivity+0x360>
 80043d6:	88bb      	ldrh	r3, [r7, #4]
 80043d8:	2bb0      	cmp	r3, #176	; 0xb0
 80043da:	d859      	bhi.n	8004490 <TouchSwitchActivity+0x360>
				{
					if(SwitchesButtonState[3] >= 1) // if is ON
 80043dc:	4b17      	ldr	r3, [pc, #92]	; (800443c <TouchSwitchActivity+0x30c>)
 80043de:	78db      	ldrb	r3, [r3, #3]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d033      	beq.n	800444c <TouchSwitchActivity+0x31c>
					{
						SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 80043e4:	200c      	movs	r0, #12
 80043e6:	f000 fef7 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80043ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	2305      	movs	r3, #5
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	2315      	movs	r3, #21
 80043f6:	2221      	movs	r2, #33	; 0x21
 80043f8:	219b      	movs	r1, #155	; 0x9b
 80043fa:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80043fe:	f7fd f926 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004402:	490f      	ldr	r1, [pc, #60]	; (8004440 <TouchSwitchActivity+0x310>)
 8004404:	480f      	ldr	r0, [pc, #60]	; (8004444 <TouchSwitchActivity+0x314>)
 8004406:	f008 fda3 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800440a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800440e:	9301      	str	r3, [sp, #4]
 8004410:	2300      	movs	r3, #0
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	2300      	movs	r3, #0
 8004416:	229d      	movs	r2, #157	; 0x9d
 8004418:	f240 1111 	movw	r1, #273	; 0x111
 800441c:	4809      	ldr	r0, [pc, #36]	; (8004444 <TouchSwitchActivity+0x314>)
 800441e:	f7fd fb81 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 0;
 8004422:	4b06      	ldr	r3, [pc, #24]	; (800443c <TouchSwitchActivity+0x30c>)
 8004424:	2200      	movs	r2, #0
 8004426:	70da      	strb	r2, [r3, #3]
 8004428:	e032      	b.n	8004490 <TouchSwitchActivity+0x360>
 800442a:	bf00      	nop
 800442c:	2000024c 	.word	0x2000024c
 8004430:	20000250 	.word	0x20000250
 8004434:	20000249 	.word	0x20000249
 8004438:	08011b48 	.word	0x08011b48
 800443c:	20000268 	.word	0x20000268
 8004440:	08010de8 	.word	0x08010de8
 8004444:	200002bc 	.word	0x200002bc
 8004448:	08010dec 	.word	0x08010dec
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 800444c:	200b      	movs	r0, #11
 800444e:	f000 fec3 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004452:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004456:	9301      	str	r3, [sp, #4]
 8004458:	2305      	movs	r3, #5
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	2315      	movs	r3, #21
 800445e:	2221      	movs	r2, #33	; 0x21
 8004460:	219b      	movs	r1, #155	; 0x9b
 8004462:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004466:	f7fd f8f2 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 800446a:	490f      	ldr	r1, [pc, #60]	; (80044a8 <TouchSwitchActivity+0x378>)
 800446c:	480f      	ldr	r0, [pc, #60]	; (80044ac <TouchSwitchActivity+0x37c>)
 800446e:	f008 fd6f 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004472:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	2300      	movs	r3, #0
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	2300      	movs	r3, #0
 800447e:	229d      	movs	r2, #157	; 0x9d
 8004480:	f240 1111 	movw	r1, #273	; 0x111
 8004484:	4809      	ldr	r0, [pc, #36]	; (80044ac <TouchSwitchActivity+0x37c>)
 8004486:	f7fd fb4d 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 1;
 800448a:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <TouchSwitchActivity+0x380>)
 800448c:	2201      	movs	r2, #1
 800448e:	70da      	strb	r2, [r3, #3]
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 8004490:	4808      	ldr	r0, [pc, #32]	; (80044b4 <TouchSwitchActivity+0x384>)
 8004492:	f7fd f92d 	bl	80016f0 <EF_SetFont>
			}
			TimerTouch = HAL_GetTick();
 8004496:	f001 fe31 	bl	80060fc <HAL_GetTick>
 800449a:	4603      	mov	r3, r0
 800449c:	4a06      	ldr	r2, [pc, #24]	; (80044b8 <TouchSwitchActivity+0x388>)
 800449e:	6013      	str	r3, [r2, #0]
		}
	}
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	08010dec 	.word	0x08010dec
 80044ac:	200002bc 	.word	0x200002bc
 80044b0:	20000268 	.word	0x20000268
 80044b4:	08013ac0 	.word	0x08013ac0
 80044b8:	2000024c 	.word	0x2000024c

080044bc <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80044c2:	f7fd fee3 	bl	800228c <XPT2046_IsTouched>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8179 	beq.w	80047c0 <TouchLightsActivity+0x304>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80044ce:	f001 fe15 	bl	80060fc <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	4bbc      	ldr	r3, [pc, #752]	; (80047c8 <TouchLightsActivity+0x30c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044de:	f0c0 816f 	bcc.w	80047c0 <TouchLightsActivity+0x304>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80044e2:	1d3a      	adds	r2, r7, #4
 80044e4:	1dbb      	adds	r3, r7, #6
 80044e6:	4611      	mov	r1, r2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fd fe91 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	2b09      	cmp	r3, #9
 80044f2:	d90f      	bls.n	8004514 <TouchLightsActivity+0x58>
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	2b6e      	cmp	r3, #110	; 0x6e
 80044f8:	d80c      	bhi.n	8004514 <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80044fa:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80044fc:	2bd7      	cmp	r3, #215	; 0xd7
 80044fe:	d909      	bls.n	8004514 <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004500:	88bb      	ldrh	r3, [r7, #4]
 8004502:	2bec      	cmp	r3, #236	; 0xec
 8004504:	d806      	bhi.n	8004514 <TouchLightsActivity+0x58>
			{
				State = MENUTFT_SWITCH;
 8004506:	4bb1      	ldr	r3, [pc, #708]	; (80047cc <TouchLightsActivity+0x310>)
 8004508:	2202      	movs	r2, #2
 800450a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800450c:	4bb0      	ldr	r3, [pc, #704]	; (80047d0 <TouchLightsActivity+0x314>)
 800450e:	2201      	movs	r2, #1
 8004510:	701a      	strb	r2, [r3, #0]
 8004512:	e150      	b.n	80047b6 <TouchLightsActivity+0x2fa>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	2bdb      	cmp	r3, #219	; 0xdb
 8004518:	d910      	bls.n	800453c <TouchLightsActivity+0x80>
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004520:	d20c      	bcs.n	800453c <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004522:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004524:	2bd7      	cmp	r3, #215	; 0xd7
 8004526:	d909      	bls.n	800453c <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004528:	88bb      	ldrh	r3, [r7, #4]
 800452a:	2bec      	cmp	r3, #236	; 0xec
 800452c:	d806      	bhi.n	800453c <TouchLightsActivity+0x80>
			{
				State = MENUTFT_PARAMETERS;
 800452e:	4ba7      	ldr	r3, [pc, #668]	; (80047cc <TouchLightsActivity+0x310>)
 8004530:	2201      	movs	r2, #1
 8004532:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004534:	4ba6      	ldr	r3, [pc, #664]	; (80047d0 <TouchLightsActivity+0x314>)
 8004536:	2201      	movs	r2, #1
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	e13c      	b.n	80047b6 <TouchLightsActivity+0x2fa>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	2bc7      	cmp	r3, #199	; 0xc7
 8004540:	f240 8139 	bls.w	80047b6 <TouchLightsActivity+0x2fa>
 8004544:	88fb      	ldrh	r3, [r7, #6]
 8004546:	2be9      	cmp	r3, #233	; 0xe9
 8004548:	f200 8135 	bhi.w	80047b6 <TouchLightsActivity+0x2fa>
			{
				EF_SetFont(&arial_11ptFontInfo);
 800454c:	48a1      	ldr	r0, [pc, #644]	; (80047d4 <TouchLightsActivity+0x318>)
 800454e:	f7fd f8cf 	bl	80016f0 <EF_SetFont>

				//
				// FIRST LIGHT
				if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8004552:	88bb      	ldrh	r3, [r7, #4]
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	d948      	bls.n	80045ea <TouchLightsActivity+0x12e>
 8004558:	88bb      	ldrh	r3, [r7, #4]
 800455a:	2b56      	cmp	r3, #86	; 0x56
 800455c:	d845      	bhi.n	80045ea <TouchLightsActivity+0x12e>
				{
					if(LightsButtonState[0] >= 1) // if is ON
 800455e:	4b9e      	ldr	r3, [pc, #632]	; (80047d8 <TouchLightsActivity+0x31c>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d020      	beq.n	80045a8 <TouchLightsActivity+0xec>
					{
						SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8004566:	200e      	movs	r0, #14
 8004568:	f000 fe36 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800456c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	2305      	movs	r3, #5
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	2315      	movs	r3, #21
 8004578:	2221      	movs	r2, #33	; 0x21
 800457a:	2141      	movs	r1, #65	; 0x41
 800457c:	20c8      	movs	r0, #200	; 0xc8
 800457e:	f7fd f866 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004582:	4996      	ldr	r1, [pc, #600]	; (80047dc <TouchLightsActivity+0x320>)
 8004584:	4896      	ldr	r0, [pc, #600]	; (80047e0 <TouchLightsActivity+0x324>)
 8004586:	f008 fce3 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800458a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	2300      	movs	r3, #0
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	2300      	movs	r3, #0
 8004596:	2243      	movs	r2, #67	; 0x43
 8004598:	21cb      	movs	r1, #203	; 0xcb
 800459a:	4891      	ldr	r0, [pc, #580]	; (80047e0 <TouchLightsActivity+0x324>)
 800459c:	f7fd fac2 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 0;
 80045a0:	4b8d      	ldr	r3, [pc, #564]	; (80047d8 <TouchLightsActivity+0x31c>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	701a      	strb	r2, [r3, #0]
					if(LightsButtonState[0] >= 1) // if is ON
 80045a6:	e103      	b.n	80047b0 <TouchLightsActivity+0x2f4>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 80045a8:	200d      	movs	r0, #13
 80045aa:	f000 fe15 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80045ae:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	2305      	movs	r3, #5
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2315      	movs	r3, #21
 80045ba:	2221      	movs	r2, #33	; 0x21
 80045bc:	2141      	movs	r1, #65	; 0x41
 80045be:	20c8      	movs	r0, #200	; 0xc8
 80045c0:	f7fd f845 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 80045c4:	4987      	ldr	r1, [pc, #540]	; (80047e4 <TouchLightsActivity+0x328>)
 80045c6:	4886      	ldr	r0, [pc, #536]	; (80047e0 <TouchLightsActivity+0x324>)
 80045c8:	f008 fcc2 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80045cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	2300      	movs	r3, #0
 80045d8:	2243      	movs	r2, #67	; 0x43
 80045da:	21cb      	movs	r1, #203	; 0xcb
 80045dc:	4880      	ldr	r0, [pc, #512]	; (80047e0 <TouchLightsActivity+0x324>)
 80045de:	f7fd faa1 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 1;
 80045e2:	4b7d      	ldr	r3, [pc, #500]	; (80047d8 <TouchLightsActivity+0x31c>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
					if(LightsButtonState[0] >= 1) // if is ON
 80045e8:	e0e2      	b.n	80047b0 <TouchLightsActivity+0x2f4>
					}
				}
				//
				// SECOND LIGHT
				else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 80045ea:	88bb      	ldrh	r3, [r7, #4]
 80045ec:	2b5e      	cmp	r3, #94	; 0x5e
 80045ee:	d948      	bls.n	8004682 <TouchLightsActivity+0x1c6>
 80045f0:	88bb      	ldrh	r3, [r7, #4]
 80045f2:	2b74      	cmp	r3, #116	; 0x74
 80045f4:	d845      	bhi.n	8004682 <TouchLightsActivity+0x1c6>
				{
					if(LightsButtonState[1] >= 1) // if is ON
 80045f6:	4b78      	ldr	r3, [pc, #480]	; (80047d8 <TouchLightsActivity+0x31c>)
 80045f8:	785b      	ldrb	r3, [r3, #1]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d020      	beq.n	8004640 <TouchLightsActivity+0x184>
					{
						SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 80045fe:	2010      	movs	r0, #16
 8004600:	f000 fdea 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004604:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	2305      	movs	r3, #5
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	2315      	movs	r3, #21
 8004610:	2221      	movs	r2, #33	; 0x21
 8004612:	215f      	movs	r1, #95	; 0x5f
 8004614:	20c8      	movs	r0, #200	; 0xc8
 8004616:	f7fd f81a 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 800461a:	4970      	ldr	r1, [pc, #448]	; (80047dc <TouchLightsActivity+0x320>)
 800461c:	4870      	ldr	r0, [pc, #448]	; (80047e0 <TouchLightsActivity+0x324>)
 800461e:	f008 fc97 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004622:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	2300      	movs	r3, #0
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	2300      	movs	r3, #0
 800462e:	2261      	movs	r2, #97	; 0x61
 8004630:	21cb      	movs	r1, #203	; 0xcb
 8004632:	486b      	ldr	r0, [pc, #428]	; (80047e0 <TouchLightsActivity+0x324>)
 8004634:	f7fd fa76 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 0;
 8004638:	4b67      	ldr	r3, [pc, #412]	; (80047d8 <TouchLightsActivity+0x31c>)
 800463a:	2200      	movs	r2, #0
 800463c:	705a      	strb	r2, [r3, #1]
					if(LightsButtonState[1] >= 1) // if is ON
 800463e:	e0b7      	b.n	80047b0 <TouchLightsActivity+0x2f4>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8004640:	200f      	movs	r0, #15
 8004642:	f000 fdc9 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004646:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	2305      	movs	r3, #5
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	2315      	movs	r3, #21
 8004652:	2221      	movs	r2, #33	; 0x21
 8004654:	215f      	movs	r1, #95	; 0x5f
 8004656:	20c8      	movs	r0, #200	; 0xc8
 8004658:	f7fc fff9 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 800465c:	4961      	ldr	r1, [pc, #388]	; (80047e4 <TouchLightsActivity+0x328>)
 800465e:	4860      	ldr	r0, [pc, #384]	; (80047e0 <TouchLightsActivity+0x324>)
 8004660:	f008 fc76 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004664:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	2300      	movs	r3, #0
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	2300      	movs	r3, #0
 8004670:	2261      	movs	r2, #97	; 0x61
 8004672:	21cb      	movs	r1, #203	; 0xcb
 8004674:	485a      	ldr	r0, [pc, #360]	; (80047e0 <TouchLightsActivity+0x324>)
 8004676:	f7fd fa55 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 1;
 800467a:	4b57      	ldr	r3, [pc, #348]	; (80047d8 <TouchLightsActivity+0x31c>)
 800467c:	2201      	movs	r2, #1
 800467e:	705a      	strb	r2, [r3, #1]
					if(LightsButtonState[1] >= 1) // if is ON
 8004680:	e096      	b.n	80047b0 <TouchLightsActivity+0x2f4>
					}
				}

				//
				// THIRD LIGHT
				else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8004682:	88bb      	ldrh	r3, [r7, #4]
 8004684:	2b7c      	cmp	r3, #124	; 0x7c
 8004686:	d948      	bls.n	800471a <TouchLightsActivity+0x25e>
 8004688:	88bb      	ldrh	r3, [r7, #4]
 800468a:	2b92      	cmp	r3, #146	; 0x92
 800468c:	d845      	bhi.n	800471a <TouchLightsActivity+0x25e>
				{
					if(LightsButtonState[2] >= 1) // if is ON
 800468e:	4b52      	ldr	r3, [pc, #328]	; (80047d8 <TouchLightsActivity+0x31c>)
 8004690:	789b      	ldrb	r3, [r3, #2]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d020      	beq.n	80046d8 <TouchLightsActivity+0x21c>
					{
						SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8004696:	2012      	movs	r0, #18
 8004698:	f000 fd9e 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800469c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	2305      	movs	r3, #5
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	2315      	movs	r3, #21
 80046a8:	2221      	movs	r2, #33	; 0x21
 80046aa:	217d      	movs	r1, #125	; 0x7d
 80046ac:	20c8      	movs	r0, #200	; 0xc8
 80046ae:	f7fc ffce 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 80046b2:	494a      	ldr	r1, [pc, #296]	; (80047dc <TouchLightsActivity+0x320>)
 80046b4:	484a      	ldr	r0, [pc, #296]	; (80047e0 <TouchLightsActivity+0x324>)
 80046b6:	f008 fc4b 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80046ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	2300      	movs	r3, #0
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2300      	movs	r3, #0
 80046c6:	227f      	movs	r2, #127	; 0x7f
 80046c8:	21cb      	movs	r1, #203	; 0xcb
 80046ca:	4845      	ldr	r0, [pc, #276]	; (80047e0 <TouchLightsActivity+0x324>)
 80046cc:	f7fd fa2a 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 0;
 80046d0:	4b41      	ldr	r3, [pc, #260]	; (80047d8 <TouchLightsActivity+0x31c>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	709a      	strb	r2, [r3, #2]
					if(LightsButtonState[2] >= 1) // if is ON
 80046d6:	e06b      	b.n	80047b0 <TouchLightsActivity+0x2f4>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 80046d8:	2011      	movs	r0, #17
 80046da:	f000 fd7d 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80046de:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	2305      	movs	r3, #5
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2315      	movs	r3, #21
 80046ea:	2221      	movs	r2, #33	; 0x21
 80046ec:	217d      	movs	r1, #125	; 0x7d
 80046ee:	20c8      	movs	r0, #200	; 0xc8
 80046f0:	f7fc ffad 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 80046f4:	493b      	ldr	r1, [pc, #236]	; (80047e4 <TouchLightsActivity+0x328>)
 80046f6:	483a      	ldr	r0, [pc, #232]	; (80047e0 <TouchLightsActivity+0x324>)
 80046f8:	f008 fc2a 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80046fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	2300      	movs	r3, #0
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	2300      	movs	r3, #0
 8004708:	227f      	movs	r2, #127	; 0x7f
 800470a:	21cb      	movs	r1, #203	; 0xcb
 800470c:	4834      	ldr	r0, [pc, #208]	; (80047e0 <TouchLightsActivity+0x324>)
 800470e:	f7fd fa09 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 1;
 8004712:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <TouchLightsActivity+0x31c>)
 8004714:	2201      	movs	r2, #1
 8004716:	709a      	strb	r2, [r3, #2]
					if(LightsButtonState[2] >= 1) // if is ON
 8004718:	e04a      	b.n	80047b0 <TouchLightsActivity+0x2f4>
					}
				}

				//
				// FOURTH LIGHT
				else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 800471a:	88bb      	ldrh	r3, [r7, #4]
 800471c:	2b9a      	cmp	r3, #154	; 0x9a
 800471e:	d947      	bls.n	80047b0 <TouchLightsActivity+0x2f4>
 8004720:	88bb      	ldrh	r3, [r7, #4]
 8004722:	2bb0      	cmp	r3, #176	; 0xb0
 8004724:	d844      	bhi.n	80047b0 <TouchLightsActivity+0x2f4>
				{
					if(LightsButtonState[3] >= 1) // if is ON
 8004726:	4b2c      	ldr	r3, [pc, #176]	; (80047d8 <TouchLightsActivity+0x31c>)
 8004728:	78db      	ldrb	r3, [r3, #3]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d020      	beq.n	8004770 <TouchLightsActivity+0x2b4>
					{
						SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 800472e:	2014      	movs	r0, #20
 8004730:	f000 fd52 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004734:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	2305      	movs	r3, #5
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	2315      	movs	r3, #21
 8004740:	2221      	movs	r2, #33	; 0x21
 8004742:	219b      	movs	r1, #155	; 0x9b
 8004744:	20c8      	movs	r0, #200	; 0xc8
 8004746:	f7fc ff82 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 800474a:	4924      	ldr	r1, [pc, #144]	; (80047dc <TouchLightsActivity+0x320>)
 800474c:	4824      	ldr	r0, [pc, #144]	; (80047e0 <TouchLightsActivity+0x324>)
 800474e:	f008 fbff 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004752:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004756:	9301      	str	r3, [sp, #4]
 8004758:	2300      	movs	r3, #0
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2300      	movs	r3, #0
 800475e:	229d      	movs	r2, #157	; 0x9d
 8004760:	21cb      	movs	r1, #203	; 0xcb
 8004762:	481f      	ldr	r0, [pc, #124]	; (80047e0 <TouchLightsActivity+0x324>)
 8004764:	f7fd f9de 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 0;
 8004768:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <TouchLightsActivity+0x31c>)
 800476a:	2200      	movs	r2, #0
 800476c:	70da      	strb	r2, [r3, #3]
 800476e:	e01f      	b.n	80047b0 <TouchLightsActivity+0x2f4>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8004770:	2013      	movs	r0, #19
 8004772:	f000 fd31 	bl	80051d8 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004776:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800477a:	9301      	str	r3, [sp, #4]
 800477c:	2305      	movs	r3, #5
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	2315      	movs	r3, #21
 8004782:	2221      	movs	r2, #33	; 0x21
 8004784:	219b      	movs	r1, #155	; 0x9b
 8004786:	20c8      	movs	r0, #200	; 0xc8
 8004788:	f7fc ff61 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 800478c:	4915      	ldr	r1, [pc, #84]	; (80047e4 <TouchLightsActivity+0x328>)
 800478e:	4814      	ldr	r0, [pc, #80]	; (80047e0 <TouchLightsActivity+0x324>)
 8004790:	f008 fbde 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004794:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	2300      	movs	r3, #0
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	2300      	movs	r3, #0
 80047a0:	229d      	movs	r2, #157	; 0x9d
 80047a2:	21cb      	movs	r1, #203	; 0xcb
 80047a4:	480e      	ldr	r0, [pc, #56]	; (80047e0 <TouchLightsActivity+0x324>)
 80047a6:	f7fd f9bd 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 1;
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <TouchLightsActivity+0x31c>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	70da      	strb	r2, [r3, #3]
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 80047b0:	480d      	ldr	r0, [pc, #52]	; (80047e8 <TouchLightsActivity+0x32c>)
 80047b2:	f7fc ff9d 	bl	80016f0 <EF_SetFont>
			}

			TimerTouch = HAL_GetTick();
 80047b6:	f001 fca1 	bl	80060fc <HAL_GetTick>
 80047ba:	4603      	mov	r3, r0
 80047bc:	4a02      	ldr	r2, [pc, #8]	; (80047c8 <TouchLightsActivity+0x30c>)
 80047be:	6013      	str	r3, [r2, #0]
		}
	}
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	2000024c 	.word	0x2000024c
 80047cc:	20000250 	.word	0x20000250
 80047d0:	20000249 	.word	0x20000249
 80047d4:	08011b48 	.word	0x08011b48
 80047d8:	2000026c 	.word	0x2000026c
 80047dc:	08010de8 	.word	0x08010de8
 80047e0:	200002bc 	.word	0x200002bc
 80047e4:	08010dec 	.word	0x08010dec
 80047e8:	08013ac0 	.word	0x08013ac0

080047ec <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 80047f2:	f7fd fd4b 	bl	800228c <XPT2046_IsTouched>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8118 	beq.w	8004a2e <TouchClockActivity+0x242>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80047fe:	488e      	ldr	r0, [pc, #568]	; (8004a38 <TouchClockActivity+0x24c>)
 8004800:	f7fc ff76 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004804:	f001 fc7a 	bl	80060fc <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	4b8c      	ldr	r3, [pc, #560]	; (8004a3c <TouchClockActivity+0x250>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004814:	f0c0 810b 	bcc.w	8004a2e <TouchClockActivity+0x242>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004818:	1d3a      	adds	r2, r7, #4
 800481a:	1dbb      	adds	r3, r7, #6
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f7fd fcf6 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8004824:	4b86      	ldr	r3, [pc, #536]	; (8004a40 <TouchClockActivity+0x254>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10e      	bne.n	800484a <TouchClockActivity+0x5e>
				{
					Hours = DS3231_GetHour();
 800482c:	f7fd ffa6 	bl	800277c <DS3231_GetHour>
 8004830:	4603      	mov	r3, r0
 8004832:	461a      	mov	r2, r3
 8004834:	4b83      	ldr	r3, [pc, #524]	; (8004a44 <TouchClockActivity+0x258>)
 8004836:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8004838:	f7fd ffac 	bl	8002794 <DS3231_GetMinute>
 800483c:	4603      	mov	r3, r0
 800483e:	461a      	mov	r2, r3
 8004840:	4b81      	ldr	r3, [pc, #516]	; (8004a48 <TouchClockActivity+0x25c>)
 8004842:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8004844:	4b7e      	ldr	r3, [pc, #504]	; (8004a40 <TouchClockActivity+0x254>)
 8004846:	2200      	movs	r2, #0
 8004848:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	2b09      	cmp	r3, #9
 800484e:	d90f      	bls.n	8004870 <TouchClockActivity+0x84>
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	2b6e      	cmp	r3, #110	; 0x6e
 8004854:	d80c      	bhi.n	8004870 <TouchClockActivity+0x84>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004856:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004858:	2bd7      	cmp	r3, #215	; 0xd7
 800485a:	d909      	bls.n	8004870 <TouchClockActivity+0x84>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800485c:	88bb      	ldrh	r3, [r7, #4]
 800485e:	2bec      	cmp	r3, #236	; 0xec
 8004860:	d806      	bhi.n	8004870 <TouchClockActivity+0x84>
				{
					State = MENUTFT_PARAMETERS;
 8004862:	4b7a      	ldr	r3, [pc, #488]	; (8004a4c <TouchClockActivity+0x260>)
 8004864:	2201      	movs	r2, #1
 8004866:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8004868:	4b79      	ldr	r3, [pc, #484]	; (8004a50 <TouchClockActivity+0x264>)
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	e0d9      	b.n	8004a24 <TouchClockActivity+0x238>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004870:	88fb      	ldrh	r3, [r7, #6]
 8004872:	2bdb      	cmp	r3, #219	; 0xdb
 8004874:	d927      	bls.n	80048c6 <TouchClockActivity+0xda>
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800487c:	d223      	bcs.n	80048c6 <TouchClockActivity+0xda>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800487e:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004880:	2bd7      	cmp	r3, #215	; 0xd7
 8004882:	d920      	bls.n	80048c6 <TouchClockActivity+0xda>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004884:	88bb      	ldrh	r3, [r7, #4]
 8004886:	2bec      	cmp	r3, #236	; 0xec
 8004888:	d81d      	bhi.n	80048c6 <TouchClockActivity+0xda>
				{
					DS3231_SetHour(Hours);
 800488a:	4b6e      	ldr	r3, [pc, #440]	; (8004a44 <TouchClockActivity+0x258>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7fd ff8c 	bl	80027ac <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8004894:	4b6c      	ldr	r3, [pc, #432]	; (8004a48 <TouchClockActivity+0x25c>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7fd ff9c 	bl	80027d6 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 800489e:	2032      	movs	r0, #50	; 0x32
 80048a0:	f7fd ffab 	bl	80027fa <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 80048a4:	496b      	ldr	r1, [pc, #428]	; (8004a54 <TouchClockActivity+0x268>)
 80048a6:	486c      	ldr	r0, [pc, #432]	; (8004a58 <TouchClockActivity+0x26c>)
 80048a8:	f008 fb52 	bl	800cf50 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 80048ac:	f24c 6318 	movw	r3, #50712	; 0xc618
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	2301      	movs	r3, #1
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80048ba:	220a      	movs	r2, #10
 80048bc:	212f      	movs	r1, #47	; 0x2f
 80048be:	4866      	ldr	r0, [pc, #408]	; (8004a58 <TouchClockActivity+0x26c>)
 80048c0:	f7fd f930 	bl	8001b24 <EF_PutString>
 80048c4:	e0ae      	b.n	8004a24 <TouchClockActivity+0x238>
				}

				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	2bef      	cmp	r3, #239	; 0xef
 80048ca:	d951      	bls.n	8004970 <TouchClockActivity+0x184>
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80048d2:	d84d      	bhi.n	8004970 <TouchClockActivity+0x184>
				{

					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 80048d4:	88bb      	ldrh	r3, [r7, #4]
 80048d6:	2b4a      	cmp	r3, #74	; 0x4a
 80048d8:	d923      	bls.n	8004922 <TouchClockActivity+0x136>
 80048da:	88bb      	ldrh	r3, [r7, #4]
 80048dc:	2b60      	cmp	r3, #96	; 0x60
 80048de:	d820      	bhi.n	8004922 <TouchClockActivity+0x136>
					{
						if(Hours < 24)
 80048e0:	4b58      	ldr	r3, [pc, #352]	; (8004a44 <TouchClockActivity+0x258>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b17      	cmp	r3, #23
 80048e6:	d806      	bhi.n	80048f6 <TouchClockActivity+0x10a>
						{
							Hours++;
 80048e8:	4b56      	ldr	r3, [pc, #344]	; (8004a44 <TouchClockActivity+0x258>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	3301      	adds	r3, #1
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	4b54      	ldr	r3, [pc, #336]	; (8004a44 <TouchClockActivity+0x258>)
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	e002      	b.n	80048fc <TouchClockActivity+0x110>
						}
						else
						{
							Hours = 1;
 80048f6:	4b53      	ldr	r3, [pc, #332]	; (8004a44 <TouchClockActivity+0x258>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 80048fc:	4b51      	ldr	r3, [pc, #324]	; (8004a44 <TouchClockActivity+0x258>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	4956      	ldr	r1, [pc, #344]	; (8004a5c <TouchClockActivity+0x270>)
 8004904:	4854      	ldr	r0, [pc, #336]	; (8004a58 <TouchClockActivity+0x26c>)
 8004906:	f008 fb23 	bl	800cf50 <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800490a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	2301      	movs	r3, #1
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	2300      	movs	r3, #0
 8004916:	2246      	movs	r2, #70	; 0x46
 8004918:	21a0      	movs	r1, #160	; 0xa0
 800491a:	484f      	ldr	r0, [pc, #316]	; (8004a58 <TouchClockActivity+0x26c>)
 800491c:	f7fd f902 	bl	8001b24 <EF_PutString>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8004920:	e07f      	b.n	8004a22 <TouchClockActivity+0x236>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 8004922:	88bb      	ldrh	r3, [r7, #4]
 8004924:	2b72      	cmp	r3, #114	; 0x72
 8004926:	d97c      	bls.n	8004a22 <TouchClockActivity+0x236>
 8004928:	88bb      	ldrh	r3, [r7, #4]
 800492a:	2b88      	cmp	r3, #136	; 0x88
 800492c:	d879      	bhi.n	8004a22 <TouchClockActivity+0x236>
					{
						if(Minutes < 59)
 800492e:	4b46      	ldr	r3, [pc, #280]	; (8004a48 <TouchClockActivity+0x25c>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b3a      	cmp	r3, #58	; 0x3a
 8004934:	d806      	bhi.n	8004944 <TouchClockActivity+0x158>
						{
							Minutes++;
 8004936:	4b44      	ldr	r3, [pc, #272]	; (8004a48 <TouchClockActivity+0x25c>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	3301      	adds	r3, #1
 800493c:	b2da      	uxtb	r2, r3
 800493e:	4b42      	ldr	r3, [pc, #264]	; (8004a48 <TouchClockActivity+0x25c>)
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	e002      	b.n	800494a <TouchClockActivity+0x15e>
						}
						else
						{
							Minutes = 0;
 8004944:	4b40      	ldr	r3, [pc, #256]	; (8004a48 <TouchClockActivity+0x25c>)
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 800494a:	4b3f      	ldr	r3, [pc, #252]	; (8004a48 <TouchClockActivity+0x25c>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	4942      	ldr	r1, [pc, #264]	; (8004a5c <TouchClockActivity+0x270>)
 8004952:	4841      	ldr	r0, [pc, #260]	; (8004a58 <TouchClockActivity+0x26c>)
 8004954:	f008 fafc 	bl	800cf50 <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004958:	f24c 6318 	movw	r3, #50712	; 0xc618
 800495c:	9301      	str	r3, [sp, #4]
 800495e:	2301      	movs	r3, #1
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	2300      	movs	r3, #0
 8004964:	226e      	movs	r2, #110	; 0x6e
 8004966:	21a0      	movs	r1, #160	; 0xa0
 8004968:	483b      	ldr	r0, [pc, #236]	; (8004a58 <TouchClockActivity+0x26c>)
 800496a:	f7fd f8db 	bl	8001b24 <EF_PutString>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 800496e:	e058      	b.n	8004a22 <TouchClockActivity+0x236>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8004976:	d355      	bcc.n	8004a24 <TouchClockActivity+0x238>
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800497e:	d851      	bhi.n	8004a24 <TouchClockActivity+0x238>
				{
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8004980:	88bb      	ldrh	r3, [r7, #4]
 8004982:	2b4a      	cmp	r3, #74	; 0x4a
 8004984:	d923      	bls.n	80049ce <TouchClockActivity+0x1e2>
 8004986:	88bb      	ldrh	r3, [r7, #4]
 8004988:	2b60      	cmp	r3, #96	; 0x60
 800498a:	d820      	bhi.n	80049ce <TouchClockActivity+0x1e2>
					{

						if(Hours < 19)
 800498c:	4b2d      	ldr	r3, [pc, #180]	; (8004a44 <TouchClockActivity+0x258>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b12      	cmp	r3, #18
 8004992:	d806      	bhi.n	80049a2 <TouchClockActivity+0x1b6>
						{
							Hours = Hours + 6;
 8004994:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <TouchClockActivity+0x258>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	3306      	adds	r3, #6
 800499a:	b2da      	uxtb	r2, r3
 800499c:	4b29      	ldr	r3, [pc, #164]	; (8004a44 <TouchClockActivity+0x258>)
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e002      	b.n	80049a8 <TouchClockActivity+0x1bc>
						}
						else
						{
							Hours = 1;
 80049a2:	4b28      	ldr	r3, [pc, #160]	; (8004a44 <TouchClockActivity+0x258>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 80049a8:	4b26      	ldr	r3, [pc, #152]	; (8004a44 <TouchClockActivity+0x258>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	492b      	ldr	r1, [pc, #172]	; (8004a5c <TouchClockActivity+0x270>)
 80049b0:	4829      	ldr	r0, [pc, #164]	; (8004a58 <TouchClockActivity+0x26c>)
 80049b2:	f008 facd 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80049b6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80049ba:	9301      	str	r3, [sp, #4]
 80049bc:	2301      	movs	r3, #1
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	2300      	movs	r3, #0
 80049c2:	2246      	movs	r2, #70	; 0x46
 80049c4:	219d      	movs	r1, #157	; 0x9d
 80049c6:	4824      	ldr	r0, [pc, #144]	; (8004a58 <TouchClockActivity+0x26c>)
 80049c8:	f7fd f8ac 	bl	8001b24 <EF_PutString>
 80049cc:	e025      	b.n	8004a1a <TouchClockActivity+0x22e>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 80049ce:	88bb      	ldrh	r3, [r7, #4]
 80049d0:	2b72      	cmp	r3, #114	; 0x72
 80049d2:	d922      	bls.n	8004a1a <TouchClockActivity+0x22e>
 80049d4:	88bb      	ldrh	r3, [r7, #4]
 80049d6:	2b88      	cmp	r3, #136	; 0x88
 80049d8:	d81f      	bhi.n	8004a1a <TouchClockActivity+0x22e>
					{
						if(Minutes < 49)
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <TouchClockActivity+0x25c>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b30      	cmp	r3, #48	; 0x30
 80049e0:	d806      	bhi.n	80049f0 <TouchClockActivity+0x204>
						{
							Minutes = Minutes +10;
 80049e2:	4b19      	ldr	r3, [pc, #100]	; (8004a48 <TouchClockActivity+0x25c>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	330a      	adds	r3, #10
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	4b17      	ldr	r3, [pc, #92]	; (8004a48 <TouchClockActivity+0x25c>)
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	e002      	b.n	80049f6 <TouchClockActivity+0x20a>
						}
						else
						{
							Minutes = 0;
 80049f0:	4b15      	ldr	r3, [pc, #84]	; (8004a48 <TouchClockActivity+0x25c>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <TouchClockActivity+0x25c>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	4917      	ldr	r1, [pc, #92]	; (8004a5c <TouchClockActivity+0x270>)
 80049fe:	4816      	ldr	r0, [pc, #88]	; (8004a58 <TouchClockActivity+0x26c>)
 8004a00:	f008 faa6 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004a04:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a08:	9301      	str	r3, [sp, #4]
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	226e      	movs	r2, #110	; 0x6e
 8004a12:	219c      	movs	r1, #156	; 0x9c
 8004a14:	4810      	ldr	r0, [pc, #64]	; (8004a58 <TouchClockActivity+0x26c>)
 8004a16:	f7fd f885 	bl	8001b24 <EF_PutString>

					}
					EF_SetFont(&arialBlack_20ptFontInfo);
 8004a1a:	4807      	ldr	r0, [pc, #28]	; (8004a38 <TouchClockActivity+0x24c>)
 8004a1c:	f7fc fe68 	bl	80016f0 <EF_SetFont>
 8004a20:	e000      	b.n	8004a24 <TouchClockActivity+0x238>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8004a22:	bf00      	nop
				}
				TimerTouch = HAL_GetTick();
 8004a24:	f001 fb6a 	bl	80060fc <HAL_GetTick>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	4a04      	ldr	r2, [pc, #16]	; (8004a3c <TouchClockActivity+0x250>)
 8004a2c:	6013      	str	r3, [r2, #0]
			}
		}
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	08013ac0 	.word	0x08013ac0
 8004a3c:	2000024c 	.word	0x2000024c
 8004a40:	2000024a 	.word	0x2000024a
 8004a44:	20000030 	.word	0x20000030
 8004a48:	20000031 	.word	0x20000031
 8004a4c:	20000250 	.word	0x20000250
 8004a50:	20000249 	.word	0x20000249
 8004a54:	08010df0 	.word	0x08010df0
 8004a58:	200002bc 	.word	0x200002bc
 8004a5c:	08010e00 	.word	0x08010e00

08004a60 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 8004a66:	f7fd fc11 	bl	800228c <XPT2046_IsTouched>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8106 	beq.w	8004c7e <TouchPredefinedActivityActivity+0x21e>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004a72:	f001 fb43 	bl	80060fc <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	4b83      	ldr	r3, [pc, #524]	; (8004c88 <TouchPredefinedActivityActivity+0x228>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a82:	f0c0 80fc 	bcc.w	8004c7e <TouchPredefinedActivityActivity+0x21e>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004a86:	1d3a      	adds	r2, r7, #4
 8004a88:	1dbb      	adds	r3, r7, #6
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fd fbbf 	bl	8002210 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 8004a92:	487e      	ldr	r0, [pc, #504]	; (8004c8c <TouchPredefinedActivityActivity+0x22c>)
 8004a94:	f7fc fe2c 	bl	80016f0 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	2b09      	cmp	r3, #9
 8004a9c:	d90f      	bls.n	8004abe <TouchPredefinedActivityActivity+0x5e>
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	2b6e      	cmp	r3, #110	; 0x6e
 8004aa2:	d80c      	bhi.n	8004abe <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004aa4:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004aa6:	2bd7      	cmp	r3, #215	; 0xd7
 8004aa8:	d909      	bls.n	8004abe <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004aaa:	88bb      	ldrh	r3, [r7, #4]
 8004aac:	2bec      	cmp	r3, #236	; 0xec
 8004aae:	d806      	bhi.n	8004abe <TouchPredefinedActivityActivity+0x5e>
			{
				State = MENUTFT_SWITCH;
 8004ab0:	4b77      	ldr	r3, [pc, #476]	; (8004c90 <TouchPredefinedActivityActivity+0x230>)
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004ab6:	4b77      	ldr	r3, [pc, #476]	; (8004c94 <TouchPredefinedActivityActivity+0x234>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	e0da      	b.n	8004c74 <TouchPredefinedActivityActivity+0x214>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	2b63      	cmp	r3, #99	; 0x63
 8004ac2:	f240 80d7 	bls.w	8004c74 <TouchPredefinedActivityActivity+0x214>
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	2bdc      	cmp	r3, #220	; 0xdc
 8004aca:	f200 80d3 	bhi.w	8004c74 <TouchPredefinedActivityActivity+0x214>
			{
				if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8004ace:	88bb      	ldrh	r3, [r7, #4]
 8004ad0:	2b3b      	cmp	r3, #59	; 0x3b
 8004ad2:	d966      	bls.n	8004ba2 <TouchPredefinedActivityActivity+0x142>
 8004ad4:	88bb      	ldrh	r3, [r7, #4]
 8004ad6:	2b64      	cmp	r3, #100	; 0x64
 8004ad8:	d863      	bhi.n	8004ba2 <TouchPredefinedActivityActivity+0x142>
				{
					if(ActivityButtonState[0] >= 1) // if is ON
 8004ada:	4b6f      	ldr	r3, [pc, #444]	; (8004c98 <TouchPredefinedActivityActivity+0x238>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d02f      	beq.n	8004b42 <TouchPredefinedActivityActivity+0xe2>
					{
						ActivityButtonState[0] = 0;
 8004ae2:	4b6d      	ldr	r3, [pc, #436]	; (8004c98 <TouchPredefinedActivityActivity+0x238>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004ae8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	230a      	movs	r3, #10
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	2328      	movs	r3, #40	; 0x28
 8004af4:	2278      	movs	r2, #120	; 0x78
 8004af6:	213c      	movs	r1, #60	; 0x3c
 8004af8:	2064      	movs	r0, #100	; 0x64
 8004afa:	f7fc fda8 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 8004afe:	4967      	ldr	r1, [pc, #412]	; (8004c9c <TouchPredefinedActivityActivity+0x23c>)
 8004b00:	4867      	ldr	r0, [pc, #412]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004b02:	f008 fa25 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004b06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	2300      	movs	r3, #0
 8004b12:	223e      	movs	r2, #62	; 0x3e
 8004b14:	2177      	movs	r1, #119	; 0x77
 8004b16:	4862      	ldr	r0, [pc, #392]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004b18:	f7fd f804 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 8004b1c:	4961      	ldr	r1, [pc, #388]	; (8004ca4 <TouchPredefinedActivityActivity+0x244>)
 8004b1e:	4860      	ldr	r0, [pc, #384]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004b20:	f008 fa16 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004b24:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	2250      	movs	r2, #80	; 0x50
 8004b32:	2193      	movs	r1, #147	; 0x93
 8004b34:	485a      	ldr	r0, [pc, #360]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004b36:	f7fc fff5 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(0); // Turn Activity OFF
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	f7fe fd2a 	bl	8003594 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8004b40:	e098      	b.n	8004c74 <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[0] = 1;
 8004b42:	4b55      	ldr	r3, [pc, #340]	; (8004c98 <TouchPredefinedActivityActivity+0x238>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004b48:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	230a      	movs	r3, #10
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	2328      	movs	r3, #40	; 0x28
 8004b54:	2278      	movs	r2, #120	; 0x78
 8004b56:	213c      	movs	r1, #60	; 0x3c
 8004b58:	2064      	movs	r0, #100	; 0x64
 8004b5a:	f7fc fd78 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 8004b5e:	494f      	ldr	r1, [pc, #316]	; (8004c9c <TouchPredefinedActivityActivity+0x23c>)
 8004b60:	484f      	ldr	r0, [pc, #316]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004b62:	f008 f9f5 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004b66:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	2300      	movs	r3, #0
 8004b72:	223e      	movs	r2, #62	; 0x3e
 8004b74:	2177      	movs	r1, #119	; 0x77
 8004b76:	484a      	ldr	r0, [pc, #296]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004b78:	f7fc ffd4 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 8004b7c:	494a      	ldr	r1, [pc, #296]	; (8004ca8 <TouchPredefinedActivityActivity+0x248>)
 8004b7e:	4848      	ldr	r0, [pc, #288]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004b80:	f008 f9e6 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004b84:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	2250      	movs	r2, #80	; 0x50
 8004b92:	2193      	movs	r1, #147	; 0x93
 8004b94:	4842      	ldr	r0, [pc, #264]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004b96:	f7fc ffc5 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(1);
 8004b9a:	2001      	movs	r0, #1
 8004b9c:	f7fe fcfa 	bl	8003594 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8004ba0:	e068      	b.n	8004c74 <TouchPredefinedActivityActivity+0x214>
					}

				}

				else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 8004ba2:	88bb      	ldrh	r3, [r7, #4]
 8004ba4:	2b77      	cmp	r3, #119	; 0x77
 8004ba6:	d965      	bls.n	8004c74 <TouchPredefinedActivityActivity+0x214>
 8004ba8:	88bb      	ldrh	r3, [r7, #4]
 8004baa:	2ba0      	cmp	r3, #160	; 0xa0
 8004bac:	d862      	bhi.n	8004c74 <TouchPredefinedActivityActivity+0x214>
				{
					if(ActivityButtonState[1] >= 1) // if is ON
 8004bae:	4b3a      	ldr	r3, [pc, #232]	; (8004c98 <TouchPredefinedActivityActivity+0x238>)
 8004bb0:	785b      	ldrb	r3, [r3, #1]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d02f      	beq.n	8004c16 <TouchPredefinedActivityActivity+0x1b6>
					{
						ActivityButtonState[1] = 0;
 8004bb6:	4b38      	ldr	r3, [pc, #224]	; (8004c98 <TouchPredefinedActivityActivity+0x238>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004bbc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	230a      	movs	r3, #10
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	2328      	movs	r3, #40	; 0x28
 8004bc8:	2278      	movs	r2, #120	; 0x78
 8004bca:	2178      	movs	r1, #120	; 0x78
 8004bcc:	2064      	movs	r0, #100	; 0x64
 8004bce:	f7fc fd3e 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 8004bd2:	4936      	ldr	r1, [pc, #216]	; (8004cac <TouchPredefinedActivityActivity+0x24c>)
 8004bd4:	4832      	ldr	r0, [pc, #200]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004bd6:	f008 f9bb 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004bda:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	2300      	movs	r3, #0
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	2300      	movs	r3, #0
 8004be6:	227a      	movs	r2, #122	; 0x7a
 8004be8:	2169      	movs	r1, #105	; 0x69
 8004bea:	482d      	ldr	r0, [pc, #180]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004bec:	f7fc ff9a 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 8004bf0:	492c      	ldr	r1, [pc, #176]	; (8004ca4 <TouchPredefinedActivityActivity+0x244>)
 8004bf2:	482b      	ldr	r0, [pc, #172]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004bf4:	f008 f9ac 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004bf8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	2300      	movs	r3, #0
 8004c04:	228c      	movs	r2, #140	; 0x8c
 8004c06:	2193      	movs	r1, #147	; 0x93
 8004c08:	4825      	ldr	r0, [pc, #148]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004c0a:	f7fc ff8b 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(0);
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f7fe fca8 	bl	8003564 <predefinedActivityCzyszczenie>
 8004c14:	e02e      	b.n	8004c74 <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[1] = 1;
 8004c16:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <TouchPredefinedActivityActivity+0x238>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004c1c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	230a      	movs	r3, #10
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	2328      	movs	r3, #40	; 0x28
 8004c28:	2278      	movs	r2, #120	; 0x78
 8004c2a:	2178      	movs	r1, #120	; 0x78
 8004c2c:	2064      	movs	r0, #100	; 0x64
 8004c2e:	f7fc fd0e 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 8004c32:	491e      	ldr	r1, [pc, #120]	; (8004cac <TouchPredefinedActivityActivity+0x24c>)
 8004c34:	481a      	ldr	r0, [pc, #104]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004c36:	f008 f98b 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004c3a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	2300      	movs	r3, #0
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	2300      	movs	r3, #0
 8004c46:	227a      	movs	r2, #122	; 0x7a
 8004c48:	2169      	movs	r1, #105	; 0x69
 8004c4a:	4815      	ldr	r0, [pc, #84]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004c4c:	f7fc ff6a 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 8004c50:	4915      	ldr	r1, [pc, #84]	; (8004ca8 <TouchPredefinedActivityActivity+0x248>)
 8004c52:	4813      	ldr	r0, [pc, #76]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004c54:	f008 f97c 	bl	800cf50 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004c58:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004c5c:	9301      	str	r3, [sp, #4]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	2300      	movs	r3, #0
 8004c64:	228c      	movs	r2, #140	; 0x8c
 8004c66:	2193      	movs	r1, #147	; 0x93
 8004c68:	480d      	ldr	r0, [pc, #52]	; (8004ca0 <TouchPredefinedActivityActivity+0x240>)
 8004c6a:	f7fc ff5b 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(1);
 8004c6e:	2001      	movs	r0, #1
 8004c70:	f7fe fc78 	bl	8003564 <predefinedActivityCzyszczenie>
					}
				}
			}
			TimerTouch = HAL_GetTick();
 8004c74:	f001 fa42 	bl	80060fc <HAL_GetTick>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	4a03      	ldr	r2, [pc, #12]	; (8004c88 <TouchPredefinedActivityActivity+0x228>)
 8004c7c:	6013      	str	r3, [r2, #0]
		}
	}


}
 8004c7e:	bf00      	nop
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	2000024c 	.word	0x2000024c
 8004c8c:	08011b48 	.word	0x08011b48
 8004c90:	20000250 	.word	0x20000250
 8004c94:	20000249 	.word	0x20000249
 8004c98:	20000270 	.word	0x20000270
 8004c9c:	08010e08 	.word	0x08010e08
 8004ca0:	200002bc 	.word	0x200002bc
 8004ca4:	08010de8 	.word	0x08010de8
 8004ca8:	08010dec 	.word	0x08010dec
 8004cac:	08010e14 	.word	0x08010e14

08004cb0 <UART_ParseLine>:
 * 	22	=>	LIGHTSSTATUS=?\n	// Podaj stan wszytskich swiatel
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b094      	sub	sp, #80	; 0x50
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8004cb8:	f107 0308 	add.w	r3, r7, #8
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 ffc4 	bl	8005c4c <UARTDMA_GetLineFromReceiveBuffer>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d155      	bne.n	8004d76 <UART_ParseLine+0xc6>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8004cca:	f107 0308 	add.w	r3, r7, #8
 8004cce:	492c      	ldr	r1, [pc, #176]	; (8004d80 <UART_ParseLine+0xd0>)
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f008 ff95 	bl	800dc00 <strtok>
 8004cd6:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8004cd8:	492a      	ldr	r1, [pc, #168]	; (8004d84 <UART_ParseLine+0xd4>)
 8004cda:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004cdc:	f7fb fa80 	bl	80001e0 <strcmp>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8004ce6:	f000 f85d 	bl	8004da4 <UART_ParseLED>
	  {
		  UART_ParseAnswLightsStateStatus();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8004cea:	e044      	b.n	8004d76 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8004cec:	4926      	ldr	r1, [pc, #152]	; (8004d88 <UART_ParseLine+0xd8>)
 8004cee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004cf0:	f7fb fa76 	bl	80001e0 <strcmp>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d102      	bne.n	8004d00 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8004cfa:	f000 f8a1 	bl	8004e40 <UART_ParseAnswStatus>
}
 8004cfe:	e03a      	b.n	8004d76 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 8004d00:	4922      	ldr	r1, [pc, #136]	; (8004d8c <UART_ParseLine+0xdc>)
 8004d02:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d04:	f7fb fa6c 	bl	80001e0 <strcmp>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 8004d0e:	f000 f89f 	bl	8004e50 <UART_ParseAnswTemp>
}
 8004d12:	e030      	b.n	8004d76 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8004d14:	491e      	ldr	r1, [pc, #120]	; (8004d90 <UART_ParseLine+0xe0>)
 8004d16:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d18:	f7fb fa62 	bl	80001e0 <strcmp>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8004d22:	f000 f939 	bl	8004f98 <UART_ParseAnswPres>
}
 8004d26:	e026      	b.n	8004d76 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8004d28:	491a      	ldr	r1, [pc, #104]	; (8004d94 <UART_ParseLine+0xe4>)
 8004d2a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d2c:	f7fb fa58 	bl	80001e0 <strcmp>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8004d36:	f000 f975 	bl	8005024 <UART_ParseAnswChangeRelayState>
}
 8004d3a:	e01c      	b.n	8004d76 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8004d3c:	4916      	ldr	r1, [pc, #88]	; (8004d98 <UART_ParseLine+0xe8>)
 8004d3e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d40:	f7fb fa4e 	bl	80001e0 <strcmp>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d102      	bne.n	8004d50 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 8004d4a:	f000 f972 	bl	8005032 <UART_ParseAnswChangeLightState>
}
 8004d4e:	e012      	b.n	8004d76 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8004d50:	4912      	ldr	r1, [pc, #72]	; (8004d9c <UART_ParseLine+0xec>)
 8004d52:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d54:	f7fb fa44 	bl	80001e0 <strcmp>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d102      	bne.n	8004d64 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 8004d5e:	f000 f96f 	bl	8005040 <UART_ParseAnswRelayStateStatus>
}
 8004d62:	e008      	b.n	8004d76 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8004d64:	490e      	ldr	r1, [pc, #56]	; (8004da0 <UART_ParseLine+0xf0>)
 8004d66:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d68:	f7fb fa3a 	bl	80001e0 <strcmp>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <UART_ParseLine+0xc6>
		  UART_ParseAnswLightsStateStatus();
 8004d72:	f000 f9cb 	bl	800510c <UART_ParseAnswLightsStateStatus>
}
 8004d76:	bf00      	nop
 8004d78:	3750      	adds	r7, #80	; 0x50
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	08010e20 	.word	0x08010e20
 8004d84:	08010e24 	.word	0x08010e24
 8004d88:	08010e28 	.word	0x08010e28
 8004d8c:	08010e30 	.word	0x08010e30
 8004d90:	08010e38 	.word	0x08010e38
 8004d94:	08010e40 	.word	0x08010e40
 8004d98:	08010e4c 	.word	0x08010e4c
 8004d9c:	08010e58 	.word	0x08010e58
 8004da0:	08010e64 	.word	0x08010e64

08004da4 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8004daa:	491f      	ldr	r1, [pc, #124]	; (8004e28 <UART_ParseLED+0x84>)
 8004dac:	2000      	movs	r0, #0
 8004dae:	f008 ff27 	bl	800dc00 <strtok>
 8004db2:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d031      	beq.n	8004e20 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b2f      	cmp	r3, #47	; 0x2f
 8004dc2:	d903      	bls.n	8004dcc <UART_ParseLED+0x28>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b39      	cmp	r3, #57	; 0x39
 8004dca:	d904      	bls.n	8004dd6 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8004dcc:	4917      	ldr	r1, [pc, #92]	; (8004e2c <UART_ParseLED+0x88>)
 8004dce:	4818      	ldr	r0, [pc, #96]	; (8004e30 <UART_ParseLED+0x8c>)
 8004dd0:	f000 ff6d 	bl	8005cae <UARTDMA_Print>
			return;	// And exit parsing
 8004dd4:	e024      	b.n	8004e20 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f007 fa03 	bl	800c1e2 <atoi>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d10a      	bne.n	8004dfc <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8004de6:	2200      	movs	r2, #0
 8004de8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dec:	4811      	ldr	r0, [pc, #68]	; (8004e34 <UART_ParseLED+0x90>)
 8004dee:	f002 f901 	bl	8006ff4 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8004df2:	4911      	ldr	r1, [pc, #68]	; (8004e38 <UART_ParseLED+0x94>)
 8004df4:	480e      	ldr	r0, [pc, #56]	; (8004e30 <UART_ParseLED+0x8c>)
 8004df6:	f000 ff5a 	bl	8005cae <UARTDMA_Print>
 8004dfa:	e011      	b.n	8004e20 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 8004e02:	2201      	movs	r2, #1
 8004e04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e08:	480a      	ldr	r0, [pc, #40]	; (8004e34 <UART_ParseLED+0x90>)
 8004e0a:	f002 f8f3 	bl	8006ff4 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 8004e0e:	490b      	ldr	r1, [pc, #44]	; (8004e3c <UART_ParseLED+0x98>)
 8004e10:	4807      	ldr	r0, [pc, #28]	; (8004e30 <UART_ParseLED+0x8c>)
 8004e12:	f000 ff4c 	bl	8005cae <UARTDMA_Print>
 8004e16:	e003      	b.n	8004e20 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8004e18:	4904      	ldr	r1, [pc, #16]	; (8004e2c <UART_ParseLED+0x88>)
 8004e1a:	4805      	ldr	r0, [pc, #20]	; (8004e30 <UART_ParseLED+0x8c>)
 8004e1c:	f000 ff47 	bl	8005cae <UARTDMA_Print>
		}
	}
}
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	08010e70 	.word	0x08010e70
 8004e2c:	08010e74 	.word	0x08010e74
 8004e30:	200003f0 	.word	0x200003f0
 8004e34:	40020800 	.word	0x40020800
 8004e38:	08010e84 	.word	0x08010e84
 8004e3c:	08010e90 	.word	0x08010e90

08004e40 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8004e44:	bf00      	nop
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 8004e5a:	4947      	ldr	r1, [pc, #284]	; (8004f78 <UART_ParseAnswTemp+0x128>)
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f008 fecf 	bl	800dc00 <strtok>
 8004e62:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8081 	beq.w	8004f70 <UART_ParseAnswTemp+0x120>
	{
			NrCzujnika = atoi(ParsePointer);
 8004e6e:	68b8      	ldr	r0, [r7, #8]
 8004e70:	f007 f9b7 	bl	800c1e2 <atoi>
 8004e74:	4603      	mov	r3, r0
 8004e76:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d010      	beq.n	8004ea2 <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8004e80:	493d      	ldr	r1, [pc, #244]	; (8004f78 <UART_ParseAnswTemp+0x128>)
 8004e82:	2000      	movs	r0, #0
 8004e84:	f008 febc 	bl	800dc00 <strtok>
 8004e88:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f007 f9a6 	bl	800c1dc <atof>
 8004e90:	ec53 2b10 	vmov	r2, r3, d0
 8004e94:	4610      	mov	r0, r2
 8004e96:	4619      	mov	r1, r3
 8004e98:	f7fb febe 	bl	8000c18 <__aeabi_d2f>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4a37      	ldr	r2, [pc, #220]	; (8004f7c <UART_ParseAnswTemp+0x12c>)
 8004ea0:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 8004ea2:	4b37      	ldr	r3, [pc, #220]	; (8004f80 <UART_ParseAnswTemp+0x130>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d162      	bne.n	8004f70 <UART_ParseAnswTemp+0x120>
			{
				if(NrCzujnika == 1)
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d119      	bne.n	8004ee4 <UART_ParseAnswTemp+0x94>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 8004eb0:	4834      	ldr	r0, [pc, #208]	; (8004f84 <UART_ParseAnswTemp+0x134>)
 8004eb2:	f7fc fc1d 	bl	80016f0 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 8004eb6:	4b31      	ldr	r3, [pc, #196]	; (8004f7c <UART_ParseAnswTemp+0x12c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fb fb5c 	bl	8000578 <__aeabi_f2d>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4930      	ldr	r1, [pc, #192]	; (8004f88 <UART_ParseAnswTemp+0x138>)
 8004ec6:	4831      	ldr	r0, [pc, #196]	; (8004f8c <UART_ParseAnswTemp+0x13c>)
 8004ec8:	f008 f842 	bl	800cf50 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004ecc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2250      	movs	r2, #80	; 0x50
 8004eda:	2114      	movs	r1, #20
 8004edc:	482b      	ldr	r0, [pc, #172]	; (8004f8c <UART_ParseAnswTemp+0x13c>)
 8004ede:	f7fc fe21 	bl	8001b24 <EF_PutString>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 8004ee2:	e045      	b.n	8004f70 <UART_ParseAnswTemp+0x120>
				else if(NrCzujnika == 2)
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d142      	bne.n	8004f70 <UART_ParseAnswTemp+0x120>
						if (CTemp == 0.0) // Error in connection to ds18b20
 8004eea:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <UART_ParseAnswTemp+0x12c>)
 8004eec:	edd3 7a00 	vldr	s15, [r3]
 8004ef0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef8:	d11d      	bne.n	8004f36 <UART_ParseAnswTemp+0xe6>
							CTemp = LCTemp;
 8004efa:	4b25      	ldr	r3, [pc, #148]	; (8004f90 <UART_ParseAnswTemp+0x140>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1f      	ldr	r2, [pc, #124]	; (8004f7c <UART_ParseAnswTemp+0x12c>)
 8004f00:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 8004f02:	4820      	ldr	r0, [pc, #128]	; (8004f84 <UART_ParseAnswTemp+0x134>)
 8004f04:	f7fc fbf4 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8004f08:	4b1c      	ldr	r3, [pc, #112]	; (8004f7c <UART_ParseAnswTemp+0x12c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fb fb33 	bl	8000578 <__aeabi_f2d>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	491f      	ldr	r1, [pc, #124]	; (8004f94 <UART_ParseAnswTemp+0x144>)
 8004f18:	481c      	ldr	r0, [pc, #112]	; (8004f8c <UART_ParseAnswTemp+0x13c>)
 8004f1a:	f008 f819 	bl	800cf50 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004f1e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	2301      	movs	r3, #1
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	226e      	movs	r2, #110	; 0x6e
 8004f2c:	2114      	movs	r1, #20
 8004f2e:	4817      	ldr	r0, [pc, #92]	; (8004f8c <UART_ParseAnswTemp+0x13c>)
 8004f30:	f7fc fdf8 	bl	8001b24 <EF_PutString>
	}
 8004f34:	e01c      	b.n	8004f70 <UART_ParseAnswTemp+0x120>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8004f36:	4813      	ldr	r0, [pc, #76]	; (8004f84 <UART_ParseAnswTemp+0x134>)
 8004f38:	f7fc fbda 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <UART_ParseAnswTemp+0x12c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fb fb19 	bl	8000578 <__aeabi_f2d>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4912      	ldr	r1, [pc, #72]	; (8004f94 <UART_ParseAnswTemp+0x144>)
 8004f4c:	480f      	ldr	r0, [pc, #60]	; (8004f8c <UART_ParseAnswTemp+0x13c>)
 8004f4e:	f007 ffff 	bl	800cf50 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004f52:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	2301      	movs	r3, #1
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	226e      	movs	r2, #110	; 0x6e
 8004f60:	2114      	movs	r1, #20
 8004f62:	480a      	ldr	r0, [pc, #40]	; (8004f8c <UART_ParseAnswTemp+0x13c>)
 8004f64:	f7fc fdde 	bl	8001b24 <EF_PutString>
							LCTemp = CTemp;
 8004f68:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <UART_ParseAnswTemp+0x12c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <UART_ParseAnswTemp+0x140>)
 8004f6e:	6013      	str	r3, [r2, #0]
	}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	08010e70 	.word	0x08010e70
 8004f7c:	20000254 	.word	0x20000254
 8004f80:	20000250 	.word	0x20000250
 8004f84:	08013ac0 	.word	0x08013ac0
 8004f88:	08010e9c 	.word	0x08010e9c
 8004f8c:	200002bc 	.word	0x200002bc
 8004f90:	20000258 	.word	0x20000258
 8004f94:	08010eb0 	.word	0x08010eb0

08004f98 <UART_ParseAnswPres>:

//
// Parsing information about current presure
//"APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8004f9e:	491b      	ldr	r1, [pc, #108]	; (800500c <UART_ParseAnswPres+0x74>)
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f008 fe2d 	bl	800dc00 <strtok>
 8004fa6:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d028      	beq.n	8005002 <UART_ParseAnswPres+0x6a>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f007 f913 	bl	800c1dc <atof>
 8004fb6:	ec53 2b10 	vmov	r2, r3, d0
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f7fb fe2b 	bl	8000c18 <__aeabi_d2f>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4a12      	ldr	r2, [pc, #72]	; (8005010 <UART_ParseAnswPres+0x78>)
 8004fc6:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8004fc8:	4b12      	ldr	r3, [pc, #72]	; (8005014 <UART_ParseAnswPres+0x7c>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d118      	bne.n	8005002 <UART_ParseAnswPres+0x6a>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8004fd0:	4811      	ldr	r0, [pc, #68]	; (8005018 <UART_ParseAnswPres+0x80>)
 8004fd2:	f7fc fb8d 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <UART_ParseAnswPres+0x78>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fb facc 	bl	8000578 <__aeabi_f2d>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	490d      	ldr	r1, [pc, #52]	; (800501c <UART_ParseAnswPres+0x84>)
 8004fe6:	480e      	ldr	r0, [pc, #56]	; (8005020 <UART_ParseAnswPres+0x88>)
 8004fe8:	f007 ffb2 	bl	800cf50 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004fec:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	22aa      	movs	r2, #170	; 0xaa
 8004ffa:	2114      	movs	r1, #20
 8004ffc:	4808      	ldr	r0, [pc, #32]	; (8005020 <UART_ParseAnswPres+0x88>)
 8004ffe:	f7fc fd91 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	08010e70 	.word	0x08010e70
 8005010:	2000025c 	.word	0x2000025c
 8005014:	20000250 	.word	0x20000250
 8005018:	08013ac0 	.word	0x08013ac0
 800501c:	08010ec4 	.word	0x08010ec4
 8005020:	200002bc 	.word	0x200002bc

08005024 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
	//TODO!
}
 8005028:	bf00      	nop
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8005032:	b480      	push	{r7}
 8005034:	af00      	add	r7, sp, #0
	//TODO!
}
 8005036:	bf00      	nop
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8005046:	2300      	movs	r3, #0
 8005048:	71fb      	strb	r3, [r7, #7]
 800504a:	e04a      	b.n	80050e2 <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800504c:	4928      	ldr	r1, [pc, #160]	; (80050f0 <UART_ParseAnswRelayStateStatus+0xb0>)
 800504e:	2000      	movs	r0, #0
 8005050:	f008 fdd6 	bl	800dc00 <strtok>
 8005054:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d02f      	beq.n	80050be <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800505e:	2300      	movs	r3, #0
 8005060:	71bb      	strb	r3, [r7, #6]
 8005062:	e025      	b.n	80050b0 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8005064:	79bb      	ldrb	r3, [r7, #6]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	4413      	add	r3, r2
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b2f      	cmp	r3, #47	; 0x2f
 800506e:	d905      	bls.n	800507c <UART_ParseAnswRelayStateStatus+0x3c>
 8005070:	79bb      	ldrb	r3, [r7, #6]
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	4413      	add	r3, r2
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b39      	cmp	r3, #57	; 0x39
 800507a:	d90e      	bls.n	800509a <UART_ParseAnswRelayStateStatus+0x5a>
 800507c:	79bb      	ldrb	r3, [r7, #6]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	4413      	add	r3, r2
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b2e      	cmp	r3, #46	; 0x2e
 8005086:	d008      	beq.n	800509a <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8005088:	491a      	ldr	r1, [pc, #104]	; (80050f4 <UART_ParseAnswRelayStateStatus+0xb4>)
 800508a:	481b      	ldr	r0, [pc, #108]	; (80050f8 <UART_ParseAnswRelayStateStatus+0xb8>)
 800508c:	f007 ff60 	bl	800cf50 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8005090:	4919      	ldr	r1, [pc, #100]	; (80050f8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005092:	481a      	ldr	r0, [pc, #104]	; (80050fc <UART_ParseAnswRelayStateStatus+0xbc>)
 8005094:	f000 fe0b 	bl	8005cae <UARTDMA_Print>
					return;	// And exit parsing
 8005098:	e026      	b.n	80050e8 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 800509a:	6838      	ldr	r0, [r7, #0]
 800509c:	f007 f8a1 	bl	800c1e2 <atoi>
 80050a0:	4602      	mov	r2, r0
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	b2d1      	uxtb	r1, r2
 80050a6:	4a16      	ldr	r2, [pc, #88]	; (8005100 <UART_ParseAnswRelayStateStatus+0xc0>)
 80050a8:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80050aa:	79bb      	ldrb	r3, [r7, #6]
 80050ac:	3301      	adds	r3, #1
 80050ae:	71bb      	strb	r3, [r7, #6]
 80050b0:	79bb      	ldrb	r3, [r7, #6]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	4413      	add	r3, r2
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1d3      	bne.n	8005064 <UART_ParseAnswRelayStateStatus+0x24>
 80050bc:	e008      	b.n	80050d0 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 80050be:	4911      	ldr	r1, [pc, #68]	; (8005104 <UART_ParseAnswRelayStateStatus+0xc4>)
 80050c0:	480d      	ldr	r0, [pc, #52]	; (80050f8 <UART_ParseAnswRelayStateStatus+0xb8>)
 80050c2:	f007 ff45 	bl	800cf50 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 80050c6:	490c      	ldr	r1, [pc, #48]	; (80050f8 <UART_ParseAnswRelayStateStatus+0xb8>)
 80050c8:	480c      	ldr	r0, [pc, #48]	; (80050fc <UART_ParseAnswRelayStateStatus+0xbc>)
 80050ca:	f000 fdf0 	bl	8005cae <UARTDMA_Print>
			return;	// And exit parsing
 80050ce:	e00b      	b.n	80050e8 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 80050d0:	4b0d      	ldr	r3, [pc, #52]	; (8005108 <UART_ParseAnswRelayStateStatus+0xc8>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d101      	bne.n	80050dc <UART_ParseAnswRelayStateStatus+0x9c>
 80050d8:	f7fe faaa 	bl	8003630 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	3301      	adds	r3, #1
 80050e0:	71fb      	strb	r3, [r7, #7]
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d9b1      	bls.n	800504c <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	08010e70 	.word	0x08010e70
 80050f4:	08010edc 	.word	0x08010edc
 80050f8:	20000504 	.word	0x20000504
 80050fc:	200003f0 	.word	0x200003f0
 8005100:	20000268 	.word	0x20000268
 8005104:	08010ef0 	.word	0x08010ef0
 8005108:	20000250 	.word	0x20000250

0800510c <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8005112:	2300      	movs	r3, #0
 8005114:	71fb      	strb	r3, [r7, #7]
 8005116:	e04a      	b.n	80051ae <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8005118:	4928      	ldr	r1, [pc, #160]	; (80051bc <UART_ParseAnswLightsStateStatus+0xb0>)
 800511a:	2000      	movs	r0, #0
 800511c:	f008 fd70 	bl	800dc00 <strtok>
 8005120:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d02f      	beq.n	800518a <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800512a:	2300      	movs	r3, #0
 800512c:	71bb      	strb	r3, [r7, #6]
 800512e:	e025      	b.n	800517c <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8005130:	79bb      	ldrb	r3, [r7, #6]
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	4413      	add	r3, r2
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b2f      	cmp	r3, #47	; 0x2f
 800513a:	d905      	bls.n	8005148 <UART_ParseAnswLightsStateStatus+0x3c>
 800513c:	79bb      	ldrb	r3, [r7, #6]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	4413      	add	r3, r2
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b39      	cmp	r3, #57	; 0x39
 8005146:	d90e      	bls.n	8005166 <UART_ParseAnswLightsStateStatus+0x5a>
 8005148:	79bb      	ldrb	r3, [r7, #6]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	4413      	add	r3, r2
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b2e      	cmp	r3, #46	; 0x2e
 8005152:	d008      	beq.n	8005166 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8005154:	491a      	ldr	r1, [pc, #104]	; (80051c0 <UART_ParseAnswLightsStateStatus+0xb4>)
 8005156:	481b      	ldr	r0, [pc, #108]	; (80051c4 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005158:	f007 fefa 	bl	800cf50 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 800515c:	4919      	ldr	r1, [pc, #100]	; (80051c4 <UART_ParseAnswLightsStateStatus+0xb8>)
 800515e:	481a      	ldr	r0, [pc, #104]	; (80051c8 <UART_ParseAnswLightsStateStatus+0xbc>)
 8005160:	f000 fda5 	bl	8005cae <UARTDMA_Print>
					return;	// And exit parsing
 8005164:	e026      	b.n	80051b4 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8005166:	6838      	ldr	r0, [r7, #0]
 8005168:	f007 f83b 	bl	800c1e2 <atoi>
 800516c:	4602      	mov	r2, r0
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	b2d1      	uxtb	r1, r2
 8005172:	4a16      	ldr	r2, [pc, #88]	; (80051cc <UART_ParseAnswLightsStateStatus+0xc0>)
 8005174:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005176:	79bb      	ldrb	r3, [r7, #6]
 8005178:	3301      	adds	r3, #1
 800517a:	71bb      	strb	r3, [r7, #6]
 800517c:	79bb      	ldrb	r3, [r7, #6]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	4413      	add	r3, r2
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1d3      	bne.n	8005130 <UART_ParseAnswLightsStateStatus+0x24>
 8005188:	e008      	b.n	800519c <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800518a:	4911      	ldr	r1, [pc, #68]	; (80051d0 <UART_ParseAnswLightsStateStatus+0xc4>)
 800518c:	480d      	ldr	r0, [pc, #52]	; (80051c4 <UART_ParseAnswLightsStateStatus+0xb8>)
 800518e:	f007 fedf 	bl	800cf50 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8005192:	490c      	ldr	r1, [pc, #48]	; (80051c4 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005194:	480c      	ldr	r0, [pc, #48]	; (80051c8 <UART_ParseAnswLightsStateStatus+0xbc>)
 8005196:	f000 fd8a 	bl	8005cae <UARTDMA_Print>
			return;	// And exit parsing
 800519a:	e00b      	b.n	80051b4 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 800519c:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <UART_ParseAnswLightsStateStatus+0xc8>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b05      	cmp	r3, #5
 80051a2:	d101      	bne.n	80051a8 <UART_ParseAnswLightsStateStatus+0x9c>
 80051a4:	f7fe fb4c 	bl	8003840 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	3301      	adds	r3, #1
 80051ac:	71fb      	strb	r3, [r7, #7]
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d9b1      	bls.n	8005118 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	08010e70 	.word	0x08010e70
 80051c0:	08010edc 	.word	0x08010edc
 80051c4:	20000504 	.word	0x20000504
 80051c8:	200003f0 	.word	0x200003f0
 80051cc:	2000026c 	.word	0x2000026c
 80051d0:	08010ef0 	.word	0x08010ef0
 80051d4:	20000250 	.word	0x20000250

080051d8 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	2b1b      	cmp	r3, #27
 80051ea:	f200 80c7 	bhi.w	800537c <SendComand+0x1a4>
 80051ee:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <SendComand+0x1c>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005265 	.word	0x08005265
 80051f8:	0800526f 	.word	0x0800526f
 80051fc:	08005279 	.word	0x08005279
 8005200:	08005283 	.word	0x08005283
 8005204:	08005297 	.word	0x08005297
 8005208:	080052a1 	.word	0x080052a1
 800520c:	080052ab 	.word	0x080052ab
 8005210:	080052b5 	.word	0x080052b5
 8005214:	080052bf 	.word	0x080052bf
 8005218:	080052c9 	.word	0x080052c9
 800521c:	080052d3 	.word	0x080052d3
 8005220:	080052dd 	.word	0x080052dd
 8005224:	080052e7 	.word	0x080052e7
 8005228:	0800530f 	.word	0x0800530f
 800522c:	08005319 	.word	0x08005319
 8005230:	08005323 	.word	0x08005323
 8005234:	0800532d 	.word	0x0800532d
 8005238:	08005337 	.word	0x08005337
 800523c:	08005341 	.word	0x08005341
 8005240:	0800534b 	.word	0x0800534b
 8005244:	08005355 	.word	0x08005355
 8005248:	08005305 	.word	0x08005305
 800524c:	08005373 	.word	0x08005373
 8005250:	080052f1 	.word	0x080052f1
 8005254:	080052fb 	.word	0x080052fb
 8005258:	0800535f 	.word	0x0800535f
 800525c:	08005369 	.word	0x08005369
 8005260:	0800528d 	.word	0x0800528d
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8005264:	4948      	ldr	r1, [pc, #288]	; (8005388 <SendComand+0x1b0>)
 8005266:	4849      	ldr	r0, [pc, #292]	; (800538c <SendComand+0x1b4>)
 8005268:	f000 fd21 	bl	8005cae <UARTDMA_Print>
			break;
 800526c:	e086      	b.n	800537c <SendComand+0x1a4>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 800526e:	4948      	ldr	r1, [pc, #288]	; (8005390 <SendComand+0x1b8>)
 8005270:	4846      	ldr	r0, [pc, #280]	; (800538c <SendComand+0x1b4>)
 8005272:	f000 fd1c 	bl	8005cae <UARTDMA_Print>
			break;
 8005276:	e081      	b.n	800537c <SendComand+0x1a4>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8005278:	4946      	ldr	r1, [pc, #280]	; (8005394 <SendComand+0x1bc>)
 800527a:	4844      	ldr	r0, [pc, #272]	; (800538c <SendComand+0x1b4>)
 800527c:	f000 fd17 	bl	8005cae <UARTDMA_Print>
			break;
 8005280:	e07c      	b.n	800537c <SendComand+0x1a4>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8005282:	4945      	ldr	r1, [pc, #276]	; (8005398 <SendComand+0x1c0>)
 8005284:	4841      	ldr	r0, [pc, #260]	; (800538c <SendComand+0x1b4>)
 8005286:	f000 fd12 	bl	8005cae <UARTDMA_Print>
			break;
 800528a:	e077      	b.n	800537c <SendComand+0x1a4>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 800528c:	4943      	ldr	r1, [pc, #268]	; (800539c <SendComand+0x1c4>)
 800528e:	483f      	ldr	r0, [pc, #252]	; (800538c <SendComand+0x1b4>)
 8005290:	f000 fd0d 	bl	8005cae <UARTDMA_Print>
			break;
 8005294:	e072      	b.n	800537c <SendComand+0x1a4>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8005296:	4942      	ldr	r1, [pc, #264]	; (80053a0 <SendComand+0x1c8>)
 8005298:	483c      	ldr	r0, [pc, #240]	; (800538c <SendComand+0x1b4>)
 800529a:	f000 fd08 	bl	8005cae <UARTDMA_Print>
			break;
 800529e:	e06d      	b.n	800537c <SendComand+0x1a4>
		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 80052a0:	4940      	ldr	r1, [pc, #256]	; (80053a4 <SendComand+0x1cc>)
 80052a2:	483a      	ldr	r0, [pc, #232]	; (800538c <SendComand+0x1b4>)
 80052a4:	f000 fd03 	bl	8005cae <UARTDMA_Print>
			break;
 80052a8:	e068      	b.n	800537c <SendComand+0x1a4>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 80052aa:	493f      	ldr	r1, [pc, #252]	; (80053a8 <SendComand+0x1d0>)
 80052ac:	4837      	ldr	r0, [pc, #220]	; (800538c <SendComand+0x1b4>)
 80052ae:	f000 fcfe 	bl	8005cae <UARTDMA_Print>
			break;
 80052b2:	e063      	b.n	800537c <SendComand+0x1a4>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 80052b4:	493d      	ldr	r1, [pc, #244]	; (80053ac <SendComand+0x1d4>)
 80052b6:	4835      	ldr	r0, [pc, #212]	; (800538c <SendComand+0x1b4>)
 80052b8:	f000 fcf9 	bl	8005cae <UARTDMA_Print>
			break;
 80052bc:	e05e      	b.n	800537c <SendComand+0x1a4>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 80052be:	493c      	ldr	r1, [pc, #240]	; (80053b0 <SendComand+0x1d8>)
 80052c0:	4832      	ldr	r0, [pc, #200]	; (800538c <SendComand+0x1b4>)
 80052c2:	f000 fcf4 	bl	8005cae <UARTDMA_Print>
			break;
 80052c6:	e059      	b.n	800537c <SendComand+0x1a4>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 80052c8:	493a      	ldr	r1, [pc, #232]	; (80053b4 <SendComand+0x1dc>)
 80052ca:	4830      	ldr	r0, [pc, #192]	; (800538c <SendComand+0x1b4>)
 80052cc:	f000 fcef 	bl	8005cae <UARTDMA_Print>
			break;
 80052d0:	e054      	b.n	800537c <SendComand+0x1a4>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 80052d2:	4939      	ldr	r1, [pc, #228]	; (80053b8 <SendComand+0x1e0>)
 80052d4:	482d      	ldr	r0, [pc, #180]	; (800538c <SendComand+0x1b4>)
 80052d6:	f000 fcea 	bl	8005cae <UARTDMA_Print>
			break;
 80052da:	e04f      	b.n	800537c <SendComand+0x1a4>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 80052dc:	4937      	ldr	r1, [pc, #220]	; (80053bc <SendComand+0x1e4>)
 80052de:	482b      	ldr	r0, [pc, #172]	; (800538c <SendComand+0x1b4>)
 80052e0:	f000 fce5 	bl	8005cae <UARTDMA_Print>
			break;
 80052e4:	e04a      	b.n	800537c <SendComand+0x1a4>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 80052e6:	4936      	ldr	r1, [pc, #216]	; (80053c0 <SendComand+0x1e8>)
 80052e8:	4828      	ldr	r0, [pc, #160]	; (800538c <SendComand+0x1b4>)
 80052ea:	f000 fce0 	bl	8005cae <UARTDMA_Print>
			break;
 80052ee:	e045      	b.n	800537c <SendComand+0x1a4>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 80052f0:	4934      	ldr	r1, [pc, #208]	; (80053c4 <SendComand+0x1ec>)
 80052f2:	4826      	ldr	r0, [pc, #152]	; (800538c <SendComand+0x1b4>)
 80052f4:	f000 fcdb 	bl	8005cae <UARTDMA_Print>
			break;
 80052f8:	e040      	b.n	800537c <SendComand+0x1a4>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 80052fa:	4933      	ldr	r1, [pc, #204]	; (80053c8 <SendComand+0x1f0>)
 80052fc:	4823      	ldr	r0, [pc, #140]	; (800538c <SendComand+0x1b4>)
 80052fe:	f000 fcd6 	bl	8005cae <UARTDMA_Print>
			break;
 8005302:	e03b      	b.n	800537c <SendComand+0x1a4>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8005304:	4931      	ldr	r1, [pc, #196]	; (80053cc <SendComand+0x1f4>)
 8005306:	4821      	ldr	r0, [pc, #132]	; (800538c <SendComand+0x1b4>)
 8005308:	f000 fcd1 	bl	8005cae <UARTDMA_Print>
			break;
 800530c:	e036      	b.n	800537c <SendComand+0x1a4>
		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 800530e:	4930      	ldr	r1, [pc, #192]	; (80053d0 <SendComand+0x1f8>)
 8005310:	481e      	ldr	r0, [pc, #120]	; (800538c <SendComand+0x1b4>)
 8005312:	f000 fccc 	bl	8005cae <UARTDMA_Print>
			break;
 8005316:	e031      	b.n	800537c <SendComand+0x1a4>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8005318:	492e      	ldr	r1, [pc, #184]	; (80053d4 <SendComand+0x1fc>)
 800531a:	481c      	ldr	r0, [pc, #112]	; (800538c <SendComand+0x1b4>)
 800531c:	f000 fcc7 	bl	8005cae <UARTDMA_Print>
			break;
 8005320:	e02c      	b.n	800537c <SendComand+0x1a4>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8005322:	492d      	ldr	r1, [pc, #180]	; (80053d8 <SendComand+0x200>)
 8005324:	4819      	ldr	r0, [pc, #100]	; (800538c <SendComand+0x1b4>)
 8005326:	f000 fcc2 	bl	8005cae <UARTDMA_Print>
			break;
 800532a:	e027      	b.n	800537c <SendComand+0x1a4>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 800532c:	492b      	ldr	r1, [pc, #172]	; (80053dc <SendComand+0x204>)
 800532e:	4817      	ldr	r0, [pc, #92]	; (800538c <SendComand+0x1b4>)
 8005330:	f000 fcbd 	bl	8005cae <UARTDMA_Print>
			break;
 8005334:	e022      	b.n	800537c <SendComand+0x1a4>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8005336:	492a      	ldr	r1, [pc, #168]	; (80053e0 <SendComand+0x208>)
 8005338:	4814      	ldr	r0, [pc, #80]	; (800538c <SendComand+0x1b4>)
 800533a:	f000 fcb8 	bl	8005cae <UARTDMA_Print>
			break;
 800533e:	e01d      	b.n	800537c <SendComand+0x1a4>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8005340:	4928      	ldr	r1, [pc, #160]	; (80053e4 <SendComand+0x20c>)
 8005342:	4812      	ldr	r0, [pc, #72]	; (800538c <SendComand+0x1b4>)
 8005344:	f000 fcb3 	bl	8005cae <UARTDMA_Print>
			break;
 8005348:	e018      	b.n	800537c <SendComand+0x1a4>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 800534a:	4927      	ldr	r1, [pc, #156]	; (80053e8 <SendComand+0x210>)
 800534c:	480f      	ldr	r0, [pc, #60]	; (800538c <SendComand+0x1b4>)
 800534e:	f000 fcae 	bl	8005cae <UARTDMA_Print>
			break;
 8005352:	e013      	b.n	800537c <SendComand+0x1a4>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8005354:	4925      	ldr	r1, [pc, #148]	; (80053ec <SendComand+0x214>)
 8005356:	480d      	ldr	r0, [pc, #52]	; (800538c <SendComand+0x1b4>)
 8005358:	f000 fca9 	bl	8005cae <UARTDMA_Print>
			break;
 800535c:	e00e      	b.n	800537c <SendComand+0x1a4>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 800535e:	4924      	ldr	r1, [pc, #144]	; (80053f0 <SendComand+0x218>)
 8005360:	480a      	ldr	r0, [pc, #40]	; (800538c <SendComand+0x1b4>)
 8005362:	f000 fca4 	bl	8005cae <UARTDMA_Print>
			break;
 8005366:	e009      	b.n	800537c <SendComand+0x1a4>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8005368:	4922      	ldr	r1, [pc, #136]	; (80053f4 <SendComand+0x21c>)
 800536a:	4808      	ldr	r0, [pc, #32]	; (800538c <SendComand+0x1b4>)
 800536c:	f000 fc9f 	bl	8005cae <UARTDMA_Print>
			break;
 8005370:	e004      	b.n	800537c <SendComand+0x1a4>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8005372:	4921      	ldr	r1, [pc, #132]	; (80053f8 <SendComand+0x220>)
 8005374:	4805      	ldr	r0, [pc, #20]	; (800538c <SendComand+0x1b4>)
 8005376:	f000 fc9a 	bl	8005cae <UARTDMA_Print>
			break;
 800537a:	bf00      	nop
		}
	return 1;
 800537c:	2301      	movs	r3, #1
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	08010f0c 	.word	0x08010f0c
 800538c:	200003f0 	.word	0x200003f0
 8005390:	08010f14 	.word	0x08010f14
 8005394:	08010f1c 	.word	0x08010f1c
 8005398:	08010f28 	.word	0x08010f28
 800539c:	08010f30 	.word	0x08010f30
 80053a0:	08010f38 	.word	0x08010f38
 80053a4:	08010f40 	.word	0x08010f40
 80053a8:	08010f50 	.word	0x08010f50
 80053ac:	08010f60 	.word	0x08010f60
 80053b0:	08010f70 	.word	0x08010f70
 80053b4:	08010f80 	.word	0x08010f80
 80053b8:	08010f90 	.word	0x08010f90
 80053bc:	08010fa0 	.word	0x08010fa0
 80053c0:	08010fb0 	.word	0x08010fb0
 80053c4:	08010fc0 	.word	0x08010fc0
 80053c8:	08010fd0 	.word	0x08010fd0
 80053cc:	08010fe0 	.word	0x08010fe0
 80053d0:	08010ff0 	.word	0x08010ff0
 80053d4:	08011000 	.word	0x08011000
 80053d8:	08011010 	.word	0x08011010
 80053dc:	08011020 	.word	0x08011020
 80053e0:	08011030 	.word	0x08011030
 80053e4:	08011040 	.word	0x08011040
 80053e8:	08011050 	.word	0x08011050
 80053ec:	08011060 	.word	0x08011060
 80053f0:	08011070 	.word	0x08011070
 80053f4:	08011080 	.word	0x08011080
 80053f8:	08011090 	.word	0x08011090

080053fc <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	781a      	ldrb	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	785b      	ldrb	r3, [r3, #1]
 800540e:	429a      	cmp	r2, r3
 8005410:	d101      	bne.n	8005416 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8005412:	2301      	movs	r3, #1
 8005414:	e018      	b.n	8005448 <RB_Read+0x4c>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	461a      	mov	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4413      	add	r3, r2
 8005420:	789a      	ldrb	r2, [r3, #2]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	785b      	ldrb	r3, [r3, #1]
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <RB_Read+0x58>)
 800542e:	fb83 1302 	smull	r1, r3, r3, r2
 8005432:	1159      	asrs	r1, r3, #5
 8005434:	17d3      	asrs	r3, r2, #31
 8005436:	1ac9      	subs	r1, r1, r3
 8005438:	460b      	mov	r3, r1
 800543a:	019b      	lsls	r3, r3, #6
 800543c:	440b      	add	r3, r1
 800543e:	1ad1      	subs	r1, r2, r3
 8005440:	b2ca      	uxtb	r2, r1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	7e07e07f 	.word	0x7e07e07f

08005458 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <RB_Write+0x5c>)
 800546c:	fb83 1302 	smull	r1, r3, r3, r2
 8005470:	1159      	asrs	r1, r3, #5
 8005472:	17d3      	asrs	r3, r2, #31
 8005474:	1ac9      	subs	r1, r1, r3
 8005476:	460b      	mov	r3, r1
 8005478:	019b      	lsls	r3, r3, #6
 800547a:	440b      	add	r3, r1
 800547c:	1ad1      	subs	r1, r2, r3
 800547e:	460b      	mov	r3, r1
 8005480:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	7bfa      	ldrb	r2, [r7, #15]
 8005488:	429a      	cmp	r2, r3
 800548a:	d101      	bne.n	8005490 <RB_Write+0x38>
	{
		return RB_ERROR; // No free space error
 800548c:	2301      	movs	r3, #1
 800548e:	e00a      	b.n	80054a6 <RB_Write+0x4e>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4413      	add	r3, r2
 800549a:	78fa      	ldrb	r2, [r7, #3]
 800549c:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	7bfa      	ldrb	r2, [r7, #15]
 80054a2:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	7e07e07f 	.word	0x7e07e07f

080054b8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80054bc:	4b17      	ldr	r3, [pc, #92]	; (800551c <MX_SPI1_Init+0x64>)
 80054be:	4a18      	ldr	r2, [pc, #96]	; (8005520 <MX_SPI1_Init+0x68>)
 80054c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80054c2:	4b16      	ldr	r3, [pc, #88]	; (800551c <MX_SPI1_Init+0x64>)
 80054c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80054c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80054ca:	4b14      	ldr	r3, [pc, #80]	; (800551c <MX_SPI1_Init+0x64>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80054d0:	4b12      	ldr	r3, [pc, #72]	; (800551c <MX_SPI1_Init+0x64>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80054d6:	4b11      	ldr	r3, [pc, #68]	; (800551c <MX_SPI1_Init+0x64>)
 80054d8:	2200      	movs	r2, #0
 80054da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80054dc:	4b0f      	ldr	r3, [pc, #60]	; (800551c <MX_SPI1_Init+0x64>)
 80054de:	2200      	movs	r2, #0
 80054e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80054e2:	4b0e      	ldr	r3, [pc, #56]	; (800551c <MX_SPI1_Init+0x64>)
 80054e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80054ea:	4b0c      	ldr	r3, [pc, #48]	; (800551c <MX_SPI1_Init+0x64>)
 80054ec:	2210      	movs	r2, #16
 80054ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <MX_SPI1_Init+0x64>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80054f6:	4b09      	ldr	r3, [pc, #36]	; (800551c <MX_SPI1_Init+0x64>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054fc:	4b07      	ldr	r3, [pc, #28]	; (800551c <MX_SPI1_Init+0x64>)
 80054fe:	2200      	movs	r2, #0
 8005500:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <MX_SPI1_Init+0x64>)
 8005504:	220a      	movs	r2, #10
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005508:	4804      	ldr	r0, [pc, #16]	; (800551c <MX_SPI1_Init+0x64>)
 800550a:	f004 fe6d 	bl	800a1e8 <HAL_SPI_Init>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005514:	f7fe fd2c 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005518:	bf00      	nop
 800551a:	bd80      	pop	{r7, pc}
 800551c:	200005a0 	.word	0x200005a0
 8005520:	40013000 	.word	0x40013000

08005524 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005528:	4b17      	ldr	r3, [pc, #92]	; (8005588 <MX_SPI3_Init+0x64>)
 800552a:	4a18      	ldr	r2, [pc, #96]	; (800558c <MX_SPI3_Init+0x68>)
 800552c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800552e:	4b16      	ldr	r3, [pc, #88]	; (8005588 <MX_SPI3_Init+0x64>)
 8005530:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005534:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <MX_SPI3_Init+0x64>)
 8005538:	2200      	movs	r2, #0
 800553a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800553c:	4b12      	ldr	r3, [pc, #72]	; (8005588 <MX_SPI3_Init+0x64>)
 800553e:	2200      	movs	r2, #0
 8005540:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <MX_SPI3_Init+0x64>)
 8005544:	2200      	movs	r2, #0
 8005546:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005548:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <MX_SPI3_Init+0x64>)
 800554a:	2200      	movs	r2, #0
 800554c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800554e:	4b0e      	ldr	r3, [pc, #56]	; (8005588 <MX_SPI3_Init+0x64>)
 8005550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005554:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005556:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <MX_SPI3_Init+0x64>)
 8005558:	2220      	movs	r2, #32
 800555a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800555c:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <MX_SPI3_Init+0x64>)
 800555e:	2200      	movs	r2, #0
 8005560:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005562:	4b09      	ldr	r3, [pc, #36]	; (8005588 <MX_SPI3_Init+0x64>)
 8005564:	2200      	movs	r2, #0
 8005566:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005568:	4b07      	ldr	r3, [pc, #28]	; (8005588 <MX_SPI3_Init+0x64>)
 800556a:	2200      	movs	r2, #0
 800556c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <MX_SPI3_Init+0x64>)
 8005570:	220a      	movs	r2, #10
 8005572:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005574:	4804      	ldr	r0, [pc, #16]	; (8005588 <MX_SPI3_Init+0x64>)
 8005576:	f004 fe37 	bl	800a1e8 <HAL_SPI_Init>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8005580:	f7fe fcf6 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005584:	bf00      	nop
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20000548 	.word	0x20000548
 800558c:	40003c00 	.word	0x40003c00

08005590 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08c      	sub	sp, #48	; 0x30
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005598:	f107 031c 	add.w	r3, r7, #28
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	605a      	str	r2, [r3, #4]
 80055a2:	609a      	str	r2, [r3, #8]
 80055a4:	60da      	str	r2, [r3, #12]
 80055a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a32      	ldr	r2, [pc, #200]	; (8005678 <HAL_SPI_MspInit+0xe8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d12c      	bne.n	800560c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80055b2:	2300      	movs	r3, #0
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	4b31      	ldr	r3, [pc, #196]	; (800567c <HAL_SPI_MspInit+0xec>)
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	4a30      	ldr	r2, [pc, #192]	; (800567c <HAL_SPI_MspInit+0xec>)
 80055bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055c0:	6453      	str	r3, [r2, #68]	; 0x44
 80055c2:	4b2e      	ldr	r3, [pc, #184]	; (800567c <HAL_SPI_MspInit+0xec>)
 80055c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	4b2a      	ldr	r3, [pc, #168]	; (800567c <HAL_SPI_MspInit+0xec>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	4a29      	ldr	r2, [pc, #164]	; (800567c <HAL_SPI_MspInit+0xec>)
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	6313      	str	r3, [r2, #48]	; 0x30
 80055de:	4b27      	ldr	r3, [pc, #156]	; (800567c <HAL_SPI_MspInit+0xec>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80055ea:	23e0      	movs	r3, #224	; 0xe0
 80055ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ee:	2302      	movs	r3, #2
 80055f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f6:	2303      	movs	r3, #3
 80055f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80055fa:	2305      	movs	r3, #5
 80055fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055fe:	f107 031c 	add.w	r3, r7, #28
 8005602:	4619      	mov	r1, r3
 8005604:	481e      	ldr	r0, [pc, #120]	; (8005680 <HAL_SPI_MspInit+0xf0>)
 8005606:	f001 fb59 	bl	8006cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800560a:	e030      	b.n	800566e <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1c      	ldr	r2, [pc, #112]	; (8005684 <HAL_SPI_MspInit+0xf4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d12b      	bne.n	800566e <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005616:	2300      	movs	r3, #0
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	4b18      	ldr	r3, [pc, #96]	; (800567c <HAL_SPI_MspInit+0xec>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	4a17      	ldr	r2, [pc, #92]	; (800567c <HAL_SPI_MspInit+0xec>)
 8005620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005624:	6413      	str	r3, [r2, #64]	; 0x40
 8005626:	4b15      	ldr	r3, [pc, #84]	; (800567c <HAL_SPI_MspInit+0xec>)
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	4b11      	ldr	r3, [pc, #68]	; (800567c <HAL_SPI_MspInit+0xec>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	4a10      	ldr	r2, [pc, #64]	; (800567c <HAL_SPI_MspInit+0xec>)
 800563c:	f043 0302 	orr.w	r3, r3, #2
 8005640:	6313      	str	r3, [r2, #48]	; 0x30
 8005642:	4b0e      	ldr	r3, [pc, #56]	; (800567c <HAL_SPI_MspInit+0xec>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800564e:	2338      	movs	r3, #56	; 0x38
 8005650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005652:	2302      	movs	r3, #2
 8005654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005656:	2300      	movs	r3, #0
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800565a:	2303      	movs	r3, #3
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800565e:	2306      	movs	r3, #6
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005662:	f107 031c 	add.w	r3, r7, #28
 8005666:	4619      	mov	r1, r3
 8005668:	4807      	ldr	r0, [pc, #28]	; (8005688 <HAL_SPI_MspInit+0xf8>)
 800566a:	f001 fb27 	bl	8006cbc <HAL_GPIO_Init>
}
 800566e:	bf00      	nop
 8005670:	3730      	adds	r7, #48	; 0x30
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40013000 	.word	0x40013000
 800567c:	40023800 	.word	0x40023800
 8005680:	40020000 	.word	0x40020000
 8005684:	40003c00 	.word	0x40003c00
 8005688:	40020400 	.word	0x40020400

0800568c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005692:	2300      	movs	r3, #0
 8005694:	607b      	str	r3, [r7, #4]
 8005696:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <HAL_MspInit+0x4c>)
 8005698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569a:	4a0f      	ldr	r2, [pc, #60]	; (80056d8 <HAL_MspInit+0x4c>)
 800569c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056a0:	6453      	str	r3, [r2, #68]	; 0x44
 80056a2:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <HAL_MspInit+0x4c>)
 80056a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056aa:	607b      	str	r3, [r7, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056ae:	2300      	movs	r3, #0
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <HAL_MspInit+0x4c>)
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <HAL_MspInit+0x4c>)
 80056b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056bc:	6413      	str	r3, [r2, #64]	; 0x40
 80056be:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <HAL_MspInit+0x4c>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40023800 	.word	0x40023800

080056dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80056e0:	e7fe      	b.n	80056e0 <NMI_Handler+0x4>

080056e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056e2:	b480      	push	{r7}
 80056e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056e6:	e7fe      	b.n	80056e6 <HardFault_Handler+0x4>

080056e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056ec:	e7fe      	b.n	80056ec <MemManage_Handler+0x4>

080056ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056ee:	b480      	push	{r7}
 80056f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056f2:	e7fe      	b.n	80056f2 <BusFault_Handler+0x4>

080056f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056f8:	e7fe      	b.n	80056f8 <UsageFault_Handler+0x4>

080056fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056fa:	b480      	push	{r7}
 80056fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056fe:	bf00      	nop
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800570c:	bf00      	nop
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005716:	b480      	push	{r7}
 8005718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800571a:	bf00      	nop
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005728:	f000 fcd4 	bl	80060d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800572c:	bf00      	nop
 800572e:	bd80      	pop	{r7, pc}

08005730 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IRQ_Pin);
 8005734:	2010      	movs	r0, #16
 8005736:	f001 fc91 	bl	800705c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800573a:	bf00      	nop
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005744:	4802      	ldr	r0, [pc, #8]	; (8005750 <DMA1_Stream0_IRQHandler+0x10>)
 8005746:	f001 f841 	bl	80067cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800574a:	bf00      	nop
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000390 	.word	0x20000390

08005754 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005758:	4802      	ldr	r0, [pc, #8]	; (8005764 <DMA1_Stream1_IRQHandler+0x10>)
 800575a:	f001 f837 	bl	80067cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200002dc 	.word	0x200002dc

08005768 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 800576c:	4802      	ldr	r0, [pc, #8]	; (8005778 <DMA1_Stream5_IRQHandler+0x10>)
 800576e:	f000 f9e9 	bl	8005b44 <UARTDMA_DmaReceiveIrqHandler>
	return;
 8005772:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	200003f0 	.word	0x200003f0

0800577c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005780:	4802      	ldr	r0, [pc, #8]	; (800578c <DMA1_Stream6_IRQHandler+0x10>)
 8005782:	f001 f823 	bl	80067cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005786:	bf00      	nop
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	200006e8 	.word	0x200006e8

08005790 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8005794:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005798:	f001 fc60 	bl	800705c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800579c:	bf00      	nop
 800579e:	bd80      	pop	{r7, pc}

080057a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80057a4:	4802      	ldr	r0, [pc, #8]	; (80057b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80057a6:	f005 fa14 	bl	800abd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80057aa:	bf00      	nop
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	200005f8 	.word	0x200005f8

080057b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80057b8:	4802      	ldr	r0, [pc, #8]	; (80057c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80057ba:	f005 fa0a 	bl	800abd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000640 	.word	0x20000640

080057c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80057cc:	4802      	ldr	r0, [pc, #8]	; (80057d8 <I2C1_EV_IRQHandler+0x10>)
 80057ce:	f002 f8c5 	bl	800795c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80057d2:	bf00      	nop
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	2000033c 	.word	0x2000033c

080057dc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80057e0:	4802      	ldr	r0, [pc, #8]	; (80057ec <I2C1_ER_IRQHandler+0x10>)
 80057e2:	f002 fa2c 	bl	8007c3e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80057e6:	bf00      	nop
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	2000033c 	.word	0x2000033c

080057f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 80057f4:	4803      	ldr	r0, [pc, #12]	; (8005804 <USART2_IRQHandler+0x14>)
 80057f6:	f000 f97b 	bl	8005af0 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80057fa:	4803      	ldr	r0, [pc, #12]	; (8005808 <USART2_IRQHandler+0x18>)
 80057fc:	f005 fcaa 	bl	800b154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005800:	bf00      	nop
 8005802:	bd80      	pop	{r7, pc}
 8005804:	200003f0 	.word	0x200003f0
 8005808:	20000748 	.word	0x20000748

0800580c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8005810:	4802      	ldr	r0, [pc, #8]	; (800581c <SPI3_IRQHandler+0x10>)
 8005812:	f004 ff15 	bl	800a640 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8005816:	bf00      	nop
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000548 	.word	0x20000548

08005820 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
	return 1;
 8005824:	2301      	movs	r3, #1
}
 8005826:	4618      	mov	r0, r3
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <_kill>:

int _kill(int pid, int sig)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800583a:	f006 fcd7 	bl	800c1ec <__errno>
 800583e:	4603      	mov	r3, r0
 8005840:	2216      	movs	r2, #22
 8005842:	601a      	str	r2, [r3, #0]
	return -1;
 8005844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <_exit>:

void _exit (int status)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005858:	f04f 31ff 	mov.w	r1, #4294967295
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff ffe7 	bl	8005830 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005862:	e7fe      	b.n	8005862 <_exit+0x12>

08005864 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	e00a      	b.n	800588c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005876:	f3af 8000 	nop.w
 800587a:	4601      	mov	r1, r0
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	60ba      	str	r2, [r7, #8]
 8005882:	b2ca      	uxtb	r2, r1
 8005884:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	3301      	adds	r3, #1
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	dbf0      	blt.n	8005876 <_read+0x12>
	}

return len;
 8005894:	687b      	ldr	r3, [r7, #4]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b086      	sub	sp, #24
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	e009      	b.n	80058c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	60ba      	str	r2, [r7, #8]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	3301      	adds	r3, #1
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	dbf1      	blt.n	80058b0 <_write+0x12>
	}
	return len;
 80058cc:	687b      	ldr	r3, [r7, #4]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <_close>:

int _close(int file)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
	return -1;
 80058de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058fe:	605a      	str	r2, [r3, #4]
	return 0;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <_isatty>:

int _isatty(int file)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
	return 1;
 8005916:	2301      	movs	r3, #1
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
	return 0;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
	...

08005940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005948:	4a14      	ldr	r2, [pc, #80]	; (800599c <_sbrk+0x5c>)
 800594a:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <_sbrk+0x60>)
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005954:	4b13      	ldr	r3, [pc, #76]	; (80059a4 <_sbrk+0x64>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d102      	bne.n	8005962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800595c:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <_sbrk+0x64>)
 800595e:	4a12      	ldr	r2, [pc, #72]	; (80059a8 <_sbrk+0x68>)
 8005960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005962:	4b10      	ldr	r3, [pc, #64]	; (80059a4 <_sbrk+0x64>)
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	429a      	cmp	r2, r3
 800596e:	d207      	bcs.n	8005980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005970:	f006 fc3c 	bl	800c1ec <__errno>
 8005974:	4603      	mov	r3, r0
 8005976:	220c      	movs	r2, #12
 8005978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800597a:	f04f 33ff 	mov.w	r3, #4294967295
 800597e:	e009      	b.n	8005994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005980:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <_sbrk+0x64>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005986:	4b07      	ldr	r3, [pc, #28]	; (80059a4 <_sbrk+0x64>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4413      	add	r3, r2
 800598e:	4a05      	ldr	r2, [pc, #20]	; (80059a4 <_sbrk+0x64>)
 8005990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005992:	68fb      	ldr	r3, [r7, #12]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	20020000 	.word	0x20020000
 80059a0:	00000400 	.word	0x00000400
 80059a4:	20000274 	.word	0x20000274
 80059a8:	200007a0 	.word	0x200007a0

080059ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059b0:	4b06      	ldr	r3, [pc, #24]	; (80059cc <SystemInit+0x20>)
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b6:	4a05      	ldr	r2, [pc, #20]	; (80059cc <SystemInit+0x20>)
 80059b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059c0:	bf00      	nop
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	e000ed00 	.word	0xe000ed00

080059d0 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80059d4:	4b0e      	ldr	r3, [pc, #56]	; (8005a10 <MX_TIM10_Init+0x40>)
 80059d6:	4a0f      	ldr	r2, [pc, #60]	; (8005a14 <MX_TIM10_Init+0x44>)
 80059d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80059da:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <MX_TIM10_Init+0x40>)
 80059dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80059e0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059e2:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <MX_TIM10_Init+0x40>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80059e8:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <MX_TIM10_Init+0x40>)
 80059ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80059ee:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059f0:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <MX_TIM10_Init+0x40>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <MX_TIM10_Init+0x40>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80059fc:	4804      	ldr	r0, [pc, #16]	; (8005a10 <MX_TIM10_Init+0x40>)
 80059fe:	f005 f807 	bl	800aa10 <HAL_TIM_Base_Init>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8005a08:	f7fe fab2 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005a0c:	bf00      	nop
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	200005f8 	.word	0x200005f8
 8005a14:	40014400 	.word	0x40014400

08005a18 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005a1c:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <MX_TIM11_Init+0x44>)
 8005a1e:	4a10      	ldr	r2, [pc, #64]	; (8005a60 <MX_TIM11_Init+0x48>)
 8005a20:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8005a22:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <MX_TIM11_Init+0x44>)
 8005a24:	f643 2297 	movw	r2, #14999	; 0x3a97
 8005a28:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a2a:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <MX_TIM11_Init+0x44>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 8005a30:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <MX_TIM11_Init+0x44>)
 8005a32:	f247 522f 	movw	r2, #29999	; 0x752f
 8005a36:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005a38:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <MX_TIM11_Init+0x44>)
 8005a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a40:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <MX_TIM11_Init+0x44>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005a46:	4805      	ldr	r0, [pc, #20]	; (8005a5c <MX_TIM11_Init+0x44>)
 8005a48:	f004 ffe2 	bl	800aa10 <HAL_TIM_Base_Init>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 8005a52:	f7fe fa8d 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8005a56:	bf00      	nop
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000640 	.word	0x20000640
 8005a60:	40014800 	.word	0x40014800

08005a64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1c      	ldr	r2, [pc, #112]	; (8005ae4 <HAL_TIM_Base_MspInit+0x80>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d116      	bne.n	8005aa4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ae8 <HAL_TIM_Base_MspInit+0x84>)
 8005a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7e:	4a1a      	ldr	r2, [pc, #104]	; (8005ae8 <HAL_TIM_Base_MspInit+0x84>)
 8005a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a84:	6453      	str	r3, [r2, #68]	; 0x44
 8005a86:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <HAL_TIM_Base_MspInit+0x84>)
 8005a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005a92:	2200      	movs	r2, #0
 8005a94:	2100      	movs	r1, #0
 8005a96:	2019      	movs	r0, #25
 8005a98:	f000 fc9f 	bl	80063da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005a9c:	2019      	movs	r0, #25
 8005a9e:	f000 fcb8 	bl	8006412 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8005aa2:	e01a      	b.n	8005ada <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a10      	ldr	r2, [pc, #64]	; (8005aec <HAL_TIM_Base_MspInit+0x88>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d115      	bne.n	8005ada <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60bb      	str	r3, [r7, #8]
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <HAL_TIM_Base_MspInit+0x84>)
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab6:	4a0c      	ldr	r2, [pc, #48]	; (8005ae8 <HAL_TIM_Base_MspInit+0x84>)
 8005ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005abc:	6453      	str	r3, [r2, #68]	; 0x44
 8005abe:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <HAL_TIM_Base_MspInit+0x84>)
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ac6:	60bb      	str	r3, [r7, #8]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005aca:	2200      	movs	r2, #0
 8005acc:	2100      	movs	r1, #0
 8005ace:	201a      	movs	r0, #26
 8005ad0:	f000 fc83 	bl	80063da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005ad4:	201a      	movs	r0, #26
 8005ad6:	f000 fc9c 	bl	8006412 <HAL_NVIC_EnableIRQ>
}
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40014400 	.word	0x40014400
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	40014800 	.word	0x40014800

08005af0 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d017      	beq.n	8005b38 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0201 	bic.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	60fb      	str	r3, [r7, #12]
	}
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b54:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d056      	beq.n	8005c16 <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b70:	2220      	movs	r2, #32
 8005b72:	409a      	lsls	r2, r3
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8005b88:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8005b90:	2300      	movs	r3, #0
 8005b92:	82fb      	strh	r3, [r7, #22]
 8005b94:	e01a      	b.n	8005bcc <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f103 0045 	add.w	r0, r3, #69	; 0x45
 8005b9c:	8afb      	ldrh	r3, [r7, #22]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f7ff fc57 	bl	8005458 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8005baa:	8afb      	ldrh	r3, [r7, #22]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	4413      	add	r3, r2
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b0a      	cmp	r3, #10
 8005bb4:	d107      	bne.n	8005bc6 <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8005bc6:	8afb      	ldrh	r3, [r7, #22]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	82fb      	strh	r3, [r7, #22]
 8005bcc:	8afa      	ldrh	r2, [r7, #22]
 8005bce:	89fb      	ldrh	r3, [r7, #14]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d3e0      	bcc.n	8005b96 <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bdc:	223f      	movs	r2, #63	; 0x3f
 8005bde:	409a      	lsls	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	1d1a      	adds	r2, r3, #4
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2241      	movs	r2, #65	; 0x41
 8005bfc:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
	}
}
 8005c16:	bf00      	nop
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	460b      	mov	r3, r1
 8005c28:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	33ca      	adds	r3, #202	; 0xca
 8005c2e:	78fa      	ldrb	r2, [r7, #3]
 8005c30:	4611      	mov	r1, r2
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff fc10 	bl	8005458 <RB_Write>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <UARTDMA_PutCharToTxBuffer+0x24>
	{
		return 1; // Error code
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <UARTDMA_PutCharToTxBuffer+0x26>
	}
	return 0; // Success code
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01f      	beq.n	8005ca4 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8005c64:	e013      	b.n	8005c8e <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b0a      	cmp	r3, #10
 8005c6c:	d10c      	bne.n	8005c88 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				return 0; // Exit if end line
 8005c84:	2300      	movs	r3, #0
 8005c86:	e00e      	b.n	8005ca6 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3345      	adds	r3, #69	; 0x45
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff fbb1 	bl	80053fc <RB_Read>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0e2      	beq.n	8005c66 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e000      	b.n	8005ca6 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 8005ca4:	2301      	movs	r3, #1
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8005cbc:	e012      	b.n	8005ce4 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8005cbe:	7afb      	ldrb	r3, [r7, #11]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff ffab 	bl	8005c1e <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8005cce:	7afb      	ldrb	r3, [r7, #11]
 8005cd0:	2b0a      	cmp	r3, #10
 8005cd2:	d107      	bne.n	8005ce4 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8005cda:	3301      	adds	r3, #1
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	72fb      	strb	r3, [r7, #11]
 8005cea:	7afb      	ldrb	r3, [r7, #11]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e6      	bne.n	8005cbe <UARTDMA_Print+0x10>
		}
	}
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8005d26:	2300      	movs	r3, #0
 8005d28:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d027      	beq.n	8005d8a <UARTDMA_TransmitEvent+0x6c>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8005d3a:	e013      	b.n	8005d64 <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8005d3c:	7b7b      	ldrb	r3, [r7, #13]
 8005d3e:	2b0a      	cmp	r3, #10
 8005d40:	d107      	bne.n	8005d52 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 8005d52:	89fb      	ldrh	r3, [r7, #14]
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	81fa      	strh	r2, [r7, #14]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	7b7a      	ldrb	r2, [r7, #13]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	440b      	add	r3, r1
 8005d60:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	33ca      	adds	r3, #202	; 0xca
 8005d68:	f107 020d 	add.w	r2, r7, #13
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fb44 	bl	80053fc <RB_Read>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0e0      	beq.n	8005d3c <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3389      	adds	r3, #137	; 0x89
 8005d82:	89fa      	ldrh	r2, [r7, #14]
 8005d84:	4619      	mov	r1, r3
 8005d86:	f005 f937 	bl	800aff8 <HAL_UART_Transmit_DMA>
	}
}
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0210 	orr.w	r2, r2, #16
 8005db4:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0210 	orr.w	r2, r2, #16
 8005dcc:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0210 	orr.w	r2, r2, #16
 8005de4:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3304      	adds	r3, #4
 8005dee:	2241      	movs	r2, #65	; 0x41
 8005df0:	4619      	mov	r1, r3
 8005df2:	f005 f97f 	bl	800b0f4 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0208 	bic.w	r2, r2, #8
 8005e0c:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0208 	bic.w	r2, r2, #8
 8005e24:	601a      	str	r2, [r3, #0]
}
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005e34:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <MX_USART2_UART_Init+0x4c>)
 8005e36:	4a12      	ldr	r2, [pc, #72]	; (8005e80 <MX_USART2_UART_Init+0x50>)
 8005e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005e3a:	4b10      	ldr	r3, [pc, #64]	; (8005e7c <MX_USART2_UART_Init+0x4c>)
 8005e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005e42:	4b0e      	ldr	r3, [pc, #56]	; (8005e7c <MX_USART2_UART_Init+0x4c>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <MX_USART2_UART_Init+0x4c>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005e4e:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <MX_USART2_UART_Init+0x4c>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005e54:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <MX_USART2_UART_Init+0x4c>)
 8005e56:	220c      	movs	r2, #12
 8005e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e5a:	4b08      	ldr	r3, [pc, #32]	; (8005e7c <MX_USART2_UART_Init+0x4c>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e60:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <MX_USART2_UART_Init+0x4c>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005e66:	4805      	ldr	r0, [pc, #20]	; (8005e7c <MX_USART2_UART_Init+0x4c>)
 8005e68:	f005 f878 	bl	800af5c <HAL_UART_Init>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005e72:	f7fe f87d 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005e76:	bf00      	nop
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000748 	.word	0x20000748
 8005e80:	40004400 	.word	0x40004400

08005e84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08a      	sub	sp, #40	; 0x28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e8c:	f107 0314 	add.w	r3, r7, #20
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	605a      	str	r2, [r3, #4]
 8005e96:	609a      	str	r2, [r3, #8]
 8005e98:	60da      	str	r2, [r3, #12]
 8005e9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a47      	ldr	r2, [pc, #284]	; (8005fc0 <HAL_UART_MspInit+0x13c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	f040 8088 	bne.w	8005fb8 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	4b45      	ldr	r3, [pc, #276]	; (8005fc4 <HAL_UART_MspInit+0x140>)
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	4a44      	ldr	r2, [pc, #272]	; (8005fc4 <HAL_UART_MspInit+0x140>)
 8005eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8005eb8:	4b42      	ldr	r3, [pc, #264]	; (8005fc4 <HAL_UART_MspInit+0x140>)
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec0:	613b      	str	r3, [r7, #16]
 8005ec2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	4b3e      	ldr	r3, [pc, #248]	; (8005fc4 <HAL_UART_MspInit+0x140>)
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	4a3d      	ldr	r2, [pc, #244]	; (8005fc4 <HAL_UART_MspInit+0x140>)
 8005ece:	f043 0301 	orr.w	r3, r3, #1
 8005ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8005ed4:	4b3b      	ldr	r3, [pc, #236]	; (8005fc4 <HAL_UART_MspInit+0x140>)
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005ee0:	230c      	movs	r3, #12
 8005ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eec:	2303      	movs	r3, #3
 8005eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ef0:	2307      	movs	r3, #7
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ef4:	f107 0314 	add.w	r3, r7, #20
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4833      	ldr	r0, [pc, #204]	; (8005fc8 <HAL_UART_MspInit+0x144>)
 8005efc:	f000 fede 	bl	8006cbc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005f00:	4b32      	ldr	r3, [pc, #200]	; (8005fcc <HAL_UART_MspInit+0x148>)
 8005f02:	4a33      	ldr	r2, [pc, #204]	; (8005fd0 <HAL_UART_MspInit+0x14c>)
 8005f04:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005f06:	4b31      	ldr	r3, [pc, #196]	; (8005fcc <HAL_UART_MspInit+0x148>)
 8005f08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f0c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f0e:	4b2f      	ldr	r3, [pc, #188]	; (8005fcc <HAL_UART_MspInit+0x148>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f14:	4b2d      	ldr	r3, [pc, #180]	; (8005fcc <HAL_UART_MspInit+0x148>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f1a:	4b2c      	ldr	r3, [pc, #176]	; (8005fcc <HAL_UART_MspInit+0x148>)
 8005f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f20:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f22:	4b2a      	ldr	r3, [pc, #168]	; (8005fcc <HAL_UART_MspInit+0x148>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f28:	4b28      	ldr	r3, [pc, #160]	; (8005fcc <HAL_UART_MspInit+0x148>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005f2e:	4b27      	ldr	r3, [pc, #156]	; (8005fcc <HAL_UART_MspInit+0x148>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005f34:	4b25      	ldr	r3, [pc, #148]	; (8005fcc <HAL_UART_MspInit+0x148>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f3a:	4b24      	ldr	r3, [pc, #144]	; (8005fcc <HAL_UART_MspInit+0x148>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005f40:	4822      	ldr	r0, [pc, #136]	; (8005fcc <HAL_UART_MspInit+0x148>)
 8005f42:	f000 faab 	bl	800649c <HAL_DMA_Init>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005f4c:	f7fe f810 	bl	8003f70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a1e      	ldr	r2, [pc, #120]	; (8005fcc <HAL_UART_MspInit+0x148>)
 8005f54:	639a      	str	r2, [r3, #56]	; 0x38
 8005f56:	4a1d      	ldr	r2, [pc, #116]	; (8005fcc <HAL_UART_MspInit+0x148>)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005f5c:	4b1d      	ldr	r3, [pc, #116]	; (8005fd4 <HAL_UART_MspInit+0x150>)
 8005f5e:	4a1e      	ldr	r2, [pc, #120]	; (8005fd8 <HAL_UART_MspInit+0x154>)
 8005f60:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005f62:	4b1c      	ldr	r3, [pc, #112]	; (8005fd4 <HAL_UART_MspInit+0x150>)
 8005f64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f68:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f6a:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <HAL_UART_MspInit+0x150>)
 8005f6c:	2240      	movs	r2, #64	; 0x40
 8005f6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f70:	4b18      	ldr	r3, [pc, #96]	; (8005fd4 <HAL_UART_MspInit+0x150>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005f76:	4b17      	ldr	r3, [pc, #92]	; (8005fd4 <HAL_UART_MspInit+0x150>)
 8005f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f7e:	4b15      	ldr	r3, [pc, #84]	; (8005fd4 <HAL_UART_MspInit+0x150>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f84:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <HAL_UART_MspInit+0x150>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005f8a:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <HAL_UART_MspInit+0x150>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005f90:	4b10      	ldr	r3, [pc, #64]	; (8005fd4 <HAL_UART_MspInit+0x150>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f96:	4b0f      	ldr	r3, [pc, #60]	; (8005fd4 <HAL_UART_MspInit+0x150>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005f9c:	480d      	ldr	r0, [pc, #52]	; (8005fd4 <HAL_UART_MspInit+0x150>)
 8005f9e:	f000 fa7d 	bl	800649c <HAL_DMA_Init>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8005fa8:	f7fd ffe2 	bl	8003f70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a09      	ldr	r2, [pc, #36]	; (8005fd4 <HAL_UART_MspInit+0x150>)
 8005fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8005fb2:	4a08      	ldr	r2, [pc, #32]	; (8005fd4 <HAL_UART_MspInit+0x150>)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005fb8:	bf00      	nop
 8005fba:	3728      	adds	r7, #40	; 0x28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40004400 	.word	0x40004400
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	40020000 	.word	0x40020000
 8005fcc:	20000688 	.word	0x20000688
 8005fd0:	40026088 	.word	0x40026088
 8005fd4:	200006e8 	.word	0x200006e8
 8005fd8:	400260a0 	.word	0x400260a0

08005fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006014 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005fe0:	480d      	ldr	r0, [pc, #52]	; (8006018 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005fe2:	490e      	ldr	r1, [pc, #56]	; (800601c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005fe4:	4a0e      	ldr	r2, [pc, #56]	; (8006020 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005fe8:	e002      	b.n	8005ff0 <LoopCopyDataInit>

08005fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005fee:	3304      	adds	r3, #4

08005ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ff4:	d3f9      	bcc.n	8005fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ff6:	4a0b      	ldr	r2, [pc, #44]	; (8006024 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005ff8:	4c0b      	ldr	r4, [pc, #44]	; (8006028 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ffc:	e001      	b.n	8006002 <LoopFillZerobss>

08005ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006000:	3204      	adds	r2, #4

08006002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006004:	d3fb      	bcc.n	8005ffe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006006:	f7ff fcd1 	bl	80059ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800600a:	f006 f8f5 	bl	800c1f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800600e:	f7fd fe85 	bl	8003d1c <main>
  bx  lr    
 8006012:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006014:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800601c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8006020:	08024700 	.word	0x08024700
  ldr r2, =_sbss
 8006024:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8006028:	200007a0 	.word	0x200007a0

0800602c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800602c:	e7fe      	b.n	800602c <ADC_IRQHandler>
	...

08006030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006034:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <HAL_Init+0x40>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a0d      	ldr	r2, [pc, #52]	; (8006070 <HAL_Init+0x40>)
 800603a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800603e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006040:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <HAL_Init+0x40>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a0a      	ldr	r2, [pc, #40]	; (8006070 <HAL_Init+0x40>)
 8006046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800604a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800604c:	4b08      	ldr	r3, [pc, #32]	; (8006070 <HAL_Init+0x40>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a07      	ldr	r2, [pc, #28]	; (8006070 <HAL_Init+0x40>)
 8006052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006058:	2003      	movs	r0, #3
 800605a:	f000 f9b3 	bl	80063c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800605e:	2000      	movs	r0, #0
 8006060:	f000 f808 	bl	8006074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006064:	f7ff fb12 	bl	800568c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40023c00 	.word	0x40023c00

08006074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800607c:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <HAL_InitTick+0x54>)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	4b12      	ldr	r3, [pc, #72]	; (80060cc <HAL_InitTick+0x58>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	4619      	mov	r1, r3
 8006086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800608a:	fbb3 f3f1 	udiv	r3, r3, r1
 800608e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006092:	4618      	mov	r0, r3
 8006094:	f000 f9d9 	bl	800644a <HAL_SYSTICK_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e00e      	b.n	80060c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b0f      	cmp	r3, #15
 80060a6:	d80a      	bhi.n	80060be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060a8:	2200      	movs	r2, #0
 80060aa:	6879      	ldr	r1, [r7, #4]
 80060ac:	f04f 30ff 	mov.w	r0, #4294967295
 80060b0:	f000 f993 	bl	80063da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80060b4:	4a06      	ldr	r2, [pc, #24]	; (80060d0 <HAL_InitTick+0x5c>)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e000      	b.n	80060c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	20000034 	.word	0x20000034
 80060cc:	2000003c 	.word	0x2000003c
 80060d0:	20000038 	.word	0x20000038

080060d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80060d8:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <HAL_IncTick+0x20>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <HAL_IncTick+0x24>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4413      	add	r3, r2
 80060e4:	4a04      	ldr	r2, [pc, #16]	; (80060f8 <HAL_IncTick+0x24>)
 80060e6:	6013      	str	r3, [r2, #0]
}
 80060e8:	bf00      	nop
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	2000003c 	.word	0x2000003c
 80060f8:	2000078c 	.word	0x2000078c

080060fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
  return uwTick;
 8006100:	4b03      	ldr	r3, [pc, #12]	; (8006110 <HAL_GetTick+0x14>)
 8006102:	681b      	ldr	r3, [r3, #0]
}
 8006104:	4618      	mov	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	2000078c 	.word	0x2000078c

08006114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800611c:	f7ff ffee 	bl	80060fc <HAL_GetTick>
 8006120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d005      	beq.n	800613a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800612e:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <HAL_Delay+0x44>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800613a:	bf00      	nop
 800613c:	f7ff ffde 	bl	80060fc <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	429a      	cmp	r2, r3
 800614a:	d8f7      	bhi.n	800613c <HAL_Delay+0x28>
  {
  }
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	2000003c 	.word	0x2000003c

0800615c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800616c:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <__NVIC_SetPriorityGrouping+0x44>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006178:	4013      	ands	r3, r2
 800617a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800618c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800618e:	4a04      	ldr	r2, [pc, #16]	; (80061a0 <__NVIC_SetPriorityGrouping+0x44>)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	60d3      	str	r3, [r2, #12]
}
 8006194:	bf00      	nop
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	e000ed00 	.word	0xe000ed00

080061a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061a8:	4b04      	ldr	r3, [pc, #16]	; (80061bc <__NVIC_GetPriorityGrouping+0x18>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	0a1b      	lsrs	r3, r3, #8
 80061ae:	f003 0307 	and.w	r3, r3, #7
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	e000ed00 	.word	0xe000ed00

080061c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	4603      	mov	r3, r0
 80061c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	db0b      	blt.n	80061ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	f003 021f 	and.w	r2, r3, #31
 80061d8:	4907      	ldr	r1, [pc, #28]	; (80061f8 <__NVIC_EnableIRQ+0x38>)
 80061da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	2001      	movs	r0, #1
 80061e2:	fa00 f202 	lsl.w	r2, r0, r2
 80061e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	e000e100 	.word	0xe000e100

080061fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	4603      	mov	r3, r0
 8006204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800620a:	2b00      	cmp	r3, #0
 800620c:	db12      	blt.n	8006234 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	f003 021f 	and.w	r2, r3, #31
 8006214:	490a      	ldr	r1, [pc, #40]	; (8006240 <__NVIC_DisableIRQ+0x44>)
 8006216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	2001      	movs	r0, #1
 800621e:	fa00 f202 	lsl.w	r2, r0, r2
 8006222:	3320      	adds	r3, #32
 8006224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006228:	f3bf 8f4f 	dsb	sy
}
 800622c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800622e:	f3bf 8f6f 	isb	sy
}
 8006232:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	e000e100 	.word	0xe000e100

08006244 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	4603      	mov	r3, r0
 800624c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800624e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006252:	2b00      	cmp	r3, #0
 8006254:	db0e      	blt.n	8006274 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006256:	4a0b      	ldr	r2, [pc, #44]	; (8006284 <__NVIC_GetPendingIRQ+0x40>)
 8006258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800625c:	095b      	lsrs	r3, r3, #5
 800625e:	3340      	adds	r3, #64	; 0x40
 8006260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	f003 031f 	and.w	r3, r3, #31
 800626a:	fa22 f303 	lsr.w	r3, r2, r3
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	e000      	b.n	8006276 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8006274:	2300      	movs	r3, #0
  }
}
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	e000e100 	.word	0xe000e100

08006288 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006296:	2b00      	cmp	r3, #0
 8006298:	db0c      	blt.n	80062b4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	f003 021f 	and.w	r2, r3, #31
 80062a0:	4907      	ldr	r1, [pc, #28]	; (80062c0 <__NVIC_ClearPendingIRQ+0x38>)
 80062a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	2001      	movs	r0, #1
 80062aa:	fa00 f202 	lsl.w	r2, r0, r2
 80062ae:	3360      	adds	r3, #96	; 0x60
 80062b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	e000e100 	.word	0xe000e100

080062c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	db0a      	blt.n	80062ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	490c      	ldr	r1, [pc, #48]	; (8006310 <__NVIC_SetPriority+0x4c>)
 80062de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e2:	0112      	lsls	r2, r2, #4
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	440b      	add	r3, r1
 80062e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062ec:	e00a      	b.n	8006304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	4908      	ldr	r1, [pc, #32]	; (8006314 <__NVIC_SetPriority+0x50>)
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	3b04      	subs	r3, #4
 80062fc:	0112      	lsls	r2, r2, #4
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	440b      	add	r3, r1
 8006302:	761a      	strb	r2, [r3, #24]
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	e000e100 	.word	0xe000e100
 8006314:	e000ed00 	.word	0xe000ed00

08006318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006318:	b480      	push	{r7}
 800631a:	b089      	sub	sp, #36	; 0x24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f1c3 0307 	rsb	r3, r3, #7
 8006332:	2b04      	cmp	r3, #4
 8006334:	bf28      	it	cs
 8006336:	2304      	movcs	r3, #4
 8006338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	3304      	adds	r3, #4
 800633e:	2b06      	cmp	r3, #6
 8006340:	d902      	bls.n	8006348 <NVIC_EncodePriority+0x30>
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	3b03      	subs	r3, #3
 8006346:	e000      	b.n	800634a <NVIC_EncodePriority+0x32>
 8006348:	2300      	movs	r3, #0
 800634a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800634c:	f04f 32ff 	mov.w	r2, #4294967295
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	fa02 f303 	lsl.w	r3, r2, r3
 8006356:	43da      	mvns	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	401a      	ands	r2, r3
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006360:	f04f 31ff 	mov.w	r1, #4294967295
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	fa01 f303 	lsl.w	r3, r1, r3
 800636a:	43d9      	mvns	r1, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006370:	4313      	orrs	r3, r2
         );
}
 8006372:	4618      	mov	r0, r3
 8006374:	3724      	adds	r7, #36	; 0x24
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
	...

08006380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3b01      	subs	r3, #1
 800638c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006390:	d301      	bcc.n	8006396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006392:	2301      	movs	r3, #1
 8006394:	e00f      	b.n	80063b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006396:	4a0a      	ldr	r2, [pc, #40]	; (80063c0 <SysTick_Config+0x40>)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3b01      	subs	r3, #1
 800639c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800639e:	210f      	movs	r1, #15
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
 80063a4:	f7ff ff8e 	bl	80062c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063a8:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <SysTick_Config+0x40>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063ae:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <SysTick_Config+0x40>)
 80063b0:	2207      	movs	r2, #7
 80063b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	e000e010 	.word	0xe000e010

080063c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7ff fec5 	bl	800615c <__NVIC_SetPriorityGrouping>
}
 80063d2:	bf00      	nop
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80063da:	b580      	push	{r7, lr}
 80063dc:	b086      	sub	sp, #24
 80063de:	af00      	add	r7, sp, #0
 80063e0:	4603      	mov	r3, r0
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
 80063e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80063ec:	f7ff feda 	bl	80061a4 <__NVIC_GetPriorityGrouping>
 80063f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	6978      	ldr	r0, [r7, #20]
 80063f8:	f7ff ff8e 	bl	8006318 <NVIC_EncodePriority>
 80063fc:	4602      	mov	r2, r0
 80063fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006402:	4611      	mov	r1, r2
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff ff5d 	bl	80062c4 <__NVIC_SetPriority>
}
 800640a:	bf00      	nop
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b082      	sub	sp, #8
 8006416:	af00      	add	r7, sp, #0
 8006418:	4603      	mov	r3, r0
 800641a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800641c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff fecd 	bl	80061c0 <__NVIC_EnableIRQ>
}
 8006426:	bf00      	nop
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	4603      	mov	r3, r0
 8006436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff fedd 	bl	80061fc <__NVIC_DisableIRQ>
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7ff ff94 	bl	8006380 <SysTick_Config>
 8006458:	4603      	mov	r3, r0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	4603      	mov	r3, r0
 800646a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800646c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff fee7 	bl	8006244 <__NVIC_GetPendingIRQ>
 8006476:	4603      	mov	r3, r0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	4603      	mov	r3, r0
 8006488:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800648a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff fefa 	bl	8006288 <__NVIC_ClearPendingIRQ>
}
 8006494:	bf00      	nop
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80064a8:	f7ff fe28 	bl	80060fc <HAL_GetTick>
 80064ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e099      	b.n	80065ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0201 	bic.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064d8:	e00f      	b.n	80064fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064da:	f7ff fe0f 	bl	80060fc <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b05      	cmp	r3, #5
 80064e6:	d908      	bls.n	80064fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2203      	movs	r2, #3
 80064f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e078      	b.n	80065ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e8      	bne.n	80064da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4b38      	ldr	r3, [pc, #224]	; (80065f4 <HAL_DMA_Init+0x158>)
 8006514:	4013      	ands	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006526:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800653e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	2b04      	cmp	r3, #4
 8006552:	d107      	bne.n	8006564 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	4313      	orrs	r3, r2
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 0307 	bic.w	r3, r3, #7
 800657a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	2b04      	cmp	r3, #4
 800658c:	d117      	bne.n	80065be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	4313      	orrs	r3, r2
 8006596:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00e      	beq.n	80065be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fb0f 	bl	8006bc4 <DMA_CheckFifoParam>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d008      	beq.n	80065be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2240      	movs	r2, #64	; 0x40
 80065b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80065ba:	2301      	movs	r3, #1
 80065bc:	e016      	b.n	80065ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fac6 	bl	8006b58 <DMA_CalcBaseAndBitshift>
 80065cc:	4603      	mov	r3, r0
 80065ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d4:	223f      	movs	r2, #63	; 0x3f
 80065d6:	409a      	lsls	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	f010803f 	.word	0xf010803f

080065f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800660e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_DMA_Start_IT+0x26>
 800661a:	2302      	movs	r3, #2
 800661c:	e040      	b.n	80066a0 <HAL_DMA_Start_IT+0xa8>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b01      	cmp	r3, #1
 8006630:	d12f      	bne.n	8006692 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2202      	movs	r2, #2
 8006636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fa58 	bl	8006afc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006650:	223f      	movs	r2, #63	; 0x3f
 8006652:	409a      	lsls	r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0216 	orr.w	r2, r2, #22
 8006666:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d007      	beq.n	8006680 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0208 	orr.w	r2, r2, #8
 800667e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	e005      	b.n	800669e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800669a:	2302      	movs	r3, #2
 800669c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800669e:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80066b6:	f7ff fd21 	bl	80060fc <HAL_GetTick>
 80066ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d008      	beq.n	80066da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2280      	movs	r2, #128	; 0x80
 80066cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e052      	b.n	8006780 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0216 	bic.w	r2, r2, #22
 80066e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695a      	ldr	r2, [r3, #20]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d103      	bne.n	800670a <HAL_DMA_Abort+0x62>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006706:	2b00      	cmp	r3, #0
 8006708:	d007      	beq.n	800671a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0208 	bic.w	r2, r2, #8
 8006718:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0201 	bic.w	r2, r2, #1
 8006728:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800672a:	e013      	b.n	8006754 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800672c:	f7ff fce6 	bl	80060fc <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b05      	cmp	r3, #5
 8006738:	d90c      	bls.n	8006754 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2203      	movs	r2, #3
 8006744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e015      	b.n	8006780 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e4      	bne.n	800672c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006766:	223f      	movs	r2, #63	; 0x3f
 8006768:	409a      	lsls	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d004      	beq.n	80067a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2280      	movs	r2, #128	; 0x80
 80067a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e00c      	b.n	80067c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2205      	movs	r2, #5
 80067aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0201 	bic.w	r2, r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067d8:	4b92      	ldr	r3, [pc, #584]	; (8006a24 <HAL_DMA_IRQHandler+0x258>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a92      	ldr	r2, [pc, #584]	; (8006a28 <HAL_DMA_IRQHandler+0x25c>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	0a9b      	lsrs	r3, r3, #10
 80067e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f6:	2208      	movs	r2, #8
 80067f8:	409a      	lsls	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4013      	ands	r3, r2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01a      	beq.n	8006838 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d013      	beq.n	8006838 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0204 	bic.w	r2, r2, #4
 800681e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006824:	2208      	movs	r2, #8
 8006826:	409a      	lsls	r2, r3
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006830:	f043 0201 	orr.w	r2, r3, #1
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683c:	2201      	movs	r2, #1
 800683e:	409a      	lsls	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4013      	ands	r3, r2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d012      	beq.n	800686e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00b      	beq.n	800686e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685a:	2201      	movs	r2, #1
 800685c:	409a      	lsls	r2, r3
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	f043 0202 	orr.w	r2, r3, #2
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006872:	2204      	movs	r2, #4
 8006874:	409a      	lsls	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4013      	ands	r3, r2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d012      	beq.n	80068a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00b      	beq.n	80068a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006890:	2204      	movs	r2, #4
 8006892:	409a      	lsls	r2, r3
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689c:	f043 0204 	orr.w	r2, r3, #4
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a8:	2210      	movs	r2, #16
 80068aa:	409a      	lsls	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4013      	ands	r3, r2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d043      	beq.n	800693c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d03c      	beq.n	800693c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c6:	2210      	movs	r2, #16
 80068c8:	409a      	lsls	r2, r3
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d018      	beq.n	800690e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d108      	bne.n	80068fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d024      	beq.n	800693c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	4798      	blx	r3
 80068fa:	e01f      	b.n	800693c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01b      	beq.n	800693c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
 800690c:	e016      	b.n	800693c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006918:	2b00      	cmp	r3, #0
 800691a:	d107      	bne.n	800692c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 0208 	bic.w	r2, r2, #8
 800692a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006940:	2220      	movs	r2, #32
 8006942:	409a      	lsls	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4013      	ands	r3, r2
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 808e 	beq.w	8006a6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 8086 	beq.w	8006a6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006962:	2220      	movs	r2, #32
 8006964:	409a      	lsls	r2, r3
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b05      	cmp	r3, #5
 8006974:	d136      	bne.n	80069e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0216 	bic.w	r2, r2, #22
 8006984:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695a      	ldr	r2, [r3, #20]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006994:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d103      	bne.n	80069a6 <HAL_DMA_IRQHandler+0x1da>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d007      	beq.n	80069b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0208 	bic.w	r2, r2, #8
 80069b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ba:	223f      	movs	r2, #63	; 0x3f
 80069bc:	409a      	lsls	r2, r3
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d07d      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	4798      	blx	r3
        }
        return;
 80069e2:	e078      	b.n	8006ad6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d01c      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d108      	bne.n	8006a12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d030      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	4798      	blx	r3
 8006a10:	e02b      	b.n	8006a6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d027      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	4798      	blx	r3
 8006a22:	e022      	b.n	8006a6a <HAL_DMA_IRQHandler+0x29e>
 8006a24:	20000034 	.word	0x20000034
 8006a28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10f      	bne.n	8006a5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0210 	bic.w	r2, r2, #16
 8006a48:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d032      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d022      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2205      	movs	r2, #5
 8006a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0201 	bic.w	r2, r2, #1
 8006a94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	60bb      	str	r3, [r7, #8]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d307      	bcc.n	8006ab2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1f2      	bne.n	8006a96 <HAL_DMA_IRQHandler+0x2ca>
 8006ab0:	e000      	b.n	8006ab4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006ab2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	4798      	blx	r3
 8006ad4:	e000      	b.n	8006ad8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006ad6:	bf00      	nop
    }
  }
}
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop

08006ae0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006aee:	b2db      	uxtb	r3, r3
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	d108      	bne.n	8006b3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006b3a:	e007      	b.n	8006b4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	60da      	str	r2, [r3, #12]
}
 8006b4c:	bf00      	nop
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	3b10      	subs	r3, #16
 8006b68:	4a14      	ldr	r2, [pc, #80]	; (8006bbc <DMA_CalcBaseAndBitshift+0x64>)
 8006b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6e:	091b      	lsrs	r3, r3, #4
 8006b70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006b72:	4a13      	ldr	r2, [pc, #76]	; (8006bc0 <DMA_CalcBaseAndBitshift+0x68>)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d909      	bls.n	8006b9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b8e:	f023 0303 	bic.w	r3, r3, #3
 8006b92:	1d1a      	adds	r2, r3, #4
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	659a      	str	r2, [r3, #88]	; 0x58
 8006b98:	e007      	b.n	8006baa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	aaaaaaab 	.word	0xaaaaaaab
 8006bc0:	080241d4 	.word	0x080241d4

08006bc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d11f      	bne.n	8006c1e <DMA_CheckFifoParam+0x5a>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d856      	bhi.n	8006c92 <DMA_CheckFifoParam+0xce>
 8006be4:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <DMA_CheckFifoParam+0x28>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006bfd 	.word	0x08006bfd
 8006bf0:	08006c0f 	.word	0x08006c0f
 8006bf4:	08006bfd 	.word	0x08006bfd
 8006bf8:	08006c93 	.word	0x08006c93
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d046      	beq.n	8006c96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c0c:	e043      	b.n	8006c96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c16:	d140      	bne.n	8006c9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c1c:	e03d      	b.n	8006c9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c26:	d121      	bne.n	8006c6c <DMA_CheckFifoParam+0xa8>
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d837      	bhi.n	8006c9e <DMA_CheckFifoParam+0xda>
 8006c2e:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <DMA_CheckFifoParam+0x70>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c45 	.word	0x08006c45
 8006c38:	08006c4b 	.word	0x08006c4b
 8006c3c:	08006c45 	.word	0x08006c45
 8006c40:	08006c5d 	.word	0x08006c5d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	73fb      	strb	r3, [r7, #15]
      break;
 8006c48:	e030      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d025      	beq.n	8006ca2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c5a:	e022      	b.n	8006ca2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c64:	d11f      	bne.n	8006ca6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006c6a:	e01c      	b.n	8006ca6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d903      	bls.n	8006c7a <DMA_CheckFifoParam+0xb6>
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d003      	beq.n	8006c80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006c78:	e018      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c7e:	e015      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00e      	beq.n	8006caa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c90:	e00b      	b.n	8006caa <DMA_CheckFifoParam+0xe6>
      break;
 8006c92:	bf00      	nop
 8006c94:	e00a      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      break;
 8006c96:	bf00      	nop
 8006c98:	e008      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      break;
 8006c9a:	bf00      	nop
 8006c9c:	e006      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      break;
 8006c9e:	bf00      	nop
 8006ca0:	e004      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      break;
 8006ca2:	bf00      	nop
 8006ca4:	e002      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      break;   
 8006ca6:	bf00      	nop
 8006ca8:	e000      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
      break;
 8006caa:	bf00      	nop
    }
  } 
  
  return status; 
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop

08006cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b089      	sub	sp, #36	; 0x24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	e159      	b.n	8006f8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006cd8:	2201      	movs	r2, #1
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	f040 8148 	bne.w	8006f86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d005      	beq.n	8006d0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d130      	bne.n	8006d70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	2203      	movs	r2, #3
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	43db      	mvns	r3, r3
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	4013      	ands	r3, r2
 8006d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d44:	2201      	movs	r2, #1
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	4013      	ands	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	091b      	lsrs	r3, r3, #4
 8006d5a:	f003 0201 	and.w	r2, r3, #1
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f003 0303 	and.w	r3, r3, #3
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d017      	beq.n	8006dac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	2203      	movs	r2, #3
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	4013      	ands	r3, r2
 8006d92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f003 0303 	and.w	r3, r3, #3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d123      	bne.n	8006e00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	08da      	lsrs	r2, r3, #3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3208      	adds	r2, #8
 8006dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	220f      	movs	r2, #15
 8006dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	08da      	lsrs	r2, r3, #3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3208      	adds	r2, #8
 8006dfa:	69b9      	ldr	r1, [r7, #24]
 8006dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e10:	43db      	mvns	r3, r3
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	4013      	ands	r3, r2
 8006e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f003 0203 	and.w	r2, r3, #3
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	fa02 f303 	lsl.w	r3, r2, r3
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 80a2 	beq.w	8006f86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	4b57      	ldr	r3, [pc, #348]	; (8006fa4 <HAL_GPIO_Init+0x2e8>)
 8006e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4a:	4a56      	ldr	r2, [pc, #344]	; (8006fa4 <HAL_GPIO_Init+0x2e8>)
 8006e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e50:	6453      	str	r3, [r2, #68]	; 0x44
 8006e52:	4b54      	ldr	r3, [pc, #336]	; (8006fa4 <HAL_GPIO_Init+0x2e8>)
 8006e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e5e:	4a52      	ldr	r2, [pc, #328]	; (8006fa8 <HAL_GPIO_Init+0x2ec>)
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	089b      	lsrs	r3, r3, #2
 8006e64:	3302      	adds	r3, #2
 8006e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	220f      	movs	r2, #15
 8006e76:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7a:	43db      	mvns	r3, r3
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a49      	ldr	r2, [pc, #292]	; (8006fac <HAL_GPIO_Init+0x2f0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d019      	beq.n	8006ebe <HAL_GPIO_Init+0x202>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a48      	ldr	r2, [pc, #288]	; (8006fb0 <HAL_GPIO_Init+0x2f4>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <HAL_GPIO_Init+0x1fe>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a47      	ldr	r2, [pc, #284]	; (8006fb4 <HAL_GPIO_Init+0x2f8>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d00d      	beq.n	8006eb6 <HAL_GPIO_Init+0x1fa>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a46      	ldr	r2, [pc, #280]	; (8006fb8 <HAL_GPIO_Init+0x2fc>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d007      	beq.n	8006eb2 <HAL_GPIO_Init+0x1f6>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a45      	ldr	r2, [pc, #276]	; (8006fbc <HAL_GPIO_Init+0x300>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d101      	bne.n	8006eae <HAL_GPIO_Init+0x1f2>
 8006eaa:	2304      	movs	r3, #4
 8006eac:	e008      	b.n	8006ec0 <HAL_GPIO_Init+0x204>
 8006eae:	2307      	movs	r3, #7
 8006eb0:	e006      	b.n	8006ec0 <HAL_GPIO_Init+0x204>
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e004      	b.n	8006ec0 <HAL_GPIO_Init+0x204>
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	e002      	b.n	8006ec0 <HAL_GPIO_Init+0x204>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <HAL_GPIO_Init+0x204>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	f002 0203 	and.w	r2, r2, #3
 8006ec6:	0092      	lsls	r2, r2, #2
 8006ec8:	4093      	lsls	r3, r2
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ed0:	4935      	ldr	r1, [pc, #212]	; (8006fa8 <HAL_GPIO_Init+0x2ec>)
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	089b      	lsrs	r3, r3, #2
 8006ed6:	3302      	adds	r3, #2
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ede:	4b38      	ldr	r3, [pc, #224]	; (8006fc0 <HAL_GPIO_Init+0x304>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	43db      	mvns	r3, r3
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	4013      	ands	r3, r2
 8006eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f02:	4a2f      	ldr	r2, [pc, #188]	; (8006fc0 <HAL_GPIO_Init+0x304>)
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006f08:	4b2d      	ldr	r3, [pc, #180]	; (8006fc0 <HAL_GPIO_Init+0x304>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	43db      	mvns	r3, r3
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	4013      	ands	r3, r2
 8006f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f2c:	4a24      	ldr	r2, [pc, #144]	; (8006fc0 <HAL_GPIO_Init+0x304>)
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f32:	4b23      	ldr	r3, [pc, #140]	; (8006fc0 <HAL_GPIO_Init+0x304>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	43db      	mvns	r3, r3
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f56:	4a1a      	ldr	r2, [pc, #104]	; (8006fc0 <HAL_GPIO_Init+0x304>)
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f5c:	4b18      	ldr	r3, [pc, #96]	; (8006fc0 <HAL_GPIO_Init+0x304>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	43db      	mvns	r3, r3
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	4013      	ands	r3, r2
 8006f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f80:	4a0f      	ldr	r2, [pc, #60]	; (8006fc0 <HAL_GPIO_Init+0x304>)
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	61fb      	str	r3, [r7, #28]
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	2b0f      	cmp	r3, #15
 8006f90:	f67f aea2 	bls.w	8006cd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	3724      	adds	r7, #36	; 0x24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	40013800 	.word	0x40013800
 8006fac:	40020000 	.word	0x40020000
 8006fb0:	40020400 	.word	0x40020400
 8006fb4:	40020800 	.word	0x40020800
 8006fb8:	40020c00 	.word	0x40020c00
 8006fbc:	40021000 	.word	0x40021000
 8006fc0:	40013c00 	.word	0x40013c00

08006fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691a      	ldr	r2, [r3, #16]
 8006fd4:	887b      	ldrh	r3, [r7, #2]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	73fb      	strb	r3, [r7, #15]
 8006fe0:	e001      	b.n	8006fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	807b      	strh	r3, [r7, #2]
 8007000:	4613      	mov	r3, r2
 8007002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007004:	787b      	ldrb	r3, [r7, #1]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800700a:	887a      	ldrh	r2, [r7, #2]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007010:	e003      	b.n	800701a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007012:	887b      	ldrh	r3, [r7, #2]
 8007014:	041a      	lsls	r2, r3, #16
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	619a      	str	r2, [r3, #24]
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007026:	b480      	push	{r7}
 8007028:	b085      	sub	sp, #20
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	460b      	mov	r3, r1
 8007030:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007038:	887a      	ldrh	r2, [r7, #2]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4013      	ands	r3, r2
 800703e:	041a      	lsls	r2, r3, #16
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	43d9      	mvns	r1, r3
 8007044:	887b      	ldrh	r3, [r7, #2]
 8007046:	400b      	ands	r3, r1
 8007048:	431a      	orrs	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	619a      	str	r2, [r3, #24]
}
 800704e:	bf00      	nop
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
	...

0800705c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007066:	4b08      	ldr	r3, [pc, #32]	; (8007088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007068:	695a      	ldr	r2, [r3, #20]
 800706a:	88fb      	ldrh	r3, [r7, #6]
 800706c:	4013      	ands	r3, r2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d006      	beq.n	8007080 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007072:	4a05      	ldr	r2, [pc, #20]	; (8007088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007074:	88fb      	ldrh	r3, [r7, #6]
 8007076:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007078:	88fb      	ldrh	r3, [r7, #6]
 800707a:	4618      	mov	r0, r3
 800707c:	f7fc ff64 	bl	8003f48 <HAL_GPIO_EXTI_Callback>
  }
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40013c00 	.word	0x40013c00

0800708c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e12b      	b.n	80072f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d106      	bne.n	80070b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7fc fd7e 	bl	8003bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2224      	movs	r2, #36	; 0x24
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0201 	bic.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80070f0:	f003 f852 	bl	800a198 <HAL_RCC_GetPCLK1Freq>
 80070f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	4a81      	ldr	r2, [pc, #516]	; (8007300 <HAL_I2C_Init+0x274>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d807      	bhi.n	8007110 <HAL_I2C_Init+0x84>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4a80      	ldr	r2, [pc, #512]	; (8007304 <HAL_I2C_Init+0x278>)
 8007104:	4293      	cmp	r3, r2
 8007106:	bf94      	ite	ls
 8007108:	2301      	movls	r3, #1
 800710a:	2300      	movhi	r3, #0
 800710c:	b2db      	uxtb	r3, r3
 800710e:	e006      	b.n	800711e <HAL_I2C_Init+0x92>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4a7d      	ldr	r2, [pc, #500]	; (8007308 <HAL_I2C_Init+0x27c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	bf94      	ite	ls
 8007118:	2301      	movls	r3, #1
 800711a:	2300      	movhi	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e0e7      	b.n	80072f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4a78      	ldr	r2, [pc, #480]	; (800730c <HAL_I2C_Init+0x280>)
 800712a:	fba2 2303 	umull	r2, r3, r2, r3
 800712e:	0c9b      	lsrs	r3, r3, #18
 8007130:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	430a      	orrs	r2, r1
 8007144:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	4a6a      	ldr	r2, [pc, #424]	; (8007300 <HAL_I2C_Init+0x274>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d802      	bhi.n	8007160 <HAL_I2C_Init+0xd4>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	3301      	adds	r3, #1
 800715e:	e009      	b.n	8007174 <HAL_I2C_Init+0xe8>
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007166:	fb02 f303 	mul.w	r3, r2, r3
 800716a:	4a69      	ldr	r2, [pc, #420]	; (8007310 <HAL_I2C_Init+0x284>)
 800716c:	fba2 2303 	umull	r2, r3, r2, r3
 8007170:	099b      	lsrs	r3, r3, #6
 8007172:	3301      	adds	r3, #1
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	6812      	ldr	r2, [r2, #0]
 8007178:	430b      	orrs	r3, r1
 800717a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007186:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	495c      	ldr	r1, [pc, #368]	; (8007300 <HAL_I2C_Init+0x274>)
 8007190:	428b      	cmp	r3, r1
 8007192:	d819      	bhi.n	80071c8 <HAL_I2C_Init+0x13c>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	1e59      	subs	r1, r3, #1
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	fbb1 f3f3 	udiv	r3, r1, r3
 80071a2:	1c59      	adds	r1, r3, #1
 80071a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80071a8:	400b      	ands	r3, r1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <HAL_I2C_Init+0x138>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	1e59      	subs	r1, r3, #1
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80071bc:	3301      	adds	r3, #1
 80071be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071c2:	e051      	b.n	8007268 <HAL_I2C_Init+0x1dc>
 80071c4:	2304      	movs	r3, #4
 80071c6:	e04f      	b.n	8007268 <HAL_I2C_Init+0x1dc>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d111      	bne.n	80071f4 <HAL_I2C_Init+0x168>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	1e58      	subs	r0, r3, #1
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6859      	ldr	r1, [r3, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	440b      	add	r3, r1
 80071de:	fbb0 f3f3 	udiv	r3, r0, r3
 80071e2:	3301      	adds	r3, #1
 80071e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	bf0c      	ite	eq
 80071ec:	2301      	moveq	r3, #1
 80071ee:	2300      	movne	r3, #0
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	e012      	b.n	800721a <HAL_I2C_Init+0x18e>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	1e58      	subs	r0, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6859      	ldr	r1, [r3, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	440b      	add	r3, r1
 8007202:	0099      	lsls	r1, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	fbb0 f3f3 	udiv	r3, r0, r3
 800720a:	3301      	adds	r3, #1
 800720c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007210:	2b00      	cmp	r3, #0
 8007212:	bf0c      	ite	eq
 8007214:	2301      	moveq	r3, #1
 8007216:	2300      	movne	r3, #0
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <HAL_I2C_Init+0x196>
 800721e:	2301      	movs	r3, #1
 8007220:	e022      	b.n	8007268 <HAL_I2C_Init+0x1dc>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10e      	bne.n	8007248 <HAL_I2C_Init+0x1bc>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	1e58      	subs	r0, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6859      	ldr	r1, [r3, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	440b      	add	r3, r1
 8007238:	fbb0 f3f3 	udiv	r3, r0, r3
 800723c:	3301      	adds	r3, #1
 800723e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007246:	e00f      	b.n	8007268 <HAL_I2C_Init+0x1dc>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	1e58      	subs	r0, r3, #1
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6859      	ldr	r1, [r3, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	440b      	add	r3, r1
 8007256:	0099      	lsls	r1, r3, #2
 8007258:	440b      	add	r3, r1
 800725a:	fbb0 f3f3 	udiv	r3, r0, r3
 800725e:	3301      	adds	r3, #1
 8007260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	6809      	ldr	r1, [r1, #0]
 800726c:	4313      	orrs	r3, r2
 800726e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69da      	ldr	r2, [r3, #28]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6911      	ldr	r1, [r2, #16]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	68d2      	ldr	r2, [r2, #12]
 80072a2:	4311      	orrs	r1, r2
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	6812      	ldr	r2, [r2, #0]
 80072a8:	430b      	orrs	r3, r1
 80072aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	695a      	ldr	r2, [r3, #20]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	431a      	orrs	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0201 	orr.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	000186a0 	.word	0x000186a0
 8007304:	001e847f 	.word	0x001e847f
 8007308:	003d08ff 	.word	0x003d08ff
 800730c:	431bde83 	.word	0x431bde83
 8007310:	10624dd3 	.word	0x10624dd3

08007314 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af02      	add	r7, sp, #8
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	461a      	mov	r2, r3
 8007320:	460b      	mov	r3, r1
 8007322:	817b      	strh	r3, [r7, #10]
 8007324:	4613      	mov	r3, r2
 8007326:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007328:	f7fe fee8 	bl	80060fc <HAL_GetTick>
 800732c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b20      	cmp	r3, #32
 8007338:	f040 80e0 	bne.w	80074fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	2319      	movs	r3, #25
 8007342:	2201      	movs	r2, #1
 8007344:	4970      	ldr	r1, [pc, #448]	; (8007508 <HAL_I2C_Master_Transmit+0x1f4>)
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f002 f8dc 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007352:	2302      	movs	r3, #2
 8007354:	e0d3      	b.n	80074fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <HAL_I2C_Master_Transmit+0x50>
 8007360:	2302      	movs	r3, #2
 8007362:	e0cc      	b.n	80074fe <HAL_I2C_Master_Transmit+0x1ea>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b01      	cmp	r3, #1
 8007378:	d007      	beq.n	800738a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f042 0201 	orr.w	r2, r2, #1
 8007388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007398:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2221      	movs	r2, #33	; 0x21
 800739e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2210      	movs	r2, #16
 80073a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	893a      	ldrh	r2, [r7, #8]
 80073ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4a50      	ldr	r2, [pc, #320]	; (800750c <HAL_I2C_Master_Transmit+0x1f8>)
 80073ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80073cc:	8979      	ldrh	r1, [r7, #10]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	6a3a      	ldr	r2, [r7, #32]
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f001 fe9e 	bl	8009114 <I2C_MasterRequestWrite>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e08d      	b.n	80074fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073e2:	2300      	movs	r3, #0
 80073e4:	613b      	str	r3, [r7, #16]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	613b      	str	r3, [r7, #16]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	613b      	str	r3, [r7, #16]
 80073f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80073f8:	e066      	b.n	80074c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	6a39      	ldr	r1, [r7, #32]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f002 f956 	bl	80096b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00d      	beq.n	8007426 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	2b04      	cmp	r3, #4
 8007410:	d107      	bne.n	8007422 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007420:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e06b      	b.n	80074fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	781a      	ldrb	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800744e:	3b01      	subs	r3, #1
 8007450:	b29a      	uxth	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b04      	cmp	r3, #4
 8007462:	d11b      	bne.n	800749c <HAL_I2C_Master_Transmit+0x188>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007468:	2b00      	cmp	r3, #0
 800746a:	d017      	beq.n	800749c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	781a      	ldrb	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007494:	3b01      	subs	r3, #1
 8007496:	b29a      	uxth	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	6a39      	ldr	r1, [r7, #32]
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f002 f946 	bl	8009732 <I2C_WaitOnBTFFlagUntilTimeout>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00d      	beq.n	80074c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d107      	bne.n	80074c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e01a      	b.n	80074fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d194      	bne.n	80073fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	e000      	b.n	80074fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80074fc:	2302      	movs	r3, #2
  }
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	00100002 	.word	0x00100002
 800750c:	ffff0000 	.word	0xffff0000

08007510 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08c      	sub	sp, #48	; 0x30
 8007514:	af02      	add	r7, sp, #8
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	607a      	str	r2, [r7, #4]
 800751a:	461a      	mov	r2, r3
 800751c:	460b      	mov	r3, r1
 800751e:	817b      	strh	r3, [r7, #10]
 8007520:	4613      	mov	r3, r2
 8007522:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007524:	f7fe fdea 	bl	80060fc <HAL_GetTick>
 8007528:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b20      	cmp	r3, #32
 8007534:	f040 820b 	bne.w	800794e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	2319      	movs	r3, #25
 800753e:	2201      	movs	r2, #1
 8007540:	497c      	ldr	r1, [pc, #496]	; (8007734 <HAL_I2C_Master_Receive+0x224>)
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f001 ffde 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800754e:	2302      	movs	r3, #2
 8007550:	e1fe      	b.n	8007950 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007558:	2b01      	cmp	r3, #1
 800755a:	d101      	bne.n	8007560 <HAL_I2C_Master_Receive+0x50>
 800755c:	2302      	movs	r3, #2
 800755e:	e1f7      	b.n	8007950 <HAL_I2C_Master_Receive+0x440>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b01      	cmp	r3, #1
 8007574:	d007      	beq.n	8007586 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0201 	orr.w	r2, r2, #1
 8007584:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007594:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2222      	movs	r2, #34	; 0x22
 800759a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2210      	movs	r2, #16
 80075a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	893a      	ldrh	r2, [r7, #8]
 80075b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075bc:	b29a      	uxth	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4a5c      	ldr	r2, [pc, #368]	; (8007738 <HAL_I2C_Master_Receive+0x228>)
 80075c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80075c8:	8979      	ldrh	r1, [r7, #10]
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f001 fe22 	bl	8009218 <I2C_MasterRequestRead>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e1b8      	b.n	8007950 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d113      	bne.n	800760e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075e6:	2300      	movs	r3, #0
 80075e8:	623b      	str	r3, [r7, #32]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	623b      	str	r3, [r7, #32]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	623b      	str	r3, [r7, #32]
 80075fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	e18c      	b.n	8007928 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007612:	2b01      	cmp	r3, #1
 8007614:	d11b      	bne.n	800764e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007626:	2300      	movs	r3, #0
 8007628:	61fb      	str	r3, [r7, #28]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	61fb      	str	r3, [r7, #28]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	61fb      	str	r3, [r7, #28]
 800763a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	e16c      	b.n	8007928 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007652:	2b02      	cmp	r3, #2
 8007654:	d11b      	bne.n	800768e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007664:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007676:	2300      	movs	r3, #0
 8007678:	61bb      	str	r3, [r7, #24]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	61bb      	str	r3, [r7, #24]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	61bb      	str	r3, [r7, #24]
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	e14c      	b.n	8007928 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800769c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	617b      	str	r3, [r7, #20]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	617b      	str	r3, [r7, #20]
 80076b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80076b4:	e138      	b.n	8007928 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	f200 80f1 	bhi.w	80078a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d123      	bne.n	8007710 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f002 f8a3 	bl	8009818 <I2C_WaitOnRXNEFlagUntilTimeout>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e139      	b.n	8007950 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691a      	ldr	r2, [r3, #16]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	b2d2      	uxtb	r2, r2
 80076e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007704:	b29b      	uxth	r3, r3
 8007706:	3b01      	subs	r3, #1
 8007708:	b29a      	uxth	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800770e:	e10b      	b.n	8007928 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007714:	2b02      	cmp	r3, #2
 8007716:	d14e      	bne.n	80077b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	2200      	movs	r2, #0
 8007720:	4906      	ldr	r1, [pc, #24]	; (800773c <HAL_I2C_Master_Receive+0x22c>)
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f001 feee 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d008      	beq.n	8007740 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e10e      	b.n	8007950 <HAL_I2C_Master_Receive+0x440>
 8007732:	bf00      	nop
 8007734:	00100002 	.word	0x00100002
 8007738:	ffff0000 	.word	0xffff0000
 800773c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800774e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691a      	ldr	r2, [r3, #16]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	b2d2      	uxtb	r2, r2
 800775c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800776c:	3b01      	subs	r3, #1
 800776e:	b29a      	uxth	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	691a      	ldr	r2, [r3, #16]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	b2d2      	uxtb	r2, r2
 800778e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077b4:	e0b8      	b.n	8007928 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	2200      	movs	r2, #0
 80077be:	4966      	ldr	r1, [pc, #408]	; (8007958 <HAL_I2C_Master_Receive+0x448>)
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f001 fe9f 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e0bf      	b.n	8007950 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691a      	ldr	r2, [r3, #16]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	2200      	movs	r2, #0
 800781a:	494f      	ldr	r1, [pc, #316]	; (8007958 <HAL_I2C_Master_Receive+0x448>)
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f001 fe71 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e091      	b.n	8007950 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800783a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691a      	ldr	r2, [r3, #16]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007858:	3b01      	subs	r3, #1
 800785a:	b29a      	uxth	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007864:	b29b      	uxth	r3, r3
 8007866:	3b01      	subs	r3, #1
 8007868:	b29a      	uxth	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	691a      	ldr	r2, [r3, #16]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	b2d2      	uxtb	r2, r2
 800787a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800788a:	3b01      	subs	r3, #1
 800788c:	b29a      	uxth	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007896:	b29b      	uxth	r3, r3
 8007898:	3b01      	subs	r3, #1
 800789a:	b29a      	uxth	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078a0:	e042      	b.n	8007928 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f001 ffb6 	bl	8009818 <I2C_WaitOnRXNEFlagUntilTimeout>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e04c      	b.n	8007950 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	691a      	ldr	r2, [r3, #16]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	b2d2      	uxtb	r2, r2
 80078c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078de:	b29b      	uxth	r3, r3
 80078e0:	3b01      	subs	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d118      	bne.n	8007928 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	691a      	ldr	r2, [r3, #16]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	b2d2      	uxtb	r2, r2
 8007902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007912:	3b01      	subs	r3, #1
 8007914:	b29a      	uxth	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800792c:	2b00      	cmp	r3, #0
 800792e:	f47f aec2 	bne.w	80076b6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2220      	movs	r2, #32
 8007936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	e000      	b.n	8007950 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800794e:	2302      	movs	r3, #2
  }
}
 8007950:	4618      	mov	r0, r3
 8007952:	3728      	adds	r7, #40	; 0x28
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	00010004 	.word	0x00010004

0800795c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007974:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800797c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007984:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	2b10      	cmp	r3, #16
 800798a:	d003      	beq.n	8007994 <HAL_I2C_EV_IRQHandler+0x38>
 800798c:	7bfb      	ldrb	r3, [r7, #15]
 800798e:	2b40      	cmp	r3, #64	; 0x40
 8007990:	f040 80c1 	bne.w	8007b16 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10d      	bne.n	80079ca <HAL_I2C_EV_IRQHandler+0x6e>
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80079b4:	d003      	beq.n	80079be <HAL_I2C_EV_IRQHandler+0x62>
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80079bc:	d101      	bne.n	80079c2 <HAL_I2C_EV_IRQHandler+0x66>
 80079be:	2301      	movs	r3, #1
 80079c0:	e000      	b.n	80079c4 <HAL_I2C_EV_IRQHandler+0x68>
 80079c2:	2300      	movs	r3, #0
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	f000 8132 	beq.w	8007c2e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00c      	beq.n	80079ee <HAL_I2C_EV_IRQHandler+0x92>
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	0a5b      	lsrs	r3, r3, #9
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d006      	beq.n	80079ee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 ff9e 	bl	8009922 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fd79 	bl	80084de <I2C_Master_SB>
 80079ec:	e092      	b.n	8007b14 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	08db      	lsrs	r3, r3, #3
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d009      	beq.n	8007a0e <HAL_I2C_EV_IRQHandler+0xb2>
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	0a5b      	lsrs	r3, r3, #9
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fdef 	bl	80085ea <I2C_Master_ADD10>
 8007a0c:	e082      	b.n	8007b14 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	085b      	lsrs	r3, r3, #1
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <HAL_I2C_EV_IRQHandler+0xd2>
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	0a5b      	lsrs	r3, r3, #9
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fe09 	bl	800863e <I2C_Master_ADDR>
 8007a2c:	e072      	b.n	8007b14 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	089b      	lsrs	r3, r3, #2
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d03b      	beq.n	8007ab2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a48:	f000 80f3 	beq.w	8007c32 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	09db      	lsrs	r3, r3, #7
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00f      	beq.n	8007a78 <HAL_I2C_EV_IRQHandler+0x11c>
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	0a9b      	lsrs	r3, r3, #10
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d009      	beq.n	8007a78 <HAL_I2C_EV_IRQHandler+0x11c>
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	089b      	lsrs	r3, r3, #2
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d103      	bne.n	8007a78 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f9f3 	bl	8007e5c <I2C_MasterTransmit_TXE>
 8007a76:	e04d      	b.n	8007b14 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	089b      	lsrs	r3, r3, #2
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 80d6 	beq.w	8007c32 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	0a5b      	lsrs	r3, r3, #9
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 80cf 	beq.w	8007c32 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b21      	cmp	r3, #33	; 0x21
 8007a98:	d103      	bne.n	8007aa2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa7a 	bl	8007f94 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007aa0:	e0c7      	b.n	8007c32 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
 8007aa4:	2b40      	cmp	r3, #64	; 0x40
 8007aa6:	f040 80c4 	bne.w	8007c32 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fae8 	bl	8008080 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ab0:	e0bf      	b.n	8007c32 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac0:	f000 80b7 	beq.w	8007c32 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	099b      	lsrs	r3, r3, #6
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00f      	beq.n	8007af0 <HAL_I2C_EV_IRQHandler+0x194>
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	0a9b      	lsrs	r3, r3, #10
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d009      	beq.n	8007af0 <HAL_I2C_EV_IRQHandler+0x194>
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	089b      	lsrs	r3, r3, #2
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d103      	bne.n	8007af0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fb5d 	bl	80081a8 <I2C_MasterReceive_RXNE>
 8007aee:	e011      	b.n	8007b14 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	089b      	lsrs	r3, r3, #2
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 809a 	beq.w	8007c32 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	0a5b      	lsrs	r3, r3, #9
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 8093 	beq.w	8007c32 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fbfc 	bl	800830a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b12:	e08e      	b.n	8007c32 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007b14:	e08d      	b.n	8007c32 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d004      	beq.n	8007b28 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	61fb      	str	r3, [r7, #28]
 8007b26:	e007      	b.n	8007b38 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	085b      	lsrs	r3, r3, #1
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d012      	beq.n	8007b6a <HAL_I2C_EV_IRQHandler+0x20e>
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	0a5b      	lsrs	r3, r3, #9
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00c      	beq.n	8007b6a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007b60:	69b9      	ldr	r1, [r7, #24]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 ffba 	bl	8008adc <I2C_Slave_ADDR>
 8007b68:	e066      	b.n	8007c38 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	091b      	lsrs	r3, r3, #4
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d009      	beq.n	8007b8a <HAL_I2C_EV_IRQHandler+0x22e>
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	0a5b      	lsrs	r3, r3, #9
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fff4 	bl	8008b70 <I2C_Slave_STOPF>
 8007b88:	e056      	b.n	8007c38 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b21      	cmp	r3, #33	; 0x21
 8007b8e:	d002      	beq.n	8007b96 <HAL_I2C_EV_IRQHandler+0x23a>
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b29      	cmp	r3, #41	; 0x29
 8007b94:	d125      	bne.n	8007be2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	09db      	lsrs	r3, r3, #7
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00f      	beq.n	8007bc2 <HAL_I2C_EV_IRQHandler+0x266>
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	0a9b      	lsrs	r3, r3, #10
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d009      	beq.n	8007bc2 <HAL_I2C_EV_IRQHandler+0x266>
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	089b      	lsrs	r3, r3, #2
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d103      	bne.n	8007bc2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fed0 	bl	8008960 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007bc0:	e039      	b.n	8007c36 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	089b      	lsrs	r3, r3, #2
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d033      	beq.n	8007c36 <HAL_I2C_EV_IRQHandler+0x2da>
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	0a5b      	lsrs	r3, r3, #9
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d02d      	beq.n	8007c36 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fefd 	bl	80089da <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007be0:	e029      	b.n	8007c36 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	099b      	lsrs	r3, r3, #6
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00f      	beq.n	8007c0e <HAL_I2C_EV_IRQHandler+0x2b2>
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	0a9b      	lsrs	r3, r3, #10
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d009      	beq.n	8007c0e <HAL_I2C_EV_IRQHandler+0x2b2>
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	089b      	lsrs	r3, r3, #2
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d103      	bne.n	8007c0e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 ff08 	bl	8008a1c <I2C_SlaveReceive_RXNE>
 8007c0c:	e014      	b.n	8007c38 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	089b      	lsrs	r3, r3, #2
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00e      	beq.n	8007c38 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	0a5b      	lsrs	r3, r3, #9
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d008      	beq.n	8007c38 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 ff36 	bl	8008a98 <I2C_SlaveReceive_BTF>
 8007c2c:	e004      	b.n	8007c38 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007c2e:	bf00      	nop
 8007c30:	e002      	b.n	8007c38 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c32:	bf00      	nop
 8007c34:	e000      	b.n	8007c38 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c36:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007c38:	3720      	adds	r7, #32
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b08a      	sub	sp, #40	; 0x28
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007c56:	2300      	movs	r3, #0
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c60:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	0a1b      	lsrs	r3, r3, #8
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00e      	beq.n	8007c8c <HAL_I2C_ER_IRQHandler+0x4e>
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	0a1b      	lsrs	r3, r3, #8
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d008      	beq.n	8007c8c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	f043 0301 	orr.w	r3, r3, #1
 8007c80:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c8a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	0a5b      	lsrs	r3, r3, #9
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00e      	beq.n	8007cb6 <HAL_I2C_ER_IRQHandler+0x78>
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	0a1b      	lsrs	r3, r3, #8
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d008      	beq.n	8007cb6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	f043 0302 	orr.w	r3, r3, #2
 8007caa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007cb4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	0a9b      	lsrs	r3, r3, #10
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d03f      	beq.n	8007d42 <HAL_I2C_ER_IRQHandler+0x104>
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	0a1b      	lsrs	r3, r3, #8
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d039      	beq.n	8007d42 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007cce:	7efb      	ldrb	r3, [r7, #27]
 8007cd0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007ce8:	7ebb      	ldrb	r3, [r7, #26]
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	d112      	bne.n	8007d14 <HAL_I2C_ER_IRQHandler+0xd6>
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10f      	bne.n	8007d14 <HAL_I2C_ER_IRQHandler+0xd6>
 8007cf4:	7cfb      	ldrb	r3, [r7, #19]
 8007cf6:	2b21      	cmp	r3, #33	; 0x21
 8007cf8:	d008      	beq.n	8007d0c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007cfa:	7cfb      	ldrb	r3, [r7, #19]
 8007cfc:	2b29      	cmp	r3, #41	; 0x29
 8007cfe:	d005      	beq.n	8007d0c <HAL_I2C_ER_IRQHandler+0xce>
 8007d00:	7cfb      	ldrb	r3, [r7, #19]
 8007d02:	2b28      	cmp	r3, #40	; 0x28
 8007d04:	d106      	bne.n	8007d14 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b21      	cmp	r3, #33	; 0x21
 8007d0a:	d103      	bne.n	8007d14 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f001 f85f 	bl	8008dd0 <I2C_Slave_AF>
 8007d12:	e016      	b.n	8007d42 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d1c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	f043 0304 	orr.w	r3, r3, #4
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007d26:	7efb      	ldrb	r3, [r7, #27]
 8007d28:	2b10      	cmp	r3, #16
 8007d2a:	d002      	beq.n	8007d32 <HAL_I2C_ER_IRQHandler+0xf4>
 8007d2c:	7efb      	ldrb	r3, [r7, #27]
 8007d2e:	2b40      	cmp	r3, #64	; 0x40
 8007d30:	d107      	bne.n	8007d42 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d40:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	0adb      	lsrs	r3, r3, #11
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00e      	beq.n	8007d6c <HAL_I2C_ER_IRQHandler+0x12e>
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	0a1b      	lsrs	r3, r3, #8
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d008      	beq.n	8007d6c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	f043 0308 	orr.w	r3, r3, #8
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007d6a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d008      	beq.n	8007d84 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 f896 	bl	8008eb0 <I2C_ITError>
  }
}
 8007d84:	bf00      	nop
 8007d86:	3728      	adds	r7, #40	; 0x28
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	460b      	mov	r3, r1
 8007de6:	70fb      	strb	r3, [r7, #3]
 8007de8:	4613      	mov	r3, r2
 8007dea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d150      	bne.n	8007f24 <I2C_MasterTransmit_TXE+0xc8>
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	2b21      	cmp	r3, #33	; 0x21
 8007e86:	d14d      	bne.n	8007f24 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b08      	cmp	r3, #8
 8007e8c:	d01d      	beq.n	8007eca <I2C_MasterTransmit_TXE+0x6e>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b20      	cmp	r3, #32
 8007e92:	d01a      	beq.n	8007eca <I2C_MasterTransmit_TXE+0x6e>
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e9a:	d016      	beq.n	8007eca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007eaa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2211      	movs	r2, #17
 8007eb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff ff62 	bl	8007d8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007ec8:	e060      	b.n	8007f8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ed8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ee8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b40      	cmp	r3, #64	; 0x40
 8007f02:	d107      	bne.n	8007f14 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff ff7d 	bl	8007e0c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007f12:	e03b      	b.n	8007f8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff ff35 	bl	8007d8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007f22:	e033      	b.n	8007f8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	2b21      	cmp	r3, #33	; 0x21
 8007f28:	d005      	beq.n	8007f36 <I2C_MasterTransmit_TXE+0xda>
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b40      	cmp	r3, #64	; 0x40
 8007f2e:	d12d      	bne.n	8007f8c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	2b22      	cmp	r3, #34	; 0x22
 8007f34:	d12a      	bne.n	8007f8c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d108      	bne.n	8007f52 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f4e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007f50:	e01c      	b.n	8007f8c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b40      	cmp	r3, #64	; 0x40
 8007f5c:	d103      	bne.n	8007f66 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f88e 	bl	8008080 <I2C_MemoryTransmit_TXE_BTF>
}
 8007f64:	e012      	b.n	8007f8c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6a:	781a      	ldrb	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	3b01      	subs	r3, #1
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007f8a:	e7ff      	b.n	8007f8c <I2C_MasterTransmit_TXE+0x130>
 8007f8c:	bf00      	nop
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b21      	cmp	r3, #33	; 0x21
 8007fac:	d164      	bne.n	8008078 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d012      	beq.n	8007fde <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	781a      	ldrb	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007fdc:	e04c      	b.n	8008078 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d01d      	beq.n	8008020 <I2C_MasterTransmit_BTF+0x8c>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	d01a      	beq.n	8008020 <I2C_MasterTransmit_BTF+0x8c>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ff0:	d016      	beq.n	8008020 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008000:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2211      	movs	r2, #17
 8008006:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2220      	movs	r2, #32
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7ff feb7 	bl	8007d8c <HAL_I2C_MasterTxCpltCallback>
}
 800801e:	e02b      	b.n	8008078 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800802e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800803e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2220      	movs	r2, #32
 800804a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b40      	cmp	r3, #64	; 0x40
 8008058:	d107      	bne.n	800806a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7ff fed2 	bl	8007e0c <HAL_I2C_MemTxCpltCallback>
}
 8008068:	e006      	b.n	8008078 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff fe8a 	bl	8007d8c <HAL_I2C_MasterTxCpltCallback>
}
 8008078:	bf00      	nop
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800808e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008094:	2b00      	cmp	r3, #0
 8008096:	d11d      	bne.n	80080d4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800809c:	2b01      	cmp	r3, #1
 800809e:	d10b      	bne.n	80080b8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b0:	1c9a      	adds	r2, r3, #2
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80080b6:	e073      	b.n	80081a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080bc:	b29b      	uxth	r3, r3
 80080be:	121b      	asrs	r3, r3, #8
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80080d2:	e065      	b.n	80081a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d10b      	bne.n	80080f4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80080f2:	e055      	b.n	80081a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d151      	bne.n	80081a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
 80080fe:	2b22      	cmp	r3, #34	; 0x22
 8008100:	d10d      	bne.n	800811e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008110:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800811c:	e040      	b.n	80081a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008122:	b29b      	uxth	r3, r3
 8008124:	2b00      	cmp	r3, #0
 8008126:	d015      	beq.n	8008154 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	2b21      	cmp	r3, #33	; 0x21
 800812c:	d112      	bne.n	8008154 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	781a      	ldrb	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008148:	b29b      	uxth	r3, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	b29a      	uxth	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008152:	e025      	b.n	80081a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008158:	b29b      	uxth	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d120      	bne.n	80081a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	2b21      	cmp	r3, #33	; 0x21
 8008162:	d11d      	bne.n	80081a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008172:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008182:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2220      	movs	r2, #32
 800818e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7ff fe36 	bl	8007e0c <HAL_I2C_MemTxCpltCallback>
}
 80081a0:	bf00      	nop
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b22      	cmp	r3, #34	; 0x22
 80081ba:	f040 80a2 	bne.w	8008302 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d921      	bls.n	8008210 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	691a      	ldr	r2, [r3, #16]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	b2d2      	uxtb	r2, r2
 80081d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	f040 8082 	bne.w	8008302 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800820c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800820e:	e078      	b.n	8008302 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	2b02      	cmp	r3, #2
 8008216:	d074      	beq.n	8008302 <I2C_MasterReceive_RXNE+0x15a>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d002      	beq.n	8008224 <I2C_MasterReceive_RXNE+0x7c>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d16e      	bne.n	8008302 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 fac5 	bl	80097b4 <I2C_WaitOnSTOPRequestThroughIT>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d142      	bne.n	80082b6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800823e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800824e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691a      	ldr	r2, [r3, #16]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	b2d2      	uxtb	r2, r2
 800825c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800826c:	b29b      	uxth	r3, r3
 800826e:	3b01      	subs	r3, #1
 8008270:	b29a      	uxth	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b40      	cmp	r3, #64	; 0x40
 8008288:	d10a      	bne.n	80082a0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7ff fdc1 	bl	8007e20 <HAL_I2C_MemRxCpltCallback>
}
 800829e:	e030      	b.n	8008302 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2212      	movs	r2, #18
 80082ac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff fd76 	bl	8007da0 <HAL_I2C_MasterRxCpltCallback>
}
 80082b4:	e025      	b.n	8008302 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082c4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	691a      	ldr	r2, [r3, #16]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	b2d2      	uxtb	r2, r2
 80082d2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	1c5a      	adds	r2, r3, #1
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	3b01      	subs	r3, #1
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7ff fd99 	bl	8007e34 <HAL_I2C_ErrorCallback>
}
 8008302:	bf00      	nop
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008316:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800831c:	b29b      	uxth	r3, r3
 800831e:	2b04      	cmp	r3, #4
 8008320:	d11b      	bne.n	800835a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	685a      	ldr	r2, [r3, #4]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008330:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	691a      	ldr	r2, [r3, #16]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833c:	b2d2      	uxtb	r2, r2
 800833e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800834e:	b29b      	uxth	r3, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008358:	e0bd      	b.n	80084d6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800835e:	b29b      	uxth	r3, r3
 8008360:	2b03      	cmp	r3, #3
 8008362:	d129      	bne.n	80083b8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008372:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b04      	cmp	r3, #4
 8008378:	d00a      	beq.n	8008390 <I2C_MasterReceive_BTF+0x86>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2b02      	cmp	r3, #2
 800837e:	d007      	beq.n	8008390 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800838e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	691a      	ldr	r2, [r3, #16]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	b2d2      	uxtb	r2, r2
 800839c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	3b01      	subs	r3, #1
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80083b6:	e08e      	b.n	80084d6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083bc:	b29b      	uxth	r3, r3
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d176      	bne.n	80084b0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d002      	beq.n	80083ce <I2C_MasterReceive_BTF+0xc4>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b10      	cmp	r3, #16
 80083cc:	d108      	bne.n	80083e0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	e019      	b.n	8008414 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d002      	beq.n	80083ec <I2C_MasterReceive_BTF+0xe2>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d108      	bne.n	80083fe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	e00a      	b.n	8008414 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b10      	cmp	r3, #16
 8008402:	d007      	beq.n	8008414 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008412:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	691a      	ldr	r2, [r3, #16]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841e:	b2d2      	uxtb	r2, r2
 8008420:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008430:	b29b      	uxth	r3, r3
 8008432:	3b01      	subs	r3, #1
 8008434:	b29a      	uxth	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	691a      	ldr	r2, [r3, #16]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	b2d2      	uxtb	r2, r2
 8008446:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008456:	b29b      	uxth	r3, r3
 8008458:	3b01      	subs	r3, #1
 800845a:	b29a      	uxth	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800846e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2220      	movs	r2, #32
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b40      	cmp	r3, #64	; 0x40
 8008482:	d10a      	bne.n	800849a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff fcc4 	bl	8007e20 <HAL_I2C_MemRxCpltCallback>
}
 8008498:	e01d      	b.n	80084d6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2212      	movs	r2, #18
 80084a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff fc79 	bl	8007da0 <HAL_I2C_MasterRxCpltCallback>
}
 80084ae:	e012      	b.n	80084d6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	691a      	ldr	r2, [r3, #16]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ba:	b2d2      	uxtb	r2, r2
 80084bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	3b01      	subs	r3, #1
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b40      	cmp	r3, #64	; 0x40
 80084f0:	d117      	bne.n	8008522 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	461a      	mov	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800850a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800850c:	e067      	b.n	80085de <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008512:	b2db      	uxtb	r3, r3
 8008514:	f043 0301 	orr.w	r3, r3, #1
 8008518:	b2da      	uxtb	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	611a      	str	r2, [r3, #16]
}
 8008520:	e05d      	b.n	80085de <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800852a:	d133      	bne.n	8008594 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b21      	cmp	r3, #33	; 0x21
 8008536:	d109      	bne.n	800854c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853c:	b2db      	uxtb	r3, r3
 800853e:	461a      	mov	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008548:	611a      	str	r2, [r3, #16]
 800854a:	e008      	b.n	800855e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008550:	b2db      	uxtb	r3, r3
 8008552:	f043 0301 	orr.w	r3, r3, #1
 8008556:	b2da      	uxtb	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008562:	2b00      	cmp	r3, #0
 8008564:	d004      	beq.n	8008570 <I2C_Master_SB+0x92>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856c:	2b00      	cmp	r3, #0
 800856e:	d108      	bne.n	8008582 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008574:	2b00      	cmp	r3, #0
 8008576:	d032      	beq.n	80085de <I2C_Master_SB+0x100>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857e:	2b00      	cmp	r3, #0
 8008580:	d02d      	beq.n	80085de <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008590:	605a      	str	r2, [r3, #4]
}
 8008592:	e024      	b.n	80085de <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10e      	bne.n	80085ba <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	11db      	asrs	r3, r3, #7
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	f003 0306 	and.w	r3, r3, #6
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	f063 030f 	orn	r3, r3, #15
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	611a      	str	r2, [r3, #16]
}
 80085b8:	e011      	b.n	80085de <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d10d      	bne.n	80085de <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	11db      	asrs	r3, r3, #7
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	f003 0306 	and.w	r3, r3, #6
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	f063 030e 	orn	r3, r3, #14
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	611a      	str	r2, [r3, #16]
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	2b00      	cmp	r3, #0
 8008604:	d004      	beq.n	8008610 <I2C_Master_ADD10+0x26>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d108      	bne.n	8008622 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00c      	beq.n	8008632 <I2C_Master_ADD10+0x48>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d007      	beq.n	8008632 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008630:	605a      	str	r2, [r3, #4]
  }
}
 8008632:	bf00      	nop
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800863e:	b480      	push	{r7}
 8008640:	b091      	sub	sp, #68	; 0x44
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800864c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008654:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b22      	cmp	r3, #34	; 0x22
 8008666:	f040 8169 	bne.w	800893c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10f      	bne.n	8008692 <I2C_Master_ADDR+0x54>
 8008672:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008676:	2b40      	cmp	r3, #64	; 0x40
 8008678:	d10b      	bne.n	8008692 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800867a:	2300      	movs	r3, #0
 800867c:	633b      	str	r3, [r7, #48]	; 0x30
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	633b      	str	r3, [r7, #48]	; 0x30
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	633b      	str	r3, [r7, #48]	; 0x30
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	e160      	b.n	8008954 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008696:	2b00      	cmp	r3, #0
 8008698:	d11d      	bne.n	80086d6 <I2C_Master_ADDR+0x98>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80086a2:	d118      	bne.n	80086d6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086a4:	2300      	movs	r3, #0
 80086a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086c8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	651a      	str	r2, [r3, #80]	; 0x50
 80086d4:	e13e      	b.n	8008954 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086da:	b29b      	uxth	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d113      	bne.n	8008708 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086e0:	2300      	movs	r3, #0
 80086e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	e115      	b.n	8008934 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800870c:	b29b      	uxth	r3, r3
 800870e:	2b01      	cmp	r3, #1
 8008710:	f040 808a 	bne.w	8008828 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008716:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800871a:	d137      	bne.n	800878c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800872a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800873a:	d113      	bne.n	8008764 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800874a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800874c:	2300      	movs	r3, #0
 800874e:	627b      	str	r3, [r7, #36]	; 0x24
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	627b      	str	r3, [r7, #36]	; 0x24
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	627b      	str	r3, [r7, #36]	; 0x24
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	e0e7      	b.n	8008934 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008764:	2300      	movs	r3, #0
 8008766:	623b      	str	r3, [r7, #32]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	623b      	str	r3, [r7, #32]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	623b      	str	r3, [r7, #32]
 8008778:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	e0d3      	b.n	8008934 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	2b08      	cmp	r3, #8
 8008790:	d02e      	beq.n	80087f0 <I2C_Master_ADDR+0x1b2>
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	2b20      	cmp	r3, #32
 8008796:	d02b      	beq.n	80087f0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879a:	2b12      	cmp	r3, #18
 800879c:	d102      	bne.n	80087a4 <I2C_Master_ADDR+0x166>
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d125      	bne.n	80087f0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80087a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a6:	2b04      	cmp	r3, #4
 80087a8:	d00e      	beq.n	80087c8 <I2C_Master_ADDR+0x18a>
 80087aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d00b      	beq.n	80087c8 <I2C_Master_ADDR+0x18a>
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	2b10      	cmp	r3, #16
 80087b4:	d008      	beq.n	80087c8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	e007      	b.n	80087d8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087d6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087d8:	2300      	movs	r3, #0
 80087da:	61fb      	str	r3, [r7, #28]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	61fb      	str	r3, [r7, #28]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	e0a1      	b.n	8008934 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087fe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008800:	2300      	movs	r3, #0
 8008802:	61bb      	str	r3, [r7, #24]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	61bb      	str	r3, [r7, #24]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	61bb      	str	r3, [r7, #24]
 8008814:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	e085      	b.n	8008934 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882c:	b29b      	uxth	r3, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d14d      	bne.n	80088ce <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008834:	2b04      	cmp	r3, #4
 8008836:	d016      	beq.n	8008866 <I2C_Master_ADDR+0x228>
 8008838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883a:	2b02      	cmp	r3, #2
 800883c:	d013      	beq.n	8008866 <I2C_Master_ADDR+0x228>
 800883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008840:	2b10      	cmp	r3, #16
 8008842:	d010      	beq.n	8008866 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008852:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	e007      	b.n	8008876 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008874:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008884:	d117      	bne.n	80088b6 <I2C_Master_ADDR+0x278>
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008888:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800888c:	d00b      	beq.n	80088a6 <I2C_Master_ADDR+0x268>
 800888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008890:	2b01      	cmp	r3, #1
 8008892:	d008      	beq.n	80088a6 <I2C_Master_ADDR+0x268>
 8008894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008896:	2b08      	cmp	r3, #8
 8008898:	d005      	beq.n	80088a6 <I2C_Master_ADDR+0x268>
 800889a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889c:	2b10      	cmp	r3, #16
 800889e:	d002      	beq.n	80088a6 <I2C_Master_ADDR+0x268>
 80088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a2:	2b20      	cmp	r3, #32
 80088a4:	d107      	bne.n	80088b6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80088b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088b6:	2300      	movs	r3, #0
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	617b      	str	r3, [r7, #20]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	617b      	str	r3, [r7, #20]
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	e032      	b.n	8008934 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80088dc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ec:	d117      	bne.n	800891e <I2C_Master_ADDR+0x2e0>
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80088f4:	d00b      	beq.n	800890e <I2C_Master_ADDR+0x2d0>
 80088f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d008      	beq.n	800890e <I2C_Master_ADDR+0x2d0>
 80088fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fe:	2b08      	cmp	r3, #8
 8008900:	d005      	beq.n	800890e <I2C_Master_ADDR+0x2d0>
 8008902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008904:	2b10      	cmp	r3, #16
 8008906:	d002      	beq.n	800890e <I2C_Master_ADDR+0x2d0>
 8008908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890a:	2b20      	cmp	r3, #32
 800890c:	d107      	bne.n	800891e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800891c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800891e:	2300      	movs	r3, #0
 8008920:	613b      	str	r3, [r7, #16]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	613b      	str	r3, [r7, #16]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800893a:	e00b      	b.n	8008954 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800893c:	2300      	movs	r3, #0
 800893e:	60fb      	str	r3, [r7, #12]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	60fb      	str	r3, [r7, #12]
 8008950:	68fb      	ldr	r3, [r7, #12]
}
 8008952:	e7ff      	b.n	8008954 <I2C_Master_ADDR+0x316>
 8008954:	bf00      	nop
 8008956:	3744      	adds	r7, #68	; 0x44
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800896e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008974:	b29b      	uxth	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d02b      	beq.n	80089d2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	781a      	ldrb	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008994:	b29b      	uxth	r3, r3
 8008996:	3b01      	subs	r3, #1
 8008998:	b29a      	uxth	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d114      	bne.n	80089d2 <I2C_SlaveTransmit_TXE+0x72>
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	2b29      	cmp	r3, #41	; 0x29
 80089ac:	d111      	bne.n	80089d2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2221      	movs	r2, #33	; 0x21
 80089c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2228      	movs	r2, #40	; 0x28
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7ff f9f1 	bl	8007db4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d011      	beq.n	8008a10 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	781a      	ldrb	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d02c      	beq.n	8008a90 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	691a      	ldr	r2, [r3, #16]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	b2d2      	uxtb	r2, r2
 8008a42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	1c5a      	adds	r2, r3, #1
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	3b01      	subs	r3, #1
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d114      	bne.n	8008a90 <I2C_SlaveReceive_RXNE+0x74>
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	2b2a      	cmp	r3, #42	; 0x2a
 8008a6a:	d111      	bne.n	8008a90 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a7a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2222      	movs	r2, #34	; 0x22
 8008a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2228      	movs	r2, #40	; 0x28
 8008a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff f99c 	bl	8007dc8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008a90:	bf00      	nop
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d012      	beq.n	8008ad0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	691a      	ldr	r2, [r3, #16]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	b2d2      	uxtb	r2, r2
 8008ab6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abc:	1c5a      	adds	r2, r3, #1
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008af6:	2b28      	cmp	r3, #40	; 0x28
 8008af8:	d127      	bne.n	8008b4a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b08:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	089b      	lsrs	r3, r3, #2
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008b16:	2301      	movs	r3, #1
 8008b18:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	09db      	lsrs	r3, r3, #7
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d103      	bne.n	8008b2e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	81bb      	strh	r3, [r7, #12]
 8008b2c:	e002      	b.n	8008b34 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008b3c:	89ba      	ldrh	r2, [r7, #12]
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7ff f94a 	bl	8007ddc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008b48:	e00e      	b.n	8008b68 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60bb      	str	r3, [r7, #8]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	60bb      	str	r3, [r7, #8]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	60bb      	str	r3, [r7, #8]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008b68:	bf00      	nop
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b7e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b8e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008b90:	2300      	movs	r3, #0
 8008b92:	60bb      	str	r3, [r7, #8]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	60bb      	str	r3, [r7, #8]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f042 0201 	orr.w	r2, r2, #1
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bbc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bcc:	d172      	bne.n	8008cb4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	2b22      	cmp	r3, #34	; 0x22
 8008bd2:	d002      	beq.n	8008bda <I2C_Slave_STOPF+0x6a>
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8008bd8:	d135      	bne.n	8008c46 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d005      	beq.n	8008bfe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf6:	f043 0204 	orr.w	r2, r3, #4
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fd ff64 	bl	8006ae0 <HAL_DMA_GetState>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d049      	beq.n	8008cb2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c22:	4a69      	ldr	r2, [pc, #420]	; (8008dc8 <I2C_Slave_STOPF+0x258>)
 8008c24:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fd fdac 	bl	8006788 <HAL_DMA_Abort_IT>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d03d      	beq.n	8008cb2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c40:	4610      	mov	r0, r2
 8008c42:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c44:	e035      	b.n	8008cb2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d005      	beq.n	8008c6a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c62:	f043 0204 	orr.w	r2, r3, #4
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fd ff2e 	bl	8006ae0 <HAL_DMA_GetState>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d014      	beq.n	8008cb4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8e:	4a4e      	ldr	r2, [pc, #312]	; (8008dc8 <I2C_Slave_STOPF+0x258>)
 8008c90:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fd fd76 	bl	8006788 <HAL_DMA_Abort_IT>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d008      	beq.n	8008cb4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008cac:	4610      	mov	r0, r2
 8008cae:	4798      	blx	r3
 8008cb0:	e000      	b.n	8008cb4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008cb2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d03e      	beq.n	8008d3c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	f003 0304 	and.w	r3, r3, #4
 8008cc8:	2b04      	cmp	r3, #4
 8008cca:	d112      	bne.n	8008cf2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	691a      	ldr	r2, [r3, #16]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cde:	1c5a      	adds	r2, r3, #1
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	3b01      	subs	r3, #1
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfc:	2b40      	cmp	r3, #64	; 0x40
 8008cfe:	d112      	bne.n	8008d26 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	691a      	ldr	r2, [r3, #16]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0a:	b2d2      	uxtb	r2, r2
 8008d0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d005      	beq.n	8008d3c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d34:	f043 0204 	orr.w	r2, r3, #4
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d003      	beq.n	8008d4c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f8b3 	bl	8008eb0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008d4a:	e039      	b.n	8008dc0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d50:	d109      	bne.n	8008d66 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2228      	movs	r2, #40	; 0x28
 8008d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7ff f831 	bl	8007dc8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b28      	cmp	r3, #40	; 0x28
 8008d70:	d111      	bne.n	8008d96 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a15      	ldr	r2, [pc, #84]	; (8008dcc <I2C_Slave_STOPF+0x25c>)
 8008d76:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2220      	movs	r2, #32
 8008d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff f832 	bl	8007df8 <HAL_I2C_ListenCpltCallback>
}
 8008d94:	e014      	b.n	8008dc0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9a:	2b22      	cmp	r3, #34	; 0x22
 8008d9c:	d002      	beq.n	8008da4 <I2C_Slave_STOPF+0x234>
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	2b22      	cmp	r3, #34	; 0x22
 8008da2:	d10d      	bne.n	8008dc0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2220      	movs	r2, #32
 8008dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff f804 	bl	8007dc8 <HAL_I2C_SlaveRxCpltCallback>
}
 8008dc0:	bf00      	nop
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	080093b5 	.word	0x080093b5
 8008dcc:	ffff0000 	.word	0xffff0000

08008dd0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dde:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d002      	beq.n	8008df2 <I2C_Slave_AF+0x22>
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2b20      	cmp	r3, #32
 8008df0:	d129      	bne.n	8008e46 <I2C_Slave_AF+0x76>
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	2b28      	cmp	r3, #40	; 0x28
 8008df6:	d126      	bne.n	8008e46 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a2c      	ldr	r2, [pc, #176]	; (8008eac <I2C_Slave_AF+0xdc>)
 8008dfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e0c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e16:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e26:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2220      	movs	r2, #32
 8008e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7fe ffda 	bl	8007df8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008e44:	e02e      	b.n	8008ea4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
 8008e48:	2b21      	cmp	r3, #33	; 0x21
 8008e4a:	d126      	bne.n	8008e9a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a17      	ldr	r2, [pc, #92]	; (8008eac <I2C_Slave_AF+0xdc>)
 8008e50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2221      	movs	r2, #33	; 0x21
 8008e56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e76:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e80:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e90:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7fe ff8e 	bl	8007db4 <HAL_I2C_SlaveTxCpltCallback>
}
 8008e98:	e004      	b.n	8008ea4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ea2:	615a      	str	r2, [r3, #20]
}
 8008ea4:	bf00      	nop
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	ffff0000 	.word	0xffff0000

08008eb0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ebe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ec6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
 8008eca:	2b10      	cmp	r3, #16
 8008ecc:	d002      	beq.n	8008ed4 <I2C_ITError+0x24>
 8008ece:	7bbb      	ldrb	r3, [r7, #14]
 8008ed0:	2b40      	cmp	r3, #64	; 0x40
 8008ed2:	d10a      	bne.n	8008eea <I2C_ITError+0x3a>
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	2b22      	cmp	r3, #34	; 0x22
 8008ed8:	d107      	bne.n	8008eea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ee8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008ef0:	2b28      	cmp	r3, #40	; 0x28
 8008ef2:	d107      	bne.n	8008f04 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2228      	movs	r2, #40	; 0x28
 8008efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008f02:	e015      	b.n	8008f30 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f12:	d00a      	beq.n	8008f2a <I2C_ITError+0x7a>
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	2b60      	cmp	r3, #96	; 0x60
 8008f18:	d007      	beq.n	8008f2a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f3e:	d162      	bne.n	8009006 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f4e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d020      	beq.n	8008fa0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f62:	4a6a      	ldr	r2, [pc, #424]	; (800910c <I2C_ITError+0x25c>)
 8008f64:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fd fc0c 	bl	8006788 <HAL_DMA_Abort_IT>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 8089 	beq.w	800908a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f022 0201 	bic.w	r2, r2, #1
 8008f86:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	4798      	blx	r3
 8008f9e:	e074      	b.n	800908a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	4a59      	ldr	r2, [pc, #356]	; (800910c <I2C_ITError+0x25c>)
 8008fa6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fd fbeb 	bl	8006788 <HAL_DMA_Abort_IT>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d068      	beq.n	800908a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc2:	2b40      	cmp	r3, #64	; 0x40
 8008fc4:	d10b      	bne.n	8008fde <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	691a      	ldr	r2, [r3, #16]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd0:	b2d2      	uxtb	r2, r2
 8008fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	1c5a      	adds	r2, r3, #1
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f022 0201 	bic.w	r2, r2, #1
 8008fec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2220      	movs	r2, #32
 8008ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009000:	4610      	mov	r0, r2
 8009002:	4798      	blx	r3
 8009004:	e041      	b.n	800908a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b60      	cmp	r3, #96	; 0x60
 8009010:	d125      	bne.n	800905e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2220      	movs	r2, #32
 8009016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902a:	2b40      	cmp	r3, #64	; 0x40
 800902c:	d10b      	bne.n	8009046 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	691a      	ldr	r2, [r3, #16]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	b2d2      	uxtb	r2, r2
 800903a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	1c5a      	adds	r2, r3, #1
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f022 0201 	bic.w	r2, r2, #1
 8009054:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7fe fef6 	bl	8007e48 <HAL_I2C_AbortCpltCallback>
 800905c:	e015      	b.n	800908a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	695b      	ldr	r3, [r3, #20]
 8009064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009068:	2b40      	cmp	r3, #64	; 0x40
 800906a:	d10b      	bne.n	8009084 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	691a      	ldr	r2, [r3, #16]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009076:	b2d2      	uxtb	r2, r2
 8009078:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	1c5a      	adds	r2, r3, #1
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7fe fed5 	bl	8007e34 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10e      	bne.n	80090b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d109      	bne.n	80090b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d104      	bne.n	80090b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d007      	beq.n	80090c8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685a      	ldr	r2, [r3, #4]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80090c6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090ce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d4:	f003 0304 	and.w	r3, r3, #4
 80090d8:	2b04      	cmp	r3, #4
 80090da:	d113      	bne.n	8009104 <I2C_ITError+0x254>
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	2b28      	cmp	r3, #40	; 0x28
 80090e0:	d110      	bne.n	8009104 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a0a      	ldr	r2, [pc, #40]	; (8009110 <I2C_ITError+0x260>)
 80090e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2220      	movs	r2, #32
 80090f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7fe fe7a 	bl	8007df8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009104:	bf00      	nop
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	080093b5 	.word	0x080093b5
 8009110:	ffff0000 	.word	0xffff0000

08009114 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af02      	add	r7, sp, #8
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	607a      	str	r2, [r7, #4]
 800911e:	603b      	str	r3, [r7, #0]
 8009120:	460b      	mov	r3, r1
 8009122:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b08      	cmp	r3, #8
 800912e:	d006      	beq.n	800913e <I2C_MasterRequestWrite+0x2a>
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d003      	beq.n	800913e <I2C_MasterRequestWrite+0x2a>
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800913c:	d108      	bne.n	8009150 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e00b      	b.n	8009168 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009154:	2b12      	cmp	r3, #18
 8009156:	d107      	bne.n	8009168 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009166:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 f9c5 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00d      	beq.n	800919c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800918e:	d103      	bne.n	8009198 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009196:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	e035      	b.n	8009208 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091a4:	d108      	bne.n	80091b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091a6:	897b      	ldrh	r3, [r7, #10]
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	461a      	mov	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80091b4:	611a      	str	r2, [r3, #16]
 80091b6:	e01b      	b.n	80091f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80091b8:	897b      	ldrh	r3, [r7, #10]
 80091ba:	11db      	asrs	r3, r3, #7
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	f003 0306 	and.w	r3, r3, #6
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f063 030f 	orn	r3, r3, #15
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	490e      	ldr	r1, [pc, #56]	; (8009210 <I2C_MasterRequestWrite+0xfc>)
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f000 f9eb 	bl	80095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e010      	b.n	8009208 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80091e6:	897b      	ldrh	r3, [r7, #10]
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	4907      	ldr	r1, [pc, #28]	; (8009214 <I2C_MasterRequestWrite+0x100>)
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 f9db 	bl	80095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e000      	b.n	8009208 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	00010008 	.word	0x00010008
 8009214:	00010002 	.word	0x00010002

08009218 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b088      	sub	sp, #32
 800921c:	af02      	add	r7, sp, #8
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	607a      	str	r2, [r7, #4]
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	460b      	mov	r3, r1
 8009226:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800923c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2b08      	cmp	r3, #8
 8009242:	d006      	beq.n	8009252 <I2C_MasterRequestRead+0x3a>
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d003      	beq.n	8009252 <I2C_MasterRequestRead+0x3a>
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009250:	d108      	bne.n	8009264 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009260:	601a      	str	r2, [r3, #0]
 8009262:	e00b      	b.n	800927c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009268:	2b11      	cmp	r3, #17
 800926a:	d107      	bne.n	800927c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800927a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 f93b 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00d      	beq.n	80092b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092a2:	d103      	bne.n	80092ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e079      	b.n	80093a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092b8:	d108      	bne.n	80092cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80092ba:	897b      	ldrh	r3, [r7, #10]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	f043 0301 	orr.w	r3, r3, #1
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	611a      	str	r2, [r3, #16]
 80092ca:	e05f      	b.n	800938c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80092cc:	897b      	ldrh	r3, [r7, #10]
 80092ce:	11db      	asrs	r3, r3, #7
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	f003 0306 	and.w	r3, r3, #6
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f063 030f 	orn	r3, r3, #15
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	4930      	ldr	r1, [pc, #192]	; (80093ac <I2C_MasterRequestRead+0x194>)
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 f961 	bl	80095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e054      	b.n	80093a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80092fa:	897b      	ldrh	r3, [r7, #10]
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	4929      	ldr	r1, [pc, #164]	; (80093b0 <I2C_MasterRequestRead+0x198>)
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 f951 	bl	80095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e044      	b.n	80093a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800931a:	2300      	movs	r3, #0
 800931c:	613b      	str	r3, [r7, #16]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	613b      	str	r3, [r7, #16]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	613b      	str	r3, [r7, #16]
 800932e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800933e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 f8d9 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00d      	beq.n	8009374 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009366:	d103      	bne.n	8009370 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800936e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e017      	b.n	80093a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009374:	897b      	ldrh	r3, [r7, #10]
 8009376:	11db      	asrs	r3, r3, #7
 8009378:	b2db      	uxtb	r3, r3
 800937a:	f003 0306 	and.w	r3, r3, #6
 800937e:	b2db      	uxtb	r3, r3
 8009380:	f063 030e 	orn	r3, r3, #14
 8009384:	b2da      	uxtb	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	4907      	ldr	r1, [pc, #28]	; (80093b0 <I2C_MasterRequestRead+0x198>)
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 f90d 	bl	80095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e000      	b.n	80093a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	00010008 	.word	0x00010008
 80093b0:	00010002 	.word	0x00010002

080093b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80093ce:	4b4b      	ldr	r3, [pc, #300]	; (80094fc <I2C_DMAAbort+0x148>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	08db      	lsrs	r3, r3, #3
 80093d4:	4a4a      	ldr	r2, [pc, #296]	; (8009500 <I2C_DMAAbort+0x14c>)
 80093d6:	fba2 2303 	umull	r2, r3, r2, r3
 80093da:	0a1a      	lsrs	r2, r3, #8
 80093dc:	4613      	mov	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	00da      	lsls	r2, r3, #3
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d106      	bne.n	80093fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f2:	f043 0220 	orr.w	r2, r3, #32
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80093fa:	e00a      	b.n	8009412 <I2C_DMAAbort+0x5e>
    }
    count--;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3b01      	subs	r3, #1
 8009400:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800940c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009410:	d0ea      	beq.n	80093e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941e:	2200      	movs	r2, #0
 8009420:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942e:	2200      	movs	r2, #0
 8009430:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009440:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2200      	movs	r2, #0
 8009446:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944c:	2b00      	cmp	r3, #0
 800944e:	d003      	beq.n	8009458 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009454:	2200      	movs	r2, #0
 8009456:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945c:	2b00      	cmp	r3, #0
 800945e:	d003      	beq.n	8009468 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009464:	2200      	movs	r2, #0
 8009466:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f022 0201 	bic.w	r2, r2, #1
 8009476:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b60      	cmp	r3, #96	; 0x60
 8009482:	d10e      	bne.n	80094a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	2220      	movs	r2, #32
 8009488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2200      	movs	r2, #0
 8009498:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800949a:	6978      	ldr	r0, [r7, #20]
 800949c:	f7fe fcd4 	bl	8007e48 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80094a0:	e027      	b.n	80094f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80094a2:	7cfb      	ldrb	r3, [r7, #19]
 80094a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80094a8:	2b28      	cmp	r3, #40	; 0x28
 80094aa:	d117      	bne.n	80094dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f042 0201 	orr.w	r2, r2, #1
 80094ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2200      	movs	r2, #0
 80094d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2228      	movs	r2, #40	; 0x28
 80094d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80094da:	e007      	b.n	80094ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	2220      	movs	r2, #32
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80094ec:	6978      	ldr	r0, [r7, #20]
 80094ee:	f7fe fca1 	bl	8007e34 <HAL_I2C_ErrorCallback>
}
 80094f2:	bf00      	nop
 80094f4:	3718      	adds	r7, #24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20000034 	.word	0x20000034
 8009500:	14f8b589 	.word	0x14f8b589

08009504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	603b      	str	r3, [r7, #0]
 8009510:	4613      	mov	r3, r2
 8009512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009514:	e025      	b.n	8009562 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951c:	d021      	beq.n	8009562 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800951e:	f7fc fded 	bl	80060fc <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	429a      	cmp	r2, r3
 800952c:	d302      	bcc.n	8009534 <I2C_WaitOnFlagUntilTimeout+0x30>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d116      	bne.n	8009562 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2220      	movs	r2, #32
 800953e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954e:	f043 0220 	orr.w	r2, r3, #32
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e023      	b.n	80095aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	0c1b      	lsrs	r3, r3, #16
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b01      	cmp	r3, #1
 800956a:	d10d      	bne.n	8009588 <I2C_WaitOnFlagUntilTimeout+0x84>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	43da      	mvns	r2, r3
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	4013      	ands	r3, r2
 8009578:	b29b      	uxth	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	bf0c      	ite	eq
 800957e:	2301      	moveq	r3, #1
 8009580:	2300      	movne	r3, #0
 8009582:	b2db      	uxtb	r3, r3
 8009584:	461a      	mov	r2, r3
 8009586:	e00c      	b.n	80095a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	43da      	mvns	r2, r3
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4013      	ands	r3, r2
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	bf0c      	ite	eq
 800959a:	2301      	moveq	r3, #1
 800959c:	2300      	movne	r3, #0
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	461a      	mov	r2, r3
 80095a2:	79fb      	ldrb	r3, [r7, #7]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d0b6      	beq.n	8009516 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	60f8      	str	r0, [r7, #12]
 80095ba:	60b9      	str	r1, [r7, #8]
 80095bc:	607a      	str	r2, [r7, #4]
 80095be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095c0:	e051      	b.n	8009666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	695b      	ldr	r3, [r3, #20]
 80095c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095d0:	d123      	bne.n	800961a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2220      	movs	r2, #32
 80095f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	f043 0204 	orr.w	r2, r3, #4
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e046      	b.n	80096a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009620:	d021      	beq.n	8009666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009622:	f7fc fd6b 	bl	80060fc <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	429a      	cmp	r2, r3
 8009630:	d302      	bcc.n	8009638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d116      	bne.n	8009666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2220      	movs	r2, #32
 8009642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009652:	f043 0220 	orr.w	r2, r3, #32
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e020      	b.n	80096a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	0c1b      	lsrs	r3, r3, #16
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2b01      	cmp	r3, #1
 800966e:	d10c      	bne.n	800968a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	43da      	mvns	r2, r3
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	4013      	ands	r3, r2
 800967c:	b29b      	uxth	r3, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	bf14      	ite	ne
 8009682:	2301      	movne	r3, #1
 8009684:	2300      	moveq	r3, #0
 8009686:	b2db      	uxtb	r3, r3
 8009688:	e00b      	b.n	80096a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	43da      	mvns	r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	4013      	ands	r3, r2
 8009696:	b29b      	uxth	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	bf14      	ite	ne
 800969c:	2301      	movne	r3, #1
 800969e:	2300      	moveq	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d18d      	bne.n	80095c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096bc:	e02d      	b.n	800971a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f000 f900 	bl	80098c4 <I2C_IsAcknowledgeFailed>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e02d      	b.n	800972a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d4:	d021      	beq.n	800971a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096d6:	f7fc fd11 	bl	80060fc <HAL_GetTick>
 80096da:	4602      	mov	r2, r0
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d302      	bcc.n	80096ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d116      	bne.n	800971a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009706:	f043 0220 	orr.w	r2, r3, #32
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e007      	b.n	800972a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009724:	2b80      	cmp	r3, #128	; 0x80
 8009726:	d1ca      	bne.n	80096be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800973e:	e02d      	b.n	800979c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 f8bf 	bl	80098c4 <I2C_IsAcknowledgeFailed>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e02d      	b.n	80097ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009756:	d021      	beq.n	800979c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009758:	f7fc fcd0 	bl	80060fc <HAL_GetTick>
 800975c:	4602      	mov	r2, r0
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	429a      	cmp	r2, r3
 8009766:	d302      	bcc.n	800976e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d116      	bne.n	800979c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2220      	movs	r2, #32
 8009778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009788:	f043 0220 	orr.w	r2, r3, #32
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e007      	b.n	80097ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	f003 0304 	and.w	r3, r3, #4
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d1ca      	bne.n	8009740 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097bc:	2300      	movs	r3, #0
 80097be:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80097c0:	4b13      	ldr	r3, [pc, #76]	; (8009810 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	08db      	lsrs	r3, r3, #3
 80097c6:	4a13      	ldr	r2, [pc, #76]	; (8009814 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80097c8:	fba2 2303 	umull	r2, r3, r2, r3
 80097cc:	0a1a      	lsrs	r2, r3, #8
 80097ce:	4613      	mov	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3b01      	subs	r3, #1
 80097da:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d107      	bne.n	80097f2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e6:	f043 0220 	orr.w	r2, r3, #32
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e008      	b.n	8009804 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009800:	d0e9      	beq.n	80097d6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	20000034 	.word	0x20000034
 8009814:	14f8b589 	.word	0x14f8b589

08009818 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009824:	e042      	b.n	80098ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	f003 0310 	and.w	r3, r3, #16
 8009830:	2b10      	cmp	r3, #16
 8009832:	d119      	bne.n	8009868 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f06f 0210 	mvn.w	r2, #16
 800983c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2220      	movs	r2, #32
 8009848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e029      	b.n	80098bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009868:	f7fc fc48 	bl	80060fc <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	429a      	cmp	r2, r3
 8009876:	d302      	bcc.n	800987e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d116      	bne.n	80098ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2220      	movs	r2, #32
 8009888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009898:	f043 0220 	orr.w	r2, r3, #32
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	e007      	b.n	80098bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	695b      	ldr	r3, [r3, #20]
 80098b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b6:	2b40      	cmp	r3, #64	; 0x40
 80098b8:	d1b5      	bne.n	8009826 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098da:	d11b      	bne.n	8009914 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2220      	movs	r2, #32
 80098f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009900:	f043 0204 	orr.w	r2, r3, #4
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e000      	b.n	8009916 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009922:	b480      	push	{r7}
 8009924:	b083      	sub	sp, #12
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009932:	d103      	bne.n	800993c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800993a:	e007      	b.n	800994c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009940:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009944:	d102      	bne.n	800994c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2208      	movs	r2, #8
 800994a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e264      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	2b00      	cmp	r3, #0
 8009974:	d075      	beq.n	8009a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009976:	4ba3      	ldr	r3, [pc, #652]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f003 030c 	and.w	r3, r3, #12
 800997e:	2b04      	cmp	r3, #4
 8009980:	d00c      	beq.n	800999c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009982:	4ba0      	ldr	r3, [pc, #640]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800998a:	2b08      	cmp	r3, #8
 800998c:	d112      	bne.n	80099b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800998e:	4b9d      	ldr	r3, [pc, #628]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800999a:	d10b      	bne.n	80099b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800999c:	4b99      	ldr	r3, [pc, #612]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d05b      	beq.n	8009a60 <HAL_RCC_OscConfig+0x108>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d157      	bne.n	8009a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e23f      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099bc:	d106      	bne.n	80099cc <HAL_RCC_OscConfig+0x74>
 80099be:	4b91      	ldr	r3, [pc, #580]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a90      	ldr	r2, [pc, #576]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 80099c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099c8:	6013      	str	r3, [r2, #0]
 80099ca:	e01d      	b.n	8009a08 <HAL_RCC_OscConfig+0xb0>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099d4:	d10c      	bne.n	80099f0 <HAL_RCC_OscConfig+0x98>
 80099d6:	4b8b      	ldr	r3, [pc, #556]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a8a      	ldr	r2, [pc, #552]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 80099dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099e0:	6013      	str	r3, [r2, #0]
 80099e2:	4b88      	ldr	r3, [pc, #544]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a87      	ldr	r2, [pc, #540]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 80099e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099ec:	6013      	str	r3, [r2, #0]
 80099ee:	e00b      	b.n	8009a08 <HAL_RCC_OscConfig+0xb0>
 80099f0:	4b84      	ldr	r3, [pc, #528]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a83      	ldr	r2, [pc, #524]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 80099f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099fa:	6013      	str	r3, [r2, #0]
 80099fc:	4b81      	ldr	r3, [pc, #516]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a80      	ldr	r2, [pc, #512]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d013      	beq.n	8009a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a10:	f7fc fb74 	bl	80060fc <HAL_GetTick>
 8009a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a16:	e008      	b.n	8009a2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a18:	f7fc fb70 	bl	80060fc <HAL_GetTick>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	2b64      	cmp	r3, #100	; 0x64
 8009a24:	d901      	bls.n	8009a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e204      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a2a:	4b76      	ldr	r3, [pc, #472]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0f0      	beq.n	8009a18 <HAL_RCC_OscConfig+0xc0>
 8009a36:	e014      	b.n	8009a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a38:	f7fc fb60 	bl	80060fc <HAL_GetTick>
 8009a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a3e:	e008      	b.n	8009a52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a40:	f7fc fb5c 	bl	80060fc <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	2b64      	cmp	r3, #100	; 0x64
 8009a4c:	d901      	bls.n	8009a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e1f0      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a52:	4b6c      	ldr	r3, [pc, #432]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1f0      	bne.n	8009a40 <HAL_RCC_OscConfig+0xe8>
 8009a5e:	e000      	b.n	8009a62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0302 	and.w	r3, r3, #2
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d063      	beq.n	8009b36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a6e:	4b65      	ldr	r3, [pc, #404]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f003 030c 	and.w	r3, r3, #12
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00b      	beq.n	8009a92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a7a:	4b62      	ldr	r3, [pc, #392]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a82:	2b08      	cmp	r3, #8
 8009a84:	d11c      	bne.n	8009ac0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a86:	4b5f      	ldr	r3, [pc, #380]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d116      	bne.n	8009ac0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a92:	4b5c      	ldr	r3, [pc, #368]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0302 	and.w	r3, r3, #2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d005      	beq.n	8009aaa <HAL_RCC_OscConfig+0x152>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d001      	beq.n	8009aaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e1c4      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aaa:	4b56      	ldr	r3, [pc, #344]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	00db      	lsls	r3, r3, #3
 8009ab8:	4952      	ldr	r1, [pc, #328]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009abe:	e03a      	b.n	8009b36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d020      	beq.n	8009b0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ac8:	4b4f      	ldr	r3, [pc, #316]	; (8009c08 <HAL_RCC_OscConfig+0x2b0>)
 8009aca:	2201      	movs	r2, #1
 8009acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ace:	f7fc fb15 	bl	80060fc <HAL_GetTick>
 8009ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ad4:	e008      	b.n	8009ae8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ad6:	f7fc fb11 	bl	80060fc <HAL_GetTick>
 8009ada:	4602      	mov	r2, r0
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d901      	bls.n	8009ae8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e1a5      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ae8:	4b46      	ldr	r3, [pc, #280]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 0302 	and.w	r3, r3, #2
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d0f0      	beq.n	8009ad6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009af4:	4b43      	ldr	r3, [pc, #268]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	00db      	lsls	r3, r3, #3
 8009b02:	4940      	ldr	r1, [pc, #256]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	600b      	str	r3, [r1, #0]
 8009b08:	e015      	b.n	8009b36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b0a:	4b3f      	ldr	r3, [pc, #252]	; (8009c08 <HAL_RCC_OscConfig+0x2b0>)
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b10:	f7fc faf4 	bl	80060fc <HAL_GetTick>
 8009b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b16:	e008      	b.n	8009b2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b18:	f7fc faf0 	bl	80060fc <HAL_GetTick>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d901      	bls.n	8009b2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e184      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b2a:	4b36      	ldr	r3, [pc, #216]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 0302 	and.w	r3, r3, #2
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1f0      	bne.n	8009b18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 0308 	and.w	r3, r3, #8
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d030      	beq.n	8009ba4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d016      	beq.n	8009b78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b4a:	4b30      	ldr	r3, [pc, #192]	; (8009c0c <HAL_RCC_OscConfig+0x2b4>)
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b50:	f7fc fad4 	bl	80060fc <HAL_GetTick>
 8009b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b58:	f7fc fad0 	bl	80060fc <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e164      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b6a:	4b26      	ldr	r3, [pc, #152]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b6e:	f003 0302 	and.w	r3, r3, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0f0      	beq.n	8009b58 <HAL_RCC_OscConfig+0x200>
 8009b76:	e015      	b.n	8009ba4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b78:	4b24      	ldr	r3, [pc, #144]	; (8009c0c <HAL_RCC_OscConfig+0x2b4>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b7e:	f7fc fabd 	bl	80060fc <HAL_GetTick>
 8009b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b84:	e008      	b.n	8009b98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b86:	f7fc fab9 	bl	80060fc <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d901      	bls.n	8009b98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e14d      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b98:	4b1a      	ldr	r3, [pc, #104]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b9c:	f003 0302 	and.w	r3, r3, #2
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1f0      	bne.n	8009b86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 0304 	and.w	r3, r3, #4
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 80a0 	beq.w	8009cf2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bb6:	4b13      	ldr	r3, [pc, #76]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10f      	bne.n	8009be2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60bb      	str	r3, [r7, #8]
 8009bc6:	4b0f      	ldr	r3, [pc, #60]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bca:	4a0e      	ldr	r2, [pc, #56]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8009bd2:	4b0c      	ldr	r3, [pc, #48]	; (8009c04 <HAL_RCC_OscConfig+0x2ac>)
 8009bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bda:	60bb      	str	r3, [r7, #8]
 8009bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009bde:	2301      	movs	r3, #1
 8009be0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009be2:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <HAL_RCC_OscConfig+0x2b8>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d121      	bne.n	8009c32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009bee:	4b08      	ldr	r3, [pc, #32]	; (8009c10 <HAL_RCC_OscConfig+0x2b8>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a07      	ldr	r2, [pc, #28]	; (8009c10 <HAL_RCC_OscConfig+0x2b8>)
 8009bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bfa:	f7fc fa7f 	bl	80060fc <HAL_GetTick>
 8009bfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c00:	e011      	b.n	8009c26 <HAL_RCC_OscConfig+0x2ce>
 8009c02:	bf00      	nop
 8009c04:	40023800 	.word	0x40023800
 8009c08:	42470000 	.word	0x42470000
 8009c0c:	42470e80 	.word	0x42470e80
 8009c10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c14:	f7fc fa72 	bl	80060fc <HAL_GetTick>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d901      	bls.n	8009c26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e106      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c26:	4b85      	ldr	r3, [pc, #532]	; (8009e3c <HAL_RCC_OscConfig+0x4e4>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d0f0      	beq.n	8009c14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d106      	bne.n	8009c48 <HAL_RCC_OscConfig+0x2f0>
 8009c3a:	4b81      	ldr	r3, [pc, #516]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c3e:	4a80      	ldr	r2, [pc, #512]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009c40:	f043 0301 	orr.w	r3, r3, #1
 8009c44:	6713      	str	r3, [r2, #112]	; 0x70
 8009c46:	e01c      	b.n	8009c82 <HAL_RCC_OscConfig+0x32a>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	2b05      	cmp	r3, #5
 8009c4e:	d10c      	bne.n	8009c6a <HAL_RCC_OscConfig+0x312>
 8009c50:	4b7b      	ldr	r3, [pc, #492]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c54:	4a7a      	ldr	r2, [pc, #488]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009c56:	f043 0304 	orr.w	r3, r3, #4
 8009c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c5c:	4b78      	ldr	r3, [pc, #480]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c60:	4a77      	ldr	r2, [pc, #476]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009c62:	f043 0301 	orr.w	r3, r3, #1
 8009c66:	6713      	str	r3, [r2, #112]	; 0x70
 8009c68:	e00b      	b.n	8009c82 <HAL_RCC_OscConfig+0x32a>
 8009c6a:	4b75      	ldr	r3, [pc, #468]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c6e:	4a74      	ldr	r2, [pc, #464]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009c70:	f023 0301 	bic.w	r3, r3, #1
 8009c74:	6713      	str	r3, [r2, #112]	; 0x70
 8009c76:	4b72      	ldr	r3, [pc, #456]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7a:	4a71      	ldr	r2, [pc, #452]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009c7c:	f023 0304 	bic.w	r3, r3, #4
 8009c80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d015      	beq.n	8009cb6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c8a:	f7fc fa37 	bl	80060fc <HAL_GetTick>
 8009c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c90:	e00a      	b.n	8009ca8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c92:	f7fc fa33 	bl	80060fc <HAL_GetTick>
 8009c96:	4602      	mov	r2, r0
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d901      	bls.n	8009ca8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e0c5      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ca8:	4b65      	ldr	r3, [pc, #404]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cac:	f003 0302 	and.w	r3, r3, #2
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d0ee      	beq.n	8009c92 <HAL_RCC_OscConfig+0x33a>
 8009cb4:	e014      	b.n	8009ce0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009cb6:	f7fc fa21 	bl	80060fc <HAL_GetTick>
 8009cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009cbc:	e00a      	b.n	8009cd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009cbe:	f7fc fa1d 	bl	80060fc <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d901      	bls.n	8009cd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e0af      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009cd4:	4b5a      	ldr	r3, [pc, #360]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd8:	f003 0302 	and.w	r3, r3, #2
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1ee      	bne.n	8009cbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d105      	bne.n	8009cf2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ce6:	4b56      	ldr	r3, [pc, #344]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cea:	4a55      	ldr	r2, [pc, #340]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cf0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 809b 	beq.w	8009e32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009cfc:	4b50      	ldr	r3, [pc, #320]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	f003 030c 	and.w	r3, r3, #12
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d05c      	beq.n	8009dc2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d141      	bne.n	8009d94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d10:	4b4c      	ldr	r3, [pc, #304]	; (8009e44 <HAL_RCC_OscConfig+0x4ec>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d16:	f7fc f9f1 	bl	80060fc <HAL_GetTick>
 8009d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d1c:	e008      	b.n	8009d30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d1e:	f7fc f9ed 	bl	80060fc <HAL_GetTick>
 8009d22:	4602      	mov	r2, r0
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d901      	bls.n	8009d30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e081      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d30:	4b43      	ldr	r3, [pc, #268]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1f0      	bne.n	8009d1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	69da      	ldr	r2, [r3, #28]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a1b      	ldr	r3, [r3, #32]
 8009d44:	431a      	orrs	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4a:	019b      	lsls	r3, r3, #6
 8009d4c:	431a      	orrs	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d52:	085b      	lsrs	r3, r3, #1
 8009d54:	3b01      	subs	r3, #1
 8009d56:	041b      	lsls	r3, r3, #16
 8009d58:	431a      	orrs	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5e:	061b      	lsls	r3, r3, #24
 8009d60:	4937      	ldr	r1, [pc, #220]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009d62:	4313      	orrs	r3, r2
 8009d64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d66:	4b37      	ldr	r3, [pc, #220]	; (8009e44 <HAL_RCC_OscConfig+0x4ec>)
 8009d68:	2201      	movs	r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d6c:	f7fc f9c6 	bl	80060fc <HAL_GetTick>
 8009d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d72:	e008      	b.n	8009d86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d74:	f7fc f9c2 	bl	80060fc <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d901      	bls.n	8009d86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	e056      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d86:	4b2e      	ldr	r3, [pc, #184]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d0f0      	beq.n	8009d74 <HAL_RCC_OscConfig+0x41c>
 8009d92:	e04e      	b.n	8009e32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d94:	4b2b      	ldr	r3, [pc, #172]	; (8009e44 <HAL_RCC_OscConfig+0x4ec>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d9a:	f7fc f9af 	bl	80060fc <HAL_GetTick>
 8009d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009da0:	e008      	b.n	8009db4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009da2:	f7fc f9ab 	bl	80060fc <HAL_GetTick>
 8009da6:	4602      	mov	r2, r0
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d901      	bls.n	8009db4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e03f      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009db4:	4b22      	ldr	r3, [pc, #136]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1f0      	bne.n	8009da2 <HAL_RCC_OscConfig+0x44a>
 8009dc0:	e037      	b.n	8009e32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d101      	bne.n	8009dce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e032      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009dce:	4b1c      	ldr	r3, [pc, #112]	; (8009e40 <HAL_RCC_OscConfig+0x4e8>)
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d028      	beq.n	8009e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d121      	bne.n	8009e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d11a      	bne.n	8009e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009dfe:	4013      	ands	r3, r2
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009e04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d111      	bne.n	8009e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e14:	085b      	lsrs	r3, r3, #1
 8009e16:	3b01      	subs	r3, #1
 8009e18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d107      	bne.n	8009e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d001      	beq.n	8009e32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e000      	b.n	8009e34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	40007000 	.word	0x40007000
 8009e40:	40023800 	.word	0x40023800
 8009e44:	42470060 	.word	0x42470060

08009e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e0cc      	b.n	8009ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e5c:	4b68      	ldr	r3, [pc, #416]	; (800a000 <HAL_RCC_ClockConfig+0x1b8>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 0307 	and.w	r3, r3, #7
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d90c      	bls.n	8009e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e6a:	4b65      	ldr	r3, [pc, #404]	; (800a000 <HAL_RCC_ClockConfig+0x1b8>)
 8009e6c:	683a      	ldr	r2, [r7, #0]
 8009e6e:	b2d2      	uxtb	r2, r2
 8009e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e72:	4b63      	ldr	r3, [pc, #396]	; (800a000 <HAL_RCC_ClockConfig+0x1b8>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 0307 	and.w	r3, r3, #7
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d001      	beq.n	8009e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e0b8      	b.n	8009ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0302 	and.w	r3, r3, #2
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d020      	beq.n	8009ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 0304 	and.w	r3, r3, #4
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d005      	beq.n	8009ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e9c:	4b59      	ldr	r3, [pc, #356]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	4a58      	ldr	r2, [pc, #352]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 0308 	and.w	r3, r3, #8
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d005      	beq.n	8009ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009eb4:	4b53      	ldr	r3, [pc, #332]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	4a52      	ldr	r2, [pc, #328]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ec0:	4b50      	ldr	r3, [pc, #320]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	494d      	ldr	r1, [pc, #308]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d044      	beq.n	8009f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d107      	bne.n	8009ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ee6:	4b47      	ldr	r3, [pc, #284]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d119      	bne.n	8009f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e07f      	b.n	8009ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d003      	beq.n	8009f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f02:	2b03      	cmp	r3, #3
 8009f04:	d107      	bne.n	8009f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f06:	4b3f      	ldr	r3, [pc, #252]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d109      	bne.n	8009f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e06f      	b.n	8009ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f16:	4b3b      	ldr	r3, [pc, #236]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0302 	and.w	r3, r3, #2
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e067      	b.n	8009ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f26:	4b37      	ldr	r3, [pc, #220]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	f023 0203 	bic.w	r2, r3, #3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	4934      	ldr	r1, [pc, #208]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009f34:	4313      	orrs	r3, r2
 8009f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009f38:	f7fc f8e0 	bl	80060fc <HAL_GetTick>
 8009f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f3e:	e00a      	b.n	8009f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f40:	f7fc f8dc 	bl	80060fc <HAL_GetTick>
 8009f44:	4602      	mov	r2, r0
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d901      	bls.n	8009f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009f52:	2303      	movs	r3, #3
 8009f54:	e04f      	b.n	8009ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f56:	4b2b      	ldr	r3, [pc, #172]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	f003 020c 	and.w	r2, r3, #12
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d1eb      	bne.n	8009f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f68:	4b25      	ldr	r3, [pc, #148]	; (800a000 <HAL_RCC_ClockConfig+0x1b8>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0307 	and.w	r3, r3, #7
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d20c      	bcs.n	8009f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f76:	4b22      	ldr	r3, [pc, #136]	; (800a000 <HAL_RCC_ClockConfig+0x1b8>)
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	b2d2      	uxtb	r2, r2
 8009f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f7e:	4b20      	ldr	r3, [pc, #128]	; (800a000 <HAL_RCC_ClockConfig+0x1b8>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 0307 	and.w	r3, r3, #7
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d001      	beq.n	8009f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e032      	b.n	8009ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 0304 	and.w	r3, r3, #4
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d008      	beq.n	8009fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f9c:	4b19      	ldr	r3, [pc, #100]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	4916      	ldr	r1, [pc, #88]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 0308 	and.w	r3, r3, #8
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d009      	beq.n	8009fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009fba:	4b12      	ldr	r3, [pc, #72]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	00db      	lsls	r3, r3, #3
 8009fc8:	490e      	ldr	r1, [pc, #56]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009fce:	f000 f821 	bl	800a014 <HAL_RCC_GetSysClockFreq>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	4b0b      	ldr	r3, [pc, #44]	; (800a004 <HAL_RCC_ClockConfig+0x1bc>)
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	091b      	lsrs	r3, r3, #4
 8009fda:	f003 030f 	and.w	r3, r3, #15
 8009fde:	490a      	ldr	r1, [pc, #40]	; (800a008 <HAL_RCC_ClockConfig+0x1c0>)
 8009fe0:	5ccb      	ldrb	r3, [r1, r3]
 8009fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fe6:	4a09      	ldr	r2, [pc, #36]	; (800a00c <HAL_RCC_ClockConfig+0x1c4>)
 8009fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009fea:	4b09      	ldr	r3, [pc, #36]	; (800a010 <HAL_RCC_ClockConfig+0x1c8>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fc f840 	bl	8006074 <HAL_InitTick>

  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	40023c00 	.word	0x40023c00
 800a004:	40023800 	.word	0x40023800
 800a008:	080241bc 	.word	0x080241bc
 800a00c:	20000034 	.word	0x20000034
 800a010:	20000038 	.word	0x20000038

0800a014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a014:	b5b0      	push	{r4, r5, r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a01a:	2100      	movs	r1, #0
 800a01c:	6079      	str	r1, [r7, #4]
 800a01e:	2100      	movs	r1, #0
 800a020:	60f9      	str	r1, [r7, #12]
 800a022:	2100      	movs	r1, #0
 800a024:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a026:	2100      	movs	r1, #0
 800a028:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a02a:	4952      	ldr	r1, [pc, #328]	; (800a174 <HAL_RCC_GetSysClockFreq+0x160>)
 800a02c:	6889      	ldr	r1, [r1, #8]
 800a02e:	f001 010c 	and.w	r1, r1, #12
 800a032:	2908      	cmp	r1, #8
 800a034:	d00d      	beq.n	800a052 <HAL_RCC_GetSysClockFreq+0x3e>
 800a036:	2908      	cmp	r1, #8
 800a038:	f200 8094 	bhi.w	800a164 <HAL_RCC_GetSysClockFreq+0x150>
 800a03c:	2900      	cmp	r1, #0
 800a03e:	d002      	beq.n	800a046 <HAL_RCC_GetSysClockFreq+0x32>
 800a040:	2904      	cmp	r1, #4
 800a042:	d003      	beq.n	800a04c <HAL_RCC_GetSysClockFreq+0x38>
 800a044:	e08e      	b.n	800a164 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a046:	4b4c      	ldr	r3, [pc, #304]	; (800a178 <HAL_RCC_GetSysClockFreq+0x164>)
 800a048:	60bb      	str	r3, [r7, #8]
       break;
 800a04a:	e08e      	b.n	800a16a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a04c:	4b4b      	ldr	r3, [pc, #300]	; (800a17c <HAL_RCC_GetSysClockFreq+0x168>)
 800a04e:	60bb      	str	r3, [r7, #8]
      break;
 800a050:	e08b      	b.n	800a16a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a052:	4948      	ldr	r1, [pc, #288]	; (800a174 <HAL_RCC_GetSysClockFreq+0x160>)
 800a054:	6849      	ldr	r1, [r1, #4]
 800a056:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800a05a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a05c:	4945      	ldr	r1, [pc, #276]	; (800a174 <HAL_RCC_GetSysClockFreq+0x160>)
 800a05e:	6849      	ldr	r1, [r1, #4]
 800a060:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800a064:	2900      	cmp	r1, #0
 800a066:	d024      	beq.n	800a0b2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a068:	4942      	ldr	r1, [pc, #264]	; (800a174 <HAL_RCC_GetSysClockFreq+0x160>)
 800a06a:	6849      	ldr	r1, [r1, #4]
 800a06c:	0989      	lsrs	r1, r1, #6
 800a06e:	4608      	mov	r0, r1
 800a070:	f04f 0100 	mov.w	r1, #0
 800a074:	f240 14ff 	movw	r4, #511	; 0x1ff
 800a078:	f04f 0500 	mov.w	r5, #0
 800a07c:	ea00 0204 	and.w	r2, r0, r4
 800a080:	ea01 0305 	and.w	r3, r1, r5
 800a084:	493d      	ldr	r1, [pc, #244]	; (800a17c <HAL_RCC_GetSysClockFreq+0x168>)
 800a086:	fb01 f003 	mul.w	r0, r1, r3
 800a08a:	2100      	movs	r1, #0
 800a08c:	fb01 f102 	mul.w	r1, r1, r2
 800a090:	1844      	adds	r4, r0, r1
 800a092:	493a      	ldr	r1, [pc, #232]	; (800a17c <HAL_RCC_GetSysClockFreq+0x168>)
 800a094:	fba2 0101 	umull	r0, r1, r2, r1
 800a098:	1863      	adds	r3, r4, r1
 800a09a:	4619      	mov	r1, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	f04f 0300 	mov.w	r3, #0
 800a0a4:	f7f6 fe08 	bl	8000cb8 <__aeabi_uldivmod>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]
 800a0b0:	e04a      	b.n	800a148 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0b2:	4b30      	ldr	r3, [pc, #192]	; (800a174 <HAL_RCC_GetSysClockFreq+0x160>)
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	099b      	lsrs	r3, r3, #6
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	f04f 0300 	mov.w	r3, #0
 800a0be:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a0c2:	f04f 0100 	mov.w	r1, #0
 800a0c6:	ea02 0400 	and.w	r4, r2, r0
 800a0ca:	ea03 0501 	and.w	r5, r3, r1
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	f04f 0200 	mov.w	r2, #0
 800a0d6:	f04f 0300 	mov.w	r3, #0
 800a0da:	014b      	lsls	r3, r1, #5
 800a0dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a0e0:	0142      	lsls	r2, r0, #5
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	1b00      	subs	r0, r0, r4
 800a0e8:	eb61 0105 	sbc.w	r1, r1, r5
 800a0ec:	f04f 0200 	mov.w	r2, #0
 800a0f0:	f04f 0300 	mov.w	r3, #0
 800a0f4:	018b      	lsls	r3, r1, #6
 800a0f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a0fa:	0182      	lsls	r2, r0, #6
 800a0fc:	1a12      	subs	r2, r2, r0
 800a0fe:	eb63 0301 	sbc.w	r3, r3, r1
 800a102:	f04f 0000 	mov.w	r0, #0
 800a106:	f04f 0100 	mov.w	r1, #0
 800a10a:	00d9      	lsls	r1, r3, #3
 800a10c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a110:	00d0      	lsls	r0, r2, #3
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	1912      	adds	r2, r2, r4
 800a118:	eb45 0303 	adc.w	r3, r5, r3
 800a11c:	f04f 0000 	mov.w	r0, #0
 800a120:	f04f 0100 	mov.w	r1, #0
 800a124:	0299      	lsls	r1, r3, #10
 800a126:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a12a:	0290      	lsls	r0, r2, #10
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	4610      	mov	r0, r2
 800a132:	4619      	mov	r1, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	461a      	mov	r2, r3
 800a138:	f04f 0300 	mov.w	r3, #0
 800a13c:	f7f6 fdbc 	bl	8000cb8 <__aeabi_uldivmod>
 800a140:	4602      	mov	r2, r0
 800a142:	460b      	mov	r3, r1
 800a144:	4613      	mov	r3, r2
 800a146:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a148:	4b0a      	ldr	r3, [pc, #40]	; (800a174 <HAL_RCC_GetSysClockFreq+0x160>)
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	0c1b      	lsrs	r3, r3, #16
 800a14e:	f003 0303 	and.w	r3, r3, #3
 800a152:	3301      	adds	r3, #1
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a160:	60bb      	str	r3, [r7, #8]
      break;
 800a162:	e002      	b.n	800a16a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a164:	4b04      	ldr	r3, [pc, #16]	; (800a178 <HAL_RCC_GetSysClockFreq+0x164>)
 800a166:	60bb      	str	r3, [r7, #8]
      break;
 800a168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a16a:	68bb      	ldr	r3, [r7, #8]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bdb0      	pop	{r4, r5, r7, pc}
 800a174:	40023800 	.word	0x40023800
 800a178:	00f42400 	.word	0x00f42400
 800a17c:	017d7840 	.word	0x017d7840

0800a180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a180:	b480      	push	{r7}
 800a182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a184:	4b03      	ldr	r3, [pc, #12]	; (800a194 <HAL_RCC_GetHCLKFreq+0x14>)
 800a186:	681b      	ldr	r3, [r3, #0]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	20000034 	.word	0x20000034

0800a198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a19c:	f7ff fff0 	bl	800a180 <HAL_RCC_GetHCLKFreq>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	0a9b      	lsrs	r3, r3, #10
 800a1a8:	f003 0307 	and.w	r3, r3, #7
 800a1ac:	4903      	ldr	r1, [pc, #12]	; (800a1bc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1ae:	5ccb      	ldrb	r3, [r1, r3]
 800a1b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	40023800 	.word	0x40023800
 800a1bc:	080241cc 	.word	0x080241cc

0800a1c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a1c4:	f7ff ffdc 	bl	800a180 <HAL_RCC_GetHCLKFreq>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	4b05      	ldr	r3, [pc, #20]	; (800a1e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	0b5b      	lsrs	r3, r3, #13
 800a1d0:	f003 0307 	and.w	r3, r3, #7
 800a1d4:	4903      	ldr	r1, [pc, #12]	; (800a1e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a1d6:	5ccb      	ldrb	r3, [r1, r3]
 800a1d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	40023800 	.word	0x40023800
 800a1e4:	080241cc 	.word	0x080241cc

0800a1e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e07b      	b.n	800a2f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d108      	bne.n	800a214 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a20a:	d009      	beq.n	800a220 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	61da      	str	r2, [r3, #28]
 800a212:	e005      	b.n	800a220 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d106      	bne.n	800a240 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7fb f9a8 	bl	8005590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2202      	movs	r2, #2
 800a244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a256:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a268:	431a      	orrs	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a272:	431a      	orrs	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	f003 0302 	and.w	r3, r3, #2
 800a27c:	431a      	orrs	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	f003 0301 	and.w	r3, r3, #1
 800a286:	431a      	orrs	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a290:	431a      	orrs	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a29a:	431a      	orrs	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a1b      	ldr	r3, [r3, #32]
 800a2a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2a4:	ea42 0103 	orr.w	r1, r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	430a      	orrs	r2, r1
 800a2b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	0c1b      	lsrs	r3, r3, #16
 800a2be:	f003 0104 	and.w	r1, r3, #4
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c6:	f003 0210 	and.w	r2, r3, #16
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	430a      	orrs	r2, r1
 800a2d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	69da      	ldr	r2, [r3, #28]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b08c      	sub	sp, #48	; 0x30
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	60f8      	str	r0, [r7, #12]
 800a302:	60b9      	str	r1, [r7, #8]
 800a304:	607a      	str	r2, [r7, #4]
 800a306:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a308:	2301      	movs	r3, #1
 800a30a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d101      	bne.n	800a320 <HAL_SPI_TransmitReceive+0x26>
 800a31c:	2302      	movs	r3, #2
 800a31e:	e18a      	b.n	800a636 <HAL_SPI_TransmitReceive+0x33c>
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a328:	f7fb fee8 	bl	80060fc <HAL_GetTick>
 800a32c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a33e:	887b      	ldrh	r3, [r7, #2]
 800a340:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a346:	2b01      	cmp	r3, #1
 800a348:	d00f      	beq.n	800a36a <HAL_SPI_TransmitReceive+0x70>
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a350:	d107      	bne.n	800a362 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d103      	bne.n	800a362 <HAL_SPI_TransmitReceive+0x68>
 800a35a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a35e:	2b04      	cmp	r3, #4
 800a360:	d003      	beq.n	800a36a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a362:	2302      	movs	r3, #2
 800a364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a368:	e15b      	b.n	800a622 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d005      	beq.n	800a37c <HAL_SPI_TransmitReceive+0x82>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d002      	beq.n	800a37c <HAL_SPI_TransmitReceive+0x82>
 800a376:	887b      	ldrh	r3, [r7, #2]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d103      	bne.n	800a384 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a382:	e14e      	b.n	800a622 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	d003      	beq.n	800a398 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2205      	movs	r2, #5
 800a394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	887a      	ldrh	r2, [r7, #2]
 800a3a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	887a      	ldrh	r2, [r7, #2]
 800a3ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	887a      	ldrh	r2, [r7, #2]
 800a3ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	887a      	ldrh	r2, [r7, #2]
 800a3c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d8:	2b40      	cmp	r3, #64	; 0x40
 800a3da:	d007      	beq.n	800a3ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3f4:	d178      	bne.n	800a4e8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <HAL_SPI_TransmitReceive+0x10a>
 800a3fe:	8b7b      	ldrh	r3, [r7, #26]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d166      	bne.n	800a4d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a408:	881a      	ldrh	r2, [r3, #0]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a414:	1c9a      	adds	r2, r3, #2
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a41e:	b29b      	uxth	r3, r3
 800a420:	3b01      	subs	r3, #1
 800a422:	b29a      	uxth	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a428:	e053      	b.n	800a4d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	f003 0302 	and.w	r3, r3, #2
 800a434:	2b02      	cmp	r3, #2
 800a436:	d11b      	bne.n	800a470 <HAL_SPI_TransmitReceive+0x176>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d016      	beq.n	800a470 <HAL_SPI_TransmitReceive+0x176>
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	2b01      	cmp	r3, #1
 800a446:	d113      	bne.n	800a470 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44c:	881a      	ldrh	r2, [r3, #0]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a458:	1c9a      	adds	r2, r3, #2
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a462:	b29b      	uxth	r3, r3
 800a464:	3b01      	subs	r3, #1
 800a466:	b29a      	uxth	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d119      	bne.n	800a4b2 <HAL_SPI_TransmitReceive+0x1b8>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a482:	b29b      	uxth	r3, r3
 800a484:	2b00      	cmp	r3, #0
 800a486:	d014      	beq.n	800a4b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68da      	ldr	r2, [r3, #12]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a492:	b292      	uxth	r2, r2
 800a494:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49a:	1c9a      	adds	r2, r3, #2
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a4b2:	f7fb fe23 	bl	80060fc <HAL_GetTick>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d807      	bhi.n	800a4d2 <HAL_SPI_TransmitReceive+0x1d8>
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c8:	d003      	beq.n	800a4d2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a4d0:	e0a7      	b.n	800a622 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1a6      	bne.n	800a42a <HAL_SPI_TransmitReceive+0x130>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1a1      	bne.n	800a42a <HAL_SPI_TransmitReceive+0x130>
 800a4e6:	e07c      	b.n	800a5e2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <HAL_SPI_TransmitReceive+0x1fc>
 800a4f0:	8b7b      	ldrh	r3, [r7, #26]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d16b      	bne.n	800a5ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	330c      	adds	r3, #12
 800a500:	7812      	ldrb	r2, [r2, #0]
 800a502:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a512:	b29b      	uxth	r3, r3
 800a514:	3b01      	subs	r3, #1
 800a516:	b29a      	uxth	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a51c:	e057      	b.n	800a5ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	f003 0302 	and.w	r3, r3, #2
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d11c      	bne.n	800a566 <HAL_SPI_TransmitReceive+0x26c>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a530:	b29b      	uxth	r3, r3
 800a532:	2b00      	cmp	r3, #0
 800a534:	d017      	beq.n	800a566 <HAL_SPI_TransmitReceive+0x26c>
 800a536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d114      	bne.n	800a566 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	330c      	adds	r3, #12
 800a546:	7812      	ldrb	r2, [r2, #0]
 800a548:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54e:	1c5a      	adds	r2, r3, #1
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a558:	b29b      	uxth	r3, r3
 800a55a:	3b01      	subs	r3, #1
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a562:	2300      	movs	r3, #0
 800a564:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	f003 0301 	and.w	r3, r3, #1
 800a570:	2b01      	cmp	r3, #1
 800a572:	d119      	bne.n	800a5a8 <HAL_SPI_TransmitReceive+0x2ae>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a578:	b29b      	uxth	r3, r3
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d014      	beq.n	800a5a8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68da      	ldr	r2, [r3, #12]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a588:	b2d2      	uxtb	r2, r2
 800a58a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	3b01      	subs	r3, #1
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a5a8:	f7fb fda8 	bl	80060fc <HAL_GetTick>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d803      	bhi.n	800a5c0 <HAL_SPI_TransmitReceive+0x2c6>
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5be:	d102      	bne.n	800a5c6 <HAL_SPI_TransmitReceive+0x2cc>
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d103      	bne.n	800a5ce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a5cc:	e029      	b.n	800a622 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1a2      	bne.n	800a51e <HAL_SPI_TransmitReceive+0x224>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d19d      	bne.n	800a51e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a5e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f000 f9d0 	bl	800a98c <SPI_EndRxTxTransaction>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d006      	beq.n	800a600 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a5fe:	e010      	b.n	800a622 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10b      	bne.n	800a620 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a608:	2300      	movs	r3, #0
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	617b      	str	r3, [r7, #20]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	617b      	str	r3, [r7, #20]
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	e000      	b.n	800a622 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a620:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a632:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a636:	4618      	mov	r0, r3
 800a638:	3730      	adds	r7, #48	; 0x30
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b088      	sub	sp, #32
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	099b      	lsrs	r3, r3, #6
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10f      	bne.n	800a684 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00a      	beq.n	800a684 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	099b      	lsrs	r3, r3, #6
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	d004      	beq.n	800a684 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	4798      	blx	r3
    return;
 800a682:	e0d7      	b.n	800a834 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	085b      	lsrs	r3, r3, #1
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00a      	beq.n	800a6a6 <HAL_SPI_IRQHandler+0x66>
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	09db      	lsrs	r3, r3, #7
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d004      	beq.n	800a6a6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	4798      	blx	r3
    return;
 800a6a4:	e0c6      	b.n	800a834 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	095b      	lsrs	r3, r3, #5
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10c      	bne.n	800a6cc <HAL_SPI_IRQHandler+0x8c>
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	099b      	lsrs	r3, r3, #6
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d106      	bne.n	800a6cc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	0a1b      	lsrs	r3, r3, #8
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f000 80b4 	beq.w	800a834 <HAL_SPI_IRQHandler+0x1f4>
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	095b      	lsrs	r3, r3, #5
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f000 80ad 	beq.w	800a834 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	099b      	lsrs	r3, r3, #6
 800a6de:	f003 0301 	and.w	r3, r3, #1
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d023      	beq.n	800a72e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	d011      	beq.n	800a716 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6f6:	f043 0204 	orr.w	r2, r3, #4
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6fe:	2300      	movs	r3, #0
 800a700:	617b      	str	r3, [r7, #20]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	617b      	str	r3, [r7, #20]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	617b      	str	r3, [r7, #20]
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	e00b      	b.n	800a72e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a716:	2300      	movs	r3, #0
 800a718:	613b      	str	r3, [r7, #16]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	613b      	str	r3, [r7, #16]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	613b      	str	r3, [r7, #16]
 800a72a:	693b      	ldr	r3, [r7, #16]
        return;
 800a72c:	e082      	b.n	800a834 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	095b      	lsrs	r3, r3, #5
 800a732:	f003 0301 	and.w	r3, r3, #1
 800a736:	2b00      	cmp	r3, #0
 800a738:	d014      	beq.n	800a764 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a73e:	f043 0201 	orr.w	r2, r3, #1
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a746:	2300      	movs	r3, #0
 800a748:	60fb      	str	r3, [r7, #12]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	60fb      	str	r3, [r7, #12]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a760:	601a      	str	r2, [r3, #0]
 800a762:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	0a1b      	lsrs	r3, r3, #8
 800a768:	f003 0301 	and.w	r3, r3, #1
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00c      	beq.n	800a78a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a774:	f043 0208 	orr.w	r2, r3, #8
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a77c:	2300      	movs	r3, #0
 800a77e:	60bb      	str	r3, [r7, #8]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	60bb      	str	r3, [r7, #8]
 800a788:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d04f      	beq.n	800a832 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	685a      	ldr	r2, [r3, #4]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a7a0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	f003 0302 	and.w	r3, r3, #2
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d104      	bne.n	800a7be <HAL_SPI_IRQHandler+0x17e>
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d034      	beq.n	800a828 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f022 0203 	bic.w	r2, r2, #3
 800a7cc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d011      	beq.n	800a7fa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7da:	4a18      	ldr	r2, [pc, #96]	; (800a83c <HAL_SPI_IRQHandler+0x1fc>)
 800a7dc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fb ffd0 	bl	8006788 <HAL_DMA_Abort_IT>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d005      	beq.n	800a7fa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d016      	beq.n	800a830 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a806:	4a0d      	ldr	r2, [pc, #52]	; (800a83c <HAL_SPI_IRQHandler+0x1fc>)
 800a808:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fb ffba 	bl	8006788 <HAL_DMA_Abort_IT>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a81e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a826:	e003      	b.n	800a830 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f809 	bl	800a840 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a82e:	e000      	b.n	800a832 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a830:	bf00      	nop
    return;
 800a832:	bf00      	nop
  }
}
 800a834:	3720      	adds	r7, #32
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	0800a855 	.word	0x0800a855

0800a840 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a848:	bf00      	nop
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a860:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f7ff ffe6 	bl	800a840 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a874:	bf00      	nop
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b088      	sub	sp, #32
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	603b      	str	r3, [r7, #0]
 800a888:	4613      	mov	r3, r2
 800a88a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a88c:	f7fb fc36 	bl	80060fc <HAL_GetTick>
 800a890:	4602      	mov	r2, r0
 800a892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a894:	1a9b      	subs	r3, r3, r2
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	4413      	add	r3, r2
 800a89a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a89c:	f7fb fc2e 	bl	80060fc <HAL_GetTick>
 800a8a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a8a2:	4b39      	ldr	r3, [pc, #228]	; (800a988 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	015b      	lsls	r3, r3, #5
 800a8a8:	0d1b      	lsrs	r3, r3, #20
 800a8aa:	69fa      	ldr	r2, [r7, #28]
 800a8ac:	fb02 f303 	mul.w	r3, r2, r3
 800a8b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a8b2:	e054      	b.n	800a95e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ba:	d050      	beq.n	800a95e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a8bc:	f7fb fc1e 	bl	80060fc <HAL_GetTick>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	69fa      	ldr	r2, [r7, #28]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d902      	bls.n	800a8d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d13d      	bne.n	800a94e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	685a      	ldr	r2, [r3, #4]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a8e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8ea:	d111      	bne.n	800a910 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8f4:	d004      	beq.n	800a900 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8fe:	d107      	bne.n	800a910 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a90e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a918:	d10f      	bne.n	800a93a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2200      	movs	r2, #0
 800a946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a94a:	2303      	movs	r3, #3
 800a94c:	e017      	b.n	800a97e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a954:	2300      	movs	r3, #0
 800a956:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	3b01      	subs	r3, #1
 800a95c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	689a      	ldr	r2, [r3, #8]
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	4013      	ands	r3, r2
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	bf0c      	ite	eq
 800a96e:	2301      	moveq	r3, #1
 800a970:	2300      	movne	r3, #0
 800a972:	b2db      	uxtb	r3, r3
 800a974:	461a      	mov	r2, r3
 800a976:	79fb      	ldrb	r3, [r7, #7]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d19b      	bne.n	800a8b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3720      	adds	r7, #32
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	20000034 	.word	0x20000034

0800a98c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b088      	sub	sp, #32
 800a990:	af02      	add	r7, sp, #8
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a998:	4b1b      	ldr	r3, [pc, #108]	; (800aa08 <SPI_EndRxTxTransaction+0x7c>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a1b      	ldr	r2, [pc, #108]	; (800aa0c <SPI_EndRxTxTransaction+0x80>)
 800a99e:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a2:	0d5b      	lsrs	r3, r3, #21
 800a9a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a9a8:	fb02 f303 	mul.w	r3, r2, r3
 800a9ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9b6:	d112      	bne.n	800a9de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	2180      	movs	r1, #128	; 0x80
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f7ff ff5a 	bl	800a87c <SPI_WaitFlagStateUntilTimeout>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d016      	beq.n	800a9fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9d2:	f043 0220 	orr.w	r2, r3, #32
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	e00f      	b.n	800a9fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00a      	beq.n	800a9fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9f4:	2b80      	cmp	r3, #128	; 0x80
 800a9f6:	d0f2      	beq.n	800a9de <SPI_EndRxTxTransaction+0x52>
 800a9f8:	e000      	b.n	800a9fc <SPI_EndRxTxTransaction+0x70>
        break;
 800a9fa:	bf00      	nop
  }

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	20000034 	.word	0x20000034
 800aa0c:	165e9f81 	.word	0x165e9f81

0800aa10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d101      	bne.n	800aa22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e041      	b.n	800aaa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d106      	bne.n	800aa3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7fb f814 	bl	8005a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2202      	movs	r2, #2
 800aa40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	3304      	adds	r3, #4
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	4610      	mov	r0, r2
 800aa50:	f000 f9f0 	bl	800ae34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
	...

0800aab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d001      	beq.n	800aac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	e044      	b.n	800ab52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2202      	movs	r2, #2
 800aacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68da      	ldr	r2, [r3, #12]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f042 0201 	orr.w	r2, r2, #1
 800aade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a1e      	ldr	r2, [pc, #120]	; (800ab60 <HAL_TIM_Base_Start_IT+0xb0>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d018      	beq.n	800ab1c <HAL_TIM_Base_Start_IT+0x6c>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaf2:	d013      	beq.n	800ab1c <HAL_TIM_Base_Start_IT+0x6c>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a1a      	ldr	r2, [pc, #104]	; (800ab64 <HAL_TIM_Base_Start_IT+0xb4>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d00e      	beq.n	800ab1c <HAL_TIM_Base_Start_IT+0x6c>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a19      	ldr	r2, [pc, #100]	; (800ab68 <HAL_TIM_Base_Start_IT+0xb8>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d009      	beq.n	800ab1c <HAL_TIM_Base_Start_IT+0x6c>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a17      	ldr	r2, [pc, #92]	; (800ab6c <HAL_TIM_Base_Start_IT+0xbc>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d004      	beq.n	800ab1c <HAL_TIM_Base_Start_IT+0x6c>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a16      	ldr	r2, [pc, #88]	; (800ab70 <HAL_TIM_Base_Start_IT+0xc0>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d111      	bne.n	800ab40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f003 0307 	and.w	r3, r3, #7
 800ab26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2b06      	cmp	r3, #6
 800ab2c:	d010      	beq.n	800ab50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f042 0201 	orr.w	r2, r2, #1
 800ab3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab3e:	e007      	b.n	800ab50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f042 0201 	orr.w	r2, r2, #1
 800ab4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3714      	adds	r7, #20
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	40010000 	.word	0x40010000
 800ab64:	40000400 	.word	0x40000400
 800ab68:	40000800 	.word	0x40000800
 800ab6c:	40000c00 	.word	0x40000c00
 800ab70:	40014000 	.word	0x40014000

0800ab74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	68da      	ldr	r2, [r3, #12]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f022 0201 	bic.w	r2, r2, #1
 800ab8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6a1a      	ldr	r2, [r3, #32]
 800ab92:	f241 1311 	movw	r3, #4369	; 0x1111
 800ab96:	4013      	ands	r3, r2
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10f      	bne.n	800abbc <HAL_TIM_Base_Stop_IT+0x48>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6a1a      	ldr	r2, [r3, #32]
 800aba2:	f240 4344 	movw	r3, #1092	; 0x444
 800aba6:	4013      	ands	r3, r2
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d107      	bne.n	800abbc <HAL_TIM_Base_Stop_IT+0x48>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f022 0201 	bic.w	r2, r2, #1
 800abba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b082      	sub	sp, #8
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	f003 0302 	and.w	r3, r3, #2
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d122      	bne.n	800ac2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	f003 0302 	and.w	r3, r3, #2
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d11b      	bne.n	800ac2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f06f 0202 	mvn.w	r2, #2
 800abfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	699b      	ldr	r3, [r3, #24]
 800ac0c:	f003 0303 	and.w	r3, r3, #3
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d003      	beq.n	800ac1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 f8ee 	bl	800adf6 <HAL_TIM_IC_CaptureCallback>
 800ac1a:	e005      	b.n	800ac28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f8e0 	bl	800ade2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f8f1 	bl	800ae0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	f003 0304 	and.w	r3, r3, #4
 800ac38:	2b04      	cmp	r3, #4
 800ac3a:	d122      	bne.n	800ac82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	f003 0304 	and.w	r3, r3, #4
 800ac46:	2b04      	cmp	r3, #4
 800ac48:	d11b      	bne.n	800ac82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f06f 0204 	mvn.w	r2, #4
 800ac52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2202      	movs	r2, #2
 800ac58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	699b      	ldr	r3, [r3, #24]
 800ac60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d003      	beq.n	800ac70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 f8c4 	bl	800adf6 <HAL_TIM_IC_CaptureCallback>
 800ac6e:	e005      	b.n	800ac7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 f8b6 	bl	800ade2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f8c7 	bl	800ae0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	f003 0308 	and.w	r3, r3, #8
 800ac8c:	2b08      	cmp	r3, #8
 800ac8e:	d122      	bne.n	800acd6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	f003 0308 	and.w	r3, r3, #8
 800ac9a:	2b08      	cmp	r3, #8
 800ac9c:	d11b      	bne.n	800acd6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f06f 0208 	mvn.w	r2, #8
 800aca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2204      	movs	r2, #4
 800acac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	69db      	ldr	r3, [r3, #28]
 800acb4:	f003 0303 	and.w	r3, r3, #3
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d003      	beq.n	800acc4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 f89a 	bl	800adf6 <HAL_TIM_IC_CaptureCallback>
 800acc2:	e005      	b.n	800acd0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f88c 	bl	800ade2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f89d 	bl	800ae0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	691b      	ldr	r3, [r3, #16]
 800acdc:	f003 0310 	and.w	r3, r3, #16
 800ace0:	2b10      	cmp	r3, #16
 800ace2:	d122      	bne.n	800ad2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	f003 0310 	and.w	r3, r3, #16
 800acee:	2b10      	cmp	r3, #16
 800acf0:	d11b      	bne.n	800ad2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f06f 0210 	mvn.w	r2, #16
 800acfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2208      	movs	r2, #8
 800ad00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	69db      	ldr	r3, [r3, #28]
 800ad08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f870 	bl	800adf6 <HAL_TIM_IC_CaptureCallback>
 800ad16:	e005      	b.n	800ad24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f862 	bl	800ade2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f873 	bl	800ae0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	f003 0301 	and.w	r3, r3, #1
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d10e      	bne.n	800ad56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d107      	bne.n	800ad56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f06f 0201 	mvn.w	r2, #1
 800ad4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7f9 f8c3 	bl	8003edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad60:	2b80      	cmp	r3, #128	; 0x80
 800ad62:	d10e      	bne.n	800ad82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad6e:	2b80      	cmp	r3, #128	; 0x80
 800ad70:	d107      	bne.n	800ad82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f8e3 	bl	800af48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8c:	2b40      	cmp	r3, #64	; 0x40
 800ad8e:	d10e      	bne.n	800adae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad9a:	2b40      	cmp	r3, #64	; 0x40
 800ad9c:	d107      	bne.n	800adae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ada6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 f838 	bl	800ae1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	f003 0320 	and.w	r3, r3, #32
 800adb8:	2b20      	cmp	r3, #32
 800adba:	d10e      	bne.n	800adda <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	f003 0320 	and.w	r3, r3, #32
 800adc6:	2b20      	cmp	r3, #32
 800adc8:	d107      	bne.n	800adda <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f06f 0220 	mvn.w	r2, #32
 800add2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 f8ad 	bl	800af34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800adda:	bf00      	nop
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ade2:	b480      	push	{r7}
 800ade4:	b083      	sub	sp, #12
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adea:	bf00      	nop
 800adec:	370c      	adds	r7, #12
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800adfe:	bf00      	nop
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae12:	bf00      	nop
 800ae14:	370c      	adds	r7, #12
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b083      	sub	sp, #12
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae26:	bf00      	nop
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
	...

0800ae34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a34      	ldr	r2, [pc, #208]	; (800af18 <TIM_Base_SetConfig+0xe4>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d00f      	beq.n	800ae6c <TIM_Base_SetConfig+0x38>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae52:	d00b      	beq.n	800ae6c <TIM_Base_SetConfig+0x38>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a31      	ldr	r2, [pc, #196]	; (800af1c <TIM_Base_SetConfig+0xe8>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d007      	beq.n	800ae6c <TIM_Base_SetConfig+0x38>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a30      	ldr	r2, [pc, #192]	; (800af20 <TIM_Base_SetConfig+0xec>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d003      	beq.n	800ae6c <TIM_Base_SetConfig+0x38>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a2f      	ldr	r2, [pc, #188]	; (800af24 <TIM_Base_SetConfig+0xf0>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d108      	bne.n	800ae7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a25      	ldr	r2, [pc, #148]	; (800af18 <TIM_Base_SetConfig+0xe4>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d01b      	beq.n	800aebe <TIM_Base_SetConfig+0x8a>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae8c:	d017      	beq.n	800aebe <TIM_Base_SetConfig+0x8a>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a22      	ldr	r2, [pc, #136]	; (800af1c <TIM_Base_SetConfig+0xe8>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d013      	beq.n	800aebe <TIM_Base_SetConfig+0x8a>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a21      	ldr	r2, [pc, #132]	; (800af20 <TIM_Base_SetConfig+0xec>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d00f      	beq.n	800aebe <TIM_Base_SetConfig+0x8a>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a20      	ldr	r2, [pc, #128]	; (800af24 <TIM_Base_SetConfig+0xf0>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d00b      	beq.n	800aebe <TIM_Base_SetConfig+0x8a>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a1f      	ldr	r2, [pc, #124]	; (800af28 <TIM_Base_SetConfig+0xf4>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d007      	beq.n	800aebe <TIM_Base_SetConfig+0x8a>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a1e      	ldr	r2, [pc, #120]	; (800af2c <TIM_Base_SetConfig+0xf8>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d003      	beq.n	800aebe <TIM_Base_SetConfig+0x8a>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a1d      	ldr	r2, [pc, #116]	; (800af30 <TIM_Base_SetConfig+0xfc>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d108      	bne.n	800aed0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	4313      	orrs	r3, r2
 800aece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a08      	ldr	r2, [pc, #32]	; (800af18 <TIM_Base_SetConfig+0xe4>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d103      	bne.n	800af04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	691a      	ldr	r2, [r3, #16]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	615a      	str	r2, [r3, #20]
}
 800af0a:	bf00      	nop
 800af0c:	3714      	adds	r7, #20
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	40010000 	.word	0x40010000
 800af1c:	40000400 	.word	0x40000400
 800af20:	40000800 	.word	0x40000800
 800af24:	40000c00 	.word	0x40000c00
 800af28:	40014000 	.word	0x40014000
 800af2c:	40014400 	.word	0x40014400
 800af30:	40014800 	.word	0x40014800

0800af34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d101      	bne.n	800af6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	e03f      	b.n	800afee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	d106      	bne.n	800af88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7fa ff7e 	bl	8005e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2224      	movs	r2, #36	; 0x24
 800af8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	68da      	ldr	r2, [r3, #12]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 ff53 	bl	800be4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	691a      	ldr	r2, [r3, #16]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800afb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	695a      	ldr	r2, [r3, #20]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800afc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	68da      	ldr	r2, [r3, #12]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800afd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2220      	movs	r2, #32
 800afe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2220      	movs	r2, #32
 800afe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
	...

0800aff8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b08c      	sub	sp, #48	; 0x30
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	4613      	mov	r3, r2
 800b004:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	2b20      	cmp	r3, #32
 800b010:	d165      	bne.n	800b0de <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d002      	beq.n	800b01e <HAL_UART_Transmit_DMA+0x26>
 800b018:	88fb      	ldrh	r3, [r7, #6]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d101      	bne.n	800b022 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	e05e      	b.n	800b0e0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d101      	bne.n	800b030 <HAL_UART_Transmit_DMA+0x38>
 800b02c:	2302      	movs	r3, #2
 800b02e:	e057      	b.n	800b0e0 <HAL_UART_Transmit_DMA+0xe8>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	88fa      	ldrh	r2, [r7, #6]
 800b042:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	88fa      	ldrh	r2, [r7, #6]
 800b048:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2200      	movs	r2, #0
 800b04e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2221      	movs	r2, #33	; 0x21
 800b054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b05c:	4a22      	ldr	r2, [pc, #136]	; (800b0e8 <HAL_UART_Transmit_DMA+0xf0>)
 800b05e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b064:	4a21      	ldr	r2, [pc, #132]	; (800b0ec <HAL_UART_Transmit_DMA+0xf4>)
 800b066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b06c:	4a20      	ldr	r2, [pc, #128]	; (800b0f0 <HAL_UART_Transmit_DMA+0xf8>)
 800b06e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b074:	2200      	movs	r2, #0
 800b076:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800b078:	f107 0308 	add.w	r3, r7, #8
 800b07c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b084:	6819      	ldr	r1, [r3, #0]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3304      	adds	r3, #4
 800b08c:	461a      	mov	r2, r3
 800b08e:	88fb      	ldrh	r3, [r7, #6]
 800b090:	f7fb fab2 	bl	80065f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b09c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	3314      	adds	r3, #20
 800b0ac:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	e853 3f00 	ldrex	r3, [r3]
 800b0b4:	617b      	str	r3, [r7, #20]
   return(result);
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	3314      	adds	r3, #20
 800b0c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0c6:	627a      	str	r2, [r7, #36]	; 0x24
 800b0c8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ca:	6a39      	ldr	r1, [r7, #32]
 800b0cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ce:	e841 2300 	strex	r3, r2, [r1]
 800b0d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1e5      	bne.n	800b0a6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e000      	b.n	800b0e0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800b0de:	2302      	movs	r3, #2
  }
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3730      	adds	r7, #48	; 0x30
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	0800b6ed 	.word	0x0800b6ed
 800b0ec:	0800b787 	.word	0x0800b787
 800b0f0:	0800b8ff 	.word	0x0800b8ff

0800b0f4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	4613      	mov	r3, r2
 800b100:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b20      	cmp	r3, #32
 800b10c:	d11d      	bne.n	800b14a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d002      	beq.n	800b11a <HAL_UART_Receive_DMA+0x26>
 800b114:	88fb      	ldrh	r3, [r7, #6]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d101      	bne.n	800b11e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e016      	b.n	800b14c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b124:	2b01      	cmp	r3, #1
 800b126:	d101      	bne.n	800b12c <HAL_UART_Receive_DMA+0x38>
 800b128:	2302      	movs	r3, #2
 800b12a:	e00f      	b.n	800b14c <HAL_UART_Receive_DMA+0x58>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b13a:	88fb      	ldrh	r3, [r7, #6]
 800b13c:	461a      	mov	r2, r3
 800b13e:	68b9      	ldr	r1, [r7, #8]
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f000 fc27 	bl	800b994 <UART_Start_Receive_DMA>
 800b146:	4603      	mov	r3, r0
 800b148:	e000      	b.n	800b14c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b14a:	2302      	movs	r3, #2
  }
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b0ba      	sub	sp, #232	; 0xe8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	695b      	ldr	r3, [r3, #20]
 800b176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b17a:	2300      	movs	r3, #0
 800b17c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b180:	2300      	movs	r3, #0
 800b182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b18a:	f003 030f 	and.w	r3, r3, #15
 800b18e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b196:	2b00      	cmp	r3, #0
 800b198:	d10f      	bne.n	800b1ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b19e:	f003 0320 	and.w	r3, r3, #32
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d009      	beq.n	800b1ba <HAL_UART_IRQHandler+0x66>
 800b1a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1aa:	f003 0320 	and.w	r3, r3, #32
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 fd8f 	bl	800bcd6 <UART_Receive_IT>
      return;
 800b1b8:	e256      	b.n	800b668 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b1ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f000 80de 	beq.w	800b380 <HAL_UART_IRQHandler+0x22c>
 800b1c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1c8:	f003 0301 	and.w	r3, r3, #1
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d106      	bne.n	800b1de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b1d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f000 80d1 	beq.w	800b380 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1e2:	f003 0301 	and.w	r3, r3, #1
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00b      	beq.n	800b202 <HAL_UART_IRQHandler+0xae>
 800b1ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d005      	beq.n	800b202 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fa:	f043 0201 	orr.w	r2, r3, #1
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b206:	f003 0304 	and.w	r3, r3, #4
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00b      	beq.n	800b226 <HAL_UART_IRQHandler+0xd2>
 800b20e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	2b00      	cmp	r3, #0
 800b218:	d005      	beq.n	800b226 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21e:	f043 0202 	orr.w	r2, r3, #2
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b22a:	f003 0302 	and.w	r3, r3, #2
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00b      	beq.n	800b24a <HAL_UART_IRQHandler+0xf6>
 800b232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b236:	f003 0301 	and.w	r3, r3, #1
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d005      	beq.n	800b24a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b242:	f043 0204 	orr.w	r2, r3, #4
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b24e:	f003 0308 	and.w	r3, r3, #8
 800b252:	2b00      	cmp	r3, #0
 800b254:	d011      	beq.n	800b27a <HAL_UART_IRQHandler+0x126>
 800b256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b25a:	f003 0320 	and.w	r3, r3, #32
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d105      	bne.n	800b26e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b266:	f003 0301 	and.w	r3, r3, #1
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d005      	beq.n	800b27a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b272:	f043 0208 	orr.w	r2, r3, #8
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 81ed 	beq.w	800b65e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b288:	f003 0320 	and.w	r3, r3, #32
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d008      	beq.n	800b2a2 <HAL_UART_IRQHandler+0x14e>
 800b290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b294:	f003 0320 	and.w	r3, r3, #32
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fd1a 	bl	800bcd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	695b      	ldr	r3, [r3, #20]
 800b2a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ac:	2b40      	cmp	r3, #64	; 0x40
 800b2ae:	bf0c      	ite	eq
 800b2b0:	2301      	moveq	r3, #1
 800b2b2:	2300      	movne	r3, #0
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2be:	f003 0308 	and.w	r3, r3, #8
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d103      	bne.n	800b2ce <HAL_UART_IRQHandler+0x17a>
 800b2c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d04f      	beq.n	800b36e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fc22 	bl	800bb18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	695b      	ldr	r3, [r3, #20]
 800b2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2de:	2b40      	cmp	r3, #64	; 0x40
 800b2e0:	d141      	bne.n	800b366 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	3314      	adds	r3, #20
 800b2e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b2f0:	e853 3f00 	ldrex	r3, [r3]
 800b2f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b2f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	3314      	adds	r3, #20
 800b30a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b30e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b31a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b31e:	e841 2300 	strex	r3, r2, [r1]
 800b322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1d9      	bne.n	800b2e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b332:	2b00      	cmp	r3, #0
 800b334:	d013      	beq.n	800b35e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33a:	4a7d      	ldr	r2, [pc, #500]	; (800b530 <HAL_UART_IRQHandler+0x3dc>)
 800b33c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b342:	4618      	mov	r0, r3
 800b344:	f7fb fa20 	bl	8006788 <HAL_DMA_Abort_IT>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d016      	beq.n	800b37c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b358:	4610      	mov	r0, r2
 800b35a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b35c:	e00e      	b.n	800b37c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f9ae 	bl	800b6c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b364:	e00a      	b.n	800b37c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 f9aa 	bl	800b6c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b36c:	e006      	b.n	800b37c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f9a6 	bl	800b6c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b37a:	e170      	b.n	800b65e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b37c:	bf00      	nop
    return;
 800b37e:	e16e      	b.n	800b65e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b384:	2b01      	cmp	r3, #1
 800b386:	f040 814a 	bne.w	800b61e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b38a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b38e:	f003 0310 	and.w	r3, r3, #16
 800b392:	2b00      	cmp	r3, #0
 800b394:	f000 8143 	beq.w	800b61e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b39c:	f003 0310 	and.w	r3, r3, #16
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	f000 813c 	beq.w	800b61e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60bb      	str	r3, [r7, #8]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	60bb      	str	r3, [r7, #8]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	60bb      	str	r3, [r7, #8]
 800b3ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3c6:	2b40      	cmp	r3, #64	; 0x40
 800b3c8:	f040 80b4 	bne.w	800b534 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b3d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f000 8140 	beq.w	800b662 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b3e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	f080 8139 	bcs.w	800b662 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b3f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fc:	69db      	ldr	r3, [r3, #28]
 800b3fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b402:	f000 8088 	beq.w	800b516 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	330c      	adds	r3, #12
 800b40c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b414:	e853 3f00 	ldrex	r3, [r3]
 800b418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b41c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	330c      	adds	r3, #12
 800b42e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b432:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b43e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b442:	e841 2300 	strex	r3, r2, [r1]
 800b446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b44a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1d9      	bne.n	800b406 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3314      	adds	r3, #20
 800b458:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b45c:	e853 3f00 	ldrex	r3, [r3]
 800b460:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b464:	f023 0301 	bic.w	r3, r3, #1
 800b468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	3314      	adds	r3, #20
 800b472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b476:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b47a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b47e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b482:	e841 2300 	strex	r3, r2, [r1]
 800b486:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1e1      	bne.n	800b452 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3314      	adds	r3, #20
 800b494:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b498:	e853 3f00 	ldrex	r3, [r3]
 800b49c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b49e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	3314      	adds	r3, #20
 800b4ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b4b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b4b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b4b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b4ba:	e841 2300 	strex	r3, r2, [r1]
 800b4be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b4c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1e3      	bne.n	800b48e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2220      	movs	r2, #32
 800b4ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	330c      	adds	r3, #12
 800b4da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4de:	e853 3f00 	ldrex	r3, [r3]
 800b4e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4e6:	f023 0310 	bic.w	r3, r3, #16
 800b4ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	330c      	adds	r3, #12
 800b4f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b4f8:	65ba      	str	r2, [r7, #88]	; 0x58
 800b4fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b4fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b500:	e841 2300 	strex	r3, r2, [r1]
 800b504:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1e3      	bne.n	800b4d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b510:	4618      	mov	r0, r3
 800b512:	f7fb f8c9 	bl	80066a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b51e:	b29b      	uxth	r3, r3
 800b520:	1ad3      	subs	r3, r2, r3
 800b522:	b29b      	uxth	r3, r3
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f8d4 	bl	800b6d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b52c:	e099      	b.n	800b662 <HAL_UART_IRQHandler+0x50e>
 800b52e:	bf00      	nop
 800b530:	0800bbdf 	.word	0x0800bbdf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b548:	b29b      	uxth	r3, r3
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f000 808b 	beq.w	800b666 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 8086 	beq.w	800b666 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	330c      	adds	r3, #12
 800b560:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b564:	e853 3f00 	ldrex	r3, [r3]
 800b568:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b570:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	330c      	adds	r3, #12
 800b57a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b57e:	647a      	str	r2, [r7, #68]	; 0x44
 800b580:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b582:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b584:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b586:	e841 2300 	strex	r3, r2, [r1]
 800b58a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1e3      	bne.n	800b55a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3314      	adds	r3, #20
 800b598:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59c:	e853 3f00 	ldrex	r3, [r3]
 800b5a0:	623b      	str	r3, [r7, #32]
   return(result);
 800b5a2:	6a3b      	ldr	r3, [r7, #32]
 800b5a4:	f023 0301 	bic.w	r3, r3, #1
 800b5a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	3314      	adds	r3, #20
 800b5b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b5b6:	633a      	str	r2, [r7, #48]	; 0x30
 800b5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5be:	e841 2300 	strex	r3, r2, [r1]
 800b5c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1e3      	bne.n	800b592 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	330c      	adds	r3, #12
 800b5de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	e853 3f00 	ldrex	r3, [r3]
 800b5e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f023 0310 	bic.w	r3, r3, #16
 800b5ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	330c      	adds	r3, #12
 800b5f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b5fc:	61fa      	str	r2, [r7, #28]
 800b5fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b600:	69b9      	ldr	r1, [r7, #24]
 800b602:	69fa      	ldr	r2, [r7, #28]
 800b604:	e841 2300 	strex	r3, r2, [r1]
 800b608:	617b      	str	r3, [r7, #20]
   return(result);
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d1e3      	bne.n	800b5d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f85c 	bl	800b6d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b61c:	e023      	b.n	800b666 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b626:	2b00      	cmp	r3, #0
 800b628:	d009      	beq.n	800b63e <HAL_UART_IRQHandler+0x4ea>
 800b62a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b632:	2b00      	cmp	r3, #0
 800b634:	d003      	beq.n	800b63e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fae5 	bl	800bc06 <UART_Transmit_IT>
    return;
 800b63c:	e014      	b.n	800b668 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b63e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00e      	beq.n	800b668 <HAL_UART_IRQHandler+0x514>
 800b64a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b652:	2b00      	cmp	r3, #0
 800b654:	d008      	beq.n	800b668 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 fb25 	bl	800bca6 <UART_EndTransmit_IT>
    return;
 800b65c:	e004      	b.n	800b668 <HAL_UART_IRQHandler+0x514>
    return;
 800b65e:	bf00      	nop
 800b660:	e002      	b.n	800b668 <HAL_UART_IRQHandler+0x514>
      return;
 800b662:	bf00      	nop
 800b664:	e000      	b.n	800b668 <HAL_UART_IRQHandler+0x514>
      return;
 800b666:	bf00      	nop
  }
}
 800b668:	37e8      	adds	r7, #232	; 0xe8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop

0800b670 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b678:	bf00      	nop
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b6c8:	bf00      	nop
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6e0:	bf00      	nop
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b090      	sub	sp, #64	; 0x40
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b704:	2b00      	cmp	r3, #0
 800b706:	d137      	bne.n	800b778 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b70a:	2200      	movs	r2, #0
 800b70c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3314      	adds	r3, #20
 800b714:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b718:	e853 3f00 	ldrex	r3, [r3]
 800b71c:	623b      	str	r3, [r7, #32]
   return(result);
 800b71e:	6a3b      	ldr	r3, [r7, #32]
 800b720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b724:	63bb      	str	r3, [r7, #56]	; 0x38
 800b726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3314      	adds	r3, #20
 800b72c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b72e:	633a      	str	r2, [r7, #48]	; 0x30
 800b730:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b736:	e841 2300 	strex	r3, r2, [r1]
 800b73a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1e5      	bne.n	800b70e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	330c      	adds	r3, #12
 800b748:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	e853 3f00 	ldrex	r3, [r3]
 800b750:	60fb      	str	r3, [r7, #12]
   return(result);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b758:	637b      	str	r3, [r7, #52]	; 0x34
 800b75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	330c      	adds	r3, #12
 800b760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b762:	61fa      	str	r2, [r7, #28]
 800b764:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b766:	69b9      	ldr	r1, [r7, #24]
 800b768:	69fa      	ldr	r2, [r7, #28]
 800b76a:	e841 2300 	strex	r3, r2, [r1]
 800b76e:	617b      	str	r3, [r7, #20]
   return(result);
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d1e5      	bne.n	800b742 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b776:	e002      	b.n	800b77e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b778:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b77a:	f7ff ff79 	bl	800b670 <HAL_UART_TxCpltCallback>
}
 800b77e:	bf00      	nop
 800b780:	3740      	adds	r7, #64	; 0x40
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b084      	sub	sp, #16
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b792:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f7ff ff75 	bl	800b684 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b79a:	bf00      	nop
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b09c      	sub	sp, #112	; 0x70
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d172      	bne.n	800b8a4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b7be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	330c      	adds	r3, #12
 800b7ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ce:	e853 3f00 	ldrex	r3, [r3]
 800b7d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b7d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7da:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	330c      	adds	r3, #12
 800b7e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b7e4:	65ba      	str	r2, [r7, #88]	; 0x58
 800b7e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b7ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7ec:	e841 2300 	strex	r3, r2, [r1]
 800b7f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b7f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1e5      	bne.n	800b7c4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	3314      	adds	r3, #20
 800b7fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b802:	e853 3f00 	ldrex	r3, [r3]
 800b806:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b80a:	f023 0301 	bic.w	r3, r3, #1
 800b80e:	667b      	str	r3, [r7, #100]	; 0x64
 800b810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3314      	adds	r3, #20
 800b816:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b818:	647a      	str	r2, [r7, #68]	; 0x44
 800b81a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b81e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b820:	e841 2300 	strex	r3, r2, [r1]
 800b824:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1e5      	bne.n	800b7f8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b82c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3314      	adds	r3, #20
 800b832:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	e853 3f00 	ldrex	r3, [r3]
 800b83a:	623b      	str	r3, [r7, #32]
   return(result);
 800b83c:	6a3b      	ldr	r3, [r7, #32]
 800b83e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b842:	663b      	str	r3, [r7, #96]	; 0x60
 800b844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3314      	adds	r3, #20
 800b84a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b84c:	633a      	str	r2, [r7, #48]	; 0x30
 800b84e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b854:	e841 2300 	strex	r3, r2, [r1]
 800b858:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e5      	bne.n	800b82c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b862:	2220      	movs	r2, #32
 800b864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d119      	bne.n	800b8a4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	330c      	adds	r3, #12
 800b876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	e853 3f00 	ldrex	r3, [r3]
 800b87e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f023 0310 	bic.w	r3, r3, #16
 800b886:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	330c      	adds	r3, #12
 800b88e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b890:	61fa      	str	r2, [r7, #28]
 800b892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b894:	69b9      	ldr	r1, [r7, #24]
 800b896:	69fa      	ldr	r2, [r7, #28]
 800b898:	e841 2300 	strex	r3, r2, [r1]
 800b89c:	617b      	str	r3, [r7, #20]
   return(result);
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1e5      	bne.n	800b870 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d106      	bne.n	800b8ba <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b8b4:	f7ff ff0e 	bl	800b6d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8b8:	e002      	b.n	800b8c0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b8ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b8bc:	f7ff feec 	bl	800b698 <HAL_UART_RxCpltCallback>
}
 800b8c0:	bf00      	nop
 800b8c2:	3770      	adds	r7, #112	; 0x70
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d108      	bne.n	800b8f0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b8e2:	085b      	lsrs	r3, r3, #1
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f7ff fef3 	bl	800b6d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8ee:	e002      	b.n	800b8f6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f7ff fedb 	bl	800b6ac <HAL_UART_RxHalfCpltCallback>
}
 800b8f6:	bf00      	nop
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b906:	2300      	movs	r3, #0
 800b908:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	695b      	ldr	r3, [r3, #20]
 800b916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b91a:	2b80      	cmp	r3, #128	; 0x80
 800b91c:	bf0c      	ite	eq
 800b91e:	2301      	moveq	r3, #1
 800b920:	2300      	movne	r3, #0
 800b922:	b2db      	uxtb	r3, r3
 800b924:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	2b21      	cmp	r3, #33	; 0x21
 800b930:	d108      	bne.n	800b944 <UART_DMAError+0x46>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d005      	beq.n	800b944 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	2200      	movs	r2, #0
 800b93c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b93e:	68b8      	ldr	r0, [r7, #8]
 800b940:	f000 f8c2 	bl	800bac8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b94e:	2b40      	cmp	r3, #64	; 0x40
 800b950:	bf0c      	ite	eq
 800b952:	2301      	moveq	r3, #1
 800b954:	2300      	movne	r3, #0
 800b956:	b2db      	uxtb	r3, r3
 800b958:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b22      	cmp	r3, #34	; 0x22
 800b964:	d108      	bne.n	800b978 <UART_DMAError+0x7a>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d005      	beq.n	800b978 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	2200      	movs	r2, #0
 800b970:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b972:	68b8      	ldr	r0, [r7, #8]
 800b974:	f000 f8d0 	bl	800bb18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97c:	f043 0210 	orr.w	r2, r3, #16
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b984:	68b8      	ldr	r0, [r7, #8]
 800b986:	f7ff fe9b 	bl	800b6c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b98a:	bf00      	nop
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
	...

0800b994 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b098      	sub	sp, #96	; 0x60
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b9a2:	68ba      	ldr	r2, [r7, #8]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	88fa      	ldrh	r2, [r7, #6]
 800b9ac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2222      	movs	r2, #34	; 0x22
 800b9b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c0:	4a3e      	ldr	r2, [pc, #248]	; (800babc <UART_Start_Receive_DMA+0x128>)
 800b9c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c8:	4a3d      	ldr	r2, [pc, #244]	; (800bac0 <UART_Start_Receive_DMA+0x12c>)
 800b9ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d0:	4a3c      	ldr	r2, [pc, #240]	; (800bac4 <UART_Start_Receive_DMA+0x130>)
 800b9d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d8:	2200      	movs	r2, #0
 800b9da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b9dc:	f107 0308 	add.w	r3, r7, #8
 800b9e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	3304      	adds	r3, #4
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	88fb      	ldrh	r3, [r7, #6]
 800b9f4:	f7fa fe00 	bl	80065f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	613b      	str	r3, [r7, #16]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	613b      	str	r3, [r7, #16]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	613b      	str	r3, [r7, #16]
 800ba0c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	330c      	adds	r3, #12
 800ba1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba20:	e853 3f00 	ldrex	r3, [r3]
 800ba24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba2c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	330c      	adds	r3, #12
 800ba34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba36:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ba38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ba3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba3e:	e841 2300 	strex	r3, r2, [r1]
 800ba42:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ba44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1e5      	bne.n	800ba16 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3314      	adds	r3, #20
 800ba50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba54:	e853 3f00 	ldrex	r3, [r3]
 800ba58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	f043 0301 	orr.w	r3, r3, #1
 800ba60:	657b      	str	r3, [r7, #84]	; 0x54
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3314      	adds	r3, #20
 800ba68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba6a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ba6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba72:	e841 2300 	strex	r3, r2, [r1]
 800ba76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ba78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d1e5      	bne.n	800ba4a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	3314      	adds	r3, #20
 800ba84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	e853 3f00 	ldrex	r3, [r3]
 800ba8c:	617b      	str	r3, [r7, #20]
   return(result);
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba94:	653b      	str	r3, [r7, #80]	; 0x50
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3314      	adds	r3, #20
 800ba9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba9e:	627a      	str	r2, [r7, #36]	; 0x24
 800baa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa2:	6a39      	ldr	r1, [r7, #32]
 800baa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baa6:	e841 2300 	strex	r3, r2, [r1]
 800baaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d1e5      	bne.n	800ba7e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3760      	adds	r7, #96	; 0x60
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	0800b7a3 	.word	0x0800b7a3
 800bac0:	0800b8c9 	.word	0x0800b8c9
 800bac4:	0800b8ff 	.word	0x0800b8ff

0800bac8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bac8:	b480      	push	{r7}
 800baca:	b089      	sub	sp, #36	; 0x24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	330c      	adds	r3, #12
 800bad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	e853 3f00 	ldrex	r3, [r3]
 800bade:	60bb      	str	r3, [r7, #8]
   return(result);
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bae6:	61fb      	str	r3, [r7, #28]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	330c      	adds	r3, #12
 800baee:	69fa      	ldr	r2, [r7, #28]
 800baf0:	61ba      	str	r2, [r7, #24]
 800baf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf4:	6979      	ldr	r1, [r7, #20]
 800baf6:	69ba      	ldr	r2, [r7, #24]
 800baf8:	e841 2300 	strex	r3, r2, [r1]
 800bafc:	613b      	str	r3, [r7, #16]
   return(result);
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1e5      	bne.n	800bad0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2220      	movs	r2, #32
 800bb08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800bb0c:	bf00      	nop
 800bb0e:	3724      	adds	r7, #36	; 0x24
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b095      	sub	sp, #84	; 0x54
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	330c      	adds	r3, #12
 800bb26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb2a:	e853 3f00 	ldrex	r3, [r3]
 800bb2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	330c      	adds	r3, #12
 800bb3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb40:	643a      	str	r2, [r7, #64]	; 0x40
 800bb42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb48:	e841 2300 	strex	r3, r2, [r1]
 800bb4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d1e5      	bne.n	800bb20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	3314      	adds	r3, #20
 800bb5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	e853 3f00 	ldrex	r3, [r3]
 800bb62:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	f023 0301 	bic.w	r3, r3, #1
 800bb6a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	3314      	adds	r3, #20
 800bb72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb74:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb7c:	e841 2300 	strex	r3, r2, [r1]
 800bb80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1e5      	bne.n	800bb54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d119      	bne.n	800bbc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	330c      	adds	r3, #12
 800bb96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	e853 3f00 	ldrex	r3, [r3]
 800bb9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	f023 0310 	bic.w	r3, r3, #16
 800bba6:	647b      	str	r3, [r7, #68]	; 0x44
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	330c      	adds	r3, #12
 800bbae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbb0:	61ba      	str	r2, [r7, #24]
 800bbb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb4:	6979      	ldr	r1, [r7, #20]
 800bbb6:	69ba      	ldr	r2, [r7, #24]
 800bbb8:	e841 2300 	strex	r3, r2, [r1]
 800bbbc:	613b      	str	r3, [r7, #16]
   return(result);
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1e5      	bne.n	800bb90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2220      	movs	r2, #32
 800bbc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bbd2:	bf00      	nop
 800bbd4:	3754      	adds	r7, #84	; 0x54
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr

0800bbde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b084      	sub	sp, #16
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f7ff fd61 	bl	800b6c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbfe:	bf00      	nop
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc06:	b480      	push	{r7}
 800bc08:	b085      	sub	sp, #20
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	2b21      	cmp	r3, #33	; 0x21
 800bc18:	d13e      	bne.n	800bc98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc22:	d114      	bne.n	800bc4e <UART_Transmit_IT+0x48>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d110      	bne.n	800bc4e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a1b      	ldr	r3, [r3, #32]
 800bc30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	881b      	ldrh	r3, [r3, #0]
 800bc36:	461a      	mov	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a1b      	ldr	r3, [r3, #32]
 800bc46:	1c9a      	adds	r2, r3, #2
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	621a      	str	r2, [r3, #32]
 800bc4c:	e008      	b.n	800bc60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6a1b      	ldr	r3, [r3, #32]
 800bc52:	1c59      	adds	r1, r3, #1
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	6211      	str	r1, [r2, #32]
 800bc58:	781a      	ldrb	r2, [r3, #0]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	3b01      	subs	r3, #1
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10f      	bne.n	800bc94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	68da      	ldr	r2, [r3, #12]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68da      	ldr	r2, [r3, #12]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	e000      	b.n	800bc9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bc98:	2302      	movs	r3, #2
  }
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b082      	sub	sp, #8
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68da      	ldr	r2, [r3, #12]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2220      	movs	r2, #32
 800bcc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f7ff fcd2 	bl	800b670 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bccc:	2300      	movs	r3, #0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b08c      	sub	sp, #48	; 0x30
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	2b22      	cmp	r3, #34	; 0x22
 800bce8:	f040 80ab 	bne.w	800be42 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcf4:	d117      	bne.n	800bd26 <UART_Receive_IT+0x50>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d113      	bne.n	800bd26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd14:	b29a      	uxth	r2, r3
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd1e:	1c9a      	adds	r2, r3, #2
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	629a      	str	r2, [r3, #40]	; 0x28
 800bd24:	e026      	b.n	800bd74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd38:	d007      	beq.n	800bd4a <UART_Receive_IT+0x74>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10a      	bne.n	800bd58 <UART_Receive_IT+0x82>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	691b      	ldr	r3, [r3, #16]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d106      	bne.n	800bd58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd54:	701a      	strb	r2, [r3, #0]
 800bd56:	e008      	b.n	800bd6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd64:	b2da      	uxtb	r2, r3
 800bd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6e:	1c5a      	adds	r2, r3, #1
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	4619      	mov	r1, r3
 800bd82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d15a      	bne.n	800be3e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68da      	ldr	r2, [r3, #12]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f022 0220 	bic.w	r2, r2, #32
 800bd96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	68da      	ldr	r2, [r3, #12]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bda6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	695a      	ldr	r2, [r3, #20]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f022 0201 	bic.w	r2, r2, #1
 800bdb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2220      	movs	r2, #32
 800bdbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d135      	bne.n	800be34 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	330c      	adds	r3, #12
 800bdd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	e853 3f00 	ldrex	r3, [r3]
 800bddc:	613b      	str	r3, [r7, #16]
   return(result);
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	f023 0310 	bic.w	r3, r3, #16
 800bde4:	627b      	str	r3, [r7, #36]	; 0x24
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	330c      	adds	r3, #12
 800bdec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdee:	623a      	str	r2, [r7, #32]
 800bdf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf2:	69f9      	ldr	r1, [r7, #28]
 800bdf4:	6a3a      	ldr	r2, [r7, #32]
 800bdf6:	e841 2300 	strex	r3, r2, [r1]
 800bdfa:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d1e5      	bne.n	800bdce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f003 0310 	and.w	r3, r3, #16
 800be0c:	2b10      	cmp	r3, #16
 800be0e:	d10a      	bne.n	800be26 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be10:	2300      	movs	r3, #0
 800be12:	60fb      	str	r3, [r7, #12]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	60fb      	str	r3, [r7, #12]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	60fb      	str	r3, [r7, #12]
 800be24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be2a:	4619      	mov	r1, r3
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f7ff fc51 	bl	800b6d4 <HAL_UARTEx_RxEventCallback>
 800be32:	e002      	b.n	800be3a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7ff fc2f 	bl	800b698 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	e002      	b.n	800be44 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800be3e:	2300      	movs	r3, #0
 800be40:	e000      	b.n	800be44 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800be42:	2302      	movs	r3, #2
  }
}
 800be44:	4618      	mov	r0, r3
 800be46:	3730      	adds	r7, #48	; 0x30
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be50:	b09f      	sub	sp, #124	; 0x7c
 800be52:	af00      	add	r7, sp, #0
 800be54:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800be60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be62:	68d9      	ldr	r1, [r3, #12]
 800be64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	ea40 0301 	orr.w	r3, r0, r1
 800be6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800be6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be70:	689a      	ldr	r2, [r3, #8]
 800be72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	431a      	orrs	r2, r3
 800be78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be7a:	695b      	ldr	r3, [r3, #20]
 800be7c:	431a      	orrs	r2, r3
 800be7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be80:	69db      	ldr	r3, [r3, #28]
 800be82:	4313      	orrs	r3, r2
 800be84:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800be86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800be90:	f021 010c 	bic.w	r1, r1, #12
 800be94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be9a:	430b      	orrs	r3, r1
 800be9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800be9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800beaa:	6999      	ldr	r1, [r3, #24]
 800beac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	ea40 0301 	orr.w	r3, r0, r1
 800beb4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800beb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	4bc5      	ldr	r3, [pc, #788]	; (800c1d0 <UART_SetConfig+0x384>)
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d004      	beq.n	800beca <UART_SetConfig+0x7e>
 800bec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	4bc3      	ldr	r3, [pc, #780]	; (800c1d4 <UART_SetConfig+0x388>)
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d103      	bne.n	800bed2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800beca:	f7fe f979 	bl	800a1c0 <HAL_RCC_GetPCLK2Freq>
 800bece:	6778      	str	r0, [r7, #116]	; 0x74
 800bed0:	e002      	b.n	800bed8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bed2:	f7fe f961 	bl	800a198 <HAL_RCC_GetPCLK1Freq>
 800bed6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800beda:	69db      	ldr	r3, [r3, #28]
 800bedc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bee0:	f040 80b6 	bne.w	800c050 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bee6:	461c      	mov	r4, r3
 800bee8:	f04f 0500 	mov.w	r5, #0
 800beec:	4622      	mov	r2, r4
 800beee:	462b      	mov	r3, r5
 800bef0:	1891      	adds	r1, r2, r2
 800bef2:	6439      	str	r1, [r7, #64]	; 0x40
 800bef4:	415b      	adcs	r3, r3
 800bef6:	647b      	str	r3, [r7, #68]	; 0x44
 800bef8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800befc:	1912      	adds	r2, r2, r4
 800befe:	eb45 0303 	adc.w	r3, r5, r3
 800bf02:	f04f 0000 	mov.w	r0, #0
 800bf06:	f04f 0100 	mov.w	r1, #0
 800bf0a:	00d9      	lsls	r1, r3, #3
 800bf0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bf10:	00d0      	lsls	r0, r2, #3
 800bf12:	4602      	mov	r2, r0
 800bf14:	460b      	mov	r3, r1
 800bf16:	1911      	adds	r1, r2, r4
 800bf18:	6639      	str	r1, [r7, #96]	; 0x60
 800bf1a:	416b      	adcs	r3, r5
 800bf1c:	667b      	str	r3, [r7, #100]	; 0x64
 800bf1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	461a      	mov	r2, r3
 800bf24:	f04f 0300 	mov.w	r3, #0
 800bf28:	1891      	adds	r1, r2, r2
 800bf2a:	63b9      	str	r1, [r7, #56]	; 0x38
 800bf2c:	415b      	adcs	r3, r3
 800bf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bf34:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800bf38:	f7f4 febe 	bl	8000cb8 <__aeabi_uldivmod>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4ba5      	ldr	r3, [pc, #660]	; (800c1d8 <UART_SetConfig+0x38c>)
 800bf42:	fba3 2302 	umull	r2, r3, r3, r2
 800bf46:	095b      	lsrs	r3, r3, #5
 800bf48:	011e      	lsls	r6, r3, #4
 800bf4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf4c:	461c      	mov	r4, r3
 800bf4e:	f04f 0500 	mov.w	r5, #0
 800bf52:	4622      	mov	r2, r4
 800bf54:	462b      	mov	r3, r5
 800bf56:	1891      	adds	r1, r2, r2
 800bf58:	6339      	str	r1, [r7, #48]	; 0x30
 800bf5a:	415b      	adcs	r3, r3
 800bf5c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bf62:	1912      	adds	r2, r2, r4
 800bf64:	eb45 0303 	adc.w	r3, r5, r3
 800bf68:	f04f 0000 	mov.w	r0, #0
 800bf6c:	f04f 0100 	mov.w	r1, #0
 800bf70:	00d9      	lsls	r1, r3, #3
 800bf72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bf76:	00d0      	lsls	r0, r2, #3
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	1911      	adds	r1, r2, r4
 800bf7e:	65b9      	str	r1, [r7, #88]	; 0x58
 800bf80:	416b      	adcs	r3, r5
 800bf82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	461a      	mov	r2, r3
 800bf8a:	f04f 0300 	mov.w	r3, #0
 800bf8e:	1891      	adds	r1, r2, r2
 800bf90:	62b9      	str	r1, [r7, #40]	; 0x28
 800bf92:	415b      	adcs	r3, r3
 800bf94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bf9a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800bf9e:	f7f4 fe8b 	bl	8000cb8 <__aeabi_uldivmod>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	4b8c      	ldr	r3, [pc, #560]	; (800c1d8 <UART_SetConfig+0x38c>)
 800bfa8:	fba3 1302 	umull	r1, r3, r3, r2
 800bfac:	095b      	lsrs	r3, r3, #5
 800bfae:	2164      	movs	r1, #100	; 0x64
 800bfb0:	fb01 f303 	mul.w	r3, r1, r3
 800bfb4:	1ad3      	subs	r3, r2, r3
 800bfb6:	00db      	lsls	r3, r3, #3
 800bfb8:	3332      	adds	r3, #50	; 0x32
 800bfba:	4a87      	ldr	r2, [pc, #540]	; (800c1d8 <UART_SetConfig+0x38c>)
 800bfbc:	fba2 2303 	umull	r2, r3, r2, r3
 800bfc0:	095b      	lsrs	r3, r3, #5
 800bfc2:	005b      	lsls	r3, r3, #1
 800bfc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bfc8:	441e      	add	r6, r3
 800bfca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f04f 0100 	mov.w	r1, #0
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	1894      	adds	r4, r2, r2
 800bfd8:	623c      	str	r4, [r7, #32]
 800bfda:	415b      	adcs	r3, r3
 800bfdc:	627b      	str	r3, [r7, #36]	; 0x24
 800bfde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bfe2:	1812      	adds	r2, r2, r0
 800bfe4:	eb41 0303 	adc.w	r3, r1, r3
 800bfe8:	f04f 0400 	mov.w	r4, #0
 800bfec:	f04f 0500 	mov.w	r5, #0
 800bff0:	00dd      	lsls	r5, r3, #3
 800bff2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bff6:	00d4      	lsls	r4, r2, #3
 800bff8:	4622      	mov	r2, r4
 800bffa:	462b      	mov	r3, r5
 800bffc:	1814      	adds	r4, r2, r0
 800bffe:	653c      	str	r4, [r7, #80]	; 0x50
 800c000:	414b      	adcs	r3, r1
 800c002:	657b      	str	r3, [r7, #84]	; 0x54
 800c004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	461a      	mov	r2, r3
 800c00a:	f04f 0300 	mov.w	r3, #0
 800c00e:	1891      	adds	r1, r2, r2
 800c010:	61b9      	str	r1, [r7, #24]
 800c012:	415b      	adcs	r3, r3
 800c014:	61fb      	str	r3, [r7, #28]
 800c016:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c01a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c01e:	f7f4 fe4b 	bl	8000cb8 <__aeabi_uldivmod>
 800c022:	4602      	mov	r2, r0
 800c024:	460b      	mov	r3, r1
 800c026:	4b6c      	ldr	r3, [pc, #432]	; (800c1d8 <UART_SetConfig+0x38c>)
 800c028:	fba3 1302 	umull	r1, r3, r3, r2
 800c02c:	095b      	lsrs	r3, r3, #5
 800c02e:	2164      	movs	r1, #100	; 0x64
 800c030:	fb01 f303 	mul.w	r3, r1, r3
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	00db      	lsls	r3, r3, #3
 800c038:	3332      	adds	r3, #50	; 0x32
 800c03a:	4a67      	ldr	r2, [pc, #412]	; (800c1d8 <UART_SetConfig+0x38c>)
 800c03c:	fba2 2303 	umull	r2, r3, r2, r3
 800c040:	095b      	lsrs	r3, r3, #5
 800c042:	f003 0207 	and.w	r2, r3, #7
 800c046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4432      	add	r2, r6
 800c04c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c04e:	e0b9      	b.n	800c1c4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c052:	461c      	mov	r4, r3
 800c054:	f04f 0500 	mov.w	r5, #0
 800c058:	4622      	mov	r2, r4
 800c05a:	462b      	mov	r3, r5
 800c05c:	1891      	adds	r1, r2, r2
 800c05e:	6139      	str	r1, [r7, #16]
 800c060:	415b      	adcs	r3, r3
 800c062:	617b      	str	r3, [r7, #20]
 800c064:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c068:	1912      	adds	r2, r2, r4
 800c06a:	eb45 0303 	adc.w	r3, r5, r3
 800c06e:	f04f 0000 	mov.w	r0, #0
 800c072:	f04f 0100 	mov.w	r1, #0
 800c076:	00d9      	lsls	r1, r3, #3
 800c078:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c07c:	00d0      	lsls	r0, r2, #3
 800c07e:	4602      	mov	r2, r0
 800c080:	460b      	mov	r3, r1
 800c082:	eb12 0804 	adds.w	r8, r2, r4
 800c086:	eb43 0905 	adc.w	r9, r3, r5
 800c08a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	4618      	mov	r0, r3
 800c090:	f04f 0100 	mov.w	r1, #0
 800c094:	f04f 0200 	mov.w	r2, #0
 800c098:	f04f 0300 	mov.w	r3, #0
 800c09c:	008b      	lsls	r3, r1, #2
 800c09e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c0a2:	0082      	lsls	r2, r0, #2
 800c0a4:	4640      	mov	r0, r8
 800c0a6:	4649      	mov	r1, r9
 800c0a8:	f7f4 fe06 	bl	8000cb8 <__aeabi_uldivmod>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	4b49      	ldr	r3, [pc, #292]	; (800c1d8 <UART_SetConfig+0x38c>)
 800c0b2:	fba3 2302 	umull	r2, r3, r3, r2
 800c0b6:	095b      	lsrs	r3, r3, #5
 800c0b8:	011e      	lsls	r6, r3, #4
 800c0ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f04f 0100 	mov.w	r1, #0
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	1894      	adds	r4, r2, r2
 800c0c8:	60bc      	str	r4, [r7, #8]
 800c0ca:	415b      	adcs	r3, r3
 800c0cc:	60fb      	str	r3, [r7, #12]
 800c0ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c0d2:	1812      	adds	r2, r2, r0
 800c0d4:	eb41 0303 	adc.w	r3, r1, r3
 800c0d8:	f04f 0400 	mov.w	r4, #0
 800c0dc:	f04f 0500 	mov.w	r5, #0
 800c0e0:	00dd      	lsls	r5, r3, #3
 800c0e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c0e6:	00d4      	lsls	r4, r2, #3
 800c0e8:	4622      	mov	r2, r4
 800c0ea:	462b      	mov	r3, r5
 800c0ec:	1814      	adds	r4, r2, r0
 800c0ee:	64bc      	str	r4, [r7, #72]	; 0x48
 800c0f0:	414b      	adcs	r3, r1
 800c0f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f04f 0100 	mov.w	r1, #0
 800c0fe:	f04f 0200 	mov.w	r2, #0
 800c102:	f04f 0300 	mov.w	r3, #0
 800c106:	008b      	lsls	r3, r1, #2
 800c108:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c10c:	0082      	lsls	r2, r0, #2
 800c10e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c112:	f7f4 fdd1 	bl	8000cb8 <__aeabi_uldivmod>
 800c116:	4602      	mov	r2, r0
 800c118:	460b      	mov	r3, r1
 800c11a:	4b2f      	ldr	r3, [pc, #188]	; (800c1d8 <UART_SetConfig+0x38c>)
 800c11c:	fba3 1302 	umull	r1, r3, r3, r2
 800c120:	095b      	lsrs	r3, r3, #5
 800c122:	2164      	movs	r1, #100	; 0x64
 800c124:	fb01 f303 	mul.w	r3, r1, r3
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	011b      	lsls	r3, r3, #4
 800c12c:	3332      	adds	r3, #50	; 0x32
 800c12e:	4a2a      	ldr	r2, [pc, #168]	; (800c1d8 <UART_SetConfig+0x38c>)
 800c130:	fba2 2303 	umull	r2, r3, r2, r3
 800c134:	095b      	lsrs	r3, r3, #5
 800c136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c13a:	441e      	add	r6, r3
 800c13c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c13e:	4618      	mov	r0, r3
 800c140:	f04f 0100 	mov.w	r1, #0
 800c144:	4602      	mov	r2, r0
 800c146:	460b      	mov	r3, r1
 800c148:	1894      	adds	r4, r2, r2
 800c14a:	603c      	str	r4, [r7, #0]
 800c14c:	415b      	adcs	r3, r3
 800c14e:	607b      	str	r3, [r7, #4]
 800c150:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c154:	1812      	adds	r2, r2, r0
 800c156:	eb41 0303 	adc.w	r3, r1, r3
 800c15a:	f04f 0400 	mov.w	r4, #0
 800c15e:	f04f 0500 	mov.w	r5, #0
 800c162:	00dd      	lsls	r5, r3, #3
 800c164:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c168:	00d4      	lsls	r4, r2, #3
 800c16a:	4622      	mov	r2, r4
 800c16c:	462b      	mov	r3, r5
 800c16e:	eb12 0a00 	adds.w	sl, r2, r0
 800c172:	eb43 0b01 	adc.w	fp, r3, r1
 800c176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	4618      	mov	r0, r3
 800c17c:	f04f 0100 	mov.w	r1, #0
 800c180:	f04f 0200 	mov.w	r2, #0
 800c184:	f04f 0300 	mov.w	r3, #0
 800c188:	008b      	lsls	r3, r1, #2
 800c18a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c18e:	0082      	lsls	r2, r0, #2
 800c190:	4650      	mov	r0, sl
 800c192:	4659      	mov	r1, fp
 800c194:	f7f4 fd90 	bl	8000cb8 <__aeabi_uldivmod>
 800c198:	4602      	mov	r2, r0
 800c19a:	460b      	mov	r3, r1
 800c19c:	4b0e      	ldr	r3, [pc, #56]	; (800c1d8 <UART_SetConfig+0x38c>)
 800c19e:	fba3 1302 	umull	r1, r3, r3, r2
 800c1a2:	095b      	lsrs	r3, r3, #5
 800c1a4:	2164      	movs	r1, #100	; 0x64
 800c1a6:	fb01 f303 	mul.w	r3, r1, r3
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	011b      	lsls	r3, r3, #4
 800c1ae:	3332      	adds	r3, #50	; 0x32
 800c1b0:	4a09      	ldr	r2, [pc, #36]	; (800c1d8 <UART_SetConfig+0x38c>)
 800c1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1b6:	095b      	lsrs	r3, r3, #5
 800c1b8:	f003 020f 	and.w	r2, r3, #15
 800c1bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4432      	add	r2, r6
 800c1c2:	609a      	str	r2, [r3, #8]
}
 800c1c4:	bf00      	nop
 800c1c6:	377c      	adds	r7, #124	; 0x7c
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ce:	bf00      	nop
 800c1d0:	40011000 	.word	0x40011000
 800c1d4:	40011400 	.word	0x40011400
 800c1d8:	51eb851f 	.word	0x51eb851f

0800c1dc <atof>:
 800c1dc:	2100      	movs	r1, #0
 800c1de:	f001 bd03 	b.w	800dbe8 <strtod>

0800c1e2 <atoi>:
 800c1e2:	220a      	movs	r2, #10
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	f001 bded 	b.w	800ddc4 <strtol>
	...

0800c1ec <__errno>:
 800c1ec:	4b01      	ldr	r3, [pc, #4]	; (800c1f4 <__errno+0x8>)
 800c1ee:	6818      	ldr	r0, [r3, #0]
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	20000040 	.word	0x20000040

0800c1f8 <__libc_init_array>:
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	4d0d      	ldr	r5, [pc, #52]	; (800c230 <__libc_init_array+0x38>)
 800c1fc:	4c0d      	ldr	r4, [pc, #52]	; (800c234 <__libc_init_array+0x3c>)
 800c1fe:	1b64      	subs	r4, r4, r5
 800c200:	10a4      	asrs	r4, r4, #2
 800c202:	2600      	movs	r6, #0
 800c204:	42a6      	cmp	r6, r4
 800c206:	d109      	bne.n	800c21c <__libc_init_array+0x24>
 800c208:	4d0b      	ldr	r5, [pc, #44]	; (800c238 <__libc_init_array+0x40>)
 800c20a:	4c0c      	ldr	r4, [pc, #48]	; (800c23c <__libc_init_array+0x44>)
 800c20c:	f004 fcb6 	bl	8010b7c <_init>
 800c210:	1b64      	subs	r4, r4, r5
 800c212:	10a4      	asrs	r4, r4, #2
 800c214:	2600      	movs	r6, #0
 800c216:	42a6      	cmp	r6, r4
 800c218:	d105      	bne.n	800c226 <__libc_init_array+0x2e>
 800c21a:	bd70      	pop	{r4, r5, r6, pc}
 800c21c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c220:	4798      	blx	r3
 800c222:	3601      	adds	r6, #1
 800c224:	e7ee      	b.n	800c204 <__libc_init_array+0xc>
 800c226:	f855 3b04 	ldr.w	r3, [r5], #4
 800c22a:	4798      	blx	r3
 800c22c:	3601      	adds	r6, #1
 800c22e:	e7f2      	b.n	800c216 <__libc_init_array+0x1e>
 800c230:	080246f8 	.word	0x080246f8
 800c234:	080246f8 	.word	0x080246f8
 800c238:	080246f8 	.word	0x080246f8
 800c23c:	080246fc 	.word	0x080246fc

0800c240 <memset>:
 800c240:	4402      	add	r2, r0
 800c242:	4603      	mov	r3, r0
 800c244:	4293      	cmp	r3, r2
 800c246:	d100      	bne.n	800c24a <memset+0xa>
 800c248:	4770      	bx	lr
 800c24a:	f803 1b01 	strb.w	r1, [r3], #1
 800c24e:	e7f9      	b.n	800c244 <memset+0x4>

0800c250 <__cvt>:
 800c250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c254:	ec55 4b10 	vmov	r4, r5, d0
 800c258:	2d00      	cmp	r5, #0
 800c25a:	460e      	mov	r6, r1
 800c25c:	4619      	mov	r1, r3
 800c25e:	462b      	mov	r3, r5
 800c260:	bfbb      	ittet	lt
 800c262:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c266:	461d      	movlt	r5, r3
 800c268:	2300      	movge	r3, #0
 800c26a:	232d      	movlt	r3, #45	; 0x2d
 800c26c:	700b      	strb	r3, [r1, #0]
 800c26e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c270:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c274:	4691      	mov	r9, r2
 800c276:	f023 0820 	bic.w	r8, r3, #32
 800c27a:	bfbc      	itt	lt
 800c27c:	4622      	movlt	r2, r4
 800c27e:	4614      	movlt	r4, r2
 800c280:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c284:	d005      	beq.n	800c292 <__cvt+0x42>
 800c286:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c28a:	d100      	bne.n	800c28e <__cvt+0x3e>
 800c28c:	3601      	adds	r6, #1
 800c28e:	2102      	movs	r1, #2
 800c290:	e000      	b.n	800c294 <__cvt+0x44>
 800c292:	2103      	movs	r1, #3
 800c294:	ab03      	add	r3, sp, #12
 800c296:	9301      	str	r3, [sp, #4]
 800c298:	ab02      	add	r3, sp, #8
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	ec45 4b10 	vmov	d0, r4, r5
 800c2a0:	4653      	mov	r3, sl
 800c2a2:	4632      	mov	r2, r6
 800c2a4:	f001 fe44 	bl	800df30 <_dtoa_r>
 800c2a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c2ac:	4607      	mov	r7, r0
 800c2ae:	d102      	bne.n	800c2b6 <__cvt+0x66>
 800c2b0:	f019 0f01 	tst.w	r9, #1
 800c2b4:	d022      	beq.n	800c2fc <__cvt+0xac>
 800c2b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c2ba:	eb07 0906 	add.w	r9, r7, r6
 800c2be:	d110      	bne.n	800c2e2 <__cvt+0x92>
 800c2c0:	783b      	ldrb	r3, [r7, #0]
 800c2c2:	2b30      	cmp	r3, #48	; 0x30
 800c2c4:	d10a      	bne.n	800c2dc <__cvt+0x8c>
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	4629      	mov	r1, r5
 800c2ce:	f7f4 fc13 	bl	8000af8 <__aeabi_dcmpeq>
 800c2d2:	b918      	cbnz	r0, 800c2dc <__cvt+0x8c>
 800c2d4:	f1c6 0601 	rsb	r6, r6, #1
 800c2d8:	f8ca 6000 	str.w	r6, [sl]
 800c2dc:	f8da 3000 	ldr.w	r3, [sl]
 800c2e0:	4499      	add	r9, r3
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	f7f4 fc05 	bl	8000af8 <__aeabi_dcmpeq>
 800c2ee:	b108      	cbz	r0, 800c2f4 <__cvt+0xa4>
 800c2f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c2f4:	2230      	movs	r2, #48	; 0x30
 800c2f6:	9b03      	ldr	r3, [sp, #12]
 800c2f8:	454b      	cmp	r3, r9
 800c2fa:	d307      	bcc.n	800c30c <__cvt+0xbc>
 800c2fc:	9b03      	ldr	r3, [sp, #12]
 800c2fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c300:	1bdb      	subs	r3, r3, r7
 800c302:	4638      	mov	r0, r7
 800c304:	6013      	str	r3, [r2, #0]
 800c306:	b004      	add	sp, #16
 800c308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c30c:	1c59      	adds	r1, r3, #1
 800c30e:	9103      	str	r1, [sp, #12]
 800c310:	701a      	strb	r2, [r3, #0]
 800c312:	e7f0      	b.n	800c2f6 <__cvt+0xa6>

0800c314 <__exponent>:
 800c314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c316:	4603      	mov	r3, r0
 800c318:	2900      	cmp	r1, #0
 800c31a:	bfb8      	it	lt
 800c31c:	4249      	neglt	r1, r1
 800c31e:	f803 2b02 	strb.w	r2, [r3], #2
 800c322:	bfb4      	ite	lt
 800c324:	222d      	movlt	r2, #45	; 0x2d
 800c326:	222b      	movge	r2, #43	; 0x2b
 800c328:	2909      	cmp	r1, #9
 800c32a:	7042      	strb	r2, [r0, #1]
 800c32c:	dd2a      	ble.n	800c384 <__exponent+0x70>
 800c32e:	f10d 0407 	add.w	r4, sp, #7
 800c332:	46a4      	mov	ip, r4
 800c334:	270a      	movs	r7, #10
 800c336:	46a6      	mov	lr, r4
 800c338:	460a      	mov	r2, r1
 800c33a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c33e:	fb07 1516 	mls	r5, r7, r6, r1
 800c342:	3530      	adds	r5, #48	; 0x30
 800c344:	2a63      	cmp	r2, #99	; 0x63
 800c346:	f104 34ff 	add.w	r4, r4, #4294967295
 800c34a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c34e:	4631      	mov	r1, r6
 800c350:	dcf1      	bgt.n	800c336 <__exponent+0x22>
 800c352:	3130      	adds	r1, #48	; 0x30
 800c354:	f1ae 0502 	sub.w	r5, lr, #2
 800c358:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c35c:	1c44      	adds	r4, r0, #1
 800c35e:	4629      	mov	r1, r5
 800c360:	4561      	cmp	r1, ip
 800c362:	d30a      	bcc.n	800c37a <__exponent+0x66>
 800c364:	f10d 0209 	add.w	r2, sp, #9
 800c368:	eba2 020e 	sub.w	r2, r2, lr
 800c36c:	4565      	cmp	r5, ip
 800c36e:	bf88      	it	hi
 800c370:	2200      	movhi	r2, #0
 800c372:	4413      	add	r3, r2
 800c374:	1a18      	subs	r0, r3, r0
 800c376:	b003      	add	sp, #12
 800c378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c37a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c37e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c382:	e7ed      	b.n	800c360 <__exponent+0x4c>
 800c384:	2330      	movs	r3, #48	; 0x30
 800c386:	3130      	adds	r1, #48	; 0x30
 800c388:	7083      	strb	r3, [r0, #2]
 800c38a:	70c1      	strb	r1, [r0, #3]
 800c38c:	1d03      	adds	r3, r0, #4
 800c38e:	e7f1      	b.n	800c374 <__exponent+0x60>

0800c390 <_printf_float>:
 800c390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c394:	ed2d 8b02 	vpush	{d8}
 800c398:	b08d      	sub	sp, #52	; 0x34
 800c39a:	460c      	mov	r4, r1
 800c39c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c3a0:	4616      	mov	r6, r2
 800c3a2:	461f      	mov	r7, r3
 800c3a4:	4605      	mov	r5, r0
 800c3a6:	f002 ff31 	bl	800f20c <_localeconv_r>
 800c3aa:	f8d0 a000 	ldr.w	sl, [r0]
 800c3ae:	4650      	mov	r0, sl
 800c3b0:	f7f3 ff20 	bl	80001f4 <strlen>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	930a      	str	r3, [sp, #40]	; 0x28
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	9305      	str	r3, [sp, #20]
 800c3bc:	f8d8 3000 	ldr.w	r3, [r8]
 800c3c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c3c4:	3307      	adds	r3, #7
 800c3c6:	f023 0307 	bic.w	r3, r3, #7
 800c3ca:	f103 0208 	add.w	r2, r3, #8
 800c3ce:	f8c8 2000 	str.w	r2, [r8]
 800c3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c3da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c3de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3e2:	9307      	str	r3, [sp, #28]
 800c3e4:	f8cd 8018 	str.w	r8, [sp, #24]
 800c3e8:	ee08 0a10 	vmov	s16, r0
 800c3ec:	4b9f      	ldr	r3, [pc, #636]	; (800c66c <_printf_float+0x2dc>)
 800c3ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3f6:	f7f4 fbb1 	bl	8000b5c <__aeabi_dcmpun>
 800c3fa:	bb88      	cbnz	r0, 800c460 <_printf_float+0xd0>
 800c3fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c400:	4b9a      	ldr	r3, [pc, #616]	; (800c66c <_printf_float+0x2dc>)
 800c402:	f04f 32ff 	mov.w	r2, #4294967295
 800c406:	f7f4 fb8b 	bl	8000b20 <__aeabi_dcmple>
 800c40a:	bb48      	cbnz	r0, 800c460 <_printf_float+0xd0>
 800c40c:	2200      	movs	r2, #0
 800c40e:	2300      	movs	r3, #0
 800c410:	4640      	mov	r0, r8
 800c412:	4649      	mov	r1, r9
 800c414:	f7f4 fb7a 	bl	8000b0c <__aeabi_dcmplt>
 800c418:	b110      	cbz	r0, 800c420 <_printf_float+0x90>
 800c41a:	232d      	movs	r3, #45	; 0x2d
 800c41c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c420:	4b93      	ldr	r3, [pc, #588]	; (800c670 <_printf_float+0x2e0>)
 800c422:	4894      	ldr	r0, [pc, #592]	; (800c674 <_printf_float+0x2e4>)
 800c424:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c428:	bf94      	ite	ls
 800c42a:	4698      	movls	r8, r3
 800c42c:	4680      	movhi	r8, r0
 800c42e:	2303      	movs	r3, #3
 800c430:	6123      	str	r3, [r4, #16]
 800c432:	9b05      	ldr	r3, [sp, #20]
 800c434:	f023 0204 	bic.w	r2, r3, #4
 800c438:	6022      	str	r2, [r4, #0]
 800c43a:	f04f 0900 	mov.w	r9, #0
 800c43e:	9700      	str	r7, [sp, #0]
 800c440:	4633      	mov	r3, r6
 800c442:	aa0b      	add	r2, sp, #44	; 0x2c
 800c444:	4621      	mov	r1, r4
 800c446:	4628      	mov	r0, r5
 800c448:	f000 f9d8 	bl	800c7fc <_printf_common>
 800c44c:	3001      	adds	r0, #1
 800c44e:	f040 8090 	bne.w	800c572 <_printf_float+0x1e2>
 800c452:	f04f 30ff 	mov.w	r0, #4294967295
 800c456:	b00d      	add	sp, #52	; 0x34
 800c458:	ecbd 8b02 	vpop	{d8}
 800c45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c460:	4642      	mov	r2, r8
 800c462:	464b      	mov	r3, r9
 800c464:	4640      	mov	r0, r8
 800c466:	4649      	mov	r1, r9
 800c468:	f7f4 fb78 	bl	8000b5c <__aeabi_dcmpun>
 800c46c:	b140      	cbz	r0, 800c480 <_printf_float+0xf0>
 800c46e:	464b      	mov	r3, r9
 800c470:	2b00      	cmp	r3, #0
 800c472:	bfbc      	itt	lt
 800c474:	232d      	movlt	r3, #45	; 0x2d
 800c476:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c47a:	487f      	ldr	r0, [pc, #508]	; (800c678 <_printf_float+0x2e8>)
 800c47c:	4b7f      	ldr	r3, [pc, #508]	; (800c67c <_printf_float+0x2ec>)
 800c47e:	e7d1      	b.n	800c424 <_printf_float+0x94>
 800c480:	6863      	ldr	r3, [r4, #4]
 800c482:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c486:	9206      	str	r2, [sp, #24]
 800c488:	1c5a      	adds	r2, r3, #1
 800c48a:	d13f      	bne.n	800c50c <_printf_float+0x17c>
 800c48c:	2306      	movs	r3, #6
 800c48e:	6063      	str	r3, [r4, #4]
 800c490:	9b05      	ldr	r3, [sp, #20]
 800c492:	6861      	ldr	r1, [r4, #4]
 800c494:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c498:	2300      	movs	r3, #0
 800c49a:	9303      	str	r3, [sp, #12]
 800c49c:	ab0a      	add	r3, sp, #40	; 0x28
 800c49e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c4a2:	ab09      	add	r3, sp, #36	; 0x24
 800c4a4:	ec49 8b10 	vmov	d0, r8, r9
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	6022      	str	r2, [r4, #0]
 800c4ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	f7ff fecd 	bl	800c250 <__cvt>
 800c4b6:	9b06      	ldr	r3, [sp, #24]
 800c4b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4ba:	2b47      	cmp	r3, #71	; 0x47
 800c4bc:	4680      	mov	r8, r0
 800c4be:	d108      	bne.n	800c4d2 <_printf_float+0x142>
 800c4c0:	1cc8      	adds	r0, r1, #3
 800c4c2:	db02      	blt.n	800c4ca <_printf_float+0x13a>
 800c4c4:	6863      	ldr	r3, [r4, #4]
 800c4c6:	4299      	cmp	r1, r3
 800c4c8:	dd41      	ble.n	800c54e <_printf_float+0x1be>
 800c4ca:	f1ab 0b02 	sub.w	fp, fp, #2
 800c4ce:	fa5f fb8b 	uxtb.w	fp, fp
 800c4d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c4d6:	d820      	bhi.n	800c51a <_printf_float+0x18a>
 800c4d8:	3901      	subs	r1, #1
 800c4da:	465a      	mov	r2, fp
 800c4dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c4e0:	9109      	str	r1, [sp, #36]	; 0x24
 800c4e2:	f7ff ff17 	bl	800c314 <__exponent>
 800c4e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4e8:	1813      	adds	r3, r2, r0
 800c4ea:	2a01      	cmp	r2, #1
 800c4ec:	4681      	mov	r9, r0
 800c4ee:	6123      	str	r3, [r4, #16]
 800c4f0:	dc02      	bgt.n	800c4f8 <_printf_float+0x168>
 800c4f2:	6822      	ldr	r2, [r4, #0]
 800c4f4:	07d2      	lsls	r2, r2, #31
 800c4f6:	d501      	bpl.n	800c4fc <_printf_float+0x16c>
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	6123      	str	r3, [r4, #16]
 800c4fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c500:	2b00      	cmp	r3, #0
 800c502:	d09c      	beq.n	800c43e <_printf_float+0xae>
 800c504:	232d      	movs	r3, #45	; 0x2d
 800c506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c50a:	e798      	b.n	800c43e <_printf_float+0xae>
 800c50c:	9a06      	ldr	r2, [sp, #24]
 800c50e:	2a47      	cmp	r2, #71	; 0x47
 800c510:	d1be      	bne.n	800c490 <_printf_float+0x100>
 800c512:	2b00      	cmp	r3, #0
 800c514:	d1bc      	bne.n	800c490 <_printf_float+0x100>
 800c516:	2301      	movs	r3, #1
 800c518:	e7b9      	b.n	800c48e <_printf_float+0xfe>
 800c51a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c51e:	d118      	bne.n	800c552 <_printf_float+0x1c2>
 800c520:	2900      	cmp	r1, #0
 800c522:	6863      	ldr	r3, [r4, #4]
 800c524:	dd0b      	ble.n	800c53e <_printf_float+0x1ae>
 800c526:	6121      	str	r1, [r4, #16]
 800c528:	b913      	cbnz	r3, 800c530 <_printf_float+0x1a0>
 800c52a:	6822      	ldr	r2, [r4, #0]
 800c52c:	07d0      	lsls	r0, r2, #31
 800c52e:	d502      	bpl.n	800c536 <_printf_float+0x1a6>
 800c530:	3301      	adds	r3, #1
 800c532:	440b      	add	r3, r1
 800c534:	6123      	str	r3, [r4, #16]
 800c536:	65a1      	str	r1, [r4, #88]	; 0x58
 800c538:	f04f 0900 	mov.w	r9, #0
 800c53c:	e7de      	b.n	800c4fc <_printf_float+0x16c>
 800c53e:	b913      	cbnz	r3, 800c546 <_printf_float+0x1b6>
 800c540:	6822      	ldr	r2, [r4, #0]
 800c542:	07d2      	lsls	r2, r2, #31
 800c544:	d501      	bpl.n	800c54a <_printf_float+0x1ba>
 800c546:	3302      	adds	r3, #2
 800c548:	e7f4      	b.n	800c534 <_printf_float+0x1a4>
 800c54a:	2301      	movs	r3, #1
 800c54c:	e7f2      	b.n	800c534 <_printf_float+0x1a4>
 800c54e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c554:	4299      	cmp	r1, r3
 800c556:	db05      	blt.n	800c564 <_printf_float+0x1d4>
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	6121      	str	r1, [r4, #16]
 800c55c:	07d8      	lsls	r0, r3, #31
 800c55e:	d5ea      	bpl.n	800c536 <_printf_float+0x1a6>
 800c560:	1c4b      	adds	r3, r1, #1
 800c562:	e7e7      	b.n	800c534 <_printf_float+0x1a4>
 800c564:	2900      	cmp	r1, #0
 800c566:	bfd4      	ite	le
 800c568:	f1c1 0202 	rsble	r2, r1, #2
 800c56c:	2201      	movgt	r2, #1
 800c56e:	4413      	add	r3, r2
 800c570:	e7e0      	b.n	800c534 <_printf_float+0x1a4>
 800c572:	6823      	ldr	r3, [r4, #0]
 800c574:	055a      	lsls	r2, r3, #21
 800c576:	d407      	bmi.n	800c588 <_printf_float+0x1f8>
 800c578:	6923      	ldr	r3, [r4, #16]
 800c57a:	4642      	mov	r2, r8
 800c57c:	4631      	mov	r1, r6
 800c57e:	4628      	mov	r0, r5
 800c580:	47b8      	blx	r7
 800c582:	3001      	adds	r0, #1
 800c584:	d12c      	bne.n	800c5e0 <_printf_float+0x250>
 800c586:	e764      	b.n	800c452 <_printf_float+0xc2>
 800c588:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c58c:	f240 80e0 	bls.w	800c750 <_printf_float+0x3c0>
 800c590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c594:	2200      	movs	r2, #0
 800c596:	2300      	movs	r3, #0
 800c598:	f7f4 faae 	bl	8000af8 <__aeabi_dcmpeq>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d034      	beq.n	800c60a <_printf_float+0x27a>
 800c5a0:	4a37      	ldr	r2, [pc, #220]	; (800c680 <_printf_float+0x2f0>)
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	4631      	mov	r1, r6
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	47b8      	blx	r7
 800c5aa:	3001      	adds	r0, #1
 800c5ac:	f43f af51 	beq.w	800c452 <_printf_float+0xc2>
 800c5b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	db02      	blt.n	800c5be <_printf_float+0x22e>
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	07d8      	lsls	r0, r3, #31
 800c5bc:	d510      	bpl.n	800c5e0 <_printf_float+0x250>
 800c5be:	ee18 3a10 	vmov	r3, s16
 800c5c2:	4652      	mov	r2, sl
 800c5c4:	4631      	mov	r1, r6
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	47b8      	blx	r7
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	f43f af41 	beq.w	800c452 <_printf_float+0xc2>
 800c5d0:	f04f 0800 	mov.w	r8, #0
 800c5d4:	f104 091a 	add.w	r9, r4, #26
 800c5d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	4543      	cmp	r3, r8
 800c5de:	dc09      	bgt.n	800c5f4 <_printf_float+0x264>
 800c5e0:	6823      	ldr	r3, [r4, #0]
 800c5e2:	079b      	lsls	r3, r3, #30
 800c5e4:	f100 8105 	bmi.w	800c7f2 <_printf_float+0x462>
 800c5e8:	68e0      	ldr	r0, [r4, #12]
 800c5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ec:	4298      	cmp	r0, r3
 800c5ee:	bfb8      	it	lt
 800c5f0:	4618      	movlt	r0, r3
 800c5f2:	e730      	b.n	800c456 <_printf_float+0xc6>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	464a      	mov	r2, r9
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	47b8      	blx	r7
 800c5fe:	3001      	adds	r0, #1
 800c600:	f43f af27 	beq.w	800c452 <_printf_float+0xc2>
 800c604:	f108 0801 	add.w	r8, r8, #1
 800c608:	e7e6      	b.n	800c5d8 <_printf_float+0x248>
 800c60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	dc39      	bgt.n	800c684 <_printf_float+0x2f4>
 800c610:	4a1b      	ldr	r2, [pc, #108]	; (800c680 <_printf_float+0x2f0>)
 800c612:	2301      	movs	r3, #1
 800c614:	4631      	mov	r1, r6
 800c616:	4628      	mov	r0, r5
 800c618:	47b8      	blx	r7
 800c61a:	3001      	adds	r0, #1
 800c61c:	f43f af19 	beq.w	800c452 <_printf_float+0xc2>
 800c620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c624:	4313      	orrs	r3, r2
 800c626:	d102      	bne.n	800c62e <_printf_float+0x29e>
 800c628:	6823      	ldr	r3, [r4, #0]
 800c62a:	07d9      	lsls	r1, r3, #31
 800c62c:	d5d8      	bpl.n	800c5e0 <_printf_float+0x250>
 800c62e:	ee18 3a10 	vmov	r3, s16
 800c632:	4652      	mov	r2, sl
 800c634:	4631      	mov	r1, r6
 800c636:	4628      	mov	r0, r5
 800c638:	47b8      	blx	r7
 800c63a:	3001      	adds	r0, #1
 800c63c:	f43f af09 	beq.w	800c452 <_printf_float+0xc2>
 800c640:	f04f 0900 	mov.w	r9, #0
 800c644:	f104 0a1a 	add.w	sl, r4, #26
 800c648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c64a:	425b      	negs	r3, r3
 800c64c:	454b      	cmp	r3, r9
 800c64e:	dc01      	bgt.n	800c654 <_printf_float+0x2c4>
 800c650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c652:	e792      	b.n	800c57a <_printf_float+0x1ea>
 800c654:	2301      	movs	r3, #1
 800c656:	4652      	mov	r2, sl
 800c658:	4631      	mov	r1, r6
 800c65a:	4628      	mov	r0, r5
 800c65c:	47b8      	blx	r7
 800c65e:	3001      	adds	r0, #1
 800c660:	f43f aef7 	beq.w	800c452 <_printf_float+0xc2>
 800c664:	f109 0901 	add.w	r9, r9, #1
 800c668:	e7ee      	b.n	800c648 <_printf_float+0x2b8>
 800c66a:	bf00      	nop
 800c66c:	7fefffff 	.word	0x7fefffff
 800c670:	080241e0 	.word	0x080241e0
 800c674:	080241e4 	.word	0x080241e4
 800c678:	080241ec 	.word	0x080241ec
 800c67c:	080241e8 	.word	0x080241e8
 800c680:	080241f0 	.word	0x080241f0
 800c684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c688:	429a      	cmp	r2, r3
 800c68a:	bfa8      	it	ge
 800c68c:	461a      	movge	r2, r3
 800c68e:	2a00      	cmp	r2, #0
 800c690:	4691      	mov	r9, r2
 800c692:	dc37      	bgt.n	800c704 <_printf_float+0x374>
 800c694:	f04f 0b00 	mov.w	fp, #0
 800c698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c69c:	f104 021a 	add.w	r2, r4, #26
 800c6a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6a2:	9305      	str	r3, [sp, #20]
 800c6a4:	eba3 0309 	sub.w	r3, r3, r9
 800c6a8:	455b      	cmp	r3, fp
 800c6aa:	dc33      	bgt.n	800c714 <_printf_float+0x384>
 800c6ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	db3b      	blt.n	800c72c <_printf_float+0x39c>
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	07da      	lsls	r2, r3, #31
 800c6b8:	d438      	bmi.n	800c72c <_printf_float+0x39c>
 800c6ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6bc:	9b05      	ldr	r3, [sp, #20]
 800c6be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	eba2 0901 	sub.w	r9, r2, r1
 800c6c6:	4599      	cmp	r9, r3
 800c6c8:	bfa8      	it	ge
 800c6ca:	4699      	movge	r9, r3
 800c6cc:	f1b9 0f00 	cmp.w	r9, #0
 800c6d0:	dc35      	bgt.n	800c73e <_printf_float+0x3ae>
 800c6d2:	f04f 0800 	mov.w	r8, #0
 800c6d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6da:	f104 0a1a 	add.w	sl, r4, #26
 800c6de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6e2:	1a9b      	subs	r3, r3, r2
 800c6e4:	eba3 0309 	sub.w	r3, r3, r9
 800c6e8:	4543      	cmp	r3, r8
 800c6ea:	f77f af79 	ble.w	800c5e0 <_printf_float+0x250>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	4652      	mov	r2, sl
 800c6f2:	4631      	mov	r1, r6
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	47b8      	blx	r7
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	f43f aeaa 	beq.w	800c452 <_printf_float+0xc2>
 800c6fe:	f108 0801 	add.w	r8, r8, #1
 800c702:	e7ec      	b.n	800c6de <_printf_float+0x34e>
 800c704:	4613      	mov	r3, r2
 800c706:	4631      	mov	r1, r6
 800c708:	4642      	mov	r2, r8
 800c70a:	4628      	mov	r0, r5
 800c70c:	47b8      	blx	r7
 800c70e:	3001      	adds	r0, #1
 800c710:	d1c0      	bne.n	800c694 <_printf_float+0x304>
 800c712:	e69e      	b.n	800c452 <_printf_float+0xc2>
 800c714:	2301      	movs	r3, #1
 800c716:	4631      	mov	r1, r6
 800c718:	4628      	mov	r0, r5
 800c71a:	9205      	str	r2, [sp, #20]
 800c71c:	47b8      	blx	r7
 800c71e:	3001      	adds	r0, #1
 800c720:	f43f ae97 	beq.w	800c452 <_printf_float+0xc2>
 800c724:	9a05      	ldr	r2, [sp, #20]
 800c726:	f10b 0b01 	add.w	fp, fp, #1
 800c72a:	e7b9      	b.n	800c6a0 <_printf_float+0x310>
 800c72c:	ee18 3a10 	vmov	r3, s16
 800c730:	4652      	mov	r2, sl
 800c732:	4631      	mov	r1, r6
 800c734:	4628      	mov	r0, r5
 800c736:	47b8      	blx	r7
 800c738:	3001      	adds	r0, #1
 800c73a:	d1be      	bne.n	800c6ba <_printf_float+0x32a>
 800c73c:	e689      	b.n	800c452 <_printf_float+0xc2>
 800c73e:	9a05      	ldr	r2, [sp, #20]
 800c740:	464b      	mov	r3, r9
 800c742:	4442      	add	r2, r8
 800c744:	4631      	mov	r1, r6
 800c746:	4628      	mov	r0, r5
 800c748:	47b8      	blx	r7
 800c74a:	3001      	adds	r0, #1
 800c74c:	d1c1      	bne.n	800c6d2 <_printf_float+0x342>
 800c74e:	e680      	b.n	800c452 <_printf_float+0xc2>
 800c750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c752:	2a01      	cmp	r2, #1
 800c754:	dc01      	bgt.n	800c75a <_printf_float+0x3ca>
 800c756:	07db      	lsls	r3, r3, #31
 800c758:	d538      	bpl.n	800c7cc <_printf_float+0x43c>
 800c75a:	2301      	movs	r3, #1
 800c75c:	4642      	mov	r2, r8
 800c75e:	4631      	mov	r1, r6
 800c760:	4628      	mov	r0, r5
 800c762:	47b8      	blx	r7
 800c764:	3001      	adds	r0, #1
 800c766:	f43f ae74 	beq.w	800c452 <_printf_float+0xc2>
 800c76a:	ee18 3a10 	vmov	r3, s16
 800c76e:	4652      	mov	r2, sl
 800c770:	4631      	mov	r1, r6
 800c772:	4628      	mov	r0, r5
 800c774:	47b8      	blx	r7
 800c776:	3001      	adds	r0, #1
 800c778:	f43f ae6b 	beq.w	800c452 <_printf_float+0xc2>
 800c77c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c780:	2200      	movs	r2, #0
 800c782:	2300      	movs	r3, #0
 800c784:	f7f4 f9b8 	bl	8000af8 <__aeabi_dcmpeq>
 800c788:	b9d8      	cbnz	r0, 800c7c2 <_printf_float+0x432>
 800c78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c78c:	f108 0201 	add.w	r2, r8, #1
 800c790:	3b01      	subs	r3, #1
 800c792:	4631      	mov	r1, r6
 800c794:	4628      	mov	r0, r5
 800c796:	47b8      	blx	r7
 800c798:	3001      	adds	r0, #1
 800c79a:	d10e      	bne.n	800c7ba <_printf_float+0x42a>
 800c79c:	e659      	b.n	800c452 <_printf_float+0xc2>
 800c79e:	2301      	movs	r3, #1
 800c7a0:	4652      	mov	r2, sl
 800c7a2:	4631      	mov	r1, r6
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	47b8      	blx	r7
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	f43f ae52 	beq.w	800c452 <_printf_float+0xc2>
 800c7ae:	f108 0801 	add.w	r8, r8, #1
 800c7b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7b4:	3b01      	subs	r3, #1
 800c7b6:	4543      	cmp	r3, r8
 800c7b8:	dcf1      	bgt.n	800c79e <_printf_float+0x40e>
 800c7ba:	464b      	mov	r3, r9
 800c7bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c7c0:	e6dc      	b.n	800c57c <_printf_float+0x1ec>
 800c7c2:	f04f 0800 	mov.w	r8, #0
 800c7c6:	f104 0a1a 	add.w	sl, r4, #26
 800c7ca:	e7f2      	b.n	800c7b2 <_printf_float+0x422>
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	4642      	mov	r2, r8
 800c7d0:	e7df      	b.n	800c792 <_printf_float+0x402>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	464a      	mov	r2, r9
 800c7d6:	4631      	mov	r1, r6
 800c7d8:	4628      	mov	r0, r5
 800c7da:	47b8      	blx	r7
 800c7dc:	3001      	adds	r0, #1
 800c7de:	f43f ae38 	beq.w	800c452 <_printf_float+0xc2>
 800c7e2:	f108 0801 	add.w	r8, r8, #1
 800c7e6:	68e3      	ldr	r3, [r4, #12]
 800c7e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c7ea:	1a5b      	subs	r3, r3, r1
 800c7ec:	4543      	cmp	r3, r8
 800c7ee:	dcf0      	bgt.n	800c7d2 <_printf_float+0x442>
 800c7f0:	e6fa      	b.n	800c5e8 <_printf_float+0x258>
 800c7f2:	f04f 0800 	mov.w	r8, #0
 800c7f6:	f104 0919 	add.w	r9, r4, #25
 800c7fa:	e7f4      	b.n	800c7e6 <_printf_float+0x456>

0800c7fc <_printf_common>:
 800c7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c800:	4616      	mov	r6, r2
 800c802:	4699      	mov	r9, r3
 800c804:	688a      	ldr	r2, [r1, #8]
 800c806:	690b      	ldr	r3, [r1, #16]
 800c808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c80c:	4293      	cmp	r3, r2
 800c80e:	bfb8      	it	lt
 800c810:	4613      	movlt	r3, r2
 800c812:	6033      	str	r3, [r6, #0]
 800c814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c818:	4607      	mov	r7, r0
 800c81a:	460c      	mov	r4, r1
 800c81c:	b10a      	cbz	r2, 800c822 <_printf_common+0x26>
 800c81e:	3301      	adds	r3, #1
 800c820:	6033      	str	r3, [r6, #0]
 800c822:	6823      	ldr	r3, [r4, #0]
 800c824:	0699      	lsls	r1, r3, #26
 800c826:	bf42      	ittt	mi
 800c828:	6833      	ldrmi	r3, [r6, #0]
 800c82a:	3302      	addmi	r3, #2
 800c82c:	6033      	strmi	r3, [r6, #0]
 800c82e:	6825      	ldr	r5, [r4, #0]
 800c830:	f015 0506 	ands.w	r5, r5, #6
 800c834:	d106      	bne.n	800c844 <_printf_common+0x48>
 800c836:	f104 0a19 	add.w	sl, r4, #25
 800c83a:	68e3      	ldr	r3, [r4, #12]
 800c83c:	6832      	ldr	r2, [r6, #0]
 800c83e:	1a9b      	subs	r3, r3, r2
 800c840:	42ab      	cmp	r3, r5
 800c842:	dc26      	bgt.n	800c892 <_printf_common+0x96>
 800c844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c848:	1e13      	subs	r3, r2, #0
 800c84a:	6822      	ldr	r2, [r4, #0]
 800c84c:	bf18      	it	ne
 800c84e:	2301      	movne	r3, #1
 800c850:	0692      	lsls	r2, r2, #26
 800c852:	d42b      	bmi.n	800c8ac <_printf_common+0xb0>
 800c854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c858:	4649      	mov	r1, r9
 800c85a:	4638      	mov	r0, r7
 800c85c:	47c0      	blx	r8
 800c85e:	3001      	adds	r0, #1
 800c860:	d01e      	beq.n	800c8a0 <_printf_common+0xa4>
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	68e5      	ldr	r5, [r4, #12]
 800c866:	6832      	ldr	r2, [r6, #0]
 800c868:	f003 0306 	and.w	r3, r3, #6
 800c86c:	2b04      	cmp	r3, #4
 800c86e:	bf08      	it	eq
 800c870:	1aad      	subeq	r5, r5, r2
 800c872:	68a3      	ldr	r3, [r4, #8]
 800c874:	6922      	ldr	r2, [r4, #16]
 800c876:	bf0c      	ite	eq
 800c878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c87c:	2500      	movne	r5, #0
 800c87e:	4293      	cmp	r3, r2
 800c880:	bfc4      	itt	gt
 800c882:	1a9b      	subgt	r3, r3, r2
 800c884:	18ed      	addgt	r5, r5, r3
 800c886:	2600      	movs	r6, #0
 800c888:	341a      	adds	r4, #26
 800c88a:	42b5      	cmp	r5, r6
 800c88c:	d11a      	bne.n	800c8c4 <_printf_common+0xc8>
 800c88e:	2000      	movs	r0, #0
 800c890:	e008      	b.n	800c8a4 <_printf_common+0xa8>
 800c892:	2301      	movs	r3, #1
 800c894:	4652      	mov	r2, sl
 800c896:	4649      	mov	r1, r9
 800c898:	4638      	mov	r0, r7
 800c89a:	47c0      	blx	r8
 800c89c:	3001      	adds	r0, #1
 800c89e:	d103      	bne.n	800c8a8 <_printf_common+0xac>
 800c8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a8:	3501      	adds	r5, #1
 800c8aa:	e7c6      	b.n	800c83a <_printf_common+0x3e>
 800c8ac:	18e1      	adds	r1, r4, r3
 800c8ae:	1c5a      	adds	r2, r3, #1
 800c8b0:	2030      	movs	r0, #48	; 0x30
 800c8b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8b6:	4422      	add	r2, r4
 800c8b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8c0:	3302      	adds	r3, #2
 800c8c2:	e7c7      	b.n	800c854 <_printf_common+0x58>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	4622      	mov	r2, r4
 800c8c8:	4649      	mov	r1, r9
 800c8ca:	4638      	mov	r0, r7
 800c8cc:	47c0      	blx	r8
 800c8ce:	3001      	adds	r0, #1
 800c8d0:	d0e6      	beq.n	800c8a0 <_printf_common+0xa4>
 800c8d2:	3601      	adds	r6, #1
 800c8d4:	e7d9      	b.n	800c88a <_printf_common+0x8e>
	...

0800c8d8 <_printf_i>:
 800c8d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8dc:	460c      	mov	r4, r1
 800c8de:	4691      	mov	r9, r2
 800c8e0:	7e27      	ldrb	r7, [r4, #24]
 800c8e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c8e4:	2f78      	cmp	r7, #120	; 0x78
 800c8e6:	4680      	mov	r8, r0
 800c8e8:	469a      	mov	sl, r3
 800c8ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8ee:	d807      	bhi.n	800c900 <_printf_i+0x28>
 800c8f0:	2f62      	cmp	r7, #98	; 0x62
 800c8f2:	d80a      	bhi.n	800c90a <_printf_i+0x32>
 800c8f4:	2f00      	cmp	r7, #0
 800c8f6:	f000 80d8 	beq.w	800caaa <_printf_i+0x1d2>
 800c8fa:	2f58      	cmp	r7, #88	; 0x58
 800c8fc:	f000 80a3 	beq.w	800ca46 <_printf_i+0x16e>
 800c900:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c908:	e03a      	b.n	800c980 <_printf_i+0xa8>
 800c90a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c90e:	2b15      	cmp	r3, #21
 800c910:	d8f6      	bhi.n	800c900 <_printf_i+0x28>
 800c912:	a001      	add	r0, pc, #4	; (adr r0, 800c918 <_printf_i+0x40>)
 800c914:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c918:	0800c971 	.word	0x0800c971
 800c91c:	0800c985 	.word	0x0800c985
 800c920:	0800c901 	.word	0x0800c901
 800c924:	0800c901 	.word	0x0800c901
 800c928:	0800c901 	.word	0x0800c901
 800c92c:	0800c901 	.word	0x0800c901
 800c930:	0800c985 	.word	0x0800c985
 800c934:	0800c901 	.word	0x0800c901
 800c938:	0800c901 	.word	0x0800c901
 800c93c:	0800c901 	.word	0x0800c901
 800c940:	0800c901 	.word	0x0800c901
 800c944:	0800ca91 	.word	0x0800ca91
 800c948:	0800c9b5 	.word	0x0800c9b5
 800c94c:	0800ca73 	.word	0x0800ca73
 800c950:	0800c901 	.word	0x0800c901
 800c954:	0800c901 	.word	0x0800c901
 800c958:	0800cab3 	.word	0x0800cab3
 800c95c:	0800c901 	.word	0x0800c901
 800c960:	0800c9b5 	.word	0x0800c9b5
 800c964:	0800c901 	.word	0x0800c901
 800c968:	0800c901 	.word	0x0800c901
 800c96c:	0800ca7b 	.word	0x0800ca7b
 800c970:	680b      	ldr	r3, [r1, #0]
 800c972:	1d1a      	adds	r2, r3, #4
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	600a      	str	r2, [r1, #0]
 800c978:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c97c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c980:	2301      	movs	r3, #1
 800c982:	e0a3      	b.n	800cacc <_printf_i+0x1f4>
 800c984:	6825      	ldr	r5, [r4, #0]
 800c986:	6808      	ldr	r0, [r1, #0]
 800c988:	062e      	lsls	r6, r5, #24
 800c98a:	f100 0304 	add.w	r3, r0, #4
 800c98e:	d50a      	bpl.n	800c9a6 <_printf_i+0xce>
 800c990:	6805      	ldr	r5, [r0, #0]
 800c992:	600b      	str	r3, [r1, #0]
 800c994:	2d00      	cmp	r5, #0
 800c996:	da03      	bge.n	800c9a0 <_printf_i+0xc8>
 800c998:	232d      	movs	r3, #45	; 0x2d
 800c99a:	426d      	negs	r5, r5
 800c99c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9a0:	485e      	ldr	r0, [pc, #376]	; (800cb1c <_printf_i+0x244>)
 800c9a2:	230a      	movs	r3, #10
 800c9a4:	e019      	b.n	800c9da <_printf_i+0x102>
 800c9a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c9aa:	6805      	ldr	r5, [r0, #0]
 800c9ac:	600b      	str	r3, [r1, #0]
 800c9ae:	bf18      	it	ne
 800c9b0:	b22d      	sxthne	r5, r5
 800c9b2:	e7ef      	b.n	800c994 <_printf_i+0xbc>
 800c9b4:	680b      	ldr	r3, [r1, #0]
 800c9b6:	6825      	ldr	r5, [r4, #0]
 800c9b8:	1d18      	adds	r0, r3, #4
 800c9ba:	6008      	str	r0, [r1, #0]
 800c9bc:	0628      	lsls	r0, r5, #24
 800c9be:	d501      	bpl.n	800c9c4 <_printf_i+0xec>
 800c9c0:	681d      	ldr	r5, [r3, #0]
 800c9c2:	e002      	b.n	800c9ca <_printf_i+0xf2>
 800c9c4:	0669      	lsls	r1, r5, #25
 800c9c6:	d5fb      	bpl.n	800c9c0 <_printf_i+0xe8>
 800c9c8:	881d      	ldrh	r5, [r3, #0]
 800c9ca:	4854      	ldr	r0, [pc, #336]	; (800cb1c <_printf_i+0x244>)
 800c9cc:	2f6f      	cmp	r7, #111	; 0x6f
 800c9ce:	bf0c      	ite	eq
 800c9d0:	2308      	moveq	r3, #8
 800c9d2:	230a      	movne	r3, #10
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9da:	6866      	ldr	r6, [r4, #4]
 800c9dc:	60a6      	str	r6, [r4, #8]
 800c9de:	2e00      	cmp	r6, #0
 800c9e0:	bfa2      	ittt	ge
 800c9e2:	6821      	ldrge	r1, [r4, #0]
 800c9e4:	f021 0104 	bicge.w	r1, r1, #4
 800c9e8:	6021      	strge	r1, [r4, #0]
 800c9ea:	b90d      	cbnz	r5, 800c9f0 <_printf_i+0x118>
 800c9ec:	2e00      	cmp	r6, #0
 800c9ee:	d04d      	beq.n	800ca8c <_printf_i+0x1b4>
 800c9f0:	4616      	mov	r6, r2
 800c9f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c9f6:	fb03 5711 	mls	r7, r3, r1, r5
 800c9fa:	5dc7      	ldrb	r7, [r0, r7]
 800c9fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca00:	462f      	mov	r7, r5
 800ca02:	42bb      	cmp	r3, r7
 800ca04:	460d      	mov	r5, r1
 800ca06:	d9f4      	bls.n	800c9f2 <_printf_i+0x11a>
 800ca08:	2b08      	cmp	r3, #8
 800ca0a:	d10b      	bne.n	800ca24 <_printf_i+0x14c>
 800ca0c:	6823      	ldr	r3, [r4, #0]
 800ca0e:	07df      	lsls	r7, r3, #31
 800ca10:	d508      	bpl.n	800ca24 <_printf_i+0x14c>
 800ca12:	6923      	ldr	r3, [r4, #16]
 800ca14:	6861      	ldr	r1, [r4, #4]
 800ca16:	4299      	cmp	r1, r3
 800ca18:	bfde      	ittt	le
 800ca1a:	2330      	movle	r3, #48	; 0x30
 800ca1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca20:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca24:	1b92      	subs	r2, r2, r6
 800ca26:	6122      	str	r2, [r4, #16]
 800ca28:	f8cd a000 	str.w	sl, [sp]
 800ca2c:	464b      	mov	r3, r9
 800ca2e:	aa03      	add	r2, sp, #12
 800ca30:	4621      	mov	r1, r4
 800ca32:	4640      	mov	r0, r8
 800ca34:	f7ff fee2 	bl	800c7fc <_printf_common>
 800ca38:	3001      	adds	r0, #1
 800ca3a:	d14c      	bne.n	800cad6 <_printf_i+0x1fe>
 800ca3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca40:	b004      	add	sp, #16
 800ca42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca46:	4835      	ldr	r0, [pc, #212]	; (800cb1c <_printf_i+0x244>)
 800ca48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca4c:	6823      	ldr	r3, [r4, #0]
 800ca4e:	680e      	ldr	r6, [r1, #0]
 800ca50:	061f      	lsls	r7, r3, #24
 800ca52:	f856 5b04 	ldr.w	r5, [r6], #4
 800ca56:	600e      	str	r6, [r1, #0]
 800ca58:	d514      	bpl.n	800ca84 <_printf_i+0x1ac>
 800ca5a:	07d9      	lsls	r1, r3, #31
 800ca5c:	bf44      	itt	mi
 800ca5e:	f043 0320 	orrmi.w	r3, r3, #32
 800ca62:	6023      	strmi	r3, [r4, #0]
 800ca64:	b91d      	cbnz	r5, 800ca6e <_printf_i+0x196>
 800ca66:	6823      	ldr	r3, [r4, #0]
 800ca68:	f023 0320 	bic.w	r3, r3, #32
 800ca6c:	6023      	str	r3, [r4, #0]
 800ca6e:	2310      	movs	r3, #16
 800ca70:	e7b0      	b.n	800c9d4 <_printf_i+0xfc>
 800ca72:	6823      	ldr	r3, [r4, #0]
 800ca74:	f043 0320 	orr.w	r3, r3, #32
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	2378      	movs	r3, #120	; 0x78
 800ca7c:	4828      	ldr	r0, [pc, #160]	; (800cb20 <_printf_i+0x248>)
 800ca7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca82:	e7e3      	b.n	800ca4c <_printf_i+0x174>
 800ca84:	065e      	lsls	r6, r3, #25
 800ca86:	bf48      	it	mi
 800ca88:	b2ad      	uxthmi	r5, r5
 800ca8a:	e7e6      	b.n	800ca5a <_printf_i+0x182>
 800ca8c:	4616      	mov	r6, r2
 800ca8e:	e7bb      	b.n	800ca08 <_printf_i+0x130>
 800ca90:	680b      	ldr	r3, [r1, #0]
 800ca92:	6826      	ldr	r6, [r4, #0]
 800ca94:	6960      	ldr	r0, [r4, #20]
 800ca96:	1d1d      	adds	r5, r3, #4
 800ca98:	600d      	str	r5, [r1, #0]
 800ca9a:	0635      	lsls	r5, r6, #24
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	d501      	bpl.n	800caa4 <_printf_i+0x1cc>
 800caa0:	6018      	str	r0, [r3, #0]
 800caa2:	e002      	b.n	800caaa <_printf_i+0x1d2>
 800caa4:	0671      	lsls	r1, r6, #25
 800caa6:	d5fb      	bpl.n	800caa0 <_printf_i+0x1c8>
 800caa8:	8018      	strh	r0, [r3, #0]
 800caaa:	2300      	movs	r3, #0
 800caac:	6123      	str	r3, [r4, #16]
 800caae:	4616      	mov	r6, r2
 800cab0:	e7ba      	b.n	800ca28 <_printf_i+0x150>
 800cab2:	680b      	ldr	r3, [r1, #0]
 800cab4:	1d1a      	adds	r2, r3, #4
 800cab6:	600a      	str	r2, [r1, #0]
 800cab8:	681e      	ldr	r6, [r3, #0]
 800caba:	6862      	ldr	r2, [r4, #4]
 800cabc:	2100      	movs	r1, #0
 800cabe:	4630      	mov	r0, r6
 800cac0:	f7f3 fba6 	bl	8000210 <memchr>
 800cac4:	b108      	cbz	r0, 800caca <_printf_i+0x1f2>
 800cac6:	1b80      	subs	r0, r0, r6
 800cac8:	6060      	str	r0, [r4, #4]
 800caca:	6863      	ldr	r3, [r4, #4]
 800cacc:	6123      	str	r3, [r4, #16]
 800cace:	2300      	movs	r3, #0
 800cad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cad4:	e7a8      	b.n	800ca28 <_printf_i+0x150>
 800cad6:	6923      	ldr	r3, [r4, #16]
 800cad8:	4632      	mov	r2, r6
 800cada:	4649      	mov	r1, r9
 800cadc:	4640      	mov	r0, r8
 800cade:	47d0      	blx	sl
 800cae0:	3001      	adds	r0, #1
 800cae2:	d0ab      	beq.n	800ca3c <_printf_i+0x164>
 800cae4:	6823      	ldr	r3, [r4, #0]
 800cae6:	079b      	lsls	r3, r3, #30
 800cae8:	d413      	bmi.n	800cb12 <_printf_i+0x23a>
 800caea:	68e0      	ldr	r0, [r4, #12]
 800caec:	9b03      	ldr	r3, [sp, #12]
 800caee:	4298      	cmp	r0, r3
 800caf0:	bfb8      	it	lt
 800caf2:	4618      	movlt	r0, r3
 800caf4:	e7a4      	b.n	800ca40 <_printf_i+0x168>
 800caf6:	2301      	movs	r3, #1
 800caf8:	4632      	mov	r2, r6
 800cafa:	4649      	mov	r1, r9
 800cafc:	4640      	mov	r0, r8
 800cafe:	47d0      	blx	sl
 800cb00:	3001      	adds	r0, #1
 800cb02:	d09b      	beq.n	800ca3c <_printf_i+0x164>
 800cb04:	3501      	adds	r5, #1
 800cb06:	68e3      	ldr	r3, [r4, #12]
 800cb08:	9903      	ldr	r1, [sp, #12]
 800cb0a:	1a5b      	subs	r3, r3, r1
 800cb0c:	42ab      	cmp	r3, r5
 800cb0e:	dcf2      	bgt.n	800caf6 <_printf_i+0x21e>
 800cb10:	e7eb      	b.n	800caea <_printf_i+0x212>
 800cb12:	2500      	movs	r5, #0
 800cb14:	f104 0619 	add.w	r6, r4, #25
 800cb18:	e7f5      	b.n	800cb06 <_printf_i+0x22e>
 800cb1a:	bf00      	nop
 800cb1c:	080241f2 	.word	0x080241f2
 800cb20:	08024203 	.word	0x08024203

0800cb24 <_scanf_float>:
 800cb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb28:	b087      	sub	sp, #28
 800cb2a:	4617      	mov	r7, r2
 800cb2c:	9303      	str	r3, [sp, #12]
 800cb2e:	688b      	ldr	r3, [r1, #8]
 800cb30:	1e5a      	subs	r2, r3, #1
 800cb32:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cb36:	bf83      	ittte	hi
 800cb38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cb3c:	195b      	addhi	r3, r3, r5
 800cb3e:	9302      	strhi	r3, [sp, #8]
 800cb40:	2300      	movls	r3, #0
 800cb42:	bf86      	itte	hi
 800cb44:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cb48:	608b      	strhi	r3, [r1, #8]
 800cb4a:	9302      	strls	r3, [sp, #8]
 800cb4c:	680b      	ldr	r3, [r1, #0]
 800cb4e:	468b      	mov	fp, r1
 800cb50:	2500      	movs	r5, #0
 800cb52:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cb56:	f84b 3b1c 	str.w	r3, [fp], #28
 800cb5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cb5e:	4680      	mov	r8, r0
 800cb60:	460c      	mov	r4, r1
 800cb62:	465e      	mov	r6, fp
 800cb64:	46aa      	mov	sl, r5
 800cb66:	46a9      	mov	r9, r5
 800cb68:	9501      	str	r5, [sp, #4]
 800cb6a:	68a2      	ldr	r2, [r4, #8]
 800cb6c:	b152      	cbz	r2, 800cb84 <_scanf_float+0x60>
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	2b4e      	cmp	r3, #78	; 0x4e
 800cb74:	d864      	bhi.n	800cc40 <_scanf_float+0x11c>
 800cb76:	2b40      	cmp	r3, #64	; 0x40
 800cb78:	d83c      	bhi.n	800cbf4 <_scanf_float+0xd0>
 800cb7a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cb7e:	b2c8      	uxtb	r0, r1
 800cb80:	280e      	cmp	r0, #14
 800cb82:	d93a      	bls.n	800cbfa <_scanf_float+0xd6>
 800cb84:	f1b9 0f00 	cmp.w	r9, #0
 800cb88:	d003      	beq.n	800cb92 <_scanf_float+0x6e>
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb96:	f1ba 0f01 	cmp.w	sl, #1
 800cb9a:	f200 8113 	bhi.w	800cdc4 <_scanf_float+0x2a0>
 800cb9e:	455e      	cmp	r6, fp
 800cba0:	f200 8105 	bhi.w	800cdae <_scanf_float+0x28a>
 800cba4:	2501      	movs	r5, #1
 800cba6:	4628      	mov	r0, r5
 800cba8:	b007      	add	sp, #28
 800cbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cbb2:	2a0d      	cmp	r2, #13
 800cbb4:	d8e6      	bhi.n	800cb84 <_scanf_float+0x60>
 800cbb6:	a101      	add	r1, pc, #4	; (adr r1, 800cbbc <_scanf_float+0x98>)
 800cbb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cbbc:	0800ccfb 	.word	0x0800ccfb
 800cbc0:	0800cb85 	.word	0x0800cb85
 800cbc4:	0800cb85 	.word	0x0800cb85
 800cbc8:	0800cb85 	.word	0x0800cb85
 800cbcc:	0800cd5b 	.word	0x0800cd5b
 800cbd0:	0800cd33 	.word	0x0800cd33
 800cbd4:	0800cb85 	.word	0x0800cb85
 800cbd8:	0800cb85 	.word	0x0800cb85
 800cbdc:	0800cd09 	.word	0x0800cd09
 800cbe0:	0800cb85 	.word	0x0800cb85
 800cbe4:	0800cb85 	.word	0x0800cb85
 800cbe8:	0800cb85 	.word	0x0800cb85
 800cbec:	0800cb85 	.word	0x0800cb85
 800cbf0:	0800ccc1 	.word	0x0800ccc1
 800cbf4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cbf8:	e7db      	b.n	800cbb2 <_scanf_float+0x8e>
 800cbfa:	290e      	cmp	r1, #14
 800cbfc:	d8c2      	bhi.n	800cb84 <_scanf_float+0x60>
 800cbfe:	a001      	add	r0, pc, #4	; (adr r0, 800cc04 <_scanf_float+0xe0>)
 800cc00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cc04:	0800ccb3 	.word	0x0800ccb3
 800cc08:	0800cb85 	.word	0x0800cb85
 800cc0c:	0800ccb3 	.word	0x0800ccb3
 800cc10:	0800cd47 	.word	0x0800cd47
 800cc14:	0800cb85 	.word	0x0800cb85
 800cc18:	0800cc61 	.word	0x0800cc61
 800cc1c:	0800cc9d 	.word	0x0800cc9d
 800cc20:	0800cc9d 	.word	0x0800cc9d
 800cc24:	0800cc9d 	.word	0x0800cc9d
 800cc28:	0800cc9d 	.word	0x0800cc9d
 800cc2c:	0800cc9d 	.word	0x0800cc9d
 800cc30:	0800cc9d 	.word	0x0800cc9d
 800cc34:	0800cc9d 	.word	0x0800cc9d
 800cc38:	0800cc9d 	.word	0x0800cc9d
 800cc3c:	0800cc9d 	.word	0x0800cc9d
 800cc40:	2b6e      	cmp	r3, #110	; 0x6e
 800cc42:	d809      	bhi.n	800cc58 <_scanf_float+0x134>
 800cc44:	2b60      	cmp	r3, #96	; 0x60
 800cc46:	d8b2      	bhi.n	800cbae <_scanf_float+0x8a>
 800cc48:	2b54      	cmp	r3, #84	; 0x54
 800cc4a:	d077      	beq.n	800cd3c <_scanf_float+0x218>
 800cc4c:	2b59      	cmp	r3, #89	; 0x59
 800cc4e:	d199      	bne.n	800cb84 <_scanf_float+0x60>
 800cc50:	2d07      	cmp	r5, #7
 800cc52:	d197      	bne.n	800cb84 <_scanf_float+0x60>
 800cc54:	2508      	movs	r5, #8
 800cc56:	e029      	b.n	800ccac <_scanf_float+0x188>
 800cc58:	2b74      	cmp	r3, #116	; 0x74
 800cc5a:	d06f      	beq.n	800cd3c <_scanf_float+0x218>
 800cc5c:	2b79      	cmp	r3, #121	; 0x79
 800cc5e:	e7f6      	b.n	800cc4e <_scanf_float+0x12a>
 800cc60:	6821      	ldr	r1, [r4, #0]
 800cc62:	05c8      	lsls	r0, r1, #23
 800cc64:	d51a      	bpl.n	800cc9c <_scanf_float+0x178>
 800cc66:	9b02      	ldr	r3, [sp, #8]
 800cc68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cc6c:	6021      	str	r1, [r4, #0]
 800cc6e:	f109 0901 	add.w	r9, r9, #1
 800cc72:	b11b      	cbz	r3, 800cc7c <_scanf_float+0x158>
 800cc74:	3b01      	subs	r3, #1
 800cc76:	3201      	adds	r2, #1
 800cc78:	9302      	str	r3, [sp, #8]
 800cc7a:	60a2      	str	r2, [r4, #8]
 800cc7c:	68a3      	ldr	r3, [r4, #8]
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	60a3      	str	r3, [r4, #8]
 800cc82:	6923      	ldr	r3, [r4, #16]
 800cc84:	3301      	adds	r3, #1
 800cc86:	6123      	str	r3, [r4, #16]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	607b      	str	r3, [r7, #4]
 800cc90:	f340 8084 	ble.w	800cd9c <_scanf_float+0x278>
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	3301      	adds	r3, #1
 800cc98:	603b      	str	r3, [r7, #0]
 800cc9a:	e766      	b.n	800cb6a <_scanf_float+0x46>
 800cc9c:	eb1a 0f05 	cmn.w	sl, r5
 800cca0:	f47f af70 	bne.w	800cb84 <_scanf_float+0x60>
 800cca4:	6822      	ldr	r2, [r4, #0]
 800cca6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ccaa:	6022      	str	r2, [r4, #0]
 800ccac:	f806 3b01 	strb.w	r3, [r6], #1
 800ccb0:	e7e4      	b.n	800cc7c <_scanf_float+0x158>
 800ccb2:	6822      	ldr	r2, [r4, #0]
 800ccb4:	0610      	lsls	r0, r2, #24
 800ccb6:	f57f af65 	bpl.w	800cb84 <_scanf_float+0x60>
 800ccba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ccbe:	e7f4      	b.n	800ccaa <_scanf_float+0x186>
 800ccc0:	f1ba 0f00 	cmp.w	sl, #0
 800ccc4:	d10e      	bne.n	800cce4 <_scanf_float+0x1c0>
 800ccc6:	f1b9 0f00 	cmp.w	r9, #0
 800ccca:	d10e      	bne.n	800ccea <_scanf_float+0x1c6>
 800cccc:	6822      	ldr	r2, [r4, #0]
 800ccce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ccd2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ccd6:	d108      	bne.n	800ccea <_scanf_float+0x1c6>
 800ccd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ccdc:	6022      	str	r2, [r4, #0]
 800ccde:	f04f 0a01 	mov.w	sl, #1
 800cce2:	e7e3      	b.n	800ccac <_scanf_float+0x188>
 800cce4:	f1ba 0f02 	cmp.w	sl, #2
 800cce8:	d055      	beq.n	800cd96 <_scanf_float+0x272>
 800ccea:	2d01      	cmp	r5, #1
 800ccec:	d002      	beq.n	800ccf4 <_scanf_float+0x1d0>
 800ccee:	2d04      	cmp	r5, #4
 800ccf0:	f47f af48 	bne.w	800cb84 <_scanf_float+0x60>
 800ccf4:	3501      	adds	r5, #1
 800ccf6:	b2ed      	uxtb	r5, r5
 800ccf8:	e7d8      	b.n	800ccac <_scanf_float+0x188>
 800ccfa:	f1ba 0f01 	cmp.w	sl, #1
 800ccfe:	f47f af41 	bne.w	800cb84 <_scanf_float+0x60>
 800cd02:	f04f 0a02 	mov.w	sl, #2
 800cd06:	e7d1      	b.n	800ccac <_scanf_float+0x188>
 800cd08:	b97d      	cbnz	r5, 800cd2a <_scanf_float+0x206>
 800cd0a:	f1b9 0f00 	cmp.w	r9, #0
 800cd0e:	f47f af3c 	bne.w	800cb8a <_scanf_float+0x66>
 800cd12:	6822      	ldr	r2, [r4, #0]
 800cd14:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cd18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cd1c:	f47f af39 	bne.w	800cb92 <_scanf_float+0x6e>
 800cd20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cd24:	6022      	str	r2, [r4, #0]
 800cd26:	2501      	movs	r5, #1
 800cd28:	e7c0      	b.n	800ccac <_scanf_float+0x188>
 800cd2a:	2d03      	cmp	r5, #3
 800cd2c:	d0e2      	beq.n	800ccf4 <_scanf_float+0x1d0>
 800cd2e:	2d05      	cmp	r5, #5
 800cd30:	e7de      	b.n	800ccf0 <_scanf_float+0x1cc>
 800cd32:	2d02      	cmp	r5, #2
 800cd34:	f47f af26 	bne.w	800cb84 <_scanf_float+0x60>
 800cd38:	2503      	movs	r5, #3
 800cd3a:	e7b7      	b.n	800ccac <_scanf_float+0x188>
 800cd3c:	2d06      	cmp	r5, #6
 800cd3e:	f47f af21 	bne.w	800cb84 <_scanf_float+0x60>
 800cd42:	2507      	movs	r5, #7
 800cd44:	e7b2      	b.n	800ccac <_scanf_float+0x188>
 800cd46:	6822      	ldr	r2, [r4, #0]
 800cd48:	0591      	lsls	r1, r2, #22
 800cd4a:	f57f af1b 	bpl.w	800cb84 <_scanf_float+0x60>
 800cd4e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cd52:	6022      	str	r2, [r4, #0]
 800cd54:	f8cd 9004 	str.w	r9, [sp, #4]
 800cd58:	e7a8      	b.n	800ccac <_scanf_float+0x188>
 800cd5a:	6822      	ldr	r2, [r4, #0]
 800cd5c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cd60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cd64:	d006      	beq.n	800cd74 <_scanf_float+0x250>
 800cd66:	0550      	lsls	r0, r2, #21
 800cd68:	f57f af0c 	bpl.w	800cb84 <_scanf_float+0x60>
 800cd6c:	f1b9 0f00 	cmp.w	r9, #0
 800cd70:	f43f af0f 	beq.w	800cb92 <_scanf_float+0x6e>
 800cd74:	0591      	lsls	r1, r2, #22
 800cd76:	bf58      	it	pl
 800cd78:	9901      	ldrpl	r1, [sp, #4]
 800cd7a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cd7e:	bf58      	it	pl
 800cd80:	eba9 0101 	subpl.w	r1, r9, r1
 800cd84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cd88:	bf58      	it	pl
 800cd8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cd8e:	6022      	str	r2, [r4, #0]
 800cd90:	f04f 0900 	mov.w	r9, #0
 800cd94:	e78a      	b.n	800ccac <_scanf_float+0x188>
 800cd96:	f04f 0a03 	mov.w	sl, #3
 800cd9a:	e787      	b.n	800ccac <_scanf_float+0x188>
 800cd9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cda0:	4639      	mov	r1, r7
 800cda2:	4640      	mov	r0, r8
 800cda4:	4798      	blx	r3
 800cda6:	2800      	cmp	r0, #0
 800cda8:	f43f aedf 	beq.w	800cb6a <_scanf_float+0x46>
 800cdac:	e6ea      	b.n	800cb84 <_scanf_float+0x60>
 800cdae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdb6:	463a      	mov	r2, r7
 800cdb8:	4640      	mov	r0, r8
 800cdba:	4798      	blx	r3
 800cdbc:	6923      	ldr	r3, [r4, #16]
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	6123      	str	r3, [r4, #16]
 800cdc2:	e6ec      	b.n	800cb9e <_scanf_float+0x7a>
 800cdc4:	1e6b      	subs	r3, r5, #1
 800cdc6:	2b06      	cmp	r3, #6
 800cdc8:	d825      	bhi.n	800ce16 <_scanf_float+0x2f2>
 800cdca:	2d02      	cmp	r5, #2
 800cdcc:	d836      	bhi.n	800ce3c <_scanf_float+0x318>
 800cdce:	455e      	cmp	r6, fp
 800cdd0:	f67f aee8 	bls.w	800cba4 <_scanf_float+0x80>
 800cdd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdd8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cddc:	463a      	mov	r2, r7
 800cdde:	4640      	mov	r0, r8
 800cde0:	4798      	blx	r3
 800cde2:	6923      	ldr	r3, [r4, #16]
 800cde4:	3b01      	subs	r3, #1
 800cde6:	6123      	str	r3, [r4, #16]
 800cde8:	e7f1      	b.n	800cdce <_scanf_float+0x2aa>
 800cdea:	9802      	ldr	r0, [sp, #8]
 800cdec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdf0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cdf4:	9002      	str	r0, [sp, #8]
 800cdf6:	463a      	mov	r2, r7
 800cdf8:	4640      	mov	r0, r8
 800cdfa:	4798      	blx	r3
 800cdfc:	6923      	ldr	r3, [r4, #16]
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	6123      	str	r3, [r4, #16]
 800ce02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce06:	fa5f fa8a 	uxtb.w	sl, sl
 800ce0a:	f1ba 0f02 	cmp.w	sl, #2
 800ce0e:	d1ec      	bne.n	800cdea <_scanf_float+0x2c6>
 800ce10:	3d03      	subs	r5, #3
 800ce12:	b2ed      	uxtb	r5, r5
 800ce14:	1b76      	subs	r6, r6, r5
 800ce16:	6823      	ldr	r3, [r4, #0]
 800ce18:	05da      	lsls	r2, r3, #23
 800ce1a:	d52f      	bpl.n	800ce7c <_scanf_float+0x358>
 800ce1c:	055b      	lsls	r3, r3, #21
 800ce1e:	d510      	bpl.n	800ce42 <_scanf_float+0x31e>
 800ce20:	455e      	cmp	r6, fp
 800ce22:	f67f aebf 	bls.w	800cba4 <_scanf_float+0x80>
 800ce26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce2e:	463a      	mov	r2, r7
 800ce30:	4640      	mov	r0, r8
 800ce32:	4798      	blx	r3
 800ce34:	6923      	ldr	r3, [r4, #16]
 800ce36:	3b01      	subs	r3, #1
 800ce38:	6123      	str	r3, [r4, #16]
 800ce3a:	e7f1      	b.n	800ce20 <_scanf_float+0x2fc>
 800ce3c:	46aa      	mov	sl, r5
 800ce3e:	9602      	str	r6, [sp, #8]
 800ce40:	e7df      	b.n	800ce02 <_scanf_float+0x2de>
 800ce42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ce46:	6923      	ldr	r3, [r4, #16]
 800ce48:	2965      	cmp	r1, #101	; 0x65
 800ce4a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ce4e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ce52:	6123      	str	r3, [r4, #16]
 800ce54:	d00c      	beq.n	800ce70 <_scanf_float+0x34c>
 800ce56:	2945      	cmp	r1, #69	; 0x45
 800ce58:	d00a      	beq.n	800ce70 <_scanf_float+0x34c>
 800ce5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce5e:	463a      	mov	r2, r7
 800ce60:	4640      	mov	r0, r8
 800ce62:	4798      	blx	r3
 800ce64:	6923      	ldr	r3, [r4, #16]
 800ce66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ce6a:	3b01      	subs	r3, #1
 800ce6c:	1eb5      	subs	r5, r6, #2
 800ce6e:	6123      	str	r3, [r4, #16]
 800ce70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce74:	463a      	mov	r2, r7
 800ce76:	4640      	mov	r0, r8
 800ce78:	4798      	blx	r3
 800ce7a:	462e      	mov	r6, r5
 800ce7c:	6825      	ldr	r5, [r4, #0]
 800ce7e:	f015 0510 	ands.w	r5, r5, #16
 800ce82:	d158      	bne.n	800cf36 <_scanf_float+0x412>
 800ce84:	7035      	strb	r5, [r6, #0]
 800ce86:	6823      	ldr	r3, [r4, #0]
 800ce88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ce8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce90:	d11c      	bne.n	800cecc <_scanf_float+0x3a8>
 800ce92:	9b01      	ldr	r3, [sp, #4]
 800ce94:	454b      	cmp	r3, r9
 800ce96:	eba3 0209 	sub.w	r2, r3, r9
 800ce9a:	d124      	bne.n	800cee6 <_scanf_float+0x3c2>
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	4659      	mov	r1, fp
 800cea0:	4640      	mov	r0, r8
 800cea2:	f000 fe9b 	bl	800dbdc <_strtod_r>
 800cea6:	9b03      	ldr	r3, [sp, #12]
 800cea8:	6821      	ldr	r1, [r4, #0]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f011 0f02 	tst.w	r1, #2
 800ceb0:	ec57 6b10 	vmov	r6, r7, d0
 800ceb4:	f103 0204 	add.w	r2, r3, #4
 800ceb8:	d020      	beq.n	800cefc <_scanf_float+0x3d8>
 800ceba:	9903      	ldr	r1, [sp, #12]
 800cebc:	600a      	str	r2, [r1, #0]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	e9c3 6700 	strd	r6, r7, [r3]
 800cec4:	68e3      	ldr	r3, [r4, #12]
 800cec6:	3301      	adds	r3, #1
 800cec8:	60e3      	str	r3, [r4, #12]
 800ceca:	e66c      	b.n	800cba6 <_scanf_float+0x82>
 800cecc:	9b04      	ldr	r3, [sp, #16]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d0e4      	beq.n	800ce9c <_scanf_float+0x378>
 800ced2:	9905      	ldr	r1, [sp, #20]
 800ced4:	230a      	movs	r3, #10
 800ced6:	462a      	mov	r2, r5
 800ced8:	3101      	adds	r1, #1
 800ceda:	4640      	mov	r0, r8
 800cedc:	f000 ff70 	bl	800ddc0 <_strtol_r>
 800cee0:	9b04      	ldr	r3, [sp, #16]
 800cee2:	9e05      	ldr	r6, [sp, #20]
 800cee4:	1ac2      	subs	r2, r0, r3
 800cee6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ceea:	429e      	cmp	r6, r3
 800ceec:	bf28      	it	cs
 800ceee:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cef2:	4912      	ldr	r1, [pc, #72]	; (800cf3c <_scanf_float+0x418>)
 800cef4:	4630      	mov	r0, r6
 800cef6:	f000 f82b 	bl	800cf50 <siprintf>
 800cefa:	e7cf      	b.n	800ce9c <_scanf_float+0x378>
 800cefc:	f011 0f04 	tst.w	r1, #4
 800cf00:	9903      	ldr	r1, [sp, #12]
 800cf02:	600a      	str	r2, [r1, #0]
 800cf04:	d1db      	bne.n	800cebe <_scanf_float+0x39a>
 800cf06:	f8d3 8000 	ldr.w	r8, [r3]
 800cf0a:	ee10 2a10 	vmov	r2, s0
 800cf0e:	ee10 0a10 	vmov	r0, s0
 800cf12:	463b      	mov	r3, r7
 800cf14:	4639      	mov	r1, r7
 800cf16:	f7f3 fe21 	bl	8000b5c <__aeabi_dcmpun>
 800cf1a:	b128      	cbz	r0, 800cf28 <_scanf_float+0x404>
 800cf1c:	4808      	ldr	r0, [pc, #32]	; (800cf40 <_scanf_float+0x41c>)
 800cf1e:	f000 f811 	bl	800cf44 <nanf>
 800cf22:	ed88 0a00 	vstr	s0, [r8]
 800cf26:	e7cd      	b.n	800cec4 <_scanf_float+0x3a0>
 800cf28:	4630      	mov	r0, r6
 800cf2a:	4639      	mov	r1, r7
 800cf2c:	f7f3 fe74 	bl	8000c18 <__aeabi_d2f>
 800cf30:	f8c8 0000 	str.w	r0, [r8]
 800cf34:	e7c6      	b.n	800cec4 <_scanf_float+0x3a0>
 800cf36:	2500      	movs	r5, #0
 800cf38:	e635      	b.n	800cba6 <_scanf_float+0x82>
 800cf3a:	bf00      	nop
 800cf3c:	08024214 	.word	0x08024214
 800cf40:	08024323 	.word	0x08024323

0800cf44 <nanf>:
 800cf44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cf4c <nanf+0x8>
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	7fc00000 	.word	0x7fc00000

0800cf50 <siprintf>:
 800cf50:	b40e      	push	{r1, r2, r3}
 800cf52:	b500      	push	{lr}
 800cf54:	b09c      	sub	sp, #112	; 0x70
 800cf56:	ab1d      	add	r3, sp, #116	; 0x74
 800cf58:	9002      	str	r0, [sp, #8]
 800cf5a:	9006      	str	r0, [sp, #24]
 800cf5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cf60:	4809      	ldr	r0, [pc, #36]	; (800cf88 <siprintf+0x38>)
 800cf62:	9107      	str	r1, [sp, #28]
 800cf64:	9104      	str	r1, [sp, #16]
 800cf66:	4909      	ldr	r1, [pc, #36]	; (800cf8c <siprintf+0x3c>)
 800cf68:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf6c:	9105      	str	r1, [sp, #20]
 800cf6e:	6800      	ldr	r0, [r0, #0]
 800cf70:	9301      	str	r3, [sp, #4]
 800cf72:	a902      	add	r1, sp, #8
 800cf74:	f002 ff46 	bl	800fe04 <_svfiprintf_r>
 800cf78:	9b02      	ldr	r3, [sp, #8]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	701a      	strb	r2, [r3, #0]
 800cf7e:	b01c      	add	sp, #112	; 0x70
 800cf80:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf84:	b003      	add	sp, #12
 800cf86:	4770      	bx	lr
 800cf88:	20000040 	.word	0x20000040
 800cf8c:	ffff0208 	.word	0xffff0208

0800cf90 <sulp>:
 800cf90:	b570      	push	{r4, r5, r6, lr}
 800cf92:	4604      	mov	r4, r0
 800cf94:	460d      	mov	r5, r1
 800cf96:	ec45 4b10 	vmov	d0, r4, r5
 800cf9a:	4616      	mov	r6, r2
 800cf9c:	f002 fcce 	bl	800f93c <__ulp>
 800cfa0:	ec51 0b10 	vmov	r0, r1, d0
 800cfa4:	b17e      	cbz	r6, 800cfc6 <sulp+0x36>
 800cfa6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cfaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	dd09      	ble.n	800cfc6 <sulp+0x36>
 800cfb2:	051b      	lsls	r3, r3, #20
 800cfb4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cfb8:	2400      	movs	r4, #0
 800cfba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cfbe:	4622      	mov	r2, r4
 800cfc0:	462b      	mov	r3, r5
 800cfc2:	f7f3 fb31 	bl	8000628 <__aeabi_dmul>
 800cfc6:	bd70      	pop	{r4, r5, r6, pc}

0800cfc8 <_strtod_l>:
 800cfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfcc:	b0a3      	sub	sp, #140	; 0x8c
 800cfce:	461f      	mov	r7, r3
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	931e      	str	r3, [sp, #120]	; 0x78
 800cfd4:	4ba4      	ldr	r3, [pc, #656]	; (800d268 <_strtod_l+0x2a0>)
 800cfd6:	9219      	str	r2, [sp, #100]	; 0x64
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	9307      	str	r3, [sp, #28]
 800cfdc:	4604      	mov	r4, r0
 800cfde:	4618      	mov	r0, r3
 800cfe0:	4688      	mov	r8, r1
 800cfe2:	f7f3 f907 	bl	80001f4 <strlen>
 800cfe6:	f04f 0a00 	mov.w	sl, #0
 800cfea:	4605      	mov	r5, r0
 800cfec:	f04f 0b00 	mov.w	fp, #0
 800cff0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cff6:	781a      	ldrb	r2, [r3, #0]
 800cff8:	2a2b      	cmp	r2, #43	; 0x2b
 800cffa:	d04c      	beq.n	800d096 <_strtod_l+0xce>
 800cffc:	d839      	bhi.n	800d072 <_strtod_l+0xaa>
 800cffe:	2a0d      	cmp	r2, #13
 800d000:	d832      	bhi.n	800d068 <_strtod_l+0xa0>
 800d002:	2a08      	cmp	r2, #8
 800d004:	d832      	bhi.n	800d06c <_strtod_l+0xa4>
 800d006:	2a00      	cmp	r2, #0
 800d008:	d03c      	beq.n	800d084 <_strtod_l+0xbc>
 800d00a:	2300      	movs	r3, #0
 800d00c:	930e      	str	r3, [sp, #56]	; 0x38
 800d00e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d010:	7833      	ldrb	r3, [r6, #0]
 800d012:	2b30      	cmp	r3, #48	; 0x30
 800d014:	f040 80b4 	bne.w	800d180 <_strtod_l+0x1b8>
 800d018:	7873      	ldrb	r3, [r6, #1]
 800d01a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d01e:	2b58      	cmp	r3, #88	; 0x58
 800d020:	d16c      	bne.n	800d0fc <_strtod_l+0x134>
 800d022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d024:	9301      	str	r3, [sp, #4]
 800d026:	ab1e      	add	r3, sp, #120	; 0x78
 800d028:	9702      	str	r7, [sp, #8]
 800d02a:	9300      	str	r3, [sp, #0]
 800d02c:	4a8f      	ldr	r2, [pc, #572]	; (800d26c <_strtod_l+0x2a4>)
 800d02e:	ab1f      	add	r3, sp, #124	; 0x7c
 800d030:	a91d      	add	r1, sp, #116	; 0x74
 800d032:	4620      	mov	r0, r4
 800d034:	f001 fde2 	bl	800ebfc <__gethex>
 800d038:	f010 0707 	ands.w	r7, r0, #7
 800d03c:	4605      	mov	r5, r0
 800d03e:	d005      	beq.n	800d04c <_strtod_l+0x84>
 800d040:	2f06      	cmp	r7, #6
 800d042:	d12a      	bne.n	800d09a <_strtod_l+0xd2>
 800d044:	3601      	adds	r6, #1
 800d046:	2300      	movs	r3, #0
 800d048:	961d      	str	r6, [sp, #116]	; 0x74
 800d04a:	930e      	str	r3, [sp, #56]	; 0x38
 800d04c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d04e:	2b00      	cmp	r3, #0
 800d050:	f040 8596 	bne.w	800db80 <_strtod_l+0xbb8>
 800d054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d056:	b1db      	cbz	r3, 800d090 <_strtod_l+0xc8>
 800d058:	4652      	mov	r2, sl
 800d05a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d05e:	ec43 2b10 	vmov	d0, r2, r3
 800d062:	b023      	add	sp, #140	; 0x8c
 800d064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d068:	2a20      	cmp	r2, #32
 800d06a:	d1ce      	bne.n	800d00a <_strtod_l+0x42>
 800d06c:	3301      	adds	r3, #1
 800d06e:	931d      	str	r3, [sp, #116]	; 0x74
 800d070:	e7c0      	b.n	800cff4 <_strtod_l+0x2c>
 800d072:	2a2d      	cmp	r2, #45	; 0x2d
 800d074:	d1c9      	bne.n	800d00a <_strtod_l+0x42>
 800d076:	2201      	movs	r2, #1
 800d078:	920e      	str	r2, [sp, #56]	; 0x38
 800d07a:	1c5a      	adds	r2, r3, #1
 800d07c:	921d      	str	r2, [sp, #116]	; 0x74
 800d07e:	785b      	ldrb	r3, [r3, #1]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1c4      	bne.n	800d00e <_strtod_l+0x46>
 800d084:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d086:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f040 8576 	bne.w	800db7c <_strtod_l+0xbb4>
 800d090:	4652      	mov	r2, sl
 800d092:	465b      	mov	r3, fp
 800d094:	e7e3      	b.n	800d05e <_strtod_l+0x96>
 800d096:	2200      	movs	r2, #0
 800d098:	e7ee      	b.n	800d078 <_strtod_l+0xb0>
 800d09a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d09c:	b13a      	cbz	r2, 800d0ae <_strtod_l+0xe6>
 800d09e:	2135      	movs	r1, #53	; 0x35
 800d0a0:	a820      	add	r0, sp, #128	; 0x80
 800d0a2:	f002 fd56 	bl	800fb52 <__copybits>
 800d0a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f002 f91b 	bl	800f2e4 <_Bfree>
 800d0ae:	3f01      	subs	r7, #1
 800d0b0:	2f05      	cmp	r7, #5
 800d0b2:	d807      	bhi.n	800d0c4 <_strtod_l+0xfc>
 800d0b4:	e8df f007 	tbb	[pc, r7]
 800d0b8:	1d180b0e 	.word	0x1d180b0e
 800d0bc:	030e      	.short	0x030e
 800d0be:	f04f 0b00 	mov.w	fp, #0
 800d0c2:	46da      	mov	sl, fp
 800d0c4:	0728      	lsls	r0, r5, #28
 800d0c6:	d5c1      	bpl.n	800d04c <_strtod_l+0x84>
 800d0c8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d0cc:	e7be      	b.n	800d04c <_strtod_l+0x84>
 800d0ce:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800d0d2:	e7f7      	b.n	800d0c4 <_strtod_l+0xfc>
 800d0d4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800d0d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d0da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d0de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d0e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d0e6:	e7ed      	b.n	800d0c4 <_strtod_l+0xfc>
 800d0e8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800d270 <_strtod_l+0x2a8>
 800d0ec:	f04f 0a00 	mov.w	sl, #0
 800d0f0:	e7e8      	b.n	800d0c4 <_strtod_l+0xfc>
 800d0f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d0f6:	f04f 3aff 	mov.w	sl, #4294967295
 800d0fa:	e7e3      	b.n	800d0c4 <_strtod_l+0xfc>
 800d0fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0fe:	1c5a      	adds	r2, r3, #1
 800d100:	921d      	str	r2, [sp, #116]	; 0x74
 800d102:	785b      	ldrb	r3, [r3, #1]
 800d104:	2b30      	cmp	r3, #48	; 0x30
 800d106:	d0f9      	beq.n	800d0fc <_strtod_l+0x134>
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d09f      	beq.n	800d04c <_strtod_l+0x84>
 800d10c:	2301      	movs	r3, #1
 800d10e:	f04f 0900 	mov.w	r9, #0
 800d112:	9304      	str	r3, [sp, #16]
 800d114:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d116:	930a      	str	r3, [sp, #40]	; 0x28
 800d118:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d11c:	464f      	mov	r7, r9
 800d11e:	220a      	movs	r2, #10
 800d120:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d122:	7806      	ldrb	r6, [r0, #0]
 800d124:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d128:	b2d9      	uxtb	r1, r3
 800d12a:	2909      	cmp	r1, #9
 800d12c:	d92a      	bls.n	800d184 <_strtod_l+0x1bc>
 800d12e:	9907      	ldr	r1, [sp, #28]
 800d130:	462a      	mov	r2, r5
 800d132:	f003 f8d9 	bl	80102e8 <strncmp>
 800d136:	b398      	cbz	r0, 800d1a0 <_strtod_l+0x1d8>
 800d138:	2000      	movs	r0, #0
 800d13a:	4633      	mov	r3, r6
 800d13c:	463d      	mov	r5, r7
 800d13e:	9007      	str	r0, [sp, #28]
 800d140:	4602      	mov	r2, r0
 800d142:	2b65      	cmp	r3, #101	; 0x65
 800d144:	d001      	beq.n	800d14a <_strtod_l+0x182>
 800d146:	2b45      	cmp	r3, #69	; 0x45
 800d148:	d118      	bne.n	800d17c <_strtod_l+0x1b4>
 800d14a:	b91d      	cbnz	r5, 800d154 <_strtod_l+0x18c>
 800d14c:	9b04      	ldr	r3, [sp, #16]
 800d14e:	4303      	orrs	r3, r0
 800d150:	d098      	beq.n	800d084 <_strtod_l+0xbc>
 800d152:	2500      	movs	r5, #0
 800d154:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d158:	f108 0301 	add.w	r3, r8, #1
 800d15c:	931d      	str	r3, [sp, #116]	; 0x74
 800d15e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d162:	2b2b      	cmp	r3, #43	; 0x2b
 800d164:	d075      	beq.n	800d252 <_strtod_l+0x28a>
 800d166:	2b2d      	cmp	r3, #45	; 0x2d
 800d168:	d07b      	beq.n	800d262 <_strtod_l+0x29a>
 800d16a:	f04f 0c00 	mov.w	ip, #0
 800d16e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d172:	2909      	cmp	r1, #9
 800d174:	f240 8082 	bls.w	800d27c <_strtod_l+0x2b4>
 800d178:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d17c:	2600      	movs	r6, #0
 800d17e:	e09d      	b.n	800d2bc <_strtod_l+0x2f4>
 800d180:	2300      	movs	r3, #0
 800d182:	e7c4      	b.n	800d10e <_strtod_l+0x146>
 800d184:	2f08      	cmp	r7, #8
 800d186:	bfd8      	it	le
 800d188:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d18a:	f100 0001 	add.w	r0, r0, #1
 800d18e:	bfda      	itte	le
 800d190:	fb02 3301 	mlale	r3, r2, r1, r3
 800d194:	9309      	strle	r3, [sp, #36]	; 0x24
 800d196:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d19a:	3701      	adds	r7, #1
 800d19c:	901d      	str	r0, [sp, #116]	; 0x74
 800d19e:	e7bf      	b.n	800d120 <_strtod_l+0x158>
 800d1a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d1a2:	195a      	adds	r2, r3, r5
 800d1a4:	921d      	str	r2, [sp, #116]	; 0x74
 800d1a6:	5d5b      	ldrb	r3, [r3, r5]
 800d1a8:	2f00      	cmp	r7, #0
 800d1aa:	d037      	beq.n	800d21c <_strtod_l+0x254>
 800d1ac:	9007      	str	r0, [sp, #28]
 800d1ae:	463d      	mov	r5, r7
 800d1b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d1b4:	2a09      	cmp	r2, #9
 800d1b6:	d912      	bls.n	800d1de <_strtod_l+0x216>
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	e7c2      	b.n	800d142 <_strtod_l+0x17a>
 800d1bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d1be:	1c5a      	adds	r2, r3, #1
 800d1c0:	921d      	str	r2, [sp, #116]	; 0x74
 800d1c2:	785b      	ldrb	r3, [r3, #1]
 800d1c4:	3001      	adds	r0, #1
 800d1c6:	2b30      	cmp	r3, #48	; 0x30
 800d1c8:	d0f8      	beq.n	800d1bc <_strtod_l+0x1f4>
 800d1ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d1ce:	2a08      	cmp	r2, #8
 800d1d0:	f200 84db 	bhi.w	800db8a <_strtod_l+0xbc2>
 800d1d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d1d6:	9007      	str	r0, [sp, #28]
 800d1d8:	2000      	movs	r0, #0
 800d1da:	920a      	str	r2, [sp, #40]	; 0x28
 800d1dc:	4605      	mov	r5, r0
 800d1de:	3b30      	subs	r3, #48	; 0x30
 800d1e0:	f100 0201 	add.w	r2, r0, #1
 800d1e4:	d014      	beq.n	800d210 <_strtod_l+0x248>
 800d1e6:	9907      	ldr	r1, [sp, #28]
 800d1e8:	4411      	add	r1, r2
 800d1ea:	9107      	str	r1, [sp, #28]
 800d1ec:	462a      	mov	r2, r5
 800d1ee:	eb00 0e05 	add.w	lr, r0, r5
 800d1f2:	210a      	movs	r1, #10
 800d1f4:	4572      	cmp	r2, lr
 800d1f6:	d113      	bne.n	800d220 <_strtod_l+0x258>
 800d1f8:	182a      	adds	r2, r5, r0
 800d1fa:	2a08      	cmp	r2, #8
 800d1fc:	f105 0501 	add.w	r5, r5, #1
 800d200:	4405      	add	r5, r0
 800d202:	dc1c      	bgt.n	800d23e <_strtod_l+0x276>
 800d204:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d206:	220a      	movs	r2, #10
 800d208:	fb02 3301 	mla	r3, r2, r1, r3
 800d20c:	9309      	str	r3, [sp, #36]	; 0x24
 800d20e:	2200      	movs	r2, #0
 800d210:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d212:	1c59      	adds	r1, r3, #1
 800d214:	911d      	str	r1, [sp, #116]	; 0x74
 800d216:	785b      	ldrb	r3, [r3, #1]
 800d218:	4610      	mov	r0, r2
 800d21a:	e7c9      	b.n	800d1b0 <_strtod_l+0x1e8>
 800d21c:	4638      	mov	r0, r7
 800d21e:	e7d2      	b.n	800d1c6 <_strtod_l+0x1fe>
 800d220:	2a08      	cmp	r2, #8
 800d222:	dc04      	bgt.n	800d22e <_strtod_l+0x266>
 800d224:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d226:	434e      	muls	r6, r1
 800d228:	9609      	str	r6, [sp, #36]	; 0x24
 800d22a:	3201      	adds	r2, #1
 800d22c:	e7e2      	b.n	800d1f4 <_strtod_l+0x22c>
 800d22e:	f102 0c01 	add.w	ip, r2, #1
 800d232:	f1bc 0f10 	cmp.w	ip, #16
 800d236:	bfd8      	it	le
 800d238:	fb01 f909 	mulle.w	r9, r1, r9
 800d23c:	e7f5      	b.n	800d22a <_strtod_l+0x262>
 800d23e:	2d10      	cmp	r5, #16
 800d240:	bfdc      	itt	le
 800d242:	220a      	movle	r2, #10
 800d244:	fb02 3909 	mlale	r9, r2, r9, r3
 800d248:	e7e1      	b.n	800d20e <_strtod_l+0x246>
 800d24a:	2300      	movs	r3, #0
 800d24c:	9307      	str	r3, [sp, #28]
 800d24e:	2201      	movs	r2, #1
 800d250:	e77c      	b.n	800d14c <_strtod_l+0x184>
 800d252:	f04f 0c00 	mov.w	ip, #0
 800d256:	f108 0302 	add.w	r3, r8, #2
 800d25a:	931d      	str	r3, [sp, #116]	; 0x74
 800d25c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d260:	e785      	b.n	800d16e <_strtod_l+0x1a6>
 800d262:	f04f 0c01 	mov.w	ip, #1
 800d266:	e7f6      	b.n	800d256 <_strtod_l+0x28e>
 800d268:	0802450c 	.word	0x0802450c
 800d26c:	0802421c 	.word	0x0802421c
 800d270:	7ff00000 	.word	0x7ff00000
 800d274:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d276:	1c59      	adds	r1, r3, #1
 800d278:	911d      	str	r1, [sp, #116]	; 0x74
 800d27a:	785b      	ldrb	r3, [r3, #1]
 800d27c:	2b30      	cmp	r3, #48	; 0x30
 800d27e:	d0f9      	beq.n	800d274 <_strtod_l+0x2ac>
 800d280:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d284:	2908      	cmp	r1, #8
 800d286:	f63f af79 	bhi.w	800d17c <_strtod_l+0x1b4>
 800d28a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d28e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d290:	9308      	str	r3, [sp, #32]
 800d292:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d294:	1c59      	adds	r1, r3, #1
 800d296:	911d      	str	r1, [sp, #116]	; 0x74
 800d298:	785b      	ldrb	r3, [r3, #1]
 800d29a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800d29e:	2e09      	cmp	r6, #9
 800d2a0:	d937      	bls.n	800d312 <_strtod_l+0x34a>
 800d2a2:	9e08      	ldr	r6, [sp, #32]
 800d2a4:	1b89      	subs	r1, r1, r6
 800d2a6:	2908      	cmp	r1, #8
 800d2a8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d2ac:	dc02      	bgt.n	800d2b4 <_strtod_l+0x2ec>
 800d2ae:	4576      	cmp	r6, lr
 800d2b0:	bfa8      	it	ge
 800d2b2:	4676      	movge	r6, lr
 800d2b4:	f1bc 0f00 	cmp.w	ip, #0
 800d2b8:	d000      	beq.n	800d2bc <_strtod_l+0x2f4>
 800d2ba:	4276      	negs	r6, r6
 800d2bc:	2d00      	cmp	r5, #0
 800d2be:	d14f      	bne.n	800d360 <_strtod_l+0x398>
 800d2c0:	9904      	ldr	r1, [sp, #16]
 800d2c2:	4301      	orrs	r1, r0
 800d2c4:	f47f aec2 	bne.w	800d04c <_strtod_l+0x84>
 800d2c8:	2a00      	cmp	r2, #0
 800d2ca:	f47f aedb 	bne.w	800d084 <_strtod_l+0xbc>
 800d2ce:	2b69      	cmp	r3, #105	; 0x69
 800d2d0:	d027      	beq.n	800d322 <_strtod_l+0x35a>
 800d2d2:	dc24      	bgt.n	800d31e <_strtod_l+0x356>
 800d2d4:	2b49      	cmp	r3, #73	; 0x49
 800d2d6:	d024      	beq.n	800d322 <_strtod_l+0x35a>
 800d2d8:	2b4e      	cmp	r3, #78	; 0x4e
 800d2da:	f47f aed3 	bne.w	800d084 <_strtod_l+0xbc>
 800d2de:	499e      	ldr	r1, [pc, #632]	; (800d558 <_strtod_l+0x590>)
 800d2e0:	a81d      	add	r0, sp, #116	; 0x74
 800d2e2:	f001 fee3 	bl	800f0ac <__match>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	f43f aecc 	beq.w	800d084 <_strtod_l+0xbc>
 800d2ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	2b28      	cmp	r3, #40	; 0x28
 800d2f2:	d12d      	bne.n	800d350 <_strtod_l+0x388>
 800d2f4:	4999      	ldr	r1, [pc, #612]	; (800d55c <_strtod_l+0x594>)
 800d2f6:	aa20      	add	r2, sp, #128	; 0x80
 800d2f8:	a81d      	add	r0, sp, #116	; 0x74
 800d2fa:	f001 feeb 	bl	800f0d4 <__hexnan>
 800d2fe:	2805      	cmp	r0, #5
 800d300:	d126      	bne.n	800d350 <_strtod_l+0x388>
 800d302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d304:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d308:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d30c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d310:	e69c      	b.n	800d04c <_strtod_l+0x84>
 800d312:	210a      	movs	r1, #10
 800d314:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d318:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d31c:	e7b9      	b.n	800d292 <_strtod_l+0x2ca>
 800d31e:	2b6e      	cmp	r3, #110	; 0x6e
 800d320:	e7db      	b.n	800d2da <_strtod_l+0x312>
 800d322:	498f      	ldr	r1, [pc, #572]	; (800d560 <_strtod_l+0x598>)
 800d324:	a81d      	add	r0, sp, #116	; 0x74
 800d326:	f001 fec1 	bl	800f0ac <__match>
 800d32a:	2800      	cmp	r0, #0
 800d32c:	f43f aeaa 	beq.w	800d084 <_strtod_l+0xbc>
 800d330:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d332:	498c      	ldr	r1, [pc, #560]	; (800d564 <_strtod_l+0x59c>)
 800d334:	3b01      	subs	r3, #1
 800d336:	a81d      	add	r0, sp, #116	; 0x74
 800d338:	931d      	str	r3, [sp, #116]	; 0x74
 800d33a:	f001 feb7 	bl	800f0ac <__match>
 800d33e:	b910      	cbnz	r0, 800d346 <_strtod_l+0x37e>
 800d340:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d342:	3301      	adds	r3, #1
 800d344:	931d      	str	r3, [sp, #116]	; 0x74
 800d346:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800d574 <_strtod_l+0x5ac>
 800d34a:	f04f 0a00 	mov.w	sl, #0
 800d34e:	e67d      	b.n	800d04c <_strtod_l+0x84>
 800d350:	4885      	ldr	r0, [pc, #532]	; (800d568 <_strtod_l+0x5a0>)
 800d352:	f002 ffb1 	bl	80102b8 <nan>
 800d356:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d35a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d35e:	e675      	b.n	800d04c <_strtod_l+0x84>
 800d360:	9b07      	ldr	r3, [sp, #28]
 800d362:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d364:	1af3      	subs	r3, r6, r3
 800d366:	2f00      	cmp	r7, #0
 800d368:	bf08      	it	eq
 800d36a:	462f      	moveq	r7, r5
 800d36c:	2d10      	cmp	r5, #16
 800d36e:	9308      	str	r3, [sp, #32]
 800d370:	46a8      	mov	r8, r5
 800d372:	bfa8      	it	ge
 800d374:	f04f 0810 	movge.w	r8, #16
 800d378:	f7f3 f8dc 	bl	8000534 <__aeabi_ui2d>
 800d37c:	2d09      	cmp	r5, #9
 800d37e:	4682      	mov	sl, r0
 800d380:	468b      	mov	fp, r1
 800d382:	dd13      	ble.n	800d3ac <_strtod_l+0x3e4>
 800d384:	4b79      	ldr	r3, [pc, #484]	; (800d56c <_strtod_l+0x5a4>)
 800d386:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d38a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d38e:	f7f3 f94b 	bl	8000628 <__aeabi_dmul>
 800d392:	4682      	mov	sl, r0
 800d394:	4648      	mov	r0, r9
 800d396:	468b      	mov	fp, r1
 800d398:	f7f3 f8cc 	bl	8000534 <__aeabi_ui2d>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	4650      	mov	r0, sl
 800d3a2:	4659      	mov	r1, fp
 800d3a4:	f7f2 ff8a 	bl	80002bc <__adddf3>
 800d3a8:	4682      	mov	sl, r0
 800d3aa:	468b      	mov	fp, r1
 800d3ac:	2d0f      	cmp	r5, #15
 800d3ae:	dc38      	bgt.n	800d422 <_strtod_l+0x45a>
 800d3b0:	9b08      	ldr	r3, [sp, #32]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	f43f ae4a 	beq.w	800d04c <_strtod_l+0x84>
 800d3b8:	dd24      	ble.n	800d404 <_strtod_l+0x43c>
 800d3ba:	2b16      	cmp	r3, #22
 800d3bc:	dc0b      	bgt.n	800d3d6 <_strtod_l+0x40e>
 800d3be:	4d6b      	ldr	r5, [pc, #428]	; (800d56c <_strtod_l+0x5a4>)
 800d3c0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d3c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d3c8:	4652      	mov	r2, sl
 800d3ca:	465b      	mov	r3, fp
 800d3cc:	f7f3 f92c 	bl	8000628 <__aeabi_dmul>
 800d3d0:	4682      	mov	sl, r0
 800d3d2:	468b      	mov	fp, r1
 800d3d4:	e63a      	b.n	800d04c <_strtod_l+0x84>
 800d3d6:	9a08      	ldr	r2, [sp, #32]
 800d3d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	db20      	blt.n	800d422 <_strtod_l+0x45a>
 800d3e0:	4c62      	ldr	r4, [pc, #392]	; (800d56c <_strtod_l+0x5a4>)
 800d3e2:	f1c5 050f 	rsb	r5, r5, #15
 800d3e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d3ea:	4652      	mov	r2, sl
 800d3ec:	465b      	mov	r3, fp
 800d3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3f2:	f7f3 f919 	bl	8000628 <__aeabi_dmul>
 800d3f6:	9b08      	ldr	r3, [sp, #32]
 800d3f8:	1b5d      	subs	r5, r3, r5
 800d3fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d3fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d402:	e7e3      	b.n	800d3cc <_strtod_l+0x404>
 800d404:	9b08      	ldr	r3, [sp, #32]
 800d406:	3316      	adds	r3, #22
 800d408:	db0b      	blt.n	800d422 <_strtod_l+0x45a>
 800d40a:	9b07      	ldr	r3, [sp, #28]
 800d40c:	4a57      	ldr	r2, [pc, #348]	; (800d56c <_strtod_l+0x5a4>)
 800d40e:	1b9e      	subs	r6, r3, r6
 800d410:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d414:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d418:	4650      	mov	r0, sl
 800d41a:	4659      	mov	r1, fp
 800d41c:	f7f3 fa2e 	bl	800087c <__aeabi_ddiv>
 800d420:	e7d6      	b.n	800d3d0 <_strtod_l+0x408>
 800d422:	9b08      	ldr	r3, [sp, #32]
 800d424:	eba5 0808 	sub.w	r8, r5, r8
 800d428:	4498      	add	r8, r3
 800d42a:	f1b8 0f00 	cmp.w	r8, #0
 800d42e:	dd71      	ble.n	800d514 <_strtod_l+0x54c>
 800d430:	f018 030f 	ands.w	r3, r8, #15
 800d434:	d00a      	beq.n	800d44c <_strtod_l+0x484>
 800d436:	494d      	ldr	r1, [pc, #308]	; (800d56c <_strtod_l+0x5a4>)
 800d438:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d43c:	4652      	mov	r2, sl
 800d43e:	465b      	mov	r3, fp
 800d440:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d444:	f7f3 f8f0 	bl	8000628 <__aeabi_dmul>
 800d448:	4682      	mov	sl, r0
 800d44a:	468b      	mov	fp, r1
 800d44c:	f038 080f 	bics.w	r8, r8, #15
 800d450:	d04d      	beq.n	800d4ee <_strtod_l+0x526>
 800d452:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d456:	dd22      	ble.n	800d49e <_strtod_l+0x4d6>
 800d458:	2500      	movs	r5, #0
 800d45a:	462e      	mov	r6, r5
 800d45c:	9509      	str	r5, [sp, #36]	; 0x24
 800d45e:	9507      	str	r5, [sp, #28]
 800d460:	2322      	movs	r3, #34	; 0x22
 800d462:	f8df b110 	ldr.w	fp, [pc, #272]	; 800d574 <_strtod_l+0x5ac>
 800d466:	6023      	str	r3, [r4, #0]
 800d468:	f04f 0a00 	mov.w	sl, #0
 800d46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d46e:	2b00      	cmp	r3, #0
 800d470:	f43f adec 	beq.w	800d04c <_strtod_l+0x84>
 800d474:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d476:	4620      	mov	r0, r4
 800d478:	f001 ff34 	bl	800f2e4 <_Bfree>
 800d47c:	9907      	ldr	r1, [sp, #28]
 800d47e:	4620      	mov	r0, r4
 800d480:	f001 ff30 	bl	800f2e4 <_Bfree>
 800d484:	4631      	mov	r1, r6
 800d486:	4620      	mov	r0, r4
 800d488:	f001 ff2c 	bl	800f2e4 <_Bfree>
 800d48c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d48e:	4620      	mov	r0, r4
 800d490:	f001 ff28 	bl	800f2e4 <_Bfree>
 800d494:	4629      	mov	r1, r5
 800d496:	4620      	mov	r0, r4
 800d498:	f001 ff24 	bl	800f2e4 <_Bfree>
 800d49c:	e5d6      	b.n	800d04c <_strtod_l+0x84>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d4a4:	4650      	mov	r0, sl
 800d4a6:	4659      	mov	r1, fp
 800d4a8:	4699      	mov	r9, r3
 800d4aa:	f1b8 0f01 	cmp.w	r8, #1
 800d4ae:	dc21      	bgt.n	800d4f4 <_strtod_l+0x52c>
 800d4b0:	b10b      	cbz	r3, 800d4b6 <_strtod_l+0x4ee>
 800d4b2:	4682      	mov	sl, r0
 800d4b4:	468b      	mov	fp, r1
 800d4b6:	4b2e      	ldr	r3, [pc, #184]	; (800d570 <_strtod_l+0x5a8>)
 800d4b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d4bc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d4c0:	4652      	mov	r2, sl
 800d4c2:	465b      	mov	r3, fp
 800d4c4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d4c8:	f7f3 f8ae 	bl	8000628 <__aeabi_dmul>
 800d4cc:	4b29      	ldr	r3, [pc, #164]	; (800d574 <_strtod_l+0x5ac>)
 800d4ce:	460a      	mov	r2, r1
 800d4d0:	400b      	ands	r3, r1
 800d4d2:	4929      	ldr	r1, [pc, #164]	; (800d578 <_strtod_l+0x5b0>)
 800d4d4:	428b      	cmp	r3, r1
 800d4d6:	4682      	mov	sl, r0
 800d4d8:	d8be      	bhi.n	800d458 <_strtod_l+0x490>
 800d4da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d4de:	428b      	cmp	r3, r1
 800d4e0:	bf86      	itte	hi
 800d4e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d57c <_strtod_l+0x5b4>
 800d4e6:	f04f 3aff 	movhi.w	sl, #4294967295
 800d4ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	9304      	str	r3, [sp, #16]
 800d4f2:	e081      	b.n	800d5f8 <_strtod_l+0x630>
 800d4f4:	f018 0f01 	tst.w	r8, #1
 800d4f8:	d007      	beq.n	800d50a <_strtod_l+0x542>
 800d4fa:	4b1d      	ldr	r3, [pc, #116]	; (800d570 <_strtod_l+0x5a8>)
 800d4fc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	f7f3 f890 	bl	8000628 <__aeabi_dmul>
 800d508:	2301      	movs	r3, #1
 800d50a:	f109 0901 	add.w	r9, r9, #1
 800d50e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d512:	e7ca      	b.n	800d4aa <_strtod_l+0x4e2>
 800d514:	d0eb      	beq.n	800d4ee <_strtod_l+0x526>
 800d516:	f1c8 0800 	rsb	r8, r8, #0
 800d51a:	f018 020f 	ands.w	r2, r8, #15
 800d51e:	d00a      	beq.n	800d536 <_strtod_l+0x56e>
 800d520:	4b12      	ldr	r3, [pc, #72]	; (800d56c <_strtod_l+0x5a4>)
 800d522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d526:	4650      	mov	r0, sl
 800d528:	4659      	mov	r1, fp
 800d52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52e:	f7f3 f9a5 	bl	800087c <__aeabi_ddiv>
 800d532:	4682      	mov	sl, r0
 800d534:	468b      	mov	fp, r1
 800d536:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d53a:	d0d8      	beq.n	800d4ee <_strtod_l+0x526>
 800d53c:	f1b8 0f1f 	cmp.w	r8, #31
 800d540:	dd1e      	ble.n	800d580 <_strtod_l+0x5b8>
 800d542:	2500      	movs	r5, #0
 800d544:	462e      	mov	r6, r5
 800d546:	9509      	str	r5, [sp, #36]	; 0x24
 800d548:	9507      	str	r5, [sp, #28]
 800d54a:	2322      	movs	r3, #34	; 0x22
 800d54c:	f04f 0a00 	mov.w	sl, #0
 800d550:	f04f 0b00 	mov.w	fp, #0
 800d554:	6023      	str	r3, [r4, #0]
 800d556:	e789      	b.n	800d46c <_strtod_l+0x4a4>
 800d558:	080241ed 	.word	0x080241ed
 800d55c:	08024230 	.word	0x08024230
 800d560:	080241e5 	.word	0x080241e5
 800d564:	08024428 	.word	0x08024428
 800d568:	08024323 	.word	0x08024323
 800d56c:	080245a8 	.word	0x080245a8
 800d570:	08024580 	.word	0x08024580
 800d574:	7ff00000 	.word	0x7ff00000
 800d578:	7ca00000 	.word	0x7ca00000
 800d57c:	7fefffff 	.word	0x7fefffff
 800d580:	f018 0310 	ands.w	r3, r8, #16
 800d584:	bf18      	it	ne
 800d586:	236a      	movne	r3, #106	; 0x6a
 800d588:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d940 <_strtod_l+0x978>
 800d58c:	9304      	str	r3, [sp, #16]
 800d58e:	4650      	mov	r0, sl
 800d590:	4659      	mov	r1, fp
 800d592:	2300      	movs	r3, #0
 800d594:	f018 0f01 	tst.w	r8, #1
 800d598:	d004      	beq.n	800d5a4 <_strtod_l+0x5dc>
 800d59a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d59e:	f7f3 f843 	bl	8000628 <__aeabi_dmul>
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d5a8:	f109 0908 	add.w	r9, r9, #8
 800d5ac:	d1f2      	bne.n	800d594 <_strtod_l+0x5cc>
 800d5ae:	b10b      	cbz	r3, 800d5b4 <_strtod_l+0x5ec>
 800d5b0:	4682      	mov	sl, r0
 800d5b2:	468b      	mov	fp, r1
 800d5b4:	9b04      	ldr	r3, [sp, #16]
 800d5b6:	b1bb      	cbz	r3, 800d5e8 <_strtod_l+0x620>
 800d5b8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d5bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	4659      	mov	r1, fp
 800d5c4:	dd10      	ble.n	800d5e8 <_strtod_l+0x620>
 800d5c6:	2b1f      	cmp	r3, #31
 800d5c8:	f340 8128 	ble.w	800d81c <_strtod_l+0x854>
 800d5cc:	2b34      	cmp	r3, #52	; 0x34
 800d5ce:	bfde      	ittt	le
 800d5d0:	3b20      	suble	r3, #32
 800d5d2:	f04f 32ff 	movle.w	r2, #4294967295
 800d5d6:	fa02 f303 	lslle.w	r3, r2, r3
 800d5da:	f04f 0a00 	mov.w	sl, #0
 800d5de:	bfcc      	ite	gt
 800d5e0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d5e4:	ea03 0b01 	andle.w	fp, r3, r1
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	4650      	mov	r0, sl
 800d5ee:	4659      	mov	r1, fp
 800d5f0:	f7f3 fa82 	bl	8000af8 <__aeabi_dcmpeq>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d1a4      	bne.n	800d542 <_strtod_l+0x57a>
 800d5f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5fa:	9300      	str	r3, [sp, #0]
 800d5fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d5fe:	462b      	mov	r3, r5
 800d600:	463a      	mov	r2, r7
 800d602:	4620      	mov	r0, r4
 800d604:	f001 feda 	bl	800f3bc <__s2b>
 800d608:	9009      	str	r0, [sp, #36]	; 0x24
 800d60a:	2800      	cmp	r0, #0
 800d60c:	f43f af24 	beq.w	800d458 <_strtod_l+0x490>
 800d610:	9b07      	ldr	r3, [sp, #28]
 800d612:	1b9e      	subs	r6, r3, r6
 800d614:	9b08      	ldr	r3, [sp, #32]
 800d616:	2b00      	cmp	r3, #0
 800d618:	bfb4      	ite	lt
 800d61a:	4633      	movlt	r3, r6
 800d61c:	2300      	movge	r3, #0
 800d61e:	9310      	str	r3, [sp, #64]	; 0x40
 800d620:	9b08      	ldr	r3, [sp, #32]
 800d622:	2500      	movs	r5, #0
 800d624:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d628:	9318      	str	r3, [sp, #96]	; 0x60
 800d62a:	462e      	mov	r6, r5
 800d62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d62e:	4620      	mov	r0, r4
 800d630:	6859      	ldr	r1, [r3, #4]
 800d632:	f001 fe17 	bl	800f264 <_Balloc>
 800d636:	9007      	str	r0, [sp, #28]
 800d638:	2800      	cmp	r0, #0
 800d63a:	f43f af11 	beq.w	800d460 <_strtod_l+0x498>
 800d63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d640:	691a      	ldr	r2, [r3, #16]
 800d642:	3202      	adds	r2, #2
 800d644:	f103 010c 	add.w	r1, r3, #12
 800d648:	0092      	lsls	r2, r2, #2
 800d64a:	300c      	adds	r0, #12
 800d64c:	f001 fdfc 	bl	800f248 <memcpy>
 800d650:	ec4b ab10 	vmov	d0, sl, fp
 800d654:	aa20      	add	r2, sp, #128	; 0x80
 800d656:	a91f      	add	r1, sp, #124	; 0x7c
 800d658:	4620      	mov	r0, r4
 800d65a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d65e:	f002 f9e9 	bl	800fa34 <__d2b>
 800d662:	901e      	str	r0, [sp, #120]	; 0x78
 800d664:	2800      	cmp	r0, #0
 800d666:	f43f aefb 	beq.w	800d460 <_strtod_l+0x498>
 800d66a:	2101      	movs	r1, #1
 800d66c:	4620      	mov	r0, r4
 800d66e:	f001 ff3f 	bl	800f4f0 <__i2b>
 800d672:	4606      	mov	r6, r0
 800d674:	2800      	cmp	r0, #0
 800d676:	f43f aef3 	beq.w	800d460 <_strtod_l+0x498>
 800d67a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d67c:	9904      	ldr	r1, [sp, #16]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	bfab      	itete	ge
 800d682:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800d684:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800d686:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800d688:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800d68c:	bfac      	ite	ge
 800d68e:	eb03 0902 	addge.w	r9, r3, r2
 800d692:	1ad7      	sublt	r7, r2, r3
 800d694:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d696:	eba3 0801 	sub.w	r8, r3, r1
 800d69a:	4490      	add	r8, r2
 800d69c:	4ba3      	ldr	r3, [pc, #652]	; (800d92c <_strtod_l+0x964>)
 800d69e:	f108 38ff 	add.w	r8, r8, #4294967295
 800d6a2:	4598      	cmp	r8, r3
 800d6a4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d6a8:	f280 80cc 	bge.w	800d844 <_strtod_l+0x87c>
 800d6ac:	eba3 0308 	sub.w	r3, r3, r8
 800d6b0:	2b1f      	cmp	r3, #31
 800d6b2:	eba2 0203 	sub.w	r2, r2, r3
 800d6b6:	f04f 0101 	mov.w	r1, #1
 800d6ba:	f300 80b6 	bgt.w	800d82a <_strtod_l+0x862>
 800d6be:	fa01 f303 	lsl.w	r3, r1, r3
 800d6c2:	9311      	str	r3, [sp, #68]	; 0x44
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	930c      	str	r3, [sp, #48]	; 0x30
 800d6c8:	eb09 0802 	add.w	r8, r9, r2
 800d6cc:	9b04      	ldr	r3, [sp, #16]
 800d6ce:	45c1      	cmp	r9, r8
 800d6d0:	4417      	add	r7, r2
 800d6d2:	441f      	add	r7, r3
 800d6d4:	464b      	mov	r3, r9
 800d6d6:	bfa8      	it	ge
 800d6d8:	4643      	movge	r3, r8
 800d6da:	42bb      	cmp	r3, r7
 800d6dc:	bfa8      	it	ge
 800d6de:	463b      	movge	r3, r7
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	bfc2      	ittt	gt
 800d6e4:	eba8 0803 	subgt.w	r8, r8, r3
 800d6e8:	1aff      	subgt	r7, r7, r3
 800d6ea:	eba9 0903 	subgt.w	r9, r9, r3
 800d6ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	dd17      	ble.n	800d724 <_strtod_l+0x75c>
 800d6f4:	4631      	mov	r1, r6
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f001 ffb5 	bl	800f668 <__pow5mult>
 800d6fe:	4606      	mov	r6, r0
 800d700:	2800      	cmp	r0, #0
 800d702:	f43f aead 	beq.w	800d460 <_strtod_l+0x498>
 800d706:	4601      	mov	r1, r0
 800d708:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d70a:	4620      	mov	r0, r4
 800d70c:	f001 ff06 	bl	800f51c <__multiply>
 800d710:	900f      	str	r0, [sp, #60]	; 0x3c
 800d712:	2800      	cmp	r0, #0
 800d714:	f43f aea4 	beq.w	800d460 <_strtod_l+0x498>
 800d718:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d71a:	4620      	mov	r0, r4
 800d71c:	f001 fde2 	bl	800f2e4 <_Bfree>
 800d720:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d722:	931e      	str	r3, [sp, #120]	; 0x78
 800d724:	f1b8 0f00 	cmp.w	r8, #0
 800d728:	f300 8091 	bgt.w	800d84e <_strtod_l+0x886>
 800d72c:	9b08      	ldr	r3, [sp, #32]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	dd08      	ble.n	800d744 <_strtod_l+0x77c>
 800d732:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d734:	9907      	ldr	r1, [sp, #28]
 800d736:	4620      	mov	r0, r4
 800d738:	f001 ff96 	bl	800f668 <__pow5mult>
 800d73c:	9007      	str	r0, [sp, #28]
 800d73e:	2800      	cmp	r0, #0
 800d740:	f43f ae8e 	beq.w	800d460 <_strtod_l+0x498>
 800d744:	2f00      	cmp	r7, #0
 800d746:	dd08      	ble.n	800d75a <_strtod_l+0x792>
 800d748:	9907      	ldr	r1, [sp, #28]
 800d74a:	463a      	mov	r2, r7
 800d74c:	4620      	mov	r0, r4
 800d74e:	f001 ffe5 	bl	800f71c <__lshift>
 800d752:	9007      	str	r0, [sp, #28]
 800d754:	2800      	cmp	r0, #0
 800d756:	f43f ae83 	beq.w	800d460 <_strtod_l+0x498>
 800d75a:	f1b9 0f00 	cmp.w	r9, #0
 800d75e:	dd08      	ble.n	800d772 <_strtod_l+0x7aa>
 800d760:	4631      	mov	r1, r6
 800d762:	464a      	mov	r2, r9
 800d764:	4620      	mov	r0, r4
 800d766:	f001 ffd9 	bl	800f71c <__lshift>
 800d76a:	4606      	mov	r6, r0
 800d76c:	2800      	cmp	r0, #0
 800d76e:	f43f ae77 	beq.w	800d460 <_strtod_l+0x498>
 800d772:	9a07      	ldr	r2, [sp, #28]
 800d774:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d776:	4620      	mov	r0, r4
 800d778:	f002 f858 	bl	800f82c <__mdiff>
 800d77c:	4605      	mov	r5, r0
 800d77e:	2800      	cmp	r0, #0
 800d780:	f43f ae6e 	beq.w	800d460 <_strtod_l+0x498>
 800d784:	68c3      	ldr	r3, [r0, #12]
 800d786:	930f      	str	r3, [sp, #60]	; 0x3c
 800d788:	2300      	movs	r3, #0
 800d78a:	60c3      	str	r3, [r0, #12]
 800d78c:	4631      	mov	r1, r6
 800d78e:	f002 f831 	bl	800f7f4 <__mcmp>
 800d792:	2800      	cmp	r0, #0
 800d794:	da65      	bge.n	800d862 <_strtod_l+0x89a>
 800d796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d798:	ea53 030a 	orrs.w	r3, r3, sl
 800d79c:	f040 8087 	bne.w	800d8ae <_strtod_l+0x8e6>
 800d7a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f040 8082 	bne.w	800d8ae <_strtod_l+0x8e6>
 800d7aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d7ae:	0d1b      	lsrs	r3, r3, #20
 800d7b0:	051b      	lsls	r3, r3, #20
 800d7b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d7b6:	d97a      	bls.n	800d8ae <_strtod_l+0x8e6>
 800d7b8:	696b      	ldr	r3, [r5, #20]
 800d7ba:	b913      	cbnz	r3, 800d7c2 <_strtod_l+0x7fa>
 800d7bc:	692b      	ldr	r3, [r5, #16]
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	dd75      	ble.n	800d8ae <_strtod_l+0x8e6>
 800d7c2:	4629      	mov	r1, r5
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	f001 ffa8 	bl	800f71c <__lshift>
 800d7cc:	4631      	mov	r1, r6
 800d7ce:	4605      	mov	r5, r0
 800d7d0:	f002 f810 	bl	800f7f4 <__mcmp>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	dd6a      	ble.n	800d8ae <_strtod_l+0x8e6>
 800d7d8:	9904      	ldr	r1, [sp, #16]
 800d7da:	4a55      	ldr	r2, [pc, #340]	; (800d930 <_strtod_l+0x968>)
 800d7dc:	465b      	mov	r3, fp
 800d7de:	2900      	cmp	r1, #0
 800d7e0:	f000 8085 	beq.w	800d8ee <_strtod_l+0x926>
 800d7e4:	ea02 010b 	and.w	r1, r2, fp
 800d7e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d7ec:	dc7f      	bgt.n	800d8ee <_strtod_l+0x926>
 800d7ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d7f2:	f77f aeaa 	ble.w	800d54a <_strtod_l+0x582>
 800d7f6:	4a4f      	ldr	r2, [pc, #316]	; (800d934 <_strtod_l+0x96c>)
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800d7fe:	4650      	mov	r0, sl
 800d800:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800d804:	4659      	mov	r1, fp
 800d806:	f7f2 ff0f 	bl	8000628 <__aeabi_dmul>
 800d80a:	460b      	mov	r3, r1
 800d80c:	4303      	orrs	r3, r0
 800d80e:	bf08      	it	eq
 800d810:	2322      	moveq	r3, #34	; 0x22
 800d812:	4682      	mov	sl, r0
 800d814:	468b      	mov	fp, r1
 800d816:	bf08      	it	eq
 800d818:	6023      	streq	r3, [r4, #0]
 800d81a:	e62b      	b.n	800d474 <_strtod_l+0x4ac>
 800d81c:	f04f 32ff 	mov.w	r2, #4294967295
 800d820:	fa02 f303 	lsl.w	r3, r2, r3
 800d824:	ea03 0a0a 	and.w	sl, r3, sl
 800d828:	e6de      	b.n	800d5e8 <_strtod_l+0x620>
 800d82a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d82e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d832:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d836:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d83a:	fa01 f308 	lsl.w	r3, r1, r8
 800d83e:	930c      	str	r3, [sp, #48]	; 0x30
 800d840:	9111      	str	r1, [sp, #68]	; 0x44
 800d842:	e741      	b.n	800d6c8 <_strtod_l+0x700>
 800d844:	2300      	movs	r3, #0
 800d846:	930c      	str	r3, [sp, #48]	; 0x30
 800d848:	2301      	movs	r3, #1
 800d84a:	9311      	str	r3, [sp, #68]	; 0x44
 800d84c:	e73c      	b.n	800d6c8 <_strtod_l+0x700>
 800d84e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d850:	4642      	mov	r2, r8
 800d852:	4620      	mov	r0, r4
 800d854:	f001 ff62 	bl	800f71c <__lshift>
 800d858:	901e      	str	r0, [sp, #120]	; 0x78
 800d85a:	2800      	cmp	r0, #0
 800d85c:	f47f af66 	bne.w	800d72c <_strtod_l+0x764>
 800d860:	e5fe      	b.n	800d460 <_strtod_l+0x498>
 800d862:	465f      	mov	r7, fp
 800d864:	d16e      	bne.n	800d944 <_strtod_l+0x97c>
 800d866:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d868:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d86c:	b342      	cbz	r2, 800d8c0 <_strtod_l+0x8f8>
 800d86e:	4a32      	ldr	r2, [pc, #200]	; (800d938 <_strtod_l+0x970>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d128      	bne.n	800d8c6 <_strtod_l+0x8fe>
 800d874:	9b04      	ldr	r3, [sp, #16]
 800d876:	4650      	mov	r0, sl
 800d878:	b1eb      	cbz	r3, 800d8b6 <_strtod_l+0x8ee>
 800d87a:	4a2d      	ldr	r2, [pc, #180]	; (800d930 <_strtod_l+0x968>)
 800d87c:	403a      	ands	r2, r7
 800d87e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d882:	f04f 31ff 	mov.w	r1, #4294967295
 800d886:	d819      	bhi.n	800d8bc <_strtod_l+0x8f4>
 800d888:	0d12      	lsrs	r2, r2, #20
 800d88a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d88e:	fa01 f303 	lsl.w	r3, r1, r3
 800d892:	4298      	cmp	r0, r3
 800d894:	d117      	bne.n	800d8c6 <_strtod_l+0x8fe>
 800d896:	4b29      	ldr	r3, [pc, #164]	; (800d93c <_strtod_l+0x974>)
 800d898:	429f      	cmp	r7, r3
 800d89a:	d102      	bne.n	800d8a2 <_strtod_l+0x8da>
 800d89c:	3001      	adds	r0, #1
 800d89e:	f43f addf 	beq.w	800d460 <_strtod_l+0x498>
 800d8a2:	4b23      	ldr	r3, [pc, #140]	; (800d930 <_strtod_l+0x968>)
 800d8a4:	403b      	ands	r3, r7
 800d8a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d8aa:	f04f 0a00 	mov.w	sl, #0
 800d8ae:	9b04      	ldr	r3, [sp, #16]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d1a0      	bne.n	800d7f6 <_strtod_l+0x82e>
 800d8b4:	e5de      	b.n	800d474 <_strtod_l+0x4ac>
 800d8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ba:	e7ea      	b.n	800d892 <_strtod_l+0x8ca>
 800d8bc:	460b      	mov	r3, r1
 800d8be:	e7e8      	b.n	800d892 <_strtod_l+0x8ca>
 800d8c0:	ea53 030a 	orrs.w	r3, r3, sl
 800d8c4:	d088      	beq.n	800d7d8 <_strtod_l+0x810>
 800d8c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8c8:	b1db      	cbz	r3, 800d902 <_strtod_l+0x93a>
 800d8ca:	423b      	tst	r3, r7
 800d8cc:	d0ef      	beq.n	800d8ae <_strtod_l+0x8e6>
 800d8ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8d0:	9a04      	ldr	r2, [sp, #16]
 800d8d2:	4650      	mov	r0, sl
 800d8d4:	4659      	mov	r1, fp
 800d8d6:	b1c3      	cbz	r3, 800d90a <_strtod_l+0x942>
 800d8d8:	f7ff fb5a 	bl	800cf90 <sulp>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	460b      	mov	r3, r1
 800d8e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d8e4:	f7f2 fcea 	bl	80002bc <__adddf3>
 800d8e8:	4682      	mov	sl, r0
 800d8ea:	468b      	mov	fp, r1
 800d8ec:	e7df      	b.n	800d8ae <_strtod_l+0x8e6>
 800d8ee:	4013      	ands	r3, r2
 800d8f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d8f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d8f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d8fc:	f04f 3aff 	mov.w	sl, #4294967295
 800d900:	e7d5      	b.n	800d8ae <_strtod_l+0x8e6>
 800d902:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d904:	ea13 0f0a 	tst.w	r3, sl
 800d908:	e7e0      	b.n	800d8cc <_strtod_l+0x904>
 800d90a:	f7ff fb41 	bl	800cf90 <sulp>
 800d90e:	4602      	mov	r2, r0
 800d910:	460b      	mov	r3, r1
 800d912:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d916:	f7f2 fccf 	bl	80002b8 <__aeabi_dsub>
 800d91a:	2200      	movs	r2, #0
 800d91c:	2300      	movs	r3, #0
 800d91e:	4682      	mov	sl, r0
 800d920:	468b      	mov	fp, r1
 800d922:	f7f3 f8e9 	bl	8000af8 <__aeabi_dcmpeq>
 800d926:	2800      	cmp	r0, #0
 800d928:	d0c1      	beq.n	800d8ae <_strtod_l+0x8e6>
 800d92a:	e60e      	b.n	800d54a <_strtod_l+0x582>
 800d92c:	fffffc02 	.word	0xfffffc02
 800d930:	7ff00000 	.word	0x7ff00000
 800d934:	39500000 	.word	0x39500000
 800d938:	000fffff 	.word	0x000fffff
 800d93c:	7fefffff 	.word	0x7fefffff
 800d940:	08024248 	.word	0x08024248
 800d944:	4631      	mov	r1, r6
 800d946:	4628      	mov	r0, r5
 800d948:	f002 f8d0 	bl	800faec <__ratio>
 800d94c:	ec59 8b10 	vmov	r8, r9, d0
 800d950:	ee10 0a10 	vmov	r0, s0
 800d954:	2200      	movs	r2, #0
 800d956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d95a:	4649      	mov	r1, r9
 800d95c:	f7f3 f8e0 	bl	8000b20 <__aeabi_dcmple>
 800d960:	2800      	cmp	r0, #0
 800d962:	d07c      	beq.n	800da5e <_strtod_l+0xa96>
 800d964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d966:	2b00      	cmp	r3, #0
 800d968:	d04c      	beq.n	800da04 <_strtod_l+0xa3c>
 800d96a:	4b95      	ldr	r3, [pc, #596]	; (800dbc0 <_strtod_l+0xbf8>)
 800d96c:	2200      	movs	r2, #0
 800d96e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d972:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dbc0 <_strtod_l+0xbf8>
 800d976:	f04f 0800 	mov.w	r8, #0
 800d97a:	4b92      	ldr	r3, [pc, #584]	; (800dbc4 <_strtod_l+0xbfc>)
 800d97c:	403b      	ands	r3, r7
 800d97e:	9311      	str	r3, [sp, #68]	; 0x44
 800d980:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d982:	4b91      	ldr	r3, [pc, #580]	; (800dbc8 <_strtod_l+0xc00>)
 800d984:	429a      	cmp	r2, r3
 800d986:	f040 80b2 	bne.w	800daee <_strtod_l+0xb26>
 800d98a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d98e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d992:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d996:	ec4b ab10 	vmov	d0, sl, fp
 800d99a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d99e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d9a2:	f001 ffcb 	bl	800f93c <__ulp>
 800d9a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d9aa:	ec53 2b10 	vmov	r2, r3, d0
 800d9ae:	f7f2 fe3b 	bl	8000628 <__aeabi_dmul>
 800d9b2:	4652      	mov	r2, sl
 800d9b4:	465b      	mov	r3, fp
 800d9b6:	f7f2 fc81 	bl	80002bc <__adddf3>
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	4981      	ldr	r1, [pc, #516]	; (800dbc4 <_strtod_l+0xbfc>)
 800d9be:	4a83      	ldr	r2, [pc, #524]	; (800dbcc <_strtod_l+0xc04>)
 800d9c0:	4019      	ands	r1, r3
 800d9c2:	4291      	cmp	r1, r2
 800d9c4:	4682      	mov	sl, r0
 800d9c6:	d95e      	bls.n	800da86 <_strtod_l+0xabe>
 800d9c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d103      	bne.n	800d9da <_strtod_l+0xa12>
 800d9d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	f43f ad43 	beq.w	800d460 <_strtod_l+0x498>
 800d9da:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800dbd8 <_strtod_l+0xc10>
 800d9de:	f04f 3aff 	mov.w	sl, #4294967295
 800d9e2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f001 fc7d 	bl	800f2e4 <_Bfree>
 800d9ea:	9907      	ldr	r1, [sp, #28]
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	f001 fc79 	bl	800f2e4 <_Bfree>
 800d9f2:	4631      	mov	r1, r6
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	f001 fc75 	bl	800f2e4 <_Bfree>
 800d9fa:	4629      	mov	r1, r5
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f001 fc71 	bl	800f2e4 <_Bfree>
 800da02:	e613      	b.n	800d62c <_strtod_l+0x664>
 800da04:	f1ba 0f00 	cmp.w	sl, #0
 800da08:	d11b      	bne.n	800da42 <_strtod_l+0xa7a>
 800da0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da0e:	b9f3      	cbnz	r3, 800da4e <_strtod_l+0xa86>
 800da10:	4b6b      	ldr	r3, [pc, #428]	; (800dbc0 <_strtod_l+0xbf8>)
 800da12:	2200      	movs	r2, #0
 800da14:	4640      	mov	r0, r8
 800da16:	4649      	mov	r1, r9
 800da18:	f7f3 f878 	bl	8000b0c <__aeabi_dcmplt>
 800da1c:	b9d0      	cbnz	r0, 800da54 <_strtod_l+0xa8c>
 800da1e:	4640      	mov	r0, r8
 800da20:	4649      	mov	r1, r9
 800da22:	4b6b      	ldr	r3, [pc, #428]	; (800dbd0 <_strtod_l+0xc08>)
 800da24:	2200      	movs	r2, #0
 800da26:	f7f2 fdff 	bl	8000628 <__aeabi_dmul>
 800da2a:	4680      	mov	r8, r0
 800da2c:	4689      	mov	r9, r1
 800da2e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800da32:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800da36:	931b      	str	r3, [sp, #108]	; 0x6c
 800da38:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800da3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800da40:	e79b      	b.n	800d97a <_strtod_l+0x9b2>
 800da42:	f1ba 0f01 	cmp.w	sl, #1
 800da46:	d102      	bne.n	800da4e <_strtod_l+0xa86>
 800da48:	2f00      	cmp	r7, #0
 800da4a:	f43f ad7e 	beq.w	800d54a <_strtod_l+0x582>
 800da4e:	4b61      	ldr	r3, [pc, #388]	; (800dbd4 <_strtod_l+0xc0c>)
 800da50:	2200      	movs	r2, #0
 800da52:	e78c      	b.n	800d96e <_strtod_l+0x9a6>
 800da54:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dbd0 <_strtod_l+0xc08>
 800da58:	f04f 0800 	mov.w	r8, #0
 800da5c:	e7e7      	b.n	800da2e <_strtod_l+0xa66>
 800da5e:	4b5c      	ldr	r3, [pc, #368]	; (800dbd0 <_strtod_l+0xc08>)
 800da60:	4640      	mov	r0, r8
 800da62:	4649      	mov	r1, r9
 800da64:	2200      	movs	r2, #0
 800da66:	f7f2 fddf 	bl	8000628 <__aeabi_dmul>
 800da6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da6c:	4680      	mov	r8, r0
 800da6e:	4689      	mov	r9, r1
 800da70:	b933      	cbnz	r3, 800da80 <_strtod_l+0xab8>
 800da72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da76:	9012      	str	r0, [sp, #72]	; 0x48
 800da78:	9313      	str	r3, [sp, #76]	; 0x4c
 800da7a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800da7e:	e7dd      	b.n	800da3c <_strtod_l+0xa74>
 800da80:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800da84:	e7f9      	b.n	800da7a <_strtod_l+0xab2>
 800da86:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800da8a:	9b04      	ldr	r3, [sp, #16]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1a8      	bne.n	800d9e2 <_strtod_l+0xa1a>
 800da90:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800da96:	0d1b      	lsrs	r3, r3, #20
 800da98:	051b      	lsls	r3, r3, #20
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d1a1      	bne.n	800d9e2 <_strtod_l+0xa1a>
 800da9e:	4640      	mov	r0, r8
 800daa0:	4649      	mov	r1, r9
 800daa2:	f7f3 f921 	bl	8000ce8 <__aeabi_d2lz>
 800daa6:	f7f2 fd91 	bl	80005cc <__aeabi_l2d>
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	4640      	mov	r0, r8
 800dab0:	4649      	mov	r1, r9
 800dab2:	f7f2 fc01 	bl	80002b8 <__aeabi_dsub>
 800dab6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dab8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dabc:	ea43 030a 	orr.w	r3, r3, sl
 800dac0:	4313      	orrs	r3, r2
 800dac2:	4680      	mov	r8, r0
 800dac4:	4689      	mov	r9, r1
 800dac6:	d053      	beq.n	800db70 <_strtod_l+0xba8>
 800dac8:	a335      	add	r3, pc, #212	; (adr r3, 800dba0 <_strtod_l+0xbd8>)
 800daca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dace:	f7f3 f81d 	bl	8000b0c <__aeabi_dcmplt>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	f47f acce 	bne.w	800d474 <_strtod_l+0x4ac>
 800dad8:	a333      	add	r3, pc, #204	; (adr r3, 800dba8 <_strtod_l+0xbe0>)
 800dada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dade:	4640      	mov	r0, r8
 800dae0:	4649      	mov	r1, r9
 800dae2:	f7f3 f831 	bl	8000b48 <__aeabi_dcmpgt>
 800dae6:	2800      	cmp	r0, #0
 800dae8:	f43f af7b 	beq.w	800d9e2 <_strtod_l+0xa1a>
 800daec:	e4c2      	b.n	800d474 <_strtod_l+0x4ac>
 800daee:	9b04      	ldr	r3, [sp, #16]
 800daf0:	b333      	cbz	r3, 800db40 <_strtod_l+0xb78>
 800daf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800daf4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800daf8:	d822      	bhi.n	800db40 <_strtod_l+0xb78>
 800dafa:	a32d      	add	r3, pc, #180	; (adr r3, 800dbb0 <_strtod_l+0xbe8>)
 800dafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db00:	4640      	mov	r0, r8
 800db02:	4649      	mov	r1, r9
 800db04:	f7f3 f80c 	bl	8000b20 <__aeabi_dcmple>
 800db08:	b1a0      	cbz	r0, 800db34 <_strtod_l+0xb6c>
 800db0a:	4649      	mov	r1, r9
 800db0c:	4640      	mov	r0, r8
 800db0e:	f7f3 f863 	bl	8000bd8 <__aeabi_d2uiz>
 800db12:	2801      	cmp	r0, #1
 800db14:	bf38      	it	cc
 800db16:	2001      	movcc	r0, #1
 800db18:	f7f2 fd0c 	bl	8000534 <__aeabi_ui2d>
 800db1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db1e:	4680      	mov	r8, r0
 800db20:	4689      	mov	r9, r1
 800db22:	bb13      	cbnz	r3, 800db6a <_strtod_l+0xba2>
 800db24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db28:	9014      	str	r0, [sp, #80]	; 0x50
 800db2a:	9315      	str	r3, [sp, #84]	; 0x54
 800db2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800db30:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800db34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800db38:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800db3c:	1a9b      	subs	r3, r3, r2
 800db3e:	930d      	str	r3, [sp, #52]	; 0x34
 800db40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db44:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800db48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800db4c:	f001 fef6 	bl	800f93c <__ulp>
 800db50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db54:	ec53 2b10 	vmov	r2, r3, d0
 800db58:	f7f2 fd66 	bl	8000628 <__aeabi_dmul>
 800db5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800db60:	f7f2 fbac 	bl	80002bc <__adddf3>
 800db64:	4682      	mov	sl, r0
 800db66:	468b      	mov	fp, r1
 800db68:	e78f      	b.n	800da8a <_strtod_l+0xac2>
 800db6a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800db6e:	e7dd      	b.n	800db2c <_strtod_l+0xb64>
 800db70:	a311      	add	r3, pc, #68	; (adr r3, 800dbb8 <_strtod_l+0xbf0>)
 800db72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db76:	f7f2 ffc9 	bl	8000b0c <__aeabi_dcmplt>
 800db7a:	e7b4      	b.n	800dae6 <_strtod_l+0xb1e>
 800db7c:	2300      	movs	r3, #0
 800db7e:	930e      	str	r3, [sp, #56]	; 0x38
 800db80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800db82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800db84:	6013      	str	r3, [r2, #0]
 800db86:	f7ff ba65 	b.w	800d054 <_strtod_l+0x8c>
 800db8a:	2b65      	cmp	r3, #101	; 0x65
 800db8c:	f43f ab5d 	beq.w	800d24a <_strtod_l+0x282>
 800db90:	2b45      	cmp	r3, #69	; 0x45
 800db92:	f43f ab5a 	beq.w	800d24a <_strtod_l+0x282>
 800db96:	2201      	movs	r2, #1
 800db98:	f7ff bb92 	b.w	800d2c0 <_strtod_l+0x2f8>
 800db9c:	f3af 8000 	nop.w
 800dba0:	94a03595 	.word	0x94a03595
 800dba4:	3fdfffff 	.word	0x3fdfffff
 800dba8:	35afe535 	.word	0x35afe535
 800dbac:	3fe00000 	.word	0x3fe00000
 800dbb0:	ffc00000 	.word	0xffc00000
 800dbb4:	41dfffff 	.word	0x41dfffff
 800dbb8:	94a03595 	.word	0x94a03595
 800dbbc:	3fcfffff 	.word	0x3fcfffff
 800dbc0:	3ff00000 	.word	0x3ff00000
 800dbc4:	7ff00000 	.word	0x7ff00000
 800dbc8:	7fe00000 	.word	0x7fe00000
 800dbcc:	7c9fffff 	.word	0x7c9fffff
 800dbd0:	3fe00000 	.word	0x3fe00000
 800dbd4:	bff00000 	.word	0xbff00000
 800dbd8:	7fefffff 	.word	0x7fefffff

0800dbdc <_strtod_r>:
 800dbdc:	4b01      	ldr	r3, [pc, #4]	; (800dbe4 <_strtod_r+0x8>)
 800dbde:	f7ff b9f3 	b.w	800cfc8 <_strtod_l>
 800dbe2:	bf00      	nop
 800dbe4:	200000a8 	.word	0x200000a8

0800dbe8 <strtod>:
 800dbe8:	460a      	mov	r2, r1
 800dbea:	4601      	mov	r1, r0
 800dbec:	4802      	ldr	r0, [pc, #8]	; (800dbf8 <strtod+0x10>)
 800dbee:	4b03      	ldr	r3, [pc, #12]	; (800dbfc <strtod+0x14>)
 800dbf0:	6800      	ldr	r0, [r0, #0]
 800dbf2:	f7ff b9e9 	b.w	800cfc8 <_strtod_l>
 800dbf6:	bf00      	nop
 800dbf8:	20000040 	.word	0x20000040
 800dbfc:	200000a8 	.word	0x200000a8

0800dc00 <strtok>:
 800dc00:	4b16      	ldr	r3, [pc, #88]	; (800dc5c <strtok+0x5c>)
 800dc02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc04:	681e      	ldr	r6, [r3, #0]
 800dc06:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800dc08:	4605      	mov	r5, r0
 800dc0a:	b9fc      	cbnz	r4, 800dc4c <strtok+0x4c>
 800dc0c:	2050      	movs	r0, #80	; 0x50
 800dc0e:	9101      	str	r1, [sp, #4]
 800dc10:	f001 fb00 	bl	800f214 <malloc>
 800dc14:	9901      	ldr	r1, [sp, #4]
 800dc16:	65b0      	str	r0, [r6, #88]	; 0x58
 800dc18:	4602      	mov	r2, r0
 800dc1a:	b920      	cbnz	r0, 800dc26 <strtok+0x26>
 800dc1c:	4b10      	ldr	r3, [pc, #64]	; (800dc60 <strtok+0x60>)
 800dc1e:	4811      	ldr	r0, [pc, #68]	; (800dc64 <strtok+0x64>)
 800dc20:	2157      	movs	r1, #87	; 0x57
 800dc22:	f000 f8d9 	bl	800ddd8 <__assert_func>
 800dc26:	e9c0 4400 	strd	r4, r4, [r0]
 800dc2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800dc2e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800dc32:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800dc36:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800dc3a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800dc3e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800dc42:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800dc46:	6184      	str	r4, [r0, #24]
 800dc48:	7704      	strb	r4, [r0, #28]
 800dc4a:	6244      	str	r4, [r0, #36]	; 0x24
 800dc4c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800dc4e:	2301      	movs	r3, #1
 800dc50:	4628      	mov	r0, r5
 800dc52:	b002      	add	sp, #8
 800dc54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc58:	f000 b806 	b.w	800dc68 <__strtok_r>
 800dc5c:	20000040 	.word	0x20000040
 800dc60:	08024270 	.word	0x08024270
 800dc64:	08024287 	.word	0x08024287

0800dc68 <__strtok_r>:
 800dc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc6a:	b908      	cbnz	r0, 800dc70 <__strtok_r+0x8>
 800dc6c:	6810      	ldr	r0, [r2, #0]
 800dc6e:	b188      	cbz	r0, 800dc94 <__strtok_r+0x2c>
 800dc70:	4604      	mov	r4, r0
 800dc72:	4620      	mov	r0, r4
 800dc74:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dc78:	460f      	mov	r7, r1
 800dc7a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dc7e:	b91e      	cbnz	r6, 800dc88 <__strtok_r+0x20>
 800dc80:	b965      	cbnz	r5, 800dc9c <__strtok_r+0x34>
 800dc82:	6015      	str	r5, [r2, #0]
 800dc84:	4628      	mov	r0, r5
 800dc86:	e005      	b.n	800dc94 <__strtok_r+0x2c>
 800dc88:	42b5      	cmp	r5, r6
 800dc8a:	d1f6      	bne.n	800dc7a <__strtok_r+0x12>
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d1f0      	bne.n	800dc72 <__strtok_r+0xa>
 800dc90:	6014      	str	r4, [r2, #0]
 800dc92:	7003      	strb	r3, [r0, #0]
 800dc94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc96:	461c      	mov	r4, r3
 800dc98:	e00c      	b.n	800dcb4 <__strtok_r+0x4c>
 800dc9a:	b915      	cbnz	r5, 800dca2 <__strtok_r+0x3a>
 800dc9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dca0:	460e      	mov	r6, r1
 800dca2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800dca6:	42ab      	cmp	r3, r5
 800dca8:	d1f7      	bne.n	800dc9a <__strtok_r+0x32>
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d0f3      	beq.n	800dc96 <__strtok_r+0x2e>
 800dcae:	2300      	movs	r3, #0
 800dcb0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800dcb4:	6014      	str	r4, [r2, #0]
 800dcb6:	e7ed      	b.n	800dc94 <__strtok_r+0x2c>

0800dcb8 <_strtol_l.isra.0>:
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcbe:	d001      	beq.n	800dcc4 <_strtol_l.isra.0+0xc>
 800dcc0:	2b24      	cmp	r3, #36	; 0x24
 800dcc2:	d906      	bls.n	800dcd2 <_strtol_l.isra.0+0x1a>
 800dcc4:	f7fe fa92 	bl	800c1ec <__errno>
 800dcc8:	2316      	movs	r3, #22
 800dcca:	6003      	str	r3, [r0, #0]
 800dccc:	2000      	movs	r0, #0
 800dcce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcd2:	4f3a      	ldr	r7, [pc, #232]	; (800ddbc <_strtol_l.isra.0+0x104>)
 800dcd4:	468e      	mov	lr, r1
 800dcd6:	4676      	mov	r6, lr
 800dcd8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800dcdc:	5de5      	ldrb	r5, [r4, r7]
 800dcde:	f015 0508 	ands.w	r5, r5, #8
 800dce2:	d1f8      	bne.n	800dcd6 <_strtol_l.isra.0+0x1e>
 800dce4:	2c2d      	cmp	r4, #45	; 0x2d
 800dce6:	d134      	bne.n	800dd52 <_strtol_l.isra.0+0x9a>
 800dce8:	f89e 4000 	ldrb.w	r4, [lr]
 800dcec:	f04f 0801 	mov.w	r8, #1
 800dcf0:	f106 0e02 	add.w	lr, r6, #2
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d05c      	beq.n	800ddb2 <_strtol_l.isra.0+0xfa>
 800dcf8:	2b10      	cmp	r3, #16
 800dcfa:	d10c      	bne.n	800dd16 <_strtol_l.isra.0+0x5e>
 800dcfc:	2c30      	cmp	r4, #48	; 0x30
 800dcfe:	d10a      	bne.n	800dd16 <_strtol_l.isra.0+0x5e>
 800dd00:	f89e 4000 	ldrb.w	r4, [lr]
 800dd04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dd08:	2c58      	cmp	r4, #88	; 0x58
 800dd0a:	d14d      	bne.n	800dda8 <_strtol_l.isra.0+0xf0>
 800dd0c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800dd10:	2310      	movs	r3, #16
 800dd12:	f10e 0e02 	add.w	lr, lr, #2
 800dd16:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800dd1a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dd1e:	2600      	movs	r6, #0
 800dd20:	fbbc f9f3 	udiv	r9, ip, r3
 800dd24:	4635      	mov	r5, r6
 800dd26:	fb03 ca19 	mls	sl, r3, r9, ip
 800dd2a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800dd2e:	2f09      	cmp	r7, #9
 800dd30:	d818      	bhi.n	800dd64 <_strtol_l.isra.0+0xac>
 800dd32:	463c      	mov	r4, r7
 800dd34:	42a3      	cmp	r3, r4
 800dd36:	dd24      	ble.n	800dd82 <_strtol_l.isra.0+0xca>
 800dd38:	2e00      	cmp	r6, #0
 800dd3a:	db1f      	blt.n	800dd7c <_strtol_l.isra.0+0xc4>
 800dd3c:	45a9      	cmp	r9, r5
 800dd3e:	d31d      	bcc.n	800dd7c <_strtol_l.isra.0+0xc4>
 800dd40:	d101      	bne.n	800dd46 <_strtol_l.isra.0+0x8e>
 800dd42:	45a2      	cmp	sl, r4
 800dd44:	db1a      	blt.n	800dd7c <_strtol_l.isra.0+0xc4>
 800dd46:	fb05 4503 	mla	r5, r5, r3, r4
 800dd4a:	2601      	movs	r6, #1
 800dd4c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800dd50:	e7eb      	b.n	800dd2a <_strtol_l.isra.0+0x72>
 800dd52:	2c2b      	cmp	r4, #43	; 0x2b
 800dd54:	bf08      	it	eq
 800dd56:	f89e 4000 	ldrbeq.w	r4, [lr]
 800dd5a:	46a8      	mov	r8, r5
 800dd5c:	bf08      	it	eq
 800dd5e:	f106 0e02 	addeq.w	lr, r6, #2
 800dd62:	e7c7      	b.n	800dcf4 <_strtol_l.isra.0+0x3c>
 800dd64:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800dd68:	2f19      	cmp	r7, #25
 800dd6a:	d801      	bhi.n	800dd70 <_strtol_l.isra.0+0xb8>
 800dd6c:	3c37      	subs	r4, #55	; 0x37
 800dd6e:	e7e1      	b.n	800dd34 <_strtol_l.isra.0+0x7c>
 800dd70:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800dd74:	2f19      	cmp	r7, #25
 800dd76:	d804      	bhi.n	800dd82 <_strtol_l.isra.0+0xca>
 800dd78:	3c57      	subs	r4, #87	; 0x57
 800dd7a:	e7db      	b.n	800dd34 <_strtol_l.isra.0+0x7c>
 800dd7c:	f04f 36ff 	mov.w	r6, #4294967295
 800dd80:	e7e4      	b.n	800dd4c <_strtol_l.isra.0+0x94>
 800dd82:	2e00      	cmp	r6, #0
 800dd84:	da05      	bge.n	800dd92 <_strtol_l.isra.0+0xda>
 800dd86:	2322      	movs	r3, #34	; 0x22
 800dd88:	6003      	str	r3, [r0, #0]
 800dd8a:	4665      	mov	r5, ip
 800dd8c:	b942      	cbnz	r2, 800dda0 <_strtol_l.isra.0+0xe8>
 800dd8e:	4628      	mov	r0, r5
 800dd90:	e79d      	b.n	800dcce <_strtol_l.isra.0+0x16>
 800dd92:	f1b8 0f00 	cmp.w	r8, #0
 800dd96:	d000      	beq.n	800dd9a <_strtol_l.isra.0+0xe2>
 800dd98:	426d      	negs	r5, r5
 800dd9a:	2a00      	cmp	r2, #0
 800dd9c:	d0f7      	beq.n	800dd8e <_strtol_l.isra.0+0xd6>
 800dd9e:	b10e      	cbz	r6, 800dda4 <_strtol_l.isra.0+0xec>
 800dda0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800dda4:	6011      	str	r1, [r2, #0]
 800dda6:	e7f2      	b.n	800dd8e <_strtol_l.isra.0+0xd6>
 800dda8:	2430      	movs	r4, #48	; 0x30
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1b3      	bne.n	800dd16 <_strtol_l.isra.0+0x5e>
 800ddae:	2308      	movs	r3, #8
 800ddb0:	e7b1      	b.n	800dd16 <_strtol_l.isra.0+0x5e>
 800ddb2:	2c30      	cmp	r4, #48	; 0x30
 800ddb4:	d0a4      	beq.n	800dd00 <_strtol_l.isra.0+0x48>
 800ddb6:	230a      	movs	r3, #10
 800ddb8:	e7ad      	b.n	800dd16 <_strtol_l.isra.0+0x5e>
 800ddba:	bf00      	nop
 800ddbc:	08024325 	.word	0x08024325

0800ddc0 <_strtol_r>:
 800ddc0:	f7ff bf7a 	b.w	800dcb8 <_strtol_l.isra.0>

0800ddc4 <strtol>:
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	460a      	mov	r2, r1
 800ddc8:	4601      	mov	r1, r0
 800ddca:	4802      	ldr	r0, [pc, #8]	; (800ddd4 <strtol+0x10>)
 800ddcc:	6800      	ldr	r0, [r0, #0]
 800ddce:	f7ff bf73 	b.w	800dcb8 <_strtol_l.isra.0>
 800ddd2:	bf00      	nop
 800ddd4:	20000040 	.word	0x20000040

0800ddd8 <__assert_func>:
 800ddd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddda:	4614      	mov	r4, r2
 800dddc:	461a      	mov	r2, r3
 800ddde:	4b09      	ldr	r3, [pc, #36]	; (800de04 <__assert_func+0x2c>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	4605      	mov	r5, r0
 800dde4:	68d8      	ldr	r0, [r3, #12]
 800dde6:	b14c      	cbz	r4, 800ddfc <__assert_func+0x24>
 800dde8:	4b07      	ldr	r3, [pc, #28]	; (800de08 <__assert_func+0x30>)
 800ddea:	9100      	str	r1, [sp, #0]
 800ddec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddf0:	4906      	ldr	r1, [pc, #24]	; (800de0c <__assert_func+0x34>)
 800ddf2:	462b      	mov	r3, r5
 800ddf4:	f000 fe88 	bl	800eb08 <fiprintf>
 800ddf8:	f002 fb56 	bl	80104a8 <abort>
 800ddfc:	4b04      	ldr	r3, [pc, #16]	; (800de10 <__assert_func+0x38>)
 800ddfe:	461c      	mov	r4, r3
 800de00:	e7f3      	b.n	800ddea <__assert_func+0x12>
 800de02:	bf00      	nop
 800de04:	20000040 	.word	0x20000040
 800de08:	080242e8 	.word	0x080242e8
 800de0c:	080242f5 	.word	0x080242f5
 800de10:	08024323 	.word	0x08024323

0800de14 <quorem>:
 800de14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de18:	6903      	ldr	r3, [r0, #16]
 800de1a:	690c      	ldr	r4, [r1, #16]
 800de1c:	42a3      	cmp	r3, r4
 800de1e:	4607      	mov	r7, r0
 800de20:	f2c0 8081 	blt.w	800df26 <quorem+0x112>
 800de24:	3c01      	subs	r4, #1
 800de26:	f101 0814 	add.w	r8, r1, #20
 800de2a:	f100 0514 	add.w	r5, r0, #20
 800de2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de32:	9301      	str	r3, [sp, #4]
 800de34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de3c:	3301      	adds	r3, #1
 800de3e:	429a      	cmp	r2, r3
 800de40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800de44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de48:	fbb2 f6f3 	udiv	r6, r2, r3
 800de4c:	d331      	bcc.n	800deb2 <quorem+0x9e>
 800de4e:	f04f 0e00 	mov.w	lr, #0
 800de52:	4640      	mov	r0, r8
 800de54:	46ac      	mov	ip, r5
 800de56:	46f2      	mov	sl, lr
 800de58:	f850 2b04 	ldr.w	r2, [r0], #4
 800de5c:	b293      	uxth	r3, r2
 800de5e:	fb06 e303 	mla	r3, r6, r3, lr
 800de62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800de66:	b29b      	uxth	r3, r3
 800de68:	ebaa 0303 	sub.w	r3, sl, r3
 800de6c:	0c12      	lsrs	r2, r2, #16
 800de6e:	f8dc a000 	ldr.w	sl, [ip]
 800de72:	fb06 e202 	mla	r2, r6, r2, lr
 800de76:	fa13 f38a 	uxtah	r3, r3, sl
 800de7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800de7e:	fa1f fa82 	uxth.w	sl, r2
 800de82:	f8dc 2000 	ldr.w	r2, [ip]
 800de86:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800de8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de8e:	b29b      	uxth	r3, r3
 800de90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de94:	4581      	cmp	r9, r0
 800de96:	f84c 3b04 	str.w	r3, [ip], #4
 800de9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800de9e:	d2db      	bcs.n	800de58 <quorem+0x44>
 800dea0:	f855 300b 	ldr.w	r3, [r5, fp]
 800dea4:	b92b      	cbnz	r3, 800deb2 <quorem+0x9e>
 800dea6:	9b01      	ldr	r3, [sp, #4]
 800dea8:	3b04      	subs	r3, #4
 800deaa:	429d      	cmp	r5, r3
 800deac:	461a      	mov	r2, r3
 800deae:	d32e      	bcc.n	800df0e <quorem+0xfa>
 800deb0:	613c      	str	r4, [r7, #16]
 800deb2:	4638      	mov	r0, r7
 800deb4:	f001 fc9e 	bl	800f7f4 <__mcmp>
 800deb8:	2800      	cmp	r0, #0
 800deba:	db24      	blt.n	800df06 <quorem+0xf2>
 800debc:	3601      	adds	r6, #1
 800debe:	4628      	mov	r0, r5
 800dec0:	f04f 0c00 	mov.w	ip, #0
 800dec4:	f858 2b04 	ldr.w	r2, [r8], #4
 800dec8:	f8d0 e000 	ldr.w	lr, [r0]
 800decc:	b293      	uxth	r3, r2
 800dece:	ebac 0303 	sub.w	r3, ip, r3
 800ded2:	0c12      	lsrs	r2, r2, #16
 800ded4:	fa13 f38e 	uxtah	r3, r3, lr
 800ded8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dedc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dee6:	45c1      	cmp	r9, r8
 800dee8:	f840 3b04 	str.w	r3, [r0], #4
 800deec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800def0:	d2e8      	bcs.n	800dec4 <quorem+0xb0>
 800def2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800def6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800defa:	b922      	cbnz	r2, 800df06 <quorem+0xf2>
 800defc:	3b04      	subs	r3, #4
 800defe:	429d      	cmp	r5, r3
 800df00:	461a      	mov	r2, r3
 800df02:	d30a      	bcc.n	800df1a <quorem+0x106>
 800df04:	613c      	str	r4, [r7, #16]
 800df06:	4630      	mov	r0, r6
 800df08:	b003      	add	sp, #12
 800df0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df0e:	6812      	ldr	r2, [r2, #0]
 800df10:	3b04      	subs	r3, #4
 800df12:	2a00      	cmp	r2, #0
 800df14:	d1cc      	bne.n	800deb0 <quorem+0x9c>
 800df16:	3c01      	subs	r4, #1
 800df18:	e7c7      	b.n	800deaa <quorem+0x96>
 800df1a:	6812      	ldr	r2, [r2, #0]
 800df1c:	3b04      	subs	r3, #4
 800df1e:	2a00      	cmp	r2, #0
 800df20:	d1f0      	bne.n	800df04 <quorem+0xf0>
 800df22:	3c01      	subs	r4, #1
 800df24:	e7eb      	b.n	800defe <quorem+0xea>
 800df26:	2000      	movs	r0, #0
 800df28:	e7ee      	b.n	800df08 <quorem+0xf4>
 800df2a:	0000      	movs	r0, r0
 800df2c:	0000      	movs	r0, r0
	...

0800df30 <_dtoa_r>:
 800df30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df34:	ed2d 8b02 	vpush	{d8}
 800df38:	ec57 6b10 	vmov	r6, r7, d0
 800df3c:	b095      	sub	sp, #84	; 0x54
 800df3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800df40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800df44:	9105      	str	r1, [sp, #20]
 800df46:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800df4a:	4604      	mov	r4, r0
 800df4c:	9209      	str	r2, [sp, #36]	; 0x24
 800df4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800df50:	b975      	cbnz	r5, 800df70 <_dtoa_r+0x40>
 800df52:	2010      	movs	r0, #16
 800df54:	f001 f95e 	bl	800f214 <malloc>
 800df58:	4602      	mov	r2, r0
 800df5a:	6260      	str	r0, [r4, #36]	; 0x24
 800df5c:	b920      	cbnz	r0, 800df68 <_dtoa_r+0x38>
 800df5e:	4bb2      	ldr	r3, [pc, #712]	; (800e228 <_dtoa_r+0x2f8>)
 800df60:	21ea      	movs	r1, #234	; 0xea
 800df62:	48b2      	ldr	r0, [pc, #712]	; (800e22c <_dtoa_r+0x2fc>)
 800df64:	f7ff ff38 	bl	800ddd8 <__assert_func>
 800df68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800df6c:	6005      	str	r5, [r0, #0]
 800df6e:	60c5      	str	r5, [r0, #12]
 800df70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df72:	6819      	ldr	r1, [r3, #0]
 800df74:	b151      	cbz	r1, 800df8c <_dtoa_r+0x5c>
 800df76:	685a      	ldr	r2, [r3, #4]
 800df78:	604a      	str	r2, [r1, #4]
 800df7a:	2301      	movs	r3, #1
 800df7c:	4093      	lsls	r3, r2
 800df7e:	608b      	str	r3, [r1, #8]
 800df80:	4620      	mov	r0, r4
 800df82:	f001 f9af 	bl	800f2e4 <_Bfree>
 800df86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df88:	2200      	movs	r2, #0
 800df8a:	601a      	str	r2, [r3, #0]
 800df8c:	1e3b      	subs	r3, r7, #0
 800df8e:	bfb9      	ittee	lt
 800df90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800df94:	9303      	strlt	r3, [sp, #12]
 800df96:	2300      	movge	r3, #0
 800df98:	f8c8 3000 	strge.w	r3, [r8]
 800df9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800dfa0:	4ba3      	ldr	r3, [pc, #652]	; (800e230 <_dtoa_r+0x300>)
 800dfa2:	bfbc      	itt	lt
 800dfa4:	2201      	movlt	r2, #1
 800dfa6:	f8c8 2000 	strlt.w	r2, [r8]
 800dfaa:	ea33 0309 	bics.w	r3, r3, r9
 800dfae:	d11b      	bne.n	800dfe8 <_dtoa_r+0xb8>
 800dfb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dfb2:	f242 730f 	movw	r3, #9999	; 0x270f
 800dfb6:	6013      	str	r3, [r2, #0]
 800dfb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dfbc:	4333      	orrs	r3, r6
 800dfbe:	f000 857a 	beq.w	800eab6 <_dtoa_r+0xb86>
 800dfc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfc4:	b963      	cbnz	r3, 800dfe0 <_dtoa_r+0xb0>
 800dfc6:	4b9b      	ldr	r3, [pc, #620]	; (800e234 <_dtoa_r+0x304>)
 800dfc8:	e024      	b.n	800e014 <_dtoa_r+0xe4>
 800dfca:	4b9b      	ldr	r3, [pc, #620]	; (800e238 <_dtoa_r+0x308>)
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	3308      	adds	r3, #8
 800dfd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dfd2:	6013      	str	r3, [r2, #0]
 800dfd4:	9800      	ldr	r0, [sp, #0]
 800dfd6:	b015      	add	sp, #84	; 0x54
 800dfd8:	ecbd 8b02 	vpop	{d8}
 800dfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe0:	4b94      	ldr	r3, [pc, #592]	; (800e234 <_dtoa_r+0x304>)
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	3303      	adds	r3, #3
 800dfe6:	e7f3      	b.n	800dfd0 <_dtoa_r+0xa0>
 800dfe8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dfec:	2200      	movs	r2, #0
 800dfee:	ec51 0b17 	vmov	r0, r1, d7
 800dff2:	2300      	movs	r3, #0
 800dff4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800dff8:	f7f2 fd7e 	bl	8000af8 <__aeabi_dcmpeq>
 800dffc:	4680      	mov	r8, r0
 800dffe:	b158      	cbz	r0, 800e018 <_dtoa_r+0xe8>
 800e000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e002:	2301      	movs	r3, #1
 800e004:	6013      	str	r3, [r2, #0]
 800e006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e008:	2b00      	cmp	r3, #0
 800e00a:	f000 8551 	beq.w	800eab0 <_dtoa_r+0xb80>
 800e00e:	488b      	ldr	r0, [pc, #556]	; (800e23c <_dtoa_r+0x30c>)
 800e010:	6018      	str	r0, [r3, #0]
 800e012:	1e43      	subs	r3, r0, #1
 800e014:	9300      	str	r3, [sp, #0]
 800e016:	e7dd      	b.n	800dfd4 <_dtoa_r+0xa4>
 800e018:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e01c:	aa12      	add	r2, sp, #72	; 0x48
 800e01e:	a913      	add	r1, sp, #76	; 0x4c
 800e020:	4620      	mov	r0, r4
 800e022:	f001 fd07 	bl	800fa34 <__d2b>
 800e026:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e02a:	4683      	mov	fp, r0
 800e02c:	2d00      	cmp	r5, #0
 800e02e:	d07c      	beq.n	800e12a <_dtoa_r+0x1fa>
 800e030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e032:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e03a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e03e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e042:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e04a:	4b7d      	ldr	r3, [pc, #500]	; (800e240 <_dtoa_r+0x310>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	4630      	mov	r0, r6
 800e050:	4639      	mov	r1, r7
 800e052:	f7f2 f931 	bl	80002b8 <__aeabi_dsub>
 800e056:	a36e      	add	r3, pc, #440	; (adr r3, 800e210 <_dtoa_r+0x2e0>)
 800e058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05c:	f7f2 fae4 	bl	8000628 <__aeabi_dmul>
 800e060:	a36d      	add	r3, pc, #436	; (adr r3, 800e218 <_dtoa_r+0x2e8>)
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	f7f2 f929 	bl	80002bc <__adddf3>
 800e06a:	4606      	mov	r6, r0
 800e06c:	4628      	mov	r0, r5
 800e06e:	460f      	mov	r7, r1
 800e070:	f7f2 fa70 	bl	8000554 <__aeabi_i2d>
 800e074:	a36a      	add	r3, pc, #424	; (adr r3, 800e220 <_dtoa_r+0x2f0>)
 800e076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07a:	f7f2 fad5 	bl	8000628 <__aeabi_dmul>
 800e07e:	4602      	mov	r2, r0
 800e080:	460b      	mov	r3, r1
 800e082:	4630      	mov	r0, r6
 800e084:	4639      	mov	r1, r7
 800e086:	f7f2 f919 	bl	80002bc <__adddf3>
 800e08a:	4606      	mov	r6, r0
 800e08c:	460f      	mov	r7, r1
 800e08e:	f7f2 fd7b 	bl	8000b88 <__aeabi_d2iz>
 800e092:	2200      	movs	r2, #0
 800e094:	4682      	mov	sl, r0
 800e096:	2300      	movs	r3, #0
 800e098:	4630      	mov	r0, r6
 800e09a:	4639      	mov	r1, r7
 800e09c:	f7f2 fd36 	bl	8000b0c <__aeabi_dcmplt>
 800e0a0:	b148      	cbz	r0, 800e0b6 <_dtoa_r+0x186>
 800e0a2:	4650      	mov	r0, sl
 800e0a4:	f7f2 fa56 	bl	8000554 <__aeabi_i2d>
 800e0a8:	4632      	mov	r2, r6
 800e0aa:	463b      	mov	r3, r7
 800e0ac:	f7f2 fd24 	bl	8000af8 <__aeabi_dcmpeq>
 800e0b0:	b908      	cbnz	r0, 800e0b6 <_dtoa_r+0x186>
 800e0b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0b6:	f1ba 0f16 	cmp.w	sl, #22
 800e0ba:	d854      	bhi.n	800e166 <_dtoa_r+0x236>
 800e0bc:	4b61      	ldr	r3, [pc, #388]	; (800e244 <_dtoa_r+0x314>)
 800e0be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e0ca:	f7f2 fd1f 	bl	8000b0c <__aeabi_dcmplt>
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d04b      	beq.n	800e16a <_dtoa_r+0x23a>
 800e0d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	930e      	str	r3, [sp, #56]	; 0x38
 800e0da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e0dc:	1b5d      	subs	r5, r3, r5
 800e0de:	1e6b      	subs	r3, r5, #1
 800e0e0:	9304      	str	r3, [sp, #16]
 800e0e2:	bf43      	ittte	mi
 800e0e4:	2300      	movmi	r3, #0
 800e0e6:	f1c5 0801 	rsbmi	r8, r5, #1
 800e0ea:	9304      	strmi	r3, [sp, #16]
 800e0ec:	f04f 0800 	movpl.w	r8, #0
 800e0f0:	f1ba 0f00 	cmp.w	sl, #0
 800e0f4:	db3b      	blt.n	800e16e <_dtoa_r+0x23e>
 800e0f6:	9b04      	ldr	r3, [sp, #16]
 800e0f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e0fc:	4453      	add	r3, sl
 800e0fe:	9304      	str	r3, [sp, #16]
 800e100:	2300      	movs	r3, #0
 800e102:	9306      	str	r3, [sp, #24]
 800e104:	9b05      	ldr	r3, [sp, #20]
 800e106:	2b09      	cmp	r3, #9
 800e108:	d869      	bhi.n	800e1de <_dtoa_r+0x2ae>
 800e10a:	2b05      	cmp	r3, #5
 800e10c:	bfc4      	itt	gt
 800e10e:	3b04      	subgt	r3, #4
 800e110:	9305      	strgt	r3, [sp, #20]
 800e112:	9b05      	ldr	r3, [sp, #20]
 800e114:	f1a3 0302 	sub.w	r3, r3, #2
 800e118:	bfcc      	ite	gt
 800e11a:	2500      	movgt	r5, #0
 800e11c:	2501      	movle	r5, #1
 800e11e:	2b03      	cmp	r3, #3
 800e120:	d869      	bhi.n	800e1f6 <_dtoa_r+0x2c6>
 800e122:	e8df f003 	tbb	[pc, r3]
 800e126:	4e2c      	.short	0x4e2c
 800e128:	5a4c      	.short	0x5a4c
 800e12a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e12e:	441d      	add	r5, r3
 800e130:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e134:	2b20      	cmp	r3, #32
 800e136:	bfc1      	itttt	gt
 800e138:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e13c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e140:	fa09 f303 	lslgt.w	r3, r9, r3
 800e144:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e148:	bfda      	itte	le
 800e14a:	f1c3 0320 	rsble	r3, r3, #32
 800e14e:	fa06 f003 	lslle.w	r0, r6, r3
 800e152:	4318      	orrgt	r0, r3
 800e154:	f7f2 f9ee 	bl	8000534 <__aeabi_ui2d>
 800e158:	2301      	movs	r3, #1
 800e15a:	4606      	mov	r6, r0
 800e15c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e160:	3d01      	subs	r5, #1
 800e162:	9310      	str	r3, [sp, #64]	; 0x40
 800e164:	e771      	b.n	800e04a <_dtoa_r+0x11a>
 800e166:	2301      	movs	r3, #1
 800e168:	e7b6      	b.n	800e0d8 <_dtoa_r+0x1a8>
 800e16a:	900e      	str	r0, [sp, #56]	; 0x38
 800e16c:	e7b5      	b.n	800e0da <_dtoa_r+0x1aa>
 800e16e:	f1ca 0300 	rsb	r3, sl, #0
 800e172:	9306      	str	r3, [sp, #24]
 800e174:	2300      	movs	r3, #0
 800e176:	eba8 080a 	sub.w	r8, r8, sl
 800e17a:	930d      	str	r3, [sp, #52]	; 0x34
 800e17c:	e7c2      	b.n	800e104 <_dtoa_r+0x1d4>
 800e17e:	2300      	movs	r3, #0
 800e180:	9308      	str	r3, [sp, #32]
 800e182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e184:	2b00      	cmp	r3, #0
 800e186:	dc39      	bgt.n	800e1fc <_dtoa_r+0x2cc>
 800e188:	f04f 0901 	mov.w	r9, #1
 800e18c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e190:	464b      	mov	r3, r9
 800e192:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e196:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e198:	2200      	movs	r2, #0
 800e19a:	6042      	str	r2, [r0, #4]
 800e19c:	2204      	movs	r2, #4
 800e19e:	f102 0614 	add.w	r6, r2, #20
 800e1a2:	429e      	cmp	r6, r3
 800e1a4:	6841      	ldr	r1, [r0, #4]
 800e1a6:	d92f      	bls.n	800e208 <_dtoa_r+0x2d8>
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f001 f85b 	bl	800f264 <_Balloc>
 800e1ae:	9000      	str	r0, [sp, #0]
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	d14b      	bne.n	800e24c <_dtoa_r+0x31c>
 800e1b4:	4b24      	ldr	r3, [pc, #144]	; (800e248 <_dtoa_r+0x318>)
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e1bc:	e6d1      	b.n	800df62 <_dtoa_r+0x32>
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e7de      	b.n	800e180 <_dtoa_r+0x250>
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	9308      	str	r3, [sp, #32]
 800e1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1c8:	eb0a 0903 	add.w	r9, sl, r3
 800e1cc:	f109 0301 	add.w	r3, r9, #1
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	9301      	str	r3, [sp, #4]
 800e1d4:	bfb8      	it	lt
 800e1d6:	2301      	movlt	r3, #1
 800e1d8:	e7dd      	b.n	800e196 <_dtoa_r+0x266>
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e7f2      	b.n	800e1c4 <_dtoa_r+0x294>
 800e1de:	2501      	movs	r5, #1
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	9305      	str	r3, [sp, #20]
 800e1e4:	9508      	str	r5, [sp, #32]
 800e1e6:	f04f 39ff 	mov.w	r9, #4294967295
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f8cd 9004 	str.w	r9, [sp, #4]
 800e1f0:	2312      	movs	r3, #18
 800e1f2:	9209      	str	r2, [sp, #36]	; 0x24
 800e1f4:	e7cf      	b.n	800e196 <_dtoa_r+0x266>
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	9308      	str	r3, [sp, #32]
 800e1fa:	e7f4      	b.n	800e1e6 <_dtoa_r+0x2b6>
 800e1fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e200:	f8cd 9004 	str.w	r9, [sp, #4]
 800e204:	464b      	mov	r3, r9
 800e206:	e7c6      	b.n	800e196 <_dtoa_r+0x266>
 800e208:	3101      	adds	r1, #1
 800e20a:	6041      	str	r1, [r0, #4]
 800e20c:	0052      	lsls	r2, r2, #1
 800e20e:	e7c6      	b.n	800e19e <_dtoa_r+0x26e>
 800e210:	636f4361 	.word	0x636f4361
 800e214:	3fd287a7 	.word	0x3fd287a7
 800e218:	8b60c8b3 	.word	0x8b60c8b3
 800e21c:	3fc68a28 	.word	0x3fc68a28
 800e220:	509f79fb 	.word	0x509f79fb
 800e224:	3fd34413 	.word	0x3fd34413
 800e228:	08024270 	.word	0x08024270
 800e22c:	08024432 	.word	0x08024432
 800e230:	7ff00000 	.word	0x7ff00000
 800e234:	0802442e 	.word	0x0802442e
 800e238:	08024425 	.word	0x08024425
 800e23c:	080241f1 	.word	0x080241f1
 800e240:	3ff80000 	.word	0x3ff80000
 800e244:	080245a8 	.word	0x080245a8
 800e248:	08024491 	.word	0x08024491
 800e24c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e24e:	9a00      	ldr	r2, [sp, #0]
 800e250:	601a      	str	r2, [r3, #0]
 800e252:	9b01      	ldr	r3, [sp, #4]
 800e254:	2b0e      	cmp	r3, #14
 800e256:	f200 80ad 	bhi.w	800e3b4 <_dtoa_r+0x484>
 800e25a:	2d00      	cmp	r5, #0
 800e25c:	f000 80aa 	beq.w	800e3b4 <_dtoa_r+0x484>
 800e260:	f1ba 0f00 	cmp.w	sl, #0
 800e264:	dd36      	ble.n	800e2d4 <_dtoa_r+0x3a4>
 800e266:	4ac3      	ldr	r2, [pc, #780]	; (800e574 <_dtoa_r+0x644>)
 800e268:	f00a 030f 	and.w	r3, sl, #15
 800e26c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e270:	ed93 7b00 	vldr	d7, [r3]
 800e274:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e278:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e27c:	eeb0 8a47 	vmov.f32	s16, s14
 800e280:	eef0 8a67 	vmov.f32	s17, s15
 800e284:	d016      	beq.n	800e2b4 <_dtoa_r+0x384>
 800e286:	4bbc      	ldr	r3, [pc, #752]	; (800e578 <_dtoa_r+0x648>)
 800e288:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e28c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e290:	f7f2 faf4 	bl	800087c <__aeabi_ddiv>
 800e294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e298:	f007 070f 	and.w	r7, r7, #15
 800e29c:	2503      	movs	r5, #3
 800e29e:	4eb6      	ldr	r6, [pc, #728]	; (800e578 <_dtoa_r+0x648>)
 800e2a0:	b957      	cbnz	r7, 800e2b8 <_dtoa_r+0x388>
 800e2a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2a6:	ec53 2b18 	vmov	r2, r3, d8
 800e2aa:	f7f2 fae7 	bl	800087c <__aeabi_ddiv>
 800e2ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2b2:	e029      	b.n	800e308 <_dtoa_r+0x3d8>
 800e2b4:	2502      	movs	r5, #2
 800e2b6:	e7f2      	b.n	800e29e <_dtoa_r+0x36e>
 800e2b8:	07f9      	lsls	r1, r7, #31
 800e2ba:	d508      	bpl.n	800e2ce <_dtoa_r+0x39e>
 800e2bc:	ec51 0b18 	vmov	r0, r1, d8
 800e2c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e2c4:	f7f2 f9b0 	bl	8000628 <__aeabi_dmul>
 800e2c8:	ec41 0b18 	vmov	d8, r0, r1
 800e2cc:	3501      	adds	r5, #1
 800e2ce:	107f      	asrs	r7, r7, #1
 800e2d0:	3608      	adds	r6, #8
 800e2d2:	e7e5      	b.n	800e2a0 <_dtoa_r+0x370>
 800e2d4:	f000 80a6 	beq.w	800e424 <_dtoa_r+0x4f4>
 800e2d8:	f1ca 0600 	rsb	r6, sl, #0
 800e2dc:	4ba5      	ldr	r3, [pc, #660]	; (800e574 <_dtoa_r+0x644>)
 800e2de:	4fa6      	ldr	r7, [pc, #664]	; (800e578 <_dtoa_r+0x648>)
 800e2e0:	f006 020f 	and.w	r2, r6, #15
 800e2e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e2f0:	f7f2 f99a 	bl	8000628 <__aeabi_dmul>
 800e2f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2f8:	1136      	asrs	r6, r6, #4
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	2502      	movs	r5, #2
 800e2fe:	2e00      	cmp	r6, #0
 800e300:	f040 8085 	bne.w	800e40e <_dtoa_r+0x4de>
 800e304:	2b00      	cmp	r3, #0
 800e306:	d1d2      	bne.n	800e2ae <_dtoa_r+0x37e>
 800e308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	f000 808c 	beq.w	800e428 <_dtoa_r+0x4f8>
 800e310:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e314:	4b99      	ldr	r3, [pc, #612]	; (800e57c <_dtoa_r+0x64c>)
 800e316:	2200      	movs	r2, #0
 800e318:	4630      	mov	r0, r6
 800e31a:	4639      	mov	r1, r7
 800e31c:	f7f2 fbf6 	bl	8000b0c <__aeabi_dcmplt>
 800e320:	2800      	cmp	r0, #0
 800e322:	f000 8081 	beq.w	800e428 <_dtoa_r+0x4f8>
 800e326:	9b01      	ldr	r3, [sp, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d07d      	beq.n	800e428 <_dtoa_r+0x4f8>
 800e32c:	f1b9 0f00 	cmp.w	r9, #0
 800e330:	dd3c      	ble.n	800e3ac <_dtoa_r+0x47c>
 800e332:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e336:	9307      	str	r3, [sp, #28]
 800e338:	2200      	movs	r2, #0
 800e33a:	4b91      	ldr	r3, [pc, #580]	; (800e580 <_dtoa_r+0x650>)
 800e33c:	4630      	mov	r0, r6
 800e33e:	4639      	mov	r1, r7
 800e340:	f7f2 f972 	bl	8000628 <__aeabi_dmul>
 800e344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e348:	3501      	adds	r5, #1
 800e34a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e34e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e352:	4628      	mov	r0, r5
 800e354:	f7f2 f8fe 	bl	8000554 <__aeabi_i2d>
 800e358:	4632      	mov	r2, r6
 800e35a:	463b      	mov	r3, r7
 800e35c:	f7f2 f964 	bl	8000628 <__aeabi_dmul>
 800e360:	4b88      	ldr	r3, [pc, #544]	; (800e584 <_dtoa_r+0x654>)
 800e362:	2200      	movs	r2, #0
 800e364:	f7f1 ffaa 	bl	80002bc <__adddf3>
 800e368:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e36c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e370:	9303      	str	r3, [sp, #12]
 800e372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e374:	2b00      	cmp	r3, #0
 800e376:	d15c      	bne.n	800e432 <_dtoa_r+0x502>
 800e378:	4b83      	ldr	r3, [pc, #524]	; (800e588 <_dtoa_r+0x658>)
 800e37a:	2200      	movs	r2, #0
 800e37c:	4630      	mov	r0, r6
 800e37e:	4639      	mov	r1, r7
 800e380:	f7f1 ff9a 	bl	80002b8 <__aeabi_dsub>
 800e384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e388:	4606      	mov	r6, r0
 800e38a:	460f      	mov	r7, r1
 800e38c:	f7f2 fbdc 	bl	8000b48 <__aeabi_dcmpgt>
 800e390:	2800      	cmp	r0, #0
 800e392:	f040 8296 	bne.w	800e8c2 <_dtoa_r+0x992>
 800e396:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e39a:	4630      	mov	r0, r6
 800e39c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e3a0:	4639      	mov	r1, r7
 800e3a2:	f7f2 fbb3 	bl	8000b0c <__aeabi_dcmplt>
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	f040 8288 	bne.w	800e8bc <_dtoa_r+0x98c>
 800e3ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e3b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e3b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	f2c0 8158 	blt.w	800e66c <_dtoa_r+0x73c>
 800e3bc:	f1ba 0f0e 	cmp.w	sl, #14
 800e3c0:	f300 8154 	bgt.w	800e66c <_dtoa_r+0x73c>
 800e3c4:	4b6b      	ldr	r3, [pc, #428]	; (800e574 <_dtoa_r+0x644>)
 800e3c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e3ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	f280 80e3 	bge.w	800e59c <_dtoa_r+0x66c>
 800e3d6:	9b01      	ldr	r3, [sp, #4]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	f300 80df 	bgt.w	800e59c <_dtoa_r+0x66c>
 800e3de:	f040 826d 	bne.w	800e8bc <_dtoa_r+0x98c>
 800e3e2:	4b69      	ldr	r3, [pc, #420]	; (800e588 <_dtoa_r+0x658>)
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	4640      	mov	r0, r8
 800e3e8:	4649      	mov	r1, r9
 800e3ea:	f7f2 f91d 	bl	8000628 <__aeabi_dmul>
 800e3ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3f2:	f7f2 fb9f 	bl	8000b34 <__aeabi_dcmpge>
 800e3f6:	9e01      	ldr	r6, [sp, #4]
 800e3f8:	4637      	mov	r7, r6
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	f040 8243 	bne.w	800e886 <_dtoa_r+0x956>
 800e400:	9d00      	ldr	r5, [sp, #0]
 800e402:	2331      	movs	r3, #49	; 0x31
 800e404:	f805 3b01 	strb.w	r3, [r5], #1
 800e408:	f10a 0a01 	add.w	sl, sl, #1
 800e40c:	e23f      	b.n	800e88e <_dtoa_r+0x95e>
 800e40e:	07f2      	lsls	r2, r6, #31
 800e410:	d505      	bpl.n	800e41e <_dtoa_r+0x4ee>
 800e412:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e416:	f7f2 f907 	bl	8000628 <__aeabi_dmul>
 800e41a:	3501      	adds	r5, #1
 800e41c:	2301      	movs	r3, #1
 800e41e:	1076      	asrs	r6, r6, #1
 800e420:	3708      	adds	r7, #8
 800e422:	e76c      	b.n	800e2fe <_dtoa_r+0x3ce>
 800e424:	2502      	movs	r5, #2
 800e426:	e76f      	b.n	800e308 <_dtoa_r+0x3d8>
 800e428:	9b01      	ldr	r3, [sp, #4]
 800e42a:	f8cd a01c 	str.w	sl, [sp, #28]
 800e42e:	930c      	str	r3, [sp, #48]	; 0x30
 800e430:	e78d      	b.n	800e34e <_dtoa_r+0x41e>
 800e432:	9900      	ldr	r1, [sp, #0]
 800e434:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e436:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e438:	4b4e      	ldr	r3, [pc, #312]	; (800e574 <_dtoa_r+0x644>)
 800e43a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e43e:	4401      	add	r1, r0
 800e440:	9102      	str	r1, [sp, #8]
 800e442:	9908      	ldr	r1, [sp, #32]
 800e444:	eeb0 8a47 	vmov.f32	s16, s14
 800e448:	eef0 8a67 	vmov.f32	s17, s15
 800e44c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e450:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e454:	2900      	cmp	r1, #0
 800e456:	d045      	beq.n	800e4e4 <_dtoa_r+0x5b4>
 800e458:	494c      	ldr	r1, [pc, #304]	; (800e58c <_dtoa_r+0x65c>)
 800e45a:	2000      	movs	r0, #0
 800e45c:	f7f2 fa0e 	bl	800087c <__aeabi_ddiv>
 800e460:	ec53 2b18 	vmov	r2, r3, d8
 800e464:	f7f1 ff28 	bl	80002b8 <__aeabi_dsub>
 800e468:	9d00      	ldr	r5, [sp, #0]
 800e46a:	ec41 0b18 	vmov	d8, r0, r1
 800e46e:	4639      	mov	r1, r7
 800e470:	4630      	mov	r0, r6
 800e472:	f7f2 fb89 	bl	8000b88 <__aeabi_d2iz>
 800e476:	900c      	str	r0, [sp, #48]	; 0x30
 800e478:	f7f2 f86c 	bl	8000554 <__aeabi_i2d>
 800e47c:	4602      	mov	r2, r0
 800e47e:	460b      	mov	r3, r1
 800e480:	4630      	mov	r0, r6
 800e482:	4639      	mov	r1, r7
 800e484:	f7f1 ff18 	bl	80002b8 <__aeabi_dsub>
 800e488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e48a:	3330      	adds	r3, #48	; 0x30
 800e48c:	f805 3b01 	strb.w	r3, [r5], #1
 800e490:	ec53 2b18 	vmov	r2, r3, d8
 800e494:	4606      	mov	r6, r0
 800e496:	460f      	mov	r7, r1
 800e498:	f7f2 fb38 	bl	8000b0c <__aeabi_dcmplt>
 800e49c:	2800      	cmp	r0, #0
 800e49e:	d165      	bne.n	800e56c <_dtoa_r+0x63c>
 800e4a0:	4632      	mov	r2, r6
 800e4a2:	463b      	mov	r3, r7
 800e4a4:	4935      	ldr	r1, [pc, #212]	; (800e57c <_dtoa_r+0x64c>)
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	f7f1 ff06 	bl	80002b8 <__aeabi_dsub>
 800e4ac:	ec53 2b18 	vmov	r2, r3, d8
 800e4b0:	f7f2 fb2c 	bl	8000b0c <__aeabi_dcmplt>
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	f040 80b9 	bne.w	800e62c <_dtoa_r+0x6fc>
 800e4ba:	9b02      	ldr	r3, [sp, #8]
 800e4bc:	429d      	cmp	r5, r3
 800e4be:	f43f af75 	beq.w	800e3ac <_dtoa_r+0x47c>
 800e4c2:	4b2f      	ldr	r3, [pc, #188]	; (800e580 <_dtoa_r+0x650>)
 800e4c4:	ec51 0b18 	vmov	r0, r1, d8
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	f7f2 f8ad 	bl	8000628 <__aeabi_dmul>
 800e4ce:	4b2c      	ldr	r3, [pc, #176]	; (800e580 <_dtoa_r+0x650>)
 800e4d0:	ec41 0b18 	vmov	d8, r0, r1
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	4639      	mov	r1, r7
 800e4da:	f7f2 f8a5 	bl	8000628 <__aeabi_dmul>
 800e4de:	4606      	mov	r6, r0
 800e4e0:	460f      	mov	r7, r1
 800e4e2:	e7c4      	b.n	800e46e <_dtoa_r+0x53e>
 800e4e4:	ec51 0b17 	vmov	r0, r1, d7
 800e4e8:	f7f2 f89e 	bl	8000628 <__aeabi_dmul>
 800e4ec:	9b02      	ldr	r3, [sp, #8]
 800e4ee:	9d00      	ldr	r5, [sp, #0]
 800e4f0:	930c      	str	r3, [sp, #48]	; 0x30
 800e4f2:	ec41 0b18 	vmov	d8, r0, r1
 800e4f6:	4639      	mov	r1, r7
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	f7f2 fb45 	bl	8000b88 <__aeabi_d2iz>
 800e4fe:	9011      	str	r0, [sp, #68]	; 0x44
 800e500:	f7f2 f828 	bl	8000554 <__aeabi_i2d>
 800e504:	4602      	mov	r2, r0
 800e506:	460b      	mov	r3, r1
 800e508:	4630      	mov	r0, r6
 800e50a:	4639      	mov	r1, r7
 800e50c:	f7f1 fed4 	bl	80002b8 <__aeabi_dsub>
 800e510:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e512:	3330      	adds	r3, #48	; 0x30
 800e514:	f805 3b01 	strb.w	r3, [r5], #1
 800e518:	9b02      	ldr	r3, [sp, #8]
 800e51a:	429d      	cmp	r5, r3
 800e51c:	4606      	mov	r6, r0
 800e51e:	460f      	mov	r7, r1
 800e520:	f04f 0200 	mov.w	r2, #0
 800e524:	d134      	bne.n	800e590 <_dtoa_r+0x660>
 800e526:	4b19      	ldr	r3, [pc, #100]	; (800e58c <_dtoa_r+0x65c>)
 800e528:	ec51 0b18 	vmov	r0, r1, d8
 800e52c:	f7f1 fec6 	bl	80002bc <__adddf3>
 800e530:	4602      	mov	r2, r0
 800e532:	460b      	mov	r3, r1
 800e534:	4630      	mov	r0, r6
 800e536:	4639      	mov	r1, r7
 800e538:	f7f2 fb06 	bl	8000b48 <__aeabi_dcmpgt>
 800e53c:	2800      	cmp	r0, #0
 800e53e:	d175      	bne.n	800e62c <_dtoa_r+0x6fc>
 800e540:	ec53 2b18 	vmov	r2, r3, d8
 800e544:	4911      	ldr	r1, [pc, #68]	; (800e58c <_dtoa_r+0x65c>)
 800e546:	2000      	movs	r0, #0
 800e548:	f7f1 feb6 	bl	80002b8 <__aeabi_dsub>
 800e54c:	4602      	mov	r2, r0
 800e54e:	460b      	mov	r3, r1
 800e550:	4630      	mov	r0, r6
 800e552:	4639      	mov	r1, r7
 800e554:	f7f2 fada 	bl	8000b0c <__aeabi_dcmplt>
 800e558:	2800      	cmp	r0, #0
 800e55a:	f43f af27 	beq.w	800e3ac <_dtoa_r+0x47c>
 800e55e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e560:	1e6b      	subs	r3, r5, #1
 800e562:	930c      	str	r3, [sp, #48]	; 0x30
 800e564:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e568:	2b30      	cmp	r3, #48	; 0x30
 800e56a:	d0f8      	beq.n	800e55e <_dtoa_r+0x62e>
 800e56c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e570:	e04a      	b.n	800e608 <_dtoa_r+0x6d8>
 800e572:	bf00      	nop
 800e574:	080245a8 	.word	0x080245a8
 800e578:	08024580 	.word	0x08024580
 800e57c:	3ff00000 	.word	0x3ff00000
 800e580:	40240000 	.word	0x40240000
 800e584:	401c0000 	.word	0x401c0000
 800e588:	40140000 	.word	0x40140000
 800e58c:	3fe00000 	.word	0x3fe00000
 800e590:	4baf      	ldr	r3, [pc, #700]	; (800e850 <_dtoa_r+0x920>)
 800e592:	f7f2 f849 	bl	8000628 <__aeabi_dmul>
 800e596:	4606      	mov	r6, r0
 800e598:	460f      	mov	r7, r1
 800e59a:	e7ac      	b.n	800e4f6 <_dtoa_r+0x5c6>
 800e59c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e5a0:	9d00      	ldr	r5, [sp, #0]
 800e5a2:	4642      	mov	r2, r8
 800e5a4:	464b      	mov	r3, r9
 800e5a6:	4630      	mov	r0, r6
 800e5a8:	4639      	mov	r1, r7
 800e5aa:	f7f2 f967 	bl	800087c <__aeabi_ddiv>
 800e5ae:	f7f2 faeb 	bl	8000b88 <__aeabi_d2iz>
 800e5b2:	9002      	str	r0, [sp, #8]
 800e5b4:	f7f1 ffce 	bl	8000554 <__aeabi_i2d>
 800e5b8:	4642      	mov	r2, r8
 800e5ba:	464b      	mov	r3, r9
 800e5bc:	f7f2 f834 	bl	8000628 <__aeabi_dmul>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	4639      	mov	r1, r7
 800e5c8:	f7f1 fe76 	bl	80002b8 <__aeabi_dsub>
 800e5cc:	9e02      	ldr	r6, [sp, #8]
 800e5ce:	9f01      	ldr	r7, [sp, #4]
 800e5d0:	3630      	adds	r6, #48	; 0x30
 800e5d2:	f805 6b01 	strb.w	r6, [r5], #1
 800e5d6:	9e00      	ldr	r6, [sp, #0]
 800e5d8:	1bae      	subs	r6, r5, r6
 800e5da:	42b7      	cmp	r7, r6
 800e5dc:	4602      	mov	r2, r0
 800e5de:	460b      	mov	r3, r1
 800e5e0:	d137      	bne.n	800e652 <_dtoa_r+0x722>
 800e5e2:	f7f1 fe6b 	bl	80002bc <__adddf3>
 800e5e6:	4642      	mov	r2, r8
 800e5e8:	464b      	mov	r3, r9
 800e5ea:	4606      	mov	r6, r0
 800e5ec:	460f      	mov	r7, r1
 800e5ee:	f7f2 faab 	bl	8000b48 <__aeabi_dcmpgt>
 800e5f2:	b9c8      	cbnz	r0, 800e628 <_dtoa_r+0x6f8>
 800e5f4:	4642      	mov	r2, r8
 800e5f6:	464b      	mov	r3, r9
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	4639      	mov	r1, r7
 800e5fc:	f7f2 fa7c 	bl	8000af8 <__aeabi_dcmpeq>
 800e600:	b110      	cbz	r0, 800e608 <_dtoa_r+0x6d8>
 800e602:	9b02      	ldr	r3, [sp, #8]
 800e604:	07d9      	lsls	r1, r3, #31
 800e606:	d40f      	bmi.n	800e628 <_dtoa_r+0x6f8>
 800e608:	4620      	mov	r0, r4
 800e60a:	4659      	mov	r1, fp
 800e60c:	f000 fe6a 	bl	800f2e4 <_Bfree>
 800e610:	2300      	movs	r3, #0
 800e612:	702b      	strb	r3, [r5, #0]
 800e614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e616:	f10a 0001 	add.w	r0, sl, #1
 800e61a:	6018      	str	r0, [r3, #0]
 800e61c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e61e:	2b00      	cmp	r3, #0
 800e620:	f43f acd8 	beq.w	800dfd4 <_dtoa_r+0xa4>
 800e624:	601d      	str	r5, [r3, #0]
 800e626:	e4d5      	b.n	800dfd4 <_dtoa_r+0xa4>
 800e628:	f8cd a01c 	str.w	sl, [sp, #28]
 800e62c:	462b      	mov	r3, r5
 800e62e:	461d      	mov	r5, r3
 800e630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e634:	2a39      	cmp	r2, #57	; 0x39
 800e636:	d108      	bne.n	800e64a <_dtoa_r+0x71a>
 800e638:	9a00      	ldr	r2, [sp, #0]
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d1f7      	bne.n	800e62e <_dtoa_r+0x6fe>
 800e63e:	9a07      	ldr	r2, [sp, #28]
 800e640:	9900      	ldr	r1, [sp, #0]
 800e642:	3201      	adds	r2, #1
 800e644:	9207      	str	r2, [sp, #28]
 800e646:	2230      	movs	r2, #48	; 0x30
 800e648:	700a      	strb	r2, [r1, #0]
 800e64a:	781a      	ldrb	r2, [r3, #0]
 800e64c:	3201      	adds	r2, #1
 800e64e:	701a      	strb	r2, [r3, #0]
 800e650:	e78c      	b.n	800e56c <_dtoa_r+0x63c>
 800e652:	4b7f      	ldr	r3, [pc, #508]	; (800e850 <_dtoa_r+0x920>)
 800e654:	2200      	movs	r2, #0
 800e656:	f7f1 ffe7 	bl	8000628 <__aeabi_dmul>
 800e65a:	2200      	movs	r2, #0
 800e65c:	2300      	movs	r3, #0
 800e65e:	4606      	mov	r6, r0
 800e660:	460f      	mov	r7, r1
 800e662:	f7f2 fa49 	bl	8000af8 <__aeabi_dcmpeq>
 800e666:	2800      	cmp	r0, #0
 800e668:	d09b      	beq.n	800e5a2 <_dtoa_r+0x672>
 800e66a:	e7cd      	b.n	800e608 <_dtoa_r+0x6d8>
 800e66c:	9a08      	ldr	r2, [sp, #32]
 800e66e:	2a00      	cmp	r2, #0
 800e670:	f000 80c4 	beq.w	800e7fc <_dtoa_r+0x8cc>
 800e674:	9a05      	ldr	r2, [sp, #20]
 800e676:	2a01      	cmp	r2, #1
 800e678:	f300 80a8 	bgt.w	800e7cc <_dtoa_r+0x89c>
 800e67c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e67e:	2a00      	cmp	r2, #0
 800e680:	f000 80a0 	beq.w	800e7c4 <_dtoa_r+0x894>
 800e684:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e688:	9e06      	ldr	r6, [sp, #24]
 800e68a:	4645      	mov	r5, r8
 800e68c:	9a04      	ldr	r2, [sp, #16]
 800e68e:	2101      	movs	r1, #1
 800e690:	441a      	add	r2, r3
 800e692:	4620      	mov	r0, r4
 800e694:	4498      	add	r8, r3
 800e696:	9204      	str	r2, [sp, #16]
 800e698:	f000 ff2a 	bl	800f4f0 <__i2b>
 800e69c:	4607      	mov	r7, r0
 800e69e:	2d00      	cmp	r5, #0
 800e6a0:	dd0b      	ble.n	800e6ba <_dtoa_r+0x78a>
 800e6a2:	9b04      	ldr	r3, [sp, #16]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	dd08      	ble.n	800e6ba <_dtoa_r+0x78a>
 800e6a8:	42ab      	cmp	r3, r5
 800e6aa:	9a04      	ldr	r2, [sp, #16]
 800e6ac:	bfa8      	it	ge
 800e6ae:	462b      	movge	r3, r5
 800e6b0:	eba8 0803 	sub.w	r8, r8, r3
 800e6b4:	1aed      	subs	r5, r5, r3
 800e6b6:	1ad3      	subs	r3, r2, r3
 800e6b8:	9304      	str	r3, [sp, #16]
 800e6ba:	9b06      	ldr	r3, [sp, #24]
 800e6bc:	b1fb      	cbz	r3, 800e6fe <_dtoa_r+0x7ce>
 800e6be:	9b08      	ldr	r3, [sp, #32]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	f000 809f 	beq.w	800e804 <_dtoa_r+0x8d4>
 800e6c6:	2e00      	cmp	r6, #0
 800e6c8:	dd11      	ble.n	800e6ee <_dtoa_r+0x7be>
 800e6ca:	4639      	mov	r1, r7
 800e6cc:	4632      	mov	r2, r6
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f000 ffca 	bl	800f668 <__pow5mult>
 800e6d4:	465a      	mov	r2, fp
 800e6d6:	4601      	mov	r1, r0
 800e6d8:	4607      	mov	r7, r0
 800e6da:	4620      	mov	r0, r4
 800e6dc:	f000 ff1e 	bl	800f51c <__multiply>
 800e6e0:	4659      	mov	r1, fp
 800e6e2:	9007      	str	r0, [sp, #28]
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	f000 fdfd 	bl	800f2e4 <_Bfree>
 800e6ea:	9b07      	ldr	r3, [sp, #28]
 800e6ec:	469b      	mov	fp, r3
 800e6ee:	9b06      	ldr	r3, [sp, #24]
 800e6f0:	1b9a      	subs	r2, r3, r6
 800e6f2:	d004      	beq.n	800e6fe <_dtoa_r+0x7ce>
 800e6f4:	4659      	mov	r1, fp
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	f000 ffb6 	bl	800f668 <__pow5mult>
 800e6fc:	4683      	mov	fp, r0
 800e6fe:	2101      	movs	r1, #1
 800e700:	4620      	mov	r0, r4
 800e702:	f000 fef5 	bl	800f4f0 <__i2b>
 800e706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e708:	2b00      	cmp	r3, #0
 800e70a:	4606      	mov	r6, r0
 800e70c:	dd7c      	ble.n	800e808 <_dtoa_r+0x8d8>
 800e70e:	461a      	mov	r2, r3
 800e710:	4601      	mov	r1, r0
 800e712:	4620      	mov	r0, r4
 800e714:	f000 ffa8 	bl	800f668 <__pow5mult>
 800e718:	9b05      	ldr	r3, [sp, #20]
 800e71a:	2b01      	cmp	r3, #1
 800e71c:	4606      	mov	r6, r0
 800e71e:	dd76      	ble.n	800e80e <_dtoa_r+0x8de>
 800e720:	2300      	movs	r3, #0
 800e722:	9306      	str	r3, [sp, #24]
 800e724:	6933      	ldr	r3, [r6, #16]
 800e726:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e72a:	6918      	ldr	r0, [r3, #16]
 800e72c:	f000 fe90 	bl	800f450 <__hi0bits>
 800e730:	f1c0 0020 	rsb	r0, r0, #32
 800e734:	9b04      	ldr	r3, [sp, #16]
 800e736:	4418      	add	r0, r3
 800e738:	f010 001f 	ands.w	r0, r0, #31
 800e73c:	f000 8086 	beq.w	800e84c <_dtoa_r+0x91c>
 800e740:	f1c0 0320 	rsb	r3, r0, #32
 800e744:	2b04      	cmp	r3, #4
 800e746:	dd7f      	ble.n	800e848 <_dtoa_r+0x918>
 800e748:	f1c0 001c 	rsb	r0, r0, #28
 800e74c:	9b04      	ldr	r3, [sp, #16]
 800e74e:	4403      	add	r3, r0
 800e750:	4480      	add	r8, r0
 800e752:	4405      	add	r5, r0
 800e754:	9304      	str	r3, [sp, #16]
 800e756:	f1b8 0f00 	cmp.w	r8, #0
 800e75a:	dd05      	ble.n	800e768 <_dtoa_r+0x838>
 800e75c:	4659      	mov	r1, fp
 800e75e:	4642      	mov	r2, r8
 800e760:	4620      	mov	r0, r4
 800e762:	f000 ffdb 	bl	800f71c <__lshift>
 800e766:	4683      	mov	fp, r0
 800e768:	9b04      	ldr	r3, [sp, #16]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	dd05      	ble.n	800e77a <_dtoa_r+0x84a>
 800e76e:	4631      	mov	r1, r6
 800e770:	461a      	mov	r2, r3
 800e772:	4620      	mov	r0, r4
 800e774:	f000 ffd2 	bl	800f71c <__lshift>
 800e778:	4606      	mov	r6, r0
 800e77a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d069      	beq.n	800e854 <_dtoa_r+0x924>
 800e780:	4631      	mov	r1, r6
 800e782:	4658      	mov	r0, fp
 800e784:	f001 f836 	bl	800f7f4 <__mcmp>
 800e788:	2800      	cmp	r0, #0
 800e78a:	da63      	bge.n	800e854 <_dtoa_r+0x924>
 800e78c:	2300      	movs	r3, #0
 800e78e:	4659      	mov	r1, fp
 800e790:	220a      	movs	r2, #10
 800e792:	4620      	mov	r0, r4
 800e794:	f000 fdc8 	bl	800f328 <__multadd>
 800e798:	9b08      	ldr	r3, [sp, #32]
 800e79a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e79e:	4683      	mov	fp, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	f000 818f 	beq.w	800eac4 <_dtoa_r+0xb94>
 800e7a6:	4639      	mov	r1, r7
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	220a      	movs	r2, #10
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	f000 fdbb 	bl	800f328 <__multadd>
 800e7b2:	f1b9 0f00 	cmp.w	r9, #0
 800e7b6:	4607      	mov	r7, r0
 800e7b8:	f300 808e 	bgt.w	800e8d8 <_dtoa_r+0x9a8>
 800e7bc:	9b05      	ldr	r3, [sp, #20]
 800e7be:	2b02      	cmp	r3, #2
 800e7c0:	dc50      	bgt.n	800e864 <_dtoa_r+0x934>
 800e7c2:	e089      	b.n	800e8d8 <_dtoa_r+0x9a8>
 800e7c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e7c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e7ca:	e75d      	b.n	800e688 <_dtoa_r+0x758>
 800e7cc:	9b01      	ldr	r3, [sp, #4]
 800e7ce:	1e5e      	subs	r6, r3, #1
 800e7d0:	9b06      	ldr	r3, [sp, #24]
 800e7d2:	42b3      	cmp	r3, r6
 800e7d4:	bfbf      	itttt	lt
 800e7d6:	9b06      	ldrlt	r3, [sp, #24]
 800e7d8:	9606      	strlt	r6, [sp, #24]
 800e7da:	1af2      	sublt	r2, r6, r3
 800e7dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e7de:	bfb6      	itet	lt
 800e7e0:	189b      	addlt	r3, r3, r2
 800e7e2:	1b9e      	subge	r6, r3, r6
 800e7e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e7e6:	9b01      	ldr	r3, [sp, #4]
 800e7e8:	bfb8      	it	lt
 800e7ea:	2600      	movlt	r6, #0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	bfb5      	itete	lt
 800e7f0:	eba8 0503 	sublt.w	r5, r8, r3
 800e7f4:	9b01      	ldrge	r3, [sp, #4]
 800e7f6:	2300      	movlt	r3, #0
 800e7f8:	4645      	movge	r5, r8
 800e7fa:	e747      	b.n	800e68c <_dtoa_r+0x75c>
 800e7fc:	9e06      	ldr	r6, [sp, #24]
 800e7fe:	9f08      	ldr	r7, [sp, #32]
 800e800:	4645      	mov	r5, r8
 800e802:	e74c      	b.n	800e69e <_dtoa_r+0x76e>
 800e804:	9a06      	ldr	r2, [sp, #24]
 800e806:	e775      	b.n	800e6f4 <_dtoa_r+0x7c4>
 800e808:	9b05      	ldr	r3, [sp, #20]
 800e80a:	2b01      	cmp	r3, #1
 800e80c:	dc18      	bgt.n	800e840 <_dtoa_r+0x910>
 800e80e:	9b02      	ldr	r3, [sp, #8]
 800e810:	b9b3      	cbnz	r3, 800e840 <_dtoa_r+0x910>
 800e812:	9b03      	ldr	r3, [sp, #12]
 800e814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e818:	b9a3      	cbnz	r3, 800e844 <_dtoa_r+0x914>
 800e81a:	9b03      	ldr	r3, [sp, #12]
 800e81c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e820:	0d1b      	lsrs	r3, r3, #20
 800e822:	051b      	lsls	r3, r3, #20
 800e824:	b12b      	cbz	r3, 800e832 <_dtoa_r+0x902>
 800e826:	9b04      	ldr	r3, [sp, #16]
 800e828:	3301      	adds	r3, #1
 800e82a:	9304      	str	r3, [sp, #16]
 800e82c:	f108 0801 	add.w	r8, r8, #1
 800e830:	2301      	movs	r3, #1
 800e832:	9306      	str	r3, [sp, #24]
 800e834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e836:	2b00      	cmp	r3, #0
 800e838:	f47f af74 	bne.w	800e724 <_dtoa_r+0x7f4>
 800e83c:	2001      	movs	r0, #1
 800e83e:	e779      	b.n	800e734 <_dtoa_r+0x804>
 800e840:	2300      	movs	r3, #0
 800e842:	e7f6      	b.n	800e832 <_dtoa_r+0x902>
 800e844:	9b02      	ldr	r3, [sp, #8]
 800e846:	e7f4      	b.n	800e832 <_dtoa_r+0x902>
 800e848:	d085      	beq.n	800e756 <_dtoa_r+0x826>
 800e84a:	4618      	mov	r0, r3
 800e84c:	301c      	adds	r0, #28
 800e84e:	e77d      	b.n	800e74c <_dtoa_r+0x81c>
 800e850:	40240000 	.word	0x40240000
 800e854:	9b01      	ldr	r3, [sp, #4]
 800e856:	2b00      	cmp	r3, #0
 800e858:	dc38      	bgt.n	800e8cc <_dtoa_r+0x99c>
 800e85a:	9b05      	ldr	r3, [sp, #20]
 800e85c:	2b02      	cmp	r3, #2
 800e85e:	dd35      	ble.n	800e8cc <_dtoa_r+0x99c>
 800e860:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e864:	f1b9 0f00 	cmp.w	r9, #0
 800e868:	d10d      	bne.n	800e886 <_dtoa_r+0x956>
 800e86a:	4631      	mov	r1, r6
 800e86c:	464b      	mov	r3, r9
 800e86e:	2205      	movs	r2, #5
 800e870:	4620      	mov	r0, r4
 800e872:	f000 fd59 	bl	800f328 <__multadd>
 800e876:	4601      	mov	r1, r0
 800e878:	4606      	mov	r6, r0
 800e87a:	4658      	mov	r0, fp
 800e87c:	f000 ffba 	bl	800f7f4 <__mcmp>
 800e880:	2800      	cmp	r0, #0
 800e882:	f73f adbd 	bgt.w	800e400 <_dtoa_r+0x4d0>
 800e886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e888:	9d00      	ldr	r5, [sp, #0]
 800e88a:	ea6f 0a03 	mvn.w	sl, r3
 800e88e:	f04f 0800 	mov.w	r8, #0
 800e892:	4631      	mov	r1, r6
 800e894:	4620      	mov	r0, r4
 800e896:	f000 fd25 	bl	800f2e4 <_Bfree>
 800e89a:	2f00      	cmp	r7, #0
 800e89c:	f43f aeb4 	beq.w	800e608 <_dtoa_r+0x6d8>
 800e8a0:	f1b8 0f00 	cmp.w	r8, #0
 800e8a4:	d005      	beq.n	800e8b2 <_dtoa_r+0x982>
 800e8a6:	45b8      	cmp	r8, r7
 800e8a8:	d003      	beq.n	800e8b2 <_dtoa_r+0x982>
 800e8aa:	4641      	mov	r1, r8
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	f000 fd19 	bl	800f2e4 <_Bfree>
 800e8b2:	4639      	mov	r1, r7
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	f000 fd15 	bl	800f2e4 <_Bfree>
 800e8ba:	e6a5      	b.n	800e608 <_dtoa_r+0x6d8>
 800e8bc:	2600      	movs	r6, #0
 800e8be:	4637      	mov	r7, r6
 800e8c0:	e7e1      	b.n	800e886 <_dtoa_r+0x956>
 800e8c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e8c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e8c8:	4637      	mov	r7, r6
 800e8ca:	e599      	b.n	800e400 <_dtoa_r+0x4d0>
 800e8cc:	9b08      	ldr	r3, [sp, #32]
 800e8ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	f000 80fd 	beq.w	800ead2 <_dtoa_r+0xba2>
 800e8d8:	2d00      	cmp	r5, #0
 800e8da:	dd05      	ble.n	800e8e8 <_dtoa_r+0x9b8>
 800e8dc:	4639      	mov	r1, r7
 800e8de:	462a      	mov	r2, r5
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	f000 ff1b 	bl	800f71c <__lshift>
 800e8e6:	4607      	mov	r7, r0
 800e8e8:	9b06      	ldr	r3, [sp, #24]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d05c      	beq.n	800e9a8 <_dtoa_r+0xa78>
 800e8ee:	6879      	ldr	r1, [r7, #4]
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	f000 fcb7 	bl	800f264 <_Balloc>
 800e8f6:	4605      	mov	r5, r0
 800e8f8:	b928      	cbnz	r0, 800e906 <_dtoa_r+0x9d6>
 800e8fa:	4b80      	ldr	r3, [pc, #512]	; (800eafc <_dtoa_r+0xbcc>)
 800e8fc:	4602      	mov	r2, r0
 800e8fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e902:	f7ff bb2e 	b.w	800df62 <_dtoa_r+0x32>
 800e906:	693a      	ldr	r2, [r7, #16]
 800e908:	3202      	adds	r2, #2
 800e90a:	0092      	lsls	r2, r2, #2
 800e90c:	f107 010c 	add.w	r1, r7, #12
 800e910:	300c      	adds	r0, #12
 800e912:	f000 fc99 	bl	800f248 <memcpy>
 800e916:	2201      	movs	r2, #1
 800e918:	4629      	mov	r1, r5
 800e91a:	4620      	mov	r0, r4
 800e91c:	f000 fefe 	bl	800f71c <__lshift>
 800e920:	9b00      	ldr	r3, [sp, #0]
 800e922:	3301      	adds	r3, #1
 800e924:	9301      	str	r3, [sp, #4]
 800e926:	9b00      	ldr	r3, [sp, #0]
 800e928:	444b      	add	r3, r9
 800e92a:	9307      	str	r3, [sp, #28]
 800e92c:	9b02      	ldr	r3, [sp, #8]
 800e92e:	f003 0301 	and.w	r3, r3, #1
 800e932:	46b8      	mov	r8, r7
 800e934:	9306      	str	r3, [sp, #24]
 800e936:	4607      	mov	r7, r0
 800e938:	9b01      	ldr	r3, [sp, #4]
 800e93a:	4631      	mov	r1, r6
 800e93c:	3b01      	subs	r3, #1
 800e93e:	4658      	mov	r0, fp
 800e940:	9302      	str	r3, [sp, #8]
 800e942:	f7ff fa67 	bl	800de14 <quorem>
 800e946:	4603      	mov	r3, r0
 800e948:	3330      	adds	r3, #48	; 0x30
 800e94a:	9004      	str	r0, [sp, #16]
 800e94c:	4641      	mov	r1, r8
 800e94e:	4658      	mov	r0, fp
 800e950:	9308      	str	r3, [sp, #32]
 800e952:	f000 ff4f 	bl	800f7f4 <__mcmp>
 800e956:	463a      	mov	r2, r7
 800e958:	4681      	mov	r9, r0
 800e95a:	4631      	mov	r1, r6
 800e95c:	4620      	mov	r0, r4
 800e95e:	f000 ff65 	bl	800f82c <__mdiff>
 800e962:	68c2      	ldr	r2, [r0, #12]
 800e964:	9b08      	ldr	r3, [sp, #32]
 800e966:	4605      	mov	r5, r0
 800e968:	bb02      	cbnz	r2, 800e9ac <_dtoa_r+0xa7c>
 800e96a:	4601      	mov	r1, r0
 800e96c:	4658      	mov	r0, fp
 800e96e:	f000 ff41 	bl	800f7f4 <__mcmp>
 800e972:	9b08      	ldr	r3, [sp, #32]
 800e974:	4602      	mov	r2, r0
 800e976:	4629      	mov	r1, r5
 800e978:	4620      	mov	r0, r4
 800e97a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e97e:	f000 fcb1 	bl	800f2e4 <_Bfree>
 800e982:	9b05      	ldr	r3, [sp, #20]
 800e984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e986:	9d01      	ldr	r5, [sp, #4]
 800e988:	ea43 0102 	orr.w	r1, r3, r2
 800e98c:	9b06      	ldr	r3, [sp, #24]
 800e98e:	430b      	orrs	r3, r1
 800e990:	9b08      	ldr	r3, [sp, #32]
 800e992:	d10d      	bne.n	800e9b0 <_dtoa_r+0xa80>
 800e994:	2b39      	cmp	r3, #57	; 0x39
 800e996:	d029      	beq.n	800e9ec <_dtoa_r+0xabc>
 800e998:	f1b9 0f00 	cmp.w	r9, #0
 800e99c:	dd01      	ble.n	800e9a2 <_dtoa_r+0xa72>
 800e99e:	9b04      	ldr	r3, [sp, #16]
 800e9a0:	3331      	adds	r3, #49	; 0x31
 800e9a2:	9a02      	ldr	r2, [sp, #8]
 800e9a4:	7013      	strb	r3, [r2, #0]
 800e9a6:	e774      	b.n	800e892 <_dtoa_r+0x962>
 800e9a8:	4638      	mov	r0, r7
 800e9aa:	e7b9      	b.n	800e920 <_dtoa_r+0x9f0>
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	e7e2      	b.n	800e976 <_dtoa_r+0xa46>
 800e9b0:	f1b9 0f00 	cmp.w	r9, #0
 800e9b4:	db06      	blt.n	800e9c4 <_dtoa_r+0xa94>
 800e9b6:	9905      	ldr	r1, [sp, #20]
 800e9b8:	ea41 0909 	orr.w	r9, r1, r9
 800e9bc:	9906      	ldr	r1, [sp, #24]
 800e9be:	ea59 0101 	orrs.w	r1, r9, r1
 800e9c2:	d120      	bne.n	800ea06 <_dtoa_r+0xad6>
 800e9c4:	2a00      	cmp	r2, #0
 800e9c6:	ddec      	ble.n	800e9a2 <_dtoa_r+0xa72>
 800e9c8:	4659      	mov	r1, fp
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	9301      	str	r3, [sp, #4]
 800e9d0:	f000 fea4 	bl	800f71c <__lshift>
 800e9d4:	4631      	mov	r1, r6
 800e9d6:	4683      	mov	fp, r0
 800e9d8:	f000 ff0c 	bl	800f7f4 <__mcmp>
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	9b01      	ldr	r3, [sp, #4]
 800e9e0:	dc02      	bgt.n	800e9e8 <_dtoa_r+0xab8>
 800e9e2:	d1de      	bne.n	800e9a2 <_dtoa_r+0xa72>
 800e9e4:	07da      	lsls	r2, r3, #31
 800e9e6:	d5dc      	bpl.n	800e9a2 <_dtoa_r+0xa72>
 800e9e8:	2b39      	cmp	r3, #57	; 0x39
 800e9ea:	d1d8      	bne.n	800e99e <_dtoa_r+0xa6e>
 800e9ec:	9a02      	ldr	r2, [sp, #8]
 800e9ee:	2339      	movs	r3, #57	; 0x39
 800e9f0:	7013      	strb	r3, [r2, #0]
 800e9f2:	462b      	mov	r3, r5
 800e9f4:	461d      	mov	r5, r3
 800e9f6:	3b01      	subs	r3, #1
 800e9f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e9fc:	2a39      	cmp	r2, #57	; 0x39
 800e9fe:	d050      	beq.n	800eaa2 <_dtoa_r+0xb72>
 800ea00:	3201      	adds	r2, #1
 800ea02:	701a      	strb	r2, [r3, #0]
 800ea04:	e745      	b.n	800e892 <_dtoa_r+0x962>
 800ea06:	2a00      	cmp	r2, #0
 800ea08:	dd03      	ble.n	800ea12 <_dtoa_r+0xae2>
 800ea0a:	2b39      	cmp	r3, #57	; 0x39
 800ea0c:	d0ee      	beq.n	800e9ec <_dtoa_r+0xabc>
 800ea0e:	3301      	adds	r3, #1
 800ea10:	e7c7      	b.n	800e9a2 <_dtoa_r+0xa72>
 800ea12:	9a01      	ldr	r2, [sp, #4]
 800ea14:	9907      	ldr	r1, [sp, #28]
 800ea16:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ea1a:	428a      	cmp	r2, r1
 800ea1c:	d02a      	beq.n	800ea74 <_dtoa_r+0xb44>
 800ea1e:	4659      	mov	r1, fp
 800ea20:	2300      	movs	r3, #0
 800ea22:	220a      	movs	r2, #10
 800ea24:	4620      	mov	r0, r4
 800ea26:	f000 fc7f 	bl	800f328 <__multadd>
 800ea2a:	45b8      	cmp	r8, r7
 800ea2c:	4683      	mov	fp, r0
 800ea2e:	f04f 0300 	mov.w	r3, #0
 800ea32:	f04f 020a 	mov.w	r2, #10
 800ea36:	4641      	mov	r1, r8
 800ea38:	4620      	mov	r0, r4
 800ea3a:	d107      	bne.n	800ea4c <_dtoa_r+0xb1c>
 800ea3c:	f000 fc74 	bl	800f328 <__multadd>
 800ea40:	4680      	mov	r8, r0
 800ea42:	4607      	mov	r7, r0
 800ea44:	9b01      	ldr	r3, [sp, #4]
 800ea46:	3301      	adds	r3, #1
 800ea48:	9301      	str	r3, [sp, #4]
 800ea4a:	e775      	b.n	800e938 <_dtoa_r+0xa08>
 800ea4c:	f000 fc6c 	bl	800f328 <__multadd>
 800ea50:	4639      	mov	r1, r7
 800ea52:	4680      	mov	r8, r0
 800ea54:	2300      	movs	r3, #0
 800ea56:	220a      	movs	r2, #10
 800ea58:	4620      	mov	r0, r4
 800ea5a:	f000 fc65 	bl	800f328 <__multadd>
 800ea5e:	4607      	mov	r7, r0
 800ea60:	e7f0      	b.n	800ea44 <_dtoa_r+0xb14>
 800ea62:	f1b9 0f00 	cmp.w	r9, #0
 800ea66:	9a00      	ldr	r2, [sp, #0]
 800ea68:	bfcc      	ite	gt
 800ea6a:	464d      	movgt	r5, r9
 800ea6c:	2501      	movle	r5, #1
 800ea6e:	4415      	add	r5, r2
 800ea70:	f04f 0800 	mov.w	r8, #0
 800ea74:	4659      	mov	r1, fp
 800ea76:	2201      	movs	r2, #1
 800ea78:	4620      	mov	r0, r4
 800ea7a:	9301      	str	r3, [sp, #4]
 800ea7c:	f000 fe4e 	bl	800f71c <__lshift>
 800ea80:	4631      	mov	r1, r6
 800ea82:	4683      	mov	fp, r0
 800ea84:	f000 feb6 	bl	800f7f4 <__mcmp>
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	dcb2      	bgt.n	800e9f2 <_dtoa_r+0xac2>
 800ea8c:	d102      	bne.n	800ea94 <_dtoa_r+0xb64>
 800ea8e:	9b01      	ldr	r3, [sp, #4]
 800ea90:	07db      	lsls	r3, r3, #31
 800ea92:	d4ae      	bmi.n	800e9f2 <_dtoa_r+0xac2>
 800ea94:	462b      	mov	r3, r5
 800ea96:	461d      	mov	r5, r3
 800ea98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea9c:	2a30      	cmp	r2, #48	; 0x30
 800ea9e:	d0fa      	beq.n	800ea96 <_dtoa_r+0xb66>
 800eaa0:	e6f7      	b.n	800e892 <_dtoa_r+0x962>
 800eaa2:	9a00      	ldr	r2, [sp, #0]
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d1a5      	bne.n	800e9f4 <_dtoa_r+0xac4>
 800eaa8:	f10a 0a01 	add.w	sl, sl, #1
 800eaac:	2331      	movs	r3, #49	; 0x31
 800eaae:	e779      	b.n	800e9a4 <_dtoa_r+0xa74>
 800eab0:	4b13      	ldr	r3, [pc, #76]	; (800eb00 <_dtoa_r+0xbd0>)
 800eab2:	f7ff baaf 	b.w	800e014 <_dtoa_r+0xe4>
 800eab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	f47f aa86 	bne.w	800dfca <_dtoa_r+0x9a>
 800eabe:	4b11      	ldr	r3, [pc, #68]	; (800eb04 <_dtoa_r+0xbd4>)
 800eac0:	f7ff baa8 	b.w	800e014 <_dtoa_r+0xe4>
 800eac4:	f1b9 0f00 	cmp.w	r9, #0
 800eac8:	dc03      	bgt.n	800ead2 <_dtoa_r+0xba2>
 800eaca:	9b05      	ldr	r3, [sp, #20]
 800eacc:	2b02      	cmp	r3, #2
 800eace:	f73f aec9 	bgt.w	800e864 <_dtoa_r+0x934>
 800ead2:	9d00      	ldr	r5, [sp, #0]
 800ead4:	4631      	mov	r1, r6
 800ead6:	4658      	mov	r0, fp
 800ead8:	f7ff f99c 	bl	800de14 <quorem>
 800eadc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800eae0:	f805 3b01 	strb.w	r3, [r5], #1
 800eae4:	9a00      	ldr	r2, [sp, #0]
 800eae6:	1aaa      	subs	r2, r5, r2
 800eae8:	4591      	cmp	r9, r2
 800eaea:	ddba      	ble.n	800ea62 <_dtoa_r+0xb32>
 800eaec:	4659      	mov	r1, fp
 800eaee:	2300      	movs	r3, #0
 800eaf0:	220a      	movs	r2, #10
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	f000 fc18 	bl	800f328 <__multadd>
 800eaf8:	4683      	mov	fp, r0
 800eafa:	e7eb      	b.n	800ead4 <_dtoa_r+0xba4>
 800eafc:	08024491 	.word	0x08024491
 800eb00:	080241f0 	.word	0x080241f0
 800eb04:	08024425 	.word	0x08024425

0800eb08 <fiprintf>:
 800eb08:	b40e      	push	{r1, r2, r3}
 800eb0a:	b503      	push	{r0, r1, lr}
 800eb0c:	4601      	mov	r1, r0
 800eb0e:	ab03      	add	r3, sp, #12
 800eb10:	4805      	ldr	r0, [pc, #20]	; (800eb28 <fiprintf+0x20>)
 800eb12:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb16:	6800      	ldr	r0, [r0, #0]
 800eb18:	9301      	str	r3, [sp, #4]
 800eb1a:	f001 fa9d 	bl	8010058 <_vfiprintf_r>
 800eb1e:	b002      	add	sp, #8
 800eb20:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb24:	b003      	add	sp, #12
 800eb26:	4770      	bx	lr
 800eb28:	20000040 	.word	0x20000040

0800eb2c <rshift>:
 800eb2c:	6903      	ldr	r3, [r0, #16]
 800eb2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eb32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eb3a:	f100 0414 	add.w	r4, r0, #20
 800eb3e:	dd45      	ble.n	800ebcc <rshift+0xa0>
 800eb40:	f011 011f 	ands.w	r1, r1, #31
 800eb44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eb48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eb4c:	d10c      	bne.n	800eb68 <rshift+0x3c>
 800eb4e:	f100 0710 	add.w	r7, r0, #16
 800eb52:	4629      	mov	r1, r5
 800eb54:	42b1      	cmp	r1, r6
 800eb56:	d334      	bcc.n	800ebc2 <rshift+0x96>
 800eb58:	1a9b      	subs	r3, r3, r2
 800eb5a:	009b      	lsls	r3, r3, #2
 800eb5c:	1eea      	subs	r2, r5, #3
 800eb5e:	4296      	cmp	r6, r2
 800eb60:	bf38      	it	cc
 800eb62:	2300      	movcc	r3, #0
 800eb64:	4423      	add	r3, r4
 800eb66:	e015      	b.n	800eb94 <rshift+0x68>
 800eb68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eb6c:	f1c1 0820 	rsb	r8, r1, #32
 800eb70:	40cf      	lsrs	r7, r1
 800eb72:	f105 0e04 	add.w	lr, r5, #4
 800eb76:	46a1      	mov	r9, r4
 800eb78:	4576      	cmp	r6, lr
 800eb7a:	46f4      	mov	ip, lr
 800eb7c:	d815      	bhi.n	800ebaa <rshift+0x7e>
 800eb7e:	1a9b      	subs	r3, r3, r2
 800eb80:	009a      	lsls	r2, r3, #2
 800eb82:	3a04      	subs	r2, #4
 800eb84:	3501      	adds	r5, #1
 800eb86:	42ae      	cmp	r6, r5
 800eb88:	bf38      	it	cc
 800eb8a:	2200      	movcc	r2, #0
 800eb8c:	18a3      	adds	r3, r4, r2
 800eb8e:	50a7      	str	r7, [r4, r2]
 800eb90:	b107      	cbz	r7, 800eb94 <rshift+0x68>
 800eb92:	3304      	adds	r3, #4
 800eb94:	1b1a      	subs	r2, r3, r4
 800eb96:	42a3      	cmp	r3, r4
 800eb98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eb9c:	bf08      	it	eq
 800eb9e:	2300      	moveq	r3, #0
 800eba0:	6102      	str	r2, [r0, #16]
 800eba2:	bf08      	it	eq
 800eba4:	6143      	streq	r3, [r0, #20]
 800eba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebaa:	f8dc c000 	ldr.w	ip, [ip]
 800ebae:	fa0c fc08 	lsl.w	ip, ip, r8
 800ebb2:	ea4c 0707 	orr.w	r7, ip, r7
 800ebb6:	f849 7b04 	str.w	r7, [r9], #4
 800ebba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ebbe:	40cf      	lsrs	r7, r1
 800ebc0:	e7da      	b.n	800eb78 <rshift+0x4c>
 800ebc2:	f851 cb04 	ldr.w	ip, [r1], #4
 800ebc6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ebca:	e7c3      	b.n	800eb54 <rshift+0x28>
 800ebcc:	4623      	mov	r3, r4
 800ebce:	e7e1      	b.n	800eb94 <rshift+0x68>

0800ebd0 <__hexdig_fun>:
 800ebd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ebd4:	2b09      	cmp	r3, #9
 800ebd6:	d802      	bhi.n	800ebde <__hexdig_fun+0xe>
 800ebd8:	3820      	subs	r0, #32
 800ebda:	b2c0      	uxtb	r0, r0
 800ebdc:	4770      	bx	lr
 800ebde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ebe2:	2b05      	cmp	r3, #5
 800ebe4:	d801      	bhi.n	800ebea <__hexdig_fun+0x1a>
 800ebe6:	3847      	subs	r0, #71	; 0x47
 800ebe8:	e7f7      	b.n	800ebda <__hexdig_fun+0xa>
 800ebea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ebee:	2b05      	cmp	r3, #5
 800ebf0:	d801      	bhi.n	800ebf6 <__hexdig_fun+0x26>
 800ebf2:	3827      	subs	r0, #39	; 0x27
 800ebf4:	e7f1      	b.n	800ebda <__hexdig_fun+0xa>
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	4770      	bx	lr
	...

0800ebfc <__gethex>:
 800ebfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec00:	ed2d 8b02 	vpush	{d8}
 800ec04:	b089      	sub	sp, #36	; 0x24
 800ec06:	ee08 0a10 	vmov	s16, r0
 800ec0a:	9304      	str	r3, [sp, #16]
 800ec0c:	4bbc      	ldr	r3, [pc, #752]	; (800ef00 <__gethex+0x304>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	9301      	str	r3, [sp, #4]
 800ec12:	4618      	mov	r0, r3
 800ec14:	468b      	mov	fp, r1
 800ec16:	4690      	mov	r8, r2
 800ec18:	f7f1 faec 	bl	80001f4 <strlen>
 800ec1c:	9b01      	ldr	r3, [sp, #4]
 800ec1e:	f8db 2000 	ldr.w	r2, [fp]
 800ec22:	4403      	add	r3, r0
 800ec24:	4682      	mov	sl, r0
 800ec26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ec2a:	9305      	str	r3, [sp, #20]
 800ec2c:	1c93      	adds	r3, r2, #2
 800ec2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ec32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ec36:	32fe      	adds	r2, #254	; 0xfe
 800ec38:	18d1      	adds	r1, r2, r3
 800ec3a:	461f      	mov	r7, r3
 800ec3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ec40:	9100      	str	r1, [sp, #0]
 800ec42:	2830      	cmp	r0, #48	; 0x30
 800ec44:	d0f8      	beq.n	800ec38 <__gethex+0x3c>
 800ec46:	f7ff ffc3 	bl	800ebd0 <__hexdig_fun>
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d13a      	bne.n	800ecc6 <__gethex+0xca>
 800ec50:	9901      	ldr	r1, [sp, #4]
 800ec52:	4652      	mov	r2, sl
 800ec54:	4638      	mov	r0, r7
 800ec56:	f001 fb47 	bl	80102e8 <strncmp>
 800ec5a:	4605      	mov	r5, r0
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d168      	bne.n	800ed32 <__gethex+0x136>
 800ec60:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ec64:	eb07 060a 	add.w	r6, r7, sl
 800ec68:	f7ff ffb2 	bl	800ebd0 <__hexdig_fun>
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	d062      	beq.n	800ed36 <__gethex+0x13a>
 800ec70:	4633      	mov	r3, r6
 800ec72:	7818      	ldrb	r0, [r3, #0]
 800ec74:	2830      	cmp	r0, #48	; 0x30
 800ec76:	461f      	mov	r7, r3
 800ec78:	f103 0301 	add.w	r3, r3, #1
 800ec7c:	d0f9      	beq.n	800ec72 <__gethex+0x76>
 800ec7e:	f7ff ffa7 	bl	800ebd0 <__hexdig_fun>
 800ec82:	2301      	movs	r3, #1
 800ec84:	fab0 f480 	clz	r4, r0
 800ec88:	0964      	lsrs	r4, r4, #5
 800ec8a:	4635      	mov	r5, r6
 800ec8c:	9300      	str	r3, [sp, #0]
 800ec8e:	463a      	mov	r2, r7
 800ec90:	4616      	mov	r6, r2
 800ec92:	3201      	adds	r2, #1
 800ec94:	7830      	ldrb	r0, [r6, #0]
 800ec96:	f7ff ff9b 	bl	800ebd0 <__hexdig_fun>
 800ec9a:	2800      	cmp	r0, #0
 800ec9c:	d1f8      	bne.n	800ec90 <__gethex+0x94>
 800ec9e:	9901      	ldr	r1, [sp, #4]
 800eca0:	4652      	mov	r2, sl
 800eca2:	4630      	mov	r0, r6
 800eca4:	f001 fb20 	bl	80102e8 <strncmp>
 800eca8:	b980      	cbnz	r0, 800eccc <__gethex+0xd0>
 800ecaa:	b94d      	cbnz	r5, 800ecc0 <__gethex+0xc4>
 800ecac:	eb06 050a 	add.w	r5, r6, sl
 800ecb0:	462a      	mov	r2, r5
 800ecb2:	4616      	mov	r6, r2
 800ecb4:	3201      	adds	r2, #1
 800ecb6:	7830      	ldrb	r0, [r6, #0]
 800ecb8:	f7ff ff8a 	bl	800ebd0 <__hexdig_fun>
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	d1f8      	bne.n	800ecb2 <__gethex+0xb6>
 800ecc0:	1bad      	subs	r5, r5, r6
 800ecc2:	00ad      	lsls	r5, r5, #2
 800ecc4:	e004      	b.n	800ecd0 <__gethex+0xd4>
 800ecc6:	2400      	movs	r4, #0
 800ecc8:	4625      	mov	r5, r4
 800ecca:	e7e0      	b.n	800ec8e <__gethex+0x92>
 800eccc:	2d00      	cmp	r5, #0
 800ecce:	d1f7      	bne.n	800ecc0 <__gethex+0xc4>
 800ecd0:	7833      	ldrb	r3, [r6, #0]
 800ecd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ecd6:	2b50      	cmp	r3, #80	; 0x50
 800ecd8:	d13b      	bne.n	800ed52 <__gethex+0x156>
 800ecda:	7873      	ldrb	r3, [r6, #1]
 800ecdc:	2b2b      	cmp	r3, #43	; 0x2b
 800ecde:	d02c      	beq.n	800ed3a <__gethex+0x13e>
 800ece0:	2b2d      	cmp	r3, #45	; 0x2d
 800ece2:	d02e      	beq.n	800ed42 <__gethex+0x146>
 800ece4:	1c71      	adds	r1, r6, #1
 800ece6:	f04f 0900 	mov.w	r9, #0
 800ecea:	7808      	ldrb	r0, [r1, #0]
 800ecec:	f7ff ff70 	bl	800ebd0 <__hexdig_fun>
 800ecf0:	1e43      	subs	r3, r0, #1
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	2b18      	cmp	r3, #24
 800ecf6:	d82c      	bhi.n	800ed52 <__gethex+0x156>
 800ecf8:	f1a0 0210 	sub.w	r2, r0, #16
 800ecfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ed00:	f7ff ff66 	bl	800ebd0 <__hexdig_fun>
 800ed04:	1e43      	subs	r3, r0, #1
 800ed06:	b2db      	uxtb	r3, r3
 800ed08:	2b18      	cmp	r3, #24
 800ed0a:	d91d      	bls.n	800ed48 <__gethex+0x14c>
 800ed0c:	f1b9 0f00 	cmp.w	r9, #0
 800ed10:	d000      	beq.n	800ed14 <__gethex+0x118>
 800ed12:	4252      	negs	r2, r2
 800ed14:	4415      	add	r5, r2
 800ed16:	f8cb 1000 	str.w	r1, [fp]
 800ed1a:	b1e4      	cbz	r4, 800ed56 <__gethex+0x15a>
 800ed1c:	9b00      	ldr	r3, [sp, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	bf14      	ite	ne
 800ed22:	2700      	movne	r7, #0
 800ed24:	2706      	moveq	r7, #6
 800ed26:	4638      	mov	r0, r7
 800ed28:	b009      	add	sp, #36	; 0x24
 800ed2a:	ecbd 8b02 	vpop	{d8}
 800ed2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed32:	463e      	mov	r6, r7
 800ed34:	4625      	mov	r5, r4
 800ed36:	2401      	movs	r4, #1
 800ed38:	e7ca      	b.n	800ecd0 <__gethex+0xd4>
 800ed3a:	f04f 0900 	mov.w	r9, #0
 800ed3e:	1cb1      	adds	r1, r6, #2
 800ed40:	e7d3      	b.n	800ecea <__gethex+0xee>
 800ed42:	f04f 0901 	mov.w	r9, #1
 800ed46:	e7fa      	b.n	800ed3e <__gethex+0x142>
 800ed48:	230a      	movs	r3, #10
 800ed4a:	fb03 0202 	mla	r2, r3, r2, r0
 800ed4e:	3a10      	subs	r2, #16
 800ed50:	e7d4      	b.n	800ecfc <__gethex+0x100>
 800ed52:	4631      	mov	r1, r6
 800ed54:	e7df      	b.n	800ed16 <__gethex+0x11a>
 800ed56:	1bf3      	subs	r3, r6, r7
 800ed58:	3b01      	subs	r3, #1
 800ed5a:	4621      	mov	r1, r4
 800ed5c:	2b07      	cmp	r3, #7
 800ed5e:	dc0b      	bgt.n	800ed78 <__gethex+0x17c>
 800ed60:	ee18 0a10 	vmov	r0, s16
 800ed64:	f000 fa7e 	bl	800f264 <_Balloc>
 800ed68:	4604      	mov	r4, r0
 800ed6a:	b940      	cbnz	r0, 800ed7e <__gethex+0x182>
 800ed6c:	4b65      	ldr	r3, [pc, #404]	; (800ef04 <__gethex+0x308>)
 800ed6e:	4602      	mov	r2, r0
 800ed70:	21de      	movs	r1, #222	; 0xde
 800ed72:	4865      	ldr	r0, [pc, #404]	; (800ef08 <__gethex+0x30c>)
 800ed74:	f7ff f830 	bl	800ddd8 <__assert_func>
 800ed78:	3101      	adds	r1, #1
 800ed7a:	105b      	asrs	r3, r3, #1
 800ed7c:	e7ee      	b.n	800ed5c <__gethex+0x160>
 800ed7e:	f100 0914 	add.w	r9, r0, #20
 800ed82:	f04f 0b00 	mov.w	fp, #0
 800ed86:	f1ca 0301 	rsb	r3, sl, #1
 800ed8a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ed8e:	f8cd b000 	str.w	fp, [sp]
 800ed92:	9306      	str	r3, [sp, #24]
 800ed94:	42b7      	cmp	r7, r6
 800ed96:	d340      	bcc.n	800ee1a <__gethex+0x21e>
 800ed98:	9802      	ldr	r0, [sp, #8]
 800ed9a:	9b00      	ldr	r3, [sp, #0]
 800ed9c:	f840 3b04 	str.w	r3, [r0], #4
 800eda0:	eba0 0009 	sub.w	r0, r0, r9
 800eda4:	1080      	asrs	r0, r0, #2
 800eda6:	0146      	lsls	r6, r0, #5
 800eda8:	6120      	str	r0, [r4, #16]
 800edaa:	4618      	mov	r0, r3
 800edac:	f000 fb50 	bl	800f450 <__hi0bits>
 800edb0:	1a30      	subs	r0, r6, r0
 800edb2:	f8d8 6000 	ldr.w	r6, [r8]
 800edb6:	42b0      	cmp	r0, r6
 800edb8:	dd63      	ble.n	800ee82 <__gethex+0x286>
 800edba:	1b87      	subs	r7, r0, r6
 800edbc:	4639      	mov	r1, r7
 800edbe:	4620      	mov	r0, r4
 800edc0:	f000 feea 	bl	800fb98 <__any_on>
 800edc4:	4682      	mov	sl, r0
 800edc6:	b1a8      	cbz	r0, 800edf4 <__gethex+0x1f8>
 800edc8:	1e7b      	subs	r3, r7, #1
 800edca:	1159      	asrs	r1, r3, #5
 800edcc:	f003 021f 	and.w	r2, r3, #31
 800edd0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800edd4:	f04f 0a01 	mov.w	sl, #1
 800edd8:	fa0a f202 	lsl.w	r2, sl, r2
 800eddc:	420a      	tst	r2, r1
 800edde:	d009      	beq.n	800edf4 <__gethex+0x1f8>
 800ede0:	4553      	cmp	r3, sl
 800ede2:	dd05      	ble.n	800edf0 <__gethex+0x1f4>
 800ede4:	1eb9      	subs	r1, r7, #2
 800ede6:	4620      	mov	r0, r4
 800ede8:	f000 fed6 	bl	800fb98 <__any_on>
 800edec:	2800      	cmp	r0, #0
 800edee:	d145      	bne.n	800ee7c <__gethex+0x280>
 800edf0:	f04f 0a02 	mov.w	sl, #2
 800edf4:	4639      	mov	r1, r7
 800edf6:	4620      	mov	r0, r4
 800edf8:	f7ff fe98 	bl	800eb2c <rshift>
 800edfc:	443d      	add	r5, r7
 800edfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee02:	42ab      	cmp	r3, r5
 800ee04:	da4c      	bge.n	800eea0 <__gethex+0x2a4>
 800ee06:	ee18 0a10 	vmov	r0, s16
 800ee0a:	4621      	mov	r1, r4
 800ee0c:	f000 fa6a 	bl	800f2e4 <_Bfree>
 800ee10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ee12:	2300      	movs	r3, #0
 800ee14:	6013      	str	r3, [r2, #0]
 800ee16:	27a3      	movs	r7, #163	; 0xa3
 800ee18:	e785      	b.n	800ed26 <__gethex+0x12a>
 800ee1a:	1e73      	subs	r3, r6, #1
 800ee1c:	9a05      	ldr	r2, [sp, #20]
 800ee1e:	9303      	str	r3, [sp, #12]
 800ee20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d019      	beq.n	800ee5c <__gethex+0x260>
 800ee28:	f1bb 0f20 	cmp.w	fp, #32
 800ee2c:	d107      	bne.n	800ee3e <__gethex+0x242>
 800ee2e:	9b02      	ldr	r3, [sp, #8]
 800ee30:	9a00      	ldr	r2, [sp, #0]
 800ee32:	f843 2b04 	str.w	r2, [r3], #4
 800ee36:	9302      	str	r3, [sp, #8]
 800ee38:	2300      	movs	r3, #0
 800ee3a:	9300      	str	r3, [sp, #0]
 800ee3c:	469b      	mov	fp, r3
 800ee3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ee42:	f7ff fec5 	bl	800ebd0 <__hexdig_fun>
 800ee46:	9b00      	ldr	r3, [sp, #0]
 800ee48:	f000 000f 	and.w	r0, r0, #15
 800ee4c:	fa00 f00b 	lsl.w	r0, r0, fp
 800ee50:	4303      	orrs	r3, r0
 800ee52:	9300      	str	r3, [sp, #0]
 800ee54:	f10b 0b04 	add.w	fp, fp, #4
 800ee58:	9b03      	ldr	r3, [sp, #12]
 800ee5a:	e00d      	b.n	800ee78 <__gethex+0x27c>
 800ee5c:	9b03      	ldr	r3, [sp, #12]
 800ee5e:	9a06      	ldr	r2, [sp, #24]
 800ee60:	4413      	add	r3, r2
 800ee62:	42bb      	cmp	r3, r7
 800ee64:	d3e0      	bcc.n	800ee28 <__gethex+0x22c>
 800ee66:	4618      	mov	r0, r3
 800ee68:	9901      	ldr	r1, [sp, #4]
 800ee6a:	9307      	str	r3, [sp, #28]
 800ee6c:	4652      	mov	r2, sl
 800ee6e:	f001 fa3b 	bl	80102e8 <strncmp>
 800ee72:	9b07      	ldr	r3, [sp, #28]
 800ee74:	2800      	cmp	r0, #0
 800ee76:	d1d7      	bne.n	800ee28 <__gethex+0x22c>
 800ee78:	461e      	mov	r6, r3
 800ee7a:	e78b      	b.n	800ed94 <__gethex+0x198>
 800ee7c:	f04f 0a03 	mov.w	sl, #3
 800ee80:	e7b8      	b.n	800edf4 <__gethex+0x1f8>
 800ee82:	da0a      	bge.n	800ee9a <__gethex+0x29e>
 800ee84:	1a37      	subs	r7, r6, r0
 800ee86:	4621      	mov	r1, r4
 800ee88:	ee18 0a10 	vmov	r0, s16
 800ee8c:	463a      	mov	r2, r7
 800ee8e:	f000 fc45 	bl	800f71c <__lshift>
 800ee92:	1bed      	subs	r5, r5, r7
 800ee94:	4604      	mov	r4, r0
 800ee96:	f100 0914 	add.w	r9, r0, #20
 800ee9a:	f04f 0a00 	mov.w	sl, #0
 800ee9e:	e7ae      	b.n	800edfe <__gethex+0x202>
 800eea0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eea4:	42a8      	cmp	r0, r5
 800eea6:	dd72      	ble.n	800ef8e <__gethex+0x392>
 800eea8:	1b45      	subs	r5, r0, r5
 800eeaa:	42ae      	cmp	r6, r5
 800eeac:	dc36      	bgt.n	800ef1c <__gethex+0x320>
 800eeae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eeb2:	2b02      	cmp	r3, #2
 800eeb4:	d02a      	beq.n	800ef0c <__gethex+0x310>
 800eeb6:	2b03      	cmp	r3, #3
 800eeb8:	d02c      	beq.n	800ef14 <__gethex+0x318>
 800eeba:	2b01      	cmp	r3, #1
 800eebc:	d115      	bne.n	800eeea <__gethex+0x2ee>
 800eebe:	42ae      	cmp	r6, r5
 800eec0:	d113      	bne.n	800eeea <__gethex+0x2ee>
 800eec2:	2e01      	cmp	r6, #1
 800eec4:	d10b      	bne.n	800eede <__gethex+0x2e2>
 800eec6:	9a04      	ldr	r2, [sp, #16]
 800eec8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eecc:	6013      	str	r3, [r2, #0]
 800eece:	2301      	movs	r3, #1
 800eed0:	6123      	str	r3, [r4, #16]
 800eed2:	f8c9 3000 	str.w	r3, [r9]
 800eed6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eed8:	2762      	movs	r7, #98	; 0x62
 800eeda:	601c      	str	r4, [r3, #0]
 800eedc:	e723      	b.n	800ed26 <__gethex+0x12a>
 800eede:	1e71      	subs	r1, r6, #1
 800eee0:	4620      	mov	r0, r4
 800eee2:	f000 fe59 	bl	800fb98 <__any_on>
 800eee6:	2800      	cmp	r0, #0
 800eee8:	d1ed      	bne.n	800eec6 <__gethex+0x2ca>
 800eeea:	ee18 0a10 	vmov	r0, s16
 800eeee:	4621      	mov	r1, r4
 800eef0:	f000 f9f8 	bl	800f2e4 <_Bfree>
 800eef4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eef6:	2300      	movs	r3, #0
 800eef8:	6013      	str	r3, [r2, #0]
 800eefa:	2750      	movs	r7, #80	; 0x50
 800eefc:	e713      	b.n	800ed26 <__gethex+0x12a>
 800eefe:	bf00      	nop
 800ef00:	0802450c 	.word	0x0802450c
 800ef04:	08024491 	.word	0x08024491
 800ef08:	080244a2 	.word	0x080244a2
 800ef0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1eb      	bne.n	800eeea <__gethex+0x2ee>
 800ef12:	e7d8      	b.n	800eec6 <__gethex+0x2ca>
 800ef14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d1d5      	bne.n	800eec6 <__gethex+0x2ca>
 800ef1a:	e7e6      	b.n	800eeea <__gethex+0x2ee>
 800ef1c:	1e6f      	subs	r7, r5, #1
 800ef1e:	f1ba 0f00 	cmp.w	sl, #0
 800ef22:	d131      	bne.n	800ef88 <__gethex+0x38c>
 800ef24:	b127      	cbz	r7, 800ef30 <__gethex+0x334>
 800ef26:	4639      	mov	r1, r7
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f000 fe35 	bl	800fb98 <__any_on>
 800ef2e:	4682      	mov	sl, r0
 800ef30:	117b      	asrs	r3, r7, #5
 800ef32:	2101      	movs	r1, #1
 800ef34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ef38:	f007 071f 	and.w	r7, r7, #31
 800ef3c:	fa01 f707 	lsl.w	r7, r1, r7
 800ef40:	421f      	tst	r7, r3
 800ef42:	4629      	mov	r1, r5
 800ef44:	4620      	mov	r0, r4
 800ef46:	bf18      	it	ne
 800ef48:	f04a 0a02 	orrne.w	sl, sl, #2
 800ef4c:	1b76      	subs	r6, r6, r5
 800ef4e:	f7ff fded 	bl	800eb2c <rshift>
 800ef52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ef56:	2702      	movs	r7, #2
 800ef58:	f1ba 0f00 	cmp.w	sl, #0
 800ef5c:	d048      	beq.n	800eff0 <__gethex+0x3f4>
 800ef5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef62:	2b02      	cmp	r3, #2
 800ef64:	d015      	beq.n	800ef92 <__gethex+0x396>
 800ef66:	2b03      	cmp	r3, #3
 800ef68:	d017      	beq.n	800ef9a <__gethex+0x39e>
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d109      	bne.n	800ef82 <__gethex+0x386>
 800ef6e:	f01a 0f02 	tst.w	sl, #2
 800ef72:	d006      	beq.n	800ef82 <__gethex+0x386>
 800ef74:	f8d9 0000 	ldr.w	r0, [r9]
 800ef78:	ea4a 0a00 	orr.w	sl, sl, r0
 800ef7c:	f01a 0f01 	tst.w	sl, #1
 800ef80:	d10e      	bne.n	800efa0 <__gethex+0x3a4>
 800ef82:	f047 0710 	orr.w	r7, r7, #16
 800ef86:	e033      	b.n	800eff0 <__gethex+0x3f4>
 800ef88:	f04f 0a01 	mov.w	sl, #1
 800ef8c:	e7d0      	b.n	800ef30 <__gethex+0x334>
 800ef8e:	2701      	movs	r7, #1
 800ef90:	e7e2      	b.n	800ef58 <__gethex+0x35c>
 800ef92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef94:	f1c3 0301 	rsb	r3, r3, #1
 800ef98:	9315      	str	r3, [sp, #84]	; 0x54
 800ef9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d0f0      	beq.n	800ef82 <__gethex+0x386>
 800efa0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800efa4:	f104 0314 	add.w	r3, r4, #20
 800efa8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800efac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800efb0:	f04f 0c00 	mov.w	ip, #0
 800efb4:	4618      	mov	r0, r3
 800efb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800efba:	f1b2 3fff 	cmp.w	r2, #4294967295
 800efbe:	d01c      	beq.n	800effa <__gethex+0x3fe>
 800efc0:	3201      	adds	r2, #1
 800efc2:	6002      	str	r2, [r0, #0]
 800efc4:	2f02      	cmp	r7, #2
 800efc6:	f104 0314 	add.w	r3, r4, #20
 800efca:	d13f      	bne.n	800f04c <__gethex+0x450>
 800efcc:	f8d8 2000 	ldr.w	r2, [r8]
 800efd0:	3a01      	subs	r2, #1
 800efd2:	42b2      	cmp	r2, r6
 800efd4:	d10a      	bne.n	800efec <__gethex+0x3f0>
 800efd6:	1171      	asrs	r1, r6, #5
 800efd8:	2201      	movs	r2, #1
 800efda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800efde:	f006 061f 	and.w	r6, r6, #31
 800efe2:	fa02 f606 	lsl.w	r6, r2, r6
 800efe6:	421e      	tst	r6, r3
 800efe8:	bf18      	it	ne
 800efea:	4617      	movne	r7, r2
 800efec:	f047 0720 	orr.w	r7, r7, #32
 800eff0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eff2:	601c      	str	r4, [r3, #0]
 800eff4:	9b04      	ldr	r3, [sp, #16]
 800eff6:	601d      	str	r5, [r3, #0]
 800eff8:	e695      	b.n	800ed26 <__gethex+0x12a>
 800effa:	4299      	cmp	r1, r3
 800effc:	f843 cc04 	str.w	ip, [r3, #-4]
 800f000:	d8d8      	bhi.n	800efb4 <__gethex+0x3b8>
 800f002:	68a3      	ldr	r3, [r4, #8]
 800f004:	459b      	cmp	fp, r3
 800f006:	db19      	blt.n	800f03c <__gethex+0x440>
 800f008:	6861      	ldr	r1, [r4, #4]
 800f00a:	ee18 0a10 	vmov	r0, s16
 800f00e:	3101      	adds	r1, #1
 800f010:	f000 f928 	bl	800f264 <_Balloc>
 800f014:	4681      	mov	r9, r0
 800f016:	b918      	cbnz	r0, 800f020 <__gethex+0x424>
 800f018:	4b1a      	ldr	r3, [pc, #104]	; (800f084 <__gethex+0x488>)
 800f01a:	4602      	mov	r2, r0
 800f01c:	2184      	movs	r1, #132	; 0x84
 800f01e:	e6a8      	b.n	800ed72 <__gethex+0x176>
 800f020:	6922      	ldr	r2, [r4, #16]
 800f022:	3202      	adds	r2, #2
 800f024:	f104 010c 	add.w	r1, r4, #12
 800f028:	0092      	lsls	r2, r2, #2
 800f02a:	300c      	adds	r0, #12
 800f02c:	f000 f90c 	bl	800f248 <memcpy>
 800f030:	4621      	mov	r1, r4
 800f032:	ee18 0a10 	vmov	r0, s16
 800f036:	f000 f955 	bl	800f2e4 <_Bfree>
 800f03a:	464c      	mov	r4, r9
 800f03c:	6923      	ldr	r3, [r4, #16]
 800f03e:	1c5a      	adds	r2, r3, #1
 800f040:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f044:	6122      	str	r2, [r4, #16]
 800f046:	2201      	movs	r2, #1
 800f048:	615a      	str	r2, [r3, #20]
 800f04a:	e7bb      	b.n	800efc4 <__gethex+0x3c8>
 800f04c:	6922      	ldr	r2, [r4, #16]
 800f04e:	455a      	cmp	r2, fp
 800f050:	dd0b      	ble.n	800f06a <__gethex+0x46e>
 800f052:	2101      	movs	r1, #1
 800f054:	4620      	mov	r0, r4
 800f056:	f7ff fd69 	bl	800eb2c <rshift>
 800f05a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f05e:	3501      	adds	r5, #1
 800f060:	42ab      	cmp	r3, r5
 800f062:	f6ff aed0 	blt.w	800ee06 <__gethex+0x20a>
 800f066:	2701      	movs	r7, #1
 800f068:	e7c0      	b.n	800efec <__gethex+0x3f0>
 800f06a:	f016 061f 	ands.w	r6, r6, #31
 800f06e:	d0fa      	beq.n	800f066 <__gethex+0x46a>
 800f070:	449a      	add	sl, r3
 800f072:	f1c6 0620 	rsb	r6, r6, #32
 800f076:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f07a:	f000 f9e9 	bl	800f450 <__hi0bits>
 800f07e:	42b0      	cmp	r0, r6
 800f080:	dbe7      	blt.n	800f052 <__gethex+0x456>
 800f082:	e7f0      	b.n	800f066 <__gethex+0x46a>
 800f084:	08024491 	.word	0x08024491

0800f088 <L_shift>:
 800f088:	f1c2 0208 	rsb	r2, r2, #8
 800f08c:	0092      	lsls	r2, r2, #2
 800f08e:	b570      	push	{r4, r5, r6, lr}
 800f090:	f1c2 0620 	rsb	r6, r2, #32
 800f094:	6843      	ldr	r3, [r0, #4]
 800f096:	6804      	ldr	r4, [r0, #0]
 800f098:	fa03 f506 	lsl.w	r5, r3, r6
 800f09c:	432c      	orrs	r4, r5
 800f09e:	40d3      	lsrs	r3, r2
 800f0a0:	6004      	str	r4, [r0, #0]
 800f0a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800f0a6:	4288      	cmp	r0, r1
 800f0a8:	d3f4      	bcc.n	800f094 <L_shift+0xc>
 800f0aa:	bd70      	pop	{r4, r5, r6, pc}

0800f0ac <__match>:
 800f0ac:	b530      	push	{r4, r5, lr}
 800f0ae:	6803      	ldr	r3, [r0, #0]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0b6:	b914      	cbnz	r4, 800f0be <__match+0x12>
 800f0b8:	6003      	str	r3, [r0, #0]
 800f0ba:	2001      	movs	r0, #1
 800f0bc:	bd30      	pop	{r4, r5, pc}
 800f0be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f0c6:	2d19      	cmp	r5, #25
 800f0c8:	bf98      	it	ls
 800f0ca:	3220      	addls	r2, #32
 800f0cc:	42a2      	cmp	r2, r4
 800f0ce:	d0f0      	beq.n	800f0b2 <__match+0x6>
 800f0d0:	2000      	movs	r0, #0
 800f0d2:	e7f3      	b.n	800f0bc <__match+0x10>

0800f0d4 <__hexnan>:
 800f0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d8:	680b      	ldr	r3, [r1, #0]
 800f0da:	6801      	ldr	r1, [r0, #0]
 800f0dc:	115e      	asrs	r6, r3, #5
 800f0de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f0e2:	f013 031f 	ands.w	r3, r3, #31
 800f0e6:	b087      	sub	sp, #28
 800f0e8:	bf18      	it	ne
 800f0ea:	3604      	addne	r6, #4
 800f0ec:	2500      	movs	r5, #0
 800f0ee:	1f37      	subs	r7, r6, #4
 800f0f0:	4682      	mov	sl, r0
 800f0f2:	4690      	mov	r8, r2
 800f0f4:	9301      	str	r3, [sp, #4]
 800f0f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800f0fa:	46b9      	mov	r9, r7
 800f0fc:	463c      	mov	r4, r7
 800f0fe:	9502      	str	r5, [sp, #8]
 800f100:	46ab      	mov	fp, r5
 800f102:	784a      	ldrb	r2, [r1, #1]
 800f104:	1c4b      	adds	r3, r1, #1
 800f106:	9303      	str	r3, [sp, #12]
 800f108:	b342      	cbz	r2, 800f15c <__hexnan+0x88>
 800f10a:	4610      	mov	r0, r2
 800f10c:	9105      	str	r1, [sp, #20]
 800f10e:	9204      	str	r2, [sp, #16]
 800f110:	f7ff fd5e 	bl	800ebd0 <__hexdig_fun>
 800f114:	2800      	cmp	r0, #0
 800f116:	d14f      	bne.n	800f1b8 <__hexnan+0xe4>
 800f118:	9a04      	ldr	r2, [sp, #16]
 800f11a:	9905      	ldr	r1, [sp, #20]
 800f11c:	2a20      	cmp	r2, #32
 800f11e:	d818      	bhi.n	800f152 <__hexnan+0x7e>
 800f120:	9b02      	ldr	r3, [sp, #8]
 800f122:	459b      	cmp	fp, r3
 800f124:	dd13      	ble.n	800f14e <__hexnan+0x7a>
 800f126:	454c      	cmp	r4, r9
 800f128:	d206      	bcs.n	800f138 <__hexnan+0x64>
 800f12a:	2d07      	cmp	r5, #7
 800f12c:	dc04      	bgt.n	800f138 <__hexnan+0x64>
 800f12e:	462a      	mov	r2, r5
 800f130:	4649      	mov	r1, r9
 800f132:	4620      	mov	r0, r4
 800f134:	f7ff ffa8 	bl	800f088 <L_shift>
 800f138:	4544      	cmp	r4, r8
 800f13a:	d950      	bls.n	800f1de <__hexnan+0x10a>
 800f13c:	2300      	movs	r3, #0
 800f13e:	f1a4 0904 	sub.w	r9, r4, #4
 800f142:	f844 3c04 	str.w	r3, [r4, #-4]
 800f146:	f8cd b008 	str.w	fp, [sp, #8]
 800f14a:	464c      	mov	r4, r9
 800f14c:	461d      	mov	r5, r3
 800f14e:	9903      	ldr	r1, [sp, #12]
 800f150:	e7d7      	b.n	800f102 <__hexnan+0x2e>
 800f152:	2a29      	cmp	r2, #41	; 0x29
 800f154:	d156      	bne.n	800f204 <__hexnan+0x130>
 800f156:	3102      	adds	r1, #2
 800f158:	f8ca 1000 	str.w	r1, [sl]
 800f15c:	f1bb 0f00 	cmp.w	fp, #0
 800f160:	d050      	beq.n	800f204 <__hexnan+0x130>
 800f162:	454c      	cmp	r4, r9
 800f164:	d206      	bcs.n	800f174 <__hexnan+0xa0>
 800f166:	2d07      	cmp	r5, #7
 800f168:	dc04      	bgt.n	800f174 <__hexnan+0xa0>
 800f16a:	462a      	mov	r2, r5
 800f16c:	4649      	mov	r1, r9
 800f16e:	4620      	mov	r0, r4
 800f170:	f7ff ff8a 	bl	800f088 <L_shift>
 800f174:	4544      	cmp	r4, r8
 800f176:	d934      	bls.n	800f1e2 <__hexnan+0x10e>
 800f178:	f1a8 0204 	sub.w	r2, r8, #4
 800f17c:	4623      	mov	r3, r4
 800f17e:	f853 1b04 	ldr.w	r1, [r3], #4
 800f182:	f842 1f04 	str.w	r1, [r2, #4]!
 800f186:	429f      	cmp	r7, r3
 800f188:	d2f9      	bcs.n	800f17e <__hexnan+0xaa>
 800f18a:	1b3b      	subs	r3, r7, r4
 800f18c:	f023 0303 	bic.w	r3, r3, #3
 800f190:	3304      	adds	r3, #4
 800f192:	3401      	adds	r4, #1
 800f194:	3e03      	subs	r6, #3
 800f196:	42b4      	cmp	r4, r6
 800f198:	bf88      	it	hi
 800f19a:	2304      	movhi	r3, #4
 800f19c:	4443      	add	r3, r8
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f843 2b04 	str.w	r2, [r3], #4
 800f1a4:	429f      	cmp	r7, r3
 800f1a6:	d2fb      	bcs.n	800f1a0 <__hexnan+0xcc>
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	b91b      	cbnz	r3, 800f1b4 <__hexnan+0xe0>
 800f1ac:	4547      	cmp	r7, r8
 800f1ae:	d127      	bne.n	800f200 <__hexnan+0x12c>
 800f1b0:	2301      	movs	r3, #1
 800f1b2:	603b      	str	r3, [r7, #0]
 800f1b4:	2005      	movs	r0, #5
 800f1b6:	e026      	b.n	800f206 <__hexnan+0x132>
 800f1b8:	3501      	adds	r5, #1
 800f1ba:	2d08      	cmp	r5, #8
 800f1bc:	f10b 0b01 	add.w	fp, fp, #1
 800f1c0:	dd06      	ble.n	800f1d0 <__hexnan+0xfc>
 800f1c2:	4544      	cmp	r4, r8
 800f1c4:	d9c3      	bls.n	800f14e <__hexnan+0x7a>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800f1cc:	2501      	movs	r5, #1
 800f1ce:	3c04      	subs	r4, #4
 800f1d0:	6822      	ldr	r2, [r4, #0]
 800f1d2:	f000 000f 	and.w	r0, r0, #15
 800f1d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f1da:	6022      	str	r2, [r4, #0]
 800f1dc:	e7b7      	b.n	800f14e <__hexnan+0x7a>
 800f1de:	2508      	movs	r5, #8
 800f1e0:	e7b5      	b.n	800f14e <__hexnan+0x7a>
 800f1e2:	9b01      	ldr	r3, [sp, #4]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d0df      	beq.n	800f1a8 <__hexnan+0xd4>
 800f1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ec:	f1c3 0320 	rsb	r3, r3, #32
 800f1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800f1f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f1f8:	401a      	ands	r2, r3
 800f1fa:	f846 2c04 	str.w	r2, [r6, #-4]
 800f1fe:	e7d3      	b.n	800f1a8 <__hexnan+0xd4>
 800f200:	3f04      	subs	r7, #4
 800f202:	e7d1      	b.n	800f1a8 <__hexnan+0xd4>
 800f204:	2004      	movs	r0, #4
 800f206:	b007      	add	sp, #28
 800f208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f20c <_localeconv_r>:
 800f20c:	4800      	ldr	r0, [pc, #0]	; (800f210 <_localeconv_r+0x4>)
 800f20e:	4770      	bx	lr
 800f210:	20000198 	.word	0x20000198

0800f214 <malloc>:
 800f214:	4b02      	ldr	r3, [pc, #8]	; (800f220 <malloc+0xc>)
 800f216:	4601      	mov	r1, r0
 800f218:	6818      	ldr	r0, [r3, #0]
 800f21a:	f000 bd3d 	b.w	800fc98 <_malloc_r>
 800f21e:	bf00      	nop
 800f220:	20000040 	.word	0x20000040

0800f224 <__ascii_mbtowc>:
 800f224:	b082      	sub	sp, #8
 800f226:	b901      	cbnz	r1, 800f22a <__ascii_mbtowc+0x6>
 800f228:	a901      	add	r1, sp, #4
 800f22a:	b142      	cbz	r2, 800f23e <__ascii_mbtowc+0x1a>
 800f22c:	b14b      	cbz	r3, 800f242 <__ascii_mbtowc+0x1e>
 800f22e:	7813      	ldrb	r3, [r2, #0]
 800f230:	600b      	str	r3, [r1, #0]
 800f232:	7812      	ldrb	r2, [r2, #0]
 800f234:	1e10      	subs	r0, r2, #0
 800f236:	bf18      	it	ne
 800f238:	2001      	movne	r0, #1
 800f23a:	b002      	add	sp, #8
 800f23c:	4770      	bx	lr
 800f23e:	4610      	mov	r0, r2
 800f240:	e7fb      	b.n	800f23a <__ascii_mbtowc+0x16>
 800f242:	f06f 0001 	mvn.w	r0, #1
 800f246:	e7f8      	b.n	800f23a <__ascii_mbtowc+0x16>

0800f248 <memcpy>:
 800f248:	440a      	add	r2, r1
 800f24a:	4291      	cmp	r1, r2
 800f24c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f250:	d100      	bne.n	800f254 <memcpy+0xc>
 800f252:	4770      	bx	lr
 800f254:	b510      	push	{r4, lr}
 800f256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f25a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f25e:	4291      	cmp	r1, r2
 800f260:	d1f9      	bne.n	800f256 <memcpy+0xe>
 800f262:	bd10      	pop	{r4, pc}

0800f264 <_Balloc>:
 800f264:	b570      	push	{r4, r5, r6, lr}
 800f266:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f268:	4604      	mov	r4, r0
 800f26a:	460d      	mov	r5, r1
 800f26c:	b976      	cbnz	r6, 800f28c <_Balloc+0x28>
 800f26e:	2010      	movs	r0, #16
 800f270:	f7ff ffd0 	bl	800f214 <malloc>
 800f274:	4602      	mov	r2, r0
 800f276:	6260      	str	r0, [r4, #36]	; 0x24
 800f278:	b920      	cbnz	r0, 800f284 <_Balloc+0x20>
 800f27a:	4b18      	ldr	r3, [pc, #96]	; (800f2dc <_Balloc+0x78>)
 800f27c:	4818      	ldr	r0, [pc, #96]	; (800f2e0 <_Balloc+0x7c>)
 800f27e:	2166      	movs	r1, #102	; 0x66
 800f280:	f7fe fdaa 	bl	800ddd8 <__assert_func>
 800f284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f288:	6006      	str	r6, [r0, #0]
 800f28a:	60c6      	str	r6, [r0, #12]
 800f28c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f28e:	68f3      	ldr	r3, [r6, #12]
 800f290:	b183      	cbz	r3, 800f2b4 <_Balloc+0x50>
 800f292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f29a:	b9b8      	cbnz	r0, 800f2cc <_Balloc+0x68>
 800f29c:	2101      	movs	r1, #1
 800f29e:	fa01 f605 	lsl.w	r6, r1, r5
 800f2a2:	1d72      	adds	r2, r6, #5
 800f2a4:	0092      	lsls	r2, r2, #2
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f000 fc97 	bl	800fbda <_calloc_r>
 800f2ac:	b160      	cbz	r0, 800f2c8 <_Balloc+0x64>
 800f2ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f2b2:	e00e      	b.n	800f2d2 <_Balloc+0x6e>
 800f2b4:	2221      	movs	r2, #33	; 0x21
 800f2b6:	2104      	movs	r1, #4
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f000 fc8e 	bl	800fbda <_calloc_r>
 800f2be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2c0:	60f0      	str	r0, [r6, #12]
 800f2c2:	68db      	ldr	r3, [r3, #12]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d1e4      	bne.n	800f292 <_Balloc+0x2e>
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	bd70      	pop	{r4, r5, r6, pc}
 800f2cc:	6802      	ldr	r2, [r0, #0]
 800f2ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f2d8:	e7f7      	b.n	800f2ca <_Balloc+0x66>
 800f2da:	bf00      	nop
 800f2dc:	08024270 	.word	0x08024270
 800f2e0:	08024520 	.word	0x08024520

0800f2e4 <_Bfree>:
 800f2e4:	b570      	push	{r4, r5, r6, lr}
 800f2e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f2e8:	4605      	mov	r5, r0
 800f2ea:	460c      	mov	r4, r1
 800f2ec:	b976      	cbnz	r6, 800f30c <_Bfree+0x28>
 800f2ee:	2010      	movs	r0, #16
 800f2f0:	f7ff ff90 	bl	800f214 <malloc>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	6268      	str	r0, [r5, #36]	; 0x24
 800f2f8:	b920      	cbnz	r0, 800f304 <_Bfree+0x20>
 800f2fa:	4b09      	ldr	r3, [pc, #36]	; (800f320 <_Bfree+0x3c>)
 800f2fc:	4809      	ldr	r0, [pc, #36]	; (800f324 <_Bfree+0x40>)
 800f2fe:	218a      	movs	r1, #138	; 0x8a
 800f300:	f7fe fd6a 	bl	800ddd8 <__assert_func>
 800f304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f308:	6006      	str	r6, [r0, #0]
 800f30a:	60c6      	str	r6, [r0, #12]
 800f30c:	b13c      	cbz	r4, 800f31e <_Bfree+0x3a>
 800f30e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f310:	6862      	ldr	r2, [r4, #4]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f318:	6021      	str	r1, [r4, #0]
 800f31a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f31e:	bd70      	pop	{r4, r5, r6, pc}
 800f320:	08024270 	.word	0x08024270
 800f324:	08024520 	.word	0x08024520

0800f328 <__multadd>:
 800f328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f32c:	690e      	ldr	r6, [r1, #16]
 800f32e:	4607      	mov	r7, r0
 800f330:	4698      	mov	r8, r3
 800f332:	460c      	mov	r4, r1
 800f334:	f101 0014 	add.w	r0, r1, #20
 800f338:	2300      	movs	r3, #0
 800f33a:	6805      	ldr	r5, [r0, #0]
 800f33c:	b2a9      	uxth	r1, r5
 800f33e:	fb02 8101 	mla	r1, r2, r1, r8
 800f342:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f346:	0c2d      	lsrs	r5, r5, #16
 800f348:	fb02 c505 	mla	r5, r2, r5, ip
 800f34c:	b289      	uxth	r1, r1
 800f34e:	3301      	adds	r3, #1
 800f350:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f354:	429e      	cmp	r6, r3
 800f356:	f840 1b04 	str.w	r1, [r0], #4
 800f35a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f35e:	dcec      	bgt.n	800f33a <__multadd+0x12>
 800f360:	f1b8 0f00 	cmp.w	r8, #0
 800f364:	d022      	beq.n	800f3ac <__multadd+0x84>
 800f366:	68a3      	ldr	r3, [r4, #8]
 800f368:	42b3      	cmp	r3, r6
 800f36a:	dc19      	bgt.n	800f3a0 <__multadd+0x78>
 800f36c:	6861      	ldr	r1, [r4, #4]
 800f36e:	4638      	mov	r0, r7
 800f370:	3101      	adds	r1, #1
 800f372:	f7ff ff77 	bl	800f264 <_Balloc>
 800f376:	4605      	mov	r5, r0
 800f378:	b928      	cbnz	r0, 800f386 <__multadd+0x5e>
 800f37a:	4602      	mov	r2, r0
 800f37c:	4b0d      	ldr	r3, [pc, #52]	; (800f3b4 <__multadd+0x8c>)
 800f37e:	480e      	ldr	r0, [pc, #56]	; (800f3b8 <__multadd+0x90>)
 800f380:	21b5      	movs	r1, #181	; 0xb5
 800f382:	f7fe fd29 	bl	800ddd8 <__assert_func>
 800f386:	6922      	ldr	r2, [r4, #16]
 800f388:	3202      	adds	r2, #2
 800f38a:	f104 010c 	add.w	r1, r4, #12
 800f38e:	0092      	lsls	r2, r2, #2
 800f390:	300c      	adds	r0, #12
 800f392:	f7ff ff59 	bl	800f248 <memcpy>
 800f396:	4621      	mov	r1, r4
 800f398:	4638      	mov	r0, r7
 800f39a:	f7ff ffa3 	bl	800f2e4 <_Bfree>
 800f39e:	462c      	mov	r4, r5
 800f3a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f3a4:	3601      	adds	r6, #1
 800f3a6:	f8c3 8014 	str.w	r8, [r3, #20]
 800f3aa:	6126      	str	r6, [r4, #16]
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3b2:	bf00      	nop
 800f3b4:	08024491 	.word	0x08024491
 800f3b8:	08024520 	.word	0x08024520

0800f3bc <__s2b>:
 800f3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3c0:	460c      	mov	r4, r1
 800f3c2:	4615      	mov	r5, r2
 800f3c4:	461f      	mov	r7, r3
 800f3c6:	2209      	movs	r2, #9
 800f3c8:	3308      	adds	r3, #8
 800f3ca:	4606      	mov	r6, r0
 800f3cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3d0:	2100      	movs	r1, #0
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	db09      	blt.n	800f3ec <__s2b+0x30>
 800f3d8:	4630      	mov	r0, r6
 800f3da:	f7ff ff43 	bl	800f264 <_Balloc>
 800f3de:	b940      	cbnz	r0, 800f3f2 <__s2b+0x36>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	4b19      	ldr	r3, [pc, #100]	; (800f448 <__s2b+0x8c>)
 800f3e4:	4819      	ldr	r0, [pc, #100]	; (800f44c <__s2b+0x90>)
 800f3e6:	21ce      	movs	r1, #206	; 0xce
 800f3e8:	f7fe fcf6 	bl	800ddd8 <__assert_func>
 800f3ec:	0052      	lsls	r2, r2, #1
 800f3ee:	3101      	adds	r1, #1
 800f3f0:	e7f0      	b.n	800f3d4 <__s2b+0x18>
 800f3f2:	9b08      	ldr	r3, [sp, #32]
 800f3f4:	6143      	str	r3, [r0, #20]
 800f3f6:	2d09      	cmp	r5, #9
 800f3f8:	f04f 0301 	mov.w	r3, #1
 800f3fc:	6103      	str	r3, [r0, #16]
 800f3fe:	dd16      	ble.n	800f42e <__s2b+0x72>
 800f400:	f104 0909 	add.w	r9, r4, #9
 800f404:	46c8      	mov	r8, r9
 800f406:	442c      	add	r4, r5
 800f408:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f40c:	4601      	mov	r1, r0
 800f40e:	3b30      	subs	r3, #48	; 0x30
 800f410:	220a      	movs	r2, #10
 800f412:	4630      	mov	r0, r6
 800f414:	f7ff ff88 	bl	800f328 <__multadd>
 800f418:	45a0      	cmp	r8, r4
 800f41a:	d1f5      	bne.n	800f408 <__s2b+0x4c>
 800f41c:	f1a5 0408 	sub.w	r4, r5, #8
 800f420:	444c      	add	r4, r9
 800f422:	1b2d      	subs	r5, r5, r4
 800f424:	1963      	adds	r3, r4, r5
 800f426:	42bb      	cmp	r3, r7
 800f428:	db04      	blt.n	800f434 <__s2b+0x78>
 800f42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f42e:	340a      	adds	r4, #10
 800f430:	2509      	movs	r5, #9
 800f432:	e7f6      	b.n	800f422 <__s2b+0x66>
 800f434:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f438:	4601      	mov	r1, r0
 800f43a:	3b30      	subs	r3, #48	; 0x30
 800f43c:	220a      	movs	r2, #10
 800f43e:	4630      	mov	r0, r6
 800f440:	f7ff ff72 	bl	800f328 <__multadd>
 800f444:	e7ee      	b.n	800f424 <__s2b+0x68>
 800f446:	bf00      	nop
 800f448:	08024491 	.word	0x08024491
 800f44c:	08024520 	.word	0x08024520

0800f450 <__hi0bits>:
 800f450:	0c03      	lsrs	r3, r0, #16
 800f452:	041b      	lsls	r3, r3, #16
 800f454:	b9d3      	cbnz	r3, 800f48c <__hi0bits+0x3c>
 800f456:	0400      	lsls	r0, r0, #16
 800f458:	2310      	movs	r3, #16
 800f45a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f45e:	bf04      	itt	eq
 800f460:	0200      	lsleq	r0, r0, #8
 800f462:	3308      	addeq	r3, #8
 800f464:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f468:	bf04      	itt	eq
 800f46a:	0100      	lsleq	r0, r0, #4
 800f46c:	3304      	addeq	r3, #4
 800f46e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f472:	bf04      	itt	eq
 800f474:	0080      	lsleq	r0, r0, #2
 800f476:	3302      	addeq	r3, #2
 800f478:	2800      	cmp	r0, #0
 800f47a:	db05      	blt.n	800f488 <__hi0bits+0x38>
 800f47c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f480:	f103 0301 	add.w	r3, r3, #1
 800f484:	bf08      	it	eq
 800f486:	2320      	moveq	r3, #32
 800f488:	4618      	mov	r0, r3
 800f48a:	4770      	bx	lr
 800f48c:	2300      	movs	r3, #0
 800f48e:	e7e4      	b.n	800f45a <__hi0bits+0xa>

0800f490 <__lo0bits>:
 800f490:	6803      	ldr	r3, [r0, #0]
 800f492:	f013 0207 	ands.w	r2, r3, #7
 800f496:	4601      	mov	r1, r0
 800f498:	d00b      	beq.n	800f4b2 <__lo0bits+0x22>
 800f49a:	07da      	lsls	r2, r3, #31
 800f49c:	d424      	bmi.n	800f4e8 <__lo0bits+0x58>
 800f49e:	0798      	lsls	r0, r3, #30
 800f4a0:	bf49      	itett	mi
 800f4a2:	085b      	lsrmi	r3, r3, #1
 800f4a4:	089b      	lsrpl	r3, r3, #2
 800f4a6:	2001      	movmi	r0, #1
 800f4a8:	600b      	strmi	r3, [r1, #0]
 800f4aa:	bf5c      	itt	pl
 800f4ac:	600b      	strpl	r3, [r1, #0]
 800f4ae:	2002      	movpl	r0, #2
 800f4b0:	4770      	bx	lr
 800f4b2:	b298      	uxth	r0, r3
 800f4b4:	b9b0      	cbnz	r0, 800f4e4 <__lo0bits+0x54>
 800f4b6:	0c1b      	lsrs	r3, r3, #16
 800f4b8:	2010      	movs	r0, #16
 800f4ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f4be:	bf04      	itt	eq
 800f4c0:	0a1b      	lsreq	r3, r3, #8
 800f4c2:	3008      	addeq	r0, #8
 800f4c4:	071a      	lsls	r2, r3, #28
 800f4c6:	bf04      	itt	eq
 800f4c8:	091b      	lsreq	r3, r3, #4
 800f4ca:	3004      	addeq	r0, #4
 800f4cc:	079a      	lsls	r2, r3, #30
 800f4ce:	bf04      	itt	eq
 800f4d0:	089b      	lsreq	r3, r3, #2
 800f4d2:	3002      	addeq	r0, #2
 800f4d4:	07da      	lsls	r2, r3, #31
 800f4d6:	d403      	bmi.n	800f4e0 <__lo0bits+0x50>
 800f4d8:	085b      	lsrs	r3, r3, #1
 800f4da:	f100 0001 	add.w	r0, r0, #1
 800f4de:	d005      	beq.n	800f4ec <__lo0bits+0x5c>
 800f4e0:	600b      	str	r3, [r1, #0]
 800f4e2:	4770      	bx	lr
 800f4e4:	4610      	mov	r0, r2
 800f4e6:	e7e8      	b.n	800f4ba <__lo0bits+0x2a>
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	4770      	bx	lr
 800f4ec:	2020      	movs	r0, #32
 800f4ee:	4770      	bx	lr

0800f4f0 <__i2b>:
 800f4f0:	b510      	push	{r4, lr}
 800f4f2:	460c      	mov	r4, r1
 800f4f4:	2101      	movs	r1, #1
 800f4f6:	f7ff feb5 	bl	800f264 <_Balloc>
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	b928      	cbnz	r0, 800f50a <__i2b+0x1a>
 800f4fe:	4b05      	ldr	r3, [pc, #20]	; (800f514 <__i2b+0x24>)
 800f500:	4805      	ldr	r0, [pc, #20]	; (800f518 <__i2b+0x28>)
 800f502:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f506:	f7fe fc67 	bl	800ddd8 <__assert_func>
 800f50a:	2301      	movs	r3, #1
 800f50c:	6144      	str	r4, [r0, #20]
 800f50e:	6103      	str	r3, [r0, #16]
 800f510:	bd10      	pop	{r4, pc}
 800f512:	bf00      	nop
 800f514:	08024491 	.word	0x08024491
 800f518:	08024520 	.word	0x08024520

0800f51c <__multiply>:
 800f51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f520:	4614      	mov	r4, r2
 800f522:	690a      	ldr	r2, [r1, #16]
 800f524:	6923      	ldr	r3, [r4, #16]
 800f526:	429a      	cmp	r2, r3
 800f528:	bfb8      	it	lt
 800f52a:	460b      	movlt	r3, r1
 800f52c:	460d      	mov	r5, r1
 800f52e:	bfbc      	itt	lt
 800f530:	4625      	movlt	r5, r4
 800f532:	461c      	movlt	r4, r3
 800f534:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f538:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f53c:	68ab      	ldr	r3, [r5, #8]
 800f53e:	6869      	ldr	r1, [r5, #4]
 800f540:	eb0a 0709 	add.w	r7, sl, r9
 800f544:	42bb      	cmp	r3, r7
 800f546:	b085      	sub	sp, #20
 800f548:	bfb8      	it	lt
 800f54a:	3101      	addlt	r1, #1
 800f54c:	f7ff fe8a 	bl	800f264 <_Balloc>
 800f550:	b930      	cbnz	r0, 800f560 <__multiply+0x44>
 800f552:	4602      	mov	r2, r0
 800f554:	4b42      	ldr	r3, [pc, #264]	; (800f660 <__multiply+0x144>)
 800f556:	4843      	ldr	r0, [pc, #268]	; (800f664 <__multiply+0x148>)
 800f558:	f240 115d 	movw	r1, #349	; 0x15d
 800f55c:	f7fe fc3c 	bl	800ddd8 <__assert_func>
 800f560:	f100 0614 	add.w	r6, r0, #20
 800f564:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f568:	4633      	mov	r3, r6
 800f56a:	2200      	movs	r2, #0
 800f56c:	4543      	cmp	r3, r8
 800f56e:	d31e      	bcc.n	800f5ae <__multiply+0x92>
 800f570:	f105 0c14 	add.w	ip, r5, #20
 800f574:	f104 0314 	add.w	r3, r4, #20
 800f578:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f57c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f580:	9202      	str	r2, [sp, #8]
 800f582:	ebac 0205 	sub.w	r2, ip, r5
 800f586:	3a15      	subs	r2, #21
 800f588:	f022 0203 	bic.w	r2, r2, #3
 800f58c:	3204      	adds	r2, #4
 800f58e:	f105 0115 	add.w	r1, r5, #21
 800f592:	458c      	cmp	ip, r1
 800f594:	bf38      	it	cc
 800f596:	2204      	movcc	r2, #4
 800f598:	9201      	str	r2, [sp, #4]
 800f59a:	9a02      	ldr	r2, [sp, #8]
 800f59c:	9303      	str	r3, [sp, #12]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d808      	bhi.n	800f5b4 <__multiply+0x98>
 800f5a2:	2f00      	cmp	r7, #0
 800f5a4:	dc55      	bgt.n	800f652 <__multiply+0x136>
 800f5a6:	6107      	str	r7, [r0, #16]
 800f5a8:	b005      	add	sp, #20
 800f5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ae:	f843 2b04 	str.w	r2, [r3], #4
 800f5b2:	e7db      	b.n	800f56c <__multiply+0x50>
 800f5b4:	f8b3 a000 	ldrh.w	sl, [r3]
 800f5b8:	f1ba 0f00 	cmp.w	sl, #0
 800f5bc:	d020      	beq.n	800f600 <__multiply+0xe4>
 800f5be:	f105 0e14 	add.w	lr, r5, #20
 800f5c2:	46b1      	mov	r9, r6
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f5ca:	f8d9 b000 	ldr.w	fp, [r9]
 800f5ce:	b2a1      	uxth	r1, r4
 800f5d0:	fa1f fb8b 	uxth.w	fp, fp
 800f5d4:	fb0a b101 	mla	r1, sl, r1, fp
 800f5d8:	4411      	add	r1, r2
 800f5da:	f8d9 2000 	ldr.w	r2, [r9]
 800f5de:	0c24      	lsrs	r4, r4, #16
 800f5e0:	0c12      	lsrs	r2, r2, #16
 800f5e2:	fb0a 2404 	mla	r4, sl, r4, r2
 800f5e6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f5ea:	b289      	uxth	r1, r1
 800f5ec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f5f0:	45f4      	cmp	ip, lr
 800f5f2:	f849 1b04 	str.w	r1, [r9], #4
 800f5f6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f5fa:	d8e4      	bhi.n	800f5c6 <__multiply+0xaa>
 800f5fc:	9901      	ldr	r1, [sp, #4]
 800f5fe:	5072      	str	r2, [r6, r1]
 800f600:	9a03      	ldr	r2, [sp, #12]
 800f602:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f606:	3304      	adds	r3, #4
 800f608:	f1b9 0f00 	cmp.w	r9, #0
 800f60c:	d01f      	beq.n	800f64e <__multiply+0x132>
 800f60e:	6834      	ldr	r4, [r6, #0]
 800f610:	f105 0114 	add.w	r1, r5, #20
 800f614:	46b6      	mov	lr, r6
 800f616:	f04f 0a00 	mov.w	sl, #0
 800f61a:	880a      	ldrh	r2, [r1, #0]
 800f61c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f620:	fb09 b202 	mla	r2, r9, r2, fp
 800f624:	4492      	add	sl, r2
 800f626:	b2a4      	uxth	r4, r4
 800f628:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f62c:	f84e 4b04 	str.w	r4, [lr], #4
 800f630:	f851 4b04 	ldr.w	r4, [r1], #4
 800f634:	f8be 2000 	ldrh.w	r2, [lr]
 800f638:	0c24      	lsrs	r4, r4, #16
 800f63a:	fb09 2404 	mla	r4, r9, r4, r2
 800f63e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f642:	458c      	cmp	ip, r1
 800f644:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f648:	d8e7      	bhi.n	800f61a <__multiply+0xfe>
 800f64a:	9a01      	ldr	r2, [sp, #4]
 800f64c:	50b4      	str	r4, [r6, r2]
 800f64e:	3604      	adds	r6, #4
 800f650:	e7a3      	b.n	800f59a <__multiply+0x7e>
 800f652:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f656:	2b00      	cmp	r3, #0
 800f658:	d1a5      	bne.n	800f5a6 <__multiply+0x8a>
 800f65a:	3f01      	subs	r7, #1
 800f65c:	e7a1      	b.n	800f5a2 <__multiply+0x86>
 800f65e:	bf00      	nop
 800f660:	08024491 	.word	0x08024491
 800f664:	08024520 	.word	0x08024520

0800f668 <__pow5mult>:
 800f668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f66c:	4615      	mov	r5, r2
 800f66e:	f012 0203 	ands.w	r2, r2, #3
 800f672:	4606      	mov	r6, r0
 800f674:	460f      	mov	r7, r1
 800f676:	d007      	beq.n	800f688 <__pow5mult+0x20>
 800f678:	4c25      	ldr	r4, [pc, #148]	; (800f710 <__pow5mult+0xa8>)
 800f67a:	3a01      	subs	r2, #1
 800f67c:	2300      	movs	r3, #0
 800f67e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f682:	f7ff fe51 	bl	800f328 <__multadd>
 800f686:	4607      	mov	r7, r0
 800f688:	10ad      	asrs	r5, r5, #2
 800f68a:	d03d      	beq.n	800f708 <__pow5mult+0xa0>
 800f68c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f68e:	b97c      	cbnz	r4, 800f6b0 <__pow5mult+0x48>
 800f690:	2010      	movs	r0, #16
 800f692:	f7ff fdbf 	bl	800f214 <malloc>
 800f696:	4602      	mov	r2, r0
 800f698:	6270      	str	r0, [r6, #36]	; 0x24
 800f69a:	b928      	cbnz	r0, 800f6a8 <__pow5mult+0x40>
 800f69c:	4b1d      	ldr	r3, [pc, #116]	; (800f714 <__pow5mult+0xac>)
 800f69e:	481e      	ldr	r0, [pc, #120]	; (800f718 <__pow5mult+0xb0>)
 800f6a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f6a4:	f7fe fb98 	bl	800ddd8 <__assert_func>
 800f6a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f6ac:	6004      	str	r4, [r0, #0]
 800f6ae:	60c4      	str	r4, [r0, #12]
 800f6b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f6b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f6b8:	b94c      	cbnz	r4, 800f6ce <__pow5mult+0x66>
 800f6ba:	f240 2171 	movw	r1, #625	; 0x271
 800f6be:	4630      	mov	r0, r6
 800f6c0:	f7ff ff16 	bl	800f4f0 <__i2b>
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	6003      	str	r3, [r0, #0]
 800f6ce:	f04f 0900 	mov.w	r9, #0
 800f6d2:	07eb      	lsls	r3, r5, #31
 800f6d4:	d50a      	bpl.n	800f6ec <__pow5mult+0x84>
 800f6d6:	4639      	mov	r1, r7
 800f6d8:	4622      	mov	r2, r4
 800f6da:	4630      	mov	r0, r6
 800f6dc:	f7ff ff1e 	bl	800f51c <__multiply>
 800f6e0:	4639      	mov	r1, r7
 800f6e2:	4680      	mov	r8, r0
 800f6e4:	4630      	mov	r0, r6
 800f6e6:	f7ff fdfd 	bl	800f2e4 <_Bfree>
 800f6ea:	4647      	mov	r7, r8
 800f6ec:	106d      	asrs	r5, r5, #1
 800f6ee:	d00b      	beq.n	800f708 <__pow5mult+0xa0>
 800f6f0:	6820      	ldr	r0, [r4, #0]
 800f6f2:	b938      	cbnz	r0, 800f704 <__pow5mult+0x9c>
 800f6f4:	4622      	mov	r2, r4
 800f6f6:	4621      	mov	r1, r4
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	f7ff ff0f 	bl	800f51c <__multiply>
 800f6fe:	6020      	str	r0, [r4, #0]
 800f700:	f8c0 9000 	str.w	r9, [r0]
 800f704:	4604      	mov	r4, r0
 800f706:	e7e4      	b.n	800f6d2 <__pow5mult+0x6a>
 800f708:	4638      	mov	r0, r7
 800f70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f70e:	bf00      	nop
 800f710:	08024670 	.word	0x08024670
 800f714:	08024270 	.word	0x08024270
 800f718:	08024520 	.word	0x08024520

0800f71c <__lshift>:
 800f71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f720:	460c      	mov	r4, r1
 800f722:	6849      	ldr	r1, [r1, #4]
 800f724:	6923      	ldr	r3, [r4, #16]
 800f726:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f72a:	68a3      	ldr	r3, [r4, #8]
 800f72c:	4607      	mov	r7, r0
 800f72e:	4691      	mov	r9, r2
 800f730:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f734:	f108 0601 	add.w	r6, r8, #1
 800f738:	42b3      	cmp	r3, r6
 800f73a:	db0b      	blt.n	800f754 <__lshift+0x38>
 800f73c:	4638      	mov	r0, r7
 800f73e:	f7ff fd91 	bl	800f264 <_Balloc>
 800f742:	4605      	mov	r5, r0
 800f744:	b948      	cbnz	r0, 800f75a <__lshift+0x3e>
 800f746:	4602      	mov	r2, r0
 800f748:	4b28      	ldr	r3, [pc, #160]	; (800f7ec <__lshift+0xd0>)
 800f74a:	4829      	ldr	r0, [pc, #164]	; (800f7f0 <__lshift+0xd4>)
 800f74c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f750:	f7fe fb42 	bl	800ddd8 <__assert_func>
 800f754:	3101      	adds	r1, #1
 800f756:	005b      	lsls	r3, r3, #1
 800f758:	e7ee      	b.n	800f738 <__lshift+0x1c>
 800f75a:	2300      	movs	r3, #0
 800f75c:	f100 0114 	add.w	r1, r0, #20
 800f760:	f100 0210 	add.w	r2, r0, #16
 800f764:	4618      	mov	r0, r3
 800f766:	4553      	cmp	r3, sl
 800f768:	db33      	blt.n	800f7d2 <__lshift+0xb6>
 800f76a:	6920      	ldr	r0, [r4, #16]
 800f76c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f770:	f104 0314 	add.w	r3, r4, #20
 800f774:	f019 091f 	ands.w	r9, r9, #31
 800f778:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f77c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f780:	d02b      	beq.n	800f7da <__lshift+0xbe>
 800f782:	f1c9 0e20 	rsb	lr, r9, #32
 800f786:	468a      	mov	sl, r1
 800f788:	2200      	movs	r2, #0
 800f78a:	6818      	ldr	r0, [r3, #0]
 800f78c:	fa00 f009 	lsl.w	r0, r0, r9
 800f790:	4302      	orrs	r2, r0
 800f792:	f84a 2b04 	str.w	r2, [sl], #4
 800f796:	f853 2b04 	ldr.w	r2, [r3], #4
 800f79a:	459c      	cmp	ip, r3
 800f79c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f7a0:	d8f3      	bhi.n	800f78a <__lshift+0x6e>
 800f7a2:	ebac 0304 	sub.w	r3, ip, r4
 800f7a6:	3b15      	subs	r3, #21
 800f7a8:	f023 0303 	bic.w	r3, r3, #3
 800f7ac:	3304      	adds	r3, #4
 800f7ae:	f104 0015 	add.w	r0, r4, #21
 800f7b2:	4584      	cmp	ip, r0
 800f7b4:	bf38      	it	cc
 800f7b6:	2304      	movcc	r3, #4
 800f7b8:	50ca      	str	r2, [r1, r3]
 800f7ba:	b10a      	cbz	r2, 800f7c0 <__lshift+0xa4>
 800f7bc:	f108 0602 	add.w	r6, r8, #2
 800f7c0:	3e01      	subs	r6, #1
 800f7c2:	4638      	mov	r0, r7
 800f7c4:	612e      	str	r6, [r5, #16]
 800f7c6:	4621      	mov	r1, r4
 800f7c8:	f7ff fd8c 	bl	800f2e4 <_Bfree>
 800f7cc:	4628      	mov	r0, r5
 800f7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	e7c5      	b.n	800f766 <__lshift+0x4a>
 800f7da:	3904      	subs	r1, #4
 800f7dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f7e4:	459c      	cmp	ip, r3
 800f7e6:	d8f9      	bhi.n	800f7dc <__lshift+0xc0>
 800f7e8:	e7ea      	b.n	800f7c0 <__lshift+0xa4>
 800f7ea:	bf00      	nop
 800f7ec:	08024491 	.word	0x08024491
 800f7f0:	08024520 	.word	0x08024520

0800f7f4 <__mcmp>:
 800f7f4:	b530      	push	{r4, r5, lr}
 800f7f6:	6902      	ldr	r2, [r0, #16]
 800f7f8:	690c      	ldr	r4, [r1, #16]
 800f7fa:	1b12      	subs	r2, r2, r4
 800f7fc:	d10e      	bne.n	800f81c <__mcmp+0x28>
 800f7fe:	f100 0314 	add.w	r3, r0, #20
 800f802:	3114      	adds	r1, #20
 800f804:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f808:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f80c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f810:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f814:	42a5      	cmp	r5, r4
 800f816:	d003      	beq.n	800f820 <__mcmp+0x2c>
 800f818:	d305      	bcc.n	800f826 <__mcmp+0x32>
 800f81a:	2201      	movs	r2, #1
 800f81c:	4610      	mov	r0, r2
 800f81e:	bd30      	pop	{r4, r5, pc}
 800f820:	4283      	cmp	r3, r0
 800f822:	d3f3      	bcc.n	800f80c <__mcmp+0x18>
 800f824:	e7fa      	b.n	800f81c <__mcmp+0x28>
 800f826:	f04f 32ff 	mov.w	r2, #4294967295
 800f82a:	e7f7      	b.n	800f81c <__mcmp+0x28>

0800f82c <__mdiff>:
 800f82c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f830:	460c      	mov	r4, r1
 800f832:	4606      	mov	r6, r0
 800f834:	4611      	mov	r1, r2
 800f836:	4620      	mov	r0, r4
 800f838:	4617      	mov	r7, r2
 800f83a:	f7ff ffdb 	bl	800f7f4 <__mcmp>
 800f83e:	1e05      	subs	r5, r0, #0
 800f840:	d110      	bne.n	800f864 <__mdiff+0x38>
 800f842:	4629      	mov	r1, r5
 800f844:	4630      	mov	r0, r6
 800f846:	f7ff fd0d 	bl	800f264 <_Balloc>
 800f84a:	b930      	cbnz	r0, 800f85a <__mdiff+0x2e>
 800f84c:	4b39      	ldr	r3, [pc, #228]	; (800f934 <__mdiff+0x108>)
 800f84e:	4602      	mov	r2, r0
 800f850:	f240 2132 	movw	r1, #562	; 0x232
 800f854:	4838      	ldr	r0, [pc, #224]	; (800f938 <__mdiff+0x10c>)
 800f856:	f7fe fabf 	bl	800ddd8 <__assert_func>
 800f85a:	2301      	movs	r3, #1
 800f85c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f860:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f864:	bfa4      	itt	ge
 800f866:	463b      	movge	r3, r7
 800f868:	4627      	movge	r7, r4
 800f86a:	4630      	mov	r0, r6
 800f86c:	6879      	ldr	r1, [r7, #4]
 800f86e:	bfa6      	itte	ge
 800f870:	461c      	movge	r4, r3
 800f872:	2500      	movge	r5, #0
 800f874:	2501      	movlt	r5, #1
 800f876:	f7ff fcf5 	bl	800f264 <_Balloc>
 800f87a:	b920      	cbnz	r0, 800f886 <__mdiff+0x5a>
 800f87c:	4b2d      	ldr	r3, [pc, #180]	; (800f934 <__mdiff+0x108>)
 800f87e:	4602      	mov	r2, r0
 800f880:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f884:	e7e6      	b.n	800f854 <__mdiff+0x28>
 800f886:	693e      	ldr	r6, [r7, #16]
 800f888:	60c5      	str	r5, [r0, #12]
 800f88a:	6925      	ldr	r5, [r4, #16]
 800f88c:	f107 0114 	add.w	r1, r7, #20
 800f890:	f104 0914 	add.w	r9, r4, #20
 800f894:	f100 0e14 	add.w	lr, r0, #20
 800f898:	f107 0210 	add.w	r2, r7, #16
 800f89c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f8a0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f8a4:	46f2      	mov	sl, lr
 800f8a6:	2700      	movs	r7, #0
 800f8a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f8ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f8b0:	fa1f f883 	uxth.w	r8, r3
 800f8b4:	fa17 f78b 	uxtah	r7, r7, fp
 800f8b8:	0c1b      	lsrs	r3, r3, #16
 800f8ba:	eba7 0808 	sub.w	r8, r7, r8
 800f8be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f8c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f8c6:	fa1f f888 	uxth.w	r8, r8
 800f8ca:	141f      	asrs	r7, r3, #16
 800f8cc:	454d      	cmp	r5, r9
 800f8ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f8d2:	f84a 3b04 	str.w	r3, [sl], #4
 800f8d6:	d8e7      	bhi.n	800f8a8 <__mdiff+0x7c>
 800f8d8:	1b2b      	subs	r3, r5, r4
 800f8da:	3b15      	subs	r3, #21
 800f8dc:	f023 0303 	bic.w	r3, r3, #3
 800f8e0:	3304      	adds	r3, #4
 800f8e2:	3415      	adds	r4, #21
 800f8e4:	42a5      	cmp	r5, r4
 800f8e6:	bf38      	it	cc
 800f8e8:	2304      	movcc	r3, #4
 800f8ea:	4419      	add	r1, r3
 800f8ec:	4473      	add	r3, lr
 800f8ee:	469e      	mov	lr, r3
 800f8f0:	460d      	mov	r5, r1
 800f8f2:	4565      	cmp	r5, ip
 800f8f4:	d30e      	bcc.n	800f914 <__mdiff+0xe8>
 800f8f6:	f10c 0203 	add.w	r2, ip, #3
 800f8fa:	1a52      	subs	r2, r2, r1
 800f8fc:	f022 0203 	bic.w	r2, r2, #3
 800f900:	3903      	subs	r1, #3
 800f902:	458c      	cmp	ip, r1
 800f904:	bf38      	it	cc
 800f906:	2200      	movcc	r2, #0
 800f908:	441a      	add	r2, r3
 800f90a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f90e:	b17b      	cbz	r3, 800f930 <__mdiff+0x104>
 800f910:	6106      	str	r6, [r0, #16]
 800f912:	e7a5      	b.n	800f860 <__mdiff+0x34>
 800f914:	f855 8b04 	ldr.w	r8, [r5], #4
 800f918:	fa17 f488 	uxtah	r4, r7, r8
 800f91c:	1422      	asrs	r2, r4, #16
 800f91e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f922:	b2a4      	uxth	r4, r4
 800f924:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f928:	f84e 4b04 	str.w	r4, [lr], #4
 800f92c:	1417      	asrs	r7, r2, #16
 800f92e:	e7e0      	b.n	800f8f2 <__mdiff+0xc6>
 800f930:	3e01      	subs	r6, #1
 800f932:	e7ea      	b.n	800f90a <__mdiff+0xde>
 800f934:	08024491 	.word	0x08024491
 800f938:	08024520 	.word	0x08024520

0800f93c <__ulp>:
 800f93c:	b082      	sub	sp, #8
 800f93e:	ed8d 0b00 	vstr	d0, [sp]
 800f942:	9b01      	ldr	r3, [sp, #4]
 800f944:	4912      	ldr	r1, [pc, #72]	; (800f990 <__ulp+0x54>)
 800f946:	4019      	ands	r1, r3
 800f948:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f94c:	2900      	cmp	r1, #0
 800f94e:	dd05      	ble.n	800f95c <__ulp+0x20>
 800f950:	2200      	movs	r2, #0
 800f952:	460b      	mov	r3, r1
 800f954:	ec43 2b10 	vmov	d0, r2, r3
 800f958:	b002      	add	sp, #8
 800f95a:	4770      	bx	lr
 800f95c:	4249      	negs	r1, r1
 800f95e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f962:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f966:	f04f 0200 	mov.w	r2, #0
 800f96a:	f04f 0300 	mov.w	r3, #0
 800f96e:	da04      	bge.n	800f97a <__ulp+0x3e>
 800f970:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f974:	fa41 f300 	asr.w	r3, r1, r0
 800f978:	e7ec      	b.n	800f954 <__ulp+0x18>
 800f97a:	f1a0 0114 	sub.w	r1, r0, #20
 800f97e:	291e      	cmp	r1, #30
 800f980:	bfda      	itte	le
 800f982:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f986:	fa20 f101 	lsrle.w	r1, r0, r1
 800f98a:	2101      	movgt	r1, #1
 800f98c:	460a      	mov	r2, r1
 800f98e:	e7e1      	b.n	800f954 <__ulp+0x18>
 800f990:	7ff00000 	.word	0x7ff00000

0800f994 <__b2d>:
 800f994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f996:	6905      	ldr	r5, [r0, #16]
 800f998:	f100 0714 	add.w	r7, r0, #20
 800f99c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f9a0:	1f2e      	subs	r6, r5, #4
 800f9a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	f7ff fd52 	bl	800f450 <__hi0bits>
 800f9ac:	f1c0 0320 	rsb	r3, r0, #32
 800f9b0:	280a      	cmp	r0, #10
 800f9b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fa30 <__b2d+0x9c>
 800f9b6:	600b      	str	r3, [r1, #0]
 800f9b8:	dc14      	bgt.n	800f9e4 <__b2d+0x50>
 800f9ba:	f1c0 0e0b 	rsb	lr, r0, #11
 800f9be:	fa24 f10e 	lsr.w	r1, r4, lr
 800f9c2:	42b7      	cmp	r7, r6
 800f9c4:	ea41 030c 	orr.w	r3, r1, ip
 800f9c8:	bf34      	ite	cc
 800f9ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f9ce:	2100      	movcs	r1, #0
 800f9d0:	3015      	adds	r0, #21
 800f9d2:	fa04 f000 	lsl.w	r0, r4, r0
 800f9d6:	fa21 f10e 	lsr.w	r1, r1, lr
 800f9da:	ea40 0201 	orr.w	r2, r0, r1
 800f9de:	ec43 2b10 	vmov	d0, r2, r3
 800f9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9e4:	42b7      	cmp	r7, r6
 800f9e6:	bf3a      	itte	cc
 800f9e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f9ec:	f1a5 0608 	subcc.w	r6, r5, #8
 800f9f0:	2100      	movcs	r1, #0
 800f9f2:	380b      	subs	r0, #11
 800f9f4:	d017      	beq.n	800fa26 <__b2d+0x92>
 800f9f6:	f1c0 0c20 	rsb	ip, r0, #32
 800f9fa:	fa04 f500 	lsl.w	r5, r4, r0
 800f9fe:	42be      	cmp	r6, r7
 800fa00:	fa21 f40c 	lsr.w	r4, r1, ip
 800fa04:	ea45 0504 	orr.w	r5, r5, r4
 800fa08:	bf8c      	ite	hi
 800fa0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fa0e:	2400      	movls	r4, #0
 800fa10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fa14:	fa01 f000 	lsl.w	r0, r1, r0
 800fa18:	fa24 f40c 	lsr.w	r4, r4, ip
 800fa1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fa20:	ea40 0204 	orr.w	r2, r0, r4
 800fa24:	e7db      	b.n	800f9de <__b2d+0x4a>
 800fa26:	ea44 030c 	orr.w	r3, r4, ip
 800fa2a:	460a      	mov	r2, r1
 800fa2c:	e7d7      	b.n	800f9de <__b2d+0x4a>
 800fa2e:	bf00      	nop
 800fa30:	3ff00000 	.word	0x3ff00000

0800fa34 <__d2b>:
 800fa34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa38:	4689      	mov	r9, r1
 800fa3a:	2101      	movs	r1, #1
 800fa3c:	ec57 6b10 	vmov	r6, r7, d0
 800fa40:	4690      	mov	r8, r2
 800fa42:	f7ff fc0f 	bl	800f264 <_Balloc>
 800fa46:	4604      	mov	r4, r0
 800fa48:	b930      	cbnz	r0, 800fa58 <__d2b+0x24>
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	4b25      	ldr	r3, [pc, #148]	; (800fae4 <__d2b+0xb0>)
 800fa4e:	4826      	ldr	r0, [pc, #152]	; (800fae8 <__d2b+0xb4>)
 800fa50:	f240 310a 	movw	r1, #778	; 0x30a
 800fa54:	f7fe f9c0 	bl	800ddd8 <__assert_func>
 800fa58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fa5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fa60:	bb35      	cbnz	r5, 800fab0 <__d2b+0x7c>
 800fa62:	2e00      	cmp	r6, #0
 800fa64:	9301      	str	r3, [sp, #4]
 800fa66:	d028      	beq.n	800faba <__d2b+0x86>
 800fa68:	4668      	mov	r0, sp
 800fa6a:	9600      	str	r6, [sp, #0]
 800fa6c:	f7ff fd10 	bl	800f490 <__lo0bits>
 800fa70:	9900      	ldr	r1, [sp, #0]
 800fa72:	b300      	cbz	r0, 800fab6 <__d2b+0x82>
 800fa74:	9a01      	ldr	r2, [sp, #4]
 800fa76:	f1c0 0320 	rsb	r3, r0, #32
 800fa7a:	fa02 f303 	lsl.w	r3, r2, r3
 800fa7e:	430b      	orrs	r3, r1
 800fa80:	40c2      	lsrs	r2, r0
 800fa82:	6163      	str	r3, [r4, #20]
 800fa84:	9201      	str	r2, [sp, #4]
 800fa86:	9b01      	ldr	r3, [sp, #4]
 800fa88:	61a3      	str	r3, [r4, #24]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	bf14      	ite	ne
 800fa8e:	2202      	movne	r2, #2
 800fa90:	2201      	moveq	r2, #1
 800fa92:	6122      	str	r2, [r4, #16]
 800fa94:	b1d5      	cbz	r5, 800facc <__d2b+0x98>
 800fa96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fa9a:	4405      	add	r5, r0
 800fa9c:	f8c9 5000 	str.w	r5, [r9]
 800faa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800faa4:	f8c8 0000 	str.w	r0, [r8]
 800faa8:	4620      	mov	r0, r4
 800faaa:	b003      	add	sp, #12
 800faac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fab4:	e7d5      	b.n	800fa62 <__d2b+0x2e>
 800fab6:	6161      	str	r1, [r4, #20]
 800fab8:	e7e5      	b.n	800fa86 <__d2b+0x52>
 800faba:	a801      	add	r0, sp, #4
 800fabc:	f7ff fce8 	bl	800f490 <__lo0bits>
 800fac0:	9b01      	ldr	r3, [sp, #4]
 800fac2:	6163      	str	r3, [r4, #20]
 800fac4:	2201      	movs	r2, #1
 800fac6:	6122      	str	r2, [r4, #16]
 800fac8:	3020      	adds	r0, #32
 800faca:	e7e3      	b.n	800fa94 <__d2b+0x60>
 800facc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fad0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fad4:	f8c9 0000 	str.w	r0, [r9]
 800fad8:	6918      	ldr	r0, [r3, #16]
 800fada:	f7ff fcb9 	bl	800f450 <__hi0bits>
 800fade:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fae2:	e7df      	b.n	800faa4 <__d2b+0x70>
 800fae4:	08024491 	.word	0x08024491
 800fae8:	08024520 	.word	0x08024520

0800faec <__ratio>:
 800faec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf0:	4688      	mov	r8, r1
 800faf2:	4669      	mov	r1, sp
 800faf4:	4681      	mov	r9, r0
 800faf6:	f7ff ff4d 	bl	800f994 <__b2d>
 800fafa:	a901      	add	r1, sp, #4
 800fafc:	4640      	mov	r0, r8
 800fafe:	ec55 4b10 	vmov	r4, r5, d0
 800fb02:	f7ff ff47 	bl	800f994 <__b2d>
 800fb06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fb0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fb0e:	eba3 0c02 	sub.w	ip, r3, r2
 800fb12:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fb16:	1a9b      	subs	r3, r3, r2
 800fb18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fb1c:	ec51 0b10 	vmov	r0, r1, d0
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	bfd6      	itet	le
 800fb24:	460a      	movle	r2, r1
 800fb26:	462a      	movgt	r2, r5
 800fb28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fb2c:	468b      	mov	fp, r1
 800fb2e:	462f      	mov	r7, r5
 800fb30:	bfd4      	ite	le
 800fb32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fb36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	ee10 2a10 	vmov	r2, s0
 800fb40:	465b      	mov	r3, fp
 800fb42:	4639      	mov	r1, r7
 800fb44:	f7f0 fe9a 	bl	800087c <__aeabi_ddiv>
 800fb48:	ec41 0b10 	vmov	d0, r0, r1
 800fb4c:	b003      	add	sp, #12
 800fb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb52 <__copybits>:
 800fb52:	3901      	subs	r1, #1
 800fb54:	b570      	push	{r4, r5, r6, lr}
 800fb56:	1149      	asrs	r1, r1, #5
 800fb58:	6914      	ldr	r4, [r2, #16]
 800fb5a:	3101      	adds	r1, #1
 800fb5c:	f102 0314 	add.w	r3, r2, #20
 800fb60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fb64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fb68:	1f05      	subs	r5, r0, #4
 800fb6a:	42a3      	cmp	r3, r4
 800fb6c:	d30c      	bcc.n	800fb88 <__copybits+0x36>
 800fb6e:	1aa3      	subs	r3, r4, r2
 800fb70:	3b11      	subs	r3, #17
 800fb72:	f023 0303 	bic.w	r3, r3, #3
 800fb76:	3211      	adds	r2, #17
 800fb78:	42a2      	cmp	r2, r4
 800fb7a:	bf88      	it	hi
 800fb7c:	2300      	movhi	r3, #0
 800fb7e:	4418      	add	r0, r3
 800fb80:	2300      	movs	r3, #0
 800fb82:	4288      	cmp	r0, r1
 800fb84:	d305      	bcc.n	800fb92 <__copybits+0x40>
 800fb86:	bd70      	pop	{r4, r5, r6, pc}
 800fb88:	f853 6b04 	ldr.w	r6, [r3], #4
 800fb8c:	f845 6f04 	str.w	r6, [r5, #4]!
 800fb90:	e7eb      	b.n	800fb6a <__copybits+0x18>
 800fb92:	f840 3b04 	str.w	r3, [r0], #4
 800fb96:	e7f4      	b.n	800fb82 <__copybits+0x30>

0800fb98 <__any_on>:
 800fb98:	f100 0214 	add.w	r2, r0, #20
 800fb9c:	6900      	ldr	r0, [r0, #16]
 800fb9e:	114b      	asrs	r3, r1, #5
 800fba0:	4298      	cmp	r0, r3
 800fba2:	b510      	push	{r4, lr}
 800fba4:	db11      	blt.n	800fbca <__any_on+0x32>
 800fba6:	dd0a      	ble.n	800fbbe <__any_on+0x26>
 800fba8:	f011 011f 	ands.w	r1, r1, #31
 800fbac:	d007      	beq.n	800fbbe <__any_on+0x26>
 800fbae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fbb2:	fa24 f001 	lsr.w	r0, r4, r1
 800fbb6:	fa00 f101 	lsl.w	r1, r0, r1
 800fbba:	428c      	cmp	r4, r1
 800fbbc:	d10b      	bne.n	800fbd6 <__any_on+0x3e>
 800fbbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d803      	bhi.n	800fbce <__any_on+0x36>
 800fbc6:	2000      	movs	r0, #0
 800fbc8:	bd10      	pop	{r4, pc}
 800fbca:	4603      	mov	r3, r0
 800fbcc:	e7f7      	b.n	800fbbe <__any_on+0x26>
 800fbce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fbd2:	2900      	cmp	r1, #0
 800fbd4:	d0f5      	beq.n	800fbc2 <__any_on+0x2a>
 800fbd6:	2001      	movs	r0, #1
 800fbd8:	e7f6      	b.n	800fbc8 <__any_on+0x30>

0800fbda <_calloc_r>:
 800fbda:	b513      	push	{r0, r1, r4, lr}
 800fbdc:	434a      	muls	r2, r1
 800fbde:	4611      	mov	r1, r2
 800fbe0:	9201      	str	r2, [sp, #4]
 800fbe2:	f000 f859 	bl	800fc98 <_malloc_r>
 800fbe6:	4604      	mov	r4, r0
 800fbe8:	b118      	cbz	r0, 800fbf2 <_calloc_r+0x18>
 800fbea:	9a01      	ldr	r2, [sp, #4]
 800fbec:	2100      	movs	r1, #0
 800fbee:	f7fc fb27 	bl	800c240 <memset>
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	b002      	add	sp, #8
 800fbf6:	bd10      	pop	{r4, pc}

0800fbf8 <_free_r>:
 800fbf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbfa:	2900      	cmp	r1, #0
 800fbfc:	d048      	beq.n	800fc90 <_free_r+0x98>
 800fbfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc02:	9001      	str	r0, [sp, #4]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	f1a1 0404 	sub.w	r4, r1, #4
 800fc0a:	bfb8      	it	lt
 800fc0c:	18e4      	addlt	r4, r4, r3
 800fc0e:	f000 fe8b 	bl	8010928 <__malloc_lock>
 800fc12:	4a20      	ldr	r2, [pc, #128]	; (800fc94 <_free_r+0x9c>)
 800fc14:	9801      	ldr	r0, [sp, #4]
 800fc16:	6813      	ldr	r3, [r2, #0]
 800fc18:	4615      	mov	r5, r2
 800fc1a:	b933      	cbnz	r3, 800fc2a <_free_r+0x32>
 800fc1c:	6063      	str	r3, [r4, #4]
 800fc1e:	6014      	str	r4, [r2, #0]
 800fc20:	b003      	add	sp, #12
 800fc22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc26:	f000 be85 	b.w	8010934 <__malloc_unlock>
 800fc2a:	42a3      	cmp	r3, r4
 800fc2c:	d90b      	bls.n	800fc46 <_free_r+0x4e>
 800fc2e:	6821      	ldr	r1, [r4, #0]
 800fc30:	1862      	adds	r2, r4, r1
 800fc32:	4293      	cmp	r3, r2
 800fc34:	bf04      	itt	eq
 800fc36:	681a      	ldreq	r2, [r3, #0]
 800fc38:	685b      	ldreq	r3, [r3, #4]
 800fc3a:	6063      	str	r3, [r4, #4]
 800fc3c:	bf04      	itt	eq
 800fc3e:	1852      	addeq	r2, r2, r1
 800fc40:	6022      	streq	r2, [r4, #0]
 800fc42:	602c      	str	r4, [r5, #0]
 800fc44:	e7ec      	b.n	800fc20 <_free_r+0x28>
 800fc46:	461a      	mov	r2, r3
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	b10b      	cbz	r3, 800fc50 <_free_r+0x58>
 800fc4c:	42a3      	cmp	r3, r4
 800fc4e:	d9fa      	bls.n	800fc46 <_free_r+0x4e>
 800fc50:	6811      	ldr	r1, [r2, #0]
 800fc52:	1855      	adds	r5, r2, r1
 800fc54:	42a5      	cmp	r5, r4
 800fc56:	d10b      	bne.n	800fc70 <_free_r+0x78>
 800fc58:	6824      	ldr	r4, [r4, #0]
 800fc5a:	4421      	add	r1, r4
 800fc5c:	1854      	adds	r4, r2, r1
 800fc5e:	42a3      	cmp	r3, r4
 800fc60:	6011      	str	r1, [r2, #0]
 800fc62:	d1dd      	bne.n	800fc20 <_free_r+0x28>
 800fc64:	681c      	ldr	r4, [r3, #0]
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	6053      	str	r3, [r2, #4]
 800fc6a:	4421      	add	r1, r4
 800fc6c:	6011      	str	r1, [r2, #0]
 800fc6e:	e7d7      	b.n	800fc20 <_free_r+0x28>
 800fc70:	d902      	bls.n	800fc78 <_free_r+0x80>
 800fc72:	230c      	movs	r3, #12
 800fc74:	6003      	str	r3, [r0, #0]
 800fc76:	e7d3      	b.n	800fc20 <_free_r+0x28>
 800fc78:	6825      	ldr	r5, [r4, #0]
 800fc7a:	1961      	adds	r1, r4, r5
 800fc7c:	428b      	cmp	r3, r1
 800fc7e:	bf04      	itt	eq
 800fc80:	6819      	ldreq	r1, [r3, #0]
 800fc82:	685b      	ldreq	r3, [r3, #4]
 800fc84:	6063      	str	r3, [r4, #4]
 800fc86:	bf04      	itt	eq
 800fc88:	1949      	addeq	r1, r1, r5
 800fc8a:	6021      	streq	r1, [r4, #0]
 800fc8c:	6054      	str	r4, [r2, #4]
 800fc8e:	e7c7      	b.n	800fc20 <_free_r+0x28>
 800fc90:	b003      	add	sp, #12
 800fc92:	bd30      	pop	{r4, r5, pc}
 800fc94:	20000278 	.word	0x20000278

0800fc98 <_malloc_r>:
 800fc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc9a:	1ccd      	adds	r5, r1, #3
 800fc9c:	f025 0503 	bic.w	r5, r5, #3
 800fca0:	3508      	adds	r5, #8
 800fca2:	2d0c      	cmp	r5, #12
 800fca4:	bf38      	it	cc
 800fca6:	250c      	movcc	r5, #12
 800fca8:	2d00      	cmp	r5, #0
 800fcaa:	4606      	mov	r6, r0
 800fcac:	db01      	blt.n	800fcb2 <_malloc_r+0x1a>
 800fcae:	42a9      	cmp	r1, r5
 800fcb0:	d903      	bls.n	800fcba <_malloc_r+0x22>
 800fcb2:	230c      	movs	r3, #12
 800fcb4:	6033      	str	r3, [r6, #0]
 800fcb6:	2000      	movs	r0, #0
 800fcb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcba:	f000 fe35 	bl	8010928 <__malloc_lock>
 800fcbe:	4921      	ldr	r1, [pc, #132]	; (800fd44 <_malloc_r+0xac>)
 800fcc0:	680a      	ldr	r2, [r1, #0]
 800fcc2:	4614      	mov	r4, r2
 800fcc4:	b99c      	cbnz	r4, 800fcee <_malloc_r+0x56>
 800fcc6:	4f20      	ldr	r7, [pc, #128]	; (800fd48 <_malloc_r+0xb0>)
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	b923      	cbnz	r3, 800fcd6 <_malloc_r+0x3e>
 800fccc:	4621      	mov	r1, r4
 800fcce:	4630      	mov	r0, r6
 800fcd0:	f000 fafa 	bl	80102c8 <_sbrk_r>
 800fcd4:	6038      	str	r0, [r7, #0]
 800fcd6:	4629      	mov	r1, r5
 800fcd8:	4630      	mov	r0, r6
 800fcda:	f000 faf5 	bl	80102c8 <_sbrk_r>
 800fcde:	1c43      	adds	r3, r0, #1
 800fce0:	d123      	bne.n	800fd2a <_malloc_r+0x92>
 800fce2:	230c      	movs	r3, #12
 800fce4:	6033      	str	r3, [r6, #0]
 800fce6:	4630      	mov	r0, r6
 800fce8:	f000 fe24 	bl	8010934 <__malloc_unlock>
 800fcec:	e7e3      	b.n	800fcb6 <_malloc_r+0x1e>
 800fcee:	6823      	ldr	r3, [r4, #0]
 800fcf0:	1b5b      	subs	r3, r3, r5
 800fcf2:	d417      	bmi.n	800fd24 <_malloc_r+0x8c>
 800fcf4:	2b0b      	cmp	r3, #11
 800fcf6:	d903      	bls.n	800fd00 <_malloc_r+0x68>
 800fcf8:	6023      	str	r3, [r4, #0]
 800fcfa:	441c      	add	r4, r3
 800fcfc:	6025      	str	r5, [r4, #0]
 800fcfe:	e004      	b.n	800fd0a <_malloc_r+0x72>
 800fd00:	6863      	ldr	r3, [r4, #4]
 800fd02:	42a2      	cmp	r2, r4
 800fd04:	bf0c      	ite	eq
 800fd06:	600b      	streq	r3, [r1, #0]
 800fd08:	6053      	strne	r3, [r2, #4]
 800fd0a:	4630      	mov	r0, r6
 800fd0c:	f000 fe12 	bl	8010934 <__malloc_unlock>
 800fd10:	f104 000b 	add.w	r0, r4, #11
 800fd14:	1d23      	adds	r3, r4, #4
 800fd16:	f020 0007 	bic.w	r0, r0, #7
 800fd1a:	1ac2      	subs	r2, r0, r3
 800fd1c:	d0cc      	beq.n	800fcb8 <_malloc_r+0x20>
 800fd1e:	1a1b      	subs	r3, r3, r0
 800fd20:	50a3      	str	r3, [r4, r2]
 800fd22:	e7c9      	b.n	800fcb8 <_malloc_r+0x20>
 800fd24:	4622      	mov	r2, r4
 800fd26:	6864      	ldr	r4, [r4, #4]
 800fd28:	e7cc      	b.n	800fcc4 <_malloc_r+0x2c>
 800fd2a:	1cc4      	adds	r4, r0, #3
 800fd2c:	f024 0403 	bic.w	r4, r4, #3
 800fd30:	42a0      	cmp	r0, r4
 800fd32:	d0e3      	beq.n	800fcfc <_malloc_r+0x64>
 800fd34:	1a21      	subs	r1, r4, r0
 800fd36:	4630      	mov	r0, r6
 800fd38:	f000 fac6 	bl	80102c8 <_sbrk_r>
 800fd3c:	3001      	adds	r0, #1
 800fd3e:	d1dd      	bne.n	800fcfc <_malloc_r+0x64>
 800fd40:	e7cf      	b.n	800fce2 <_malloc_r+0x4a>
 800fd42:	bf00      	nop
 800fd44:	20000278 	.word	0x20000278
 800fd48:	2000027c 	.word	0x2000027c

0800fd4c <__ssputs_r>:
 800fd4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd50:	688e      	ldr	r6, [r1, #8]
 800fd52:	429e      	cmp	r6, r3
 800fd54:	4682      	mov	sl, r0
 800fd56:	460c      	mov	r4, r1
 800fd58:	4690      	mov	r8, r2
 800fd5a:	461f      	mov	r7, r3
 800fd5c:	d838      	bhi.n	800fdd0 <__ssputs_r+0x84>
 800fd5e:	898a      	ldrh	r2, [r1, #12]
 800fd60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fd64:	d032      	beq.n	800fdcc <__ssputs_r+0x80>
 800fd66:	6825      	ldr	r5, [r4, #0]
 800fd68:	6909      	ldr	r1, [r1, #16]
 800fd6a:	eba5 0901 	sub.w	r9, r5, r1
 800fd6e:	6965      	ldr	r5, [r4, #20]
 800fd70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd78:	3301      	adds	r3, #1
 800fd7a:	444b      	add	r3, r9
 800fd7c:	106d      	asrs	r5, r5, #1
 800fd7e:	429d      	cmp	r5, r3
 800fd80:	bf38      	it	cc
 800fd82:	461d      	movcc	r5, r3
 800fd84:	0553      	lsls	r3, r2, #21
 800fd86:	d531      	bpl.n	800fdec <__ssputs_r+0xa0>
 800fd88:	4629      	mov	r1, r5
 800fd8a:	f7ff ff85 	bl	800fc98 <_malloc_r>
 800fd8e:	4606      	mov	r6, r0
 800fd90:	b950      	cbnz	r0, 800fda8 <__ssputs_r+0x5c>
 800fd92:	230c      	movs	r3, #12
 800fd94:	f8ca 3000 	str.w	r3, [sl]
 800fd98:	89a3      	ldrh	r3, [r4, #12]
 800fd9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd9e:	81a3      	strh	r3, [r4, #12]
 800fda0:	f04f 30ff 	mov.w	r0, #4294967295
 800fda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fda8:	6921      	ldr	r1, [r4, #16]
 800fdaa:	464a      	mov	r2, r9
 800fdac:	f7ff fa4c 	bl	800f248 <memcpy>
 800fdb0:	89a3      	ldrh	r3, [r4, #12]
 800fdb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fdb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdba:	81a3      	strh	r3, [r4, #12]
 800fdbc:	6126      	str	r6, [r4, #16]
 800fdbe:	6165      	str	r5, [r4, #20]
 800fdc0:	444e      	add	r6, r9
 800fdc2:	eba5 0509 	sub.w	r5, r5, r9
 800fdc6:	6026      	str	r6, [r4, #0]
 800fdc8:	60a5      	str	r5, [r4, #8]
 800fdca:	463e      	mov	r6, r7
 800fdcc:	42be      	cmp	r6, r7
 800fdce:	d900      	bls.n	800fdd2 <__ssputs_r+0x86>
 800fdd0:	463e      	mov	r6, r7
 800fdd2:	4632      	mov	r2, r6
 800fdd4:	6820      	ldr	r0, [r4, #0]
 800fdd6:	4641      	mov	r1, r8
 800fdd8:	f000 fd8c 	bl	80108f4 <memmove>
 800fddc:	68a3      	ldr	r3, [r4, #8]
 800fdde:	6822      	ldr	r2, [r4, #0]
 800fde0:	1b9b      	subs	r3, r3, r6
 800fde2:	4432      	add	r2, r6
 800fde4:	60a3      	str	r3, [r4, #8]
 800fde6:	6022      	str	r2, [r4, #0]
 800fde8:	2000      	movs	r0, #0
 800fdea:	e7db      	b.n	800fda4 <__ssputs_r+0x58>
 800fdec:	462a      	mov	r2, r5
 800fdee:	f000 fda7 	bl	8010940 <_realloc_r>
 800fdf2:	4606      	mov	r6, r0
 800fdf4:	2800      	cmp	r0, #0
 800fdf6:	d1e1      	bne.n	800fdbc <__ssputs_r+0x70>
 800fdf8:	6921      	ldr	r1, [r4, #16]
 800fdfa:	4650      	mov	r0, sl
 800fdfc:	f7ff fefc 	bl	800fbf8 <_free_r>
 800fe00:	e7c7      	b.n	800fd92 <__ssputs_r+0x46>
	...

0800fe04 <_svfiprintf_r>:
 800fe04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe08:	4698      	mov	r8, r3
 800fe0a:	898b      	ldrh	r3, [r1, #12]
 800fe0c:	061b      	lsls	r3, r3, #24
 800fe0e:	b09d      	sub	sp, #116	; 0x74
 800fe10:	4607      	mov	r7, r0
 800fe12:	460d      	mov	r5, r1
 800fe14:	4614      	mov	r4, r2
 800fe16:	d50e      	bpl.n	800fe36 <_svfiprintf_r+0x32>
 800fe18:	690b      	ldr	r3, [r1, #16]
 800fe1a:	b963      	cbnz	r3, 800fe36 <_svfiprintf_r+0x32>
 800fe1c:	2140      	movs	r1, #64	; 0x40
 800fe1e:	f7ff ff3b 	bl	800fc98 <_malloc_r>
 800fe22:	6028      	str	r0, [r5, #0]
 800fe24:	6128      	str	r0, [r5, #16]
 800fe26:	b920      	cbnz	r0, 800fe32 <_svfiprintf_r+0x2e>
 800fe28:	230c      	movs	r3, #12
 800fe2a:	603b      	str	r3, [r7, #0]
 800fe2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe30:	e0d1      	b.n	800ffd6 <_svfiprintf_r+0x1d2>
 800fe32:	2340      	movs	r3, #64	; 0x40
 800fe34:	616b      	str	r3, [r5, #20]
 800fe36:	2300      	movs	r3, #0
 800fe38:	9309      	str	r3, [sp, #36]	; 0x24
 800fe3a:	2320      	movs	r3, #32
 800fe3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe40:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe44:	2330      	movs	r3, #48	; 0x30
 800fe46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fff0 <_svfiprintf_r+0x1ec>
 800fe4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe4e:	f04f 0901 	mov.w	r9, #1
 800fe52:	4623      	mov	r3, r4
 800fe54:	469a      	mov	sl, r3
 800fe56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe5a:	b10a      	cbz	r2, 800fe60 <_svfiprintf_r+0x5c>
 800fe5c:	2a25      	cmp	r2, #37	; 0x25
 800fe5e:	d1f9      	bne.n	800fe54 <_svfiprintf_r+0x50>
 800fe60:	ebba 0b04 	subs.w	fp, sl, r4
 800fe64:	d00b      	beq.n	800fe7e <_svfiprintf_r+0x7a>
 800fe66:	465b      	mov	r3, fp
 800fe68:	4622      	mov	r2, r4
 800fe6a:	4629      	mov	r1, r5
 800fe6c:	4638      	mov	r0, r7
 800fe6e:	f7ff ff6d 	bl	800fd4c <__ssputs_r>
 800fe72:	3001      	adds	r0, #1
 800fe74:	f000 80aa 	beq.w	800ffcc <_svfiprintf_r+0x1c8>
 800fe78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe7a:	445a      	add	r2, fp
 800fe7c:	9209      	str	r2, [sp, #36]	; 0x24
 800fe7e:	f89a 3000 	ldrb.w	r3, [sl]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	f000 80a2 	beq.w	800ffcc <_svfiprintf_r+0x1c8>
 800fe88:	2300      	movs	r3, #0
 800fe8a:	f04f 32ff 	mov.w	r2, #4294967295
 800fe8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe92:	f10a 0a01 	add.w	sl, sl, #1
 800fe96:	9304      	str	r3, [sp, #16]
 800fe98:	9307      	str	r3, [sp, #28]
 800fe9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe9e:	931a      	str	r3, [sp, #104]	; 0x68
 800fea0:	4654      	mov	r4, sl
 800fea2:	2205      	movs	r2, #5
 800fea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fea8:	4851      	ldr	r0, [pc, #324]	; (800fff0 <_svfiprintf_r+0x1ec>)
 800feaa:	f7f0 f9b1 	bl	8000210 <memchr>
 800feae:	9a04      	ldr	r2, [sp, #16]
 800feb0:	b9d8      	cbnz	r0, 800feea <_svfiprintf_r+0xe6>
 800feb2:	06d0      	lsls	r0, r2, #27
 800feb4:	bf44      	itt	mi
 800feb6:	2320      	movmi	r3, #32
 800feb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800febc:	0711      	lsls	r1, r2, #28
 800febe:	bf44      	itt	mi
 800fec0:	232b      	movmi	r3, #43	; 0x2b
 800fec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fec6:	f89a 3000 	ldrb.w	r3, [sl]
 800feca:	2b2a      	cmp	r3, #42	; 0x2a
 800fecc:	d015      	beq.n	800fefa <_svfiprintf_r+0xf6>
 800fece:	9a07      	ldr	r2, [sp, #28]
 800fed0:	4654      	mov	r4, sl
 800fed2:	2000      	movs	r0, #0
 800fed4:	f04f 0c0a 	mov.w	ip, #10
 800fed8:	4621      	mov	r1, r4
 800feda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fede:	3b30      	subs	r3, #48	; 0x30
 800fee0:	2b09      	cmp	r3, #9
 800fee2:	d94e      	bls.n	800ff82 <_svfiprintf_r+0x17e>
 800fee4:	b1b0      	cbz	r0, 800ff14 <_svfiprintf_r+0x110>
 800fee6:	9207      	str	r2, [sp, #28]
 800fee8:	e014      	b.n	800ff14 <_svfiprintf_r+0x110>
 800feea:	eba0 0308 	sub.w	r3, r0, r8
 800feee:	fa09 f303 	lsl.w	r3, r9, r3
 800fef2:	4313      	orrs	r3, r2
 800fef4:	9304      	str	r3, [sp, #16]
 800fef6:	46a2      	mov	sl, r4
 800fef8:	e7d2      	b.n	800fea0 <_svfiprintf_r+0x9c>
 800fefa:	9b03      	ldr	r3, [sp, #12]
 800fefc:	1d19      	adds	r1, r3, #4
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	9103      	str	r1, [sp, #12]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	bfbb      	ittet	lt
 800ff06:	425b      	neglt	r3, r3
 800ff08:	f042 0202 	orrlt.w	r2, r2, #2
 800ff0c:	9307      	strge	r3, [sp, #28]
 800ff0e:	9307      	strlt	r3, [sp, #28]
 800ff10:	bfb8      	it	lt
 800ff12:	9204      	strlt	r2, [sp, #16]
 800ff14:	7823      	ldrb	r3, [r4, #0]
 800ff16:	2b2e      	cmp	r3, #46	; 0x2e
 800ff18:	d10c      	bne.n	800ff34 <_svfiprintf_r+0x130>
 800ff1a:	7863      	ldrb	r3, [r4, #1]
 800ff1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ff1e:	d135      	bne.n	800ff8c <_svfiprintf_r+0x188>
 800ff20:	9b03      	ldr	r3, [sp, #12]
 800ff22:	1d1a      	adds	r2, r3, #4
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	9203      	str	r2, [sp, #12]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	bfb8      	it	lt
 800ff2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff30:	3402      	adds	r4, #2
 800ff32:	9305      	str	r3, [sp, #20]
 800ff34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010000 <_svfiprintf_r+0x1fc>
 800ff38:	7821      	ldrb	r1, [r4, #0]
 800ff3a:	2203      	movs	r2, #3
 800ff3c:	4650      	mov	r0, sl
 800ff3e:	f7f0 f967 	bl	8000210 <memchr>
 800ff42:	b140      	cbz	r0, 800ff56 <_svfiprintf_r+0x152>
 800ff44:	2340      	movs	r3, #64	; 0x40
 800ff46:	eba0 000a 	sub.w	r0, r0, sl
 800ff4a:	fa03 f000 	lsl.w	r0, r3, r0
 800ff4e:	9b04      	ldr	r3, [sp, #16]
 800ff50:	4303      	orrs	r3, r0
 800ff52:	3401      	adds	r4, #1
 800ff54:	9304      	str	r3, [sp, #16]
 800ff56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff5a:	4826      	ldr	r0, [pc, #152]	; (800fff4 <_svfiprintf_r+0x1f0>)
 800ff5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff60:	2206      	movs	r2, #6
 800ff62:	f7f0 f955 	bl	8000210 <memchr>
 800ff66:	2800      	cmp	r0, #0
 800ff68:	d038      	beq.n	800ffdc <_svfiprintf_r+0x1d8>
 800ff6a:	4b23      	ldr	r3, [pc, #140]	; (800fff8 <_svfiprintf_r+0x1f4>)
 800ff6c:	bb1b      	cbnz	r3, 800ffb6 <_svfiprintf_r+0x1b2>
 800ff6e:	9b03      	ldr	r3, [sp, #12]
 800ff70:	3307      	adds	r3, #7
 800ff72:	f023 0307 	bic.w	r3, r3, #7
 800ff76:	3308      	adds	r3, #8
 800ff78:	9303      	str	r3, [sp, #12]
 800ff7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff7c:	4433      	add	r3, r6
 800ff7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ff80:	e767      	b.n	800fe52 <_svfiprintf_r+0x4e>
 800ff82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff86:	460c      	mov	r4, r1
 800ff88:	2001      	movs	r0, #1
 800ff8a:	e7a5      	b.n	800fed8 <_svfiprintf_r+0xd4>
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	3401      	adds	r4, #1
 800ff90:	9305      	str	r3, [sp, #20]
 800ff92:	4619      	mov	r1, r3
 800ff94:	f04f 0c0a 	mov.w	ip, #10
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff9e:	3a30      	subs	r2, #48	; 0x30
 800ffa0:	2a09      	cmp	r2, #9
 800ffa2:	d903      	bls.n	800ffac <_svfiprintf_r+0x1a8>
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d0c5      	beq.n	800ff34 <_svfiprintf_r+0x130>
 800ffa8:	9105      	str	r1, [sp, #20]
 800ffaa:	e7c3      	b.n	800ff34 <_svfiprintf_r+0x130>
 800ffac:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffb0:	4604      	mov	r4, r0
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	e7f0      	b.n	800ff98 <_svfiprintf_r+0x194>
 800ffb6:	ab03      	add	r3, sp, #12
 800ffb8:	9300      	str	r3, [sp, #0]
 800ffba:	462a      	mov	r2, r5
 800ffbc:	4b0f      	ldr	r3, [pc, #60]	; (800fffc <_svfiprintf_r+0x1f8>)
 800ffbe:	a904      	add	r1, sp, #16
 800ffc0:	4638      	mov	r0, r7
 800ffc2:	f7fc f9e5 	bl	800c390 <_printf_float>
 800ffc6:	1c42      	adds	r2, r0, #1
 800ffc8:	4606      	mov	r6, r0
 800ffca:	d1d6      	bne.n	800ff7a <_svfiprintf_r+0x176>
 800ffcc:	89ab      	ldrh	r3, [r5, #12]
 800ffce:	065b      	lsls	r3, r3, #25
 800ffd0:	f53f af2c 	bmi.w	800fe2c <_svfiprintf_r+0x28>
 800ffd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ffd6:	b01d      	add	sp, #116	; 0x74
 800ffd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffdc:	ab03      	add	r3, sp, #12
 800ffde:	9300      	str	r3, [sp, #0]
 800ffe0:	462a      	mov	r2, r5
 800ffe2:	4b06      	ldr	r3, [pc, #24]	; (800fffc <_svfiprintf_r+0x1f8>)
 800ffe4:	a904      	add	r1, sp, #16
 800ffe6:	4638      	mov	r0, r7
 800ffe8:	f7fc fc76 	bl	800c8d8 <_printf_i>
 800ffec:	e7eb      	b.n	800ffc6 <_svfiprintf_r+0x1c2>
 800ffee:	bf00      	nop
 800fff0:	0802467c 	.word	0x0802467c
 800fff4:	08024686 	.word	0x08024686
 800fff8:	0800c391 	.word	0x0800c391
 800fffc:	0800fd4d 	.word	0x0800fd4d
 8010000:	08024682 	.word	0x08024682

08010004 <__sfputc_r>:
 8010004:	6893      	ldr	r3, [r2, #8]
 8010006:	3b01      	subs	r3, #1
 8010008:	2b00      	cmp	r3, #0
 801000a:	b410      	push	{r4}
 801000c:	6093      	str	r3, [r2, #8]
 801000e:	da08      	bge.n	8010022 <__sfputc_r+0x1e>
 8010010:	6994      	ldr	r4, [r2, #24]
 8010012:	42a3      	cmp	r3, r4
 8010014:	db01      	blt.n	801001a <__sfputc_r+0x16>
 8010016:	290a      	cmp	r1, #10
 8010018:	d103      	bne.n	8010022 <__sfputc_r+0x1e>
 801001a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801001e:	f000 b975 	b.w	801030c <__swbuf_r>
 8010022:	6813      	ldr	r3, [r2, #0]
 8010024:	1c58      	adds	r0, r3, #1
 8010026:	6010      	str	r0, [r2, #0]
 8010028:	7019      	strb	r1, [r3, #0]
 801002a:	4608      	mov	r0, r1
 801002c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010030:	4770      	bx	lr

08010032 <__sfputs_r>:
 8010032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010034:	4606      	mov	r6, r0
 8010036:	460f      	mov	r7, r1
 8010038:	4614      	mov	r4, r2
 801003a:	18d5      	adds	r5, r2, r3
 801003c:	42ac      	cmp	r4, r5
 801003e:	d101      	bne.n	8010044 <__sfputs_r+0x12>
 8010040:	2000      	movs	r0, #0
 8010042:	e007      	b.n	8010054 <__sfputs_r+0x22>
 8010044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010048:	463a      	mov	r2, r7
 801004a:	4630      	mov	r0, r6
 801004c:	f7ff ffda 	bl	8010004 <__sfputc_r>
 8010050:	1c43      	adds	r3, r0, #1
 8010052:	d1f3      	bne.n	801003c <__sfputs_r+0xa>
 8010054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010058 <_vfiprintf_r>:
 8010058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801005c:	460d      	mov	r5, r1
 801005e:	b09d      	sub	sp, #116	; 0x74
 8010060:	4614      	mov	r4, r2
 8010062:	4698      	mov	r8, r3
 8010064:	4606      	mov	r6, r0
 8010066:	b118      	cbz	r0, 8010070 <_vfiprintf_r+0x18>
 8010068:	6983      	ldr	r3, [r0, #24]
 801006a:	b90b      	cbnz	r3, 8010070 <_vfiprintf_r+0x18>
 801006c:	f000 fb3e 	bl	80106ec <__sinit>
 8010070:	4b89      	ldr	r3, [pc, #548]	; (8010298 <_vfiprintf_r+0x240>)
 8010072:	429d      	cmp	r5, r3
 8010074:	d11b      	bne.n	80100ae <_vfiprintf_r+0x56>
 8010076:	6875      	ldr	r5, [r6, #4]
 8010078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801007a:	07d9      	lsls	r1, r3, #31
 801007c:	d405      	bmi.n	801008a <_vfiprintf_r+0x32>
 801007e:	89ab      	ldrh	r3, [r5, #12]
 8010080:	059a      	lsls	r2, r3, #22
 8010082:	d402      	bmi.n	801008a <_vfiprintf_r+0x32>
 8010084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010086:	f000 fbcf 	bl	8010828 <__retarget_lock_acquire_recursive>
 801008a:	89ab      	ldrh	r3, [r5, #12]
 801008c:	071b      	lsls	r3, r3, #28
 801008e:	d501      	bpl.n	8010094 <_vfiprintf_r+0x3c>
 8010090:	692b      	ldr	r3, [r5, #16]
 8010092:	b9eb      	cbnz	r3, 80100d0 <_vfiprintf_r+0x78>
 8010094:	4629      	mov	r1, r5
 8010096:	4630      	mov	r0, r6
 8010098:	f000 f998 	bl	80103cc <__swsetup_r>
 801009c:	b1c0      	cbz	r0, 80100d0 <_vfiprintf_r+0x78>
 801009e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100a0:	07dc      	lsls	r4, r3, #31
 80100a2:	d50e      	bpl.n	80100c2 <_vfiprintf_r+0x6a>
 80100a4:	f04f 30ff 	mov.w	r0, #4294967295
 80100a8:	b01d      	add	sp, #116	; 0x74
 80100aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ae:	4b7b      	ldr	r3, [pc, #492]	; (801029c <_vfiprintf_r+0x244>)
 80100b0:	429d      	cmp	r5, r3
 80100b2:	d101      	bne.n	80100b8 <_vfiprintf_r+0x60>
 80100b4:	68b5      	ldr	r5, [r6, #8]
 80100b6:	e7df      	b.n	8010078 <_vfiprintf_r+0x20>
 80100b8:	4b79      	ldr	r3, [pc, #484]	; (80102a0 <_vfiprintf_r+0x248>)
 80100ba:	429d      	cmp	r5, r3
 80100bc:	bf08      	it	eq
 80100be:	68f5      	ldreq	r5, [r6, #12]
 80100c0:	e7da      	b.n	8010078 <_vfiprintf_r+0x20>
 80100c2:	89ab      	ldrh	r3, [r5, #12]
 80100c4:	0598      	lsls	r0, r3, #22
 80100c6:	d4ed      	bmi.n	80100a4 <_vfiprintf_r+0x4c>
 80100c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100ca:	f000 fbae 	bl	801082a <__retarget_lock_release_recursive>
 80100ce:	e7e9      	b.n	80100a4 <_vfiprintf_r+0x4c>
 80100d0:	2300      	movs	r3, #0
 80100d2:	9309      	str	r3, [sp, #36]	; 0x24
 80100d4:	2320      	movs	r3, #32
 80100d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100da:	f8cd 800c 	str.w	r8, [sp, #12]
 80100de:	2330      	movs	r3, #48	; 0x30
 80100e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80102a4 <_vfiprintf_r+0x24c>
 80100e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80100e8:	f04f 0901 	mov.w	r9, #1
 80100ec:	4623      	mov	r3, r4
 80100ee:	469a      	mov	sl, r3
 80100f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100f4:	b10a      	cbz	r2, 80100fa <_vfiprintf_r+0xa2>
 80100f6:	2a25      	cmp	r2, #37	; 0x25
 80100f8:	d1f9      	bne.n	80100ee <_vfiprintf_r+0x96>
 80100fa:	ebba 0b04 	subs.w	fp, sl, r4
 80100fe:	d00b      	beq.n	8010118 <_vfiprintf_r+0xc0>
 8010100:	465b      	mov	r3, fp
 8010102:	4622      	mov	r2, r4
 8010104:	4629      	mov	r1, r5
 8010106:	4630      	mov	r0, r6
 8010108:	f7ff ff93 	bl	8010032 <__sfputs_r>
 801010c:	3001      	adds	r0, #1
 801010e:	f000 80aa 	beq.w	8010266 <_vfiprintf_r+0x20e>
 8010112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010114:	445a      	add	r2, fp
 8010116:	9209      	str	r2, [sp, #36]	; 0x24
 8010118:	f89a 3000 	ldrb.w	r3, [sl]
 801011c:	2b00      	cmp	r3, #0
 801011e:	f000 80a2 	beq.w	8010266 <_vfiprintf_r+0x20e>
 8010122:	2300      	movs	r3, #0
 8010124:	f04f 32ff 	mov.w	r2, #4294967295
 8010128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801012c:	f10a 0a01 	add.w	sl, sl, #1
 8010130:	9304      	str	r3, [sp, #16]
 8010132:	9307      	str	r3, [sp, #28]
 8010134:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010138:	931a      	str	r3, [sp, #104]	; 0x68
 801013a:	4654      	mov	r4, sl
 801013c:	2205      	movs	r2, #5
 801013e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010142:	4858      	ldr	r0, [pc, #352]	; (80102a4 <_vfiprintf_r+0x24c>)
 8010144:	f7f0 f864 	bl	8000210 <memchr>
 8010148:	9a04      	ldr	r2, [sp, #16]
 801014a:	b9d8      	cbnz	r0, 8010184 <_vfiprintf_r+0x12c>
 801014c:	06d1      	lsls	r1, r2, #27
 801014e:	bf44      	itt	mi
 8010150:	2320      	movmi	r3, #32
 8010152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010156:	0713      	lsls	r3, r2, #28
 8010158:	bf44      	itt	mi
 801015a:	232b      	movmi	r3, #43	; 0x2b
 801015c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010160:	f89a 3000 	ldrb.w	r3, [sl]
 8010164:	2b2a      	cmp	r3, #42	; 0x2a
 8010166:	d015      	beq.n	8010194 <_vfiprintf_r+0x13c>
 8010168:	9a07      	ldr	r2, [sp, #28]
 801016a:	4654      	mov	r4, sl
 801016c:	2000      	movs	r0, #0
 801016e:	f04f 0c0a 	mov.w	ip, #10
 8010172:	4621      	mov	r1, r4
 8010174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010178:	3b30      	subs	r3, #48	; 0x30
 801017a:	2b09      	cmp	r3, #9
 801017c:	d94e      	bls.n	801021c <_vfiprintf_r+0x1c4>
 801017e:	b1b0      	cbz	r0, 80101ae <_vfiprintf_r+0x156>
 8010180:	9207      	str	r2, [sp, #28]
 8010182:	e014      	b.n	80101ae <_vfiprintf_r+0x156>
 8010184:	eba0 0308 	sub.w	r3, r0, r8
 8010188:	fa09 f303 	lsl.w	r3, r9, r3
 801018c:	4313      	orrs	r3, r2
 801018e:	9304      	str	r3, [sp, #16]
 8010190:	46a2      	mov	sl, r4
 8010192:	e7d2      	b.n	801013a <_vfiprintf_r+0xe2>
 8010194:	9b03      	ldr	r3, [sp, #12]
 8010196:	1d19      	adds	r1, r3, #4
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	9103      	str	r1, [sp, #12]
 801019c:	2b00      	cmp	r3, #0
 801019e:	bfbb      	ittet	lt
 80101a0:	425b      	neglt	r3, r3
 80101a2:	f042 0202 	orrlt.w	r2, r2, #2
 80101a6:	9307      	strge	r3, [sp, #28]
 80101a8:	9307      	strlt	r3, [sp, #28]
 80101aa:	bfb8      	it	lt
 80101ac:	9204      	strlt	r2, [sp, #16]
 80101ae:	7823      	ldrb	r3, [r4, #0]
 80101b0:	2b2e      	cmp	r3, #46	; 0x2e
 80101b2:	d10c      	bne.n	80101ce <_vfiprintf_r+0x176>
 80101b4:	7863      	ldrb	r3, [r4, #1]
 80101b6:	2b2a      	cmp	r3, #42	; 0x2a
 80101b8:	d135      	bne.n	8010226 <_vfiprintf_r+0x1ce>
 80101ba:	9b03      	ldr	r3, [sp, #12]
 80101bc:	1d1a      	adds	r2, r3, #4
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	9203      	str	r2, [sp, #12]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	bfb8      	it	lt
 80101c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80101ca:	3402      	adds	r4, #2
 80101cc:	9305      	str	r3, [sp, #20]
 80101ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80102b4 <_vfiprintf_r+0x25c>
 80101d2:	7821      	ldrb	r1, [r4, #0]
 80101d4:	2203      	movs	r2, #3
 80101d6:	4650      	mov	r0, sl
 80101d8:	f7f0 f81a 	bl	8000210 <memchr>
 80101dc:	b140      	cbz	r0, 80101f0 <_vfiprintf_r+0x198>
 80101de:	2340      	movs	r3, #64	; 0x40
 80101e0:	eba0 000a 	sub.w	r0, r0, sl
 80101e4:	fa03 f000 	lsl.w	r0, r3, r0
 80101e8:	9b04      	ldr	r3, [sp, #16]
 80101ea:	4303      	orrs	r3, r0
 80101ec:	3401      	adds	r4, #1
 80101ee:	9304      	str	r3, [sp, #16]
 80101f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101f4:	482c      	ldr	r0, [pc, #176]	; (80102a8 <_vfiprintf_r+0x250>)
 80101f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80101fa:	2206      	movs	r2, #6
 80101fc:	f7f0 f808 	bl	8000210 <memchr>
 8010200:	2800      	cmp	r0, #0
 8010202:	d03f      	beq.n	8010284 <_vfiprintf_r+0x22c>
 8010204:	4b29      	ldr	r3, [pc, #164]	; (80102ac <_vfiprintf_r+0x254>)
 8010206:	bb1b      	cbnz	r3, 8010250 <_vfiprintf_r+0x1f8>
 8010208:	9b03      	ldr	r3, [sp, #12]
 801020a:	3307      	adds	r3, #7
 801020c:	f023 0307 	bic.w	r3, r3, #7
 8010210:	3308      	adds	r3, #8
 8010212:	9303      	str	r3, [sp, #12]
 8010214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010216:	443b      	add	r3, r7
 8010218:	9309      	str	r3, [sp, #36]	; 0x24
 801021a:	e767      	b.n	80100ec <_vfiprintf_r+0x94>
 801021c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010220:	460c      	mov	r4, r1
 8010222:	2001      	movs	r0, #1
 8010224:	e7a5      	b.n	8010172 <_vfiprintf_r+0x11a>
 8010226:	2300      	movs	r3, #0
 8010228:	3401      	adds	r4, #1
 801022a:	9305      	str	r3, [sp, #20]
 801022c:	4619      	mov	r1, r3
 801022e:	f04f 0c0a 	mov.w	ip, #10
 8010232:	4620      	mov	r0, r4
 8010234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010238:	3a30      	subs	r2, #48	; 0x30
 801023a:	2a09      	cmp	r2, #9
 801023c:	d903      	bls.n	8010246 <_vfiprintf_r+0x1ee>
 801023e:	2b00      	cmp	r3, #0
 8010240:	d0c5      	beq.n	80101ce <_vfiprintf_r+0x176>
 8010242:	9105      	str	r1, [sp, #20]
 8010244:	e7c3      	b.n	80101ce <_vfiprintf_r+0x176>
 8010246:	fb0c 2101 	mla	r1, ip, r1, r2
 801024a:	4604      	mov	r4, r0
 801024c:	2301      	movs	r3, #1
 801024e:	e7f0      	b.n	8010232 <_vfiprintf_r+0x1da>
 8010250:	ab03      	add	r3, sp, #12
 8010252:	9300      	str	r3, [sp, #0]
 8010254:	462a      	mov	r2, r5
 8010256:	4b16      	ldr	r3, [pc, #88]	; (80102b0 <_vfiprintf_r+0x258>)
 8010258:	a904      	add	r1, sp, #16
 801025a:	4630      	mov	r0, r6
 801025c:	f7fc f898 	bl	800c390 <_printf_float>
 8010260:	4607      	mov	r7, r0
 8010262:	1c78      	adds	r0, r7, #1
 8010264:	d1d6      	bne.n	8010214 <_vfiprintf_r+0x1bc>
 8010266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010268:	07d9      	lsls	r1, r3, #31
 801026a:	d405      	bmi.n	8010278 <_vfiprintf_r+0x220>
 801026c:	89ab      	ldrh	r3, [r5, #12]
 801026e:	059a      	lsls	r2, r3, #22
 8010270:	d402      	bmi.n	8010278 <_vfiprintf_r+0x220>
 8010272:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010274:	f000 fad9 	bl	801082a <__retarget_lock_release_recursive>
 8010278:	89ab      	ldrh	r3, [r5, #12]
 801027a:	065b      	lsls	r3, r3, #25
 801027c:	f53f af12 	bmi.w	80100a4 <_vfiprintf_r+0x4c>
 8010280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010282:	e711      	b.n	80100a8 <_vfiprintf_r+0x50>
 8010284:	ab03      	add	r3, sp, #12
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	462a      	mov	r2, r5
 801028a:	4b09      	ldr	r3, [pc, #36]	; (80102b0 <_vfiprintf_r+0x258>)
 801028c:	a904      	add	r1, sp, #16
 801028e:	4630      	mov	r0, r6
 8010290:	f7fc fb22 	bl	800c8d8 <_printf_i>
 8010294:	e7e4      	b.n	8010260 <_vfiprintf_r+0x208>
 8010296:	bf00      	nop
 8010298:	080246b0 	.word	0x080246b0
 801029c:	080246d0 	.word	0x080246d0
 80102a0:	08024690 	.word	0x08024690
 80102a4:	0802467c 	.word	0x0802467c
 80102a8:	08024686 	.word	0x08024686
 80102ac:	0800c391 	.word	0x0800c391
 80102b0:	08010033 	.word	0x08010033
 80102b4:	08024682 	.word	0x08024682

080102b8 <nan>:
 80102b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80102c0 <nan+0x8>
 80102bc:	4770      	bx	lr
 80102be:	bf00      	nop
 80102c0:	00000000 	.word	0x00000000
 80102c4:	7ff80000 	.word	0x7ff80000

080102c8 <_sbrk_r>:
 80102c8:	b538      	push	{r3, r4, r5, lr}
 80102ca:	4d06      	ldr	r5, [pc, #24]	; (80102e4 <_sbrk_r+0x1c>)
 80102cc:	2300      	movs	r3, #0
 80102ce:	4604      	mov	r4, r0
 80102d0:	4608      	mov	r0, r1
 80102d2:	602b      	str	r3, [r5, #0]
 80102d4:	f7f5 fb34 	bl	8005940 <_sbrk>
 80102d8:	1c43      	adds	r3, r0, #1
 80102da:	d102      	bne.n	80102e2 <_sbrk_r+0x1a>
 80102dc:	682b      	ldr	r3, [r5, #0]
 80102de:	b103      	cbz	r3, 80102e2 <_sbrk_r+0x1a>
 80102e0:	6023      	str	r3, [r4, #0]
 80102e2:	bd38      	pop	{r3, r4, r5, pc}
 80102e4:	2000079c 	.word	0x2000079c

080102e8 <strncmp>:
 80102e8:	b510      	push	{r4, lr}
 80102ea:	b16a      	cbz	r2, 8010308 <strncmp+0x20>
 80102ec:	3901      	subs	r1, #1
 80102ee:	1884      	adds	r4, r0, r2
 80102f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80102f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d103      	bne.n	8010304 <strncmp+0x1c>
 80102fc:	42a0      	cmp	r0, r4
 80102fe:	d001      	beq.n	8010304 <strncmp+0x1c>
 8010300:	2b00      	cmp	r3, #0
 8010302:	d1f5      	bne.n	80102f0 <strncmp+0x8>
 8010304:	1a98      	subs	r0, r3, r2
 8010306:	bd10      	pop	{r4, pc}
 8010308:	4610      	mov	r0, r2
 801030a:	e7fc      	b.n	8010306 <strncmp+0x1e>

0801030c <__swbuf_r>:
 801030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801030e:	460e      	mov	r6, r1
 8010310:	4614      	mov	r4, r2
 8010312:	4605      	mov	r5, r0
 8010314:	b118      	cbz	r0, 801031e <__swbuf_r+0x12>
 8010316:	6983      	ldr	r3, [r0, #24]
 8010318:	b90b      	cbnz	r3, 801031e <__swbuf_r+0x12>
 801031a:	f000 f9e7 	bl	80106ec <__sinit>
 801031e:	4b21      	ldr	r3, [pc, #132]	; (80103a4 <__swbuf_r+0x98>)
 8010320:	429c      	cmp	r4, r3
 8010322:	d12b      	bne.n	801037c <__swbuf_r+0x70>
 8010324:	686c      	ldr	r4, [r5, #4]
 8010326:	69a3      	ldr	r3, [r4, #24]
 8010328:	60a3      	str	r3, [r4, #8]
 801032a:	89a3      	ldrh	r3, [r4, #12]
 801032c:	071a      	lsls	r2, r3, #28
 801032e:	d52f      	bpl.n	8010390 <__swbuf_r+0x84>
 8010330:	6923      	ldr	r3, [r4, #16]
 8010332:	b36b      	cbz	r3, 8010390 <__swbuf_r+0x84>
 8010334:	6923      	ldr	r3, [r4, #16]
 8010336:	6820      	ldr	r0, [r4, #0]
 8010338:	1ac0      	subs	r0, r0, r3
 801033a:	6963      	ldr	r3, [r4, #20]
 801033c:	b2f6      	uxtb	r6, r6
 801033e:	4283      	cmp	r3, r0
 8010340:	4637      	mov	r7, r6
 8010342:	dc04      	bgt.n	801034e <__swbuf_r+0x42>
 8010344:	4621      	mov	r1, r4
 8010346:	4628      	mov	r0, r5
 8010348:	f000 f93c 	bl	80105c4 <_fflush_r>
 801034c:	bb30      	cbnz	r0, 801039c <__swbuf_r+0x90>
 801034e:	68a3      	ldr	r3, [r4, #8]
 8010350:	3b01      	subs	r3, #1
 8010352:	60a3      	str	r3, [r4, #8]
 8010354:	6823      	ldr	r3, [r4, #0]
 8010356:	1c5a      	adds	r2, r3, #1
 8010358:	6022      	str	r2, [r4, #0]
 801035a:	701e      	strb	r6, [r3, #0]
 801035c:	6963      	ldr	r3, [r4, #20]
 801035e:	3001      	adds	r0, #1
 8010360:	4283      	cmp	r3, r0
 8010362:	d004      	beq.n	801036e <__swbuf_r+0x62>
 8010364:	89a3      	ldrh	r3, [r4, #12]
 8010366:	07db      	lsls	r3, r3, #31
 8010368:	d506      	bpl.n	8010378 <__swbuf_r+0x6c>
 801036a:	2e0a      	cmp	r6, #10
 801036c:	d104      	bne.n	8010378 <__swbuf_r+0x6c>
 801036e:	4621      	mov	r1, r4
 8010370:	4628      	mov	r0, r5
 8010372:	f000 f927 	bl	80105c4 <_fflush_r>
 8010376:	b988      	cbnz	r0, 801039c <__swbuf_r+0x90>
 8010378:	4638      	mov	r0, r7
 801037a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801037c:	4b0a      	ldr	r3, [pc, #40]	; (80103a8 <__swbuf_r+0x9c>)
 801037e:	429c      	cmp	r4, r3
 8010380:	d101      	bne.n	8010386 <__swbuf_r+0x7a>
 8010382:	68ac      	ldr	r4, [r5, #8]
 8010384:	e7cf      	b.n	8010326 <__swbuf_r+0x1a>
 8010386:	4b09      	ldr	r3, [pc, #36]	; (80103ac <__swbuf_r+0xa0>)
 8010388:	429c      	cmp	r4, r3
 801038a:	bf08      	it	eq
 801038c:	68ec      	ldreq	r4, [r5, #12]
 801038e:	e7ca      	b.n	8010326 <__swbuf_r+0x1a>
 8010390:	4621      	mov	r1, r4
 8010392:	4628      	mov	r0, r5
 8010394:	f000 f81a 	bl	80103cc <__swsetup_r>
 8010398:	2800      	cmp	r0, #0
 801039a:	d0cb      	beq.n	8010334 <__swbuf_r+0x28>
 801039c:	f04f 37ff 	mov.w	r7, #4294967295
 80103a0:	e7ea      	b.n	8010378 <__swbuf_r+0x6c>
 80103a2:	bf00      	nop
 80103a4:	080246b0 	.word	0x080246b0
 80103a8:	080246d0 	.word	0x080246d0
 80103ac:	08024690 	.word	0x08024690

080103b0 <__ascii_wctomb>:
 80103b0:	b149      	cbz	r1, 80103c6 <__ascii_wctomb+0x16>
 80103b2:	2aff      	cmp	r2, #255	; 0xff
 80103b4:	bf85      	ittet	hi
 80103b6:	238a      	movhi	r3, #138	; 0x8a
 80103b8:	6003      	strhi	r3, [r0, #0]
 80103ba:	700a      	strbls	r2, [r1, #0]
 80103bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80103c0:	bf98      	it	ls
 80103c2:	2001      	movls	r0, #1
 80103c4:	4770      	bx	lr
 80103c6:	4608      	mov	r0, r1
 80103c8:	4770      	bx	lr
	...

080103cc <__swsetup_r>:
 80103cc:	4b32      	ldr	r3, [pc, #200]	; (8010498 <__swsetup_r+0xcc>)
 80103ce:	b570      	push	{r4, r5, r6, lr}
 80103d0:	681d      	ldr	r5, [r3, #0]
 80103d2:	4606      	mov	r6, r0
 80103d4:	460c      	mov	r4, r1
 80103d6:	b125      	cbz	r5, 80103e2 <__swsetup_r+0x16>
 80103d8:	69ab      	ldr	r3, [r5, #24]
 80103da:	b913      	cbnz	r3, 80103e2 <__swsetup_r+0x16>
 80103dc:	4628      	mov	r0, r5
 80103de:	f000 f985 	bl	80106ec <__sinit>
 80103e2:	4b2e      	ldr	r3, [pc, #184]	; (801049c <__swsetup_r+0xd0>)
 80103e4:	429c      	cmp	r4, r3
 80103e6:	d10f      	bne.n	8010408 <__swsetup_r+0x3c>
 80103e8:	686c      	ldr	r4, [r5, #4]
 80103ea:	89a3      	ldrh	r3, [r4, #12]
 80103ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103f0:	0719      	lsls	r1, r3, #28
 80103f2:	d42c      	bmi.n	801044e <__swsetup_r+0x82>
 80103f4:	06dd      	lsls	r5, r3, #27
 80103f6:	d411      	bmi.n	801041c <__swsetup_r+0x50>
 80103f8:	2309      	movs	r3, #9
 80103fa:	6033      	str	r3, [r6, #0]
 80103fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010400:	81a3      	strh	r3, [r4, #12]
 8010402:	f04f 30ff 	mov.w	r0, #4294967295
 8010406:	e03e      	b.n	8010486 <__swsetup_r+0xba>
 8010408:	4b25      	ldr	r3, [pc, #148]	; (80104a0 <__swsetup_r+0xd4>)
 801040a:	429c      	cmp	r4, r3
 801040c:	d101      	bne.n	8010412 <__swsetup_r+0x46>
 801040e:	68ac      	ldr	r4, [r5, #8]
 8010410:	e7eb      	b.n	80103ea <__swsetup_r+0x1e>
 8010412:	4b24      	ldr	r3, [pc, #144]	; (80104a4 <__swsetup_r+0xd8>)
 8010414:	429c      	cmp	r4, r3
 8010416:	bf08      	it	eq
 8010418:	68ec      	ldreq	r4, [r5, #12]
 801041a:	e7e6      	b.n	80103ea <__swsetup_r+0x1e>
 801041c:	0758      	lsls	r0, r3, #29
 801041e:	d512      	bpl.n	8010446 <__swsetup_r+0x7a>
 8010420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010422:	b141      	cbz	r1, 8010436 <__swsetup_r+0x6a>
 8010424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010428:	4299      	cmp	r1, r3
 801042a:	d002      	beq.n	8010432 <__swsetup_r+0x66>
 801042c:	4630      	mov	r0, r6
 801042e:	f7ff fbe3 	bl	800fbf8 <_free_r>
 8010432:	2300      	movs	r3, #0
 8010434:	6363      	str	r3, [r4, #52]	; 0x34
 8010436:	89a3      	ldrh	r3, [r4, #12]
 8010438:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801043c:	81a3      	strh	r3, [r4, #12]
 801043e:	2300      	movs	r3, #0
 8010440:	6063      	str	r3, [r4, #4]
 8010442:	6923      	ldr	r3, [r4, #16]
 8010444:	6023      	str	r3, [r4, #0]
 8010446:	89a3      	ldrh	r3, [r4, #12]
 8010448:	f043 0308 	orr.w	r3, r3, #8
 801044c:	81a3      	strh	r3, [r4, #12]
 801044e:	6923      	ldr	r3, [r4, #16]
 8010450:	b94b      	cbnz	r3, 8010466 <__swsetup_r+0x9a>
 8010452:	89a3      	ldrh	r3, [r4, #12]
 8010454:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801045c:	d003      	beq.n	8010466 <__swsetup_r+0x9a>
 801045e:	4621      	mov	r1, r4
 8010460:	4630      	mov	r0, r6
 8010462:	f000 fa07 	bl	8010874 <__smakebuf_r>
 8010466:	89a0      	ldrh	r0, [r4, #12]
 8010468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801046c:	f010 0301 	ands.w	r3, r0, #1
 8010470:	d00a      	beq.n	8010488 <__swsetup_r+0xbc>
 8010472:	2300      	movs	r3, #0
 8010474:	60a3      	str	r3, [r4, #8]
 8010476:	6963      	ldr	r3, [r4, #20]
 8010478:	425b      	negs	r3, r3
 801047a:	61a3      	str	r3, [r4, #24]
 801047c:	6923      	ldr	r3, [r4, #16]
 801047e:	b943      	cbnz	r3, 8010492 <__swsetup_r+0xc6>
 8010480:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010484:	d1ba      	bne.n	80103fc <__swsetup_r+0x30>
 8010486:	bd70      	pop	{r4, r5, r6, pc}
 8010488:	0781      	lsls	r1, r0, #30
 801048a:	bf58      	it	pl
 801048c:	6963      	ldrpl	r3, [r4, #20]
 801048e:	60a3      	str	r3, [r4, #8]
 8010490:	e7f4      	b.n	801047c <__swsetup_r+0xb0>
 8010492:	2000      	movs	r0, #0
 8010494:	e7f7      	b.n	8010486 <__swsetup_r+0xba>
 8010496:	bf00      	nop
 8010498:	20000040 	.word	0x20000040
 801049c:	080246b0 	.word	0x080246b0
 80104a0:	080246d0 	.word	0x080246d0
 80104a4:	08024690 	.word	0x08024690

080104a8 <abort>:
 80104a8:	b508      	push	{r3, lr}
 80104aa:	2006      	movs	r0, #6
 80104ac:	f000 fa96 	bl	80109dc <raise>
 80104b0:	2001      	movs	r0, #1
 80104b2:	f7f5 f9cd 	bl	8005850 <_exit>
	...

080104b8 <__sflush_r>:
 80104b8:	898a      	ldrh	r2, [r1, #12]
 80104ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104be:	4605      	mov	r5, r0
 80104c0:	0710      	lsls	r0, r2, #28
 80104c2:	460c      	mov	r4, r1
 80104c4:	d458      	bmi.n	8010578 <__sflush_r+0xc0>
 80104c6:	684b      	ldr	r3, [r1, #4]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	dc05      	bgt.n	80104d8 <__sflush_r+0x20>
 80104cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	dc02      	bgt.n	80104d8 <__sflush_r+0x20>
 80104d2:	2000      	movs	r0, #0
 80104d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104da:	2e00      	cmp	r6, #0
 80104dc:	d0f9      	beq.n	80104d2 <__sflush_r+0x1a>
 80104de:	2300      	movs	r3, #0
 80104e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80104e4:	682f      	ldr	r7, [r5, #0]
 80104e6:	602b      	str	r3, [r5, #0]
 80104e8:	d032      	beq.n	8010550 <__sflush_r+0x98>
 80104ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80104ec:	89a3      	ldrh	r3, [r4, #12]
 80104ee:	075a      	lsls	r2, r3, #29
 80104f0:	d505      	bpl.n	80104fe <__sflush_r+0x46>
 80104f2:	6863      	ldr	r3, [r4, #4]
 80104f4:	1ac0      	subs	r0, r0, r3
 80104f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104f8:	b10b      	cbz	r3, 80104fe <__sflush_r+0x46>
 80104fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104fc:	1ac0      	subs	r0, r0, r3
 80104fe:	2300      	movs	r3, #0
 8010500:	4602      	mov	r2, r0
 8010502:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010504:	6a21      	ldr	r1, [r4, #32]
 8010506:	4628      	mov	r0, r5
 8010508:	47b0      	blx	r6
 801050a:	1c43      	adds	r3, r0, #1
 801050c:	89a3      	ldrh	r3, [r4, #12]
 801050e:	d106      	bne.n	801051e <__sflush_r+0x66>
 8010510:	6829      	ldr	r1, [r5, #0]
 8010512:	291d      	cmp	r1, #29
 8010514:	d82c      	bhi.n	8010570 <__sflush_r+0xb8>
 8010516:	4a2a      	ldr	r2, [pc, #168]	; (80105c0 <__sflush_r+0x108>)
 8010518:	40ca      	lsrs	r2, r1
 801051a:	07d6      	lsls	r6, r2, #31
 801051c:	d528      	bpl.n	8010570 <__sflush_r+0xb8>
 801051e:	2200      	movs	r2, #0
 8010520:	6062      	str	r2, [r4, #4]
 8010522:	04d9      	lsls	r1, r3, #19
 8010524:	6922      	ldr	r2, [r4, #16]
 8010526:	6022      	str	r2, [r4, #0]
 8010528:	d504      	bpl.n	8010534 <__sflush_r+0x7c>
 801052a:	1c42      	adds	r2, r0, #1
 801052c:	d101      	bne.n	8010532 <__sflush_r+0x7a>
 801052e:	682b      	ldr	r3, [r5, #0]
 8010530:	b903      	cbnz	r3, 8010534 <__sflush_r+0x7c>
 8010532:	6560      	str	r0, [r4, #84]	; 0x54
 8010534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010536:	602f      	str	r7, [r5, #0]
 8010538:	2900      	cmp	r1, #0
 801053a:	d0ca      	beq.n	80104d2 <__sflush_r+0x1a>
 801053c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010540:	4299      	cmp	r1, r3
 8010542:	d002      	beq.n	801054a <__sflush_r+0x92>
 8010544:	4628      	mov	r0, r5
 8010546:	f7ff fb57 	bl	800fbf8 <_free_r>
 801054a:	2000      	movs	r0, #0
 801054c:	6360      	str	r0, [r4, #52]	; 0x34
 801054e:	e7c1      	b.n	80104d4 <__sflush_r+0x1c>
 8010550:	6a21      	ldr	r1, [r4, #32]
 8010552:	2301      	movs	r3, #1
 8010554:	4628      	mov	r0, r5
 8010556:	47b0      	blx	r6
 8010558:	1c41      	adds	r1, r0, #1
 801055a:	d1c7      	bne.n	80104ec <__sflush_r+0x34>
 801055c:	682b      	ldr	r3, [r5, #0]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d0c4      	beq.n	80104ec <__sflush_r+0x34>
 8010562:	2b1d      	cmp	r3, #29
 8010564:	d001      	beq.n	801056a <__sflush_r+0xb2>
 8010566:	2b16      	cmp	r3, #22
 8010568:	d101      	bne.n	801056e <__sflush_r+0xb6>
 801056a:	602f      	str	r7, [r5, #0]
 801056c:	e7b1      	b.n	80104d2 <__sflush_r+0x1a>
 801056e:	89a3      	ldrh	r3, [r4, #12]
 8010570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010574:	81a3      	strh	r3, [r4, #12]
 8010576:	e7ad      	b.n	80104d4 <__sflush_r+0x1c>
 8010578:	690f      	ldr	r7, [r1, #16]
 801057a:	2f00      	cmp	r7, #0
 801057c:	d0a9      	beq.n	80104d2 <__sflush_r+0x1a>
 801057e:	0793      	lsls	r3, r2, #30
 8010580:	680e      	ldr	r6, [r1, #0]
 8010582:	bf08      	it	eq
 8010584:	694b      	ldreq	r3, [r1, #20]
 8010586:	600f      	str	r7, [r1, #0]
 8010588:	bf18      	it	ne
 801058a:	2300      	movne	r3, #0
 801058c:	eba6 0807 	sub.w	r8, r6, r7
 8010590:	608b      	str	r3, [r1, #8]
 8010592:	f1b8 0f00 	cmp.w	r8, #0
 8010596:	dd9c      	ble.n	80104d2 <__sflush_r+0x1a>
 8010598:	6a21      	ldr	r1, [r4, #32]
 801059a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801059c:	4643      	mov	r3, r8
 801059e:	463a      	mov	r2, r7
 80105a0:	4628      	mov	r0, r5
 80105a2:	47b0      	blx	r6
 80105a4:	2800      	cmp	r0, #0
 80105a6:	dc06      	bgt.n	80105b6 <__sflush_r+0xfe>
 80105a8:	89a3      	ldrh	r3, [r4, #12]
 80105aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105ae:	81a3      	strh	r3, [r4, #12]
 80105b0:	f04f 30ff 	mov.w	r0, #4294967295
 80105b4:	e78e      	b.n	80104d4 <__sflush_r+0x1c>
 80105b6:	4407      	add	r7, r0
 80105b8:	eba8 0800 	sub.w	r8, r8, r0
 80105bc:	e7e9      	b.n	8010592 <__sflush_r+0xda>
 80105be:	bf00      	nop
 80105c0:	20400001 	.word	0x20400001

080105c4 <_fflush_r>:
 80105c4:	b538      	push	{r3, r4, r5, lr}
 80105c6:	690b      	ldr	r3, [r1, #16]
 80105c8:	4605      	mov	r5, r0
 80105ca:	460c      	mov	r4, r1
 80105cc:	b913      	cbnz	r3, 80105d4 <_fflush_r+0x10>
 80105ce:	2500      	movs	r5, #0
 80105d0:	4628      	mov	r0, r5
 80105d2:	bd38      	pop	{r3, r4, r5, pc}
 80105d4:	b118      	cbz	r0, 80105de <_fflush_r+0x1a>
 80105d6:	6983      	ldr	r3, [r0, #24]
 80105d8:	b90b      	cbnz	r3, 80105de <_fflush_r+0x1a>
 80105da:	f000 f887 	bl	80106ec <__sinit>
 80105de:	4b14      	ldr	r3, [pc, #80]	; (8010630 <_fflush_r+0x6c>)
 80105e0:	429c      	cmp	r4, r3
 80105e2:	d11b      	bne.n	801061c <_fflush_r+0x58>
 80105e4:	686c      	ldr	r4, [r5, #4]
 80105e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d0ef      	beq.n	80105ce <_fflush_r+0xa>
 80105ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80105f0:	07d0      	lsls	r0, r2, #31
 80105f2:	d404      	bmi.n	80105fe <_fflush_r+0x3a>
 80105f4:	0599      	lsls	r1, r3, #22
 80105f6:	d402      	bmi.n	80105fe <_fflush_r+0x3a>
 80105f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105fa:	f000 f915 	bl	8010828 <__retarget_lock_acquire_recursive>
 80105fe:	4628      	mov	r0, r5
 8010600:	4621      	mov	r1, r4
 8010602:	f7ff ff59 	bl	80104b8 <__sflush_r>
 8010606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010608:	07da      	lsls	r2, r3, #31
 801060a:	4605      	mov	r5, r0
 801060c:	d4e0      	bmi.n	80105d0 <_fflush_r+0xc>
 801060e:	89a3      	ldrh	r3, [r4, #12]
 8010610:	059b      	lsls	r3, r3, #22
 8010612:	d4dd      	bmi.n	80105d0 <_fflush_r+0xc>
 8010614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010616:	f000 f908 	bl	801082a <__retarget_lock_release_recursive>
 801061a:	e7d9      	b.n	80105d0 <_fflush_r+0xc>
 801061c:	4b05      	ldr	r3, [pc, #20]	; (8010634 <_fflush_r+0x70>)
 801061e:	429c      	cmp	r4, r3
 8010620:	d101      	bne.n	8010626 <_fflush_r+0x62>
 8010622:	68ac      	ldr	r4, [r5, #8]
 8010624:	e7df      	b.n	80105e6 <_fflush_r+0x22>
 8010626:	4b04      	ldr	r3, [pc, #16]	; (8010638 <_fflush_r+0x74>)
 8010628:	429c      	cmp	r4, r3
 801062a:	bf08      	it	eq
 801062c:	68ec      	ldreq	r4, [r5, #12]
 801062e:	e7da      	b.n	80105e6 <_fflush_r+0x22>
 8010630:	080246b0 	.word	0x080246b0
 8010634:	080246d0 	.word	0x080246d0
 8010638:	08024690 	.word	0x08024690

0801063c <std>:
 801063c:	2300      	movs	r3, #0
 801063e:	b510      	push	{r4, lr}
 8010640:	4604      	mov	r4, r0
 8010642:	e9c0 3300 	strd	r3, r3, [r0]
 8010646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801064a:	6083      	str	r3, [r0, #8]
 801064c:	8181      	strh	r1, [r0, #12]
 801064e:	6643      	str	r3, [r0, #100]	; 0x64
 8010650:	81c2      	strh	r2, [r0, #14]
 8010652:	6183      	str	r3, [r0, #24]
 8010654:	4619      	mov	r1, r3
 8010656:	2208      	movs	r2, #8
 8010658:	305c      	adds	r0, #92	; 0x5c
 801065a:	f7fb fdf1 	bl	800c240 <memset>
 801065e:	4b05      	ldr	r3, [pc, #20]	; (8010674 <std+0x38>)
 8010660:	6263      	str	r3, [r4, #36]	; 0x24
 8010662:	4b05      	ldr	r3, [pc, #20]	; (8010678 <std+0x3c>)
 8010664:	62a3      	str	r3, [r4, #40]	; 0x28
 8010666:	4b05      	ldr	r3, [pc, #20]	; (801067c <std+0x40>)
 8010668:	62e3      	str	r3, [r4, #44]	; 0x2c
 801066a:	4b05      	ldr	r3, [pc, #20]	; (8010680 <std+0x44>)
 801066c:	6224      	str	r4, [r4, #32]
 801066e:	6323      	str	r3, [r4, #48]	; 0x30
 8010670:	bd10      	pop	{r4, pc}
 8010672:	bf00      	nop
 8010674:	08010a15 	.word	0x08010a15
 8010678:	08010a37 	.word	0x08010a37
 801067c:	08010a6f 	.word	0x08010a6f
 8010680:	08010a93 	.word	0x08010a93

08010684 <_cleanup_r>:
 8010684:	4901      	ldr	r1, [pc, #4]	; (801068c <_cleanup_r+0x8>)
 8010686:	f000 b8af 	b.w	80107e8 <_fwalk_reent>
 801068a:	bf00      	nop
 801068c:	080105c5 	.word	0x080105c5

08010690 <__sfmoreglue>:
 8010690:	b570      	push	{r4, r5, r6, lr}
 8010692:	1e4a      	subs	r2, r1, #1
 8010694:	2568      	movs	r5, #104	; 0x68
 8010696:	4355      	muls	r5, r2
 8010698:	460e      	mov	r6, r1
 801069a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801069e:	f7ff fafb 	bl	800fc98 <_malloc_r>
 80106a2:	4604      	mov	r4, r0
 80106a4:	b140      	cbz	r0, 80106b8 <__sfmoreglue+0x28>
 80106a6:	2100      	movs	r1, #0
 80106a8:	e9c0 1600 	strd	r1, r6, [r0]
 80106ac:	300c      	adds	r0, #12
 80106ae:	60a0      	str	r0, [r4, #8]
 80106b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80106b4:	f7fb fdc4 	bl	800c240 <memset>
 80106b8:	4620      	mov	r0, r4
 80106ba:	bd70      	pop	{r4, r5, r6, pc}

080106bc <__sfp_lock_acquire>:
 80106bc:	4801      	ldr	r0, [pc, #4]	; (80106c4 <__sfp_lock_acquire+0x8>)
 80106be:	f000 b8b3 	b.w	8010828 <__retarget_lock_acquire_recursive>
 80106c2:	bf00      	nop
 80106c4:	20000798 	.word	0x20000798

080106c8 <__sfp_lock_release>:
 80106c8:	4801      	ldr	r0, [pc, #4]	; (80106d0 <__sfp_lock_release+0x8>)
 80106ca:	f000 b8ae 	b.w	801082a <__retarget_lock_release_recursive>
 80106ce:	bf00      	nop
 80106d0:	20000798 	.word	0x20000798

080106d4 <__sinit_lock_acquire>:
 80106d4:	4801      	ldr	r0, [pc, #4]	; (80106dc <__sinit_lock_acquire+0x8>)
 80106d6:	f000 b8a7 	b.w	8010828 <__retarget_lock_acquire_recursive>
 80106da:	bf00      	nop
 80106dc:	20000793 	.word	0x20000793

080106e0 <__sinit_lock_release>:
 80106e0:	4801      	ldr	r0, [pc, #4]	; (80106e8 <__sinit_lock_release+0x8>)
 80106e2:	f000 b8a2 	b.w	801082a <__retarget_lock_release_recursive>
 80106e6:	bf00      	nop
 80106e8:	20000793 	.word	0x20000793

080106ec <__sinit>:
 80106ec:	b510      	push	{r4, lr}
 80106ee:	4604      	mov	r4, r0
 80106f0:	f7ff fff0 	bl	80106d4 <__sinit_lock_acquire>
 80106f4:	69a3      	ldr	r3, [r4, #24]
 80106f6:	b11b      	cbz	r3, 8010700 <__sinit+0x14>
 80106f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106fc:	f7ff bff0 	b.w	80106e0 <__sinit_lock_release>
 8010700:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010704:	6523      	str	r3, [r4, #80]	; 0x50
 8010706:	4b13      	ldr	r3, [pc, #76]	; (8010754 <__sinit+0x68>)
 8010708:	4a13      	ldr	r2, [pc, #76]	; (8010758 <__sinit+0x6c>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	62a2      	str	r2, [r4, #40]	; 0x28
 801070e:	42a3      	cmp	r3, r4
 8010710:	bf04      	itt	eq
 8010712:	2301      	moveq	r3, #1
 8010714:	61a3      	streq	r3, [r4, #24]
 8010716:	4620      	mov	r0, r4
 8010718:	f000 f820 	bl	801075c <__sfp>
 801071c:	6060      	str	r0, [r4, #4]
 801071e:	4620      	mov	r0, r4
 8010720:	f000 f81c 	bl	801075c <__sfp>
 8010724:	60a0      	str	r0, [r4, #8]
 8010726:	4620      	mov	r0, r4
 8010728:	f000 f818 	bl	801075c <__sfp>
 801072c:	2200      	movs	r2, #0
 801072e:	60e0      	str	r0, [r4, #12]
 8010730:	2104      	movs	r1, #4
 8010732:	6860      	ldr	r0, [r4, #4]
 8010734:	f7ff ff82 	bl	801063c <std>
 8010738:	68a0      	ldr	r0, [r4, #8]
 801073a:	2201      	movs	r2, #1
 801073c:	2109      	movs	r1, #9
 801073e:	f7ff ff7d 	bl	801063c <std>
 8010742:	68e0      	ldr	r0, [r4, #12]
 8010744:	2202      	movs	r2, #2
 8010746:	2112      	movs	r1, #18
 8010748:	f7ff ff78 	bl	801063c <std>
 801074c:	2301      	movs	r3, #1
 801074e:	61a3      	str	r3, [r4, #24]
 8010750:	e7d2      	b.n	80106f8 <__sinit+0xc>
 8010752:	bf00      	nop
 8010754:	080241dc 	.word	0x080241dc
 8010758:	08010685 	.word	0x08010685

0801075c <__sfp>:
 801075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801075e:	4607      	mov	r7, r0
 8010760:	f7ff ffac 	bl	80106bc <__sfp_lock_acquire>
 8010764:	4b1e      	ldr	r3, [pc, #120]	; (80107e0 <__sfp+0x84>)
 8010766:	681e      	ldr	r6, [r3, #0]
 8010768:	69b3      	ldr	r3, [r6, #24]
 801076a:	b913      	cbnz	r3, 8010772 <__sfp+0x16>
 801076c:	4630      	mov	r0, r6
 801076e:	f7ff ffbd 	bl	80106ec <__sinit>
 8010772:	3648      	adds	r6, #72	; 0x48
 8010774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010778:	3b01      	subs	r3, #1
 801077a:	d503      	bpl.n	8010784 <__sfp+0x28>
 801077c:	6833      	ldr	r3, [r6, #0]
 801077e:	b30b      	cbz	r3, 80107c4 <__sfp+0x68>
 8010780:	6836      	ldr	r6, [r6, #0]
 8010782:	e7f7      	b.n	8010774 <__sfp+0x18>
 8010784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010788:	b9d5      	cbnz	r5, 80107c0 <__sfp+0x64>
 801078a:	4b16      	ldr	r3, [pc, #88]	; (80107e4 <__sfp+0x88>)
 801078c:	60e3      	str	r3, [r4, #12]
 801078e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010792:	6665      	str	r5, [r4, #100]	; 0x64
 8010794:	f000 f847 	bl	8010826 <__retarget_lock_init_recursive>
 8010798:	f7ff ff96 	bl	80106c8 <__sfp_lock_release>
 801079c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80107a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80107a4:	6025      	str	r5, [r4, #0]
 80107a6:	61a5      	str	r5, [r4, #24]
 80107a8:	2208      	movs	r2, #8
 80107aa:	4629      	mov	r1, r5
 80107ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80107b0:	f7fb fd46 	bl	800c240 <memset>
 80107b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80107b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80107bc:	4620      	mov	r0, r4
 80107be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107c0:	3468      	adds	r4, #104	; 0x68
 80107c2:	e7d9      	b.n	8010778 <__sfp+0x1c>
 80107c4:	2104      	movs	r1, #4
 80107c6:	4638      	mov	r0, r7
 80107c8:	f7ff ff62 	bl	8010690 <__sfmoreglue>
 80107cc:	4604      	mov	r4, r0
 80107ce:	6030      	str	r0, [r6, #0]
 80107d0:	2800      	cmp	r0, #0
 80107d2:	d1d5      	bne.n	8010780 <__sfp+0x24>
 80107d4:	f7ff ff78 	bl	80106c8 <__sfp_lock_release>
 80107d8:	230c      	movs	r3, #12
 80107da:	603b      	str	r3, [r7, #0]
 80107dc:	e7ee      	b.n	80107bc <__sfp+0x60>
 80107de:	bf00      	nop
 80107e0:	080241dc 	.word	0x080241dc
 80107e4:	ffff0001 	.word	0xffff0001

080107e8 <_fwalk_reent>:
 80107e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107ec:	4606      	mov	r6, r0
 80107ee:	4688      	mov	r8, r1
 80107f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80107f4:	2700      	movs	r7, #0
 80107f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80107fa:	f1b9 0901 	subs.w	r9, r9, #1
 80107fe:	d505      	bpl.n	801080c <_fwalk_reent+0x24>
 8010800:	6824      	ldr	r4, [r4, #0]
 8010802:	2c00      	cmp	r4, #0
 8010804:	d1f7      	bne.n	80107f6 <_fwalk_reent+0xe>
 8010806:	4638      	mov	r0, r7
 8010808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801080c:	89ab      	ldrh	r3, [r5, #12]
 801080e:	2b01      	cmp	r3, #1
 8010810:	d907      	bls.n	8010822 <_fwalk_reent+0x3a>
 8010812:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010816:	3301      	adds	r3, #1
 8010818:	d003      	beq.n	8010822 <_fwalk_reent+0x3a>
 801081a:	4629      	mov	r1, r5
 801081c:	4630      	mov	r0, r6
 801081e:	47c0      	blx	r8
 8010820:	4307      	orrs	r7, r0
 8010822:	3568      	adds	r5, #104	; 0x68
 8010824:	e7e9      	b.n	80107fa <_fwalk_reent+0x12>

08010826 <__retarget_lock_init_recursive>:
 8010826:	4770      	bx	lr

08010828 <__retarget_lock_acquire_recursive>:
 8010828:	4770      	bx	lr

0801082a <__retarget_lock_release_recursive>:
 801082a:	4770      	bx	lr

0801082c <__swhatbuf_r>:
 801082c:	b570      	push	{r4, r5, r6, lr}
 801082e:	460e      	mov	r6, r1
 8010830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010834:	2900      	cmp	r1, #0
 8010836:	b096      	sub	sp, #88	; 0x58
 8010838:	4614      	mov	r4, r2
 801083a:	461d      	mov	r5, r3
 801083c:	da07      	bge.n	801084e <__swhatbuf_r+0x22>
 801083e:	2300      	movs	r3, #0
 8010840:	602b      	str	r3, [r5, #0]
 8010842:	89b3      	ldrh	r3, [r6, #12]
 8010844:	061a      	lsls	r2, r3, #24
 8010846:	d410      	bmi.n	801086a <__swhatbuf_r+0x3e>
 8010848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801084c:	e00e      	b.n	801086c <__swhatbuf_r+0x40>
 801084e:	466a      	mov	r2, sp
 8010850:	f000 f946 	bl	8010ae0 <_fstat_r>
 8010854:	2800      	cmp	r0, #0
 8010856:	dbf2      	blt.n	801083e <__swhatbuf_r+0x12>
 8010858:	9a01      	ldr	r2, [sp, #4]
 801085a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801085e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010862:	425a      	negs	r2, r3
 8010864:	415a      	adcs	r2, r3
 8010866:	602a      	str	r2, [r5, #0]
 8010868:	e7ee      	b.n	8010848 <__swhatbuf_r+0x1c>
 801086a:	2340      	movs	r3, #64	; 0x40
 801086c:	2000      	movs	r0, #0
 801086e:	6023      	str	r3, [r4, #0]
 8010870:	b016      	add	sp, #88	; 0x58
 8010872:	bd70      	pop	{r4, r5, r6, pc}

08010874 <__smakebuf_r>:
 8010874:	898b      	ldrh	r3, [r1, #12]
 8010876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010878:	079d      	lsls	r5, r3, #30
 801087a:	4606      	mov	r6, r0
 801087c:	460c      	mov	r4, r1
 801087e:	d507      	bpl.n	8010890 <__smakebuf_r+0x1c>
 8010880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010884:	6023      	str	r3, [r4, #0]
 8010886:	6123      	str	r3, [r4, #16]
 8010888:	2301      	movs	r3, #1
 801088a:	6163      	str	r3, [r4, #20]
 801088c:	b002      	add	sp, #8
 801088e:	bd70      	pop	{r4, r5, r6, pc}
 8010890:	ab01      	add	r3, sp, #4
 8010892:	466a      	mov	r2, sp
 8010894:	f7ff ffca 	bl	801082c <__swhatbuf_r>
 8010898:	9900      	ldr	r1, [sp, #0]
 801089a:	4605      	mov	r5, r0
 801089c:	4630      	mov	r0, r6
 801089e:	f7ff f9fb 	bl	800fc98 <_malloc_r>
 80108a2:	b948      	cbnz	r0, 80108b8 <__smakebuf_r+0x44>
 80108a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108a8:	059a      	lsls	r2, r3, #22
 80108aa:	d4ef      	bmi.n	801088c <__smakebuf_r+0x18>
 80108ac:	f023 0303 	bic.w	r3, r3, #3
 80108b0:	f043 0302 	orr.w	r3, r3, #2
 80108b4:	81a3      	strh	r3, [r4, #12]
 80108b6:	e7e3      	b.n	8010880 <__smakebuf_r+0xc>
 80108b8:	4b0d      	ldr	r3, [pc, #52]	; (80108f0 <__smakebuf_r+0x7c>)
 80108ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80108bc:	89a3      	ldrh	r3, [r4, #12]
 80108be:	6020      	str	r0, [r4, #0]
 80108c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108c4:	81a3      	strh	r3, [r4, #12]
 80108c6:	9b00      	ldr	r3, [sp, #0]
 80108c8:	6163      	str	r3, [r4, #20]
 80108ca:	9b01      	ldr	r3, [sp, #4]
 80108cc:	6120      	str	r0, [r4, #16]
 80108ce:	b15b      	cbz	r3, 80108e8 <__smakebuf_r+0x74>
 80108d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108d4:	4630      	mov	r0, r6
 80108d6:	f000 f915 	bl	8010b04 <_isatty_r>
 80108da:	b128      	cbz	r0, 80108e8 <__smakebuf_r+0x74>
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	f023 0303 	bic.w	r3, r3, #3
 80108e2:	f043 0301 	orr.w	r3, r3, #1
 80108e6:	81a3      	strh	r3, [r4, #12]
 80108e8:	89a0      	ldrh	r0, [r4, #12]
 80108ea:	4305      	orrs	r5, r0
 80108ec:	81a5      	strh	r5, [r4, #12]
 80108ee:	e7cd      	b.n	801088c <__smakebuf_r+0x18>
 80108f0:	08010685 	.word	0x08010685

080108f4 <memmove>:
 80108f4:	4288      	cmp	r0, r1
 80108f6:	b510      	push	{r4, lr}
 80108f8:	eb01 0402 	add.w	r4, r1, r2
 80108fc:	d902      	bls.n	8010904 <memmove+0x10>
 80108fe:	4284      	cmp	r4, r0
 8010900:	4623      	mov	r3, r4
 8010902:	d807      	bhi.n	8010914 <memmove+0x20>
 8010904:	1e43      	subs	r3, r0, #1
 8010906:	42a1      	cmp	r1, r4
 8010908:	d008      	beq.n	801091c <memmove+0x28>
 801090a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801090e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010912:	e7f8      	b.n	8010906 <memmove+0x12>
 8010914:	4402      	add	r2, r0
 8010916:	4601      	mov	r1, r0
 8010918:	428a      	cmp	r2, r1
 801091a:	d100      	bne.n	801091e <memmove+0x2a>
 801091c:	bd10      	pop	{r4, pc}
 801091e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010926:	e7f7      	b.n	8010918 <memmove+0x24>

08010928 <__malloc_lock>:
 8010928:	4801      	ldr	r0, [pc, #4]	; (8010930 <__malloc_lock+0x8>)
 801092a:	f7ff bf7d 	b.w	8010828 <__retarget_lock_acquire_recursive>
 801092e:	bf00      	nop
 8010930:	20000794 	.word	0x20000794

08010934 <__malloc_unlock>:
 8010934:	4801      	ldr	r0, [pc, #4]	; (801093c <__malloc_unlock+0x8>)
 8010936:	f7ff bf78 	b.w	801082a <__retarget_lock_release_recursive>
 801093a:	bf00      	nop
 801093c:	20000794 	.word	0x20000794

08010940 <_realloc_r>:
 8010940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010942:	4607      	mov	r7, r0
 8010944:	4614      	mov	r4, r2
 8010946:	460e      	mov	r6, r1
 8010948:	b921      	cbnz	r1, 8010954 <_realloc_r+0x14>
 801094a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801094e:	4611      	mov	r1, r2
 8010950:	f7ff b9a2 	b.w	800fc98 <_malloc_r>
 8010954:	b922      	cbnz	r2, 8010960 <_realloc_r+0x20>
 8010956:	f7ff f94f 	bl	800fbf8 <_free_r>
 801095a:	4625      	mov	r5, r4
 801095c:	4628      	mov	r0, r5
 801095e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010960:	f000 f8f2 	bl	8010b48 <_malloc_usable_size_r>
 8010964:	42a0      	cmp	r0, r4
 8010966:	d20f      	bcs.n	8010988 <_realloc_r+0x48>
 8010968:	4621      	mov	r1, r4
 801096a:	4638      	mov	r0, r7
 801096c:	f7ff f994 	bl	800fc98 <_malloc_r>
 8010970:	4605      	mov	r5, r0
 8010972:	2800      	cmp	r0, #0
 8010974:	d0f2      	beq.n	801095c <_realloc_r+0x1c>
 8010976:	4631      	mov	r1, r6
 8010978:	4622      	mov	r2, r4
 801097a:	f7fe fc65 	bl	800f248 <memcpy>
 801097e:	4631      	mov	r1, r6
 8010980:	4638      	mov	r0, r7
 8010982:	f7ff f939 	bl	800fbf8 <_free_r>
 8010986:	e7e9      	b.n	801095c <_realloc_r+0x1c>
 8010988:	4635      	mov	r5, r6
 801098a:	e7e7      	b.n	801095c <_realloc_r+0x1c>

0801098c <_raise_r>:
 801098c:	291f      	cmp	r1, #31
 801098e:	b538      	push	{r3, r4, r5, lr}
 8010990:	4604      	mov	r4, r0
 8010992:	460d      	mov	r5, r1
 8010994:	d904      	bls.n	80109a0 <_raise_r+0x14>
 8010996:	2316      	movs	r3, #22
 8010998:	6003      	str	r3, [r0, #0]
 801099a:	f04f 30ff 	mov.w	r0, #4294967295
 801099e:	bd38      	pop	{r3, r4, r5, pc}
 80109a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80109a2:	b112      	cbz	r2, 80109aa <_raise_r+0x1e>
 80109a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80109a8:	b94b      	cbnz	r3, 80109be <_raise_r+0x32>
 80109aa:	4620      	mov	r0, r4
 80109ac:	f000 f830 	bl	8010a10 <_getpid_r>
 80109b0:	462a      	mov	r2, r5
 80109b2:	4601      	mov	r1, r0
 80109b4:	4620      	mov	r0, r4
 80109b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109ba:	f000 b817 	b.w	80109ec <_kill_r>
 80109be:	2b01      	cmp	r3, #1
 80109c0:	d00a      	beq.n	80109d8 <_raise_r+0x4c>
 80109c2:	1c59      	adds	r1, r3, #1
 80109c4:	d103      	bne.n	80109ce <_raise_r+0x42>
 80109c6:	2316      	movs	r3, #22
 80109c8:	6003      	str	r3, [r0, #0]
 80109ca:	2001      	movs	r0, #1
 80109cc:	e7e7      	b.n	801099e <_raise_r+0x12>
 80109ce:	2400      	movs	r4, #0
 80109d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80109d4:	4628      	mov	r0, r5
 80109d6:	4798      	blx	r3
 80109d8:	2000      	movs	r0, #0
 80109da:	e7e0      	b.n	801099e <_raise_r+0x12>

080109dc <raise>:
 80109dc:	4b02      	ldr	r3, [pc, #8]	; (80109e8 <raise+0xc>)
 80109de:	4601      	mov	r1, r0
 80109e0:	6818      	ldr	r0, [r3, #0]
 80109e2:	f7ff bfd3 	b.w	801098c <_raise_r>
 80109e6:	bf00      	nop
 80109e8:	20000040 	.word	0x20000040

080109ec <_kill_r>:
 80109ec:	b538      	push	{r3, r4, r5, lr}
 80109ee:	4d07      	ldr	r5, [pc, #28]	; (8010a0c <_kill_r+0x20>)
 80109f0:	2300      	movs	r3, #0
 80109f2:	4604      	mov	r4, r0
 80109f4:	4608      	mov	r0, r1
 80109f6:	4611      	mov	r1, r2
 80109f8:	602b      	str	r3, [r5, #0]
 80109fa:	f7f4 ff19 	bl	8005830 <_kill>
 80109fe:	1c43      	adds	r3, r0, #1
 8010a00:	d102      	bne.n	8010a08 <_kill_r+0x1c>
 8010a02:	682b      	ldr	r3, [r5, #0]
 8010a04:	b103      	cbz	r3, 8010a08 <_kill_r+0x1c>
 8010a06:	6023      	str	r3, [r4, #0]
 8010a08:	bd38      	pop	{r3, r4, r5, pc}
 8010a0a:	bf00      	nop
 8010a0c:	2000079c 	.word	0x2000079c

08010a10 <_getpid_r>:
 8010a10:	f7f4 bf06 	b.w	8005820 <_getpid>

08010a14 <__sread>:
 8010a14:	b510      	push	{r4, lr}
 8010a16:	460c      	mov	r4, r1
 8010a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a1c:	f000 f89c 	bl	8010b58 <_read_r>
 8010a20:	2800      	cmp	r0, #0
 8010a22:	bfab      	itete	ge
 8010a24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010a26:	89a3      	ldrhlt	r3, [r4, #12]
 8010a28:	181b      	addge	r3, r3, r0
 8010a2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010a2e:	bfac      	ite	ge
 8010a30:	6563      	strge	r3, [r4, #84]	; 0x54
 8010a32:	81a3      	strhlt	r3, [r4, #12]
 8010a34:	bd10      	pop	{r4, pc}

08010a36 <__swrite>:
 8010a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a3a:	461f      	mov	r7, r3
 8010a3c:	898b      	ldrh	r3, [r1, #12]
 8010a3e:	05db      	lsls	r3, r3, #23
 8010a40:	4605      	mov	r5, r0
 8010a42:	460c      	mov	r4, r1
 8010a44:	4616      	mov	r6, r2
 8010a46:	d505      	bpl.n	8010a54 <__swrite+0x1e>
 8010a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a4c:	2302      	movs	r3, #2
 8010a4e:	2200      	movs	r2, #0
 8010a50:	f000 f868 	bl	8010b24 <_lseek_r>
 8010a54:	89a3      	ldrh	r3, [r4, #12]
 8010a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a5e:	81a3      	strh	r3, [r4, #12]
 8010a60:	4632      	mov	r2, r6
 8010a62:	463b      	mov	r3, r7
 8010a64:	4628      	mov	r0, r5
 8010a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a6a:	f000 b817 	b.w	8010a9c <_write_r>

08010a6e <__sseek>:
 8010a6e:	b510      	push	{r4, lr}
 8010a70:	460c      	mov	r4, r1
 8010a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a76:	f000 f855 	bl	8010b24 <_lseek_r>
 8010a7a:	1c43      	adds	r3, r0, #1
 8010a7c:	89a3      	ldrh	r3, [r4, #12]
 8010a7e:	bf15      	itete	ne
 8010a80:	6560      	strne	r0, [r4, #84]	; 0x54
 8010a82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010a86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010a8a:	81a3      	strheq	r3, [r4, #12]
 8010a8c:	bf18      	it	ne
 8010a8e:	81a3      	strhne	r3, [r4, #12]
 8010a90:	bd10      	pop	{r4, pc}

08010a92 <__sclose>:
 8010a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a96:	f000 b813 	b.w	8010ac0 <_close_r>
	...

08010a9c <_write_r>:
 8010a9c:	b538      	push	{r3, r4, r5, lr}
 8010a9e:	4d07      	ldr	r5, [pc, #28]	; (8010abc <_write_r+0x20>)
 8010aa0:	4604      	mov	r4, r0
 8010aa2:	4608      	mov	r0, r1
 8010aa4:	4611      	mov	r1, r2
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	602a      	str	r2, [r5, #0]
 8010aaa:	461a      	mov	r2, r3
 8010aac:	f7f4 fef7 	bl	800589e <_write>
 8010ab0:	1c43      	adds	r3, r0, #1
 8010ab2:	d102      	bne.n	8010aba <_write_r+0x1e>
 8010ab4:	682b      	ldr	r3, [r5, #0]
 8010ab6:	b103      	cbz	r3, 8010aba <_write_r+0x1e>
 8010ab8:	6023      	str	r3, [r4, #0]
 8010aba:	bd38      	pop	{r3, r4, r5, pc}
 8010abc:	2000079c 	.word	0x2000079c

08010ac0 <_close_r>:
 8010ac0:	b538      	push	{r3, r4, r5, lr}
 8010ac2:	4d06      	ldr	r5, [pc, #24]	; (8010adc <_close_r+0x1c>)
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	4604      	mov	r4, r0
 8010ac8:	4608      	mov	r0, r1
 8010aca:	602b      	str	r3, [r5, #0]
 8010acc:	f7f4 ff03 	bl	80058d6 <_close>
 8010ad0:	1c43      	adds	r3, r0, #1
 8010ad2:	d102      	bne.n	8010ada <_close_r+0x1a>
 8010ad4:	682b      	ldr	r3, [r5, #0]
 8010ad6:	b103      	cbz	r3, 8010ada <_close_r+0x1a>
 8010ad8:	6023      	str	r3, [r4, #0]
 8010ada:	bd38      	pop	{r3, r4, r5, pc}
 8010adc:	2000079c 	.word	0x2000079c

08010ae0 <_fstat_r>:
 8010ae0:	b538      	push	{r3, r4, r5, lr}
 8010ae2:	4d07      	ldr	r5, [pc, #28]	; (8010b00 <_fstat_r+0x20>)
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	4604      	mov	r4, r0
 8010ae8:	4608      	mov	r0, r1
 8010aea:	4611      	mov	r1, r2
 8010aec:	602b      	str	r3, [r5, #0]
 8010aee:	f7f4 fefe 	bl	80058ee <_fstat>
 8010af2:	1c43      	adds	r3, r0, #1
 8010af4:	d102      	bne.n	8010afc <_fstat_r+0x1c>
 8010af6:	682b      	ldr	r3, [r5, #0]
 8010af8:	b103      	cbz	r3, 8010afc <_fstat_r+0x1c>
 8010afa:	6023      	str	r3, [r4, #0]
 8010afc:	bd38      	pop	{r3, r4, r5, pc}
 8010afe:	bf00      	nop
 8010b00:	2000079c 	.word	0x2000079c

08010b04 <_isatty_r>:
 8010b04:	b538      	push	{r3, r4, r5, lr}
 8010b06:	4d06      	ldr	r5, [pc, #24]	; (8010b20 <_isatty_r+0x1c>)
 8010b08:	2300      	movs	r3, #0
 8010b0a:	4604      	mov	r4, r0
 8010b0c:	4608      	mov	r0, r1
 8010b0e:	602b      	str	r3, [r5, #0]
 8010b10:	f7f4 fefd 	bl	800590e <_isatty>
 8010b14:	1c43      	adds	r3, r0, #1
 8010b16:	d102      	bne.n	8010b1e <_isatty_r+0x1a>
 8010b18:	682b      	ldr	r3, [r5, #0]
 8010b1a:	b103      	cbz	r3, 8010b1e <_isatty_r+0x1a>
 8010b1c:	6023      	str	r3, [r4, #0]
 8010b1e:	bd38      	pop	{r3, r4, r5, pc}
 8010b20:	2000079c 	.word	0x2000079c

08010b24 <_lseek_r>:
 8010b24:	b538      	push	{r3, r4, r5, lr}
 8010b26:	4d07      	ldr	r5, [pc, #28]	; (8010b44 <_lseek_r+0x20>)
 8010b28:	4604      	mov	r4, r0
 8010b2a:	4608      	mov	r0, r1
 8010b2c:	4611      	mov	r1, r2
 8010b2e:	2200      	movs	r2, #0
 8010b30:	602a      	str	r2, [r5, #0]
 8010b32:	461a      	mov	r2, r3
 8010b34:	f7f4 fef6 	bl	8005924 <_lseek>
 8010b38:	1c43      	adds	r3, r0, #1
 8010b3a:	d102      	bne.n	8010b42 <_lseek_r+0x1e>
 8010b3c:	682b      	ldr	r3, [r5, #0]
 8010b3e:	b103      	cbz	r3, 8010b42 <_lseek_r+0x1e>
 8010b40:	6023      	str	r3, [r4, #0]
 8010b42:	bd38      	pop	{r3, r4, r5, pc}
 8010b44:	2000079c 	.word	0x2000079c

08010b48 <_malloc_usable_size_r>:
 8010b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b4c:	1f18      	subs	r0, r3, #4
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	bfbc      	itt	lt
 8010b52:	580b      	ldrlt	r3, [r1, r0]
 8010b54:	18c0      	addlt	r0, r0, r3
 8010b56:	4770      	bx	lr

08010b58 <_read_r>:
 8010b58:	b538      	push	{r3, r4, r5, lr}
 8010b5a:	4d07      	ldr	r5, [pc, #28]	; (8010b78 <_read_r+0x20>)
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	4608      	mov	r0, r1
 8010b60:	4611      	mov	r1, r2
 8010b62:	2200      	movs	r2, #0
 8010b64:	602a      	str	r2, [r5, #0]
 8010b66:	461a      	mov	r2, r3
 8010b68:	f7f4 fe7c 	bl	8005864 <_read>
 8010b6c:	1c43      	adds	r3, r0, #1
 8010b6e:	d102      	bne.n	8010b76 <_read_r+0x1e>
 8010b70:	682b      	ldr	r3, [r5, #0]
 8010b72:	b103      	cbz	r3, 8010b76 <_read_r+0x1e>
 8010b74:	6023      	str	r3, [r4, #0]
 8010b76:	bd38      	pop	{r3, r4, r5, pc}
 8010b78:	2000079c 	.word	0x2000079c

08010b7c <_init>:
 8010b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b7e:	bf00      	nop
 8010b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b82:	bc08      	pop	{r3}
 8010b84:	469e      	mov	lr, r3
 8010b86:	4770      	bx	lr

08010b88 <_fini>:
 8010b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b8a:	bf00      	nop
 8010b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b8e:	bc08      	pop	{r3}
 8010b90:	469e      	mov	lr, r3
 8010b92:	4770      	bx	lr
