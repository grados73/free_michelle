
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013b80  08010aa0  08010aa0  00020aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024620  08024620  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08024620  08024620  00034620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024628  08024628  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024628  08024628  00034628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802462c  0802462c  0003462c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08024630  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000214  08024844  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  08024844  00040728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000216df  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004880  00000000  00000000  00061923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  000661a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00006ef6  00000000  00000000  00067998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023702  00000000  00000000  0006e88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00096dda  00000000  00000000  00091f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00128d6a  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001658  00000000  00000000  00128dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077d4  00000000  00000000  0012a418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010a84 	.word	0x08010a84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	08010a84 	.word	0x08010a84

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000027c 	.word	0x2000027c

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	2000027c 	.word	0x2000027c

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	2000027c 	.word	0x2000027c

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	2000027c 	.word	0x2000027c

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	2000027c 	.word	0x2000027c

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000027c 	.word	0x2000027c

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f004 f9f4 	bl	800601c <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	20000280 	.word	0x20000280

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f005 f925 	bl	8006efc <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f005 f91f 	bl	8006efc <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f005 f914 	bl	8006efc <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f005 f901 	bl	8006efc <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f005 f8fb 	bl	8006efc <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f005 f8ef 	bl	8006efc <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f005 f8e5 	bl	8006efc <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f004 ffea 	bl	8006efc <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f004 ffe4 	bl	8006efc <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f004 ffad 	bl	8006efc <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	20000280 	.word	0x20000280

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f004 ff8d 	bl	8006efc <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f004 ff84 	bl	8006efc <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000280 	.word	0x20000280
 8002054:	080139fc 	.word	0x080139fc
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f004 ff47 	bl	8006efc <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f008 f8c0 	bl	800a202 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f004 ff37 	bl	8006efc <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000284 	.word	0x20000284
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002ad 	.word	0x200002ad

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f003 fe94 	bl	8006004 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f004 fdcb 	bl	8006ecc <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f003 fe5f 	bl	8006004 <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f003 fe59 	bl	8006004 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f004 fd8d 	bl	8006ecc <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f003 fe21 	bl	8006004 <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 ffce 	bl	8006388 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 ffb9 	bl	800636a <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f003 ff88 	bl	800631a <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002ad 	.word	0x200002ad
 8002420:	200002b0 	.word	0x200002b0
 8002424:	200002ac 	.word	0x200002ac
 8002428:	20000284 	.word	0x20000284
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f003 ff78 	bl	8006336 <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002ad 	.word	0x200002ad

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f004 fd3f 	bl	8006efc <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f003 fdc1 	bl	800601c <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002ad 	.word	0x200002ad
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <MX_DMA_Init+0x4c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a0f      	ldr	r2, [pc, #60]	; (8002540 <MX_DMA_Init+0x4c>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <MX_DMA_Init+0x4c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2010      	movs	r0, #16
 800251c:	f003 fee1 	bl	80062e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002520:	2010      	movs	r0, #16
 8002522:	f003 fefa 	bl	800631a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	2011      	movs	r0, #17
 800252c:	f003 fed9 	bl	80062e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002530:	2011      	movs	r0, #17
 8002532:	f003 fef2 	bl	800631a <HAL_NVIC_EnableIRQ>

}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800

08002544 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 800254c:	4a09      	ldr	r2, [pc, #36]	; (8002574 <DS3231_Init+0x30>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002552:	2000      	movs	r0, #0
 8002554:	f000 f917 	bl	8002786 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002558:	2000      	movs	r0, #0
 800255a:	f000 f88e 	bl	800267a <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800255e:	f000 f934 	bl	80027ca <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002562:	f000 f8ad 	bl	80026c0 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002566:	2001      	movs	r0, #1
 8002568:	f000 f846 	bl	80025f8 <DS3231_SetInterruptMode>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200002b4 	.word	0x200002b4

08002578 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af02      	add	r7, sp, #8
 800257e:	4603      	mov	r3, r0
 8002580:	460a      	mov	r2, r1
 8002582:	71fb      	strb	r3, [r7, #7]
 8002584:	4613      	mov	r3, r2
 8002586:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	733b      	strb	r3, [r7, #12]
 800258c:	79bb      	ldrb	r3, [r7, #6]
 800258e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <DS3231_SetRegByte+0x38>)
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	f107 020c 	add.w	r2, r7, #12
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2302      	movs	r3, #2
 80025a0:	21d0      	movs	r1, #208	; 0xd0
 80025a2:	f004 fe3b 	bl	800721c <HAL_I2C_Master_Transmit>
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200002b4 	.word	0x200002b4

080025b4 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <DS3231_GetRegByte+0x40>)
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	1dfa      	adds	r2, r7, #7
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2301      	movs	r3, #1
 80025cc:	21d0      	movs	r1, #208	; 0xd0
 80025ce:	f004 fe25 	bl	800721c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <DS3231_GetRegByte+0x40>)
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	f107 020f 	add.w	r2, r7, #15
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2301      	movs	r3, #1
 80025e2:	21d0      	movs	r1, #208	; 0xd0
 80025e4:	f004 ff18 	bl	8007418 <HAL_I2C_Master_Receive>
	return val;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200002b4 	.word	0x200002b4

080025f8 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002602:	200e      	movs	r0, #14
 8002604:	f7ff ffd6 	bl	80025b4 <DS3231_GetRegByte>
 8002608:	4603      	mov	r3, r0
 800260a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800260c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002610:	f023 0304 	bic.w	r3, r3, #4
 8002614:	b25a      	sxtb	r2, r3
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	b25b      	sxtb	r3, r3
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	b25b      	sxtb	r3, r3
 8002622:	4313      	orrs	r3, r2
 8002624:	b25b      	sxtb	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	4619      	mov	r1, r3
 800262a:	200e      	movs	r0, #14
 800262c:	f7ff ffa4 	bl	8002578 <DS3231_SetRegByte>
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002642:	200e      	movs	r0, #14
 8002644:	f7ff ffb6 	bl	80025b4 <DS3231_GetRegByte>
 8002648:	4603      	mov	r3, r0
 800264a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 800264c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002654:	b25b      	sxtb	r3, r3
 8002656:	79fa      	ldrb	r2, [r7, #7]
 8002658:	2a00      	cmp	r2, #0
 800265a:	d102      	bne.n	8002662 <DS3231_EnableOscillator+0x2a>
 800265c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002660:	e000      	b.n	8002664 <DS3231_EnableOscillator+0x2c>
 8002662:	2200      	movs	r2, #0
 8002664:	4313      	orrs	r3, r2
 8002666:	b25b      	sxtb	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4619      	mov	r1, r3
 800266c:	200e      	movs	r0, #14
 800266e:	f7ff ff83 	bl	8002578 <DS3231_SetRegByte>
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002684:	200e      	movs	r0, #14
 8002686:	f7ff ff95 	bl	80025b4 <DS3231_GetRegByte>
 800268a:	4603      	mov	r3, r0
 800268c:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 800268e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002692:	f023 0302 	bic.w	r3, r3, #2
 8002696:	b25a      	sxtb	r2, r3
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	b25b      	sxtb	r3, r3
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	b25b      	sxtb	r3, r3
 80026a4:	4313      	orrs	r3, r2
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4619      	mov	r1, r3
 80026ac:	200e      	movs	r0, #14
 80026ae:	f7ff ff63 	bl	8002578 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f7ff ffa0 	bl	80025f8 <DS3231_SetInterruptMode>
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80026c6:	200f      	movs	r0, #15
 80026c8:	f7ff ff74 	bl	80025b4 <DS3231_GetRegByte>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f023 0302 	bic.w	r3, r3, #2
 80026d2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f023 0302 	bic.w	r3, r3, #2
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4619      	mov	r1, r3
 80026de:	200f      	movs	r0, #15
 80026e0:	f7ff ff4a 	bl	8002578 <DS3231_SetRegByte>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <DS3231_SetAlarm2Mode>:

/**
 * @brief Set alarm 2 mode.
 * @param alarmMode Alarm 2 mode, DS3231_A2_EVERY_M, DS3231_A2_MATCH_M, DS3231_A2_MATCH_M_H, DS3231_A2_MATCH_M_H_DATE or DS3231_A2_MATCH_M_H_DAY.
 */
void DS3231_SetAlarm2Mode(DS3231_Alarm2Mode alarmMode){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	temp = DS3231_GetRegByte(DS3231_A1_MINUTE) & 0x7f;
 80026f6:	2008      	movs	r0, #8
 80026f8:	f7ff ff5c 	bl	80025b4 <DS3231_GetRegByte>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002702:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A2_MINUTE, temp | (((alarmMode >> 0) & 0x01) << DS3231_AXMY));
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	01db      	lsls	r3, r3, #7
 8002708:	b25a      	sxtb	r2, r3
 800270a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270e:	4313      	orrs	r3, r2
 8002710:	b25b      	sxtb	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	4619      	mov	r1, r3
 8002716:	200b      	movs	r0, #11
 8002718:	f7ff ff2e 	bl	8002578 <DS3231_SetRegByte>
	temp = DS3231_GetRegByte(DS3231_A1_HOUR) & 0x7f;
 800271c:	2009      	movs	r0, #9
 800271e:	f7ff ff49 	bl	80025b4 <DS3231_GetRegByte>
 8002722:	4603      	mov	r3, r0
 8002724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002728:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A2_HOUR, temp | (((alarmMode >> 1) & 0x01) << DS3231_AXMY));
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	01db      	lsls	r3, r3, #7
 8002732:	b25a      	sxtb	r2, r3
 8002734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002738:	4313      	orrs	r3, r2
 800273a:	b25b      	sxtb	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	4619      	mov	r1, r3
 8002740:	200c      	movs	r0, #12
 8002742:	f7ff ff19 	bl	8002578 <DS3231_SetRegByte>
	temp = DS3231_GetRegByte(DS3231_A1_DATE) & 0x7f;
 8002746:	200a      	movs	r0, #10
 8002748:	f7ff ff34 	bl	80025b4 <DS3231_GetRegByte>
 800274c:	4603      	mov	r3, r0
 800274e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002752:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A2_DATE, temp | (((alarmMode >> 2) & 0x01) << DS3231_AXMY) | (alarmMode & 0x80));
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	b2db      	uxtb	r3, r3
 800275a:	01db      	lsls	r3, r3, #7
 800275c:	b25a      	sxtb	r2, r3
 800275e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002762:	4313      	orrs	r3, r2
 8002764:	b25a      	sxtb	r2, r3
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800276e:	b25b      	sxtb	r3, r3
 8002770:	4313      	orrs	r3, r2
 8002772:	b25b      	sxtb	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4619      	mov	r1, r3
 8002778:	200d      	movs	r0, #13
 800277a:	f7ff fefd 	bl	8002578 <DS3231_SetRegByte>
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002790:	200e      	movs	r0, #14
 8002792:	f7ff ff0f 	bl	80025b4 <DS3231_GetRegByte>
 8002796:	4603      	mov	r3, r0
 8002798:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 800279a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	b25a      	sxtb	r2, r3
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	b25b      	sxtb	r3, r3
 80027ae:	4313      	orrs	r3, r2
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4619      	mov	r1, r3
 80027b6:	200e      	movs	r0, #14
 80027b8:	f7ff fede 	bl	8002578 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80027bc:	2001      	movs	r0, #1
 80027be:	f7ff ff1b 	bl	80025f8 <DS3231_SetInterruptMode>
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 80027d0:	200f      	movs	r0, #15
 80027d2:	f7ff feef 	bl	80025b4 <DS3231_GetRegByte>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	4619      	mov	r1, r3
 80027e8:	200f      	movs	r0, #15
 80027ea:	f7ff fec5 	bl	8002578 <DS3231_SetRegByte>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 80027f6:	b580      	push	{r7, lr}
 80027f8:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 80027fa:	2002      	movs	r0, #2
 80027fc:	f7ff feda 	bl	80025b4 <DS3231_GetRegByte>
 8002800:	4603      	mov	r3, r0
 8002802:	4618      	mov	r0, r3
 8002804:	f000 f848 	bl	8002898 <DS3231_DecodeBCD>
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	bd80      	pop	{r7, pc}

0800280e <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 800280e:	b580      	push	{r7, lr}
 8002810:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002812:	2001      	movs	r0, #1
 8002814:	f7ff fece 	bl	80025b4 <DS3231_GetRegByte>
 8002818:	4603      	mov	r3, r0
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f83c 	bl	8002898 <DS3231_DecodeBCD>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	bd80      	pop	{r7, pc}

08002826 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002836:	b2db      	uxtb	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	f000 f847 	bl	80028cc <DS3231_EncodeBCD>
 800283e:	4603      	mov	r3, r0
 8002840:	4619      	mov	r1, r3
 8002842:	2002      	movs	r0, #2
 8002844:	f7ff fe98 	bl	8002578 <DS3231_SetRegByte>
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	4618      	mov	r0, r3
 800285e:	f000 f835 	bl	80028cc <DS3231_EncodeBCD>
 8002862:	4603      	mov	r3, r0
 8002864:	4619      	mov	r1, r3
 8002866:	2001      	movs	r0, #1
 8002868:	f7ff fe86 	bl	8002578 <DS3231_SetRegByte>
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	4618      	mov	r0, r3
 8002882:	f000 f823 	bl	80028cc <DS3231_EncodeBCD>
 8002886:	4603      	mov	r3, r0
 8002888:	4619      	mov	r1, r3
 800288a:	2000      	movs	r0, #0
 800288c:	f7ff fe74 	bl	8002578 <DS3231_SetRegByte>
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	0092      	lsls	r2, r2, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	b2db      	uxtb	r3, r3
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 80028d6:	79fa      	ldrb	r2, [r7, #7]
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <DS3231_EncodeBCD+0x40>)
 80028da:	fba3 1302 	umull	r1, r3, r3, r2
 80028de:	08d9      	lsrs	r1, r3, #3
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	4907      	ldr	r1, [pc, #28]	; (800290c <DS3231_EncodeBCD+0x40>)
 80028f0:	fba1 1303 	umull	r1, r3, r1, r3
 80028f4:	08db      	lsrs	r3, r3, #3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	b2db      	uxtb	r3, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	cccccccd 	.word	0xcccccccd

08002910 <system_init>:

uint8_t OldHours = 0;
uint8_t OldMinutes = 0;


uint8_t system_init(){
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002916:	f24c 6018 	movw	r0, #50712	; 0xc618
 800291a:	f7ff faed 	bl	8001ef8 <ILI9341_ClearDisplay>
	  ILI9341_DrawImage(40, 50, logo, 240, 140);
 800291e:	238c      	movs	r3, #140	; 0x8c
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	23f0      	movs	r3, #240	; 0xf0
 8002924:	4a70      	ldr	r2, [pc, #448]	; (8002ae8 <system_init+0x1d8>)
 8002926:	2132      	movs	r1, #50	; 0x32
 8002928:	2028      	movs	r0, #40	; 0x28
 800292a:	f7ff faba 	bl	8001ea2 <ILI9341_DrawImage>
//	  GFX_Image(40, 50, logo, 240, 140); //usunieta wolniejsza wersja rysowania

	  HAL_Delay(200); // !!!! TODO
 800292e:	20c8      	movs	r0, #200	; 0xc8
 8002930:	f003 fb74 	bl	800601c <HAL_Delay>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002934:	486d      	ldr	r0, [pc, #436]	; (8002aec <system_init+0x1dc>)
 8002936:	f7fe fedb 	bl	80016f0 <EF_SetFont>
	  uint8_t Len = sprintf((char*)Msg, "Inicjalizacja...");
 800293a:	496d      	ldr	r1, [pc, #436]	; (8002af0 <system_init+0x1e0>)
 800293c:	486d      	ldr	r0, [pc, #436]	; (8002af4 <system_init+0x1e4>)
 800293e:	f00a fa8b 	bl	800ce58 <siprintf>
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, 60, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 8002946:	2300      	movs	r3, #0
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	2300      	movs	r3, #0
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2300      	movs	r3, #0
 8002950:	2214      	movs	r2, #20
 8002952:	213c      	movs	r1, #60	; 0x3c
 8002954:	4867      	ldr	r0, [pc, #412]	; (8002af4 <system_init+0x1e4>)
 8002956:	f7ff f8e5 	bl	8001b24 <EF_PutString>
	  Len++;
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	3301      	adds	r3, #1
 800295e:	71fb      	strb	r3, [r7, #7]
	  GFX_DrawRoundRectangle(60, 200, 20, 20, 5, ILI9341_RED);
 8002960:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	2305      	movs	r3, #5
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2314      	movs	r3, #20
 800296c:	2214      	movs	r2, #20
 800296e:	21c8      	movs	r1, #200	; 0xc8
 8002970:	203c      	movs	r0, #60	; 0x3c
 8002972:	f7fe fdef 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 200, 20, 20, 5, ILI9341_RED);
 8002976:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	2305      	movs	r3, #5
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2314      	movs	r3, #20
 8002982:	2214      	movs	r2, #20
 8002984:	21c8      	movs	r1, #200	; 0xc8
 8002986:	205a      	movs	r0, #90	; 0x5a
 8002988:	f7fe fde4 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 200, 20, 20, 5, ILI9341_RED);
 800298c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	2305      	movs	r3, #5
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2314      	movs	r3, #20
 8002998:	2214      	movs	r2, #20
 800299a:	21c8      	movs	r1, #200	; 0xc8
 800299c:	2078      	movs	r0, #120	; 0x78
 800299e:	f7fe fdd9 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 200, 20, 20, 5, ILI9341_RED);
 80029a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	2305      	movs	r3, #5
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2314      	movs	r3, #20
 80029ae:	2214      	movs	r2, #20
 80029b0:	21c8      	movs	r1, #200	; 0xc8
 80029b2:	2096      	movs	r0, #150	; 0x96
 80029b4:	f7fe fdce 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 200, 20, 20, 5, ILI9341_RED);
 80029b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	2305      	movs	r3, #5
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2314      	movs	r3, #20
 80029c4:	2214      	movs	r2, #20
 80029c6:	21c8      	movs	r1, #200	; 0xc8
 80029c8:	20b4      	movs	r0, #180	; 0xb4
 80029ca:	f7fe fdc3 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 200, 20, 20, 5, ILI9341_RED);
 80029ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	2305      	movs	r3, #5
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2314      	movs	r3, #20
 80029da:	2214      	movs	r2, #20
 80029dc:	21c8      	movs	r1, #200	; 0xc8
 80029de:	20d2      	movs	r0, #210	; 0xd2
 80029e0:	f7fe fdb8 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 200, 20, 20, 5, ILI9341_RED);
 80029e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	2305      	movs	r3, #5
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	2314      	movs	r3, #20
 80029f0:	2214      	movs	r2, #20
 80029f2:	21c8      	movs	r1, #200	; 0xc8
 80029f4:	20f0      	movs	r0, #240	; 0xf0
 80029f6:	f7fe fdad 	bl	8001554 <GFX_DrawRoundRectangle>

	  	  HAL_Delay(100); // !!!! TODO
 80029fa:	2064      	movs	r0, #100	; 0x64
 80029fc:	f003 fb0e 	bl	800601c <HAL_Delay>
	  GFX_DrawFillRoundRectangle(60, 200, 20, 20, 5, ILI9341_GREEN);
 8002a00:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	2305      	movs	r3, #5
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2314      	movs	r3, #20
 8002a0c:	2214      	movs	r2, #20
 8002a0e:	21c8      	movs	r1, #200	; 0xc8
 8002a10:	203c      	movs	r0, #60	; 0x3c
 8002a12:	f7fe fe1c 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_1);
 8002a16:	2003      	movs	r0, #3
 8002a18:	f002 fba4 	bl	8005164 <SendComand>
	  	  SendComand(UCMD_PRES_1);
 8002a1c:	2004      	movs	r0, #4
 8002a1e:	f002 fba1 	bl	8005164 <SendComand>
	  	  HAL_Delay(100); // !!!! TODO
 8002a22:	2064      	movs	r0, #100	; 0x64
 8002a24:	f003 fafa 	bl	800601c <HAL_Delay>
	  GFX_DrawFillRoundRectangle(90, 200, 20, 20, 5, ILI9341_GREEN);
 8002a28:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a2c:	9301      	str	r3, [sp, #4]
 8002a2e:	2305      	movs	r3, #5
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2314      	movs	r3, #20
 8002a34:	2214      	movs	r2, #20
 8002a36:	21c8      	movs	r1, #200	; 0xc8
 8002a38:	205a      	movs	r0, #90	; 0x5a
 8002a3a:	f7fe fe08 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(100); // !!!! TODO
 8002a3e:	2064      	movs	r0, #100	; 0x64
 8002a40:	f003 faec 	bl	800601c <HAL_Delay>
	  GFX_DrawFillRoundRectangle(120, 200, 20, 20, 5, ILI9341_GREEN);
 8002a44:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	2305      	movs	r3, #5
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2314      	movs	r3, #20
 8002a50:	2214      	movs	r2, #20
 8002a52:	21c8      	movs	r1, #200	; 0xc8
 8002a54:	2078      	movs	r0, #120	; 0x78
 8002a56:	f7fe fdfa 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8002a5a:	2015      	movs	r0, #21
 8002a5c:	f002 fb82 	bl	8005164 <SendComand>
	  	  HAL_Delay(100); // !!!! TODO
 8002a60:	2064      	movs	r0, #100	; 0x64
 8002a62:	f003 fadb 	bl	800601c <HAL_Delay>
	  GFX_DrawFillRoundRectangle(150, 200, 20, 20, 5, ILI9341_GREEN);
 8002a66:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2305      	movs	r3, #5
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2314      	movs	r3, #20
 8002a72:	2214      	movs	r2, #20
 8002a74:	21c8      	movs	r1, #200	; 0xc8
 8002a76:	2096      	movs	r0, #150	; 0x96
 8002a78:	f7fe fde9 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(100); // !!!! TODO
 8002a7c:	2064      	movs	r0, #100	; 0x64
 8002a7e:	f003 facd 	bl	800601c <HAL_Delay>
	  GFX_DrawFillRoundRectangle(180, 200, 20, 20, 5, ILI9341_GREEN);
 8002a82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	2305      	movs	r3, #5
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	2314      	movs	r3, #20
 8002a8e:	2214      	movs	r2, #20
 8002a90:	21c8      	movs	r1, #200	; 0xc8
 8002a92:	20b4      	movs	r0, #180	; 0xb4
 8002a94:	f7fe fddb 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8002a98:	2016      	movs	r0, #22
 8002a9a:	f002 fb63 	bl	8005164 <SendComand>
	  	  HAL_Delay(100); // !!!! TODO
 8002a9e:	2064      	movs	r0, #100	; 0x64
 8002aa0:	f003 fabc 	bl	800601c <HAL_Delay>
	  GFX_DrawFillRoundRectangle(210, 200, 20, 20, 5, ILI9341_GREEN);
 8002aa4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	2305      	movs	r3, #5
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	2314      	movs	r3, #20
 8002ab0:	2214      	movs	r2, #20
 8002ab2:	21c8      	movs	r1, #200	; 0xc8
 8002ab4:	20d2      	movs	r0, #210	; 0xd2
 8002ab6:	f7fe fdca 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(100); // !!!! TODO
 8002aba:	2064      	movs	r0, #100	; 0x64
 8002abc:	f003 faae 	bl	800601c <HAL_Delay>
	  GFX_DrawFillRoundRectangle(240, 200, 20, 20, 5, ILI9341_GREEN);
 8002ac0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	2305      	movs	r3, #5
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2314      	movs	r3, #20
 8002acc:	2214      	movs	r2, #20
 8002ace:	21c8      	movs	r1, #200	; 0xc8
 8002ad0:	20f0      	movs	r0, #240	; 0xf0
 8002ad2:	f7fe fdbc 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(200); // !!!! TODO
 8002ad6:	20c8      	movs	r0, #200	; 0xc8
 8002ad8:	f003 faa0 	bl	800601c <HAL_Delay>

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8002adc:	2301      	movs	r3, #1
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	08013a6c 	.word	0x08013a6c
 8002aec:	080139f0 	.word	0x080139f0
 8002af0:	08010aa0 	.word	0x08010aa0
 8002af4:	200002b8 	.word	0x200002b8

08002af8 <showCurrentParameters>:

void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	ed87 0a05 	vstr	s0, [r7, #20]
 8002b02:	edc7 0a04 	vstr	s1, [r7, #16]
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	ed87 1a01 	vstr	s2, [r7, #4]
 8002b0e:	72fb      	strb	r3, [r7, #11]
		// TODO dodac kreske pod naglowkiem
	  SendComand(UCMD_TEMP_1);
 8002b10:	2003      	movs	r0, #3
 8002b12:	f002 fb27 	bl	8005164 <SendComand>
	  SendComand(UCMD_PRES_1);
 8002b16:	2004      	movs	r0, #4
 8002b18:	f002 fb24 	bl	8005164 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8002b1c:	f7ff fe6b 	bl	80027f6 <DS3231_GetHour>
 8002b20:	4603      	mov	r3, r0
 8002b22:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8002b24:	f7ff fe73 	bl	800280e <DS3231_GetMinute>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	77bb      	strb	r3, [r7, #30]

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002b2c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002b30:	f7ff f9e2 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002b34:	4893      	ldr	r0, [pc, #588]	; (8002d84 <showCurrentParameters+0x28c>)
 8002b36:	f7fe fddb 	bl	80016f0 <EF_SetFont>

	  uint8_t Len = sprintf((char*)Msg, "-=PARAMETRY=-");
 8002b3a:	4993      	ldr	r1, [pc, #588]	; (8002d88 <showCurrentParameters+0x290>)
 8002b3c:	4893      	ldr	r0, [pc, #588]	; (8002d8c <showCurrentParameters+0x294>)
 8002b3e:	f00a f98b 	bl	800ce58 <siprintf>
 8002b42:	4603      	mov	r3, r0
 8002b44:	777b      	strb	r3, [r7, #29]
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002b46:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002b54:	220a      	movs	r2, #10
 8002b56:	212f      	movs	r1, #47	; 0x2f
 8002b58:	488c      	ldr	r0, [pc, #560]	; (8002d8c <showCurrentParameters+0x294>)
 8002b5a:	f7fe ffe3 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002b5e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2329      	movs	r3, #41	; 0x29
 8002b66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b6a:	2129      	movs	r1, #41	; 0x29
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fe fb0f 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002b72:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	232b      	movs	r3, #43	; 0x2b
 8002b7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b7e:	212b      	movs	r1, #43	; 0x2b
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7fe fb05 	bl	8001190 <GFX_DrawLine>

	  if ((CHour<10)&&(CMinute<10)) Len = sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8002b86:	7ffb      	ldrb	r3, [r7, #31]
 8002b88:	2b09      	cmp	r3, #9
 8002b8a:	d80b      	bhi.n	8002ba4 <showCurrentParameters+0xac>
 8002b8c:	7fbb      	ldrb	r3, [r7, #30]
 8002b8e:	2b09      	cmp	r3, #9
 8002b90:	d808      	bhi.n	8002ba4 <showCurrentParameters+0xac>
 8002b92:	7ffa      	ldrb	r2, [r7, #31]
 8002b94:	7fbb      	ldrb	r3, [r7, #30]
 8002b96:	497e      	ldr	r1, [pc, #504]	; (8002d90 <showCurrentParameters+0x298>)
 8002b98:	487c      	ldr	r0, [pc, #496]	; (8002d8c <showCurrentParameters+0x294>)
 8002b9a:	f00a f95d 	bl	800ce58 <siprintf>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	777b      	strb	r3, [r7, #29]
 8002ba2:	e01f      	b.n	8002be4 <showCurrentParameters+0xec>
	  else if(CHour<10)	Len = sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 8002ba4:	7ffb      	ldrb	r3, [r7, #31]
 8002ba6:	2b09      	cmp	r3, #9
 8002ba8:	d808      	bhi.n	8002bbc <showCurrentParameters+0xc4>
 8002baa:	7ffa      	ldrb	r2, [r7, #31]
 8002bac:	7fbb      	ldrb	r3, [r7, #30]
 8002bae:	4979      	ldr	r1, [pc, #484]	; (8002d94 <showCurrentParameters+0x29c>)
 8002bb0:	4876      	ldr	r0, [pc, #472]	; (8002d8c <showCurrentParameters+0x294>)
 8002bb2:	f00a f951 	bl	800ce58 <siprintf>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	777b      	strb	r3, [r7, #29]
 8002bba:	e013      	b.n	8002be4 <showCurrentParameters+0xec>
	  else if(CMinute<10) Len = sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 8002bbc:	7fbb      	ldrb	r3, [r7, #30]
 8002bbe:	2b09      	cmp	r3, #9
 8002bc0:	d808      	bhi.n	8002bd4 <showCurrentParameters+0xdc>
 8002bc2:	7ffa      	ldrb	r2, [r7, #31]
 8002bc4:	7fbb      	ldrb	r3, [r7, #30]
 8002bc6:	4974      	ldr	r1, [pc, #464]	; (8002d98 <showCurrentParameters+0x2a0>)
 8002bc8:	4870      	ldr	r0, [pc, #448]	; (8002d8c <showCurrentParameters+0x294>)
 8002bca:	f00a f945 	bl	800ce58 <siprintf>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	777b      	strb	r3, [r7, #29]
 8002bd2:	e007      	b.n	8002be4 <showCurrentParameters+0xec>
	  else Len = sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 8002bd4:	7ffa      	ldrb	r2, [r7, #31]
 8002bd6:	7fbb      	ldrb	r3, [r7, #30]
 8002bd8:	4970      	ldr	r1, [pc, #448]	; (8002d9c <showCurrentParameters+0x2a4>)
 8002bda:	486c      	ldr	r0, [pc, #432]	; (8002d8c <showCurrentParameters+0x294>)
 8002bdc:	f00a f93c 	bl	800ce58 <siprintf>
 8002be0:	4603      	mov	r3, r0
 8002be2:	777b      	strb	r3, [r7, #29]
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002be4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	2300      	movs	r3, #0
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2232      	movs	r2, #50	; 0x32
 8002bf2:	2114      	movs	r1, #20
 8002bf4:	4865      	ldr	r0, [pc, #404]	; (8002d8c <showCurrentParameters+0x294>)
 8002bf6:	f7fe ff95 	bl	8001b24 <EF_PutString>
	  Len = sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 8002bfa:	7ffa      	ldrb	r2, [r7, #31]
 8002bfc:	7fbb      	ldrb	r3, [r7, #30]
 8002bfe:	4966      	ldr	r1, [pc, #408]	; (8002d98 <showCurrentParameters+0x2a0>)
 8002c00:	4862      	ldr	r0, [pc, #392]	; (8002d8c <showCurrentParameters+0x294>)
 8002c02:	f00a f929 	bl	800ce58 <siprintf>
 8002c06:	4603      	mov	r3, r0
 8002c08:	777b      	strb	r3, [r7, #29]
	  Len = sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 8002c0a:	4b65      	ldr	r3, [pc, #404]	; (8002da0 <showCurrentParameters+0x2a8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd fcb2 	bl	8000578 <__aeabi_f2d>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4962      	ldr	r1, [pc, #392]	; (8002da4 <showCurrentParameters+0x2ac>)
 8002c1a:	485c      	ldr	r0, [pc, #368]	; (8002d8c <showCurrentParameters+0x294>)
 8002c1c:	f00a f91c 	bl	800ce58 <siprintf>
 8002c20:	4603      	mov	r3, r0
 8002c22:	777b      	strb	r3, [r7, #29]
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002c24:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2250      	movs	r2, #80	; 0x50
 8002c32:	2114      	movs	r1, #20
 8002c34:	4855      	ldr	r0, [pc, #340]	; (8002d8c <showCurrentParameters+0x294>)
 8002c36:	f7fe ff75 	bl	8001b24 <EF_PutString>

	  Len = sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8002c3a:	4b5b      	ldr	r3, [pc, #364]	; (8002da8 <showCurrentParameters+0x2b0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fc9a 	bl	8000578 <__aeabi_f2d>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4958      	ldr	r1, [pc, #352]	; (8002dac <showCurrentParameters+0x2b4>)
 8002c4a:	4850      	ldr	r0, [pc, #320]	; (8002d8c <showCurrentParameters+0x294>)
 8002c4c:	f00a f904 	bl	800ce58 <siprintf>
 8002c50:	4603      	mov	r3, r0
 8002c52:	777b      	strb	r3, [r7, #29]
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002c54:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	226e      	movs	r2, #110	; 0x6e
 8002c62:	2114      	movs	r1, #20
 8002c64:	4849      	ldr	r0, [pc, #292]	; (8002d8c <showCurrentParameters+0x294>)
 8002c66:	f7fe ff5d 	bl	8001b24 <EF_PutString>

	  Len = sprintf((char*)Msg, "Poz. wody: %d", CWaterLvl);
 8002c6a:	4b51      	ldr	r3, [pc, #324]	; (8002db0 <showCurrentParameters+0x2b8>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4950      	ldr	r1, [pc, #320]	; (8002db4 <showCurrentParameters+0x2bc>)
 8002c72:	4846      	ldr	r0, [pc, #280]	; (8002d8c <showCurrentParameters+0x294>)
 8002c74:	f00a f8f0 	bl	800ce58 <siprintf>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	777b      	strb	r3, [r7, #29]
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002c7c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	2300      	movs	r3, #0
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2300      	movs	r3, #0
 8002c88:	228c      	movs	r2, #140	; 0x8c
 8002c8a:	2114      	movs	r1, #20
 8002c8c:	483f      	ldr	r0, [pc, #252]	; (8002d8c <showCurrentParameters+0x294>)
 8002c8e:	f7fe ff49 	bl	8001b24 <EF_PutString>

	  Len = sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8002c92:	4b49      	ldr	r3, [pc, #292]	; (8002db8 <showCurrentParameters+0x2c0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fc6e 	bl	8000578 <__aeabi_f2d>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4946      	ldr	r1, [pc, #280]	; (8002dbc <showCurrentParameters+0x2c4>)
 8002ca2:	483a      	ldr	r0, [pc, #232]	; (8002d8c <showCurrentParameters+0x294>)
 8002ca4:	f00a f8d8 	bl	800ce58 <siprintf>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	777b      	strb	r3, [r7, #29]
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002cac:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	22aa      	movs	r2, #170	; 0xaa
 8002cba:	2114      	movs	r1, #20
 8002cbc:	4833      	ldr	r0, [pc, #204]	; (8002d8c <showCurrentParameters+0x294>)
 8002cbe:	f7fe ff31 	bl	8001b24 <EF_PutString>


	  EF_SetFont(&arial_11ptFontInfo);
 8002cc2:	483f      	ldr	r0, [pc, #252]	; (8002dc0 <showCurrentParameters+0x2c8>)
 8002cc4:	f7fe fd14 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002cc8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2305      	movs	r3, #5
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2314      	movs	r3, #20
 8002cd4:	2264      	movs	r2, #100	; 0x64
 8002cd6:	21d8      	movs	r1, #216	; 0xd8
 8002cd8:	20dc      	movs	r0, #220	; 0xdc
 8002cda:	f7fe fcb8 	bl	800164e <GFX_DrawFillRoundRectangle>
	  Len = sprintf((char*)Msg, "CONTROL=>");
 8002cde:	4939      	ldr	r1, [pc, #228]	; (8002dc4 <showCurrentParameters+0x2cc>)
 8002ce0:	482a      	ldr	r0, [pc, #168]	; (8002d8c <showCurrentParameters+0x294>)
 8002ce2:	f00a f8b9 	bl	800ce58 <siprintf>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	777b      	strb	r3, [r7, #29]
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002cea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	22da      	movs	r2, #218	; 0xda
 8002cf8:	21df      	movs	r1, #223	; 0xdf
 8002cfa:	4824      	ldr	r0, [pc, #144]	; (8002d8c <showCurrentParameters+0x294>)
 8002cfc:	f7fe ff12 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002d00:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	2305      	movs	r3, #5
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2314      	movs	r3, #20
 8002d0c:	2264      	movs	r2, #100	; 0x64
 8002d0e:	21d8      	movs	r1, #216	; 0xd8
 8002d10:	200a      	movs	r0, #10
 8002d12:	f7fe fc9c 	bl	800164e <GFX_DrawFillRoundRectangle>
	  Len = sprintf((char*)Msg, "<=LIGHTS");
 8002d16:	492c      	ldr	r1, [pc, #176]	; (8002dc8 <showCurrentParameters+0x2d0>)
 8002d18:	481c      	ldr	r0, [pc, #112]	; (8002d8c <showCurrentParameters+0x294>)
 8002d1a:	f00a f89d 	bl	800ce58 <siprintf>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	777b      	strb	r3, [r7, #29]
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002d22:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	22da      	movs	r2, #218	; 0xda
 8002d30:	2114      	movs	r1, #20
 8002d32:	4816      	ldr	r0, [pc, #88]	; (8002d8c <showCurrentParameters+0x294>)
 8002d34:	f7fe fef6 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8002d38:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	2305      	movs	r3, #5
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2314      	movs	r3, #20
 8002d44:	225a      	movs	r2, #90	; 0x5a
 8002d46:	21d8      	movs	r1, #216	; 0xd8
 8002d48:	2078      	movs	r0, #120	; 0x78
 8002d4a:	f7fe fc80 	bl	800164e <GFX_DrawFillRoundRectangle>
	  Len = sprintf((char*)Msg, ">CLOCK<");
 8002d4e:	491f      	ldr	r1, [pc, #124]	; (8002dcc <showCurrentParameters+0x2d4>)
 8002d50:	480e      	ldr	r0, [pc, #56]	; (8002d8c <showCurrentParameters+0x294>)
 8002d52:	f00a f881 	bl	800ce58 <siprintf>
 8002d56:	4603      	mov	r3, r0
 8002d58:	777b      	strb	r3, [r7, #29]
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002d5a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	2300      	movs	r3, #0
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2300      	movs	r3, #0
 8002d66:	22da      	movs	r2, #218	; 0xda
 8002d68:	2184      	movs	r1, #132	; 0x84
 8002d6a:	4808      	ldr	r0, [pc, #32]	; (8002d8c <showCurrentParameters+0x294>)
 8002d6c:	f7fe feda 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002d70:	4804      	ldr	r0, [pc, #16]	; (8002d84 <showCurrentParameters+0x28c>)
 8002d72:	f7fe fcbd 	bl	80016f0 <EF_SetFont>

	  Len++;
 8002d76:	7f7b      	ldrb	r3, [r7, #29]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	777b      	strb	r3, [r7, #29]
}
 8002d7c:	bf00      	nop
 8002d7e:	3720      	adds	r7, #32
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	080139f0 	.word	0x080139f0
 8002d88:	08010ab4 	.word	0x08010ab4
 8002d8c:	200002b8 	.word	0x200002b8
 8002d90:	08010ac4 	.word	0x08010ac4
 8002d94:	08010ad4 	.word	0x08010ad4
 8002d98:	08010ae4 	.word	0x08010ae4
 8002d9c:	08010af4 	.word	0x08010af4
 8002da0:	20000254 	.word	0x20000254
 8002da4:	08010b04 	.word	0x08010b04
 8002da8:	2000025c 	.word	0x2000025c
 8002dac:	08010b18 	.word	0x08010b18
 8002db0:	20000260 	.word	0x20000260
 8002db4:	08010b2c 	.word	0x08010b2c
 8002db8:	20000258 	.word	0x20000258
 8002dbc:	08010b3c 	.word	0x08010b3c
 8002dc0:	08011a78 	.word	0x08011a78
 8002dc4:	08010b54 	.word	0x08010b54
 8002dc8:	08010b60 	.word	0x08010b60
 8002dcc:	08010b6c 	.word	0x08010b6c

08002dd0 <ChangeHourOnScreen>:

void ChangeHourOnScreen()
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8002dd6:	f7ff fd0e 	bl	80027f6 <DS3231_GetHour>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8002dde:	f7ff fd16 	bl	800280e <DS3231_GetMinute>
 8002de2:	4603      	mov	r3, r0
 8002de4:	71bb      	strb	r3, [r7, #6]
	  if(CHour != OldHours)
 8002de6:	4b29      	ldr	r3, [pc, #164]	; (8002e8c <ChangeHourOnScreen+0xbc>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	79fa      	ldrb	r2, [r7, #7]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d021      	beq.n	8002e34 <ChangeHourOnScreen+0x64>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8002df0:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <ChangeHourOnScreen+0xc0>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d11d      	bne.n	8002e34 <ChangeHourOnScreen+0x64>
		  {
			  if(CHour < 10)
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	2b09      	cmp	r3, #9
 8002dfc:	d806      	bhi.n	8002e0c <ChangeHourOnScreen+0x3c>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	461a      	mov	r2, r3
 8002e02:	4924      	ldr	r1, [pc, #144]	; (8002e94 <ChangeHourOnScreen+0xc4>)
 8002e04:	4824      	ldr	r0, [pc, #144]	; (8002e98 <ChangeHourOnScreen+0xc8>)
 8002e06:	f00a f827 	bl	800ce58 <siprintf>
 8002e0a:	e005      	b.n	8002e18 <ChangeHourOnScreen+0x48>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4922      	ldr	r1, [pc, #136]	; (8002e9c <ChangeHourOnScreen+0xcc>)
 8002e12:	4821      	ldr	r0, [pc, #132]	; (8002e98 <ChangeHourOnScreen+0xc8>)
 8002e14:	f00a f820 	bl	800ce58 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002e18:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	2301      	movs	r3, #1
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	2300      	movs	r3, #0
 8002e24:	2232      	movs	r2, #50	; 0x32
 8002e26:	2161      	movs	r1, #97	; 0x61
 8002e28:	481b      	ldr	r0, [pc, #108]	; (8002e98 <ChangeHourOnScreen+0xc8>)
 8002e2a:	f7fe fe7b 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 8002e2e:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <ChangeHourOnScreen+0xbc>)
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	7013      	strb	r3, [r2, #0]
			  }
	  }
	  if(CMinute != OldMinutes)
 8002e34:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <ChangeHourOnScreen+0xd0>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	79ba      	ldrb	r2, [r7, #6]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d021      	beq.n	8002e82 <ChangeHourOnScreen+0xb2>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <ChangeHourOnScreen+0xc0>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d11d      	bne.n	8002e82 <ChangeHourOnScreen+0xb2>
		  {
			  if(CMinute < 10)
 8002e46:	79bb      	ldrb	r3, [r7, #6]
 8002e48:	2b09      	cmp	r3, #9
 8002e4a:	d806      	bhi.n	8002e5a <ChangeHourOnScreen+0x8a>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8002e4c:	79bb      	ldrb	r3, [r7, #6]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4914      	ldr	r1, [pc, #80]	; (8002ea4 <ChangeHourOnScreen+0xd4>)
 8002e52:	4811      	ldr	r0, [pc, #68]	; (8002e98 <ChangeHourOnScreen+0xc8>)
 8002e54:	f00a f800 	bl	800ce58 <siprintf>
 8002e58:	e005      	b.n	8002e66 <ChangeHourOnScreen+0x96>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8002e5a:	79bb      	ldrb	r3, [r7, #6]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4912      	ldr	r1, [pc, #72]	; (8002ea8 <ChangeHourOnScreen+0xd8>)
 8002e60:	480d      	ldr	r0, [pc, #52]	; (8002e98 <ChangeHourOnScreen+0xc8>)
 8002e62:	f009 fff9 	bl	800ce58 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 127 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002e66:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2300      	movs	r3, #0
 8002e72:	2232      	movs	r2, #50	; 0x32
 8002e74:	2193      	movs	r1, #147	; 0x93
 8002e76:	4808      	ldr	r0, [pc, #32]	; (8002e98 <ChangeHourOnScreen+0xc8>)
 8002e78:	f7fe fe54 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 8002e7c:	4a08      	ldr	r2, [pc, #32]	; (8002ea0 <ChangeHourOnScreen+0xd0>)
 8002e7e:	79bb      	ldrb	r3, [r7, #6]
 8002e80:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000246 	.word	0x20000246
 8002e90:	20000250 	.word	0x20000250
 8002e94:	08010b74 	.word	0x08010b74
 8002e98:	200002b8 	.word	0x200002b8
 8002e9c:	08010b7c 	.word	0x08010b7c
 8002ea0:	20000247 	.word	0x20000247
 8002ea4:	08010b80 	.word	0x08010b80
 8002ea8:	08010b88 	.word	0x08010b88

08002eac <showControlPanel>:

void showControlPanel()
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af02      	add	r7, sp, #8

	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8002eb2:	2015      	movs	r0, #21
 8002eb4:	f002 f956 	bl	8005164 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002eb8:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002ebc:	f7ff f81c 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002ec0:	48b6      	ldr	r0, [pc, #728]	; (800319c <showControlPanel+0x2f0>)
 8002ec2:	f7fe fc15 	bl	80016f0 <EF_SetFont>

	  uint8_t Len = sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 8002ec6:	49b6      	ldr	r1, [pc, #728]	; (80031a0 <showControlPanel+0x2f4>)
 8002ec8:	48b6      	ldr	r0, [pc, #728]	; (80031a4 <showControlPanel+0x2f8>)
 8002eca:	f009 ffc5 	bl	800ce58 <siprintf>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002ed2:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	231f      	movs	r3, #31
 8002ede:	220a      	movs	r2, #10
 8002ee0:	2123      	movs	r1, #35	; 0x23
 8002ee2:	48b0      	ldr	r0, [pc, #704]	; (80031a4 <showControlPanel+0x2f8>)
 8002ee4:	f7fe fe1e 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002ee8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2329      	movs	r3, #41	; 0x29
 8002ef0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ef4:	2129      	movs	r1, #41	; 0x29
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7fe f94a 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002efc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	232b      	movs	r3, #43	; 0x2b
 8002f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002f08:	212b      	movs	r1, #43	; 0x2b
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fe f940 	bl	8001190 <GFX_DrawLine>

	  Len = sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 8002f10:	49a5      	ldr	r1, [pc, #660]	; (80031a8 <showControlPanel+0x2fc>)
 8002f12:	48a4      	ldr	r0, [pc, #656]	; (80031a4 <showControlPanel+0x2f8>)
 8002f14:	f009 ffa0 	bl	800ce58 <siprintf>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f1c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	2300      	movs	r3, #0
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	2300      	movs	r3, #0
 8002f28:	223c      	movs	r2, #60	; 0x3c
 8002f2a:	2114      	movs	r1, #20
 8002f2c:	489d      	ldr	r0, [pc, #628]	; (80031a4 <showControlPanel+0x2f8>)
 8002f2e:	f7fe fdf9 	bl	8001b24 <EF_PutString>

	  Len = sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 8002f32:	499e      	ldr	r1, [pc, #632]	; (80031ac <showControlPanel+0x300>)
 8002f34:	489b      	ldr	r0, [pc, #620]	; (80031a4 <showControlPanel+0x2f8>)
 8002f36:	f009 ff8f 	bl	800ce58 <siprintf>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002f3e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	2301      	movs	r3, #1
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	225a      	movs	r2, #90	; 0x5a
 8002f4c:	2114      	movs	r1, #20
 8002f4e:	4895      	ldr	r0, [pc, #596]	; (80031a4 <showControlPanel+0x2f8>)
 8002f50:	f7fe fde8 	bl	8001b24 <EF_PutString>

	  Len = sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8002f54:	4996      	ldr	r1, [pc, #600]	; (80031b0 <showControlPanel+0x304>)
 8002f56:	4893      	ldr	r0, [pc, #588]	; (80031a4 <showControlPanel+0x2f8>)
 8002f58:	f009 ff7e 	bl	800ce58 <siprintf>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f60:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	2300      	movs	r3, #0
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	2278      	movs	r2, #120	; 0x78
 8002f6e:	2114      	movs	r1, #20
 8002f70:	488c      	ldr	r0, [pc, #560]	; (80031a4 <showControlPanel+0x2f8>)
 8002f72:	f7fe fdd7 	bl	8001b24 <EF_PutString>

	  Len = sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8002f76:	498f      	ldr	r1, [pc, #572]	; (80031b4 <showControlPanel+0x308>)
 8002f78:	488a      	ldr	r0, [pc, #552]	; (80031a4 <showControlPanel+0x2f8>)
 8002f7a:	f009 ff6d 	bl	800ce58 <siprintf>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f82:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	2296      	movs	r2, #150	; 0x96
 8002f90:	2114      	movs	r1, #20
 8002f92:	4884      	ldr	r0, [pc, #528]	; (80031a4 <showControlPanel+0x2f8>)
 8002f94:	f7fe fdc6 	bl	8001b24 <EF_PutString>

	  EF_SetFont(&arial_11ptFontInfo);
 8002f98:	4887      	ldr	r0, [pc, #540]	; (80031b8 <showControlPanel+0x30c>)
 8002f9a:	f7fe fba9 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002f9e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	2305      	movs	r3, #5
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2314      	movs	r3, #20
 8002faa:	2264      	movs	r2, #100	; 0x64
 8002fac:	21d8      	movs	r1, #216	; 0xd8
 8002fae:	20dc      	movs	r0, #220	; 0xdc
 8002fb0:	f7fe fb4d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  Len = sprintf((char*)Msg, "LIGHTS=>");
 8002fb4:	4981      	ldr	r1, [pc, #516]	; (80031bc <showControlPanel+0x310>)
 8002fb6:	487b      	ldr	r0, [pc, #492]	; (80031a4 <showControlPanel+0x2f8>)
 8002fb8:	f009 ff4e 	bl	800ce58 <siprintf>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002fc0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	22da      	movs	r2, #218	; 0xda
 8002fce:	21df      	movs	r1, #223	; 0xdf
 8002fd0:	4874      	ldr	r0, [pc, #464]	; (80031a4 <showControlPanel+0x2f8>)
 8002fd2:	f7fe fda7 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002fd6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	2305      	movs	r3, #5
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	2314      	movs	r3, #20
 8002fe2:	2264      	movs	r2, #100	; 0x64
 8002fe4:	21d8      	movs	r1, #216	; 0xd8
 8002fe6:	200a      	movs	r0, #10
 8002fe8:	f7fe fb31 	bl	800164e <GFX_DrawFillRoundRectangle>
	  Len = sprintf((char*)Msg, "<=PARAM");
 8002fec:	4974      	ldr	r1, [pc, #464]	; (80031c0 <showControlPanel+0x314>)
 8002fee:	486d      	ldr	r0, [pc, #436]	; (80031a4 <showControlPanel+0x2f8>)
 8002ff0:	f009 ff32 	bl	800ce58 <siprintf>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002ff8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ffc:	9301      	str	r3, [sp, #4]
 8002ffe:	2300      	movs	r3, #0
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	2300      	movs	r3, #0
 8003004:	22da      	movs	r2, #218	; 0xda
 8003006:	2114      	movs	r1, #20
 8003008:	4866      	ldr	r0, [pc, #408]	; (80031a4 <showControlPanel+0x2f8>)
 800300a:	f7fe fd8b 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 800300e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	2305      	movs	r3, #5
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	2314      	movs	r3, #20
 800301a:	225a      	movs	r2, #90	; 0x5a
 800301c:	21d8      	movs	r1, #216	; 0xd8
 800301e:	2078      	movs	r0, #120	; 0x78
 8003020:	f7fe fb15 	bl	800164e <GFX_DrawFillRoundRectangle>
	  Len = sprintf((char*)Msg, "ACTIVITIES");
 8003024:	4967      	ldr	r1, [pc, #412]	; (80031c4 <showControlPanel+0x318>)
 8003026:	485f      	ldr	r0, [pc, #380]	; (80031a4 <showControlPanel+0x2f8>)
 8003028:	f009 ff16 	bl	800ce58 <siprintf>
 800302c:	4603      	mov	r3, r0
 800302e:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003030:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	2300      	movs	r3, #0
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2300      	movs	r3, #0
 800303c:	22da      	movs	r2, #218	; 0xda
 800303e:	217e      	movs	r1, #126	; 0x7e
 8003040:	4858      	ldr	r0, [pc, #352]	; (80031a4 <showControlPanel+0x2f8>)
 8003042:	f7fe fd6f 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003046:	4855      	ldr	r0, [pc, #340]	; (800319c <showControlPanel+0x2f0>)
 8003048:	f7fe fb52 	bl	80016f0 <EF_SetFont>
	  //
	  // Draw current state of switches button
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 800304c:	485a      	ldr	r0, [pc, #360]	; (80031b8 <showControlPanel+0x30c>)
 800304e:	f7fe fb4f 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8003052:	4b5d      	ldr	r3, [pc, #372]	; (80031c8 <showControlPanel+0x31c>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01e      	beq.n	8003098 <showControlPanel+0x1ec>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800305a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	2305      	movs	r3, #5
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	2315      	movs	r3, #21
 8003066:	2221      	movs	r2, #33	; 0x21
 8003068:	2141      	movs	r1, #65	; 0x41
 800306a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800306e:	f7fe faee 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 8003072:	4956      	ldr	r1, [pc, #344]	; (80031cc <showControlPanel+0x320>)
 8003074:	484b      	ldr	r0, [pc, #300]	; (80031a4 <showControlPanel+0x2f8>)
 8003076:	f009 feef 	bl	800ce58 <siprintf>
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800307e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	2300      	movs	r3, #0
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2300      	movs	r3, #0
 800308a:	2243      	movs	r2, #67	; 0x43
 800308c:	f240 1111 	movw	r1, #273	; 0x111
 8003090:	4844      	ldr	r0, [pc, #272]	; (80031a4 <showControlPanel+0x2f8>)
 8003092:	f7fe fd47 	bl	8001b24 <EF_PutString>
 8003096:	e01d      	b.n	80030d4 <showControlPanel+0x228>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003098:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	2305      	movs	r3, #5
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	2315      	movs	r3, #21
 80030a4:	2221      	movs	r2, #33	; 0x21
 80030a6:	2141      	movs	r1, #65	; 0x41
 80030a8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80030ac:	f7fe facf 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 80030b0:	4947      	ldr	r1, [pc, #284]	; (80031d0 <showControlPanel+0x324>)
 80030b2:	483c      	ldr	r0, [pc, #240]	; (80031a4 <showControlPanel+0x2f8>)
 80030b4:	f009 fed0 	bl	800ce58 <siprintf>
 80030b8:	4603      	mov	r3, r0
 80030ba:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80030bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	2300      	movs	r3, #0
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	2300      	movs	r3, #0
 80030c8:	2243      	movs	r2, #67	; 0x43
 80030ca:	f240 1111 	movw	r1, #273	; 0x111
 80030ce:	4835      	ldr	r0, [pc, #212]	; (80031a4 <showControlPanel+0x2f8>)
 80030d0:	f7fe fd28 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 80030d4:	4b3c      	ldr	r3, [pc, #240]	; (80031c8 <showControlPanel+0x31c>)
 80030d6:	785b      	ldrb	r3, [r3, #1]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01e      	beq.n	800311a <showControlPanel+0x26e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80030dc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	2305      	movs	r3, #5
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	2315      	movs	r3, #21
 80030e8:	2221      	movs	r2, #33	; 0x21
 80030ea:	215f      	movs	r1, #95	; 0x5f
 80030ec:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80030f0:	f7fe faad 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 80030f4:	4935      	ldr	r1, [pc, #212]	; (80031cc <showControlPanel+0x320>)
 80030f6:	482b      	ldr	r0, [pc, #172]	; (80031a4 <showControlPanel+0x2f8>)
 80030f8:	f009 feae 	bl	800ce58 <siprintf>
 80030fc:	4603      	mov	r3, r0
 80030fe:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003100:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	2300      	movs	r3, #0
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	2261      	movs	r2, #97	; 0x61
 800310e:	f240 1111 	movw	r1, #273	; 0x111
 8003112:	4824      	ldr	r0, [pc, #144]	; (80031a4 <showControlPanel+0x2f8>)
 8003114:	f7fe fd06 	bl	8001b24 <EF_PutString>
 8003118:	e01d      	b.n	8003156 <showControlPanel+0x2aa>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800311a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	2305      	movs	r3, #5
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2315      	movs	r3, #21
 8003126:	2221      	movs	r2, #33	; 0x21
 8003128:	215f      	movs	r1, #95	; 0x5f
 800312a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800312e:	f7fe fa8e 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 8003132:	4927      	ldr	r1, [pc, #156]	; (80031d0 <showControlPanel+0x324>)
 8003134:	481b      	ldr	r0, [pc, #108]	; (80031a4 <showControlPanel+0x2f8>)
 8003136:	f009 fe8f 	bl	800ce58 <siprintf>
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800313e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003142:	9301      	str	r3, [sp, #4]
 8003144:	2300      	movs	r3, #0
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2300      	movs	r3, #0
 800314a:	2261      	movs	r2, #97	; 0x61
 800314c:	f240 1111 	movw	r1, #273	; 0x111
 8003150:	4814      	ldr	r0, [pc, #80]	; (80031a4 <showControlPanel+0x2f8>)
 8003152:	f7fe fce7 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8003156:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <showControlPanel+0x31c>)
 8003158:	789b      	ldrb	r3, [r3, #2]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d03a      	beq.n	80031d4 <showControlPanel+0x328>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800315e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	2305      	movs	r3, #5
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2315      	movs	r3, #21
 800316a:	2221      	movs	r2, #33	; 0x21
 800316c:	217d      	movs	r1, #125	; 0x7d
 800316e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003172:	f7fe fa6c 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 8003176:	4915      	ldr	r1, [pc, #84]	; (80031cc <showControlPanel+0x320>)
 8003178:	480a      	ldr	r0, [pc, #40]	; (80031a4 <showControlPanel+0x2f8>)
 800317a:	f009 fe6d 	bl	800ce58 <siprintf>
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003182:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	2300      	movs	r3, #0
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2300      	movs	r3, #0
 800318e:	227f      	movs	r2, #127	; 0x7f
 8003190:	f240 1111 	movw	r1, #273	; 0x111
 8003194:	4803      	ldr	r0, [pc, #12]	; (80031a4 <showControlPanel+0x2f8>)
 8003196:	f7fe fcc5 	bl	8001b24 <EF_PutString>
 800319a:	e039      	b.n	8003210 <showControlPanel+0x364>
 800319c:	080139f0 	.word	0x080139f0
 80031a0:	08010b90 	.word	0x08010b90
 80031a4:	200002b8 	.word	0x200002b8
 80031a8:	08010ba4 	.word	0x08010ba4
 80031ac:	08010bb8 	.word	0x08010bb8
 80031b0:	08010bcc 	.word	0x08010bcc
 80031b4:	08010be0 	.word	0x08010be0
 80031b8:	08011a78 	.word	0x08011a78
 80031bc:	08010bf4 	.word	0x08010bf4
 80031c0:	08010c00 	.word	0x08010c00
 80031c4:	08010c08 	.word	0x08010c08
 80031c8:	20000264 	.word	0x20000264
 80031cc:	08010c14 	.word	0x08010c14
 80031d0:	08010c18 	.word	0x08010c18
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80031d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031d8:	9301      	str	r3, [sp, #4]
 80031da:	2305      	movs	r3, #5
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	2315      	movs	r3, #21
 80031e0:	2221      	movs	r2, #33	; 0x21
 80031e2:	217d      	movs	r1, #125	; 0x7d
 80031e4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80031e8:	f7fe fa31 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 80031ec:	492e      	ldr	r1, [pc, #184]	; (80032a8 <showControlPanel+0x3fc>)
 80031ee:	482f      	ldr	r0, [pc, #188]	; (80032ac <showControlPanel+0x400>)
 80031f0:	f009 fe32 	bl	800ce58 <siprintf>
 80031f4:	4603      	mov	r3, r0
 80031f6:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80031f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	2300      	movs	r3, #0
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	2300      	movs	r3, #0
 8003204:	227f      	movs	r2, #127	; 0x7f
 8003206:	f240 1111 	movw	r1, #273	; 0x111
 800320a:	4828      	ldr	r0, [pc, #160]	; (80032ac <showControlPanel+0x400>)
 800320c:	f7fe fc8a 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8003210:	4b27      	ldr	r3, [pc, #156]	; (80032b0 <showControlPanel+0x404>)
 8003212:	78db      	ldrb	r3, [r3, #3]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01e      	beq.n	8003256 <showControlPanel+0x3aa>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003218:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	2305      	movs	r3, #5
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	2315      	movs	r3, #21
 8003224:	2221      	movs	r2, #33	; 0x21
 8003226:	219b      	movs	r1, #155	; 0x9b
 8003228:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800322c:	f7fe fa0f 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 8003230:	4920      	ldr	r1, [pc, #128]	; (80032b4 <showControlPanel+0x408>)
 8003232:	481e      	ldr	r0, [pc, #120]	; (80032ac <showControlPanel+0x400>)
 8003234:	f009 fe10 	bl	800ce58 <siprintf>
 8003238:	4603      	mov	r3, r0
 800323a:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800323c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	2300      	movs	r3, #0
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2300      	movs	r3, #0
 8003248:	229d      	movs	r2, #157	; 0x9d
 800324a:	f240 1111 	movw	r1, #273	; 0x111
 800324e:	4817      	ldr	r0, [pc, #92]	; (80032ac <showControlPanel+0x400>)
 8003250:	f7fe fc68 	bl	8001b24 <EF_PutString>
 8003254:	e01d      	b.n	8003292 <showControlPanel+0x3e6>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003256:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	2305      	movs	r3, #5
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	2315      	movs	r3, #21
 8003262:	2221      	movs	r2, #33	; 0x21
 8003264:	219b      	movs	r1, #155	; 0x9b
 8003266:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800326a:	f7fe f9f0 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 800326e:	490e      	ldr	r1, [pc, #56]	; (80032a8 <showControlPanel+0x3fc>)
 8003270:	480e      	ldr	r0, [pc, #56]	; (80032ac <showControlPanel+0x400>)
 8003272:	f009 fdf1 	bl	800ce58 <siprintf>
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800327a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	2300      	movs	r3, #0
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	2300      	movs	r3, #0
 8003286:	229d      	movs	r2, #157	; 0x9d
 8003288:	f240 1111 	movw	r1, #273	; 0x111
 800328c:	4807      	ldr	r0, [pc, #28]	; (80032ac <showControlPanel+0x400>)
 800328e:	f7fe fc49 	bl	8001b24 <EF_PutString>
	  }
	  Len++;
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	3301      	adds	r3, #1
 8003296:	71fb      	strb	r3, [r7, #7]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003298:	4807      	ldr	r0, [pc, #28]	; (80032b8 <showControlPanel+0x40c>)
 800329a:	f7fe fa29 	bl	80016f0 <EF_SetFont>


}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	08010c18 	.word	0x08010c18
 80032ac:	200002b8 	.word	0x200002b8
 80032b0:	20000264 	.word	0x20000264
 80032b4:	08010c14 	.word	0x08010c14
 80032b8:	080139f0 	.word	0x080139f0

080032bc <showLightsControlPanel>:

void showLightsControlPanel()
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 80032c2:	2016      	movs	r0, #22
 80032c4:	f001 ff4e 	bl	8005164 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80032c8:	f24c 6018 	movw	r0, #50712	; 0xc618
 80032cc:	f7fe fe14 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80032d0:	48c1      	ldr	r0, [pc, #772]	; (80035d8 <showLightsControlPanel+0x31c>)
 80032d2:	f7fe fa0d 	bl	80016f0 <EF_SetFont>

	  uint8_t Len = sprintf((char*)Msg, "-=ŚWIATŁA=-");
 80032d6:	49c1      	ldr	r1, [pc, #772]	; (80035dc <showLightsControlPanel+0x320>)
 80032d8:	48c1      	ldr	r0, [pc, #772]	; (80035e0 <showLightsControlPanel+0x324>)
 80032da:	f009 fdbd 	bl	800ce58 <siprintf>
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80032e2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	2300      	movs	r3, #0
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80032f0:	220a      	movs	r2, #10
 80032f2:	2146      	movs	r1, #70	; 0x46
 80032f4:	48ba      	ldr	r0, [pc, #744]	; (80035e0 <showLightsControlPanel+0x324>)
 80032f6:	f7fe fc15 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80032fa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	2329      	movs	r3, #41	; 0x29
 8003302:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003306:	2129      	movs	r1, #41	; 0x29
 8003308:	2000      	movs	r0, #0
 800330a:	f7fd ff41 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800330e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	232b      	movs	r3, #43	; 0x2b
 8003316:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800331a:	212b      	movs	r1, #43	; 0x2b
 800331c:	2000      	movs	r0, #0
 800331e:	f7fd ff37 	bl	8001190 <GFX_DrawLine>

	  Len = sprintf((char*)Msg, "ŚWIATŁO 1:");
 8003322:	49b0      	ldr	r1, [pc, #704]	; (80035e4 <showLightsControlPanel+0x328>)
 8003324:	48ae      	ldr	r0, [pc, #696]	; (80035e0 <showLightsControlPanel+0x324>)
 8003326:	f009 fd97 	bl	800ce58 <siprintf>
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800332e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	2300      	movs	r3, #0
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2300      	movs	r3, #0
 800333a:	223c      	movs	r2, #60	; 0x3c
 800333c:	2114      	movs	r1, #20
 800333e:	48a8      	ldr	r0, [pc, #672]	; (80035e0 <showLightsControlPanel+0x324>)
 8003340:	f7fe fbf0 	bl	8001b24 <EF_PutString>

	  Len = sprintf((char*)Msg, "ŚWIATŁO 2:");
 8003344:	49a8      	ldr	r1, [pc, #672]	; (80035e8 <showLightsControlPanel+0x32c>)
 8003346:	48a6      	ldr	r0, [pc, #664]	; (80035e0 <showLightsControlPanel+0x324>)
 8003348:	f009 fd86 	bl	800ce58 <siprintf>
 800334c:	4603      	mov	r3, r0
 800334e:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003350:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	2301      	movs	r3, #1
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2300      	movs	r3, #0
 800335c:	225a      	movs	r2, #90	; 0x5a
 800335e:	2114      	movs	r1, #20
 8003360:	489f      	ldr	r0, [pc, #636]	; (80035e0 <showLightsControlPanel+0x324>)
 8003362:	f7fe fbdf 	bl	8001b24 <EF_PutString>

	  Len = sprintf((char*)Msg, "ŚWIATŁO 3:");
 8003366:	49a1      	ldr	r1, [pc, #644]	; (80035ec <showLightsControlPanel+0x330>)
 8003368:	489d      	ldr	r0, [pc, #628]	; (80035e0 <showLightsControlPanel+0x324>)
 800336a:	f009 fd75 	bl	800ce58 <siprintf>
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003372:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	2300      	movs	r3, #0
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	2300      	movs	r3, #0
 800337e:	2278      	movs	r2, #120	; 0x78
 8003380:	2114      	movs	r1, #20
 8003382:	4897      	ldr	r0, [pc, #604]	; (80035e0 <showLightsControlPanel+0x324>)
 8003384:	f7fe fbce 	bl	8001b24 <EF_PutString>

	  Len = sprintf((char*)Msg, "ŚWIATŁO 4:");
 8003388:	4999      	ldr	r1, [pc, #612]	; (80035f0 <showLightsControlPanel+0x334>)
 800338a:	4895      	ldr	r0, [pc, #596]	; (80035e0 <showLightsControlPanel+0x324>)
 800338c:	f009 fd64 	bl	800ce58 <siprintf>
 8003390:	4603      	mov	r3, r0
 8003392:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003394:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	2300      	movs	r3, #0
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	2300      	movs	r3, #0
 80033a0:	2296      	movs	r2, #150	; 0x96
 80033a2:	2114      	movs	r1, #20
 80033a4:	488e      	ldr	r0, [pc, #568]	; (80035e0 <showLightsControlPanel+0x324>)
 80033a6:	f7fe fbbd 	bl	8001b24 <EF_PutString>

	  EF_SetFont(&arial_11ptFontInfo);
 80033aa:	4892      	ldr	r0, [pc, #584]	; (80035f4 <showLightsControlPanel+0x338>)
 80033ac:	f7fe f9a0 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80033b0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	2305      	movs	r3, #5
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2314      	movs	r3, #20
 80033bc:	2264      	movs	r2, #100	; 0x64
 80033be:	21d8      	movs	r1, #216	; 0xd8
 80033c0:	20dc      	movs	r0, #220	; 0xdc
 80033c2:	f7fe f944 	bl	800164e <GFX_DrawFillRoundRectangle>
	  Len = sprintf((char*)Msg, "PARAM=>");
 80033c6:	498c      	ldr	r1, [pc, #560]	; (80035f8 <showLightsControlPanel+0x33c>)
 80033c8:	4885      	ldr	r0, [pc, #532]	; (80035e0 <showLightsControlPanel+0x324>)
 80033ca:	f009 fd45 	bl	800ce58 <siprintf>
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80033d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	2300      	movs	r3, #0
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	2300      	movs	r3, #0
 80033de:	22da      	movs	r2, #218	; 0xda
 80033e0:	21e6      	movs	r1, #230	; 0xe6
 80033e2:	487f      	ldr	r0, [pc, #508]	; (80035e0 <showLightsControlPanel+0x324>)
 80033e4:	f7fe fb9e 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80033e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	2305      	movs	r3, #5
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2314      	movs	r3, #20
 80033f4:	2264      	movs	r2, #100	; 0x64
 80033f6:	21d8      	movs	r1, #216	; 0xd8
 80033f8:	200a      	movs	r0, #10
 80033fa:	f7fe f928 	bl	800164e <GFX_DrawFillRoundRectangle>
	  Len = sprintf((char*)Msg, "<=CONTROL");
 80033fe:	497f      	ldr	r1, [pc, #508]	; (80035fc <showLightsControlPanel+0x340>)
 8003400:	4877      	ldr	r0, [pc, #476]	; (80035e0 <showLightsControlPanel+0x324>)
 8003402:	f009 fd29 	bl	800ce58 <siprintf>
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800340a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	2300      	movs	r3, #0
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2300      	movs	r3, #0
 8003416:	22da      	movs	r2, #218	; 0xda
 8003418:	210d      	movs	r1, #13
 800341a:	4871      	ldr	r0, [pc, #452]	; (80035e0 <showLightsControlPanel+0x324>)
 800341c:	f7fe fb82 	bl	8001b24 <EF_PutString>
	  //
	  // Draw current state of lights button
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8003420:	4874      	ldr	r0, [pc, #464]	; (80035f4 <showLightsControlPanel+0x338>)
 8003422:	f7fe f965 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8003426:	4b76      	ldr	r3, [pc, #472]	; (8003600 <showLightsControlPanel+0x344>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01c      	beq.n	8003468 <showLightsControlPanel+0x1ac>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800342e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	2305      	movs	r3, #5
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	2315      	movs	r3, #21
 800343a:	2221      	movs	r2, #33	; 0x21
 800343c:	2141      	movs	r1, #65	; 0x41
 800343e:	20c8      	movs	r0, #200	; 0xc8
 8003440:	f7fe f905 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 8003444:	496f      	ldr	r1, [pc, #444]	; (8003604 <showLightsControlPanel+0x348>)
 8003446:	4866      	ldr	r0, [pc, #408]	; (80035e0 <showLightsControlPanel+0x324>)
 8003448:	f009 fd06 	bl	800ce58 <siprintf>
 800344c:	4603      	mov	r3, r0
 800344e:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003450:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	2300      	movs	r3, #0
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2300      	movs	r3, #0
 800345c:	2243      	movs	r2, #67	; 0x43
 800345e:	21cb      	movs	r1, #203	; 0xcb
 8003460:	485f      	ldr	r0, [pc, #380]	; (80035e0 <showLightsControlPanel+0x324>)
 8003462:	f7fe fb5f 	bl	8001b24 <EF_PutString>
 8003466:	e01b      	b.n	80034a0 <showLightsControlPanel+0x1e4>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003468:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	2305      	movs	r3, #5
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2315      	movs	r3, #21
 8003474:	2221      	movs	r2, #33	; 0x21
 8003476:	2141      	movs	r1, #65	; 0x41
 8003478:	20c8      	movs	r0, #200	; 0xc8
 800347a:	f7fe f8e8 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 800347e:	4962      	ldr	r1, [pc, #392]	; (8003608 <showLightsControlPanel+0x34c>)
 8003480:	4857      	ldr	r0, [pc, #348]	; (80035e0 <showLightsControlPanel+0x324>)
 8003482:	f009 fce9 	bl	800ce58 <siprintf>
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800348a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	2300      	movs	r3, #0
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2300      	movs	r3, #0
 8003496:	2243      	movs	r2, #67	; 0x43
 8003498:	21cb      	movs	r1, #203	; 0xcb
 800349a:	4851      	ldr	r0, [pc, #324]	; (80035e0 <showLightsControlPanel+0x324>)
 800349c:	f7fe fb42 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 80034a0:	4b57      	ldr	r3, [pc, #348]	; (8003600 <showLightsControlPanel+0x344>)
 80034a2:	785b      	ldrb	r3, [r3, #1]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01c      	beq.n	80034e2 <showLightsControlPanel+0x226>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80034a8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	2305      	movs	r3, #5
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	2315      	movs	r3, #21
 80034b4:	2221      	movs	r2, #33	; 0x21
 80034b6:	215f      	movs	r1, #95	; 0x5f
 80034b8:	20c8      	movs	r0, #200	; 0xc8
 80034ba:	f7fe f8c8 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 80034be:	4951      	ldr	r1, [pc, #324]	; (8003604 <showLightsControlPanel+0x348>)
 80034c0:	4847      	ldr	r0, [pc, #284]	; (80035e0 <showLightsControlPanel+0x324>)
 80034c2:	f009 fcc9 	bl	800ce58 <siprintf>
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80034ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	2300      	movs	r3, #0
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	2300      	movs	r3, #0
 80034d6:	2261      	movs	r2, #97	; 0x61
 80034d8:	21cb      	movs	r1, #203	; 0xcb
 80034da:	4841      	ldr	r0, [pc, #260]	; (80035e0 <showLightsControlPanel+0x324>)
 80034dc:	f7fe fb22 	bl	8001b24 <EF_PutString>
 80034e0:	e01b      	b.n	800351a <showLightsControlPanel+0x25e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80034e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	2305      	movs	r3, #5
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	2315      	movs	r3, #21
 80034ee:	2221      	movs	r2, #33	; 0x21
 80034f0:	215f      	movs	r1, #95	; 0x5f
 80034f2:	20c8      	movs	r0, #200	; 0xc8
 80034f4:	f7fe f8ab 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 80034f8:	4943      	ldr	r1, [pc, #268]	; (8003608 <showLightsControlPanel+0x34c>)
 80034fa:	4839      	ldr	r0, [pc, #228]	; (80035e0 <showLightsControlPanel+0x324>)
 80034fc:	f009 fcac 	bl	800ce58 <siprintf>
 8003500:	4603      	mov	r3, r0
 8003502:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003504:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	2300      	movs	r3, #0
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	2300      	movs	r3, #0
 8003510:	2261      	movs	r2, #97	; 0x61
 8003512:	21cb      	movs	r1, #203	; 0xcb
 8003514:	4832      	ldr	r0, [pc, #200]	; (80035e0 <showLightsControlPanel+0x324>)
 8003516:	f7fe fb05 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 800351a:	4b39      	ldr	r3, [pc, #228]	; (8003600 <showLightsControlPanel+0x344>)
 800351c:	789b      	ldrb	r3, [r3, #2]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01c      	beq.n	800355c <showLightsControlPanel+0x2a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003522:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	2305      	movs	r3, #5
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2315      	movs	r3, #21
 800352e:	2221      	movs	r2, #33	; 0x21
 8003530:	217d      	movs	r1, #125	; 0x7d
 8003532:	20c8      	movs	r0, #200	; 0xc8
 8003534:	f7fe f88b 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 8003538:	4932      	ldr	r1, [pc, #200]	; (8003604 <showLightsControlPanel+0x348>)
 800353a:	4829      	ldr	r0, [pc, #164]	; (80035e0 <showLightsControlPanel+0x324>)
 800353c:	f009 fc8c 	bl	800ce58 <siprintf>
 8003540:	4603      	mov	r3, r0
 8003542:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003544:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	2300      	movs	r3, #0
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2300      	movs	r3, #0
 8003550:	227f      	movs	r2, #127	; 0x7f
 8003552:	21cb      	movs	r1, #203	; 0xcb
 8003554:	4822      	ldr	r0, [pc, #136]	; (80035e0 <showLightsControlPanel+0x324>)
 8003556:	f7fe fae5 	bl	8001b24 <EF_PutString>
 800355a:	e01b      	b.n	8003594 <showLightsControlPanel+0x2d8>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800355c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	2305      	movs	r3, #5
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	2315      	movs	r3, #21
 8003568:	2221      	movs	r2, #33	; 0x21
 800356a:	217d      	movs	r1, #125	; 0x7d
 800356c:	20c8      	movs	r0, #200	; 0xc8
 800356e:	f7fe f86e 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 8003572:	4925      	ldr	r1, [pc, #148]	; (8003608 <showLightsControlPanel+0x34c>)
 8003574:	481a      	ldr	r0, [pc, #104]	; (80035e0 <showLightsControlPanel+0x324>)
 8003576:	f009 fc6f 	bl	800ce58 <siprintf>
 800357a:	4603      	mov	r3, r0
 800357c:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800357e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	2300      	movs	r3, #0
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2300      	movs	r3, #0
 800358a:	227f      	movs	r2, #127	; 0x7f
 800358c:	21cb      	movs	r1, #203	; 0xcb
 800358e:	4814      	ldr	r0, [pc, #80]	; (80035e0 <showLightsControlPanel+0x324>)
 8003590:	f7fe fac8 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8003594:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <showLightsControlPanel+0x344>)
 8003596:	78db      	ldrb	r3, [r3, #3]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d037      	beq.n	800360c <showLightsControlPanel+0x350>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800359c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	2305      	movs	r3, #5
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2315      	movs	r3, #21
 80035a8:	2221      	movs	r2, #33	; 0x21
 80035aa:	219b      	movs	r1, #155	; 0x9b
 80035ac:	20c8      	movs	r0, #200	; 0xc8
 80035ae:	f7fe f84e 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 80035b2:	4914      	ldr	r1, [pc, #80]	; (8003604 <showLightsControlPanel+0x348>)
 80035b4:	480a      	ldr	r0, [pc, #40]	; (80035e0 <showLightsControlPanel+0x324>)
 80035b6:	f009 fc4f 	bl	800ce58 <siprintf>
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80035be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	2300      	movs	r3, #0
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	2300      	movs	r3, #0
 80035ca:	229d      	movs	r2, #157	; 0x9d
 80035cc:	21cb      	movs	r1, #203	; 0xcb
 80035ce:	4804      	ldr	r0, [pc, #16]	; (80035e0 <showLightsControlPanel+0x324>)
 80035d0:	f7fe faa8 	bl	8001b24 <EF_PutString>
 80035d4:	e036      	b.n	8003644 <showLightsControlPanel+0x388>
 80035d6:	bf00      	nop
 80035d8:	080139f0 	.word	0x080139f0
 80035dc:	08010c1c 	.word	0x08010c1c
 80035e0:	200002b8 	.word	0x200002b8
 80035e4:	08010c2c 	.word	0x08010c2c
 80035e8:	08010c3c 	.word	0x08010c3c
 80035ec:	08010c4c 	.word	0x08010c4c
 80035f0:	08010c5c 	.word	0x08010c5c
 80035f4:	08011a78 	.word	0x08011a78
 80035f8:	08010c6c 	.word	0x08010c6c
 80035fc:	08010c74 	.word	0x08010c74
 8003600:	20000268 	.word	0x20000268
 8003604:	08010c14 	.word	0x08010c14
 8003608:	08010c18 	.word	0x08010c18
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800360c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	2305      	movs	r3, #5
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	2315      	movs	r3, #21
 8003618:	2221      	movs	r2, #33	; 0x21
 800361a:	219b      	movs	r1, #155	; 0x9b
 800361c:	20c8      	movs	r0, #200	; 0xc8
 800361e:	f7fe f816 	bl	800164e <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 8003622:	490d      	ldr	r1, [pc, #52]	; (8003658 <showLightsControlPanel+0x39c>)
 8003624:	480d      	ldr	r0, [pc, #52]	; (800365c <showLightsControlPanel+0x3a0>)
 8003626:	f009 fc17 	bl	800ce58 <siprintf>
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800362e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	2300      	movs	r3, #0
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2300      	movs	r3, #0
 800363a:	229d      	movs	r2, #157	; 0x9d
 800363c:	21cb      	movs	r1, #203	; 0xcb
 800363e:	4807      	ldr	r0, [pc, #28]	; (800365c <showLightsControlPanel+0x3a0>)
 8003640:	f7fe fa70 	bl	8001b24 <EF_PutString>
	  }

	  Len++;
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	3301      	adds	r3, #1
 8003648:	71fb      	strb	r3, [r7, #7]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 800364a:	4805      	ldr	r0, [pc, #20]	; (8003660 <showLightsControlPanel+0x3a4>)
 800364c:	f7fe f850 	bl	80016f0 <EF_SetFont>

}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	08010c18 	.word	0x08010c18
 800365c:	200002b8 	.word	0x200002b8
 8003660:	080139f0 	.word	0x080139f0

08003664 <showClockSetPanel>:

void showClockSetPanel()
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800366a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800366e:	f7fe fc43 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003672:	4889      	ldr	r0, [pc, #548]	; (8003898 <showClockSetPanel+0x234>)
 8003674:	f7fe f83c 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003678:	f7ff f8bd 	bl	80027f6 <DS3231_GetHour>
 800367c:	4603      	mov	r3, r0
 800367e:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003680:	f7ff f8c5 	bl	800280e <DS3231_GetMinute>
 8003684:	4603      	mov	r3, r0
 8003686:	71bb      	strb	r3, [r7, #6]

	uint8_t Len = sprintf((char*)Msg, "-=SET CLOCK=-");
 8003688:	4984      	ldr	r1, [pc, #528]	; (800389c <showClockSetPanel+0x238>)
 800368a:	4885      	ldr	r0, [pc, #532]	; (80038a0 <showClockSetPanel+0x23c>)
 800368c:	f009 fbe4 	bl	800ce58 <siprintf>
 8003690:	4603      	mov	r3, r0
 8003692:	717b      	strb	r3, [r7, #5]
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003694:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	2300      	movs	r3, #0
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036a2:	220a      	movs	r2, #10
 80036a4:	212f      	movs	r1, #47	; 0x2f
 80036a6:	487e      	ldr	r0, [pc, #504]	; (80038a0 <showClockSetPanel+0x23c>)
 80036a8:	f7fe fa3c 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80036ac:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	2329      	movs	r3, #41	; 0x29
 80036b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036b8:	2129      	movs	r1, #41	; 0x29
 80036ba:	2000      	movs	r0, #0
 80036bc:	f7fd fd68 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80036c0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	232b      	movs	r3, #43	; 0x2b
 80036c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036cc:	212b      	movs	r1, #43	; 0x2b
 80036ce:	2000      	movs	r0, #0
 80036d0:	f7fd fd5e 	bl	8001190 <GFX_DrawLine>

	Len = sprintf((char*)Msg, "GODZINA: %d", CHour);
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	461a      	mov	r2, r3
 80036d8:	4972      	ldr	r1, [pc, #456]	; (80038a4 <showClockSetPanel+0x240>)
 80036da:	4871      	ldr	r0, [pc, #452]	; (80038a0 <showClockSetPanel+0x23c>)
 80036dc:	f009 fbbc 	bl	800ce58 <siprintf>
 80036e0:	4603      	mov	r3, r0
 80036e2:	717b      	strb	r3, [r7, #5]
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80036e4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	2300      	movs	r3, #0
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2300      	movs	r3, #0
 80036f0:	2246      	movs	r2, #70	; 0x46
 80036f2:	2114      	movs	r1, #20
 80036f4:	486a      	ldr	r0, [pc, #424]	; (80038a0 <showClockSetPanel+0x23c>)
 80036f6:	f7fe fa15 	bl	8001b24 <EF_PutString>

	Len = sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 80036fa:	79bb      	ldrb	r3, [r7, #6]
 80036fc:	461a      	mov	r2, r3
 80036fe:	496a      	ldr	r1, [pc, #424]	; (80038a8 <showClockSetPanel+0x244>)
 8003700:	4867      	ldr	r0, [pc, #412]	; (80038a0 <showClockSetPanel+0x23c>)
 8003702:	f009 fba9 	bl	800ce58 <siprintf>
 8003706:	4603      	mov	r3, r0
 8003708:	717b      	strb	r3, [r7, #5]
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800370a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800370e:	9301      	str	r3, [sp, #4]
 8003710:	2301      	movs	r3, #1
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	2300      	movs	r3, #0
 8003716:	226e      	movs	r2, #110	; 0x6e
 8003718:	2114      	movs	r1, #20
 800371a:	4861      	ldr	r0, [pc, #388]	; (80038a0 <showClockSetPanel+0x23c>)
 800371c:	f7fe fa02 	bl	8001b24 <EF_PutString>

	EF_SetFont(&arial_11ptFontInfo);
 8003720:	4862      	ldr	r0, [pc, #392]	; (80038ac <showClockSetPanel+0x248>)
 8003722:	f7fd ffe5 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003726:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	2305      	movs	r3, #5
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	2315      	movs	r3, #21
 8003732:	221e      	movs	r2, #30
 8003734:	214b      	movs	r1, #75	; 0x4b
 8003736:	20f0      	movs	r0, #240	; 0xf0
 8003738:	f7fd ff89 	bl	800164e <GFX_DrawFillRoundRectangle>
	Len = sprintf((char*)Msg, "+1");
 800373c:	495c      	ldr	r1, [pc, #368]	; (80038b0 <showClockSetPanel+0x24c>)
 800373e:	4858      	ldr	r0, [pc, #352]	; (80038a0 <showClockSetPanel+0x23c>)
 8003740:	f009 fb8a 	bl	800ce58 <siprintf>
 8003744:	4603      	mov	r3, r0
 8003746:	717b      	strb	r3, [r7, #5]
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003748:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	2300      	movs	r3, #0
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2300      	movs	r3, #0
 8003754:	224d      	movs	r2, #77	; 0x4d
 8003756:	21f3      	movs	r1, #243	; 0xf3
 8003758:	4851      	ldr	r0, [pc, #324]	; (80038a0 <showClockSetPanel+0x23c>)
 800375a:	f7fe f9e3 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 800375e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	2305      	movs	r3, #5
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2315      	movs	r3, #21
 800376a:	221e      	movs	r2, #30
 800376c:	214b      	movs	r1, #75	; 0x4b
 800376e:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003772:	f7fd ff6c 	bl	800164e <GFX_DrawFillRoundRectangle>
	Len = sprintf((char*)Msg, "+6");
 8003776:	494f      	ldr	r1, [pc, #316]	; (80038b4 <showClockSetPanel+0x250>)
 8003778:	4849      	ldr	r0, [pc, #292]	; (80038a0 <showClockSetPanel+0x23c>)
 800377a:	f009 fb6d 	bl	800ce58 <siprintf>
 800377e:	4603      	mov	r3, r0
 8003780:	717b      	strb	r3, [r7, #5]
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003782:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003786:	9301      	str	r3, [sp, #4]
 8003788:	2300      	movs	r3, #0
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	2300      	movs	r3, #0
 800378e:	224d      	movs	r2, #77	; 0x4d
 8003790:	f240 111d 	movw	r1, #285	; 0x11d
 8003794:	4842      	ldr	r0, [pc, #264]	; (80038a0 <showClockSetPanel+0x23c>)
 8003796:	f7fe f9c5 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 800379a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	2305      	movs	r3, #5
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	2315      	movs	r3, #21
 80037a6:	221e      	movs	r2, #30
 80037a8:	2173      	movs	r1, #115	; 0x73
 80037aa:	20f0      	movs	r0, #240	; 0xf0
 80037ac:	f7fd ff4f 	bl	800164e <GFX_DrawFillRoundRectangle>
	Len = sprintf((char*)Msg, "+1");
 80037b0:	493f      	ldr	r1, [pc, #252]	; (80038b0 <showClockSetPanel+0x24c>)
 80037b2:	483b      	ldr	r0, [pc, #236]	; (80038a0 <showClockSetPanel+0x23c>)
 80037b4:	f009 fb50 	bl	800ce58 <siprintf>
 80037b8:	4603      	mov	r3, r0
 80037ba:	717b      	strb	r3, [r7, #5]
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80037bc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	2300      	movs	r3, #0
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	2300      	movs	r3, #0
 80037c8:	2275      	movs	r2, #117	; 0x75
 80037ca:	21f5      	movs	r1, #245	; 0xf5
 80037cc:	4834      	ldr	r0, [pc, #208]	; (80038a0 <showClockSetPanel+0x23c>)
 80037ce:	f7fe f9a9 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80037d2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	2305      	movs	r3, #5
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	2315      	movs	r3, #21
 80037de:	221e      	movs	r2, #30
 80037e0:	2173      	movs	r1, #115	; 0x73
 80037e2:	f44f 708c 	mov.w	r0, #280	; 0x118
 80037e6:	f7fd ff32 	bl	800164e <GFX_DrawFillRoundRectangle>
	Len = sprintf((char*)Msg, "+10");
 80037ea:	4933      	ldr	r1, [pc, #204]	; (80038b8 <showClockSetPanel+0x254>)
 80037ec:	482c      	ldr	r0, [pc, #176]	; (80038a0 <showClockSetPanel+0x23c>)
 80037ee:	f009 fb33 	bl	800ce58 <siprintf>
 80037f2:	4603      	mov	r3, r0
 80037f4:	717b      	strb	r3, [r7, #5]
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80037f6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	2300      	movs	r3, #0
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2300      	movs	r3, #0
 8003802:	2275      	movs	r2, #117	; 0x75
 8003804:	f240 111b 	movw	r1, #283	; 0x11b
 8003808:	4825      	ldr	r0, [pc, #148]	; (80038a0 <showClockSetPanel+0x23c>)
 800380a:	f7fe f98b 	bl	8001b24 <EF_PutString>

	EF_SetFont(&arial_11ptFontInfo);
 800380e:	4827      	ldr	r0, [pc, #156]	; (80038ac <showClockSetPanel+0x248>)
 8003810:	f7fd ff6e 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003814:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	2305      	movs	r3, #5
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	2314      	movs	r3, #20
 8003820:	2264      	movs	r2, #100	; 0x64
 8003822:	21d8      	movs	r1, #216	; 0xd8
 8003824:	20dc      	movs	r0, #220	; 0xdc
 8003826:	f7fd ff12 	bl	800164e <GFX_DrawFillRoundRectangle>
	Len = sprintf((char*)Msg, "CONFIRM");
 800382a:	4924      	ldr	r1, [pc, #144]	; (80038bc <showClockSetPanel+0x258>)
 800382c:	481c      	ldr	r0, [pc, #112]	; (80038a0 <showClockSetPanel+0x23c>)
 800382e:	f009 fb13 	bl	800ce58 <siprintf>
 8003832:	4603      	mov	r3, r0
 8003834:	717b      	strb	r3, [r7, #5]
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003836:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	2300      	movs	r3, #0
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	2300      	movs	r3, #0
 8003842:	22da      	movs	r2, #218	; 0xda
 8003844:	21e6      	movs	r1, #230	; 0xe6
 8003846:	4816      	ldr	r0, [pc, #88]	; (80038a0 <showClockSetPanel+0x23c>)
 8003848:	f7fe f96c 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800384c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	2305      	movs	r3, #5
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	2314      	movs	r3, #20
 8003858:	2264      	movs	r2, #100	; 0x64
 800385a:	21d8      	movs	r1, #216	; 0xd8
 800385c:	200a      	movs	r0, #10
 800385e:	f7fd fef6 	bl	800164e <GFX_DrawFillRoundRectangle>
	Len = sprintf((char*)Msg, "<=BACK");
 8003862:	4917      	ldr	r1, [pc, #92]	; (80038c0 <showClockSetPanel+0x25c>)
 8003864:	480e      	ldr	r0, [pc, #56]	; (80038a0 <showClockSetPanel+0x23c>)
 8003866:	f009 faf7 	bl	800ce58 <siprintf>
 800386a:	4603      	mov	r3, r0
 800386c:	717b      	strb	r3, [r7, #5]
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800386e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	2300      	movs	r3, #0
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	2300      	movs	r3, #0
 800387a:	22da      	movs	r2, #218	; 0xda
 800387c:	210d      	movs	r1, #13
 800387e:	4808      	ldr	r0, [pc, #32]	; (80038a0 <showClockSetPanel+0x23c>)
 8003880:	f7fe f950 	bl	8001b24 <EF_PutString>

	EF_SetFont(&arialBlack_20ptFontInfo);
 8003884:	4804      	ldr	r0, [pc, #16]	; (8003898 <showClockSetPanel+0x234>)
 8003886:	f7fd ff33 	bl	80016f0 <EF_SetFont>

	Len++;
 800388a:	797b      	ldrb	r3, [r7, #5]
 800388c:	3301      	adds	r3, #1
 800388e:	717b      	strb	r3, [r7, #5]
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	080139f0 	.word	0x080139f0
 800389c:	08010c80 	.word	0x08010c80
 80038a0:	200002b8 	.word	0x200002b8
 80038a4:	08010c90 	.word	0x08010c90
 80038a8:	08010c9c 	.word	0x08010c9c
 80038ac:	08011a78 	.word	0x08011a78
 80038b0:	08010cac 	.word	0x08010cac
 80038b4:	08010cb0 	.word	0x08010cb0
 80038b8:	08010cb4 	.word	0x08010cb4
 80038bc:	08010cb8 	.word	0x08010cb8
 80038c0:	08010cc0 	.word	0x08010cc0

080038c4 <showPreparedActivitiesPanel>:

void showPreparedActivitiesPanel()
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80038ca:	f24c 6018 	movw	r0, #50712	; 0xc618
 80038ce:	f7fe fb13 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80038d2:	4865      	ldr	r0, [pc, #404]	; (8003a68 <showPreparedActivitiesPanel+0x1a4>)
 80038d4:	f7fd ff0c 	bl	80016f0 <EF_SetFont>

	uint8_t Len = sprintf((char*)Msg, "-=ACTIVITIES=-");
 80038d8:	4964      	ldr	r1, [pc, #400]	; (8003a6c <showPreparedActivitiesPanel+0x1a8>)
 80038da:	4865      	ldr	r0, [pc, #404]	; (8003a70 <showPreparedActivitiesPanel+0x1ac>)
 80038dc:	f009 fabc 	bl	800ce58 <siprintf>
 80038e0:	4603      	mov	r3, r0
 80038e2:	71fb      	strb	r3, [r7, #7]
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038e4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	2300      	movs	r3, #0
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	231f      	movs	r3, #31
 80038f0:	220a      	movs	r2, #10
 80038f2:	212f      	movs	r1, #47	; 0x2f
 80038f4:	485e      	ldr	r0, [pc, #376]	; (8003a70 <showPreparedActivitiesPanel+0x1ac>)
 80038f6:	f7fe f915 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80038fa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	2329      	movs	r3, #41	; 0x29
 8003902:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003906:	2129      	movs	r1, #41	; 0x29
 8003908:	2000      	movs	r0, #0
 800390a:	f7fd fc41 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800390e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	232b      	movs	r3, #43	; 0x2b
 8003916:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800391a:	212b      	movs	r1, #43	; 0x2b
 800391c:	2000      	movs	r0, #0
 800391e:	f7fd fc37 	bl	8001190 <GFX_DrawLine>

	EF_SetFont(&arial_11ptFontInfo);
 8003922:	4854      	ldr	r0, [pc, #336]	; (8003a74 <showPreparedActivitiesPanel+0x1b0>)
 8003924:	f7fd fee4 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003928:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	2305      	movs	r3, #5
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	2314      	movs	r3, #20
 8003934:	2264      	movs	r2, #100	; 0x64
 8003936:	21d8      	movs	r1, #216	; 0xd8
 8003938:	200a      	movs	r0, #10
 800393a:	f7fd fe88 	bl	800164e <GFX_DrawFillRoundRectangle>
	Len = sprintf((char*)Msg, "<=BACK");
 800393e:	494e      	ldr	r1, [pc, #312]	; (8003a78 <showPreparedActivitiesPanel+0x1b4>)
 8003940:	484b      	ldr	r0, [pc, #300]	; (8003a70 <showPreparedActivitiesPanel+0x1ac>)
 8003942:	f009 fa89 	bl	800ce58 <siprintf>
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800394a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	2300      	movs	r3, #0
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2300      	movs	r3, #0
 8003956:	22da      	movs	r2, #218	; 0xda
 8003958:	210d      	movs	r1, #13
 800395a:	4845      	ldr	r0, [pc, #276]	; (8003a70 <showPreparedActivitiesPanel+0x1ac>)
 800395c:	f7fe f8e2 	bl	8001b24 <EF_PutString>

	EF_SetFont(&arialBlack_20ptFontInfo);
 8003960:	4841      	ldr	r0, [pc, #260]	; (8003a68 <showPreparedActivitiesPanel+0x1a4>)
 8003962:	f7fd fec5 	bl	80016f0 <EF_SetFont>
	 //
	 // Draw current state of Activities button
	 //
	 // First Button
	 //
	if(ActivityButtonState[0] >= 1)
 8003966:	4b45      	ldr	r3, [pc, #276]	; (8003a7c <showPreparedActivitiesPanel+0x1b8>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d01c      	beq.n	80039a8 <showPreparedActivitiesPanel+0xe4>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800396e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	230a      	movs	r3, #10
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2328      	movs	r3, #40	; 0x28
 800397a:	2278      	movs	r2, #120	; 0x78
 800397c:	213c      	movs	r1, #60	; 0x3c
 800397e:	2064      	movs	r0, #100	; 0x64
 8003980:	f7fd fe65 	bl	800164e <GFX_DrawFillRoundRectangle>
		Len = sprintf((char*)Msg, "KARMIENIE - ON");
 8003984:	493e      	ldr	r1, [pc, #248]	; (8003a80 <showPreparedActivitiesPanel+0x1bc>)
 8003986:	483a      	ldr	r0, [pc, #232]	; (8003a70 <showPreparedActivitiesPanel+0x1ac>)
 8003988:	f009 fa66 	bl	800ce58 <siprintf>
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003990:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	2300      	movs	r3, #0
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	2300      	movs	r3, #0
 800399c:	223e      	movs	r2, #62	; 0x3e
 800399e:	2167      	movs	r1, #103	; 0x67
 80039a0:	4833      	ldr	r0, [pc, #204]	; (8003a70 <showPreparedActivitiesPanel+0x1ac>)
 80039a2:	f7fe f8bf 	bl	8001b24 <EF_PutString>
 80039a6:	e01b      	b.n	80039e0 <showPreparedActivitiesPanel+0x11c>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80039a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	230a      	movs	r3, #10
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	2328      	movs	r3, #40	; 0x28
 80039b4:	2278      	movs	r2, #120	; 0x78
 80039b6:	213c      	movs	r1, #60	; 0x3c
 80039b8:	2064      	movs	r0, #100	; 0x64
 80039ba:	f7fd fe48 	bl	800164e <GFX_DrawFillRoundRectangle>
		Len = sprintf((char*)Msg, "KARMIENIE - OFF");
 80039be:	4931      	ldr	r1, [pc, #196]	; (8003a84 <showPreparedActivitiesPanel+0x1c0>)
 80039c0:	482b      	ldr	r0, [pc, #172]	; (8003a70 <showPreparedActivitiesPanel+0x1ac>)
 80039c2:	f009 fa49 	bl	800ce58 <siprintf>
 80039c6:	4603      	mov	r3, r0
 80039c8:	71fb      	strb	r3, [r7, #7]
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80039ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039ce:	9301      	str	r3, [sp, #4]
 80039d0:	2300      	movs	r3, #0
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	2300      	movs	r3, #0
 80039d6:	223e      	movs	r2, #62	; 0x3e
 80039d8:	2167      	movs	r1, #103	; 0x67
 80039da:	4825      	ldr	r0, [pc, #148]	; (8003a70 <showPreparedActivitiesPanel+0x1ac>)
 80039dc:	f7fe f8a2 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 80039e0:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <showPreparedActivitiesPanel+0x1b8>)
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01c      	beq.n	8003a22 <showPreparedActivitiesPanel+0x15e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80039e8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	230a      	movs	r3, #10
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2328      	movs	r3, #40	; 0x28
 80039f4:	2278      	movs	r2, #120	; 0x78
 80039f6:	2178      	movs	r1, #120	; 0x78
 80039f8:	2064      	movs	r0, #100	; 0x64
 80039fa:	f7fd fe28 	bl	800164e <GFX_DrawFillRoundRectangle>
		Len = sprintf((char*)Msg, "CZYSZCZENIE - ON");
 80039fe:	4922      	ldr	r1, [pc, #136]	; (8003a88 <showPreparedActivitiesPanel+0x1c4>)
 8003a00:	481b      	ldr	r0, [pc, #108]	; (8003a70 <showPreparedActivitiesPanel+0x1ac>)
 8003a02:	f009 fa29 	bl	800ce58 <siprintf>
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003a0a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	2300      	movs	r3, #0
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	2300      	movs	r3, #0
 8003a16:	227a      	movs	r2, #122	; 0x7a
 8003a18:	2167      	movs	r1, #103	; 0x67
 8003a1a:	4815      	ldr	r0, [pc, #84]	; (8003a70 <showPreparedActivitiesPanel+0x1ac>)
 8003a1c:	f7fe f882 	bl	8001b24 <EF_PutString>
 8003a20:	e01b      	b.n	8003a5a <showPreparedActivitiesPanel+0x196>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003a22:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	230a      	movs	r3, #10
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2328      	movs	r3, #40	; 0x28
 8003a2e:	2278      	movs	r2, #120	; 0x78
 8003a30:	2178      	movs	r1, #120	; 0x78
 8003a32:	2064      	movs	r0, #100	; 0x64
 8003a34:	f7fd fe0b 	bl	800164e <GFX_DrawFillRoundRectangle>
		Len = sprintf((char*)Msg, "CZYSZCZENIE - OFF");
 8003a38:	4914      	ldr	r1, [pc, #80]	; (8003a8c <showPreparedActivitiesPanel+0x1c8>)
 8003a3a:	480d      	ldr	r0, [pc, #52]	; (8003a70 <showPreparedActivitiesPanel+0x1ac>)
 8003a3c:	f009 fa0c 	bl	800ce58 <siprintf>
 8003a40:	4603      	mov	r3, r0
 8003a42:	71fb      	strb	r3, [r7, #7]
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003a44:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	227a      	movs	r2, #122	; 0x7a
 8003a52:	2167      	movs	r1, #103	; 0x67
 8003a54:	4806      	ldr	r0, [pc, #24]	; (8003a70 <showPreparedActivitiesPanel+0x1ac>)
 8003a56:	f7fe f865 	bl	8001b24 <EF_PutString>
	}

	Len++;
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	71fb      	strb	r3, [r7, #7]
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	080139f0 	.word	0x080139f0
 8003a6c:	08010cc8 	.word	0x08010cc8
 8003a70:	200002b8 	.word	0x200002b8
 8003a74:	08011a78 	.word	0x08011a78
 8003a78:	08010cc0 	.word	0x08010cc0
 8003a7c:	2000026c 	.word	0x2000026c
 8003a80:	08010cd8 	.word	0x08010cd8
 8003a84:	08010ce8 	.word	0x08010ce8
 8003a88:	08010cf8 	.word	0x08010cf8
 8003a8c:	08010d0c 	.word	0x08010d0c

08003a90 <predefinedActivityCzyszczenie>:

void predefinedActivityCzyszczenie(uint8_t State)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10c      	bne.n	8003abe <predefinedActivityCzyszczenie+0x2e>
	{
		SendComand(UCMD_RELAY_1_ON);
 8003aa4:	2005      	movs	r0, #5
 8003aa6:	f001 fb5d 	bl	8005164 <SendComand>
		SendComand(UCMD_RELAY_2_ON);
 8003aaa:	2007      	movs	r0, #7
 8003aac:	f001 fb5a 	bl	8005164 <SendComand>
		SendComand(UCMD_RELAY_3_ON);
 8003ab0:	2009      	movs	r0, #9
 8003ab2:	f001 fb57 	bl	8005164 <SendComand>
		SendComand(UCMD_RELAY_4_ON);
 8003ab6:	200b      	movs	r0, #11
 8003ab8:	f001 fb54 	bl	8005164 <SendComand>
		SendComand(UCMD_LIGHT_1_ON);
		SendComand(UCMD_LIGHT_2_ON);
		SendComand(UCMD_LIGHT_3_ON);
		SendComand(UCMD_LIGHT_4_ON);
	}
}
 8003abc:	e017      	b.n	8003aee <predefinedActivityCzyszczenie+0x5e>
		SendComand(UCMD_RELAY_1_OFF);
 8003abe:	2006      	movs	r0, #6
 8003ac0:	f001 fb50 	bl	8005164 <SendComand>
		SendComand(UCMD_RELAY_2_OFF);
 8003ac4:	2008      	movs	r0, #8
 8003ac6:	f001 fb4d 	bl	8005164 <SendComand>
		SendComand(UCMD_RELAY_3_OFF);
 8003aca:	200a      	movs	r0, #10
 8003acc:	f001 fb4a 	bl	8005164 <SendComand>
		SendComand(UCMD_RELAY_4_OFF);
 8003ad0:	200c      	movs	r0, #12
 8003ad2:	f001 fb47 	bl	8005164 <SendComand>
		SendComand(UCMD_LIGHT_1_ON);
 8003ad6:	200d      	movs	r0, #13
 8003ad8:	f001 fb44 	bl	8005164 <SendComand>
		SendComand(UCMD_LIGHT_2_ON);
 8003adc:	200f      	movs	r0, #15
 8003ade:	f001 fb41 	bl	8005164 <SendComand>
		SendComand(UCMD_LIGHT_3_ON);
 8003ae2:	2011      	movs	r0, #17
 8003ae4:	f001 fb3e 	bl	8005164 <SendComand>
		SendComand(UCMD_LIGHT_4_ON);
 8003ae8:	2013      	movs	r0, #19
 8003aea:	f001 fb3b 	bl	8005164 <SendComand>
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <predefinedActivityKarmienie>:

void predefinedActivityKarmienie(uint8_t State)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10c      	bne.n	8003b26 <predefinedActivityKarmienie+0x2e>
	{
		SendComand(UCMD_RELAY_1_ON);
 8003b0c:	2005      	movs	r0, #5
 8003b0e:	f001 fb29 	bl	8005164 <SendComand>
		SendComand(UCMD_RELAY_2_ON);
 8003b12:	2007      	movs	r0, #7
 8003b14:	f001 fb26 	bl	8005164 <SendComand>
		SendComand(UCMD_RELAY_3_ON);
 8003b18:	2009      	movs	r0, #9
 8003b1a:	f001 fb23 	bl	8005164 <SendComand>
		SendComand(UCMD_RELAY_4_ON);
 8003b1e:	200b      	movs	r0, #11
 8003b20:	f001 fb20 	bl	8005164 <SendComand>
		SendComand(UCMD_RELAY_3_OFF);
		SendComand(UCMD_RELAY_4_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8003b24:	e00e      	b.n	8003b44 <predefinedActivityKarmienie+0x4c>
		SendComand(UCMD_RELAY_1_OFF);
 8003b26:	2006      	movs	r0, #6
 8003b28:	f001 fb1c 	bl	8005164 <SendComand>
		SendComand(UCMD_RELAY_2_OFF);
 8003b2c:	2008      	movs	r0, #8
 8003b2e:	f001 fb19 	bl	8005164 <SendComand>
		SendComand(UCMD_RELAY_3_OFF);
 8003b32:	200a      	movs	r0, #10
 8003b34:	f001 fb16 	bl	8005164 <SendComand>
		SendComand(UCMD_RELAY_4_OFF);
 8003b38:	200c      	movs	r0, #12
 8003b3a:	f001 fb13 	bl	8005164 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8003b3e:	4803      	ldr	r0, [pc, #12]	; (8003b4c <predefinedActivityKarmienie+0x54>)
 8003b40:	f006 ff3a 	bl	800a9b8 <HAL_TIM_Base_Start_IT>
}
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000580 	.word	0x20000580

08003b50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b56:	f107 0314 	add.w	r3, r7, #20
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	605a      	str	r2, [r3, #4]
 8003b60:	609a      	str	r2, [r3, #8]
 8003b62:	60da      	str	r2, [r3, #12]
 8003b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	4b3f      	ldr	r3, [pc, #252]	; (8003c68 <MX_GPIO_Init+0x118>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4a3e      	ldr	r2, [pc, #248]	; (8003c68 <MX_GPIO_Init+0x118>)
 8003b70:	f043 0304 	orr.w	r3, r3, #4
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30
 8003b76:	4b3c      	ldr	r3, [pc, #240]	; (8003c68 <MX_GPIO_Init+0x118>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	4b38      	ldr	r3, [pc, #224]	; (8003c68 <MX_GPIO_Init+0x118>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <MX_GPIO_Init+0x118>)
 8003b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b90:	6313      	str	r3, [r2, #48]	; 0x30
 8003b92:	4b35      	ldr	r3, [pc, #212]	; (8003c68 <MX_GPIO_Init+0x118>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <MX_GPIO_Init+0x118>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	4a30      	ldr	r2, [pc, #192]	; (8003c68 <MX_GPIO_Init+0x118>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6313      	str	r3, [r2, #48]	; 0x30
 8003bae:	4b2e      	ldr	r3, [pc, #184]	; (8003c68 <MX_GPIO_Init+0x118>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <MX_GPIO_Init+0x118>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <MX_GPIO_Init+0x118>)
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bca:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <MX_GPIO_Init+0x118>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	607b      	str	r3, [r7, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bdc:	4823      	ldr	r0, [pc, #140]	; (8003c6c <MX_GPIO_Init+0x11c>)
 8003bde:	f003 f98d 	bl	8006efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8003be2:	2200      	movs	r2, #0
 8003be4:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8003be8:	4821      	ldr	r0, [pc, #132]	; (8003c70 <MX_GPIO_Init+0x120>)
 8003bea:	f003 f987 	bl	8006efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 8003bee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8003c00:	f107 0314 	add.w	r3, r7, #20
 8003c04:	4619      	mov	r1, r3
 8003c06:	4819      	ldr	r0, [pc, #100]	; (8003c6c <MX_GPIO_Init+0x11c>)
 8003c08:	f002 ffdc 	bl	8006bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTC_IRQ_Pin;
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c16:	2301      	movs	r3, #1
 8003c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003c1a:	f107 0314 	add.w	r3, r7, #20
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4814      	ldr	r0, [pc, #80]	; (8003c74 <MX_GPIO_Init+0x124>)
 8003c22:	f002 ffcf 	bl	8006bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8003c26:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8003c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c34:	2300      	movs	r3, #0
 8003c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c38:	f107 0314 	add.w	r3, r7, #20
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	480c      	ldr	r0, [pc, #48]	; (8003c70 <MX_GPIO_Init+0x120>)
 8003c40:	f002 ffc0 	bl	8006bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003c54:	f107 0314 	add.w	r3, r7, #20
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4806      	ldr	r0, [pc, #24]	; (8003c74 <MX_GPIO_Init+0x124>)
 8003c5c:	f002 ffb2 	bl	8006bc4 <HAL_GPIO_Init>

}
 8003c60:	bf00      	nop
 8003c62:	3728      	adds	r7, #40	; 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40020800 	.word	0x40020800
 8003c70:	40020400 	.word	0x40020400
 8003c74:	40020000 	.word	0x40020000

08003c78 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003c7e:	4a13      	ldr	r2, [pc, #76]	; (8003ccc <MX_I2C1_Init+0x54>)
 8003c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003c82:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003c84:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <MX_I2C1_Init+0x58>)
 8003c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ca8:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cb4:	4804      	ldr	r0, [pc, #16]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003cb6:	f003 f96d 	bl	8006f94 <HAL_I2C_Init>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003cc0:	f000 f988 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	200002d8 	.word	0x200002d8
 8003ccc:	40005400 	.word	0x40005400
 8003cd0:	000186a0 	.word	0x000186a0

08003cd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <HAL_I2C_MspInit+0x94>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d133      	bne.n	8003d5e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <HAL_I2C_MspInit+0x98>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	4a1b      	ldr	r2, [pc, #108]	; (8003d6c <HAL_I2C_MspInit+0x98>)
 8003d00:	f043 0302 	orr.w	r3, r3, #2
 8003d04:	6313      	str	r3, [r2, #48]	; 0x30
 8003d06:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <HAL_I2C_MspInit+0x98>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d12:	23c0      	movs	r3, #192	; 0xc0
 8003d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d16:	2312      	movs	r3, #18
 8003d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d22:	2304      	movs	r3, #4
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d26:	f107 0314 	add.w	r3, r7, #20
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4810      	ldr	r0, [pc, #64]	; (8003d70 <HAL_I2C_MspInit+0x9c>)
 8003d2e:	f002 ff49 	bl	8006bc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <HAL_I2C_MspInit+0x98>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	4a0c      	ldr	r2, [pc, #48]	; (8003d6c <HAL_I2C_MspInit+0x98>)
 8003d3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d40:	6413      	str	r3, [r2, #64]	; 0x40
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <HAL_I2C_MspInit+0x98>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2100      	movs	r1, #0
 8003d52:	2020      	movs	r0, #32
 8003d54:	f002 fac5 	bl	80062e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003d58:	2020      	movs	r0, #32
 8003d5a:	f002 fade 	bl	800631a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003d5e:	bf00      	nop
 8003d60:	3728      	adds	r7, #40	; 0x28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40005400 	.word	0x40005400
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40020400 	.word	0x40020400

08003d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d78:	f002 f8de 	bl	8005f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d7c:	f000 f84c 	bl	8003e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d80:	f7ff fee6 	bl	8003b50 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003d84:	f001 fb30 	bl	80053e8 <MX_SPI1_Init>
  MX_DMA_Init();
 8003d88:	f7fe fbb4 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003d8c:	f001 ffd4 	bl	8005d38 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8003d90:	f001 fb60 	bl	8005454 <MX_SPI3_Init>
  MX_I2C1_Init();
 8003d94:	f7ff ff70 	bl	8003c78 <MX_I2C1_Init>
  MX_TIM11_Init();
 8003d98:	f001 fdc2 	bl	8005920 <MX_TIM11_Init>
  MX_TIM10_Init();
 8003d9c:	f001 fd9c 	bl	80058d8 <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003da0:	f000 f8a2 	bl	8003ee8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 8003da4:	4816      	ldr	r0, [pc, #88]	; (8003e00 <main+0x8c>)
 8003da6:	f006 fe07 	bl	800a9b8 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 8003daa:	4816      	ldr	r0, [pc, #88]	; (8003e04 <main+0x90>)
 8003dac:	f7fe f902 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8003db0:	4915      	ldr	r1, [pc, #84]	; (8003e08 <main+0x94>)
 8003db2:	4816      	ldr	r0, [pc, #88]	; (8003e0c <main+0x98>)
 8003db4:	f001 ff71 	bl	8005c9a <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 8003db8:	2117      	movs	r1, #23
 8003dba:	4815      	ldr	r0, [pc, #84]	; (8003e10 <main+0x9c>)
 8003dbc:	f7fe fb4a 	bl	8002454 <XPT2046_Init>
  // RTC Initialization
  DS3231_Init(&hi2c1);
 8003dc0:	4814      	ldr	r0, [pc, #80]	; (8003e14 <main+0xa0>)
 8003dc2:	f7fe fbbf 	bl	8002544 <DS3231_Init>
//  __disable_irq();
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8003dc6:	2001      	movs	r0, #1
 8003dc8:	f7fe fc16 	bl	80025f8 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 8003dcc:	2001      	movs	r0, #1
 8003dce:	f7fe fc33 	bl	8002638 <DS3231_EnableOscillator>
  DS3231_EnableAlarm2(DS3231_ENABLED);
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	f7fe fc51 	bl	800267a <DS3231_EnableAlarm2>
  DS3231_SetAlarm2Mode(DS3231_A2_EVERY_M);
 8003dd8:	2007      	movs	r0, #7
 8003dda:	f7fe fc87 	bl	80026ec <DS3231_SetAlarm2Mode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8003dde:	480b      	ldr	r0, [pc, #44]	; (8003e0c <main+0x98>)
 8003de0:	f001 ff0f 	bl	8005c02 <UARTDMA_IsDataReceivedReady>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <main+0x7c>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8003dea:	4808      	ldr	r0, [pc, #32]	; (8003e0c <main+0x98>)
 8003dec:	f000 ff78 	bl	8004ce0 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8003df0:	4806      	ldr	r0, [pc, #24]	; (8003e0c <main+0x98>)
 8003df2:	f001 ff18 	bl	8005c26 <UARTDMA_TransmitEvent>

	  //
	  // TOUCH
	  //
	  XPT2046_Task();
 8003df6:	f7fe fa5b 	bl	80022b0 <XPT2046_Task>


	  MenuTFT();
 8003dfa:	f000 f8f1 	bl	8003fe0 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8003dfe:	e7ee      	b.n	8003dde <main+0x6a>
 8003e00:	200005c8 	.word	0x200005c8
 8003e04:	20000528 	.word	0x20000528
 8003e08:	200006d0 	.word	0x200006d0
 8003e0c:	2000032c 	.word	0x2000032c
 8003e10:	200004d0 	.word	0x200004d0
 8003e14:	200002d8 	.word	0x200002d8

08003e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b094      	sub	sp, #80	; 0x50
 8003e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e1e:	f107 0320 	add.w	r3, r7, #32
 8003e22:	2230      	movs	r2, #48	; 0x30
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f008 f98e 	bl	800c148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e2c:	f107 030c 	add.w	r3, r7, #12
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	4b27      	ldr	r3, [pc, #156]	; (8003ee0 <SystemClock_Config+0xc8>)
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	4a26      	ldr	r2, [pc, #152]	; (8003ee0 <SystemClock_Config+0xc8>)
 8003e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4c:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <SystemClock_Config+0xc8>)
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e58:	2300      	movs	r3, #0
 8003e5a:	607b      	str	r3, [r7, #4]
 8003e5c:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <SystemClock_Config+0xcc>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a20      	ldr	r2, [pc, #128]	; (8003ee4 <SystemClock_Config+0xcc>)
 8003e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <SystemClock_Config+0xcc>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e70:	607b      	str	r3, [r7, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e74:	2301      	movs	r3, #1
 8003e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003e88:	230c      	movs	r3, #12
 8003e8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003e8c:	2360      	movs	r3, #96	; 0x60
 8003e8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e90:	2302      	movs	r3, #2
 8003e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e94:	2304      	movs	r3, #4
 8003e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e98:	f107 0320 	add.w	r3, r7, #32
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f005 fcdf 	bl	8009860 <HAL_RCC_OscConfig>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003ea8:	f000 f894 	bl	8003fd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eac:	230f      	movs	r3, #15
 8003eae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003ec2:	f107 030c 	add.w	r3, r7, #12
 8003ec6:	2103      	movs	r1, #3
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f005 ff41 	bl	8009d50 <HAL_RCC_ClockConfig>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003ed4:	f000 f87e 	bl	8003fd4 <Error_Handler>
  }
}
 8003ed8:	bf00      	nop
 8003eda:	3750      	adds	r7, #80	; 0x50
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40007000 	.word	0x40007000

08003ee8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003eec:	2200      	movs	r2, #0
 8003eee:	2100      	movs	r1, #0
 8003ef0:	200a      	movs	r0, #10
 8003ef2:	f002 f9f6 	bl	80062e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003ef6:	200a      	movs	r0, #10
 8003ef8:	f002 fa0f 	bl	800631a <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003efc:	2200      	movs	r2, #0
 8003efe:	2100      	movs	r1, #0
 8003f00:	2017      	movs	r0, #23
 8003f02:	f002 f9ee 	bl	80062e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003f06:	2017      	movs	r0, #23
 8003f08:	f002 fa07 	bl	800631a <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2100      	movs	r1, #0
 8003f10:	201f      	movs	r0, #31
 8003f12:	f002 f9e6 	bl	80062e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003f16:	201f      	movs	r0, #31
 8003f18:	f002 f9ff 	bl	800631a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2100      	movs	r1, #0
 8003f20:	2026      	movs	r0, #38	; 0x26
 8003f22:	f002 f9de 	bl	80062e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f26:	2026      	movs	r0, #38	; 0x26
 8003f28:	f002 f9f7 	bl	800631a <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2100      	movs	r1, #0
 8003f30:	2033      	movs	r0, #51	; 0x33
 8003f32:	f002 f9d6 	bl	80062e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003f36:	2033      	movs	r0, #51	; 0x33
 8003f38:	f002 f9ef 	bl	800631a <HAL_NVIC_EnableIRQ>
}
 8003f3c:	bf00      	nop
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen();
 8003f52:	f7fe ff3d 	bl	8002dd0 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a10      	ldr	r2, [pc, #64]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d117      	bne.n	8003f90 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S)
 8003f60:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d90d      	bls.n	8003f84 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin);
 8003f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f6c:	480d      	ldr	r0, [pc, #52]	; (8003fa4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003f6e:	f002 ffde 	bl	8006f2e <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8003f72:	2000      	movs	r0, #0
 8003f74:	f7ff fdc0 	bl	8003af8 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8003f7e:	480a      	ldr	r0, [pc, #40]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003f80:	f006 fd7c 	bl	800aa7c <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003f8e:	701a      	strb	r2, [r3, #0]
	}
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40014800 	.word	0x40014800
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	20000248 	.word	0x20000248
 8003fa4:	40020800 	.word	0x40020800
 8003fa8:	20000580 	.word	0x20000580

08003fac <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin)
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fbc:	d101      	bne.n	8003fc2 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8003fbe:	f7fe fa3d 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == RTC_IRQ_Pin) // Interrupt from RTC - alarm one per minute
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	2b10      	cmp	r3, #16
 8003fc6:	d101      	bne.n	8003fcc <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8003fc8:	f7fe fb7a 	bl	80026c0 <DS3231_ClearAlarm2Flag>

	}
}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd8:	b672      	cpsid	i
}
 8003fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fdc:	e7fe      	b.n	8003fdc <Error_Handler+0x8>
	...

08003fe0 <MenuTFT>:
uint32_t TimerTouch = 0; // Timer to debouncing function

MenuTFTState State = MENUTFT_INIT; // Initialization state for MenuTFT State Machine

void MenuTFT(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
	switch(State)
 8003fe4:	4b34      	ldr	r3, [pc, #208]	; (80040b8 <MenuTFT+0xd8>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b05      	cmp	r3, #5
 8003fea:	d862      	bhi.n	80040b2 <MenuTFT+0xd2>
 8003fec:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <MenuTFT+0x14>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	0800400d 	.word	0x0800400d
 8003ff8:	0800401f 	.word	0x0800401f
 8003ffc:	08004053 	.word	0x08004053
 8004000:	08004083 	.word	0x08004083
 8004004:	0800409b 	.word	0x0800409b
 8004008:	0800406b 	.word	0x0800406b
	{
	case MENUTFT_INIT:
		system_init();
 800400c:	f7fe fc80 	bl	8002910 <system_init>
		State = MENUTFT_PARAMETERS;
 8004010:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <MenuTFT+0xd8>)
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8004016:	4b29      	ldr	r3, [pc, #164]	; (80040bc <MenuTFT+0xdc>)
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
		break;
 800401c:	e049      	b.n	80040b2 <MenuTFT+0xd2>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1)
 800401e:	4b27      	ldr	r3, [pc, #156]	; (80040bc <MenuTFT+0xdc>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d112      	bne.n	800404c <MenuTFT+0x6c>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8004026:	4b26      	ldr	r3, [pc, #152]	; (80040c0 <MenuTFT+0xe0>)
 8004028:	edd3 7a00 	vldr	s15, [r3]
 800402c:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <MenuTFT+0xe4>)
 800402e:	ed93 7a00 	vldr	s14, [r3]
 8004032:	eeb0 1a47 	vmov.f32	s2, s14
 8004036:	2100      	movs	r1, #0
 8004038:	2000      	movs	r0, #0
 800403a:	eddf 0a23 	vldr	s1, [pc, #140]	; 80040c8 <MenuTFT+0xe8>
 800403e:	eeb0 0a67 	vmov.f32	s0, s15
 8004042:	f7fe fd59 	bl	8002af8 <showCurrentParameters>
			StateChangeFlag = 0;
 8004046:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <MenuTFT+0xdc>)
 8004048:	2200      	movs	r2, #0
 800404a:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 800404c:	f000 f83e 	bl	80040cc <TouchParametersActivity>
		break;
 8004050:	e02f      	b.n	80040b2 <MenuTFT+0xd2>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1)
 8004052:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <MenuTFT+0xdc>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d104      	bne.n	8004064 <MenuTFT+0x84>
		{
			showControlPanel();
 800405a:	f7fe ff27 	bl	8002eac <showControlPanel>
			StateChangeFlag = 0;
 800405e:	4b17      	ldr	r3, [pc, #92]	; (80040bc <MenuTFT+0xdc>)
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8004064:	f000 f892 	bl	800418c <TouchSwitchActivity>
		break;
 8004068:	e023      	b.n	80040b2 <MenuTFT+0xd2>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1)
 800406a:	4b14      	ldr	r3, [pc, #80]	; (80040bc <MenuTFT+0xdc>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d104      	bne.n	800407c <MenuTFT+0x9c>
		{
			showLightsControlPanel();
 8004072:	f7ff f923 	bl	80032bc <showLightsControlPanel>
			StateChangeFlag = 0;
 8004076:	4b11      	ldr	r3, [pc, #68]	; (80040bc <MenuTFT+0xdc>)
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 800407c:	f000 fa62 	bl	8004544 <TouchLightsActivity>
		break;
 8004080:	e017      	b.n	80040b2 <MenuTFT+0xd2>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1)
 8004082:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <MenuTFT+0xdc>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d104      	bne.n	8004094 <MenuTFT+0xb4>
		{
			showClockSetPanel();
 800408a:	f7ff faeb 	bl	8003664 <showClockSetPanel>
			StateChangeFlag = 0;
 800408e:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <MenuTFT+0xdc>)
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8004094:	f000 fc0c 	bl	80048b0 <TouchClockActivity>
		break;
 8004098:	e00b      	b.n	80040b2 <MenuTFT+0xd2>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1)
 800409a:	4b08      	ldr	r3, [pc, #32]	; (80040bc <MenuTFT+0xdc>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d104      	bne.n	80040ac <MenuTFT+0xcc>
		{
			showPreparedActivitiesPanel();
 80040a2:	f7ff fc0f 	bl	80038c4 <showPreparedActivitiesPanel>
			StateChangeFlag =0;
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <MenuTFT+0xdc>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 80040ac:	f000 fd32 	bl	8004b14 <TouchPredefinedActivityActivity>
		break;
 80040b0:	bf00      	nop
	}
}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000250 	.word	0x20000250
 80040bc:	20000249 	.word	0x20000249
 80040c0:	20000254 	.word	0x20000254
 80040c4:	20000258 	.word	0x20000258
 80040c8:	00000000 	.word	0x00000000

080040cc <TouchParametersActivity>:


void TouchParametersActivity(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80040d2:	f7fe f8db 	bl	800228c <XPT2046_IsTouched>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d04c      	beq.n	8004176 <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80040dc:	f001 ff92 	bl	8006004 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b27      	ldr	r3, [pc, #156]	; (8004180 <TouchParametersActivity+0xb4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ec:	d343      	bcc.n	8004176 <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80040ee:	1d3a      	adds	r2, r7, #4
 80040f0:	1dbb      	adds	r3, r7, #6
 80040f2:	4611      	mov	r1, r2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe f88b 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	2b09      	cmp	r3, #9
 80040fe:	d90f      	bls.n	8004120 <TouchParametersActivity+0x54>
 8004100:	88fb      	ldrh	r3, [r7, #6]
 8004102:	2b6e      	cmp	r3, #110	; 0x6e
 8004104:	d80c      	bhi.n	8004120 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004106:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004108:	2bd7      	cmp	r3, #215	; 0xd7
 800410a:	d909      	bls.n	8004120 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800410c:	88bb      	ldrh	r3, [r7, #4]
 800410e:	2bec      	cmp	r3, #236	; 0xec
 8004110:	d806      	bhi.n	8004120 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 8004112:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <TouchParametersActivity+0xb8>)
 8004114:	2205      	movs	r2, #5
 8004116:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <TouchParametersActivity+0xbc>)
 800411a:	2201      	movs	r2, #1
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	e025      	b.n	800416c <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	2bdb      	cmp	r3, #219	; 0xdb
 8004124:	d910      	bls.n	8004148 <TouchParametersActivity+0x7c>
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800412c:	d80c      	bhi.n	8004148 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800412e:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004130:	2bd7      	cmp	r3, #215	; 0xd7
 8004132:	d909      	bls.n	8004148 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004134:	88bb      	ldrh	r3, [r7, #4]
 8004136:	2bec      	cmp	r3, #236	; 0xec
 8004138:	d806      	bhi.n	8004148 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 800413a:	4b12      	ldr	r3, [pc, #72]	; (8004184 <TouchParametersActivity+0xb8>)
 800413c:	2202      	movs	r2, #2
 800413e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <TouchParametersActivity+0xbc>)
 8004142:	2201      	movs	r2, #1
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e011      	b.n	800416c <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	2b77      	cmp	r3, #119	; 0x77
 800414c:	d90e      	bls.n	800416c <TouchParametersActivity+0xa0>
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	2bd2      	cmp	r3, #210	; 0xd2
 8004152:	d80b      	bhi.n	800416c <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004154:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004156:	2bd7      	cmp	r3, #215	; 0xd7
 8004158:	d908      	bls.n	800416c <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800415a:	88bb      	ldrh	r3, [r7, #4]
 800415c:	2bec      	cmp	r3, #236	; 0xec
 800415e:	d805      	bhi.n	800416c <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8004160:	4b08      	ldr	r3, [pc, #32]	; (8004184 <TouchParametersActivity+0xb8>)
 8004162:	2203      	movs	r2, #3
 8004164:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <TouchParametersActivity+0xbc>)
 8004168:	2201      	movs	r2, #1
 800416a:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 800416c:	f001 ff4a 	bl	8006004 <HAL_GetTick>
 8004170:	4603      	mov	r3, r0
 8004172:	4a03      	ldr	r2, [pc, #12]	; (8004180 <TouchParametersActivity+0xb4>)
 8004174:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	2000024c 	.word	0x2000024c
 8004184:	20000250 	.word	0x20000250
 8004188:	20000249 	.word	0x20000249

0800418c <TouchSwitchActivity>:

void TouchSwitchActivity(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8004192:	f7fe f87b 	bl	800228c <XPT2046_IsTouched>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 81c3 	beq.w	8004524 <TouchSwitchActivity+0x398>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800419e:	f001 ff31 	bl	8006004 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	4ba8      	ldr	r3, [pc, #672]	; (8004448 <TouchSwitchActivity+0x2bc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ae:	f0c0 81b9 	bcc.w	8004524 <TouchSwitchActivity+0x398>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80041b2:	1cba      	adds	r2, r7, #2
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	4611      	mov	r1, r2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe f829 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80041be:	88bb      	ldrh	r3, [r7, #4]
 80041c0:	2b09      	cmp	r3, #9
 80041c2:	d90f      	bls.n	80041e4 <TouchSwitchActivity+0x58>
 80041c4:	88bb      	ldrh	r3, [r7, #4]
 80041c6:	2b6e      	cmp	r3, #110	; 0x6e
 80041c8:	d80c      	bhi.n	80041e4 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80041ca:	887b      	ldrh	r3, [r7, #2]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80041cc:	2bd7      	cmp	r3, #215	; 0xd7
 80041ce:	d909      	bls.n	80041e4 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80041d0:	887b      	ldrh	r3, [r7, #2]
 80041d2:	2bec      	cmp	r3, #236	; 0xec
 80041d4:	d806      	bhi.n	80041e4 <TouchSwitchActivity+0x58>
			{
				State = MENUTFT_PARAMETERS;
 80041d6:	4b9d      	ldr	r3, [pc, #628]	; (800444c <TouchSwitchActivity+0x2c0>)
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80041dc:	4b9c      	ldr	r3, [pc, #624]	; (8004450 <TouchSwitchActivity+0x2c4>)
 80041de:	2201      	movs	r2, #1
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e19a      	b.n	800451a <TouchSwitchActivity+0x38e>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80041e4:	88bb      	ldrh	r3, [r7, #4]
 80041e6:	2bdb      	cmp	r3, #219	; 0xdb
 80041e8:	d910      	bls.n	800420c <TouchSwitchActivity+0x80>
 80041ea:	88bb      	ldrh	r3, [r7, #4]
 80041ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80041f0:	d80c      	bhi.n	800420c <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80041f2:	887b      	ldrh	r3, [r7, #2]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80041f4:	2bd7      	cmp	r3, #215	; 0xd7
 80041f6:	d909      	bls.n	800420c <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80041f8:	887b      	ldrh	r3, [r7, #2]
 80041fa:	2bec      	cmp	r3, #236	; 0xec
 80041fc:	d806      	bhi.n	800420c <TouchSwitchActivity+0x80>
			{
				State = MENUTFT_LIGHTS;
 80041fe:	4b93      	ldr	r3, [pc, #588]	; (800444c <TouchSwitchActivity+0x2c0>)
 8004200:	2205      	movs	r2, #5
 8004202:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004204:	4b92      	ldr	r3, [pc, #584]	; (8004450 <TouchSwitchActivity+0x2c4>)
 8004206:	2201      	movs	r2, #1
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	e186      	b.n	800451a <TouchSwitchActivity+0x38e>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800420c:	88bb      	ldrh	r3, [r7, #4]
 800420e:	2b77      	cmp	r3, #119	; 0x77
 8004210:	d90f      	bls.n	8004232 <TouchSwitchActivity+0xa6>
 8004212:	88bb      	ldrh	r3, [r7, #4]
 8004214:	2bd2      	cmp	r3, #210	; 0xd2
 8004216:	d80c      	bhi.n	8004232 <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004218:	887b      	ldrh	r3, [r7, #2]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800421a:	2bd7      	cmp	r3, #215	; 0xd7
 800421c:	d909      	bls.n	8004232 <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	2bec      	cmp	r3, #236	; 0xec
 8004222:	d806      	bhi.n	8004232 <TouchSwitchActivity+0xa6>
			{
				State = MENUTFT_ACTIVITIES;
 8004224:	4b89      	ldr	r3, [pc, #548]	; (800444c <TouchSwitchActivity+0x2c0>)
 8004226:	2204      	movs	r2, #4
 8004228:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800422a:	4b89      	ldr	r3, [pc, #548]	; (8004450 <TouchSwitchActivity+0x2c4>)
 800422c:	2201      	movs	r2, #1
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	e173      	b.n	800451a <TouchSwitchActivity+0x38e>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 8004232:	88bb      	ldrh	r3, [r7, #4]
 8004234:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004238:	f0c0 816f 	bcc.w	800451a <TouchSwitchActivity+0x38e>
 800423c:	88bb      	ldrh	r3, [r7, #4]
 800423e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8004242:	f080 816a 	bcs.w	800451a <TouchSwitchActivity+0x38e>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8004246:	4883      	ldr	r0, [pc, #524]	; (8004454 <TouchSwitchActivity+0x2c8>)
 8004248:	f7fd fa52 	bl	80016f0 <EF_SetFont>
				uint8_t Len = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	71fb      	strb	r3, [r7, #7]
				if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))	//FIRST SWITCH
 8004250:	887b      	ldrh	r3, [r7, #2]
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d950      	bls.n	80042f8 <TouchSwitchActivity+0x16c>
 8004256:	887b      	ldrh	r3, [r7, #2]
 8004258:	2b56      	cmp	r3, #86	; 0x56
 800425a:	d84d      	bhi.n	80042f8 <TouchSwitchActivity+0x16c>
				{
					if(SwitchesButtonState[0] >= 1) // if is ON
 800425c:	4b7e      	ldr	r3, [pc, #504]	; (8004458 <TouchSwitchActivity+0x2cc>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d024      	beq.n	80042ae <TouchSwitchActivity+0x122>
					{
						SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8004264:	2006      	movs	r0, #6
 8004266:	f000 ff7d 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800426a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	2305      	movs	r3, #5
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	2315      	movs	r3, #21
 8004276:	2221      	movs	r2, #33	; 0x21
 8004278:	2141      	movs	r1, #65	; 0x41
 800427a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800427e:	f7fd f9e6 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 8004282:	4976      	ldr	r1, [pc, #472]	; (800445c <TouchSwitchActivity+0x2d0>)
 8004284:	4876      	ldr	r0, [pc, #472]	; (8004460 <TouchSwitchActivity+0x2d4>)
 8004286:	f008 fde7 	bl	800ce58 <siprintf>
 800428a:	4603      	mov	r3, r0
 800428c:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800428e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	2300      	movs	r3, #0
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	2300      	movs	r3, #0
 800429a:	2243      	movs	r2, #67	; 0x43
 800429c:	f240 1111 	movw	r1, #273	; 0x111
 80042a0:	486f      	ldr	r0, [pc, #444]	; (8004460 <TouchSwitchActivity+0x2d4>)
 80042a2:	f7fd fc3f 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 0;
 80042a6:	4b6c      	ldr	r3, [pc, #432]	; (8004458 <TouchSwitchActivity+0x2cc>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]
					if(SwitchesButtonState[0] >= 1) // if is ON
 80042ac:	e12f      	b.n	800450e <TouchSwitchActivity+0x382>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 80042ae:	2005      	movs	r0, #5
 80042b0:	f000 ff58 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80042b4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	2305      	movs	r3, #5
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	2315      	movs	r3, #21
 80042c0:	2221      	movs	r2, #33	; 0x21
 80042c2:	2141      	movs	r1, #65	; 0x41
 80042c4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80042c8:	f7fd f9c1 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 80042cc:	4965      	ldr	r1, [pc, #404]	; (8004464 <TouchSwitchActivity+0x2d8>)
 80042ce:	4864      	ldr	r0, [pc, #400]	; (8004460 <TouchSwitchActivity+0x2d4>)
 80042d0:	f008 fdc2 	bl	800ce58 <siprintf>
 80042d4:	4603      	mov	r3, r0
 80042d6:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80042d8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	2300      	movs	r3, #0
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	2300      	movs	r3, #0
 80042e4:	2243      	movs	r2, #67	; 0x43
 80042e6:	f240 1111 	movw	r1, #273	; 0x111
 80042ea:	485d      	ldr	r0, [pc, #372]	; (8004460 <TouchSwitchActivity+0x2d4>)
 80042ec:	f7fd fc1a 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 1;
 80042f0:	4b59      	ldr	r3, [pc, #356]	; (8004458 <TouchSwitchActivity+0x2cc>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	701a      	strb	r2, [r3, #0]
					if(SwitchesButtonState[0] >= 1) // if is ON
 80042f6:	e10a      	b.n	800450e <TouchSwitchActivity+0x382>
					}

				}
				else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))	//SECOND SWITCH
 80042f8:	887b      	ldrh	r3, [r7, #2]
 80042fa:	2b5e      	cmp	r3, #94	; 0x5e
 80042fc:	d950      	bls.n	80043a0 <TouchSwitchActivity+0x214>
 80042fe:	887b      	ldrh	r3, [r7, #2]
 8004300:	2b74      	cmp	r3, #116	; 0x74
 8004302:	d84d      	bhi.n	80043a0 <TouchSwitchActivity+0x214>
				{
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004304:	4b54      	ldr	r3, [pc, #336]	; (8004458 <TouchSwitchActivity+0x2cc>)
 8004306:	785b      	ldrb	r3, [r3, #1]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d024      	beq.n	8004356 <TouchSwitchActivity+0x1ca>
					{
						SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 800430c:	2008      	movs	r0, #8
 800430e:	f000 ff29 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004312:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	2305      	movs	r3, #5
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	2315      	movs	r3, #21
 800431e:	2221      	movs	r2, #33	; 0x21
 8004320:	215f      	movs	r1, #95	; 0x5f
 8004322:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004326:	f7fd f992 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 800432a:	494c      	ldr	r1, [pc, #304]	; (800445c <TouchSwitchActivity+0x2d0>)
 800432c:	484c      	ldr	r0, [pc, #304]	; (8004460 <TouchSwitchActivity+0x2d4>)
 800432e:	f008 fd93 	bl	800ce58 <siprintf>
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004336:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	2300      	movs	r3, #0
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	2300      	movs	r3, #0
 8004342:	2261      	movs	r2, #97	; 0x61
 8004344:	f240 1111 	movw	r1, #273	; 0x111
 8004348:	4845      	ldr	r0, [pc, #276]	; (8004460 <TouchSwitchActivity+0x2d4>)
 800434a:	f7fd fbeb 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 0;
 800434e:	4b42      	ldr	r3, [pc, #264]	; (8004458 <TouchSwitchActivity+0x2cc>)
 8004350:	2200      	movs	r2, #0
 8004352:	705a      	strb	r2, [r3, #1]
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004354:	e0db      	b.n	800450e <TouchSwitchActivity+0x382>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8004356:	2007      	movs	r0, #7
 8004358:	f000 ff04 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800435c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004360:	9301      	str	r3, [sp, #4]
 8004362:	2305      	movs	r3, #5
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	2315      	movs	r3, #21
 8004368:	2221      	movs	r2, #33	; 0x21
 800436a:	215f      	movs	r1, #95	; 0x5f
 800436c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004370:	f7fd f96d 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 8004374:	493b      	ldr	r1, [pc, #236]	; (8004464 <TouchSwitchActivity+0x2d8>)
 8004376:	483a      	ldr	r0, [pc, #232]	; (8004460 <TouchSwitchActivity+0x2d4>)
 8004378:	f008 fd6e 	bl	800ce58 <siprintf>
 800437c:	4603      	mov	r3, r0
 800437e:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004380:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	2300      	movs	r3, #0
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	2300      	movs	r3, #0
 800438c:	2261      	movs	r2, #97	; 0x61
 800438e:	f240 1111 	movw	r1, #273	; 0x111
 8004392:	4833      	ldr	r0, [pc, #204]	; (8004460 <TouchSwitchActivity+0x2d4>)
 8004394:	f7fd fbc6 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 1;
 8004398:	4b2f      	ldr	r3, [pc, #188]	; (8004458 <TouchSwitchActivity+0x2cc>)
 800439a:	2201      	movs	r2, #1
 800439c:	705a      	strb	r2, [r3, #1]
					if(SwitchesButtonState[1] >= 1) // if is ON
 800439e:	e0b6      	b.n	800450e <TouchSwitchActivity+0x382>
					}
				}
				else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))	//THIRD SWITCH
 80043a0:	887b      	ldrh	r3, [r7, #2]
 80043a2:	2b7c      	cmp	r3, #124	; 0x7c
 80043a4:	d960      	bls.n	8004468 <TouchSwitchActivity+0x2dc>
 80043a6:	887b      	ldrh	r3, [r7, #2]
 80043a8:	2b92      	cmp	r3, #146	; 0x92
 80043aa:	d85d      	bhi.n	8004468 <TouchSwitchActivity+0x2dc>
				{
					if(SwitchesButtonState[2] >= 1) // if is ON
 80043ac:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <TouchSwitchActivity+0x2cc>)
 80043ae:	789b      	ldrb	r3, [r3, #2]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d024      	beq.n	80043fe <TouchSwitchActivity+0x272>
					{
						SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 80043b4:	200a      	movs	r0, #10
 80043b6:	f000 fed5 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80043ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	2305      	movs	r3, #5
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	2315      	movs	r3, #21
 80043c6:	2221      	movs	r2, #33	; 0x21
 80043c8:	217d      	movs	r1, #125	; 0x7d
 80043ca:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80043ce:	f7fd f93e 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 80043d2:	4922      	ldr	r1, [pc, #136]	; (800445c <TouchSwitchActivity+0x2d0>)
 80043d4:	4822      	ldr	r0, [pc, #136]	; (8004460 <TouchSwitchActivity+0x2d4>)
 80043d6:	f008 fd3f 	bl	800ce58 <siprintf>
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80043de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	227f      	movs	r2, #127	; 0x7f
 80043ec:	f240 1111 	movw	r1, #273	; 0x111
 80043f0:	481b      	ldr	r0, [pc, #108]	; (8004460 <TouchSwitchActivity+0x2d4>)
 80043f2:	f7fd fb97 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 0;
 80043f6:	4b18      	ldr	r3, [pc, #96]	; (8004458 <TouchSwitchActivity+0x2cc>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	709a      	strb	r2, [r3, #2]
					if(SwitchesButtonState[2] >= 1) // if is ON
 80043fc:	e087      	b.n	800450e <TouchSwitchActivity+0x382>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 80043fe:	2009      	movs	r0, #9
 8004400:	f000 feb0 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004404:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004408:	9301      	str	r3, [sp, #4]
 800440a:	2305      	movs	r3, #5
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	2315      	movs	r3, #21
 8004410:	2221      	movs	r2, #33	; 0x21
 8004412:	217d      	movs	r1, #125	; 0x7d
 8004414:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004418:	f7fd f919 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 800441c:	4911      	ldr	r1, [pc, #68]	; (8004464 <TouchSwitchActivity+0x2d8>)
 800441e:	4810      	ldr	r0, [pc, #64]	; (8004460 <TouchSwitchActivity+0x2d4>)
 8004420:	f008 fd1a 	bl	800ce58 <siprintf>
 8004424:	4603      	mov	r3, r0
 8004426:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004428:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	2300      	movs	r3, #0
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	2300      	movs	r3, #0
 8004434:	227f      	movs	r2, #127	; 0x7f
 8004436:	f240 1111 	movw	r1, #273	; 0x111
 800443a:	4809      	ldr	r0, [pc, #36]	; (8004460 <TouchSwitchActivity+0x2d4>)
 800443c:	f7fd fb72 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 1;
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <TouchSwitchActivity+0x2cc>)
 8004442:	2201      	movs	r2, #1
 8004444:	709a      	strb	r2, [r3, #2]
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004446:	e062      	b.n	800450e <TouchSwitchActivity+0x382>
 8004448:	2000024c 	.word	0x2000024c
 800444c:	20000250 	.word	0x20000250
 8004450:	20000249 	.word	0x20000249
 8004454:	08011a78 	.word	0x08011a78
 8004458:	20000264 	.word	0x20000264
 800445c:	08010d20 	.word	0x08010d20
 8004460:	200002b8 	.word	0x200002b8
 8004464:	08010d24 	.word	0x08010d24
					}
				}
				else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))	//FOURTH SWITCH
 8004468:	887b      	ldrh	r3, [r7, #2]
 800446a:	2b9a      	cmp	r3, #154	; 0x9a
 800446c:	d94f      	bls.n	800450e <TouchSwitchActivity+0x382>
 800446e:	887b      	ldrh	r3, [r7, #2]
 8004470:	2bb0      	cmp	r3, #176	; 0xb0
 8004472:	d84c      	bhi.n	800450e <TouchSwitchActivity+0x382>
				{
					if(SwitchesButtonState[3] >= 1) // if is ON
 8004474:	4b2d      	ldr	r3, [pc, #180]	; (800452c <TouchSwitchActivity+0x3a0>)
 8004476:	78db      	ldrb	r3, [r3, #3]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d024      	beq.n	80044c6 <TouchSwitchActivity+0x33a>
					{
						SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 800447c:	200c      	movs	r0, #12
 800447e:	f000 fe71 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004482:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	2305      	movs	r3, #5
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	2315      	movs	r3, #21
 800448e:	2221      	movs	r2, #33	; 0x21
 8004490:	219b      	movs	r1, #155	; 0x9b
 8004492:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004496:	f7fd f8da 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 800449a:	4925      	ldr	r1, [pc, #148]	; (8004530 <TouchSwitchActivity+0x3a4>)
 800449c:	4825      	ldr	r0, [pc, #148]	; (8004534 <TouchSwitchActivity+0x3a8>)
 800449e:	f008 fcdb 	bl	800ce58 <siprintf>
 80044a2:	4603      	mov	r3, r0
 80044a4:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80044a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	2300      	movs	r3, #0
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	2300      	movs	r3, #0
 80044b2:	229d      	movs	r2, #157	; 0x9d
 80044b4:	f240 1111 	movw	r1, #273	; 0x111
 80044b8:	481e      	ldr	r0, [pc, #120]	; (8004534 <TouchSwitchActivity+0x3a8>)
 80044ba:	f7fd fb33 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 0;
 80044be:	4b1b      	ldr	r3, [pc, #108]	; (800452c <TouchSwitchActivity+0x3a0>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	70da      	strb	r2, [r3, #3]
 80044c4:	e023      	b.n	800450e <TouchSwitchActivity+0x382>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 80044c6:	200b      	movs	r0, #11
 80044c8:	f000 fe4c 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80044cc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	2305      	movs	r3, #5
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	2315      	movs	r3, #21
 80044d8:	2221      	movs	r2, #33	; 0x21
 80044da:	219b      	movs	r1, #155	; 0x9b
 80044dc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80044e0:	f7fd f8b5 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 80044e4:	4914      	ldr	r1, [pc, #80]	; (8004538 <TouchSwitchActivity+0x3ac>)
 80044e6:	4813      	ldr	r0, [pc, #76]	; (8004534 <TouchSwitchActivity+0x3a8>)
 80044e8:	f008 fcb6 	bl	800ce58 <siprintf>
 80044ec:	4603      	mov	r3, r0
 80044ee:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80044f0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	2300      	movs	r3, #0
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	2300      	movs	r3, #0
 80044fc:	229d      	movs	r2, #157	; 0x9d
 80044fe:	f240 1111 	movw	r1, #273	; 0x111
 8004502:	480c      	ldr	r0, [pc, #48]	; (8004534 <TouchSwitchActivity+0x3a8>)
 8004504:	f7fd fb0e 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 1;
 8004508:	4b08      	ldr	r3, [pc, #32]	; (800452c <TouchSwitchActivity+0x3a0>)
 800450a:	2201      	movs	r2, #1
 800450c:	70da      	strb	r2, [r3, #3]
					}
				}
				Len++;
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	3301      	adds	r3, #1
 8004512:	71fb      	strb	r3, [r7, #7]
				EF_SetFont(&arialBlack_20ptFontInfo);
 8004514:	4809      	ldr	r0, [pc, #36]	; (800453c <TouchSwitchActivity+0x3b0>)
 8004516:	f7fd f8eb 	bl	80016f0 <EF_SetFont>
			}
			TimerTouch = HAL_GetTick();
 800451a:	f001 fd73 	bl	8006004 <HAL_GetTick>
 800451e:	4603      	mov	r3, r0
 8004520:	4a07      	ldr	r2, [pc, #28]	; (8004540 <TouchSwitchActivity+0x3b4>)
 8004522:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000264 	.word	0x20000264
 8004530:	08010d20 	.word	0x08010d20
 8004534:	200002b8 	.word	0x200002b8
 8004538:	08010d24 	.word	0x08010d24
 800453c:	080139f0 	.word	0x080139f0
 8004540:	2000024c 	.word	0x2000024c

08004544 <TouchLightsActivity>:

void TouchLightsActivity(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 800454a:	f7fd fe9f 	bl	800228c <XPT2046_IsTouched>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 819e 	beq.w	8004892 <TouchLightsActivity+0x34e>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004556:	f001 fd55 	bl	8006004 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	4bae      	ldr	r3, [pc, #696]	; (8004818 <TouchLightsActivity+0x2d4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004566:	f0c0 8194 	bcc.w	8004892 <TouchLightsActivity+0x34e>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800456a:	1cba      	adds	r2, r7, #2
 800456c:	1d3b      	adds	r3, r7, #4
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f7fd fe4d 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004576:	88bb      	ldrh	r3, [r7, #4]
 8004578:	2b09      	cmp	r3, #9
 800457a:	d90f      	bls.n	800459c <TouchLightsActivity+0x58>
 800457c:	88bb      	ldrh	r3, [r7, #4]
 800457e:	2b6e      	cmp	r3, #110	; 0x6e
 8004580:	d80c      	bhi.n	800459c <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004582:	887b      	ldrh	r3, [r7, #2]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004584:	2bd7      	cmp	r3, #215	; 0xd7
 8004586:	d909      	bls.n	800459c <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004588:	887b      	ldrh	r3, [r7, #2]
 800458a:	2bec      	cmp	r3, #236	; 0xec
 800458c:	d806      	bhi.n	800459c <TouchLightsActivity+0x58>
			{
				State = MENUTFT_SWITCH;
 800458e:	4ba3      	ldr	r3, [pc, #652]	; (800481c <TouchLightsActivity+0x2d8>)
 8004590:	2202      	movs	r2, #2
 8004592:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004594:	4ba2      	ldr	r3, [pc, #648]	; (8004820 <TouchLightsActivity+0x2dc>)
 8004596:	2201      	movs	r2, #1
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e175      	b.n	8004888 <TouchLightsActivity+0x344>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800459c:	88bb      	ldrh	r3, [r7, #4]
 800459e:	2bdb      	cmp	r3, #219	; 0xdb
 80045a0:	d910      	bls.n	80045c4 <TouchLightsActivity+0x80>
 80045a2:	88bb      	ldrh	r3, [r7, #4]
 80045a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80045a8:	d80c      	bhi.n	80045c4 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80045aa:	887b      	ldrh	r3, [r7, #2]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80045ac:	2bd7      	cmp	r3, #215	; 0xd7
 80045ae:	d909      	bls.n	80045c4 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80045b0:	887b      	ldrh	r3, [r7, #2]
 80045b2:	2bec      	cmp	r3, #236	; 0xec
 80045b4:	d806      	bhi.n	80045c4 <TouchLightsActivity+0x80>
			{
				State = MENUTFT_PARAMETERS;
 80045b6:	4b99      	ldr	r3, [pc, #612]	; (800481c <TouchLightsActivity+0x2d8>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80045bc:	4b98      	ldr	r3, [pc, #608]	; (8004820 <TouchLightsActivity+0x2dc>)
 80045be:	2201      	movs	r2, #1
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	e161      	b.n	8004888 <TouchLightsActivity+0x344>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 80045c4:	88bb      	ldrh	r3, [r7, #4]
 80045c6:	2bc7      	cmp	r3, #199	; 0xc7
 80045c8:	f240 815e 	bls.w	8004888 <TouchLightsActivity+0x344>
 80045cc:	88bb      	ldrh	r3, [r7, #4]
 80045ce:	2be9      	cmp	r3, #233	; 0xe9
 80045d0:	f200 815a 	bhi.w	8004888 <TouchLightsActivity+0x344>
			{
				EF_SetFont(&arial_11ptFontInfo);
 80045d4:	4893      	ldr	r0, [pc, #588]	; (8004824 <TouchLightsActivity+0x2e0>)
 80045d6:	f7fd f88b 	bl	80016f0 <EF_SetFont>
				uint8_t Len = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	71fb      	strb	r3, [r7, #7]
				if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H))) // FIRST LIGHT
 80045de:	887b      	ldrh	r3, [r7, #2]
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d94c      	bls.n	800467e <TouchLightsActivity+0x13a>
 80045e4:	887b      	ldrh	r3, [r7, #2]
 80045e6:	2b56      	cmp	r3, #86	; 0x56
 80045e8:	d849      	bhi.n	800467e <TouchLightsActivity+0x13a>
				{
					if(LightsButtonState[0] >= 1) // if is ON
 80045ea:	4b8f      	ldr	r3, [pc, #572]	; (8004828 <TouchLightsActivity+0x2e4>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d022      	beq.n	8004638 <TouchLightsActivity+0xf4>
					{
						SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 80045f2:	200e      	movs	r0, #14
 80045f4:	f000 fdb6 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80045f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	2305      	movs	r3, #5
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	2315      	movs	r3, #21
 8004604:	2221      	movs	r2, #33	; 0x21
 8004606:	2141      	movs	r1, #65	; 0x41
 8004608:	20c8      	movs	r0, #200	; 0xc8
 800460a:	f7fd f820 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 800460e:	4987      	ldr	r1, [pc, #540]	; (800482c <TouchLightsActivity+0x2e8>)
 8004610:	4887      	ldr	r0, [pc, #540]	; (8004830 <TouchLightsActivity+0x2ec>)
 8004612:	f008 fc21 	bl	800ce58 <siprintf>
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800461a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	2300      	movs	r3, #0
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	2300      	movs	r3, #0
 8004626:	2243      	movs	r2, #67	; 0x43
 8004628:	21cb      	movs	r1, #203	; 0xcb
 800462a:	4881      	ldr	r0, [pc, #516]	; (8004830 <TouchLightsActivity+0x2ec>)
 800462c:	f7fd fa7a 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 0;
 8004630:	4b7d      	ldr	r3, [pc, #500]	; (8004828 <TouchLightsActivity+0x2e4>)
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
					if(LightsButtonState[0] >= 1) // if is ON
 8004636:	e121      	b.n	800487c <TouchLightsActivity+0x338>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8004638:	200d      	movs	r0, #13
 800463a:	f000 fd93 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800463e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	2305      	movs	r3, #5
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2315      	movs	r3, #21
 800464a:	2221      	movs	r2, #33	; 0x21
 800464c:	2141      	movs	r1, #65	; 0x41
 800464e:	20c8      	movs	r0, #200	; 0xc8
 8004650:	f7fc fffd 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 8004654:	4977      	ldr	r1, [pc, #476]	; (8004834 <TouchLightsActivity+0x2f0>)
 8004656:	4876      	ldr	r0, [pc, #472]	; (8004830 <TouchLightsActivity+0x2ec>)
 8004658:	f008 fbfe 	bl	800ce58 <siprintf>
 800465c:	4603      	mov	r3, r0
 800465e:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004660:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004664:	9301      	str	r3, [sp, #4]
 8004666:	2300      	movs	r3, #0
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	2300      	movs	r3, #0
 800466c:	2243      	movs	r2, #67	; 0x43
 800466e:	21cb      	movs	r1, #203	; 0xcb
 8004670:	486f      	ldr	r0, [pc, #444]	; (8004830 <TouchLightsActivity+0x2ec>)
 8004672:	f7fd fa57 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 1;
 8004676:	4b6c      	ldr	r3, [pc, #432]	; (8004828 <TouchLightsActivity+0x2e4>)
 8004678:	2201      	movs	r2, #1
 800467a:	701a      	strb	r2, [r3, #0]
					if(LightsButtonState[0] >= 1) // if is ON
 800467c:	e0fe      	b.n	800487c <TouchLightsActivity+0x338>
					}
				}
				else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H))) // SECOND LIGHT
 800467e:	887b      	ldrh	r3, [r7, #2]
 8004680:	2b5e      	cmp	r3, #94	; 0x5e
 8004682:	d94c      	bls.n	800471e <TouchLightsActivity+0x1da>
 8004684:	887b      	ldrh	r3, [r7, #2]
 8004686:	2b74      	cmp	r3, #116	; 0x74
 8004688:	d849      	bhi.n	800471e <TouchLightsActivity+0x1da>
				{
					if(LightsButtonState[1] >= 1) // if is ON
 800468a:	4b67      	ldr	r3, [pc, #412]	; (8004828 <TouchLightsActivity+0x2e4>)
 800468c:	785b      	ldrb	r3, [r3, #1]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d022      	beq.n	80046d8 <TouchLightsActivity+0x194>
					{
						SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8004692:	2010      	movs	r0, #16
 8004694:	f000 fd66 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004698:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	2305      	movs	r3, #5
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	2315      	movs	r3, #21
 80046a4:	2221      	movs	r2, #33	; 0x21
 80046a6:	215f      	movs	r1, #95	; 0x5f
 80046a8:	20c8      	movs	r0, #200	; 0xc8
 80046aa:	f7fc ffd0 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 80046ae:	495f      	ldr	r1, [pc, #380]	; (800482c <TouchLightsActivity+0x2e8>)
 80046b0:	485f      	ldr	r0, [pc, #380]	; (8004830 <TouchLightsActivity+0x2ec>)
 80046b2:	f008 fbd1 	bl	800ce58 <siprintf>
 80046b6:	4603      	mov	r3, r0
 80046b8:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80046ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	2300      	movs	r3, #0
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2300      	movs	r3, #0
 80046c6:	2261      	movs	r2, #97	; 0x61
 80046c8:	21cb      	movs	r1, #203	; 0xcb
 80046ca:	4859      	ldr	r0, [pc, #356]	; (8004830 <TouchLightsActivity+0x2ec>)
 80046cc:	f7fd fa2a 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 0;
 80046d0:	4b55      	ldr	r3, [pc, #340]	; (8004828 <TouchLightsActivity+0x2e4>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	705a      	strb	r2, [r3, #1]
					if(LightsButtonState[1] >= 1) // if is ON
 80046d6:	e0d1      	b.n	800487c <TouchLightsActivity+0x338>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 80046d8:	200f      	movs	r0, #15
 80046da:	f000 fd43 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80046de:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	2305      	movs	r3, #5
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2315      	movs	r3, #21
 80046ea:	2221      	movs	r2, #33	; 0x21
 80046ec:	215f      	movs	r1, #95	; 0x5f
 80046ee:	20c8      	movs	r0, #200	; 0xc8
 80046f0:	f7fc ffad 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 80046f4:	494f      	ldr	r1, [pc, #316]	; (8004834 <TouchLightsActivity+0x2f0>)
 80046f6:	484e      	ldr	r0, [pc, #312]	; (8004830 <TouchLightsActivity+0x2ec>)
 80046f8:	f008 fbae 	bl	800ce58 <siprintf>
 80046fc:	4603      	mov	r3, r0
 80046fe:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004700:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	2300      	movs	r3, #0
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	2300      	movs	r3, #0
 800470c:	2261      	movs	r2, #97	; 0x61
 800470e:	21cb      	movs	r1, #203	; 0xcb
 8004710:	4847      	ldr	r0, [pc, #284]	; (8004830 <TouchLightsActivity+0x2ec>)
 8004712:	f7fd fa07 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 1;
 8004716:	4b44      	ldr	r3, [pc, #272]	; (8004828 <TouchLightsActivity+0x2e4>)
 8004718:	2201      	movs	r2, #1
 800471a:	705a      	strb	r2, [r3, #1]
					if(LightsButtonState[1] >= 1) // if is ON
 800471c:	e0ae      	b.n	800487c <TouchLightsActivity+0x338>
					}
				}
				else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H))) // THIRD LIGHT
 800471e:	887b      	ldrh	r3, [r7, #2]
 8004720:	2b7c      	cmp	r3, #124	; 0x7c
 8004722:	d94c      	bls.n	80047be <TouchLightsActivity+0x27a>
 8004724:	887b      	ldrh	r3, [r7, #2]
 8004726:	2b92      	cmp	r3, #146	; 0x92
 8004728:	d849      	bhi.n	80047be <TouchLightsActivity+0x27a>
				{
					if(LightsButtonState[2] >= 1) // if is ON
 800472a:	4b3f      	ldr	r3, [pc, #252]	; (8004828 <TouchLightsActivity+0x2e4>)
 800472c:	789b      	ldrb	r3, [r3, #2]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d022      	beq.n	8004778 <TouchLightsActivity+0x234>
					{
						SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8004732:	2012      	movs	r0, #18
 8004734:	f000 fd16 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004738:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	2305      	movs	r3, #5
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	2315      	movs	r3, #21
 8004744:	2221      	movs	r2, #33	; 0x21
 8004746:	217d      	movs	r1, #125	; 0x7d
 8004748:	20c8      	movs	r0, #200	; 0xc8
 800474a:	f7fc ff80 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 800474e:	4937      	ldr	r1, [pc, #220]	; (800482c <TouchLightsActivity+0x2e8>)
 8004750:	4837      	ldr	r0, [pc, #220]	; (8004830 <TouchLightsActivity+0x2ec>)
 8004752:	f008 fb81 	bl	800ce58 <siprintf>
 8004756:	4603      	mov	r3, r0
 8004758:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800475a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	2300      	movs	r3, #0
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	2300      	movs	r3, #0
 8004766:	227f      	movs	r2, #127	; 0x7f
 8004768:	21cb      	movs	r1, #203	; 0xcb
 800476a:	4831      	ldr	r0, [pc, #196]	; (8004830 <TouchLightsActivity+0x2ec>)
 800476c:	f7fd f9da 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 0;
 8004770:	4b2d      	ldr	r3, [pc, #180]	; (8004828 <TouchLightsActivity+0x2e4>)
 8004772:	2200      	movs	r2, #0
 8004774:	709a      	strb	r2, [r3, #2]
					if(LightsButtonState[2] >= 1) // if is ON
 8004776:	e081      	b.n	800487c <TouchLightsActivity+0x338>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8004778:	2011      	movs	r0, #17
 800477a:	f000 fcf3 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800477e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	2305      	movs	r3, #5
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	2315      	movs	r3, #21
 800478a:	2221      	movs	r2, #33	; 0x21
 800478c:	217d      	movs	r1, #125	; 0x7d
 800478e:	20c8      	movs	r0, #200	; 0xc8
 8004790:	f7fc ff5d 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 8004794:	4927      	ldr	r1, [pc, #156]	; (8004834 <TouchLightsActivity+0x2f0>)
 8004796:	4826      	ldr	r0, [pc, #152]	; (8004830 <TouchLightsActivity+0x2ec>)
 8004798:	f008 fb5e 	bl	800ce58 <siprintf>
 800479c:	4603      	mov	r3, r0
 800479e:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80047a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	2300      	movs	r3, #0
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	2300      	movs	r3, #0
 80047ac:	227f      	movs	r2, #127	; 0x7f
 80047ae:	21cb      	movs	r1, #203	; 0xcb
 80047b0:	481f      	ldr	r0, [pc, #124]	; (8004830 <TouchLightsActivity+0x2ec>)
 80047b2:	f7fd f9b7 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 1;
 80047b6:	4b1c      	ldr	r3, [pc, #112]	; (8004828 <TouchLightsActivity+0x2e4>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	709a      	strb	r2, [r3, #2]
					if(LightsButtonState[2] >= 1) // if is ON
 80047bc:	e05e      	b.n	800487c <TouchLightsActivity+0x338>
					}
				}
				else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H))) // FOURTH LIGHT
 80047be:	887b      	ldrh	r3, [r7, #2]
 80047c0:	2b9a      	cmp	r3, #154	; 0x9a
 80047c2:	d95b      	bls.n	800487c <TouchLightsActivity+0x338>
 80047c4:	887b      	ldrh	r3, [r7, #2]
 80047c6:	2bb0      	cmp	r3, #176	; 0xb0
 80047c8:	d858      	bhi.n	800487c <TouchLightsActivity+0x338>
				{
					if(LightsButtonState[3] >= 1) // if is ON
 80047ca:	4b17      	ldr	r3, [pc, #92]	; (8004828 <TouchLightsActivity+0x2e4>)
 80047cc:	78db      	ldrb	r3, [r3, #3]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d032      	beq.n	8004838 <TouchLightsActivity+0x2f4>
					{
						SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 80047d2:	2014      	movs	r0, #20
 80047d4:	f000 fcc6 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80047d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	2305      	movs	r3, #5
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	2315      	movs	r3, #21
 80047e4:	2221      	movs	r2, #33	; 0x21
 80047e6:	219b      	movs	r1, #155	; 0x9b
 80047e8:	20c8      	movs	r0, #200	; 0xc8
 80047ea:	f7fc ff30 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 80047ee:	490f      	ldr	r1, [pc, #60]	; (800482c <TouchLightsActivity+0x2e8>)
 80047f0:	480f      	ldr	r0, [pc, #60]	; (8004830 <TouchLightsActivity+0x2ec>)
 80047f2:	f008 fb31 	bl	800ce58 <siprintf>
 80047f6:	4603      	mov	r3, r0
 80047f8:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80047fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047fe:	9301      	str	r3, [sp, #4]
 8004800:	2300      	movs	r3, #0
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	2300      	movs	r3, #0
 8004806:	229d      	movs	r2, #157	; 0x9d
 8004808:	21cb      	movs	r1, #203	; 0xcb
 800480a:	4809      	ldr	r0, [pc, #36]	; (8004830 <TouchLightsActivity+0x2ec>)
 800480c:	f7fd f98a 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 0;
 8004810:	4b05      	ldr	r3, [pc, #20]	; (8004828 <TouchLightsActivity+0x2e4>)
 8004812:	2200      	movs	r2, #0
 8004814:	70da      	strb	r2, [r3, #3]
 8004816:	e031      	b.n	800487c <TouchLightsActivity+0x338>
 8004818:	2000024c 	.word	0x2000024c
 800481c:	20000250 	.word	0x20000250
 8004820:	20000249 	.word	0x20000249
 8004824:	08011a78 	.word	0x08011a78
 8004828:	20000268 	.word	0x20000268
 800482c:	08010d20 	.word	0x08010d20
 8004830:	200002b8 	.word	0x200002b8
 8004834:	08010d24 	.word	0x08010d24
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8004838:	2013      	movs	r0, #19
 800483a:	f000 fc93 	bl	8005164 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800483e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	2305      	movs	r3, #5
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	2315      	movs	r3, #21
 800484a:	2221      	movs	r2, #33	; 0x21
 800484c:	219b      	movs	r1, #155	; 0x9b
 800484e:	20c8      	movs	r0, #200	; 0xc8
 8004850:	f7fc fefd 	bl	800164e <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 8004854:	4911      	ldr	r1, [pc, #68]	; (800489c <TouchLightsActivity+0x358>)
 8004856:	4812      	ldr	r0, [pc, #72]	; (80048a0 <TouchLightsActivity+0x35c>)
 8004858:	f008 fafe 	bl	800ce58 <siprintf>
 800485c:	4603      	mov	r3, r0
 800485e:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004860:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	2300      	movs	r3, #0
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	2300      	movs	r3, #0
 800486c:	229d      	movs	r2, #157	; 0x9d
 800486e:	21cb      	movs	r1, #203	; 0xcb
 8004870:	480b      	ldr	r0, [pc, #44]	; (80048a0 <TouchLightsActivity+0x35c>)
 8004872:	f7fd f957 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 1;
 8004876:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <TouchLightsActivity+0x360>)
 8004878:	2201      	movs	r2, #1
 800487a:	70da      	strb	r2, [r3, #3]
					}
				}
				Len++;
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	3301      	adds	r3, #1
 8004880:	71fb      	strb	r3, [r7, #7]
				EF_SetFont(&arialBlack_20ptFontInfo);
 8004882:	4809      	ldr	r0, [pc, #36]	; (80048a8 <TouchLightsActivity+0x364>)
 8004884:	f7fc ff34 	bl	80016f0 <EF_SetFont>
			}

			TimerTouch = HAL_GetTick();
 8004888:	f001 fbbc 	bl	8006004 <HAL_GetTick>
 800488c:	4603      	mov	r3, r0
 800488e:	4a07      	ldr	r2, [pc, #28]	; (80048ac <TouchLightsActivity+0x368>)
 8004890:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	08010d24 	.word	0x08010d24
 80048a0:	200002b8 	.word	0x200002b8
 80048a4:	20000268 	.word	0x20000268
 80048a8:	080139f0 	.word	0x080139f0
 80048ac:	2000024c 	.word	0x2000024c

080048b0 <TouchClockActivity>:

void TouchClockActivity(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 80048b6:	f7fd fce9 	bl	800228c <XPT2046_IsTouched>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8113 	beq.w	8004ae8 <TouchClockActivity+0x238>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80048c2:	488b      	ldr	r0, [pc, #556]	; (8004af0 <TouchClockActivity+0x240>)
 80048c4:	f7fc ff14 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80048c8:	f001 fb9c 	bl	8006004 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b89      	ldr	r3, [pc, #548]	; (8004af4 <TouchClockActivity+0x244>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048d8:	f0c0 8106 	bcc.w	8004ae8 <TouchClockActivity+0x238>
			{
				uint16_t x, y; // Touch points


				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80048dc:	1cba      	adds	r2, r7, #2
 80048de:	1d3b      	adds	r3, r7, #4
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fd fc94 	bl	8002210 <XPT2046_GetTouchPoint>

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80048e8:	88bb      	ldrh	r3, [r7, #4]
 80048ea:	2b09      	cmp	r3, #9
 80048ec:	d90f      	bls.n	800490e <TouchClockActivity+0x5e>
 80048ee:	88bb      	ldrh	r3, [r7, #4]
 80048f0:	2b6e      	cmp	r3, #110	; 0x6e
 80048f2:	d80c      	bhi.n	800490e <TouchClockActivity+0x5e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80048f4:	887b      	ldrh	r3, [r7, #2]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80048f6:	2bd7      	cmp	r3, #215	; 0xd7
 80048f8:	d909      	bls.n	800490e <TouchClockActivity+0x5e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80048fa:	887b      	ldrh	r3, [r7, #2]
 80048fc:	2bec      	cmp	r3, #236	; 0xec
 80048fe:	d806      	bhi.n	800490e <TouchClockActivity+0x5e>
				{
					State = MENUTFT_PARAMETERS;
 8004900:	4b7d      	ldr	r3, [pc, #500]	; (8004af8 <TouchClockActivity+0x248>)
 8004902:	2201      	movs	r2, #1
 8004904:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8004906:	4b7d      	ldr	r3, [pc, #500]	; (8004afc <TouchClockActivity+0x24c>)
 8004908:	2201      	movs	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	e0e7      	b.n	8004ade <TouchClockActivity+0x22e>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800490e:	88bb      	ldrh	r3, [r7, #4]
 8004910:	2bdb      	cmp	r3, #219	; 0xdb
 8004912:	d927      	bls.n	8004964 <TouchClockActivity+0xb4>
 8004914:	88bb      	ldrh	r3, [r7, #4]
 8004916:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800491a:	d823      	bhi.n	8004964 <TouchClockActivity+0xb4>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800491c:	887b      	ldrh	r3, [r7, #2]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800491e:	2bd7      	cmp	r3, #215	; 0xd7
 8004920:	d920      	bls.n	8004964 <TouchClockActivity+0xb4>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004922:	887b      	ldrh	r3, [r7, #2]
 8004924:	2bec      	cmp	r3, #236	; 0xec
 8004926:	d81d      	bhi.n	8004964 <TouchClockActivity+0xb4>
				{
					DS3231_SetHour(Hours);
 8004928:	4b75      	ldr	r3, [pc, #468]	; (8004b00 <TouchClockActivity+0x250>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f7fd ff7a 	bl	8002826 <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8004932:	4b74      	ldr	r3, [pc, #464]	; (8004b04 <TouchClockActivity+0x254>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fd ff8a 	bl	8002850 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 800493c:	2032      	movs	r0, #50	; 0x32
 800493e:	f7fd ff99 	bl	8002874 <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 8004942:	4971      	ldr	r1, [pc, #452]	; (8004b08 <TouchClockActivity+0x258>)
 8004944:	4871      	ldr	r0, [pc, #452]	; (8004b0c <TouchClockActivity+0x25c>)
 8004946:	f008 fa87 	bl	800ce58 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 800494a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800494e:	9301      	str	r3, [sp, #4]
 8004950:	2301      	movs	r3, #1
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004958:	220a      	movs	r2, #10
 800495a:	212f      	movs	r1, #47	; 0x2f
 800495c:	486b      	ldr	r0, [pc, #428]	; (8004b0c <TouchClockActivity+0x25c>)
 800495e:	f7fd f8e1 	bl	8001b24 <EF_PutString>
 8004962:	e0bc      	b.n	8004ade <TouchClockActivity+0x22e>
				}

				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 8004964:	88bb      	ldrh	r3, [r7, #4]
 8004966:	2bef      	cmp	r3, #239	; 0xef
 8004968:	d95a      	bls.n	8004a20 <TouchClockActivity+0x170>
 800496a:	88bb      	ldrh	r3, [r7, #4]
 800496c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004970:	d856      	bhi.n	8004a20 <TouchClockActivity+0x170>
				{
					uint8_t Len = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	71fb      	strb	r3, [r7, #7]
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8004976:	887b      	ldrh	r3, [r7, #2]
 8004978:	2b4a      	cmp	r3, #74	; 0x4a
 800497a:	d925      	bls.n	80049c8 <TouchClockActivity+0x118>
 800497c:	887b      	ldrh	r3, [r7, #2]
 800497e:	2b60      	cmp	r3, #96	; 0x60
 8004980:	d822      	bhi.n	80049c8 <TouchClockActivity+0x118>
					{
						if(Hours < 24)
 8004982:	4b5f      	ldr	r3, [pc, #380]	; (8004b00 <TouchClockActivity+0x250>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b17      	cmp	r3, #23
 8004988:	d806      	bhi.n	8004998 <TouchClockActivity+0xe8>
						{
							Hours++;
 800498a:	4b5d      	ldr	r3, [pc, #372]	; (8004b00 <TouchClockActivity+0x250>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	b2da      	uxtb	r2, r3
 8004992:	4b5b      	ldr	r3, [pc, #364]	; (8004b00 <TouchClockActivity+0x250>)
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	e002      	b.n	800499e <TouchClockActivity+0xee>
						}
						else
						{
							Hours = 1;
 8004998:	4b59      	ldr	r3, [pc, #356]	; (8004b00 <TouchClockActivity+0x250>)
 800499a:	2201      	movs	r2, #1
 800499c:	701a      	strb	r2, [r3, #0]
						}
						Len = sprintf((char*)Msg, " %d  ", Hours);
 800499e:	4b58      	ldr	r3, [pc, #352]	; (8004b00 <TouchClockActivity+0x250>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	495a      	ldr	r1, [pc, #360]	; (8004b10 <TouchClockActivity+0x260>)
 80049a6:	4859      	ldr	r0, [pc, #356]	; (8004b0c <TouchClockActivity+0x25c>)
 80049a8:	f008 fa56 	bl	800ce58 <siprintf>
 80049ac:	4603      	mov	r3, r0
 80049ae:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80049b0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	2301      	movs	r3, #1
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	2300      	movs	r3, #0
 80049bc:	2246      	movs	r2, #70	; 0x46
 80049be:	21a0      	movs	r1, #160	; 0xa0
 80049c0:	4852      	ldr	r0, [pc, #328]	; (8004b0c <TouchClockActivity+0x25c>)
 80049c2:	f7fd f8af 	bl	8001b24 <EF_PutString>
 80049c6:	e027      	b.n	8004a18 <TouchClockActivity+0x168>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 80049c8:	887b      	ldrh	r3, [r7, #2]
 80049ca:	2b72      	cmp	r3, #114	; 0x72
 80049cc:	d924      	bls.n	8004a18 <TouchClockActivity+0x168>
 80049ce:	887b      	ldrh	r3, [r7, #2]
 80049d0:	2b88      	cmp	r3, #136	; 0x88
 80049d2:	d821      	bhi.n	8004a18 <TouchClockActivity+0x168>
					{
						if(Minutes < 59)
 80049d4:	4b4b      	ldr	r3, [pc, #300]	; (8004b04 <TouchClockActivity+0x254>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b3a      	cmp	r3, #58	; 0x3a
 80049da:	d806      	bhi.n	80049ea <TouchClockActivity+0x13a>
						{
							Minutes++;
 80049dc:	4b49      	ldr	r3, [pc, #292]	; (8004b04 <TouchClockActivity+0x254>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	3301      	adds	r3, #1
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	4b47      	ldr	r3, [pc, #284]	; (8004b04 <TouchClockActivity+0x254>)
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e002      	b.n	80049f0 <TouchClockActivity+0x140>
						}
						else
						{
							Minutes = 0;
 80049ea:	4b46      	ldr	r3, [pc, #280]	; (8004b04 <TouchClockActivity+0x254>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]
						}
						Len = sprintf((char*)Msg, " %d  ", Minutes);
 80049f0:	4b44      	ldr	r3, [pc, #272]	; (8004b04 <TouchClockActivity+0x254>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	4946      	ldr	r1, [pc, #280]	; (8004b10 <TouchClockActivity+0x260>)
 80049f8:	4844      	ldr	r0, [pc, #272]	; (8004b0c <TouchClockActivity+0x25c>)
 80049fa:	f008 fa2d 	bl	800ce58 <siprintf>
 80049fe:	4603      	mov	r3, r0
 8004a00:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004a02:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	2301      	movs	r3, #1
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	226e      	movs	r2, #110	; 0x6e
 8004a10:	21a0      	movs	r1, #160	; 0xa0
 8004a12:	483e      	ldr	r0, [pc, #248]	; (8004b0c <TouchClockActivity+0x25c>)
 8004a14:	f7fd f886 	bl	8001b24 <EF_PutString>
					}
					Len++;
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	71fb      	strb	r3, [r7, #7]
				{
 8004a1e:	e05e      	b.n	8004ade <TouchClockActivity+0x22e>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 8004a20:	88bb      	ldrh	r3, [r7, #4]
 8004a22:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8004a26:	d35a      	bcc.n	8004ade <TouchClockActivity+0x22e>
 8004a28:	88bb      	ldrh	r3, [r7, #4]
 8004a2a:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8004a2e:	d856      	bhi.n	8004ade <TouchClockActivity+0x22e>
				{
					uint8_t Len = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	71bb      	strb	r3, [r7, #6]
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8004a34:	887b      	ldrh	r3, [r7, #2]
 8004a36:	2b4a      	cmp	r3, #74	; 0x4a
 8004a38:	d925      	bls.n	8004a86 <TouchClockActivity+0x1d6>
 8004a3a:	887b      	ldrh	r3, [r7, #2]
 8004a3c:	2b60      	cmp	r3, #96	; 0x60
 8004a3e:	d822      	bhi.n	8004a86 <TouchClockActivity+0x1d6>
					{
						if(Hours < 19)
 8004a40:	4b2f      	ldr	r3, [pc, #188]	; (8004b00 <TouchClockActivity+0x250>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b12      	cmp	r3, #18
 8004a46:	d806      	bhi.n	8004a56 <TouchClockActivity+0x1a6>
						{
							Hours = Hours + 6;
 8004a48:	4b2d      	ldr	r3, [pc, #180]	; (8004b00 <TouchClockActivity+0x250>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	3306      	adds	r3, #6
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <TouchClockActivity+0x250>)
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e002      	b.n	8004a5c <TouchClockActivity+0x1ac>
						}
						else
						{
							Hours = 1;
 8004a56:	4b2a      	ldr	r3, [pc, #168]	; (8004b00 <TouchClockActivity+0x250>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	701a      	strb	r2, [r3, #0]
						}
						Len = sprintf((char*)Msg, " %d  ", Hours);
 8004a5c:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <TouchClockActivity+0x250>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	492b      	ldr	r1, [pc, #172]	; (8004b10 <TouchClockActivity+0x260>)
 8004a64:	4829      	ldr	r0, [pc, #164]	; (8004b0c <TouchClockActivity+0x25c>)
 8004a66:	f008 f9f7 	bl	800ce58 <siprintf>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71bb      	strb	r3, [r7, #6]
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004a6e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a72:	9301      	str	r3, [sp, #4]
 8004a74:	2301      	movs	r3, #1
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	2246      	movs	r2, #70	; 0x46
 8004a7c:	21a0      	movs	r1, #160	; 0xa0
 8004a7e:	4823      	ldr	r0, [pc, #140]	; (8004b0c <TouchClockActivity+0x25c>)
 8004a80:	f7fd f850 	bl	8001b24 <EF_PutString>
 8004a84:	e025      	b.n	8004ad2 <TouchClockActivity+0x222>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8004a86:	887b      	ldrh	r3, [r7, #2]
 8004a88:	2b72      	cmp	r3, #114	; 0x72
 8004a8a:	d922      	bls.n	8004ad2 <TouchClockActivity+0x222>
 8004a8c:	887b      	ldrh	r3, [r7, #2]
 8004a8e:	2b88      	cmp	r3, #136	; 0x88
 8004a90:	d81f      	bhi.n	8004ad2 <TouchClockActivity+0x222>
					{
						if(Minutes < 49)
 8004a92:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <TouchClockActivity+0x254>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b30      	cmp	r3, #48	; 0x30
 8004a98:	d806      	bhi.n	8004aa8 <TouchClockActivity+0x1f8>
						{
							Minutes = Minutes +10;
 8004a9a:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <TouchClockActivity+0x254>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	330a      	adds	r3, #10
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	4b18      	ldr	r3, [pc, #96]	; (8004b04 <TouchClockActivity+0x254>)
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	e002      	b.n	8004aae <TouchClockActivity+0x1fe>
						}
						else
						{
							Minutes = 0;
 8004aa8:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <TouchClockActivity+0x254>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <TouchClockActivity+0x254>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	4916      	ldr	r1, [pc, #88]	; (8004b10 <TouchClockActivity+0x260>)
 8004ab6:	4815      	ldr	r0, [pc, #84]	; (8004b0c <TouchClockActivity+0x25c>)
 8004ab8:	f008 f9ce 	bl	800ce58 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004abc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	226e      	movs	r2, #110	; 0x6e
 8004aca:	21a0      	movs	r1, #160	; 0xa0
 8004acc:	480f      	ldr	r0, [pc, #60]	; (8004b0c <TouchClockActivity+0x25c>)
 8004ace:	f7fd f829 	bl	8001b24 <EF_PutString>

					}
					Len++;
 8004ad2:	79bb      	ldrb	r3, [r7, #6]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	71bb      	strb	r3, [r7, #6]
					EF_SetFont(&arialBlack_20ptFontInfo);
 8004ad8:	4805      	ldr	r0, [pc, #20]	; (8004af0 <TouchClockActivity+0x240>)
 8004ada:	f7fc fe09 	bl	80016f0 <EF_SetFont>
				}

				TimerTouch = HAL_GetTick();
 8004ade:	f001 fa91 	bl	8006004 <HAL_GetTick>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4a03      	ldr	r2, [pc, #12]	; (8004af4 <TouchClockActivity+0x244>)
 8004ae6:	6013      	str	r3, [r2, #0]
			}
		}
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	080139f0 	.word	0x080139f0
 8004af4:	2000024c 	.word	0x2000024c
 8004af8:	20000250 	.word	0x20000250
 8004afc:	20000249 	.word	0x20000249
 8004b00:	20000030 	.word	0x20000030
 8004b04:	20000031 	.word	0x20000031
 8004b08:	08010d28 	.word	0x08010d28
 8004b0c:	200002b8 	.word	0x200002b8
 8004b10:	08010d38 	.word	0x08010d38

08004b14 <TouchPredefinedActivityActivity>:

void TouchPredefinedActivityActivity()
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 8004b1a:	f7fd fbb7 	bl	800228c <XPT2046_IsTouched>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 80c7 	beq.w	8004cb4 <TouchPredefinedActivityActivity+0x1a0>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004b26:	f001 fa6d 	bl	8006004 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	4b63      	ldr	r3, [pc, #396]	; (8004cbc <TouchPredefinedActivityActivity+0x1a8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b36:	f0c0 80bd 	bcc.w	8004cb4 <TouchPredefinedActivityActivity+0x1a0>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004b3a:	1d3a      	adds	r2, r7, #4
 8004b3c:	1dbb      	adds	r3, r7, #6
 8004b3e:	4611      	mov	r1, r2
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fd fb65 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	2b09      	cmp	r3, #9
 8004b4a:	d90f      	bls.n	8004b6c <TouchPredefinedActivityActivity+0x58>
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	2b6e      	cmp	r3, #110	; 0x6e
 8004b50:	d80c      	bhi.n	8004b6c <TouchPredefinedActivityActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004b52:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004b54:	2bd7      	cmp	r3, #215	; 0xd7
 8004b56:	d909      	bls.n	8004b6c <TouchPredefinedActivityActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004b58:	88bb      	ldrh	r3, [r7, #4]
 8004b5a:	2bec      	cmp	r3, #236	; 0xec
 8004b5c:	d806      	bhi.n	8004b6c <TouchPredefinedActivityActivity+0x58>
			{
				State = MENUTFT_SWITCH;
 8004b5e:	4b58      	ldr	r3, [pc, #352]	; (8004cc0 <TouchPredefinedActivityActivity+0x1ac>)
 8004b60:	2202      	movs	r2, #2
 8004b62:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004b64:	4b57      	ldr	r3, [pc, #348]	; (8004cc4 <TouchPredefinedActivityActivity+0x1b0>)
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	e09e      	b.n	8004caa <TouchPredefinedActivityActivity+0x196>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	2b63      	cmp	r3, #99	; 0x63
 8004b70:	f240 809b 	bls.w	8004caa <TouchPredefinedActivityActivity+0x196>
 8004b74:	88fb      	ldrh	r3, [r7, #6]
 8004b76:	2bdc      	cmp	r3, #220	; 0xdc
 8004b78:	f200 8097 	bhi.w	8004caa <TouchPredefinedActivityActivity+0x196>
			{
				if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8004b7c:	88bb      	ldrh	r3, [r7, #4]
 8004b7e:	2b3b      	cmp	r3, #59	; 0x3b
 8004b80:	d948      	bls.n	8004c14 <TouchPredefinedActivityActivity+0x100>
 8004b82:	88bb      	ldrh	r3, [r7, #4]
 8004b84:	2b64      	cmp	r3, #100	; 0x64
 8004b86:	d845      	bhi.n	8004c14 <TouchPredefinedActivityActivity+0x100>
				{
					if(ActivityButtonState[0] >= 1) // if is ON
 8004b88:	4b4f      	ldr	r3, [pc, #316]	; (8004cc8 <TouchPredefinedActivityActivity+0x1b4>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d020      	beq.n	8004bd2 <TouchPredefinedActivityActivity+0xbe>
					{
						ActivityButtonState[0] = 0;
 8004b90:	4b4d      	ldr	r3, [pc, #308]	; (8004cc8 <TouchPredefinedActivityActivity+0x1b4>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004b96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	230a      	movs	r3, #10
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2328      	movs	r3, #40	; 0x28
 8004ba2:	2278      	movs	r2, #120	; 0x78
 8004ba4:	213c      	movs	r1, #60	; 0x3c
 8004ba6:	2064      	movs	r0, #100	; 0x64
 8004ba8:	f7fc fd51 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE - OFF");
 8004bac:	4947      	ldr	r1, [pc, #284]	; (8004ccc <TouchPredefinedActivityActivity+0x1b8>)
 8004bae:	4848      	ldr	r0, [pc, #288]	; (8004cd0 <TouchPredefinedActivityActivity+0x1bc>)
 8004bb0:	f008 f952 	bl	800ce58 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004bb4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004bb8:	9301      	str	r3, [sp, #4]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	223e      	movs	r2, #62	; 0x3e
 8004bc2:	2167      	movs	r1, #103	; 0x67
 8004bc4:	4842      	ldr	r0, [pc, #264]	; (8004cd0 <TouchPredefinedActivityActivity+0x1bc>)
 8004bc6:	f7fc ffad 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(0); // Turn Activity OFF
 8004bca:	2000      	movs	r0, #0
 8004bcc:	f7fe ff94 	bl	8003af8 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8004bd0:	e06b      	b.n	8004caa <TouchPredefinedActivityActivity+0x196>
					}
					else // if is OFF
					{
						ActivityButtonState[0] = 1;
 8004bd2:	4b3d      	ldr	r3, [pc, #244]	; (8004cc8 <TouchPredefinedActivityActivity+0x1b4>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004bd8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	230a      	movs	r3, #10
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	2328      	movs	r3, #40	; 0x28
 8004be4:	2278      	movs	r2, #120	; 0x78
 8004be6:	213c      	movs	r1, #60	; 0x3c
 8004be8:	2064      	movs	r0, #100	; 0x64
 8004bea:	f7fc fd30 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE - ON");
 8004bee:	4939      	ldr	r1, [pc, #228]	; (8004cd4 <TouchPredefinedActivityActivity+0x1c0>)
 8004bf0:	4837      	ldr	r0, [pc, #220]	; (8004cd0 <TouchPredefinedActivityActivity+0x1bc>)
 8004bf2:	f008 f931 	bl	800ce58 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004bf6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2300      	movs	r3, #0
 8004c02:	223e      	movs	r2, #62	; 0x3e
 8004c04:	2167      	movs	r1, #103	; 0x67
 8004c06:	4832      	ldr	r0, [pc, #200]	; (8004cd0 <TouchPredefinedActivityActivity+0x1bc>)
 8004c08:	f7fc ff8c 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(1);
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	f7fe ff73 	bl	8003af8 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8004c12:	e04a      	b.n	8004caa <TouchPredefinedActivityActivity+0x196>
					}

				}

				else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 8004c14:	88bb      	ldrh	r3, [r7, #4]
 8004c16:	2b77      	cmp	r3, #119	; 0x77
 8004c18:	d947      	bls.n	8004caa <TouchPredefinedActivityActivity+0x196>
 8004c1a:	88bb      	ldrh	r3, [r7, #4]
 8004c1c:	2ba0      	cmp	r3, #160	; 0xa0
 8004c1e:	d844      	bhi.n	8004caa <TouchPredefinedActivityActivity+0x196>
				{
					if(ActivityButtonState[1] >= 1) // if is ON
 8004c20:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <TouchPredefinedActivityActivity+0x1b4>)
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d020      	beq.n	8004c6a <TouchPredefinedActivityActivity+0x156>
					{
						ActivityButtonState[1] = 0;
 8004c28:	4b27      	ldr	r3, [pc, #156]	; (8004cc8 <TouchPredefinedActivityActivity+0x1b4>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004c2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c32:	9301      	str	r3, [sp, #4]
 8004c34:	230a      	movs	r3, #10
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	2328      	movs	r3, #40	; 0x28
 8004c3a:	2278      	movs	r2, #120	; 0x78
 8004c3c:	2178      	movs	r1, #120	; 0x78
 8004c3e:	2064      	movs	r0, #100	; 0x64
 8004c40:	f7fc fd05 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE - OFF");
 8004c44:	4924      	ldr	r1, [pc, #144]	; (8004cd8 <TouchPredefinedActivityActivity+0x1c4>)
 8004c46:	4822      	ldr	r0, [pc, #136]	; (8004cd0 <TouchPredefinedActivityActivity+0x1bc>)
 8004c48:	f008 f906 	bl	800ce58 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004c4c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	2300      	movs	r3, #0
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	2300      	movs	r3, #0
 8004c58:	227a      	movs	r2, #122	; 0x7a
 8004c5a:	2167      	movs	r1, #103	; 0x67
 8004c5c:	481c      	ldr	r0, [pc, #112]	; (8004cd0 <TouchPredefinedActivityActivity+0x1bc>)
 8004c5e:	f7fc ff61 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(0);
 8004c62:	2000      	movs	r0, #0
 8004c64:	f7fe ff14 	bl	8003a90 <predefinedActivityCzyszczenie>
 8004c68:	e01f      	b.n	8004caa <TouchPredefinedActivityActivity+0x196>
					}
					else // if is OFF
					{
						ActivityButtonState[1] = 1;
 8004c6a:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <TouchPredefinedActivityActivity+0x1b4>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004c70:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	230a      	movs	r3, #10
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	2328      	movs	r3, #40	; 0x28
 8004c7c:	2278      	movs	r2, #120	; 0x78
 8004c7e:	2178      	movs	r1, #120	; 0x78
 8004c80:	2064      	movs	r0, #100	; 0x64
 8004c82:	f7fc fce4 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE - ON");
 8004c86:	4915      	ldr	r1, [pc, #84]	; (8004cdc <TouchPredefinedActivityActivity+0x1c8>)
 8004c88:	4811      	ldr	r0, [pc, #68]	; (8004cd0 <TouchPredefinedActivityActivity+0x1bc>)
 8004c8a:	f008 f8e5 	bl	800ce58 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ERRATA_X), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004c8e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	2300      	movs	r3, #0
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	227a      	movs	r2, #122	; 0x7a
 8004c9c:	2167      	movs	r1, #103	; 0x67
 8004c9e:	480c      	ldr	r0, [pc, #48]	; (8004cd0 <TouchPredefinedActivityActivity+0x1bc>)
 8004ca0:	f7fc ff40 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(1);
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	f7fe fef3 	bl	8003a90 <predefinedActivityCzyszczenie>

				}
			}


			TimerTouch = HAL_GetTick();
 8004caa:	f001 f9ab 	bl	8006004 <HAL_GetTick>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4a02      	ldr	r2, [pc, #8]	; (8004cbc <TouchPredefinedActivityActivity+0x1a8>)
 8004cb2:	6013      	str	r3, [r2, #0]
		}
	}


}
 8004cb4:	bf00      	nop
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	2000024c 	.word	0x2000024c
 8004cc0:	20000250 	.word	0x20000250
 8004cc4:	20000249 	.word	0x20000249
 8004cc8:	2000026c 	.word	0x2000026c
 8004ccc:	08010d40 	.word	0x08010d40
 8004cd0:	200002b8 	.word	0x200002b8
 8004cd4:	08010d50 	.word	0x08010d50
 8004cd8:	08010d60 	.word	0x08010d60
 8004cdc:	08010d74 	.word	0x08010d74

08004ce0 <UART_ParseLine>:
 * 		ASTATESTATUS=?\n	// Podaj stan wszystkich przekaznikow
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b094      	sub	sp, #80	; 0x50
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8004ce8:	f107 0308 	add.w	r3, r7, #8
 8004cec:	4619      	mov	r1, r3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 ff30 	bl	8005b54 <UARTDMA_GetLineFromReceiveBuffer>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d155      	bne.n	8004da6 <UART_ParseLine+0xc6>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8004cfa:	f107 0308 	add.w	r3, r7, #8
 8004cfe:	492c      	ldr	r1, [pc, #176]	; (8004db0 <UART_ParseLine+0xd0>)
 8004d00:	4618      	mov	r0, r3
 8004d02:	f008 ff01 	bl	800db08 <strtok>
 8004d06:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8004d08:	492a      	ldr	r1, [pc, #168]	; (8004db4 <UART_ParseLine+0xd4>)
 8004d0a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d0c:	f7fb fa68 	bl	80001e0 <strcmp>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d102      	bne.n	8004d1c <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8004d16:	f000 f85d 	bl	8004dd4 <UART_ParseLED>
		  UART_ParseAnswLightsStateStatus();
	  }

	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8004d1a:	e044      	b.n	8004da6 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8004d1c:	4926      	ldr	r1, [pc, #152]	; (8004db8 <UART_ParseLine+0xd8>)
 8004d1e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d20:	f7fb fa5e 	bl	80001e0 <strcmp>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d102      	bne.n	8004d30 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8004d2a:	f000 f8a1 	bl	8004e70 <UART_ParseAnswStatus>
}
 8004d2e:	e03a      	b.n	8004da6 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 8004d30:	4922      	ldr	r1, [pc, #136]	; (8004dbc <UART_ParseLine+0xdc>)
 8004d32:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d34:	f7fb fa54 	bl	80001e0 <strcmp>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 8004d3e:	f000 f89f 	bl	8004e80 <UART_ParseAnswTemp>
}
 8004d42:	e030      	b.n	8004da6 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8004d44:	491e      	ldr	r1, [pc, #120]	; (8004dc0 <UART_ParseLine+0xe0>)
 8004d46:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d48:	f7fb fa4a 	bl	80001e0 <strcmp>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8004d52:	f000 f8e3 	bl	8004f1c <UART_ParseAnswPres>
}
 8004d56:	e026      	b.n	8004da6 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8004d58:	491a      	ldr	r1, [pc, #104]	; (8004dc4 <UART_ParseLine+0xe4>)
 8004d5a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d5c:	f7fb fa40 	bl	80001e0 <strcmp>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8004d66:	f000 f927 	bl	8004fb8 <UART_ParseAnswChangeRelayState>
}
 8004d6a:	e01c      	b.n	8004da6 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8004d6c:	4916      	ldr	r1, [pc, #88]	; (8004dc8 <UART_ParseLine+0xe8>)
 8004d6e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d70:	f7fb fa36 	bl	80001e0 <strcmp>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 8004d7a:	f000 f924 	bl	8004fc6 <UART_ParseAnswChangeLightState>
}
 8004d7e:	e012      	b.n	8004da6 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASTATESTATUS") == 0) // Answear about current Switch Status
 8004d80:	4912      	ldr	r1, [pc, #72]	; (8004dcc <UART_ParseLine+0xec>)
 8004d82:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d84:	f7fb fa2c 	bl	80001e0 <strcmp>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d102      	bne.n	8004d94 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 8004d8e:	f000 f921 	bl	8004fd4 <UART_ParseAnswRelayStateStatus>
}
 8004d92:	e008      	b.n	8004da6 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ALIGHTSSTATUS=?\n") == 0) // Answear about current Switch Status
 8004d94:	490e      	ldr	r1, [pc, #56]	; (8004dd0 <UART_ParseLine+0xf0>)
 8004d96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004d98:	f7fb fa22 	bl	80001e0 <strcmp>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <UART_ParseLine+0xc6>
		  UART_ParseAnswLightsStateStatus();
 8004da2:	f000 f97b 	bl	800509c <UART_ParseAnswLightsStateStatus>
}
 8004da6:	bf00      	nop
 8004da8:	3750      	adds	r7, #80	; 0x50
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	08010d88 	.word	0x08010d88
 8004db4:	08010d8c 	.word	0x08010d8c
 8004db8:	08010d90 	.word	0x08010d90
 8004dbc:	08010d98 	.word	0x08010d98
 8004dc0:	08010da0 	.word	0x08010da0
 8004dc4:	08010da8 	.word	0x08010da8
 8004dc8:	08010db4 	.word	0x08010db4
 8004dcc:	08010dc0 	.word	0x08010dc0
 8004dd0:	08010dd0 	.word	0x08010dd0

08004dd4 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsowanie testowej funkcji od LED
// "LED=1\n"
void UART_ParseLED()
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8004dda:	491f      	ldr	r1, [pc, #124]	; (8004e58 <UART_ParseLED+0x84>)
 8004ddc:	2000      	movs	r0, #0
 8004dde:	f008 fe93 	bl	800db08 <strtok>
 8004de2:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d031      	beq.n	8004e50 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b2f      	cmp	r3, #47	; 0x2f
 8004df2:	d903      	bls.n	8004dfc <UART_ParseLED+0x28>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b39      	cmp	r3, #57	; 0x39
 8004dfa:	d904      	bls.n	8004e06 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8004dfc:	4917      	ldr	r1, [pc, #92]	; (8004e5c <UART_ParseLED+0x88>)
 8004dfe:	4818      	ldr	r0, [pc, #96]	; (8004e60 <UART_ParseLED+0x8c>)
 8004e00:	f000 fed9 	bl	8005bb6 <UARTDMA_Print>
			return;	// And exit parsing
 8004e04:	e024      	b.n	8004e50 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f007 f96f 	bl	800c0ea <atoi>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d10a      	bne.n	8004e2c <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8004e16:	2200      	movs	r2, #0
 8004e18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e1c:	4811      	ldr	r0, [pc, #68]	; (8004e64 <UART_ParseLED+0x90>)
 8004e1e:	f002 f86d 	bl	8006efc <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8004e22:	4911      	ldr	r1, [pc, #68]	; (8004e68 <UART_ParseLED+0x94>)
 8004e24:	480e      	ldr	r0, [pc, #56]	; (8004e60 <UART_ParseLED+0x8c>)
 8004e26:	f000 fec6 	bl	8005bb6 <UARTDMA_Print>
 8004e2a:	e011      	b.n	8004e50 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10a      	bne.n	8004e48 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 8004e32:	2201      	movs	r2, #1
 8004e34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e38:	480a      	ldr	r0, [pc, #40]	; (8004e64 <UART_ParseLED+0x90>)
 8004e3a:	f002 f85f 	bl	8006efc <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 8004e3e:	490b      	ldr	r1, [pc, #44]	; (8004e6c <UART_ParseLED+0x98>)
 8004e40:	4807      	ldr	r0, [pc, #28]	; (8004e60 <UART_ParseLED+0x8c>)
 8004e42:	f000 feb8 	bl	8005bb6 <UARTDMA_Print>
 8004e46:	e003      	b.n	8004e50 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8004e48:	4904      	ldr	r1, [pc, #16]	; (8004e5c <UART_ParseLED+0x88>)
 8004e4a:	4805      	ldr	r0, [pc, #20]	; (8004e60 <UART_ParseLED+0x8c>)
 8004e4c:	f000 feb3 	bl	8005bb6 <UARTDMA_Print>
		}
	}
}
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	08010de4 	.word	0x08010de4
 8004e5c:	08010de8 	.word	0x08010de8
 8004e60:	2000032c 	.word	0x2000032c
 8004e64:	40020800 	.word	0x40020800
 8004e68:	08010df8 	.word	0x08010df8
 8004e6c:	08010e04 	.word	0x08010e04

08004e70 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
	//TODO: Dodac obsluge statusu urzadzenia
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
	...

08004e80 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000"
void UART_ParseAnswTemp()
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8004e86:	491e      	ldr	r1, [pc, #120]	; (8004f00 <UART_ParseAnswTemp+0x80>)
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f008 fe3d 	bl	800db08 <strtok>
 8004e8e:	6038      	str	r0, [r7, #0]
	uint8_t Len;
	if(strlen(ParsePointer) > 0) // If string exists
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d02e      	beq.n	8004ef6 <UART_ParseAnswTemp+0x76>
	{
		CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8004e98:	6838      	ldr	r0, [r7, #0]
 8004e9a:	f007 f923 	bl	800c0e4 <atof>
 8004e9e:	ec53 2b10 	vmov	r2, r3, d0
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f7fb feb7 	bl	8000c18 <__aeabi_d2f>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <UART_ParseAnswTemp+0x84>)
 8004eae:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Temp
		if(State == MENUTFT_PARAMETERS)
 8004eb0:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <UART_ParseAnswTemp+0x88>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d117      	bne.n	8004ee8 <UART_ParseAnswTemp+0x68>
		{
			Len = sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 8004eb8:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <UART_ParseAnswTemp+0x84>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fb fb5b 	bl	8000578 <__aeabi_f2d>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4911      	ldr	r1, [pc, #68]	; (8004f0c <UART_ParseAnswTemp+0x8c>)
 8004ec8:	4811      	ldr	r0, [pc, #68]	; (8004f10 <UART_ParseAnswTemp+0x90>)
 8004eca:	f007 ffc5 	bl	800ce58 <siprintf>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	71fb      	strb	r3, [r7, #7]
			EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004ed2:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	2301      	movs	r3, #1
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	2300      	movs	r3, #0
 8004ede:	2250      	movs	r2, #80	; 0x50
 8004ee0:	2114      	movs	r1, #20
 8004ee2:	480b      	ldr	r0, [pc, #44]	; (8004f10 <UART_ParseAnswTemp+0x90>)
 8004ee4:	f7fc fe1e 	bl	8001b24 <EF_PutString>
		}
		UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
 8004ee8:	490a      	ldr	r1, [pc, #40]	; (8004f14 <UART_ParseAnswTemp+0x94>)
 8004eea:	480b      	ldr	r0, [pc, #44]	; (8004f18 <UART_ParseAnswTemp+0x98>)
 8004eec:	f000 fe63 	bl	8005bb6 <UARTDMA_Print>
		Len++;
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	71fb      	strb	r3, [r7, #7]
	}
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	08010de4 	.word	0x08010de4
 8004f04:	20000254 	.word	0x20000254
 8004f08:	20000250 	.word	0x20000250
 8004f0c:	08010e10 	.word	0x08010e10
 8004f10:	200002b8 	.word	0x200002b8
 8004f14:	08010e24 	.word	0x08010e24
 8004f18:	2000032c 	.word	0x2000032c

08004f1c <UART_ParseAnswPres>:

//
// Parsing information about current presure
//"APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8004f22:	491e      	ldr	r1, [pc, #120]	; (8004f9c <UART_ParseAnswPres+0x80>)
 8004f24:	2000      	movs	r0, #0
 8004f26:	f008 fdef 	bl	800db08 <strtok>
 8004f2a:	6038      	str	r0, [r7, #0]
	uint8_t Len;
	if(strlen(ParsePointer) > 0) // If string exists
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d02e      	beq.n	8004f92 <UART_ParseAnswPres+0x76>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8004f34:	6838      	ldr	r0, [r7, #0]
 8004f36:	f007 f8d5 	bl	800c0e4 <atof>
 8004f3a:	ec53 2b10 	vmov	r2, r3, d0
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	f7fb fe69 	bl	8000c18 <__aeabi_d2f>
 8004f46:	4603      	mov	r3, r0
 8004f48:	4a15      	ldr	r2, [pc, #84]	; (8004fa0 <UART_ParseAnswPres+0x84>)
 8004f4a:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8004f4c:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <UART_ParseAnswPres+0x88>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d117      	bne.n	8004f84 <UART_ParseAnswPres+0x68>
		{
			Len = sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8004f54:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <UART_ParseAnswPres+0x84>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fb fb0d 	bl	8000578 <__aeabi_f2d>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4911      	ldr	r1, [pc, #68]	; (8004fa8 <UART_ParseAnswPres+0x8c>)
 8004f64:	4811      	ldr	r0, [pc, #68]	; (8004fac <UART_ParseAnswPres+0x90>)
 8004f66:	f007 ff77 	bl	800ce58 <siprintf>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	71fb      	strb	r3, [r7, #7]
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004f6e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004f72:	9301      	str	r3, [sp, #4]
 8004f74:	2301      	movs	r3, #1
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	22aa      	movs	r2, #170	; 0xaa
 8004f7c:	2114      	movs	r1, #20
 8004f7e:	480b      	ldr	r0, [pc, #44]	; (8004fac <UART_ParseAnswPres+0x90>)
 8004f80:	f7fc fdd0 	bl	8001b24 <EF_PutString>
		}
		UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
 8004f84:	490a      	ldr	r1, [pc, #40]	; (8004fb0 <UART_ParseAnswPres+0x94>)
 8004f86:	480b      	ldr	r0, [pc, #44]	; (8004fb4 <UART_ParseAnswPres+0x98>)
 8004f88:	f000 fe15 	bl	8005bb6 <UARTDMA_Print>
		Len++;
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	71fb      	strb	r3, [r7, #7]
	}
}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	08010de4 	.word	0x08010de4
 8004fa0:	20000258 	.word	0x20000258
 8004fa4:	20000250 	.word	0x20000250
 8004fa8:	08010e30 	.word	0x08010e30
 8004fac:	200002b8 	.word	0x200002b8
 8004fb0:	08010e48 	.word	0x08010e48
 8004fb4:	2000032c 	.word	0x2000032c

08004fb8 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
	//TODO!
}
 8004fbc:	bf00      	nop
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	af00      	add	r7, sp, #0
	//TODO!
}
 8004fca:	bf00      	nop
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8004fd4:	b590      	push	{r4, r7, lr}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

		for(i = 0; i<4; i++) // 4 parameters are expected
 8004fda:	2300      	movs	r3, #0
 8004fdc:	71fb      	strb	r3, [r7, #7]
 8004fde:	e04a      	b.n	8005076 <UART_ParseAnswRelayStateStatus+0xa2>
		{
			char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8004fe0:	4928      	ldr	r1, [pc, #160]	; (8005084 <UART_ParseAnswRelayStateStatus+0xb0>)
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f008 fd90 	bl	800db08 <strtok>
 8004fe8:	6038      	str	r0, [r7, #0]

			if(strlen(ParsePointer) > 0) // If string exists
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d035      	beq.n	800505e <UART_ParseAnswRelayStateStatus+0x8a>
			{
				for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	71bb      	strb	r3, [r7, #6]
 8004ff6:	e02b      	b.n	8005050 <UART_ParseAnswRelayStateStatus+0x7c>
				{
					if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8004ff8:	79bb      	ldrb	r3, [r7, #6]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b2f      	cmp	r3, #47	; 0x2f
 8005002:	d905      	bls.n	8005010 <UART_ParseAnswRelayStateStatus+0x3c>
 8005004:	79bb      	ldrb	r3, [r7, #6]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	4413      	add	r3, r2
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b39      	cmp	r3, #57	; 0x39
 800500e:	d90e      	bls.n	800502e <UART_ParseAnswRelayStateStatus+0x5a>
 8005010:	79bb      	ldrb	r3, [r7, #6]
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	4413      	add	r3, r2
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b2e      	cmp	r3, #46	; 0x2e
 800501a:	d008      	beq.n	800502e <UART_ParseAnswRelayStateStatus+0x5a>
					{
						sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 800501c:	491a      	ldr	r1, [pc, #104]	; (8005088 <UART_ParseAnswRelayStateStatus+0xb4>)
 800501e:	481b      	ldr	r0, [pc, #108]	; (800508c <UART_ParseAnswRelayStateStatus+0xb8>)
 8005020:	f007 ff1a 	bl	800ce58 <siprintf>
						UARTDMA_Print(&huartdma2, Message); // Print message
 8005024:	4919      	ldr	r1, [pc, #100]	; (800508c <UART_ParseAnswRelayStateStatus+0xb8>)
 8005026:	481a      	ldr	r0, [pc, #104]	; (8005090 <UART_ParseAnswRelayStateStatus+0xbc>)
 8005028:	f000 fdc5 	bl	8005bb6 <UARTDMA_Print>
						return;	// And exit parsing
 800502c:	e026      	b.n	800507c <UART_ParseAnswRelayStateStatus+0xa8>
					}

					SwitchesButtonState[i] = atof(ParsePointer); // If there are no chars, change string to integer
 800502e:	6838      	ldr	r0, [r7, #0]
 8005030:	f007 f858 	bl	800c0e4 <atof>
 8005034:	ec53 2b10 	vmov	r2, r3, d0
 8005038:	79fc      	ldrb	r4, [r7, #7]
 800503a:	4610      	mov	r0, r2
 800503c:	4619      	mov	r1, r3
 800503e:	f7fb fdcb 	bl	8000bd8 <__aeabi_d2uiz>
 8005042:	4603      	mov	r3, r0
 8005044:	b2da      	uxtb	r2, r3
 8005046:	4b13      	ldr	r3, [pc, #76]	; (8005094 <UART_ParseAnswRelayStateStatus+0xc0>)
 8005048:	551a      	strb	r2, [r3, r4]
				for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800504a:	79bb      	ldrb	r3, [r7, #6]
 800504c:	3301      	adds	r3, #1
 800504e:	71bb      	strb	r3, [r7, #6]
 8005050:	79bb      	ldrb	r3, [r7, #6]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	4413      	add	r3, r2
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1cd      	bne.n	8004ff8 <UART_ParseAnswRelayStateStatus+0x24>
 800505c:	e008      	b.n	8005070 <UART_ParseAnswRelayStateStatus+0x9c>
				}
			}
			else
			{
				sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800505e:	490e      	ldr	r1, [pc, #56]	; (8005098 <UART_ParseAnswRelayStateStatus+0xc4>)
 8005060:	480a      	ldr	r0, [pc, #40]	; (800508c <UART_ParseAnswRelayStateStatus+0xb8>)
 8005062:	f007 fef9 	bl	800ce58 <siprintf>
				UARTDMA_Print(&huartdma2, Message); // Print message
 8005066:	4909      	ldr	r1, [pc, #36]	; (800508c <UART_ParseAnswRelayStateStatus+0xb8>)
 8005068:	4809      	ldr	r0, [pc, #36]	; (8005090 <UART_ParseAnswRelayStateStatus+0xbc>)
 800506a:	f000 fda4 	bl	8005bb6 <UARTDMA_Print>
				return;	// And exit parsing
 800506e:	e005      	b.n	800507c <UART_ParseAnswRelayStateStatus+0xa8>
		for(i = 0; i<4; i++) // 4 parameters are expected
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	3301      	adds	r3, #1
 8005074:	71fb      	strb	r3, [r7, #7]
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d9b1      	bls.n	8004fe0 <UART_ParseAnswRelayStateStatus+0xc>
			}
		}
}
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	bd90      	pop	{r4, r7, pc}
 8005082:	bf00      	nop
 8005084:	08010de4 	.word	0x08010de4
 8005088:	08010e54 	.word	0x08010e54
 800508c:	2000048c 	.word	0x2000048c
 8005090:	2000032c 	.word	0x2000032c
 8005094:	20000264 	.word	0x20000264
 8005098:	08010e68 	.word	0x08010e68

0800509c <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 800509c:	b590      	push	{r4, r7, lr}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

			for(i = 0; i<4; i++) // 4 parameters are expected
 80050a2:	2300      	movs	r3, #0
 80050a4:	71fb      	strb	r3, [r7, #7]
 80050a6:	e04a      	b.n	800513e <UART_ParseAnswLightsStateStatus+0xa2>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80050a8:	4928      	ldr	r1, [pc, #160]	; (800514c <UART_ParseAnswLightsStateStatus+0xb0>)
 80050aa:	2000      	movs	r0, #0
 80050ac:	f008 fd2c 	bl	800db08 <strtok>
 80050b0:	6038      	str	r0, [r7, #0]

				if(strlen(ParsePointer) > 0) // If string exists
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d035      	beq.n	8005126 <UART_ParseAnswLightsStateStatus+0x8a>
				{
					for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80050ba:	2300      	movs	r3, #0
 80050bc:	71bb      	strb	r3, [r7, #6]
 80050be:	e02b      	b.n	8005118 <UART_ParseAnswLightsStateStatus+0x7c>
					{
						if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 80050c0:	79bb      	ldrb	r3, [r7, #6]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	4413      	add	r3, r2
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b2f      	cmp	r3, #47	; 0x2f
 80050ca:	d905      	bls.n	80050d8 <UART_ParseAnswLightsStateStatus+0x3c>
 80050cc:	79bb      	ldrb	r3, [r7, #6]
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	4413      	add	r3, r2
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b39      	cmp	r3, #57	; 0x39
 80050d6:	d90e      	bls.n	80050f6 <UART_ParseAnswLightsStateStatus+0x5a>
 80050d8:	79bb      	ldrb	r3, [r7, #6]
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	4413      	add	r3, r2
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b2e      	cmp	r3, #46	; 0x2e
 80050e2:	d008      	beq.n	80050f6 <UART_ParseAnswLightsStateStatus+0x5a>
						{
							sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 80050e4:	491a      	ldr	r1, [pc, #104]	; (8005150 <UART_ParseAnswLightsStateStatus+0xb4>)
 80050e6:	481b      	ldr	r0, [pc, #108]	; (8005154 <UART_ParseAnswLightsStateStatus+0xb8>)
 80050e8:	f007 feb6 	bl	800ce58 <siprintf>
							UARTDMA_Print(&huartdma2, Message); // Print message
 80050ec:	4919      	ldr	r1, [pc, #100]	; (8005154 <UART_ParseAnswLightsStateStatus+0xb8>)
 80050ee:	481a      	ldr	r0, [pc, #104]	; (8005158 <UART_ParseAnswLightsStateStatus+0xbc>)
 80050f0:	f000 fd61 	bl	8005bb6 <UARTDMA_Print>
							return;	// And exit parsing
 80050f4:	e026      	b.n	8005144 <UART_ParseAnswLightsStateStatus+0xa8>
						}

						LightsButtonState[i] = atof(ParsePointer); // If there are no chars, change string to integer
 80050f6:	6838      	ldr	r0, [r7, #0]
 80050f8:	f006 fff4 	bl	800c0e4 <atof>
 80050fc:	ec53 2b10 	vmov	r2, r3, d0
 8005100:	79fc      	ldrb	r4, [r7, #7]
 8005102:	4610      	mov	r0, r2
 8005104:	4619      	mov	r1, r3
 8005106:	f7fb fd67 	bl	8000bd8 <__aeabi_d2uiz>
 800510a:	4603      	mov	r3, r0
 800510c:	b2da      	uxtb	r2, r3
 800510e:	4b13      	ldr	r3, [pc, #76]	; (800515c <UART_ParseAnswLightsStateStatus+0xc0>)
 8005110:	551a      	strb	r2, [r3, r4]
					for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005112:	79bb      	ldrb	r3, [r7, #6]
 8005114:	3301      	adds	r3, #1
 8005116:	71bb      	strb	r3, [r7, #6]
 8005118:	79bb      	ldrb	r3, [r7, #6]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	4413      	add	r3, r2
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1cd      	bne.n	80050c0 <UART_ParseAnswLightsStateStatus+0x24>
 8005124:	e008      	b.n	8005138 <UART_ParseAnswLightsStateStatus+0x9c>
					}
				}
				else
				{
					sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8005126:	490e      	ldr	r1, [pc, #56]	; (8005160 <UART_ParseAnswLightsStateStatus+0xc4>)
 8005128:	480a      	ldr	r0, [pc, #40]	; (8005154 <UART_ParseAnswLightsStateStatus+0xb8>)
 800512a:	f007 fe95 	bl	800ce58 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 800512e:	4909      	ldr	r1, [pc, #36]	; (8005154 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005130:	4809      	ldr	r0, [pc, #36]	; (8005158 <UART_ParseAnswLightsStateStatus+0xbc>)
 8005132:	f000 fd40 	bl	8005bb6 <UARTDMA_Print>
					return;	// And exit parsing
 8005136:	e005      	b.n	8005144 <UART_ParseAnswLightsStateStatus+0xa8>
			for(i = 0; i<4; i++) // 4 parameters are expected
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	3301      	adds	r3, #1
 800513c:	71fb      	strb	r3, [r7, #7]
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	2b03      	cmp	r3, #3
 8005142:	d9b1      	bls.n	80050a8 <UART_ParseAnswLightsStateStatus+0xc>
				}
			}
}
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	bd90      	pop	{r4, r7, pc}
 800514a:	bf00      	nop
 800514c:	08010de4 	.word	0x08010de4
 8005150:	08010e54 	.word	0x08010e54
 8005154:	2000048c 	.word	0x2000048c
 8005158:	2000032c 	.word	0x2000032c
 800515c:	20000268 	.word	0x20000268
 8005160:	08010e68 	.word	0x08010e68

08005164 <SendComand>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////// ASK FOR INFORMATION //////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	2b16      	cmp	r3, #22
 8005176:	f200 80a4 	bhi.w	80052c2 <SendComand+0x15e>
 800517a:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <SendComand+0x1c>)
 800517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005180:	080051dd 	.word	0x080051dd
 8005184:	080051e7 	.word	0x080051e7
 8005188:	080051f1 	.word	0x080051f1
 800518c:	080051fb 	.word	0x080051fb
 8005190:	08005205 	.word	0x08005205
 8005194:	0800520f 	.word	0x0800520f
 8005198:	08005219 	.word	0x08005219
 800519c:	08005223 	.word	0x08005223
 80051a0:	0800522d 	.word	0x0800522d
 80051a4:	08005237 	.word	0x08005237
 80051a8:	08005241 	.word	0x08005241
 80051ac:	0800524b 	.word	0x0800524b
 80051b0:	08005255 	.word	0x08005255
 80051b4:	08005269 	.word	0x08005269
 80051b8:	08005273 	.word	0x08005273
 80051bc:	0800527d 	.word	0x0800527d
 80051c0:	08005287 	.word	0x08005287
 80051c4:	08005291 	.word	0x08005291
 80051c8:	0800529b 	.word	0x0800529b
 80051cc:	080052a5 	.word	0x080052a5
 80051d0:	080052af 	.word	0x080052af
 80051d4:	0800525f 	.word	0x0800525f
 80051d8:	080052b9 	.word	0x080052b9
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 80051dc:	493b      	ldr	r1, [pc, #236]	; (80052cc <SendComand+0x168>)
 80051de:	483c      	ldr	r0, [pc, #240]	; (80052d0 <SendComand+0x16c>)
 80051e0:	f000 fce9 	bl	8005bb6 <UARTDMA_Print>
			break;
 80051e4:	e06d      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 80051e6:	493b      	ldr	r1, [pc, #236]	; (80052d4 <SendComand+0x170>)
 80051e8:	4839      	ldr	r0, [pc, #228]	; (80052d0 <SendComand+0x16c>)
 80051ea:	f000 fce4 	bl	8005bb6 <UARTDMA_Print>
			break;
 80051ee:	e068      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 80051f0:	4939      	ldr	r1, [pc, #228]	; (80052d8 <SendComand+0x174>)
 80051f2:	4837      	ldr	r0, [pc, #220]	; (80052d0 <SendComand+0x16c>)
 80051f4:	f000 fcdf 	bl	8005bb6 <UARTDMA_Print>
			break;
 80051f8:	e063      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 80051fa:	4938      	ldr	r1, [pc, #224]	; (80052dc <SendComand+0x178>)
 80051fc:	4834      	ldr	r0, [pc, #208]	; (80052d0 <SendComand+0x16c>)
 80051fe:	f000 fcda 	bl	8005bb6 <UARTDMA_Print>
			break;
 8005202:	e05e      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8005204:	4936      	ldr	r1, [pc, #216]	; (80052e0 <SendComand+0x17c>)
 8005206:	4832      	ldr	r0, [pc, #200]	; (80052d0 <SendComand+0x16c>)
 8005208:	f000 fcd5 	bl	8005bb6 <UARTDMA_Print>
			break;
 800520c:	e059      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 800520e:	4935      	ldr	r1, [pc, #212]	; (80052e4 <SendComand+0x180>)
 8005210:	482f      	ldr	r0, [pc, #188]	; (80052d0 <SendComand+0x16c>)
 8005212:	f000 fcd0 	bl	8005bb6 <UARTDMA_Print>
			break;
 8005216:	e054      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8005218:	4933      	ldr	r1, [pc, #204]	; (80052e8 <SendComand+0x184>)
 800521a:	482d      	ldr	r0, [pc, #180]	; (80052d0 <SendComand+0x16c>)
 800521c:	f000 fccb 	bl	8005bb6 <UARTDMA_Print>
			break;
 8005220:	e04f      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8005222:	4932      	ldr	r1, [pc, #200]	; (80052ec <SendComand+0x188>)
 8005224:	482a      	ldr	r0, [pc, #168]	; (80052d0 <SendComand+0x16c>)
 8005226:	f000 fcc6 	bl	8005bb6 <UARTDMA_Print>
			break;
 800522a:	e04a      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 800522c:	4930      	ldr	r1, [pc, #192]	; (80052f0 <SendComand+0x18c>)
 800522e:	4828      	ldr	r0, [pc, #160]	; (80052d0 <SendComand+0x16c>)
 8005230:	f000 fcc1 	bl	8005bb6 <UARTDMA_Print>
			break;
 8005234:	e045      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8005236:	492f      	ldr	r1, [pc, #188]	; (80052f4 <SendComand+0x190>)
 8005238:	4825      	ldr	r0, [pc, #148]	; (80052d0 <SendComand+0x16c>)
 800523a:	f000 fcbc 	bl	8005bb6 <UARTDMA_Print>
			break;
 800523e:	e040      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8005240:	492d      	ldr	r1, [pc, #180]	; (80052f8 <SendComand+0x194>)
 8005242:	4823      	ldr	r0, [pc, #140]	; (80052d0 <SendComand+0x16c>)
 8005244:	f000 fcb7 	bl	8005bb6 <UARTDMA_Print>
			break;
 8005248:	e03b      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 800524a:	492c      	ldr	r1, [pc, #176]	; (80052fc <SendComand+0x198>)
 800524c:	4820      	ldr	r0, [pc, #128]	; (80052d0 <SendComand+0x16c>)
 800524e:	f000 fcb2 	bl	8005bb6 <UARTDMA_Print>
			break;
 8005252:	e036      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8005254:	492a      	ldr	r1, [pc, #168]	; (8005300 <SendComand+0x19c>)
 8005256:	481e      	ldr	r0, [pc, #120]	; (80052d0 <SendComand+0x16c>)
 8005258:	f000 fcad 	bl	8005bb6 <UARTDMA_Print>
			break;
 800525c:	e031      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "STATESTATUS=?\n");
 800525e:	4929      	ldr	r1, [pc, #164]	; (8005304 <SendComand+0x1a0>)
 8005260:	481b      	ldr	r0, [pc, #108]	; (80052d0 <SendComand+0x16c>)
 8005262:	f000 fca8 	bl	8005bb6 <UARTDMA_Print>
			break;
 8005266:	e02c      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8005268:	4927      	ldr	r1, [pc, #156]	; (8005308 <SendComand+0x1a4>)
 800526a:	4819      	ldr	r0, [pc, #100]	; (80052d0 <SendComand+0x16c>)
 800526c:	f000 fca3 	bl	8005bb6 <UARTDMA_Print>
			break;
 8005270:	e027      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8005272:	4926      	ldr	r1, [pc, #152]	; (800530c <SendComand+0x1a8>)
 8005274:	4816      	ldr	r0, [pc, #88]	; (80052d0 <SendComand+0x16c>)
 8005276:	f000 fc9e 	bl	8005bb6 <UARTDMA_Print>
			break;
 800527a:	e022      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 800527c:	4924      	ldr	r1, [pc, #144]	; (8005310 <SendComand+0x1ac>)
 800527e:	4814      	ldr	r0, [pc, #80]	; (80052d0 <SendComand+0x16c>)
 8005280:	f000 fc99 	bl	8005bb6 <UARTDMA_Print>
			break;
 8005284:	e01d      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8005286:	4923      	ldr	r1, [pc, #140]	; (8005314 <SendComand+0x1b0>)
 8005288:	4811      	ldr	r0, [pc, #68]	; (80052d0 <SendComand+0x16c>)
 800528a:	f000 fc94 	bl	8005bb6 <UARTDMA_Print>
			break;
 800528e:	e018      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8005290:	4921      	ldr	r1, [pc, #132]	; (8005318 <SendComand+0x1b4>)
 8005292:	480f      	ldr	r0, [pc, #60]	; (80052d0 <SendComand+0x16c>)
 8005294:	f000 fc8f 	bl	8005bb6 <UARTDMA_Print>
			break;
 8005298:	e013      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 800529a:	4920      	ldr	r1, [pc, #128]	; (800531c <SendComand+0x1b8>)
 800529c:	480c      	ldr	r0, [pc, #48]	; (80052d0 <SendComand+0x16c>)
 800529e:	f000 fc8a 	bl	8005bb6 <UARTDMA_Print>
			break;
 80052a2:	e00e      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 80052a4:	491e      	ldr	r1, [pc, #120]	; (8005320 <SendComand+0x1bc>)
 80052a6:	480a      	ldr	r0, [pc, #40]	; (80052d0 <SendComand+0x16c>)
 80052a8:	f000 fc85 	bl	8005bb6 <UARTDMA_Print>
			break;
 80052ac:	e009      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 80052ae:	491d      	ldr	r1, [pc, #116]	; (8005324 <SendComand+0x1c0>)
 80052b0:	4807      	ldr	r0, [pc, #28]	; (80052d0 <SendComand+0x16c>)
 80052b2:	f000 fc80 	bl	8005bb6 <UARTDMA_Print>
			break;
 80052b6:	e004      	b.n	80052c2 <SendComand+0x15e>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "LIGHTSSTATUS=?\n");
 80052b8:	491b      	ldr	r1, [pc, #108]	; (8005328 <SendComand+0x1c4>)
 80052ba:	4805      	ldr	r0, [pc, #20]	; (80052d0 <SendComand+0x16c>)
 80052bc:	f000 fc7b 	bl	8005bb6 <UARTDMA_Print>
			break;
 80052c0:	bf00      	nop
		}

	return 1;
 80052c2:	2301      	movs	r3, #1
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	08010e84 	.word	0x08010e84
 80052d0:	2000032c 	.word	0x2000032c
 80052d4:	08010e8c 	.word	0x08010e8c
 80052d8:	08010e94 	.word	0x08010e94
 80052dc:	08010ea0 	.word	0x08010ea0
 80052e0:	08010ea8 	.word	0x08010ea8
 80052e4:	08010eb0 	.word	0x08010eb0
 80052e8:	08010ec0 	.word	0x08010ec0
 80052ec:	08010ed0 	.word	0x08010ed0
 80052f0:	08010ee0 	.word	0x08010ee0
 80052f4:	08010ef0 	.word	0x08010ef0
 80052f8:	08010f00 	.word	0x08010f00
 80052fc:	08010f10 	.word	0x08010f10
 8005300:	08010f20 	.word	0x08010f20
 8005304:	08010f30 	.word	0x08010f30
 8005308:	08010f40 	.word	0x08010f40
 800530c:	08010f50 	.word	0x08010f50
 8005310:	08010f60 	.word	0x08010f60
 8005314:	08010f70 	.word	0x08010f70
 8005318:	08010f80 	.word	0x08010f80
 800531c:	08010f90 	.word	0x08010f90
 8005320:	08010fa0 	.word	0x08010fa0
 8005324:	08010fb0 	.word	0x08010fb0
 8005328:	08010fc0 	.word	0x08010fc0

0800532c <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	781a      	ldrb	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	785b      	ldrb	r3, [r3, #1]
 800533e:	429a      	cmp	r2, r3
 8005340:	d101      	bne.n	8005346 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8005342:	2301      	movs	r3, #1
 8005344:	e018      	b.n	8005378 <RB_Read+0x4c>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	461a      	mov	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4413      	add	r3, r2
 8005350:	789a      	ldrb	r2, [r3, #2]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <RB_Read+0x58>)
 800535e:	fb83 1302 	smull	r1, r3, r3, r2
 8005362:	1159      	asrs	r1, r3, #5
 8005364:	17d3      	asrs	r3, r2, #31
 8005366:	1ac9      	subs	r1, r1, r3
 8005368:	460b      	mov	r3, r1
 800536a:	019b      	lsls	r3, r3, #6
 800536c:	440b      	add	r3, r1
 800536e:	1ad1      	subs	r1, r2, r3
 8005370:	b2ca      	uxtb	r2, r1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	7e07e07f 	.word	0x7e07e07f

08005388 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	4b12      	ldr	r3, [pc, #72]	; (80053e4 <RB_Write+0x5c>)
 800539c:	fb83 1302 	smull	r1, r3, r3, r2
 80053a0:	1159      	asrs	r1, r3, #5
 80053a2:	17d3      	asrs	r3, r2, #31
 80053a4:	1ac9      	subs	r1, r1, r3
 80053a6:	460b      	mov	r3, r1
 80053a8:	019b      	lsls	r3, r3, #6
 80053aa:	440b      	add	r3, r1
 80053ac:	1ad1      	subs	r1, r2, r3
 80053ae:	460b      	mov	r3, r1
 80053b0:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	785b      	ldrb	r3, [r3, #1]
 80053b6:	7bfa      	ldrb	r2, [r7, #15]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d101      	bne.n	80053c0 <RB_Write+0x38>
	{
		return RB_ERROR; // No free space error
 80053bc:	2301      	movs	r3, #1
 80053be:	e00a      	b.n	80053d6 <RB_Write+0x4e>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	461a      	mov	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4413      	add	r3, r2
 80053ca:	78fa      	ldrb	r2, [r7, #3]
 80053cc:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	7bfa      	ldrb	r2, [r7, #15]
 80053d2:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	7e07e07f 	.word	0x7e07e07f

080053e8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80053ec:	4b17      	ldr	r3, [pc, #92]	; (800544c <MX_SPI1_Init+0x64>)
 80053ee:	4a18      	ldr	r2, [pc, #96]	; (8005450 <MX_SPI1_Init+0x68>)
 80053f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80053f2:	4b16      	ldr	r3, [pc, #88]	; (800544c <MX_SPI1_Init+0x64>)
 80053f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80053f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80053fa:	4b14      	ldr	r3, [pc, #80]	; (800544c <MX_SPI1_Init+0x64>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005400:	4b12      	ldr	r3, [pc, #72]	; (800544c <MX_SPI1_Init+0x64>)
 8005402:	2200      	movs	r2, #0
 8005404:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005406:	4b11      	ldr	r3, [pc, #68]	; (800544c <MX_SPI1_Init+0x64>)
 8005408:	2200      	movs	r2, #0
 800540a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800540c:	4b0f      	ldr	r3, [pc, #60]	; (800544c <MX_SPI1_Init+0x64>)
 800540e:	2200      	movs	r2, #0
 8005410:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005412:	4b0e      	ldr	r3, [pc, #56]	; (800544c <MX_SPI1_Init+0x64>)
 8005414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005418:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <MX_SPI1_Init+0x64>)
 800541c:	2210      	movs	r2, #16
 800541e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005420:	4b0a      	ldr	r3, [pc, #40]	; (800544c <MX_SPI1_Init+0x64>)
 8005422:	2200      	movs	r2, #0
 8005424:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005426:	4b09      	ldr	r3, [pc, #36]	; (800544c <MX_SPI1_Init+0x64>)
 8005428:	2200      	movs	r2, #0
 800542a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <MX_SPI1_Init+0x64>)
 800542e:	2200      	movs	r2, #0
 8005430:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005432:	4b06      	ldr	r3, [pc, #24]	; (800544c <MX_SPI1_Init+0x64>)
 8005434:	220a      	movs	r2, #10
 8005436:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005438:	4804      	ldr	r0, [pc, #16]	; (800544c <MX_SPI1_Init+0x64>)
 800543a:	f004 fe59 	bl	800a0f0 <HAL_SPI_Init>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005444:	f7fe fdc6 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005448:	bf00      	nop
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20000528 	.word	0x20000528
 8005450:	40013000 	.word	0x40013000

08005454 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005458:	4b17      	ldr	r3, [pc, #92]	; (80054b8 <MX_SPI3_Init+0x64>)
 800545a:	4a18      	ldr	r2, [pc, #96]	; (80054bc <MX_SPI3_Init+0x68>)
 800545c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800545e:	4b16      	ldr	r3, [pc, #88]	; (80054b8 <MX_SPI3_Init+0x64>)
 8005460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005464:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <MX_SPI3_Init+0x64>)
 8005468:	2200      	movs	r2, #0
 800546a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800546c:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <MX_SPI3_Init+0x64>)
 800546e:	2200      	movs	r2, #0
 8005470:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005472:	4b11      	ldr	r3, [pc, #68]	; (80054b8 <MX_SPI3_Init+0x64>)
 8005474:	2200      	movs	r2, #0
 8005476:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005478:	4b0f      	ldr	r3, [pc, #60]	; (80054b8 <MX_SPI3_Init+0x64>)
 800547a:	2200      	movs	r2, #0
 800547c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800547e:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <MX_SPI3_Init+0x64>)
 8005480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005484:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005486:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <MX_SPI3_Init+0x64>)
 8005488:	2220      	movs	r2, #32
 800548a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800548c:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <MX_SPI3_Init+0x64>)
 800548e:	2200      	movs	r2, #0
 8005490:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005492:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <MX_SPI3_Init+0x64>)
 8005494:	2200      	movs	r2, #0
 8005496:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005498:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <MX_SPI3_Init+0x64>)
 800549a:	2200      	movs	r2, #0
 800549c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <MX_SPI3_Init+0x64>)
 80054a0:	220a      	movs	r2, #10
 80054a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80054a4:	4804      	ldr	r0, [pc, #16]	; (80054b8 <MX_SPI3_Init+0x64>)
 80054a6:	f004 fe23 	bl	800a0f0 <HAL_SPI_Init>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80054b0:	f7fe fd90 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80054b4:	bf00      	nop
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	200004d0 	.word	0x200004d0
 80054bc:	40003c00 	.word	0x40003c00

080054c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08c      	sub	sp, #48	; 0x30
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c8:	f107 031c 	add.w	r3, r7, #28
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	609a      	str	r2, [r3, #8]
 80054d4:	60da      	str	r2, [r3, #12]
 80054d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a32      	ldr	r2, [pc, #200]	; (80055a8 <HAL_SPI_MspInit+0xe8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d12c      	bne.n	800553c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80054e2:	2300      	movs	r3, #0
 80054e4:	61bb      	str	r3, [r7, #24]
 80054e6:	4b31      	ldr	r3, [pc, #196]	; (80055ac <HAL_SPI_MspInit+0xec>)
 80054e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ea:	4a30      	ldr	r2, [pc, #192]	; (80055ac <HAL_SPI_MspInit+0xec>)
 80054ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054f0:	6453      	str	r3, [r2, #68]	; 0x44
 80054f2:	4b2e      	ldr	r3, [pc, #184]	; (80055ac <HAL_SPI_MspInit+0xec>)
 80054f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054fa:	61bb      	str	r3, [r7, #24]
 80054fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	4b2a      	ldr	r3, [pc, #168]	; (80055ac <HAL_SPI_MspInit+0xec>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	4a29      	ldr	r2, [pc, #164]	; (80055ac <HAL_SPI_MspInit+0xec>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	6313      	str	r3, [r2, #48]	; 0x30
 800550e:	4b27      	ldr	r3, [pc, #156]	; (80055ac <HAL_SPI_MspInit+0xec>)
 8005510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800551a:	23e0      	movs	r3, #224	; 0xe0
 800551c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800551e:	2302      	movs	r3, #2
 8005520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005522:	2300      	movs	r3, #0
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005526:	2303      	movs	r3, #3
 8005528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800552a:	2305      	movs	r3, #5
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800552e:	f107 031c 	add.w	r3, r7, #28
 8005532:	4619      	mov	r1, r3
 8005534:	481e      	ldr	r0, [pc, #120]	; (80055b0 <HAL_SPI_MspInit+0xf0>)
 8005536:	f001 fb45 	bl	8006bc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800553a:	e030      	b.n	800559e <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a1c      	ldr	r2, [pc, #112]	; (80055b4 <HAL_SPI_MspInit+0xf4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d12b      	bne.n	800559e <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	4b18      	ldr	r3, [pc, #96]	; (80055ac <HAL_SPI_MspInit+0xec>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	4a17      	ldr	r2, [pc, #92]	; (80055ac <HAL_SPI_MspInit+0xec>)
 8005550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005554:	6413      	str	r3, [r2, #64]	; 0x40
 8005556:	4b15      	ldr	r3, [pc, #84]	; (80055ac <HAL_SPI_MspInit+0xec>)
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	4b11      	ldr	r3, [pc, #68]	; (80055ac <HAL_SPI_MspInit+0xec>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	4a10      	ldr	r2, [pc, #64]	; (80055ac <HAL_SPI_MspInit+0xec>)
 800556c:	f043 0302 	orr.w	r3, r3, #2
 8005570:	6313      	str	r3, [r2, #48]	; 0x30
 8005572:	4b0e      	ldr	r3, [pc, #56]	; (80055ac <HAL_SPI_MspInit+0xec>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800557e:	2338      	movs	r3, #56	; 0x38
 8005580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005582:	2302      	movs	r3, #2
 8005584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005586:	2300      	movs	r3, #0
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800558a:	2303      	movs	r3, #3
 800558c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800558e:	2306      	movs	r3, #6
 8005590:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005592:	f107 031c 	add.w	r3, r7, #28
 8005596:	4619      	mov	r1, r3
 8005598:	4807      	ldr	r0, [pc, #28]	; (80055b8 <HAL_SPI_MspInit+0xf8>)
 800559a:	f001 fb13 	bl	8006bc4 <HAL_GPIO_Init>
}
 800559e:	bf00      	nop
 80055a0:	3730      	adds	r7, #48	; 0x30
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40013000 	.word	0x40013000
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40020000 	.word	0x40020000
 80055b4:	40003c00 	.word	0x40003c00
 80055b8:	40020400 	.word	0x40020400

080055bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055c2:	2300      	movs	r3, #0
 80055c4:	607b      	str	r3, [r7, #4]
 80055c6:	4b10      	ldr	r3, [pc, #64]	; (8005608 <HAL_MspInit+0x4c>)
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	4a0f      	ldr	r2, [pc, #60]	; (8005608 <HAL_MspInit+0x4c>)
 80055cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055d0:	6453      	str	r3, [r2, #68]	; 0x44
 80055d2:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <HAL_MspInit+0x4c>)
 80055d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055da:	607b      	str	r3, [r7, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80055de:	2300      	movs	r3, #0
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	4b09      	ldr	r3, [pc, #36]	; (8005608 <HAL_MspInit+0x4c>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	4a08      	ldr	r2, [pc, #32]	; (8005608 <HAL_MspInit+0x4c>)
 80055e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ec:	6413      	str	r3, [r2, #64]	; 0x40
 80055ee:	4b06      	ldr	r3, [pc, #24]	; (8005608 <HAL_MspInit+0x4c>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40023800 	.word	0x40023800

0800560c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005610:	e7fe      	b.n	8005610 <NMI_Handler+0x4>

08005612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005612:	b480      	push	{r7}
 8005614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005616:	e7fe      	b.n	8005616 <HardFault_Handler+0x4>

08005618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800561c:	e7fe      	b.n	800561c <MemManage_Handler+0x4>

0800561e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800561e:	b480      	push	{r7}
 8005620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005622:	e7fe      	b.n	8005622 <BusFault_Handler+0x4>

08005624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005628:	e7fe      	b.n	8005628 <UsageFault_Handler+0x4>

0800562a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800562a:	b480      	push	{r7}
 800562c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800562e:	bf00      	nop
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800563c:	bf00      	nop
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005646:	b480      	push	{r7}
 8005648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800564a:	bf00      	nop
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005658:	f000 fcc0 	bl	8005fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800565c:	bf00      	nop
 800565e:	bd80      	pop	{r7, pc}

08005660 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IRQ_Pin);
 8005664:	2010      	movs	r0, #16
 8005666:	f001 fc7d 	bl	8006f64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800566a:	bf00      	nop
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 8005674:	4802      	ldr	r0, [pc, #8]	; (8005680 <DMA1_Stream5_IRQHandler+0x10>)
 8005676:	f000 f9e9 	bl	8005a4c <UARTDMA_DmaReceiveIrqHandler>
	return;
 800567a:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	2000032c 	.word	0x2000032c

08005684 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005688:	4802      	ldr	r0, [pc, #8]	; (8005694 <DMA1_Stream6_IRQHandler+0x10>)
 800568a:	f001 f823 	bl	80066d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800568e:	bf00      	nop
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000670 	.word	0x20000670

08005698 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 800569c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80056a0:	f001 fc60 	bl	8006f64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80056a4:	bf00      	nop
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80056ac:	4802      	ldr	r0, [pc, #8]	; (80056b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80056ae:	f005 fa14 	bl	800aada <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000580 	.word	0x20000580

080056bc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80056c0:	4802      	ldr	r0, [pc, #8]	; (80056cc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80056c2:	f005 fa0a 	bl	800aada <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80056c6:	bf00      	nop
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	200005c8 	.word	0x200005c8

080056d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80056d4:	4802      	ldr	r0, [pc, #8]	; (80056e0 <I2C1_EV_IRQHandler+0x10>)
 80056d6:	f002 f8c5 	bl	8007864 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80056da:	bf00      	nop
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	200002d8 	.word	0x200002d8

080056e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80056e8:	4802      	ldr	r0, [pc, #8]	; (80056f4 <I2C1_ER_IRQHandler+0x10>)
 80056ea:	f002 fa2c 	bl	8007b46 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80056ee:	bf00      	nop
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	200002d8 	.word	0x200002d8

080056f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 80056fc:	4803      	ldr	r0, [pc, #12]	; (800570c <USART2_IRQHandler+0x14>)
 80056fe:	f000 f97b 	bl	80059f8 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005702:	4803      	ldr	r0, [pc, #12]	; (8005710 <USART2_IRQHandler+0x18>)
 8005704:	f005 fcaa 	bl	800b05c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005708:	bf00      	nop
 800570a:	bd80      	pop	{r7, pc}
 800570c:	2000032c 	.word	0x2000032c
 8005710:	200006d0 	.word	0x200006d0

08005714 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8005718:	4802      	ldr	r0, [pc, #8]	; (8005724 <SPI3_IRQHandler+0x10>)
 800571a:	f004 ff15 	bl	800a548 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800571e:	bf00      	nop
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	200004d0 	.word	0x200004d0

08005728 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
	return 1;
 800572c:	2301      	movs	r3, #1
}
 800572e:	4618      	mov	r0, r3
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <_kill>:

int _kill(int pid, int sig)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005742:	f006 fcd7 	bl	800c0f4 <__errno>
 8005746:	4603      	mov	r3, r0
 8005748:	2216      	movs	r2, #22
 800574a:	601a      	str	r2, [r3, #0]
	return -1;
 800574c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <_exit>:

void _exit (int status)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005760:	f04f 31ff 	mov.w	r1, #4294967295
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff ffe7 	bl	8005738 <_kill>
	while (1) {}		/* Make sure we hang here */
 800576a:	e7fe      	b.n	800576a <_exit+0x12>

0800576c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	e00a      	b.n	8005794 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800577e:	f3af 8000 	nop.w
 8005782:	4601      	mov	r1, r0
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	60ba      	str	r2, [r7, #8]
 800578a:	b2ca      	uxtb	r2, r1
 800578c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	3301      	adds	r3, #1
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	dbf0      	blt.n	800577e <_read+0x12>
	}

return len;
 800579c:	687b      	ldr	r3, [r7, #4]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b086      	sub	sp, #24
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	e009      	b.n	80057cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	60ba      	str	r2, [r7, #8]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	3301      	adds	r3, #1
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	dbf1      	blt.n	80057b8 <_write+0x12>
	}
	return len;
 80057d4:	687b      	ldr	r3, [r7, #4]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <_close>:

int _close(int file)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
	return -1;
 80057e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005806:	605a      	str	r2, [r3, #4]
	return 0;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <_isatty>:

int _isatty(int file)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
	return 1;
 800581e:	2301      	movs	r3, #1
}
 8005820:	4618      	mov	r0, r3
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
	return 0;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005850:	4a14      	ldr	r2, [pc, #80]	; (80058a4 <_sbrk+0x5c>)
 8005852:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <_sbrk+0x60>)
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800585c:	4b13      	ldr	r3, [pc, #76]	; (80058ac <_sbrk+0x64>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d102      	bne.n	800586a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005864:	4b11      	ldr	r3, [pc, #68]	; (80058ac <_sbrk+0x64>)
 8005866:	4a12      	ldr	r2, [pc, #72]	; (80058b0 <_sbrk+0x68>)
 8005868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800586a:	4b10      	ldr	r3, [pc, #64]	; (80058ac <_sbrk+0x64>)
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4413      	add	r3, r2
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	429a      	cmp	r2, r3
 8005876:	d207      	bcs.n	8005888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005878:	f006 fc3c 	bl	800c0f4 <__errno>
 800587c:	4603      	mov	r3, r0
 800587e:	220c      	movs	r2, #12
 8005880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005882:	f04f 33ff 	mov.w	r3, #4294967295
 8005886:	e009      	b.n	800589c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005888:	4b08      	ldr	r3, [pc, #32]	; (80058ac <_sbrk+0x64>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800588e:	4b07      	ldr	r3, [pc, #28]	; (80058ac <_sbrk+0x64>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4413      	add	r3, r2
 8005896:	4a05      	ldr	r2, [pc, #20]	; (80058ac <_sbrk+0x64>)
 8005898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800589a:	68fb      	ldr	r3, [r7, #12]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20020000 	.word	0x20020000
 80058a8:	00000400 	.word	0x00000400
 80058ac:	20000270 	.word	0x20000270
 80058b0:	20000728 	.word	0x20000728

080058b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058b8:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <SystemInit+0x20>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058be:	4a05      	ldr	r2, [pc, #20]	; (80058d4 <SystemInit+0x20>)
 80058c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80058c8:	bf00      	nop
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	e000ed00 	.word	0xe000ed00

080058d8 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80058dc:	4b0e      	ldr	r3, [pc, #56]	; (8005918 <MX_TIM10_Init+0x40>)
 80058de:	4a0f      	ldr	r2, [pc, #60]	; (800591c <MX_TIM10_Init+0x44>)
 80058e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80058e2:	4b0d      	ldr	r3, [pc, #52]	; (8005918 <MX_TIM10_Init+0x40>)
 80058e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80058e8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058ea:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <MX_TIM10_Init+0x40>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80058f0:	4b09      	ldr	r3, [pc, #36]	; (8005918 <MX_TIM10_Init+0x40>)
 80058f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80058f6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058f8:	4b07      	ldr	r3, [pc, #28]	; (8005918 <MX_TIM10_Init+0x40>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058fe:	4b06      	ldr	r3, [pc, #24]	; (8005918 <MX_TIM10_Init+0x40>)
 8005900:	2200      	movs	r2, #0
 8005902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005904:	4804      	ldr	r0, [pc, #16]	; (8005918 <MX_TIM10_Init+0x40>)
 8005906:	f005 f807 	bl	800a918 <HAL_TIM_Base_Init>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8005910:	f7fe fb60 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005914:	bf00      	nop
 8005916:	bd80      	pop	{r7, pc}
 8005918:	20000580 	.word	0x20000580
 800591c:	40014400 	.word	0x40014400

08005920 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005924:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <MX_TIM11_Init+0x44>)
 8005926:	4a10      	ldr	r2, [pc, #64]	; (8005968 <MX_TIM11_Init+0x48>)
 8005928:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800592a:	4b0e      	ldr	r3, [pc, #56]	; (8005964 <MX_TIM11_Init+0x44>)
 800592c:	f643 2297 	movw	r2, #14999	; 0x3a97
 8005930:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005932:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <MX_TIM11_Init+0x44>)
 8005934:	2200      	movs	r2, #0
 8005936:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 8005938:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <MX_TIM11_Init+0x44>)
 800593a:	f247 522f 	movw	r2, #29999	; 0x752f
 800593e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005940:	4b08      	ldr	r3, [pc, #32]	; (8005964 <MX_TIM11_Init+0x44>)
 8005942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005946:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005948:	4b06      	ldr	r3, [pc, #24]	; (8005964 <MX_TIM11_Init+0x44>)
 800594a:	2200      	movs	r2, #0
 800594c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800594e:	4805      	ldr	r0, [pc, #20]	; (8005964 <MX_TIM11_Init+0x44>)
 8005950:	f004 ffe2 	bl	800a918 <HAL_TIM_Base_Init>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 800595a:	f7fe fb3b 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800595e:	bf00      	nop
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	200005c8 	.word	0x200005c8
 8005968:	40014800 	.word	0x40014800

0800596c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1c      	ldr	r2, [pc, #112]	; (80059ec <HAL_TIM_Base_MspInit+0x80>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d116      	bne.n	80059ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	4b1b      	ldr	r3, [pc, #108]	; (80059f0 <HAL_TIM_Base_MspInit+0x84>)
 8005984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005986:	4a1a      	ldr	r2, [pc, #104]	; (80059f0 <HAL_TIM_Base_MspInit+0x84>)
 8005988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800598c:	6453      	str	r3, [r2, #68]	; 0x44
 800598e:	4b18      	ldr	r3, [pc, #96]	; (80059f0 <HAL_TIM_Base_MspInit+0x84>)
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800599a:	2200      	movs	r2, #0
 800599c:	2100      	movs	r1, #0
 800599e:	2019      	movs	r0, #25
 80059a0:	f000 fc9f 	bl	80062e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80059a4:	2019      	movs	r0, #25
 80059a6:	f000 fcb8 	bl	800631a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80059aa:	e01a      	b.n	80059e2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a10      	ldr	r2, [pc, #64]	; (80059f4 <HAL_TIM_Base_MspInit+0x88>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d115      	bne.n	80059e2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80059b6:	2300      	movs	r3, #0
 80059b8:	60bb      	str	r3, [r7, #8]
 80059ba:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <HAL_TIM_Base_MspInit+0x84>)
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	4a0c      	ldr	r2, [pc, #48]	; (80059f0 <HAL_TIM_Base_MspInit+0x84>)
 80059c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059c4:	6453      	str	r3, [r2, #68]	; 0x44
 80059c6:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <HAL_TIM_Base_MspInit+0x84>)
 80059c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ce:	60bb      	str	r3, [r7, #8]
 80059d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80059d2:	2200      	movs	r2, #0
 80059d4:	2100      	movs	r1, #0
 80059d6:	201a      	movs	r0, #26
 80059d8:	f000 fc83 	bl	80062e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80059dc:	201a      	movs	r0, #26
 80059de:	f000 fc9c 	bl	800631a <HAL_NVIC_EnableIRQ>
}
 80059e2:	bf00      	nop
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40014400 	.word	0x40014400
 80059f0:	40023800 	.word	0x40023800
 80059f4:	40014800 	.word	0x40014800

080059f8 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d017      	beq.n	8005a40 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	60fb      	str	r3, [r7, #12]
	}
}
 8005a40:	bf00      	nop
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5c:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d056      	beq.n	8005b1e <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a78:	2220      	movs	r2, #32
 8005a7a:	409a      	lsls	r2, r3
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8005a90:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3304      	adds	r3, #4
 8005a96:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8005a98:	2300      	movs	r3, #0
 8005a9a:	82fb      	strh	r3, [r7, #22]
 8005a9c:	e01a      	b.n	8005ad4 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f103 0045 	add.w	r0, r3, #69	; 0x45
 8005aa4:	8afb      	ldrh	r3, [r7, #22]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	4619      	mov	r1, r3
 8005aae:	f7ff fc6b 	bl	8005388 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8005ab2:	8afb      	ldrh	r3, [r7, #22]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b0a      	cmp	r3, #10
 8005abc:	d107      	bne.n	8005ace <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8005ace:	8afb      	ldrh	r3, [r7, #22]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	82fb      	strh	r3, [r7, #22]
 8005ad4:	8afa      	ldrh	r2, [r7, #22]
 8005ad6:	89fb      	ldrh	r3, [r7, #14]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d3e0      	bcc.n	8005a9e <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	223f      	movs	r2, #63	; 0x3f
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	1d1a      	adds	r2, r3, #4
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2241      	movs	r2, #65	; 0x41
 8005b04:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f042 0201 	orr.w	r2, r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]
	}
}
 8005b1e:	bf00      	nop
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b082      	sub	sp, #8
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	33ca      	adds	r3, #202	; 0xca
 8005b36:	78fa      	ldrb	r2, [r7, #3]
 8005b38:	4611      	mov	r1, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff fc24 	bl	8005388 <RB_Write>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <UARTDMA_PutCharToTxBuffer+0x24>
	{
		return 1; // Error code
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <UARTDMA_PutCharToTxBuffer+0x26>
	}
	return 0; // Success code
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01f      	beq.n	8005bac <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8005b6c:	e013      	b.n	8005b96 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b0a      	cmp	r3, #10
 8005b74:	d10c      	bne.n	8005b90 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				return 0; // Exit if end line
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e00e      	b.n	8005bae <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	3345      	adds	r3, #69	; 0x45
 8005b9a:	68f9      	ldr	r1, [r7, #12]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff fbc5 	bl	800532c <RB_Read>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0e2      	beq.n	8005b6e <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	e000      	b.n	8005bae <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 8005bac:	2301      	movs	r3, #1
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8005bc4:	e012      	b.n	8005bec <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8005bc6:	7afb      	ldrb	r3, [r7, #11]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff ffab 	bl	8005b26 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8005bd6:	7afb      	ldrb	r3, [r7, #11]
 8005bd8:	2b0a      	cmp	r3, #10
 8005bda:	d107      	bne.n	8005bec <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8005be2:	3301      	adds	r3, #1
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	72fb      	strb	r3, [r7, #11]
 8005bf2:	7afb      	ldrb	r3, [r7, #11]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e6      	bne.n	8005bc6 <UARTDMA_Print+0x10>
		}
	}
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8005c2e:	2300      	movs	r3, #0
 8005c30:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d027      	beq.n	8005c92 <UARTDMA_TransmitEvent+0x6c>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8005c42:	e013      	b.n	8005c6c <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8005c44:	7b7b      	ldrb	r3, [r7, #13]
 8005c46:	2b0a      	cmp	r3, #10
 8005c48:	d107      	bne.n	8005c5a <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 8005c5a:	89fb      	ldrh	r3, [r7, #14]
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	81fa      	strh	r2, [r7, #14]
 8005c60:	4619      	mov	r1, r3
 8005c62:	7b7a      	ldrb	r2, [r7, #13]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	440b      	add	r3, r1
 8005c68:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	33ca      	adds	r3, #202	; 0xca
 8005c70:	f107 020d 	add.w	r2, r7, #13
 8005c74:	4611      	mov	r1, r2
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff fb58 	bl	800532c <RB_Read>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0e0      	beq.n	8005c44 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3389      	adds	r3, #137	; 0x89
 8005c8a:	89fa      	ldrh	r2, [r7, #14]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	f005 f937 	bl	800af00 <HAL_UART_Transmit_DMA>
	}
}
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0210 	orr.w	r2, r2, #16
 8005cbc:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0210 	orr.w	r2, r2, #16
 8005cd4:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0210 	orr.w	r2, r2, #16
 8005cec:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	2241      	movs	r2, #65	; 0x41
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	f005 f97f 	bl	800affc <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0208 	bic.w	r2, r2, #8
 8005d14:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0208 	bic.w	r2, r2, #8
 8005d2c:	601a      	str	r2, [r3, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <MX_USART2_UART_Init+0x4c>)
 8005d3e:	4a12      	ldr	r2, [pc, #72]	; (8005d88 <MX_USART2_UART_Init+0x50>)
 8005d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005d42:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <MX_USART2_UART_Init+0x4c>)
 8005d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005d4a:	4b0e      	ldr	r3, [pc, #56]	; (8005d84 <MX_USART2_UART_Init+0x4c>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005d50:	4b0c      	ldr	r3, [pc, #48]	; (8005d84 <MX_USART2_UART_Init+0x4c>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005d56:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <MX_USART2_UART_Init+0x4c>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005d5c:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <MX_USART2_UART_Init+0x4c>)
 8005d5e:	220c      	movs	r2, #12
 8005d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d62:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <MX_USART2_UART_Init+0x4c>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d68:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <MX_USART2_UART_Init+0x4c>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005d6e:	4805      	ldr	r0, [pc, #20]	; (8005d84 <MX_USART2_UART_Init+0x4c>)
 8005d70:	f005 f878 	bl	800ae64 <HAL_UART_Init>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005d7a:	f7fe f92b 	bl	8003fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	200006d0 	.word	0x200006d0
 8005d88:	40004400 	.word	0x40004400

08005d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	; 0x28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d94:	f107 0314 	add.w	r3, r7, #20
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	605a      	str	r2, [r3, #4]
 8005d9e:	609a      	str	r2, [r3, #8]
 8005da0:	60da      	str	r2, [r3, #12]
 8005da2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a47      	ldr	r2, [pc, #284]	; (8005ec8 <HAL_UART_MspInit+0x13c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	f040 8088 	bne.w	8005ec0 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005db0:	2300      	movs	r3, #0
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	4b45      	ldr	r3, [pc, #276]	; (8005ecc <HAL_UART_MspInit+0x140>)
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	4a44      	ldr	r2, [pc, #272]	; (8005ecc <HAL_UART_MspInit+0x140>)
 8005dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8005dc0:	4b42      	ldr	r3, [pc, #264]	; (8005ecc <HAL_UART_MspInit+0x140>)
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc8:	613b      	str	r3, [r7, #16]
 8005dca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	4b3e      	ldr	r3, [pc, #248]	; (8005ecc <HAL_UART_MspInit+0x140>)
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	4a3d      	ldr	r2, [pc, #244]	; (8005ecc <HAL_UART_MspInit+0x140>)
 8005dd6:	f043 0301 	orr.w	r3, r3, #1
 8005dda:	6313      	str	r3, [r2, #48]	; 0x30
 8005ddc:	4b3b      	ldr	r3, [pc, #236]	; (8005ecc <HAL_UART_MspInit+0x140>)
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005de8:	230c      	movs	r3, #12
 8005dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dec:	2302      	movs	r3, #2
 8005dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005df4:	2303      	movs	r3, #3
 8005df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005df8:	2307      	movs	r3, #7
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dfc:	f107 0314 	add.w	r3, r7, #20
 8005e00:	4619      	mov	r1, r3
 8005e02:	4833      	ldr	r0, [pc, #204]	; (8005ed0 <HAL_UART_MspInit+0x144>)
 8005e04:	f000 fede 	bl	8006bc4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005e08:	4b32      	ldr	r3, [pc, #200]	; (8005ed4 <HAL_UART_MspInit+0x148>)
 8005e0a:	4a33      	ldr	r2, [pc, #204]	; (8005ed8 <HAL_UART_MspInit+0x14c>)
 8005e0c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005e0e:	4b31      	ldr	r3, [pc, #196]	; (8005ed4 <HAL_UART_MspInit+0x148>)
 8005e10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e14:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e16:	4b2f      	ldr	r3, [pc, #188]	; (8005ed4 <HAL_UART_MspInit+0x148>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e1c:	4b2d      	ldr	r3, [pc, #180]	; (8005ed4 <HAL_UART_MspInit+0x148>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e22:	4b2c      	ldr	r3, [pc, #176]	; (8005ed4 <HAL_UART_MspInit+0x148>)
 8005e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e28:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e2a:	4b2a      	ldr	r3, [pc, #168]	; (8005ed4 <HAL_UART_MspInit+0x148>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e30:	4b28      	ldr	r3, [pc, #160]	; (8005ed4 <HAL_UART_MspInit+0x148>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005e36:	4b27      	ldr	r3, [pc, #156]	; (8005ed4 <HAL_UART_MspInit+0x148>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e3c:	4b25      	ldr	r3, [pc, #148]	; (8005ed4 <HAL_UART_MspInit+0x148>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e42:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <HAL_UART_MspInit+0x148>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005e48:	4822      	ldr	r0, [pc, #136]	; (8005ed4 <HAL_UART_MspInit+0x148>)
 8005e4a:	f000 faab 	bl	80063a4 <HAL_DMA_Init>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005e54:	f7fe f8be 	bl	8003fd4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ed4 <HAL_UART_MspInit+0x148>)
 8005e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8005e5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <HAL_UART_MspInit+0x148>)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005e64:	4b1d      	ldr	r3, [pc, #116]	; (8005edc <HAL_UART_MspInit+0x150>)
 8005e66:	4a1e      	ldr	r2, [pc, #120]	; (8005ee0 <HAL_UART_MspInit+0x154>)
 8005e68:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005e6a:	4b1c      	ldr	r3, [pc, #112]	; (8005edc <HAL_UART_MspInit+0x150>)
 8005e6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e70:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e72:	4b1a      	ldr	r3, [pc, #104]	; (8005edc <HAL_UART_MspInit+0x150>)
 8005e74:	2240      	movs	r2, #64	; 0x40
 8005e76:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e78:	4b18      	ldr	r3, [pc, #96]	; (8005edc <HAL_UART_MspInit+0x150>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e7e:	4b17      	ldr	r3, [pc, #92]	; (8005edc <HAL_UART_MspInit+0x150>)
 8005e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e84:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e86:	4b15      	ldr	r3, [pc, #84]	; (8005edc <HAL_UART_MspInit+0x150>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e8c:	4b13      	ldr	r3, [pc, #76]	; (8005edc <HAL_UART_MspInit+0x150>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005e92:	4b12      	ldr	r3, [pc, #72]	; (8005edc <HAL_UART_MspInit+0x150>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005e98:	4b10      	ldr	r3, [pc, #64]	; (8005edc <HAL_UART_MspInit+0x150>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e9e:	4b0f      	ldr	r3, [pc, #60]	; (8005edc <HAL_UART_MspInit+0x150>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005ea4:	480d      	ldr	r0, [pc, #52]	; (8005edc <HAL_UART_MspInit+0x150>)
 8005ea6:	f000 fa7d 	bl	80063a4 <HAL_DMA_Init>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8005eb0:	f7fe f890 	bl	8003fd4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a09      	ldr	r2, [pc, #36]	; (8005edc <HAL_UART_MspInit+0x150>)
 8005eb8:	635a      	str	r2, [r3, #52]	; 0x34
 8005eba:	4a08      	ldr	r2, [pc, #32]	; (8005edc <HAL_UART_MspInit+0x150>)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005ec0:	bf00      	nop
 8005ec2:	3728      	adds	r7, #40	; 0x28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40004400 	.word	0x40004400
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	40020000 	.word	0x40020000
 8005ed4:	20000610 	.word	0x20000610
 8005ed8:	40026088 	.word	0x40026088
 8005edc:	20000670 	.word	0x20000670
 8005ee0:	400260a0 	.word	0x400260a0

08005ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ee8:	480d      	ldr	r0, [pc, #52]	; (8005f20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005eea:	490e      	ldr	r1, [pc, #56]	; (8005f24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005eec:	4a0e      	ldr	r2, [pc, #56]	; (8005f28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ef0:	e002      	b.n	8005ef8 <LoopCopyDataInit>

08005ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ef6:	3304      	adds	r3, #4

08005ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005efc:	d3f9      	bcc.n	8005ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005efe:	4a0b      	ldr	r2, [pc, #44]	; (8005f2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005f00:	4c0b      	ldr	r4, [pc, #44]	; (8005f30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f04:	e001      	b.n	8005f0a <LoopFillZerobss>

08005f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f08:	3204      	adds	r2, #4

08005f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f0c:	d3fb      	bcc.n	8005f06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005f0e:	f7ff fcd1 	bl	80058b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f12:	f006 f8f5 	bl	800c100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f16:	f7fd ff2d 	bl	8003d74 <main>
  bx  lr    
 8005f1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005f1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f24:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8005f28:	08024630 	.word	0x08024630
  ldr r2, =_sbss
 8005f2c:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8005f30:	20000728 	.word	0x20000728

08005f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f34:	e7fe      	b.n	8005f34 <ADC_IRQHandler>
	...

08005f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f3c:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <HAL_Init+0x40>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a0d      	ldr	r2, [pc, #52]	; (8005f78 <HAL_Init+0x40>)
 8005f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f48:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <HAL_Init+0x40>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a0a      	ldr	r2, [pc, #40]	; (8005f78 <HAL_Init+0x40>)
 8005f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f54:	4b08      	ldr	r3, [pc, #32]	; (8005f78 <HAL_Init+0x40>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a07      	ldr	r2, [pc, #28]	; (8005f78 <HAL_Init+0x40>)
 8005f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f60:	2003      	movs	r0, #3
 8005f62:	f000 f9b3 	bl	80062cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f66:	2000      	movs	r0, #0
 8005f68:	f000 f808 	bl	8005f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f6c:	f7ff fb26 	bl	80055bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	40023c00 	.word	0x40023c00

08005f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f84:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <HAL_InitTick+0x54>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <HAL_InitTick+0x58>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f9d9 	bl	8006352 <HAL_SYSTICK_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e00e      	b.n	8005fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b0f      	cmp	r3, #15
 8005fae:	d80a      	bhi.n	8005fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb8:	f000 f993 	bl	80062e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005fbc:	4a06      	ldr	r2, [pc, #24]	; (8005fd8 <HAL_InitTick+0x5c>)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e000      	b.n	8005fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	20000034 	.word	0x20000034
 8005fd4:	2000003c 	.word	0x2000003c
 8005fd8:	20000038 	.word	0x20000038

08005fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fe0:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <HAL_IncTick+0x20>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4b06      	ldr	r3, [pc, #24]	; (8006000 <HAL_IncTick+0x24>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4413      	add	r3, r2
 8005fec:	4a04      	ldr	r2, [pc, #16]	; (8006000 <HAL_IncTick+0x24>)
 8005fee:	6013      	str	r3, [r2, #0]
}
 8005ff0:	bf00      	nop
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	2000003c 	.word	0x2000003c
 8006000:	20000714 	.word	0x20000714

08006004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return uwTick;
 8006008:	4b03      	ldr	r3, [pc, #12]	; (8006018 <HAL_GetTick+0x14>)
 800600a:	681b      	ldr	r3, [r3, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	20000714 	.word	0x20000714

0800601c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006024:	f7ff ffee 	bl	8006004 <HAL_GetTick>
 8006028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006034:	d005      	beq.n	8006042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006036:	4b0a      	ldr	r3, [pc, #40]	; (8006060 <HAL_Delay+0x44>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006042:	bf00      	nop
 8006044:	f7ff ffde 	bl	8006004 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	429a      	cmp	r2, r3
 8006052:	d8f7      	bhi.n	8006044 <HAL_Delay+0x28>
  {
  }
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	2000003c 	.word	0x2000003c

08006064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006074:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <__NVIC_SetPriorityGrouping+0x44>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006080:	4013      	ands	r3, r2
 8006082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800608c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006096:	4a04      	ldr	r2, [pc, #16]	; (80060a8 <__NVIC_SetPriorityGrouping+0x44>)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	60d3      	str	r3, [r2, #12]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	e000ed00 	.word	0xe000ed00

080060ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060b0:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <__NVIC_GetPriorityGrouping+0x18>)
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	0a1b      	lsrs	r3, r3, #8
 80060b6:	f003 0307 	and.w	r3, r3, #7
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	e000ed00 	.word	0xe000ed00

080060c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	4603      	mov	r3, r0
 80060d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	db0b      	blt.n	80060f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	f003 021f 	and.w	r2, r3, #31
 80060e0:	4907      	ldr	r1, [pc, #28]	; (8006100 <__NVIC_EnableIRQ+0x38>)
 80060e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	2001      	movs	r0, #1
 80060ea:	fa00 f202 	lsl.w	r2, r0, r2
 80060ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	e000e100 	.word	0xe000e100

08006104 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800610e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006112:	2b00      	cmp	r3, #0
 8006114:	db12      	blt.n	800613c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	f003 021f 	and.w	r2, r3, #31
 800611c:	490a      	ldr	r1, [pc, #40]	; (8006148 <__NVIC_DisableIRQ+0x44>)
 800611e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	2001      	movs	r0, #1
 8006126:	fa00 f202 	lsl.w	r2, r0, r2
 800612a:	3320      	adds	r3, #32
 800612c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006130:	f3bf 8f4f 	dsb	sy
}
 8006134:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006136:	f3bf 8f6f 	isb	sy
}
 800613a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	e000e100 	.word	0xe000e100

0800614c <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	4603      	mov	r3, r0
 8006154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800615a:	2b00      	cmp	r3, #0
 800615c:	db0e      	blt.n	800617c <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800615e:	4a0b      	ldr	r2, [pc, #44]	; (800618c <__NVIC_GetPendingIRQ+0x40>)
 8006160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	3340      	adds	r3, #64	; 0x40
 8006168:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800616c:	79fb      	ldrb	r3, [r7, #7]
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	fa22 f303 	lsr.w	r3, r2, r3
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	e000      	b.n	800617e <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 800617c:	2300      	movs	r3, #0
  }
}
 800617e:	4618      	mov	r0, r3
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	e000e100 	.word	0xe000e100

08006190 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800619a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	db0c      	blt.n	80061bc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	f003 021f 	and.w	r2, r3, #31
 80061a8:	4907      	ldr	r1, [pc, #28]	; (80061c8 <__NVIC_ClearPendingIRQ+0x38>)
 80061aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	2001      	movs	r0, #1
 80061b2:	fa00 f202 	lsl.w	r2, r0, r2
 80061b6:	3360      	adds	r3, #96	; 0x60
 80061b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	e000e100 	.word	0xe000e100

080061cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	6039      	str	r1, [r7, #0]
 80061d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	db0a      	blt.n	80061f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	490c      	ldr	r1, [pc, #48]	; (8006218 <__NVIC_SetPriority+0x4c>)
 80061e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ea:	0112      	lsls	r2, r2, #4
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	440b      	add	r3, r1
 80061f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061f4:	e00a      	b.n	800620c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	4908      	ldr	r1, [pc, #32]	; (800621c <__NVIC_SetPriority+0x50>)
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	3b04      	subs	r3, #4
 8006204:	0112      	lsls	r2, r2, #4
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	440b      	add	r3, r1
 800620a:	761a      	strb	r2, [r3, #24]
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	e000e100 	.word	0xe000e100
 800621c:	e000ed00 	.word	0xe000ed00

08006220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006220:	b480      	push	{r7}
 8006222:	b089      	sub	sp, #36	; 0x24
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f1c3 0307 	rsb	r3, r3, #7
 800623a:	2b04      	cmp	r3, #4
 800623c:	bf28      	it	cs
 800623e:	2304      	movcs	r3, #4
 8006240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	3304      	adds	r3, #4
 8006246:	2b06      	cmp	r3, #6
 8006248:	d902      	bls.n	8006250 <NVIC_EncodePriority+0x30>
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	3b03      	subs	r3, #3
 800624e:	e000      	b.n	8006252 <NVIC_EncodePriority+0x32>
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006254:	f04f 32ff 	mov.w	r2, #4294967295
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	43da      	mvns	r2, r3
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	401a      	ands	r2, r3
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006268:	f04f 31ff 	mov.w	r1, #4294967295
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	fa01 f303 	lsl.w	r3, r1, r3
 8006272:	43d9      	mvns	r1, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006278:	4313      	orrs	r3, r2
         );
}
 800627a:	4618      	mov	r0, r3
 800627c:	3724      	adds	r7, #36	; 0x24
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3b01      	subs	r3, #1
 8006294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006298:	d301      	bcc.n	800629e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800629a:	2301      	movs	r3, #1
 800629c:	e00f      	b.n	80062be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800629e:	4a0a      	ldr	r2, [pc, #40]	; (80062c8 <SysTick_Config+0x40>)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062a6:	210f      	movs	r1, #15
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ac:	f7ff ff8e 	bl	80061cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062b0:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <SysTick_Config+0x40>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062b6:	4b04      	ldr	r3, [pc, #16]	; (80062c8 <SysTick_Config+0x40>)
 80062b8:	2207      	movs	r2, #7
 80062ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	e000e010 	.word	0xe000e010

080062cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff fec5 	bl	8006064 <__NVIC_SetPriorityGrouping>
}
 80062da:	bf00      	nop
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b086      	sub	sp, #24
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	4603      	mov	r3, r0
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
 80062ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062f4:	f7ff feda 	bl	80060ac <__NVIC_GetPriorityGrouping>
 80062f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	6978      	ldr	r0, [r7, #20]
 8006300:	f7ff ff8e 	bl	8006220 <NVIC_EncodePriority>
 8006304:	4602      	mov	r2, r0
 8006306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800630a:	4611      	mov	r1, r2
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff ff5d 	bl	80061cc <__NVIC_SetPriority>
}
 8006312:	bf00      	nop
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	4603      	mov	r3, r0
 8006322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff fecd 	bl	80060c8 <__NVIC_EnableIRQ>
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b082      	sub	sp, #8
 800633a:	af00      	add	r7, sp, #0
 800633c:	4603      	mov	r3, r0
 800633e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fedd 	bl	8006104 <__NVIC_DisableIRQ>
}
 800634a:	bf00      	nop
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b082      	sub	sp, #8
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7ff ff94 	bl	8006288 <SysTick_Config>
 8006360:	4603      	mov	r3, r0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	4603      	mov	r3, r0
 8006372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8006374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff fee7 	bl	800614c <__NVIC_GetPendingIRQ>
 800637e:	4603      	mov	r3, r0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	4603      	mov	r3, r0
 8006390:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8006392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff fefa 	bl	8006190 <__NVIC_ClearPendingIRQ>
}
 800639c:	bf00      	nop
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80063b0:	f7ff fe28 	bl	8006004 <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e099      	b.n	80064f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063e0:	e00f      	b.n	8006402 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063e2:	f7ff fe0f 	bl	8006004 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b05      	cmp	r3, #5
 80063ee:	d908      	bls.n	8006402 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2203      	movs	r2, #3
 80063fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e078      	b.n	80064f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e8      	bne.n	80063e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4b38      	ldr	r3, [pc, #224]	; (80064fc <HAL_DMA_Init+0x158>)
 800641c:	4013      	ands	r3, r2
 800641e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800642e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800643a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006446:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	2b04      	cmp	r3, #4
 800645a:	d107      	bne.n	800646c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	4313      	orrs	r3, r2
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 0307 	bic.w	r3, r3, #7
 8006482:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	2b04      	cmp	r3, #4
 8006494:	d117      	bne.n	80064c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00e      	beq.n	80064c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fb0f 	bl	8006acc <DMA_CheckFifoParam>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d008      	beq.n	80064c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2240      	movs	r2, #64	; 0x40
 80064b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80064c2:	2301      	movs	r3, #1
 80064c4:	e016      	b.n	80064f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fac6 	bl	8006a60 <DMA_CalcBaseAndBitshift>
 80064d4:	4603      	mov	r3, r0
 80064d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064dc:	223f      	movs	r2, #63	; 0x3f
 80064de:	409a      	lsls	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	f010803f 	.word	0xf010803f

08006500 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006516:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <HAL_DMA_Start_IT+0x26>
 8006522:	2302      	movs	r3, #2
 8006524:	e040      	b.n	80065a8 <HAL_DMA_Start_IT+0xa8>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b01      	cmp	r3, #1
 8006538:	d12f      	bne.n	800659a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2202      	movs	r2, #2
 800653e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 fa58 	bl	8006a04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006558:	223f      	movs	r2, #63	; 0x3f
 800655a:	409a      	lsls	r2, r3
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0216 	orr.w	r2, r2, #22
 800656e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006574:	2b00      	cmp	r3, #0
 8006576:	d007      	beq.n	8006588 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0208 	orr.w	r2, r2, #8
 8006586:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f042 0201 	orr.w	r2, r2, #1
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	e005      	b.n	80065a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80065a2:	2302      	movs	r3, #2
 80065a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80065be:	f7ff fd21 	bl	8006004 <HAL_GetTick>
 80065c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d008      	beq.n	80065e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2280      	movs	r2, #128	; 0x80
 80065d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e052      	b.n	8006688 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0216 	bic.w	r2, r2, #22
 80065f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695a      	ldr	r2, [r3, #20]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006600:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d103      	bne.n	8006612 <HAL_DMA_Abort+0x62>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0208 	bic.w	r2, r2, #8
 8006620:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0201 	bic.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006632:	e013      	b.n	800665c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006634:	f7ff fce6 	bl	8006004 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b05      	cmp	r3, #5
 8006640:	d90c      	bls.n	800665c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2220      	movs	r2, #32
 8006646:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2203      	movs	r2, #3
 800664c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e015      	b.n	8006688 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e4      	bne.n	8006634 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666e:	223f      	movs	r2, #63	; 0x3f
 8006670:	409a      	lsls	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d004      	beq.n	80066ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2280      	movs	r2, #128	; 0x80
 80066a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e00c      	b.n	80066c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2205      	movs	r2, #5
 80066b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0201 	bic.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80066e0:	4b92      	ldr	r3, [pc, #584]	; (800692c <HAL_DMA_IRQHandler+0x258>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a92      	ldr	r2, [pc, #584]	; (8006930 <HAL_DMA_IRQHandler+0x25c>)
 80066e6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ea:	0a9b      	lsrs	r3, r3, #10
 80066ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fe:	2208      	movs	r2, #8
 8006700:	409a      	lsls	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4013      	ands	r3, r2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d01a      	beq.n	8006740 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d013      	beq.n	8006740 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0204 	bic.w	r2, r2, #4
 8006726:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672c:	2208      	movs	r2, #8
 800672e:	409a      	lsls	r2, r3
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006738:	f043 0201 	orr.w	r2, r3, #1
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006744:	2201      	movs	r2, #1
 8006746:	409a      	lsls	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4013      	ands	r3, r2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d012      	beq.n	8006776 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00b      	beq.n	8006776 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006762:	2201      	movs	r2, #1
 8006764:	409a      	lsls	r2, r3
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	f043 0202 	orr.w	r2, r3, #2
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800677a:	2204      	movs	r2, #4
 800677c:	409a      	lsls	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4013      	ands	r3, r2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d012      	beq.n	80067ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006798:	2204      	movs	r2, #4
 800679a:	409a      	lsls	r2, r3
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a4:	f043 0204 	orr.w	r2, r3, #4
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b0:	2210      	movs	r2, #16
 80067b2:	409a      	lsls	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4013      	ands	r3, r2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d043      	beq.n	8006844 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d03c      	beq.n	8006844 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ce:	2210      	movs	r2, #16
 80067d0:	409a      	lsls	r2, r3
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d018      	beq.n	8006816 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d108      	bne.n	8006804 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d024      	beq.n	8006844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
 8006802:	e01f      	b.n	8006844 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01b      	beq.n	8006844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
 8006814:	e016      	b.n	8006844 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006820:	2b00      	cmp	r3, #0
 8006822:	d107      	bne.n	8006834 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0208 	bic.w	r2, r2, #8
 8006832:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d003      	beq.n	8006844 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006848:	2220      	movs	r2, #32
 800684a:	409a      	lsls	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4013      	ands	r3, r2
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 808e 	beq.w	8006972 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0310 	and.w	r3, r3, #16
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8086 	beq.w	8006972 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686a:	2220      	movs	r2, #32
 800686c:	409a      	lsls	r2, r3
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b05      	cmp	r3, #5
 800687c:	d136      	bne.n	80068ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0216 	bic.w	r2, r2, #22
 800688c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695a      	ldr	r2, [r3, #20]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800689c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d103      	bne.n	80068ae <HAL_DMA_IRQHandler+0x1da>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d007      	beq.n	80068be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0208 	bic.w	r2, r2, #8
 80068bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c2:	223f      	movs	r2, #63	; 0x3f
 80068c4:	409a      	lsls	r2, r3
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d07d      	beq.n	80069de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	4798      	blx	r3
        }
        return;
 80068ea:	e078      	b.n	80069de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d01c      	beq.n	8006934 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d108      	bne.n	800691a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690c:	2b00      	cmp	r3, #0
 800690e:	d030      	beq.n	8006972 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	4798      	blx	r3
 8006918:	e02b      	b.n	8006972 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691e:	2b00      	cmp	r3, #0
 8006920:	d027      	beq.n	8006972 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
 800692a:	e022      	b.n	8006972 <HAL_DMA_IRQHandler+0x29e>
 800692c:	20000034 	.word	0x20000034
 8006930:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10f      	bne.n	8006962 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0210 	bic.w	r2, r2, #16
 8006950:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006976:	2b00      	cmp	r3, #0
 8006978:	d032      	beq.n	80069e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d022      	beq.n	80069cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2205      	movs	r2, #5
 800698a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	3301      	adds	r3, #1
 80069a2:	60bb      	str	r3, [r7, #8]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d307      	bcc.n	80069ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1f2      	bne.n	800699e <HAL_DMA_IRQHandler+0x2ca>
 80069b8:	e000      	b.n	80069bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80069ba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
 80069dc:	e000      	b.n	80069e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80069de:	bf00      	nop
    }
  }
}
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop

080069e8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069f6:	b2db      	uxtb	r3, r3
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2b40      	cmp	r3, #64	; 0x40
 8006a30:	d108      	bne.n	8006a44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006a42:	e007      	b.n	8006a54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	60da      	str	r2, [r3, #12]
}
 8006a54:	bf00      	nop
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	3b10      	subs	r3, #16
 8006a70:	4a14      	ldr	r2, [pc, #80]	; (8006ac4 <DMA_CalcBaseAndBitshift+0x64>)
 8006a72:	fba2 2303 	umull	r2, r3, r2, r3
 8006a76:	091b      	lsrs	r3, r3, #4
 8006a78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006a7a:	4a13      	ldr	r2, [pc, #76]	; (8006ac8 <DMA_CalcBaseAndBitshift+0x68>)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d909      	bls.n	8006aa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006a96:	f023 0303 	bic.w	r3, r3, #3
 8006a9a:	1d1a      	adds	r2, r3, #4
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	659a      	str	r2, [r3, #88]	; 0x58
 8006aa0:	e007      	b.n	8006ab2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006aaa:	f023 0303 	bic.w	r3, r3, #3
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	aaaaaaab 	.word	0xaaaaaaab
 8006ac8:	08024104 	.word	0x08024104

08006acc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006adc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d11f      	bne.n	8006b26 <DMA_CheckFifoParam+0x5a>
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d856      	bhi.n	8006b9a <DMA_CheckFifoParam+0xce>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <DMA_CheckFifoParam+0x28>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b05 	.word	0x08006b05
 8006af8:	08006b17 	.word	0x08006b17
 8006afc:	08006b05 	.word	0x08006b05
 8006b00:	08006b9b 	.word	0x08006b9b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d046      	beq.n	8006b9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b14:	e043      	b.n	8006b9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b1e:	d140      	bne.n	8006ba2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b24:	e03d      	b.n	8006ba2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b2e:	d121      	bne.n	8006b74 <DMA_CheckFifoParam+0xa8>
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d837      	bhi.n	8006ba6 <DMA_CheckFifoParam+0xda>
 8006b36:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <DMA_CheckFifoParam+0x70>)
 8006b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3c:	08006b4d 	.word	0x08006b4d
 8006b40:	08006b53 	.word	0x08006b53
 8006b44:	08006b4d 	.word	0x08006b4d
 8006b48:	08006b65 	.word	0x08006b65
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b50:	e030      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d025      	beq.n	8006baa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b62:	e022      	b.n	8006baa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b6c:	d11f      	bne.n	8006bae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006b72:	e01c      	b.n	8006bae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d903      	bls.n	8006b82 <DMA_CheckFifoParam+0xb6>
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d003      	beq.n	8006b88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006b80:	e018      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	73fb      	strb	r3, [r7, #15]
      break;
 8006b86:	e015      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00e      	beq.n	8006bb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	73fb      	strb	r3, [r7, #15]
      break;
 8006b98:	e00b      	b.n	8006bb2 <DMA_CheckFifoParam+0xe6>
      break;
 8006b9a:	bf00      	nop
 8006b9c:	e00a      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8006b9e:	bf00      	nop
 8006ba0:	e008      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8006ba2:	bf00      	nop
 8006ba4:	e006      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8006ba6:	bf00      	nop
 8006ba8:	e004      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8006baa:	bf00      	nop
 8006bac:	e002      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8006bae:	bf00      	nop
 8006bb0:	e000      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8006bb2:	bf00      	nop
    }
  } 
  
  return status; 
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop

08006bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b089      	sub	sp, #36	; 0x24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61fb      	str	r3, [r7, #28]
 8006bde:	e159      	b.n	8006e94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006be0:	2201      	movs	r2, #1
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	fa02 f303 	lsl.w	r3, r2, r3
 8006be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	f040 8148 	bne.w	8006e8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d005      	beq.n	8006c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d130      	bne.n	8006c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	2203      	movs	r2, #3
 8006c22:	fa02 f303 	lsl.w	r3, r2, r3
 8006c26:	43db      	mvns	r3, r3
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	43db      	mvns	r3, r3
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	091b      	lsrs	r3, r3, #4
 8006c62:	f003 0201 	and.w	r2, r3, #1
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f003 0303 	and.w	r3, r3, #3
 8006c80:	2b03      	cmp	r3, #3
 8006c82:	d017      	beq.n	8006cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	2203      	movs	r2, #3
 8006c90:	fa02 f303 	lsl.w	r3, r2, r3
 8006c94:	43db      	mvns	r3, r3
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d123      	bne.n	8006d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	08da      	lsrs	r2, r3, #3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3208      	adds	r2, #8
 8006cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	220f      	movs	r2, #15
 8006cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	08da      	lsrs	r2, r3, #3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3208      	adds	r2, #8
 8006d02:	69b9      	ldr	r1, [r7, #24]
 8006d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	2203      	movs	r2, #3
 8006d14:	fa02 f303 	lsl.w	r3, r2, r3
 8006d18:	43db      	mvns	r3, r3
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f003 0203 	and.w	r2, r3, #3
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 80a2 	beq.w	8006e8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	4b57      	ldr	r3, [pc, #348]	; (8006eac <HAL_GPIO_Init+0x2e8>)
 8006d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d52:	4a56      	ldr	r2, [pc, #344]	; (8006eac <HAL_GPIO_Init+0x2e8>)
 8006d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d58:	6453      	str	r3, [r2, #68]	; 0x44
 8006d5a:	4b54      	ldr	r3, [pc, #336]	; (8006eac <HAL_GPIO_Init+0x2e8>)
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d66:	4a52      	ldr	r2, [pc, #328]	; (8006eb0 <HAL_GPIO_Init+0x2ec>)
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	089b      	lsrs	r3, r3, #2
 8006d6c:	3302      	adds	r3, #2
 8006d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f003 0303 	and.w	r3, r3, #3
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	220f      	movs	r2, #15
 8006d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d82:	43db      	mvns	r3, r3
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	4013      	ands	r3, r2
 8006d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a49      	ldr	r2, [pc, #292]	; (8006eb4 <HAL_GPIO_Init+0x2f0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d019      	beq.n	8006dc6 <HAL_GPIO_Init+0x202>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a48      	ldr	r2, [pc, #288]	; (8006eb8 <HAL_GPIO_Init+0x2f4>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d013      	beq.n	8006dc2 <HAL_GPIO_Init+0x1fe>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a47      	ldr	r2, [pc, #284]	; (8006ebc <HAL_GPIO_Init+0x2f8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d00d      	beq.n	8006dbe <HAL_GPIO_Init+0x1fa>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a46      	ldr	r2, [pc, #280]	; (8006ec0 <HAL_GPIO_Init+0x2fc>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d007      	beq.n	8006dba <HAL_GPIO_Init+0x1f6>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a45      	ldr	r2, [pc, #276]	; (8006ec4 <HAL_GPIO_Init+0x300>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d101      	bne.n	8006db6 <HAL_GPIO_Init+0x1f2>
 8006db2:	2304      	movs	r3, #4
 8006db4:	e008      	b.n	8006dc8 <HAL_GPIO_Init+0x204>
 8006db6:	2307      	movs	r3, #7
 8006db8:	e006      	b.n	8006dc8 <HAL_GPIO_Init+0x204>
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e004      	b.n	8006dc8 <HAL_GPIO_Init+0x204>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e002      	b.n	8006dc8 <HAL_GPIO_Init+0x204>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e000      	b.n	8006dc8 <HAL_GPIO_Init+0x204>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	69fa      	ldr	r2, [r7, #28]
 8006dca:	f002 0203 	and.w	r2, r2, #3
 8006dce:	0092      	lsls	r2, r2, #2
 8006dd0:	4093      	lsls	r3, r2
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006dd8:	4935      	ldr	r1, [pc, #212]	; (8006eb0 <HAL_GPIO_Init+0x2ec>)
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	089b      	lsrs	r3, r3, #2
 8006dde:	3302      	adds	r3, #2
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006de6:	4b38      	ldr	r3, [pc, #224]	; (8006ec8 <HAL_GPIO_Init+0x304>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	43db      	mvns	r3, r3
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	4013      	ands	r3, r2
 8006df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d003      	beq.n	8006e0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e0a:	4a2f      	ldr	r2, [pc, #188]	; (8006ec8 <HAL_GPIO_Init+0x304>)
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006e10:	4b2d      	ldr	r3, [pc, #180]	; (8006ec8 <HAL_GPIO_Init+0x304>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	43db      	mvns	r3, r3
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006e34:	4a24      	ldr	r2, [pc, #144]	; (8006ec8 <HAL_GPIO_Init+0x304>)
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e3a:	4b23      	ldr	r3, [pc, #140]	; (8006ec8 <HAL_GPIO_Init+0x304>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	43db      	mvns	r3, r3
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	4013      	ands	r3, r2
 8006e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e5e:	4a1a      	ldr	r2, [pc, #104]	; (8006ec8 <HAL_GPIO_Init+0x304>)
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e64:	4b18      	ldr	r3, [pc, #96]	; (8006ec8 <HAL_GPIO_Init+0x304>)
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	4013      	ands	r3, r2
 8006e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e88:	4a0f      	ldr	r2, [pc, #60]	; (8006ec8 <HAL_GPIO_Init+0x304>)
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	3301      	adds	r3, #1
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2b0f      	cmp	r3, #15
 8006e98:	f67f aea2 	bls.w	8006be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006e9c:	bf00      	nop
 8006e9e:	bf00      	nop
 8006ea0:	3724      	adds	r7, #36	; 0x24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	40023800 	.word	0x40023800
 8006eb0:	40013800 	.word	0x40013800
 8006eb4:	40020000 	.word	0x40020000
 8006eb8:	40020400 	.word	0x40020400
 8006ebc:	40020800 	.word	0x40020800
 8006ec0:	40020c00 	.word	0x40020c00
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	40013c00 	.word	0x40013c00

08006ecc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691a      	ldr	r2, [r3, #16]
 8006edc:	887b      	ldrh	r3, [r7, #2]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	73fb      	strb	r3, [r7, #15]
 8006ee8:	e001      	b.n	8006eee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	807b      	strh	r3, [r7, #2]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f0c:	787b      	ldrb	r3, [r7, #1]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f12:	887a      	ldrh	r2, [r7, #2]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f18:	e003      	b.n	8006f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f1a:	887b      	ldrh	r3, [r7, #2]
 8006f1c:	041a      	lsls	r2, r3, #16
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	619a      	str	r2, [r3, #24]
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b085      	sub	sp, #20
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f40:	887a      	ldrh	r2, [r7, #2]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4013      	ands	r3, r2
 8006f46:	041a      	lsls	r2, r3, #16
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	43d9      	mvns	r1, r3
 8006f4c:	887b      	ldrh	r3, [r7, #2]
 8006f4e:	400b      	ands	r3, r1
 8006f50:	431a      	orrs	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	619a      	str	r2, [r3, #24]
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
	...

08006f64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006f6e:	4b08      	ldr	r3, [pc, #32]	; (8006f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f70:	695a      	ldr	r2, [r3, #20]
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	4013      	ands	r3, r2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d006      	beq.n	8006f88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f7a:	4a05      	ldr	r2, [pc, #20]	; (8006f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f80:	88fb      	ldrh	r3, [r7, #6]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fd f812 	bl	8003fac <HAL_GPIO_EXTI_Callback>
  }
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	40013c00 	.word	0x40013c00

08006f94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e12b      	b.n	80071fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fc fe8a 	bl	8003cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2224      	movs	r2, #36	; 0x24
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0201 	bic.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fe6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ff6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006ff8:	f003 f852 	bl	800a0a0 <HAL_RCC_GetPCLK1Freq>
 8006ffc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	4a81      	ldr	r2, [pc, #516]	; (8007208 <HAL_I2C_Init+0x274>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d807      	bhi.n	8007018 <HAL_I2C_Init+0x84>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4a80      	ldr	r2, [pc, #512]	; (800720c <HAL_I2C_Init+0x278>)
 800700c:	4293      	cmp	r3, r2
 800700e:	bf94      	ite	ls
 8007010:	2301      	movls	r3, #1
 8007012:	2300      	movhi	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	e006      	b.n	8007026 <HAL_I2C_Init+0x92>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4a7d      	ldr	r2, [pc, #500]	; (8007210 <HAL_I2C_Init+0x27c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	bf94      	ite	ls
 8007020:	2301      	movls	r3, #1
 8007022:	2300      	movhi	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e0e7      	b.n	80071fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4a78      	ldr	r2, [pc, #480]	; (8007214 <HAL_I2C_Init+0x280>)
 8007032:	fba2 2303 	umull	r2, r3, r2, r3
 8007036:	0c9b      	lsrs	r3, r3, #18
 8007038:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	4a6a      	ldr	r2, [pc, #424]	; (8007208 <HAL_I2C_Init+0x274>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d802      	bhi.n	8007068 <HAL_I2C_Init+0xd4>
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	3301      	adds	r3, #1
 8007066:	e009      	b.n	800707c <HAL_I2C_Init+0xe8>
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800706e:	fb02 f303 	mul.w	r3, r2, r3
 8007072:	4a69      	ldr	r2, [pc, #420]	; (8007218 <HAL_I2C_Init+0x284>)
 8007074:	fba2 2303 	umull	r2, r3, r2, r3
 8007078:	099b      	lsrs	r3, r3, #6
 800707a:	3301      	adds	r3, #1
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	430b      	orrs	r3, r1
 8007082:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800708e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	495c      	ldr	r1, [pc, #368]	; (8007208 <HAL_I2C_Init+0x274>)
 8007098:	428b      	cmp	r3, r1
 800709a:	d819      	bhi.n	80070d0 <HAL_I2C_Init+0x13c>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	1e59      	subs	r1, r3, #1
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80070aa:	1c59      	adds	r1, r3, #1
 80070ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80070b0:	400b      	ands	r3, r1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <HAL_I2C_Init+0x138>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	1e59      	subs	r1, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80070c4:	3301      	adds	r3, #1
 80070c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070ca:	e051      	b.n	8007170 <HAL_I2C_Init+0x1dc>
 80070cc:	2304      	movs	r3, #4
 80070ce:	e04f      	b.n	8007170 <HAL_I2C_Init+0x1dc>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d111      	bne.n	80070fc <HAL_I2C_Init+0x168>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	1e58      	subs	r0, r3, #1
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6859      	ldr	r1, [r3, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	440b      	add	r3, r1
 80070e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80070ea:	3301      	adds	r3, #1
 80070ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	bf0c      	ite	eq
 80070f4:	2301      	moveq	r3, #1
 80070f6:	2300      	movne	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	e012      	b.n	8007122 <HAL_I2C_Init+0x18e>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	1e58      	subs	r0, r3, #1
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6859      	ldr	r1, [r3, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	0099      	lsls	r1, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007112:	3301      	adds	r3, #1
 8007114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007118:	2b00      	cmp	r3, #0
 800711a:	bf0c      	ite	eq
 800711c:	2301      	moveq	r3, #1
 800711e:	2300      	movne	r3, #0
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <HAL_I2C_Init+0x196>
 8007126:	2301      	movs	r3, #1
 8007128:	e022      	b.n	8007170 <HAL_I2C_Init+0x1dc>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10e      	bne.n	8007150 <HAL_I2C_Init+0x1bc>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	1e58      	subs	r0, r3, #1
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6859      	ldr	r1, [r3, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	440b      	add	r3, r1
 8007140:	fbb0 f3f3 	udiv	r3, r0, r3
 8007144:	3301      	adds	r3, #1
 8007146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800714a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800714e:	e00f      	b.n	8007170 <HAL_I2C_Init+0x1dc>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	1e58      	subs	r0, r3, #1
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6859      	ldr	r1, [r3, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	440b      	add	r3, r1
 800715e:	0099      	lsls	r1, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	fbb0 f3f3 	udiv	r3, r0, r3
 8007166:	3301      	adds	r3, #1
 8007168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800716c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007170:	6879      	ldr	r1, [r7, #4]
 8007172:	6809      	ldr	r1, [r1, #0]
 8007174:	4313      	orrs	r3, r2
 8007176:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69da      	ldr	r2, [r3, #28]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800719e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6911      	ldr	r1, [r2, #16]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	68d2      	ldr	r2, [r2, #12]
 80071aa:	4311      	orrs	r1, r2
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6812      	ldr	r2, [r2, #0]
 80071b0:	430b      	orrs	r3, r1
 80071b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	695a      	ldr	r2, [r3, #20]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	431a      	orrs	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0201 	orr.w	r2, r2, #1
 80071de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	000186a0 	.word	0x000186a0
 800720c:	001e847f 	.word	0x001e847f
 8007210:	003d08ff 	.word	0x003d08ff
 8007214:	431bde83 	.word	0x431bde83
 8007218:	10624dd3 	.word	0x10624dd3

0800721c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af02      	add	r7, sp, #8
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	607a      	str	r2, [r7, #4]
 8007226:	461a      	mov	r2, r3
 8007228:	460b      	mov	r3, r1
 800722a:	817b      	strh	r3, [r7, #10]
 800722c:	4613      	mov	r3, r2
 800722e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007230:	f7fe fee8 	bl	8006004 <HAL_GetTick>
 8007234:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b20      	cmp	r3, #32
 8007240:	f040 80e0 	bne.w	8007404 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	2319      	movs	r3, #25
 800724a:	2201      	movs	r2, #1
 800724c:	4970      	ldr	r1, [pc, #448]	; (8007410 <HAL_I2C_Master_Transmit+0x1f4>)
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f002 f8dc 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800725a:	2302      	movs	r3, #2
 800725c:	e0d3      	b.n	8007406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_I2C_Master_Transmit+0x50>
 8007268:	2302      	movs	r3, #2
 800726a:	e0cc      	b.n	8007406 <HAL_I2C_Master_Transmit+0x1ea>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b01      	cmp	r3, #1
 8007280:	d007      	beq.n	8007292 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0201 	orr.w	r2, r2, #1
 8007290:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2221      	movs	r2, #33	; 0x21
 80072a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2210      	movs	r2, #16
 80072ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	893a      	ldrh	r2, [r7, #8]
 80072c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4a50      	ldr	r2, [pc, #320]	; (8007414 <HAL_I2C_Master_Transmit+0x1f8>)
 80072d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80072d4:	8979      	ldrh	r1, [r7, #10]
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	6a3a      	ldr	r2, [r7, #32]
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f001 fe9e 	bl	800901c <I2C_MasterRequestWrite>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e08d      	b.n	8007406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ea:	2300      	movs	r3, #0
 80072ec:	613b      	str	r3, [r7, #16]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	613b      	str	r3, [r7, #16]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007300:	e066      	b.n	80073d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	6a39      	ldr	r1, [r7, #32]
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f002 f956 	bl	80095b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00d      	beq.n	800732e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	2b04      	cmp	r3, #4
 8007318:	d107      	bne.n	800732a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007328:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e06b      	b.n	8007406 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	781a      	ldrb	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	1c5a      	adds	r2, r3, #1
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007348:	b29b      	uxth	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007356:	3b01      	subs	r3, #1
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b04      	cmp	r3, #4
 800736a:	d11b      	bne.n	80073a4 <HAL_I2C_Master_Transmit+0x188>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007370:	2b00      	cmp	r3, #0
 8007372:	d017      	beq.n	80073a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	781a      	ldrb	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800738e:	b29b      	uxth	r3, r3
 8007390:	3b01      	subs	r3, #1
 8007392:	b29a      	uxth	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800739c:	3b01      	subs	r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	6a39      	ldr	r1, [r7, #32]
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f002 f946 	bl	800963a <I2C_WaitOnBTFFlagUntilTimeout>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00d      	beq.n	80073d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	d107      	bne.n	80073cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e01a      	b.n	8007406 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d194      	bne.n	8007302 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	e000      	b.n	8007406 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007404:	2302      	movs	r3, #2
  }
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	00100002 	.word	0x00100002
 8007414:	ffff0000 	.word	0xffff0000

08007418 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b08c      	sub	sp, #48	; 0x30
 800741c:	af02      	add	r7, sp, #8
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	607a      	str	r2, [r7, #4]
 8007422:	461a      	mov	r2, r3
 8007424:	460b      	mov	r3, r1
 8007426:	817b      	strh	r3, [r7, #10]
 8007428:	4613      	mov	r3, r2
 800742a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800742c:	f7fe fdea 	bl	8006004 <HAL_GetTick>
 8007430:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b20      	cmp	r3, #32
 800743c:	f040 820b 	bne.w	8007856 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	2319      	movs	r3, #25
 8007446:	2201      	movs	r2, #1
 8007448:	497c      	ldr	r1, [pc, #496]	; (800763c <HAL_I2C_Master_Receive+0x224>)
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f001 ffde 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007456:	2302      	movs	r3, #2
 8007458:	e1fe      	b.n	8007858 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_I2C_Master_Receive+0x50>
 8007464:	2302      	movs	r3, #2
 8007466:	e1f7      	b.n	8007858 <HAL_I2C_Master_Receive+0x440>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b01      	cmp	r3, #1
 800747c:	d007      	beq.n	800748e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f042 0201 	orr.w	r2, r2, #1
 800748c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800749c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2222      	movs	r2, #34	; 0x22
 80074a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2210      	movs	r2, #16
 80074aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	893a      	ldrh	r2, [r7, #8]
 80074be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4a5c      	ldr	r2, [pc, #368]	; (8007640 <HAL_I2C_Master_Receive+0x228>)
 80074ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80074d0:	8979      	ldrh	r1, [r7, #10]
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f001 fe22 	bl	8009120 <I2C_MasterRequestRead>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e1b8      	b.n	8007858 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d113      	bne.n	8007516 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ee:	2300      	movs	r3, #0
 80074f0:	623b      	str	r3, [r7, #32]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	623b      	str	r3, [r7, #32]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	623b      	str	r3, [r7, #32]
 8007502:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	e18c      	b.n	8007830 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751a:	2b01      	cmp	r3, #1
 800751c:	d11b      	bne.n	8007556 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800752c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800752e:	2300      	movs	r3, #0
 8007530:	61fb      	str	r3, [r7, #28]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	61fb      	str	r3, [r7, #28]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	61fb      	str	r3, [r7, #28]
 8007542:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	e16c      	b.n	8007830 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755a:	2b02      	cmp	r3, #2
 800755c:	d11b      	bne.n	8007596 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800756c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800757c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800757e:	2300      	movs	r3, #0
 8007580:	61bb      	str	r3, [r7, #24]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	61bb      	str	r3, [r7, #24]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	61bb      	str	r3, [r7, #24]
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	e14c      	b.n	8007830 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075a6:	2300      	movs	r3, #0
 80075a8:	617b      	str	r3, [r7, #20]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	617b      	str	r3, [r7, #20]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80075bc:	e138      	b.n	8007830 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	f200 80f1 	bhi.w	80077aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d123      	bne.n	8007618 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f002 f8a3 	bl	8009720 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e139      	b.n	8007858 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691a      	ldr	r2, [r3, #16]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007600:	3b01      	subs	r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760c:	b29b      	uxth	r3, r3
 800760e:	3b01      	subs	r3, #1
 8007610:	b29a      	uxth	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007616:	e10b      	b.n	8007830 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800761c:	2b02      	cmp	r3, #2
 800761e:	d14e      	bne.n	80076be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	2200      	movs	r2, #0
 8007628:	4906      	ldr	r1, [pc, #24]	; (8007644 <HAL_I2C_Master_Receive+0x22c>)
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f001 feee 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d008      	beq.n	8007648 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e10e      	b.n	8007858 <HAL_I2C_Master_Receive+0x440>
 800763a:	bf00      	nop
 800763c:	00100002 	.word	0x00100002
 8007640:	ffff0000 	.word	0xffff0000
 8007644:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	691a      	ldr	r2, [r3, #16]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	b2d2      	uxtb	r2, r2
 8007664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007674:	3b01      	subs	r3, #1
 8007676:	b29a      	uxth	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	691a      	ldr	r2, [r3, #16]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	b2d2      	uxtb	r2, r2
 8007696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076bc:	e0b8      	b.n	8007830 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	2200      	movs	r2, #0
 80076c6:	4966      	ldr	r1, [pc, #408]	; (8007860 <HAL_I2C_Master_Receive+0x448>)
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f001 fe9f 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e0bf      	b.n	8007858 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691a      	ldr	r2, [r3, #16]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007704:	3b01      	subs	r3, #1
 8007706:	b29a      	uxth	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007710:	b29b      	uxth	r3, r3
 8007712:	3b01      	subs	r3, #1
 8007714:	b29a      	uxth	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	2200      	movs	r2, #0
 8007722:	494f      	ldr	r1, [pc, #316]	; (8007860 <HAL_I2C_Master_Receive+0x448>)
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f001 fe71 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e091      	b.n	8007858 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	691a      	ldr	r2, [r3, #16]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007760:	3b01      	subs	r3, #1
 8007762:	b29a      	uxth	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776c:	b29b      	uxth	r3, r3
 800776e:	3b01      	subs	r3, #1
 8007770:	b29a      	uxth	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	b2d2      	uxtb	r2, r2
 8007782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007792:	3b01      	subs	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077a8:	e042      	b.n	8007830 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f001 ffb6 	bl	8009720 <I2C_WaitOnRXNEFlagUntilTimeout>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e04c      	b.n	8007858 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	b2d2      	uxtb	r2, r2
 80077ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077da:	3b01      	subs	r3, #1
 80077dc:	b29a      	uxth	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	3b01      	subs	r3, #1
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	f003 0304 	and.w	r3, r3, #4
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d118      	bne.n	8007830 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	b2d2      	uxtb	r2, r2
 800780a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781a:	3b01      	subs	r3, #1
 800781c:	b29a      	uxth	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007826:	b29b      	uxth	r3, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007834:	2b00      	cmp	r3, #0
 8007836:	f47f aec2 	bne.w	80075be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2220      	movs	r2, #32
 800783e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	e000      	b.n	8007858 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007856:	2302      	movs	r3, #2
  }
}
 8007858:	4618      	mov	r0, r3
 800785a:	3728      	adds	r7, #40	; 0x28
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	00010004 	.word	0x00010004

08007864 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007884:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800788c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800788e:	7bfb      	ldrb	r3, [r7, #15]
 8007890:	2b10      	cmp	r3, #16
 8007892:	d003      	beq.n	800789c <HAL_I2C_EV_IRQHandler+0x38>
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	f040 80c1 	bne.w	8007a1e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10d      	bne.n	80078d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80078bc:	d003      	beq.n	80078c6 <HAL_I2C_EV_IRQHandler+0x62>
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80078c4:	d101      	bne.n	80078ca <HAL_I2C_EV_IRQHandler+0x66>
 80078c6:	2301      	movs	r3, #1
 80078c8:	e000      	b.n	80078cc <HAL_I2C_EV_IRQHandler+0x68>
 80078ca:	2300      	movs	r3, #0
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	f000 8132 	beq.w	8007b36 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00c      	beq.n	80078f6 <HAL_I2C_EV_IRQHandler+0x92>
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	0a5b      	lsrs	r3, r3, #9
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d006      	beq.n	80078f6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 ff9e 	bl	800982a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fd79 	bl	80083e6 <I2C_Master_SB>
 80078f4:	e092      	b.n	8007a1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	08db      	lsrs	r3, r3, #3
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d009      	beq.n	8007916 <HAL_I2C_EV_IRQHandler+0xb2>
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	0a5b      	lsrs	r3, r3, #9
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fdef 	bl	80084f2 <I2C_Master_ADD10>
 8007914:	e082      	b.n	8007a1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	085b      	lsrs	r3, r3, #1
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d009      	beq.n	8007936 <HAL_I2C_EV_IRQHandler+0xd2>
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	0a5b      	lsrs	r3, r3, #9
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fe09 	bl	8008546 <I2C_Master_ADDR>
 8007934:	e072      	b.n	8007a1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	089b      	lsrs	r3, r3, #2
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d03b      	beq.n	80079ba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800794c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007950:	f000 80f3 	beq.w	8007b3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	09db      	lsrs	r3, r3, #7
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00f      	beq.n	8007980 <HAL_I2C_EV_IRQHandler+0x11c>
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	0a9b      	lsrs	r3, r3, #10
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d009      	beq.n	8007980 <HAL_I2C_EV_IRQHandler+0x11c>
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	089b      	lsrs	r3, r3, #2
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	d103      	bne.n	8007980 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f9f3 	bl	8007d64 <I2C_MasterTransmit_TXE>
 800797e:	e04d      	b.n	8007a1c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	089b      	lsrs	r3, r3, #2
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 80d6 	beq.w	8007b3a <HAL_I2C_EV_IRQHandler+0x2d6>
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	0a5b      	lsrs	r3, r3, #9
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 80cf 	beq.w	8007b3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	2b21      	cmp	r3, #33	; 0x21
 80079a0:	d103      	bne.n	80079aa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fa7a 	bl	8007e9c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079a8:	e0c7      	b.n	8007b3a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80079aa:	7bfb      	ldrb	r3, [r7, #15]
 80079ac:	2b40      	cmp	r3, #64	; 0x40
 80079ae:	f040 80c4 	bne.w	8007b3a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fae8 	bl	8007f88 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079b8:	e0bf      	b.n	8007b3a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c8:	f000 80b7 	beq.w	8007b3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	099b      	lsrs	r3, r3, #6
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00f      	beq.n	80079f8 <HAL_I2C_EV_IRQHandler+0x194>
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	0a9b      	lsrs	r3, r3, #10
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <HAL_I2C_EV_IRQHandler+0x194>
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	089b      	lsrs	r3, r3, #2
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d103      	bne.n	80079f8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fb5d 	bl	80080b0 <I2C_MasterReceive_RXNE>
 80079f6:	e011      	b.n	8007a1c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	089b      	lsrs	r3, r3, #2
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 809a 	beq.w	8007b3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	0a5b      	lsrs	r3, r3, #9
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 8093 	beq.w	8007b3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fbfc 	bl	8008212 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a1a:	e08e      	b.n	8007b3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8007a1c:	e08d      	b.n	8007b3a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d004      	beq.n	8007a30 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	61fb      	str	r3, [r7, #28]
 8007a2e:	e007      	b.n	8007a40 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	085b      	lsrs	r3, r3, #1
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d012      	beq.n	8007a72 <HAL_I2C_EV_IRQHandler+0x20e>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	0a5b      	lsrs	r3, r3, #9
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00c      	beq.n	8007a72 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007a68:	69b9      	ldr	r1, [r7, #24]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 ffba 	bl	80089e4 <I2C_Slave_ADDR>
 8007a70:	e066      	b.n	8007b40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	091b      	lsrs	r3, r3, #4
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d009      	beq.n	8007a92 <HAL_I2C_EV_IRQHandler+0x22e>
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	0a5b      	lsrs	r3, r3, #9
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fff4 	bl	8008a78 <I2C_Slave_STOPF>
 8007a90:	e056      	b.n	8007b40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	2b21      	cmp	r3, #33	; 0x21
 8007a96:	d002      	beq.n	8007a9e <HAL_I2C_EV_IRQHandler+0x23a>
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2b29      	cmp	r3, #41	; 0x29
 8007a9c:	d125      	bne.n	8007aea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	09db      	lsrs	r3, r3, #7
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00f      	beq.n	8007aca <HAL_I2C_EV_IRQHandler+0x266>
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	0a9b      	lsrs	r3, r3, #10
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d009      	beq.n	8007aca <HAL_I2C_EV_IRQHandler+0x266>
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	089b      	lsrs	r3, r3, #2
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fed0 	bl	8008868 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007ac8:	e039      	b.n	8007b3e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	089b      	lsrs	r3, r3, #2
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d033      	beq.n	8007b3e <HAL_I2C_EV_IRQHandler+0x2da>
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	0a5b      	lsrs	r3, r3, #9
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d02d      	beq.n	8007b3e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fefd 	bl	80088e2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007ae8:	e029      	b.n	8007b3e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	099b      	lsrs	r3, r3, #6
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00f      	beq.n	8007b16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	0a9b      	lsrs	r3, r3, #10
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d009      	beq.n	8007b16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	089b      	lsrs	r3, r3, #2
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d103      	bne.n	8007b16 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 ff08 	bl	8008924 <I2C_SlaveReceive_RXNE>
 8007b14:	e014      	b.n	8007b40 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	089b      	lsrs	r3, r3, #2
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00e      	beq.n	8007b40 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	0a5b      	lsrs	r3, r3, #9
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d008      	beq.n	8007b40 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 ff36 	bl	80089a0 <I2C_SlaveReceive_BTF>
 8007b34:	e004      	b.n	8007b40 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007b36:	bf00      	nop
 8007b38:	e002      	b.n	8007b40 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b3a:	bf00      	nop
 8007b3c:	e000      	b.n	8007b40 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007b3e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007b40:	3720      	adds	r7, #32
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b08a      	sub	sp, #40	; 0x28
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b68:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	0a1b      	lsrs	r3, r3, #8
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00e      	beq.n	8007b94 <HAL_I2C_ER_IRQHandler+0x4e>
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	0a1b      	lsrs	r3, r3, #8
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d008      	beq.n	8007b94 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	f043 0301 	orr.w	r3, r3, #1
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b92:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	0a5b      	lsrs	r3, r3, #9
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00e      	beq.n	8007bbe <HAL_I2C_ER_IRQHandler+0x78>
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	0a1b      	lsrs	r3, r3, #8
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d008      	beq.n	8007bbe <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	f043 0302 	orr.w	r3, r3, #2
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007bbc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	0a9b      	lsrs	r3, r3, #10
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d03f      	beq.n	8007c4a <HAL_I2C_ER_IRQHandler+0x104>
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	0a1b      	lsrs	r3, r3, #8
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d039      	beq.n	8007c4a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007bd6:	7efb      	ldrb	r3, [r7, #27]
 8007bd8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007be8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007bf0:	7ebb      	ldrb	r3, [r7, #26]
 8007bf2:	2b20      	cmp	r3, #32
 8007bf4:	d112      	bne.n	8007c1c <HAL_I2C_ER_IRQHandler+0xd6>
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10f      	bne.n	8007c1c <HAL_I2C_ER_IRQHandler+0xd6>
 8007bfc:	7cfb      	ldrb	r3, [r7, #19]
 8007bfe:	2b21      	cmp	r3, #33	; 0x21
 8007c00:	d008      	beq.n	8007c14 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007c02:	7cfb      	ldrb	r3, [r7, #19]
 8007c04:	2b29      	cmp	r3, #41	; 0x29
 8007c06:	d005      	beq.n	8007c14 <HAL_I2C_ER_IRQHandler+0xce>
 8007c08:	7cfb      	ldrb	r3, [r7, #19]
 8007c0a:	2b28      	cmp	r3, #40	; 0x28
 8007c0c:	d106      	bne.n	8007c1c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b21      	cmp	r3, #33	; 0x21
 8007c12:	d103      	bne.n	8007c1c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f001 f85f 	bl	8008cd8 <I2C_Slave_AF>
 8007c1a:	e016      	b.n	8007c4a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c24:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	f043 0304 	orr.w	r3, r3, #4
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007c2e:	7efb      	ldrb	r3, [r7, #27]
 8007c30:	2b10      	cmp	r3, #16
 8007c32:	d002      	beq.n	8007c3a <HAL_I2C_ER_IRQHandler+0xf4>
 8007c34:	7efb      	ldrb	r3, [r7, #27]
 8007c36:	2b40      	cmp	r3, #64	; 0x40
 8007c38:	d107      	bne.n	8007c4a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c48:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	0adb      	lsrs	r3, r3, #11
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00e      	beq.n	8007c74 <HAL_I2C_ER_IRQHandler+0x12e>
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	0a1b      	lsrs	r3, r3, #8
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d008      	beq.n	8007c74 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	f043 0308 	orr.w	r3, r3, #8
 8007c68:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007c72:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d008      	beq.n	8007c8c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 f896 	bl	8008db8 <I2C_ITError>
  }
}
 8007c8c:	bf00      	nop
 8007c8e:	3728      	adds	r7, #40	; 0x28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d72:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d7a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d150      	bne.n	8007e2c <I2C_MasterTransmit_TXE+0xc8>
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	2b21      	cmp	r3, #33	; 0x21
 8007d8e:	d14d      	bne.n	8007e2c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b08      	cmp	r3, #8
 8007d94:	d01d      	beq.n	8007dd2 <I2C_MasterTransmit_TXE+0x6e>
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d01a      	beq.n	8007dd2 <I2C_MasterTransmit_TXE+0x6e>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007da2:	d016      	beq.n	8007dd2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007db2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2211      	movs	r2, #17
 8007db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7ff ff62 	bl	8007c94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007dd0:	e060      	b.n	8007e94 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007de0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007df0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b40      	cmp	r3, #64	; 0x40
 8007e0a:	d107      	bne.n	8007e1c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7ff ff7d 	bl	8007d14 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007e1a:	e03b      	b.n	8007e94 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff ff35 	bl	8007c94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007e2a:	e033      	b.n	8007e94 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	2b21      	cmp	r3, #33	; 0x21
 8007e30:	d005      	beq.n	8007e3e <I2C_MasterTransmit_TXE+0xda>
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b40      	cmp	r3, #64	; 0x40
 8007e36:	d12d      	bne.n	8007e94 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
 8007e3a:	2b22      	cmp	r3, #34	; 0x22
 8007e3c:	d12a      	bne.n	8007e94 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d108      	bne.n	8007e5a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e56:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007e58:	e01c      	b.n	8007e94 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b40      	cmp	r3, #64	; 0x40
 8007e64:	d103      	bne.n	8007e6e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f88e 	bl	8007f88 <I2C_MemoryTransmit_TXE_BTF>
}
 8007e6c:	e012      	b.n	8007e94 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	781a      	ldrb	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007e92:	e7ff      	b.n	8007e94 <I2C_MasterTransmit_TXE+0x130>
 8007e94:	bf00      	nop
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b21      	cmp	r3, #33	; 0x21
 8007eb4:	d164      	bne.n	8007f80 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d012      	beq.n	8007ee6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec4:	781a      	ldrb	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007ee4:	e04c      	b.n	8007f80 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b08      	cmp	r3, #8
 8007eea:	d01d      	beq.n	8007f28 <I2C_MasterTransmit_BTF+0x8c>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	d01a      	beq.n	8007f28 <I2C_MasterTransmit_BTF+0x8c>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ef8:	d016      	beq.n	8007f28 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f08:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2211      	movs	r2, #17
 8007f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff feb7 	bl	8007c94 <HAL_I2C_MasterTxCpltCallback>
}
 8007f26:	e02b      	b.n	8007f80 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f36:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f46:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b40      	cmp	r3, #64	; 0x40
 8007f60:	d107      	bne.n	8007f72 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff fed2 	bl	8007d14 <HAL_I2C_MemTxCpltCallback>
}
 8007f70:	e006      	b.n	8007f80 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff fe8a 	bl	8007c94 <HAL_I2C_MasterTxCpltCallback>
}
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d11d      	bne.n	8007fdc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d10b      	bne.n	8007fc0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb8:	1c9a      	adds	r2, r3, #2
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007fbe:	e073      	b.n	80080a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	121b      	asrs	r3, r3, #8
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007fda:	e065      	b.n	80080a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d10b      	bne.n	8007ffc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff4:	1c5a      	adds	r2, r3, #1
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007ffa:	e055      	b.n	80080a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008000:	2b02      	cmp	r3, #2
 8008002:	d151      	bne.n	80080a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	2b22      	cmp	r3, #34	; 0x22
 8008008:	d10d      	bne.n	8008026 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008018:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008024:	e040      	b.n	80080a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800802a:	b29b      	uxth	r3, r3
 800802c:	2b00      	cmp	r3, #0
 800802e:	d015      	beq.n	800805c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	2b21      	cmp	r3, #33	; 0x21
 8008034:	d112      	bne.n	800805c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803a:	781a      	ldrb	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	1c5a      	adds	r2, r3, #1
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008050:	b29b      	uxth	r3, r3
 8008052:	3b01      	subs	r3, #1
 8008054:	b29a      	uxth	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800805a:	e025      	b.n	80080a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008060:	b29b      	uxth	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d120      	bne.n	80080a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	2b21      	cmp	r3, #33	; 0x21
 800806a:	d11d      	bne.n	80080a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800807a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800808a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2220      	movs	r2, #32
 8008096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff fe36 	bl	8007d14 <HAL_I2C_MemTxCpltCallback>
}
 80080a8:	bf00      	nop
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b22      	cmp	r3, #34	; 0x22
 80080c2:	f040 80a2 	bne.w	800820a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d921      	bls.n	8008118 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	691a      	ldr	r2, [r3, #16]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080fe:	b29b      	uxth	r3, r3
 8008100:	2b03      	cmp	r3, #3
 8008102:	f040 8082 	bne.w	800820a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008114:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8008116:	e078      	b.n	800820a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	2b02      	cmp	r3, #2
 800811e:	d074      	beq.n	800820a <I2C_MasterReceive_RXNE+0x15a>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d002      	beq.n	800812c <I2C_MasterReceive_RXNE+0x7c>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d16e      	bne.n	800820a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 fac5 	bl	80096bc <I2C_WaitOnSTOPRequestThroughIT>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d142      	bne.n	80081be <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008146:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008156:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	691a      	ldr	r2, [r3, #16]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008174:	b29b      	uxth	r3, r3
 8008176:	3b01      	subs	r3, #1
 8008178:	b29a      	uxth	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b40      	cmp	r3, #64	; 0x40
 8008190:	d10a      	bne.n	80081a8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff fdc1 	bl	8007d28 <HAL_I2C_MemRxCpltCallback>
}
 80081a6:	e030      	b.n	800820a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2212      	movs	r2, #18
 80081b4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff fd76 	bl	8007ca8 <HAL_I2C_MasterRxCpltCallback>
}
 80081bc:	e025      	b.n	800820a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80081cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691a      	ldr	r2, [r3, #16]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	b2d2      	uxtb	r2, r2
 80081da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	3b01      	subs	r3, #1
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff fd99 	bl	8007d3c <HAL_I2C_ErrorCallback>
}
 800820a:	bf00      	nop
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008224:	b29b      	uxth	r3, r3
 8008226:	2b04      	cmp	r3, #4
 8008228:	d11b      	bne.n	8008262 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008238:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	b2d2      	uxtb	r2, r2
 8008246:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008256:	b29b      	uxth	r3, r3
 8008258:	3b01      	subs	r3, #1
 800825a:	b29a      	uxth	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008260:	e0bd      	b.n	80083de <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008266:	b29b      	uxth	r3, r3
 8008268:	2b03      	cmp	r3, #3
 800826a:	d129      	bne.n	80082c0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800827a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2b04      	cmp	r3, #4
 8008280:	d00a      	beq.n	8008298 <I2C_MasterReceive_BTF+0x86>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2b02      	cmp	r3, #2
 8008286:	d007      	beq.n	8008298 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008296:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691a      	ldr	r2, [r3, #16]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	b2d2      	uxtb	r2, r2
 80082a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80082be:	e08e      	b.n	80083de <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d176      	bne.n	80083b8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d002      	beq.n	80082d6 <I2C_MasterReceive_BTF+0xc4>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b10      	cmp	r3, #16
 80082d4:	d108      	bne.n	80082e8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	e019      	b.n	800831c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d002      	beq.n	80082f4 <I2C_MasterReceive_BTF+0xe2>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d108      	bne.n	8008306 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	e00a      	b.n	800831c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b10      	cmp	r3, #16
 800830a:	d007      	beq.n	800831c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800831a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	691a      	ldr	r2, [r3, #16]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008338:	b29b      	uxth	r3, r3
 800833a:	3b01      	subs	r3, #1
 800833c:	b29a      	uxth	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	691a      	ldr	r2, [r3, #16]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	b2d2      	uxtb	r2, r2
 800834e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800835e:	b29b      	uxth	r3, r3
 8008360:	3b01      	subs	r3, #1
 8008362:	b29a      	uxth	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008376:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2220      	movs	r2, #32
 800837c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b40      	cmp	r3, #64	; 0x40
 800838a:	d10a      	bne.n	80083a2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7ff fcc4 	bl	8007d28 <HAL_I2C_MemRxCpltCallback>
}
 80083a0:	e01d      	b.n	80083de <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2212      	movs	r2, #18
 80083ae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff fc79 	bl	8007ca8 <HAL_I2C_MasterRxCpltCallback>
}
 80083b6:	e012      	b.n	80083de <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	691a      	ldr	r2, [r3, #16]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	b2d2      	uxtb	r2, r2
 80083c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	3b01      	subs	r3, #1
 80083d8:	b29a      	uxth	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80083de:	bf00      	nop
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b40      	cmp	r3, #64	; 0x40
 80083f8:	d117      	bne.n	800842a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d109      	bne.n	8008416 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008406:	b2db      	uxtb	r3, r3
 8008408:	461a      	mov	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008412:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008414:	e067      	b.n	80084e6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841a:	b2db      	uxtb	r3, r3
 800841c:	f043 0301 	orr.w	r3, r3, #1
 8008420:	b2da      	uxtb	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	611a      	str	r2, [r3, #16]
}
 8008428:	e05d      	b.n	80084e6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008432:	d133      	bne.n	800849c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b21      	cmp	r3, #33	; 0x21
 800843e:	d109      	bne.n	8008454 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008444:	b2db      	uxtb	r3, r3
 8008446:	461a      	mov	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008450:	611a      	str	r2, [r3, #16]
 8008452:	e008      	b.n	8008466 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008458:	b2db      	uxtb	r3, r3
 800845a:	f043 0301 	orr.w	r3, r3, #1
 800845e:	b2da      	uxtb	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846a:	2b00      	cmp	r3, #0
 800846c:	d004      	beq.n	8008478 <I2C_Master_SB+0x92>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008474:	2b00      	cmp	r3, #0
 8008476:	d108      	bne.n	800848a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847c:	2b00      	cmp	r3, #0
 800847e:	d032      	beq.n	80084e6 <I2C_Master_SB+0x100>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d02d      	beq.n	80084e6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008498:	605a      	str	r2, [r3, #4]
}
 800849a:	e024      	b.n	80084e6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10e      	bne.n	80084c2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	11db      	asrs	r3, r3, #7
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	f003 0306 	and.w	r3, r3, #6
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	f063 030f 	orn	r3, r3, #15
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	611a      	str	r2, [r3, #16]
}
 80084c0:	e011      	b.n	80084e6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d10d      	bne.n	80084e6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	11db      	asrs	r3, r3, #7
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	f003 0306 	and.w	r3, r3, #6
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	f063 030e 	orn	r3, r3, #14
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	611a      	str	r2, [r3, #16]
}
 80084e6:	bf00      	nop
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850a:	2b00      	cmp	r3, #0
 800850c:	d004      	beq.n	8008518 <I2C_Master_ADD10+0x26>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008514:	2b00      	cmp	r3, #0
 8008516:	d108      	bne.n	800852a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00c      	beq.n	800853a <I2C_Master_ADD10+0x48>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008526:	2b00      	cmp	r3, #0
 8008528:	d007      	beq.n	800853a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008538:	605a      	str	r2, [r3, #4]
  }
}
 800853a:	bf00      	nop
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008546:	b480      	push	{r7}
 8008548:	b091      	sub	sp, #68	; 0x44
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008554:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008562:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b22      	cmp	r3, #34	; 0x22
 800856e:	f040 8169 	bne.w	8008844 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10f      	bne.n	800859a <I2C_Master_ADDR+0x54>
 800857a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800857e:	2b40      	cmp	r3, #64	; 0x40
 8008580:	d10b      	bne.n	800859a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008582:	2300      	movs	r3, #0
 8008584:	633b      	str	r3, [r7, #48]	; 0x30
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	633b      	str	r3, [r7, #48]	; 0x30
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	633b      	str	r3, [r7, #48]	; 0x30
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	e160      	b.n	800885c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d11d      	bne.n	80085de <I2C_Master_ADDR+0x98>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80085aa:	d118      	bne.n	80085de <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085ac:	2300      	movs	r3, #0
 80085ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085d0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d6:	1c5a      	adds	r2, r3, #1
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	651a      	str	r2, [r3, #80]	; 0x50
 80085dc:	e13e      	b.n	800885c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d113      	bne.n	8008610 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085e8:	2300      	movs	r3, #0
 80085ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80085fc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	e115      	b.n	800883c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008614:	b29b      	uxth	r3, r3
 8008616:	2b01      	cmp	r3, #1
 8008618:	f040 808a 	bne.w	8008730 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008622:	d137      	bne.n	8008694 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008632:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800863e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008642:	d113      	bne.n	800866c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008652:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008654:	2300      	movs	r3, #0
 8008656:	627b      	str	r3, [r7, #36]	; 0x24
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	627b      	str	r3, [r7, #36]	; 0x24
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	e0e7      	b.n	800883c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800866c:	2300      	movs	r3, #0
 800866e:	623b      	str	r3, [r7, #32]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	623b      	str	r3, [r7, #32]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	623b      	str	r3, [r7, #32]
 8008680:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	e0d3      	b.n	800883c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008696:	2b08      	cmp	r3, #8
 8008698:	d02e      	beq.n	80086f8 <I2C_Master_ADDR+0x1b2>
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	2b20      	cmp	r3, #32
 800869e:	d02b      	beq.n	80086f8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80086a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a2:	2b12      	cmp	r3, #18
 80086a4:	d102      	bne.n	80086ac <I2C_Master_ADDR+0x166>
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d125      	bne.n	80086f8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	d00e      	beq.n	80086d0 <I2C_Master_ADDR+0x18a>
 80086b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d00b      	beq.n	80086d0 <I2C_Master_ADDR+0x18a>
 80086b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ba:	2b10      	cmp	r3, #16
 80086bc:	d008      	beq.n	80086d0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	e007      	b.n	80086e0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086de:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086e0:	2300      	movs	r3, #0
 80086e2:	61fb      	str	r3, [r7, #28]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	61fb      	str	r3, [r7, #28]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	61fb      	str	r3, [r7, #28]
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	e0a1      	b.n	800883c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008706:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008708:	2300      	movs	r3, #0
 800870a:	61bb      	str	r3, [r7, #24]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	61bb      	str	r3, [r7, #24]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	61bb      	str	r3, [r7, #24]
 800871c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	e085      	b.n	800883c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008734:	b29b      	uxth	r3, r3
 8008736:	2b02      	cmp	r3, #2
 8008738:	d14d      	bne.n	80087d6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	2b04      	cmp	r3, #4
 800873e:	d016      	beq.n	800876e <I2C_Master_ADDR+0x228>
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	2b02      	cmp	r3, #2
 8008744:	d013      	beq.n	800876e <I2C_Master_ADDR+0x228>
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	2b10      	cmp	r3, #16
 800874a:	d010      	beq.n	800876e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800875a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800876a:	601a      	str	r2, [r3, #0]
 800876c:	e007      	b.n	800877e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800877c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800878c:	d117      	bne.n	80087be <I2C_Master_ADDR+0x278>
 800878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008794:	d00b      	beq.n	80087ae <I2C_Master_ADDR+0x268>
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	2b01      	cmp	r3, #1
 800879a:	d008      	beq.n	80087ae <I2C_Master_ADDR+0x268>
 800879c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879e:	2b08      	cmp	r3, #8
 80087a0:	d005      	beq.n	80087ae <I2C_Master_ADDR+0x268>
 80087a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a4:	2b10      	cmp	r3, #16
 80087a6:	d002      	beq.n	80087ae <I2C_Master_ADDR+0x268>
 80087a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087aa:	2b20      	cmp	r3, #32
 80087ac:	d107      	bne.n	80087be <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087be:	2300      	movs	r3, #0
 80087c0:	617b      	str	r3, [r7, #20]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	617b      	str	r3, [r7, #20]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	617b      	str	r3, [r7, #20]
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	e032      	b.n	800883c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087e4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087f4:	d117      	bne.n	8008826 <I2C_Master_ADDR+0x2e0>
 80087f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80087fc:	d00b      	beq.n	8008816 <I2C_Master_ADDR+0x2d0>
 80087fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008800:	2b01      	cmp	r3, #1
 8008802:	d008      	beq.n	8008816 <I2C_Master_ADDR+0x2d0>
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	2b08      	cmp	r3, #8
 8008808:	d005      	beq.n	8008816 <I2C_Master_ADDR+0x2d0>
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	2b10      	cmp	r3, #16
 800880e:	d002      	beq.n	8008816 <I2C_Master_ADDR+0x2d0>
 8008810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008812:	2b20      	cmp	r3, #32
 8008814:	d107      	bne.n	8008826 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008824:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008826:	2300      	movs	r3, #0
 8008828:	613b      	str	r3, [r7, #16]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	613b      	str	r3, [r7, #16]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	613b      	str	r3, [r7, #16]
 800883a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008842:	e00b      	b.n	800885c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008844:	2300      	movs	r3, #0
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	60fb      	str	r3, [r7, #12]
 8008858:	68fb      	ldr	r3, [r7, #12]
}
 800885a:	e7ff      	b.n	800885c <I2C_Master_ADDR+0x316>
 800885c:	bf00      	nop
 800885e:	3744      	adds	r7, #68	; 0x44
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008876:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887c:	b29b      	uxth	r3, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d02b      	beq.n	80088da <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008886:	781a      	ldrb	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800889c:	b29b      	uxth	r3, r3
 800889e:	3b01      	subs	r3, #1
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d114      	bne.n	80088da <I2C_SlaveTransmit_TXE+0x72>
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	2b29      	cmp	r3, #41	; 0x29
 80088b4:	d111      	bne.n	80088da <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2221      	movs	r2, #33	; 0x21
 80088ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2228      	movs	r2, #40	; 0x28
 80088d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff f9f1 	bl	8007cbc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b083      	sub	sp, #12
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d011      	beq.n	8008918 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f8:	781a      	ldrb	r2, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	1c5a      	adds	r2, r3, #1
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890e:	b29b      	uxth	r3, r3
 8008910:	3b01      	subs	r3, #1
 8008912:	b29a      	uxth	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008932:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d02c      	beq.n	8008998 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	691a      	ldr	r2, [r3, #16]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	b2d2      	uxtb	r2, r2
 800894a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	1c5a      	adds	r2, r3, #1
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800895a:	b29b      	uxth	r3, r3
 800895c:	3b01      	subs	r3, #1
 800895e:	b29a      	uxth	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008968:	b29b      	uxth	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d114      	bne.n	8008998 <I2C_SlaveReceive_RXNE+0x74>
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	2b2a      	cmp	r3, #42	; 0x2a
 8008972:	d111      	bne.n	8008998 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685a      	ldr	r2, [r3, #4]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008982:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2222      	movs	r2, #34	; 0x22
 8008988:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2228      	movs	r2, #40	; 0x28
 800898e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7ff f99c 	bl	8007cd0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008998:	bf00      	nop
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d012      	beq.n	80089d8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	691a      	ldr	r2, [r3, #16]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	b2d2      	uxtb	r2, r2
 80089be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c4:	1c5a      	adds	r2, r3, #1
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	3b01      	subs	r3, #1
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80089fe:	2b28      	cmp	r3, #40	; 0x28
 8008a00:	d127      	bne.n	8008a52 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a10:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	089b      	lsrs	r3, r3, #2
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	09db      	lsrs	r3, r3, #7
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d103      	bne.n	8008a36 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	81bb      	strh	r3, [r7, #12]
 8008a34:	e002      	b.n	8008a3c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008a44:	89ba      	ldrh	r2, [r7, #12]
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff f94a 	bl	8007ce4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008a50:	e00e      	b.n	8008a70 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a52:	2300      	movs	r3, #0
 8008a54:	60bb      	str	r3, [r7, #8]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	60bb      	str	r3, [r7, #8]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	60bb      	str	r3, [r7, #8]
 8008a66:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008a70:	bf00      	nop
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a86:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a96:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008a98:	2300      	movs	r3, #0
 8008a9a:	60bb      	str	r3, [r7, #8]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	60bb      	str	r3, [r7, #8]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f042 0201 	orr.w	r2, r2, #1
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ac4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ad4:	d172      	bne.n	8008bbc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	2b22      	cmp	r3, #34	; 0x22
 8008ada:	d002      	beq.n	8008ae2 <I2C_Slave_STOPF+0x6a>
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	2b2a      	cmp	r3, #42	; 0x2a
 8008ae0:	d135      	bne.n	8008b4e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d005      	beq.n	8008b06 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afe:	f043 0204 	orr.w	r2, r3, #4
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fd ff64 	bl	80069e8 <HAL_DMA_GetState>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d049      	beq.n	8008bba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2a:	4a69      	ldr	r2, [pc, #420]	; (8008cd0 <I2C_Slave_STOPF+0x258>)
 8008b2c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fd fdac 	bl	8006690 <HAL_DMA_Abort_IT>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d03d      	beq.n	8008bba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b48:	4610      	mov	r0, r2
 8008b4a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b4c:	e035      	b.n	8008bba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d005      	beq.n	8008b72 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6a:	f043 0204 	orr.w	r2, r3, #4
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fd ff2e 	bl	80069e8 <HAL_DMA_GetState>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d014      	beq.n	8008bbc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b96:	4a4e      	ldr	r2, [pc, #312]	; (8008cd0 <I2C_Slave_STOPF+0x258>)
 8008b98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fd fd76 	bl	8006690 <HAL_DMA_Abort_IT>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d008      	beq.n	8008bbc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4798      	blx	r3
 8008bb8:	e000      	b.n	8008bbc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008bba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d03e      	beq.n	8008c44 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	d112      	bne.n	8008bfa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	691a      	ldr	r2, [r3, #16]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	b2d2      	uxtb	r2, r2
 8008be0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	695b      	ldr	r3, [r3, #20]
 8008c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c04:	2b40      	cmp	r3, #64	; 0x40
 8008c06:	d112      	bne.n	8008c2e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	691a      	ldr	r2, [r3, #16]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c12:	b2d2      	uxtb	r2, r2
 8008c14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	3b01      	subs	r3, #1
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d005      	beq.n	8008c44 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3c:	f043 0204 	orr.w	r2, r3, #4
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d003      	beq.n	8008c54 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f8b3 	bl	8008db8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008c52:	e039      	b.n	8008cc8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	2b2a      	cmp	r3, #42	; 0x2a
 8008c58:	d109      	bne.n	8008c6e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2228      	movs	r2, #40	; 0x28
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff f831 	bl	8007cd0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b28      	cmp	r3, #40	; 0x28
 8008c78:	d111      	bne.n	8008c9e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a15      	ldr	r2, [pc, #84]	; (8008cd4 <I2C_Slave_STOPF+0x25c>)
 8008c7e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7ff f832 	bl	8007d00 <HAL_I2C_ListenCpltCallback>
}
 8008c9c:	e014      	b.n	8008cc8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca2:	2b22      	cmp	r3, #34	; 0x22
 8008ca4:	d002      	beq.n	8008cac <I2C_Slave_STOPF+0x234>
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	2b22      	cmp	r3, #34	; 0x22
 8008caa:	d10d      	bne.n	8008cc8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff f804 	bl	8007cd0 <HAL_I2C_SlaveRxCpltCallback>
}
 8008cc8:	bf00      	nop
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	080092bd 	.word	0x080092bd
 8008cd4:	ffff0000 	.word	0xffff0000

08008cd8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	d002      	beq.n	8008cfa <I2C_Slave_AF+0x22>
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2b20      	cmp	r3, #32
 8008cf8:	d129      	bne.n	8008d4e <I2C_Slave_AF+0x76>
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	2b28      	cmp	r3, #40	; 0x28
 8008cfe:	d126      	bne.n	8008d4e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a2c      	ldr	r2, [pc, #176]	; (8008db4 <I2C_Slave_AF+0xdc>)
 8008d04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008d14:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d1e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d2e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7fe ffda 	bl	8007d00 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008d4c:	e02e      	b.n	8008dac <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
 8008d50:	2b21      	cmp	r3, #33	; 0x21
 8008d52:	d126      	bne.n	8008da2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a17      	ldr	r2, [pc, #92]	; (8008db4 <I2C_Slave_AF+0xdc>)
 8008d58:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2221      	movs	r2, #33	; 0x21
 8008d5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685a      	ldr	r2, [r3, #4]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008d7e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d88:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d98:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7fe ff8e 	bl	8007cbc <HAL_I2C_SlaveTxCpltCallback>
}
 8008da0:	e004      	b.n	8008dac <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008daa:	615a      	str	r2, [r3, #20]
}
 8008dac:	bf00      	nop
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	ffff0000 	.word	0xffff0000

08008db8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dc6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	2b10      	cmp	r3, #16
 8008dd4:	d002      	beq.n	8008ddc <I2C_ITError+0x24>
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
 8008dd8:	2b40      	cmp	r3, #64	; 0x40
 8008dda:	d10a      	bne.n	8008df2 <I2C_ITError+0x3a>
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	2b22      	cmp	r3, #34	; 0x22
 8008de0:	d107      	bne.n	8008df2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008df0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008df8:	2b28      	cmp	r3, #40	; 0x28
 8008dfa:	d107      	bne.n	8008e0c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2228      	movs	r2, #40	; 0x28
 8008e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008e0a:	e015      	b.n	8008e38 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e1a:	d00a      	beq.n	8008e32 <I2C_ITError+0x7a>
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	2b60      	cmp	r3, #96	; 0x60
 8008e20:	d007      	beq.n	8008e32 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2220      	movs	r2, #32
 8008e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e46:	d162      	bne.n	8008f0e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e56:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d020      	beq.n	8008ea8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6a:	4a6a      	ldr	r2, [pc, #424]	; (8009014 <I2C_ITError+0x25c>)
 8008e6c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fd fc0c 	bl	8006690 <HAL_DMA_Abort_IT>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 8089 	beq.w	8008f92 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f022 0201 	bic.w	r2, r2, #1
 8008e8e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2220      	movs	r2, #32
 8008e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008ea2:	4610      	mov	r0, r2
 8008ea4:	4798      	blx	r3
 8008ea6:	e074      	b.n	8008f92 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	4a59      	ldr	r2, [pc, #356]	; (8009014 <I2C_ITError+0x25c>)
 8008eae:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fd fbeb 	bl	8006690 <HAL_DMA_Abort_IT>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d068      	beq.n	8008f92 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eca:	2b40      	cmp	r3, #64	; 0x40
 8008ecc:	d10b      	bne.n	8008ee6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	691a      	ldr	r2, [r3, #16]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	b2d2      	uxtb	r2, r2
 8008eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f022 0201 	bic.w	r2, r2, #1
 8008ef4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4798      	blx	r3
 8008f0c:	e041      	b.n	8008f92 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b60      	cmp	r3, #96	; 0x60
 8008f18:	d125      	bne.n	8008f66 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f32:	2b40      	cmp	r3, #64	; 0x40
 8008f34:	d10b      	bne.n	8008f4e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	691a      	ldr	r2, [r3, #16]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f40:	b2d2      	uxtb	r2, r2
 8008f42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 0201 	bic.w	r2, r2, #1
 8008f5c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7fe fef6 	bl	8007d50 <HAL_I2C_AbortCpltCallback>
 8008f64:	e015      	b.n	8008f92 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f70:	2b40      	cmp	r3, #64	; 0x40
 8008f72:	d10b      	bne.n	8008f8c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	691a      	ldr	r2, [r3, #16]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7fe fed5 	bl	8007d3c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f96:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10e      	bne.n	8008fc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d109      	bne.n	8008fc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d104      	bne.n	8008fc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d007      	beq.n	8008fd0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008fce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fdc:	f003 0304 	and.w	r3, r3, #4
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	d113      	bne.n	800900c <I2C_ITError+0x254>
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	2b28      	cmp	r3, #40	; 0x28
 8008fe8:	d110      	bne.n	800900c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a0a      	ldr	r2, [pc, #40]	; (8009018 <I2C_ITError+0x260>)
 8008fee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2220      	movs	r2, #32
 8008ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7fe fe7a 	bl	8007d00 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800900c:	bf00      	nop
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	080092bd 	.word	0x080092bd
 8009018:	ffff0000 	.word	0xffff0000

0800901c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b088      	sub	sp, #32
 8009020:	af02      	add	r7, sp, #8
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	607a      	str	r2, [r7, #4]
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	460b      	mov	r3, r1
 800902a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009030:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2b08      	cmp	r3, #8
 8009036:	d006      	beq.n	8009046 <I2C_MasterRequestWrite+0x2a>
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d003      	beq.n	8009046 <I2C_MasterRequestWrite+0x2a>
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009044:	d108      	bne.n	8009058 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	e00b      	b.n	8009070 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905c:	2b12      	cmp	r3, #18
 800905e:	d107      	bne.n	8009070 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800906e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f000 f9c5 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00d      	beq.n	80090a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009096:	d103      	bne.n	80090a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800909e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e035      	b.n	8009110 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090ac:	d108      	bne.n	80090c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80090ae:	897b      	ldrh	r3, [r7, #10]
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	461a      	mov	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80090bc:	611a      	str	r2, [r3, #16]
 80090be:	e01b      	b.n	80090f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80090c0:	897b      	ldrh	r3, [r7, #10]
 80090c2:	11db      	asrs	r3, r3, #7
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	f003 0306 	and.w	r3, r3, #6
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	f063 030f 	orn	r3, r3, #15
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	490e      	ldr	r1, [pc, #56]	; (8009118 <I2C_MasterRequestWrite+0xfc>)
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 f9eb 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e010      	b.n	8009110 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80090ee:	897b      	ldrh	r3, [r7, #10]
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	4907      	ldr	r1, [pc, #28]	; (800911c <I2C_MasterRequestWrite+0x100>)
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 f9db 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e000      	b.n	8009110 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	00010008 	.word	0x00010008
 800911c:	00010002 	.word	0x00010002

08009120 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b088      	sub	sp, #32
 8009124:	af02      	add	r7, sp, #8
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	607a      	str	r2, [r7, #4]
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	460b      	mov	r3, r1
 800912e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009144:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2b08      	cmp	r3, #8
 800914a:	d006      	beq.n	800915a <I2C_MasterRequestRead+0x3a>
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d003      	beq.n	800915a <I2C_MasterRequestRead+0x3a>
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009158:	d108      	bne.n	800916c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	e00b      	b.n	8009184 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009170:	2b11      	cmp	r3, #17
 8009172:	d107      	bne.n	8009184 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009182:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f000 f93b 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00d      	beq.n	80091b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091aa:	d103      	bne.n	80091b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e079      	b.n	80092ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091c0:	d108      	bne.n	80091d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80091c2:	897b      	ldrh	r3, [r7, #10]
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	f043 0301 	orr.w	r3, r3, #1
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	611a      	str	r2, [r3, #16]
 80091d2:	e05f      	b.n	8009294 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80091d4:	897b      	ldrh	r3, [r7, #10]
 80091d6:	11db      	asrs	r3, r3, #7
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	f003 0306 	and.w	r3, r3, #6
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	f063 030f 	orn	r3, r3, #15
 80091e4:	b2da      	uxtb	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	4930      	ldr	r1, [pc, #192]	; (80092b4 <I2C_MasterRequestRead+0x194>)
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f000 f961 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e054      	b.n	80092ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009202:	897b      	ldrh	r3, [r7, #10]
 8009204:	b2da      	uxtb	r2, r3
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	4929      	ldr	r1, [pc, #164]	; (80092b8 <I2C_MasterRequestRead+0x198>)
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 f951 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e044      	b.n	80092ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009222:	2300      	movs	r3, #0
 8009224:	613b      	str	r3, [r7, #16]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	613b      	str	r3, [r7, #16]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	613b      	str	r3, [r7, #16]
 8009236:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009246:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f000 f8d9 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00d      	beq.n	800927c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800926e:	d103      	bne.n	8009278 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009276:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	e017      	b.n	80092ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800927c:	897b      	ldrh	r3, [r7, #10]
 800927e:	11db      	asrs	r3, r3, #7
 8009280:	b2db      	uxtb	r3, r3
 8009282:	f003 0306 	and.w	r3, r3, #6
 8009286:	b2db      	uxtb	r3, r3
 8009288:	f063 030e 	orn	r3, r3, #14
 800928c:	b2da      	uxtb	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	4907      	ldr	r1, [pc, #28]	; (80092b8 <I2C_MasterRequestRead+0x198>)
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f000 f90d 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e000      	b.n	80092ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	00010008 	.word	0x00010008
 80092b8:	00010002 	.word	0x00010002

080092bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80092d6:	4b4b      	ldr	r3, [pc, #300]	; (8009404 <I2C_DMAAbort+0x148>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	08db      	lsrs	r3, r3, #3
 80092dc:	4a4a      	ldr	r2, [pc, #296]	; (8009408 <I2C_DMAAbort+0x14c>)
 80092de:	fba2 2303 	umull	r2, r3, r2, r3
 80092e2:	0a1a      	lsrs	r2, r3, #8
 80092e4:	4613      	mov	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	00da      	lsls	r2, r3, #3
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d106      	bne.n	8009304 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fa:	f043 0220 	orr.w	r2, r3, #32
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009302:	e00a      	b.n	800931a <I2C_DMAAbort+0x5e>
    }
    count--;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3b01      	subs	r3, #1
 8009308:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009318:	d0ea      	beq.n	80092f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009326:	2200      	movs	r2, #0
 8009328:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009336:	2200      	movs	r2, #0
 8009338:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009348:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2200      	movs	r2, #0
 800934e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009354:	2b00      	cmp	r3, #0
 8009356:	d003      	beq.n	8009360 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935c:	2200      	movs	r2, #0
 800935e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009364:	2b00      	cmp	r3, #0
 8009366:	d003      	beq.n	8009370 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936c:	2200      	movs	r2, #0
 800936e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 0201 	bic.w	r2, r2, #1
 800937e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b60      	cmp	r3, #96	; 0x60
 800938a:	d10e      	bne.n	80093aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2220      	movs	r2, #32
 8009390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2200      	movs	r2, #0
 80093a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80093a2:	6978      	ldr	r0, [r7, #20]
 80093a4:	f7fe fcd4 	bl	8007d50 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80093a8:	e027      	b.n	80093fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80093aa:	7cfb      	ldrb	r3, [r7, #19]
 80093ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80093b0:	2b28      	cmp	r3, #40	; 0x28
 80093b2:	d117      	bne.n	80093e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0201 	orr.w	r2, r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	2200      	movs	r2, #0
 80093d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2228      	movs	r2, #40	; 0x28
 80093de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80093e2:	e007      	b.n	80093f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	2220      	movs	r2, #32
 80093e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80093f4:	6978      	ldr	r0, [r7, #20]
 80093f6:	f7fe fca1 	bl	8007d3c <HAL_I2C_ErrorCallback>
}
 80093fa:	bf00      	nop
 80093fc:	3718      	adds	r7, #24
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20000034 	.word	0x20000034
 8009408:	14f8b589 	.word	0x14f8b589

0800940c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	603b      	str	r3, [r7, #0]
 8009418:	4613      	mov	r3, r2
 800941a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800941c:	e025      	b.n	800946a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009424:	d021      	beq.n	800946a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009426:	f7fc fded 	bl	8006004 <HAL_GetTick>
 800942a:	4602      	mov	r2, r0
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	429a      	cmp	r2, r3
 8009434:	d302      	bcc.n	800943c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d116      	bne.n	800946a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2220      	movs	r2, #32
 8009446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	f043 0220 	orr.w	r2, r3, #32
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e023      	b.n	80094b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	0c1b      	lsrs	r3, r3, #16
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b01      	cmp	r3, #1
 8009472:	d10d      	bne.n	8009490 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	43da      	mvns	r2, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4013      	ands	r3, r2
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	bf0c      	ite	eq
 8009486:	2301      	moveq	r3, #1
 8009488:	2300      	movne	r3, #0
 800948a:	b2db      	uxtb	r3, r3
 800948c:	461a      	mov	r2, r3
 800948e:	e00c      	b.n	80094aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	43da      	mvns	r2, r3
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	4013      	ands	r3, r2
 800949c:	b29b      	uxth	r3, r3
 800949e:	2b00      	cmp	r3, #0
 80094a0:	bf0c      	ite	eq
 80094a2:	2301      	moveq	r3, #1
 80094a4:	2300      	movne	r3, #0
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	461a      	mov	r2, r3
 80094aa:	79fb      	ldrb	r3, [r7, #7]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d0b6      	beq.n	800941e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
 80094c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094c8:	e051      	b.n	800956e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094d8:	d123      	bne.n	8009522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80094f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950e:	f043 0204 	orr.w	r2, r3, #4
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e046      	b.n	80095b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009528:	d021      	beq.n	800956e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800952a:	f7fc fd6b 	bl	8006004 <HAL_GetTick>
 800952e:	4602      	mov	r2, r0
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	429a      	cmp	r2, r3
 8009538:	d302      	bcc.n	8009540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d116      	bne.n	800956e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2220      	movs	r2, #32
 800954a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955a:	f043 0220 	orr.w	r2, r3, #32
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e020      	b.n	80095b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	0c1b      	lsrs	r3, r3, #16
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b01      	cmp	r3, #1
 8009576:	d10c      	bne.n	8009592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	43da      	mvns	r2, r3
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	4013      	ands	r3, r2
 8009584:	b29b      	uxth	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	bf14      	ite	ne
 800958a:	2301      	movne	r3, #1
 800958c:	2300      	moveq	r3, #0
 800958e:	b2db      	uxtb	r3, r3
 8009590:	e00b      	b.n	80095aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	43da      	mvns	r2, r3
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	4013      	ands	r3, r2
 800959e:	b29b      	uxth	r3, r3
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	bf14      	ite	ne
 80095a4:	2301      	movne	r3, #1
 80095a6:	2300      	moveq	r3, #0
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d18d      	bne.n	80094ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80095c4:	e02d      	b.n	8009622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f000 f900 	bl	80097cc <I2C_IsAcknowledgeFailed>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e02d      	b.n	8009632 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095dc:	d021      	beq.n	8009622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095de:	f7fc fd11 	bl	8006004 <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d302      	bcc.n	80095f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d116      	bne.n	8009622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2220      	movs	r2, #32
 80095fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960e:	f043 0220 	orr.w	r2, r3, #32
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e007      	b.n	8009632 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800962c:	2b80      	cmp	r3, #128	; 0x80
 800962e:	d1ca      	bne.n	80095c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	60f8      	str	r0, [r7, #12]
 8009642:	60b9      	str	r1, [r7, #8]
 8009644:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009646:	e02d      	b.n	80096a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 f8bf 	bl	80097cc <I2C_IsAcknowledgeFailed>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e02d      	b.n	80096b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965e:	d021      	beq.n	80096a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009660:	f7fc fcd0 	bl	8006004 <HAL_GetTick>
 8009664:	4602      	mov	r2, r0
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	429a      	cmp	r2, r3
 800966e:	d302      	bcc.n	8009676 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d116      	bne.n	80096a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2220      	movs	r2, #32
 8009680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009690:	f043 0220 	orr.w	r2, r3, #32
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e007      	b.n	80096b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	f003 0304 	and.w	r3, r3, #4
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d1ca      	bne.n	8009648 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096c4:	2300      	movs	r3, #0
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80096c8:	4b13      	ldr	r3, [pc, #76]	; (8009718 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	08db      	lsrs	r3, r3, #3
 80096ce:	4a13      	ldr	r2, [pc, #76]	; (800971c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80096d0:	fba2 2303 	umull	r2, r3, r2, r3
 80096d4:	0a1a      	lsrs	r2, r3, #8
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d107      	bne.n	80096fa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ee:	f043 0220 	orr.w	r2, r3, #32
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e008      	b.n	800970c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009708:	d0e9      	beq.n	80096de <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	20000034 	.word	0x20000034
 800971c:	14f8b589 	.word	0x14f8b589

08009720 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800972c:	e042      	b.n	80097b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	695b      	ldr	r3, [r3, #20]
 8009734:	f003 0310 	and.w	r3, r3, #16
 8009738:	2b10      	cmp	r3, #16
 800973a:	d119      	bne.n	8009770 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f06f 0210 	mvn.w	r2, #16
 8009744:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2220      	movs	r2, #32
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e029      	b.n	80097c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009770:	f7fc fc48 	bl	8006004 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	429a      	cmp	r2, r3
 800977e:	d302      	bcc.n	8009786 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d116      	bne.n	80097b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2220      	movs	r2, #32
 8009790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a0:	f043 0220 	orr.w	r2, r3, #32
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e007      	b.n	80097c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097be:	2b40      	cmp	r3, #64	; 0x40
 80097c0:	d1b5      	bne.n	800972e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e2:	d11b      	bne.n	800981c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80097ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2220      	movs	r2, #32
 80097f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009808:	f043 0204 	orr.w	r2, r3, #4
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e000      	b.n	800981e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800982a:	b480      	push	{r7}
 800982c:	b083      	sub	sp, #12
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009836:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800983a:	d103      	bne.n	8009844 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009842:	e007      	b.n	8009854 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009848:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800984c:	d102      	bne.n	8009854 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2208      	movs	r2, #8
 8009852:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e264      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	2b00      	cmp	r3, #0
 800987c:	d075      	beq.n	800996a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800987e:	4ba3      	ldr	r3, [pc, #652]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f003 030c 	and.w	r3, r3, #12
 8009886:	2b04      	cmp	r3, #4
 8009888:	d00c      	beq.n	80098a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800988a:	4ba0      	ldr	r3, [pc, #640]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009892:	2b08      	cmp	r3, #8
 8009894:	d112      	bne.n	80098bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009896:	4b9d      	ldr	r3, [pc, #628]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800989e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098a2:	d10b      	bne.n	80098bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098a4:	4b99      	ldr	r3, [pc, #612]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d05b      	beq.n	8009968 <HAL_RCC_OscConfig+0x108>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d157      	bne.n	8009968 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e23f      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098c4:	d106      	bne.n	80098d4 <HAL_RCC_OscConfig+0x74>
 80098c6:	4b91      	ldr	r3, [pc, #580]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a90      	ldr	r2, [pc, #576]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 80098cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098d0:	6013      	str	r3, [r2, #0]
 80098d2:	e01d      	b.n	8009910 <HAL_RCC_OscConfig+0xb0>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098dc:	d10c      	bne.n	80098f8 <HAL_RCC_OscConfig+0x98>
 80098de:	4b8b      	ldr	r3, [pc, #556]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a8a      	ldr	r2, [pc, #552]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 80098e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	4b88      	ldr	r3, [pc, #544]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a87      	ldr	r2, [pc, #540]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 80098f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098f4:	6013      	str	r3, [r2, #0]
 80098f6:	e00b      	b.n	8009910 <HAL_RCC_OscConfig+0xb0>
 80098f8:	4b84      	ldr	r3, [pc, #528]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a83      	ldr	r2, [pc, #524]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 80098fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009902:	6013      	str	r3, [r2, #0]
 8009904:	4b81      	ldr	r3, [pc, #516]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a80      	ldr	r2, [pc, #512]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 800990a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800990e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d013      	beq.n	8009940 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009918:	f7fc fb74 	bl	8006004 <HAL_GetTick>
 800991c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800991e:	e008      	b.n	8009932 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009920:	f7fc fb70 	bl	8006004 <HAL_GetTick>
 8009924:	4602      	mov	r2, r0
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	2b64      	cmp	r3, #100	; 0x64
 800992c:	d901      	bls.n	8009932 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	e204      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009932:	4b76      	ldr	r3, [pc, #472]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0f0      	beq.n	8009920 <HAL_RCC_OscConfig+0xc0>
 800993e:	e014      	b.n	800996a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009940:	f7fc fb60 	bl	8006004 <HAL_GetTick>
 8009944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009946:	e008      	b.n	800995a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009948:	f7fc fb5c 	bl	8006004 <HAL_GetTick>
 800994c:	4602      	mov	r2, r0
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	2b64      	cmp	r3, #100	; 0x64
 8009954:	d901      	bls.n	800995a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009956:	2303      	movs	r3, #3
 8009958:	e1f0      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800995a:	4b6c      	ldr	r3, [pc, #432]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1f0      	bne.n	8009948 <HAL_RCC_OscConfig+0xe8>
 8009966:	e000      	b.n	800996a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0302 	and.w	r3, r3, #2
 8009972:	2b00      	cmp	r3, #0
 8009974:	d063      	beq.n	8009a3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009976:	4b65      	ldr	r3, [pc, #404]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f003 030c 	and.w	r3, r3, #12
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00b      	beq.n	800999a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009982:	4b62      	ldr	r3, [pc, #392]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800998a:	2b08      	cmp	r3, #8
 800998c:	d11c      	bne.n	80099c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800998e:	4b5f      	ldr	r3, [pc, #380]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d116      	bne.n	80099c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800999a:	4b5c      	ldr	r3, [pc, #368]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 0302 	and.w	r3, r3, #2
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d005      	beq.n	80099b2 <HAL_RCC_OscConfig+0x152>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d001      	beq.n	80099b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e1c4      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099b2:	4b56      	ldr	r3, [pc, #344]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	4952      	ldr	r1, [pc, #328]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099c6:	e03a      	b.n	8009a3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d020      	beq.n	8009a12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099d0:	4b4f      	ldr	r3, [pc, #316]	; (8009b10 <HAL_RCC_OscConfig+0x2b0>)
 80099d2:	2201      	movs	r2, #1
 80099d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099d6:	f7fc fb15 	bl	8006004 <HAL_GetTick>
 80099da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099dc:	e008      	b.n	80099f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099de:	f7fc fb11 	bl	8006004 <HAL_GetTick>
 80099e2:	4602      	mov	r2, r0
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	1ad3      	subs	r3, r2, r3
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d901      	bls.n	80099f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80099ec:	2303      	movs	r3, #3
 80099ee:	e1a5      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099f0:	4b46      	ldr	r3, [pc, #280]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0302 	and.w	r3, r3, #2
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d0f0      	beq.n	80099de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099fc:	4b43      	ldr	r3, [pc, #268]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	00db      	lsls	r3, r3, #3
 8009a0a:	4940      	ldr	r1, [pc, #256]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	600b      	str	r3, [r1, #0]
 8009a10:	e015      	b.n	8009a3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a12:	4b3f      	ldr	r3, [pc, #252]	; (8009b10 <HAL_RCC_OscConfig+0x2b0>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a18:	f7fc faf4 	bl	8006004 <HAL_GetTick>
 8009a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a1e:	e008      	b.n	8009a32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a20:	f7fc faf0 	bl	8006004 <HAL_GetTick>
 8009a24:	4602      	mov	r2, r0
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d901      	bls.n	8009a32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e184      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a32:	4b36      	ldr	r3, [pc, #216]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 0302 	and.w	r3, r3, #2
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1f0      	bne.n	8009a20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 0308 	and.w	r3, r3, #8
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d030      	beq.n	8009aac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d016      	beq.n	8009a80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a52:	4b30      	ldr	r3, [pc, #192]	; (8009b14 <HAL_RCC_OscConfig+0x2b4>)
 8009a54:	2201      	movs	r2, #1
 8009a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a58:	f7fc fad4 	bl	8006004 <HAL_GetTick>
 8009a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a5e:	e008      	b.n	8009a72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a60:	f7fc fad0 	bl	8006004 <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d901      	bls.n	8009a72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e164      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a72:	4b26      	ldr	r3, [pc, #152]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a76:	f003 0302 	and.w	r3, r3, #2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0f0      	beq.n	8009a60 <HAL_RCC_OscConfig+0x200>
 8009a7e:	e015      	b.n	8009aac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a80:	4b24      	ldr	r3, [pc, #144]	; (8009b14 <HAL_RCC_OscConfig+0x2b4>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a86:	f7fc fabd 	bl	8006004 <HAL_GetTick>
 8009a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a8c:	e008      	b.n	8009aa0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a8e:	f7fc fab9 	bl	8006004 <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d901      	bls.n	8009aa0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e14d      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009aa0:	4b1a      	ldr	r3, [pc, #104]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aa4:	f003 0302 	and.w	r3, r3, #2
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1f0      	bne.n	8009a8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0304 	and.w	r3, r3, #4
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f000 80a0 	beq.w	8009bfa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009aba:	2300      	movs	r3, #0
 8009abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009abe:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10f      	bne.n	8009aea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009aca:	2300      	movs	r3, #0
 8009acc:	60bb      	str	r3, [r7, #8]
 8009ace:	4b0f      	ldr	r3, [pc, #60]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad2:	4a0e      	ldr	r2, [pc, #56]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8009ada:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <HAL_RCC_OscConfig+0x2ac>)
 8009adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ae2:	60bb      	str	r3, [r7, #8]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009aea:	4b0b      	ldr	r3, [pc, #44]	; (8009b18 <HAL_RCC_OscConfig+0x2b8>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d121      	bne.n	8009b3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009af6:	4b08      	ldr	r3, [pc, #32]	; (8009b18 <HAL_RCC_OscConfig+0x2b8>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a07      	ldr	r2, [pc, #28]	; (8009b18 <HAL_RCC_OscConfig+0x2b8>)
 8009afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b02:	f7fc fa7f 	bl	8006004 <HAL_GetTick>
 8009b06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b08:	e011      	b.n	8009b2e <HAL_RCC_OscConfig+0x2ce>
 8009b0a:	bf00      	nop
 8009b0c:	40023800 	.word	0x40023800
 8009b10:	42470000 	.word	0x42470000
 8009b14:	42470e80 	.word	0x42470e80
 8009b18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b1c:	f7fc fa72 	bl	8006004 <HAL_GetTick>
 8009b20:	4602      	mov	r2, r0
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d901      	bls.n	8009b2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e106      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b2e:	4b85      	ldr	r3, [pc, #532]	; (8009d44 <HAL_RCC_OscConfig+0x4e4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0f0      	beq.n	8009b1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d106      	bne.n	8009b50 <HAL_RCC_OscConfig+0x2f0>
 8009b42:	4b81      	ldr	r3, [pc, #516]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b46:	4a80      	ldr	r2, [pc, #512]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009b48:	f043 0301 	orr.w	r3, r3, #1
 8009b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8009b4e:	e01c      	b.n	8009b8a <HAL_RCC_OscConfig+0x32a>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	2b05      	cmp	r3, #5
 8009b56:	d10c      	bne.n	8009b72 <HAL_RCC_OscConfig+0x312>
 8009b58:	4b7b      	ldr	r3, [pc, #492]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b5c:	4a7a      	ldr	r2, [pc, #488]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009b5e:	f043 0304 	orr.w	r3, r3, #4
 8009b62:	6713      	str	r3, [r2, #112]	; 0x70
 8009b64:	4b78      	ldr	r3, [pc, #480]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b68:	4a77      	ldr	r2, [pc, #476]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009b6a:	f043 0301 	orr.w	r3, r3, #1
 8009b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b70:	e00b      	b.n	8009b8a <HAL_RCC_OscConfig+0x32a>
 8009b72:	4b75      	ldr	r3, [pc, #468]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b76:	4a74      	ldr	r2, [pc, #464]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009b78:	f023 0301 	bic.w	r3, r3, #1
 8009b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8009b7e:	4b72      	ldr	r3, [pc, #456]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b82:	4a71      	ldr	r2, [pc, #452]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009b84:	f023 0304 	bic.w	r3, r3, #4
 8009b88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d015      	beq.n	8009bbe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b92:	f7fc fa37 	bl	8006004 <HAL_GetTick>
 8009b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b98:	e00a      	b.n	8009bb0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b9a:	f7fc fa33 	bl	8006004 <HAL_GetTick>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d901      	bls.n	8009bb0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009bac:	2303      	movs	r3, #3
 8009bae:	e0c5      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bb0:	4b65      	ldr	r3, [pc, #404]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb4:	f003 0302 	and.w	r3, r3, #2
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d0ee      	beq.n	8009b9a <HAL_RCC_OscConfig+0x33a>
 8009bbc:	e014      	b.n	8009be8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009bbe:	f7fc fa21 	bl	8006004 <HAL_GetTick>
 8009bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bc4:	e00a      	b.n	8009bdc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bc6:	f7fc fa1d 	bl	8006004 <HAL_GetTick>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d901      	bls.n	8009bdc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e0af      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bdc:	4b5a      	ldr	r3, [pc, #360]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be0:	f003 0302 	and.w	r3, r3, #2
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1ee      	bne.n	8009bc6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009be8:	7dfb      	ldrb	r3, [r7, #23]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d105      	bne.n	8009bfa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bee:	4b56      	ldr	r3, [pc, #344]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf2:	4a55      	ldr	r2, [pc, #340]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bf8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 809b 	beq.w	8009d3a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009c04:	4b50      	ldr	r3, [pc, #320]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	f003 030c 	and.w	r3, r3, #12
 8009c0c:	2b08      	cmp	r3, #8
 8009c0e:	d05c      	beq.n	8009cca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d141      	bne.n	8009c9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c18:	4b4c      	ldr	r3, [pc, #304]	; (8009d4c <HAL_RCC_OscConfig+0x4ec>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c1e:	f7fc f9f1 	bl	8006004 <HAL_GetTick>
 8009c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c24:	e008      	b.n	8009c38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c26:	f7fc f9ed 	bl	8006004 <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d901      	bls.n	8009c38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e081      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c38:	4b43      	ldr	r3, [pc, #268]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1f0      	bne.n	8009c26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	69da      	ldr	r2, [r3, #28]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a1b      	ldr	r3, [r3, #32]
 8009c4c:	431a      	orrs	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c52:	019b      	lsls	r3, r3, #6
 8009c54:	431a      	orrs	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c5a:	085b      	lsrs	r3, r3, #1
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	041b      	lsls	r3, r3, #16
 8009c60:	431a      	orrs	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c66:	061b      	lsls	r3, r3, #24
 8009c68:	4937      	ldr	r1, [pc, #220]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c6e:	4b37      	ldr	r3, [pc, #220]	; (8009d4c <HAL_RCC_OscConfig+0x4ec>)
 8009c70:	2201      	movs	r2, #1
 8009c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c74:	f7fc f9c6 	bl	8006004 <HAL_GetTick>
 8009c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c7a:	e008      	b.n	8009c8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c7c:	f7fc f9c2 	bl	8006004 <HAL_GetTick>
 8009c80:	4602      	mov	r2, r0
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	d901      	bls.n	8009c8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e056      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c8e:	4b2e      	ldr	r3, [pc, #184]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d0f0      	beq.n	8009c7c <HAL_RCC_OscConfig+0x41c>
 8009c9a:	e04e      	b.n	8009d3a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c9c:	4b2b      	ldr	r3, [pc, #172]	; (8009d4c <HAL_RCC_OscConfig+0x4ec>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ca2:	f7fc f9af 	bl	8006004 <HAL_GetTick>
 8009ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ca8:	e008      	b.n	8009cbc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009caa:	f7fc f9ab 	bl	8006004 <HAL_GetTick>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d901      	bls.n	8009cbc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e03f      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cbc:	4b22      	ldr	r3, [pc, #136]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1f0      	bne.n	8009caa <HAL_RCC_OscConfig+0x44a>
 8009cc8:	e037      	b.n	8009d3a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d101      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e032      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009cd6:	4b1c      	ldr	r3, [pc, #112]	; (8009d48 <HAL_RCC_OscConfig+0x4e8>)
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d028      	beq.n	8009d36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d121      	bne.n	8009d36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d11a      	bne.n	8009d36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009d06:	4013      	ands	r3, r2
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d0c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d111      	bne.n	8009d36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1c:	085b      	lsrs	r3, r3, #1
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d107      	bne.n	8009d36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d30:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d001      	beq.n	8009d3a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e000      	b.n	8009d3c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	40007000 	.word	0x40007000
 8009d48:	40023800 	.word	0x40023800
 8009d4c:	42470060 	.word	0x42470060

08009d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d101      	bne.n	8009d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e0cc      	b.n	8009efe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d64:	4b68      	ldr	r3, [pc, #416]	; (8009f08 <HAL_RCC_ClockConfig+0x1b8>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 0307 	and.w	r3, r3, #7
 8009d6c:	683a      	ldr	r2, [r7, #0]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d90c      	bls.n	8009d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d72:	4b65      	ldr	r3, [pc, #404]	; (8009f08 <HAL_RCC_ClockConfig+0x1b8>)
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	b2d2      	uxtb	r2, r2
 8009d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d7a:	4b63      	ldr	r3, [pc, #396]	; (8009f08 <HAL_RCC_ClockConfig+0x1b8>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0307 	and.w	r3, r3, #7
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d001      	beq.n	8009d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e0b8      	b.n	8009efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0302 	and.w	r3, r3, #2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d020      	beq.n	8009dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 0304 	and.w	r3, r3, #4
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d005      	beq.n	8009db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009da4:	4b59      	ldr	r3, [pc, #356]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	4a58      	ldr	r2, [pc, #352]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009dae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 0308 	and.w	r3, r3, #8
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d005      	beq.n	8009dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009dbc:	4b53      	ldr	r3, [pc, #332]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	4a52      	ldr	r2, [pc, #328]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009dc8:	4b50      	ldr	r3, [pc, #320]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	494d      	ldr	r1, [pc, #308]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0301 	and.w	r3, r3, #1
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d044      	beq.n	8009e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d107      	bne.n	8009dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dee:	4b47      	ldr	r3, [pc, #284]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d119      	bne.n	8009e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e07f      	b.n	8009efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d003      	beq.n	8009e0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d107      	bne.n	8009e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e0e:	4b3f      	ldr	r3, [pc, #252]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d109      	bne.n	8009e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e06f      	b.n	8009efe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e1e:	4b3b      	ldr	r3, [pc, #236]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0302 	and.w	r3, r3, #2
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e067      	b.n	8009efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e2e:	4b37      	ldr	r3, [pc, #220]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	f023 0203 	bic.w	r2, r3, #3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	4934      	ldr	r1, [pc, #208]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009e40:	f7fc f8e0 	bl	8006004 <HAL_GetTick>
 8009e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e46:	e00a      	b.n	8009e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e48:	f7fc f8dc 	bl	8006004 <HAL_GetTick>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d901      	bls.n	8009e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e04f      	b.n	8009efe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e5e:	4b2b      	ldr	r3, [pc, #172]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f003 020c 	and.w	r2, r3, #12
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d1eb      	bne.n	8009e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e70:	4b25      	ldr	r3, [pc, #148]	; (8009f08 <HAL_RCC_ClockConfig+0x1b8>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 0307 	and.w	r3, r3, #7
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d20c      	bcs.n	8009e98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e7e:	4b22      	ldr	r3, [pc, #136]	; (8009f08 <HAL_RCC_ClockConfig+0x1b8>)
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	b2d2      	uxtb	r2, r2
 8009e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e86:	4b20      	ldr	r3, [pc, #128]	; (8009f08 <HAL_RCC_ClockConfig+0x1b8>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 0307 	and.w	r3, r3, #7
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d001      	beq.n	8009e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e032      	b.n	8009efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 0304 	and.w	r3, r3, #4
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d008      	beq.n	8009eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ea4:	4b19      	ldr	r3, [pc, #100]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	4916      	ldr	r1, [pc, #88]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 0308 	and.w	r3, r3, #8
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d009      	beq.n	8009ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009ec2:	4b12      	ldr	r3, [pc, #72]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	490e      	ldr	r1, [pc, #56]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009ed6:	f000 f821 	bl	8009f1c <HAL_RCC_GetSysClockFreq>
 8009eda:	4602      	mov	r2, r0
 8009edc:	4b0b      	ldr	r3, [pc, #44]	; (8009f0c <HAL_RCC_ClockConfig+0x1bc>)
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	091b      	lsrs	r3, r3, #4
 8009ee2:	f003 030f 	and.w	r3, r3, #15
 8009ee6:	490a      	ldr	r1, [pc, #40]	; (8009f10 <HAL_RCC_ClockConfig+0x1c0>)
 8009ee8:	5ccb      	ldrb	r3, [r1, r3]
 8009eea:	fa22 f303 	lsr.w	r3, r2, r3
 8009eee:	4a09      	ldr	r2, [pc, #36]	; (8009f14 <HAL_RCC_ClockConfig+0x1c4>)
 8009ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009ef2:	4b09      	ldr	r3, [pc, #36]	; (8009f18 <HAL_RCC_ClockConfig+0x1c8>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fc f840 	bl	8005f7c <HAL_InitTick>

  return HAL_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	40023c00 	.word	0x40023c00
 8009f0c:	40023800 	.word	0x40023800
 8009f10:	080240ec 	.word	0x080240ec
 8009f14:	20000034 	.word	0x20000034
 8009f18:	20000038 	.word	0x20000038

08009f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f1c:	b5b0      	push	{r4, r5, r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009f22:	2100      	movs	r1, #0
 8009f24:	6079      	str	r1, [r7, #4]
 8009f26:	2100      	movs	r1, #0
 8009f28:	60f9      	str	r1, [r7, #12]
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009f2e:	2100      	movs	r1, #0
 8009f30:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f32:	4952      	ldr	r1, [pc, #328]	; (800a07c <HAL_RCC_GetSysClockFreq+0x160>)
 8009f34:	6889      	ldr	r1, [r1, #8]
 8009f36:	f001 010c 	and.w	r1, r1, #12
 8009f3a:	2908      	cmp	r1, #8
 8009f3c:	d00d      	beq.n	8009f5a <HAL_RCC_GetSysClockFreq+0x3e>
 8009f3e:	2908      	cmp	r1, #8
 8009f40:	f200 8094 	bhi.w	800a06c <HAL_RCC_GetSysClockFreq+0x150>
 8009f44:	2900      	cmp	r1, #0
 8009f46:	d002      	beq.n	8009f4e <HAL_RCC_GetSysClockFreq+0x32>
 8009f48:	2904      	cmp	r1, #4
 8009f4a:	d003      	beq.n	8009f54 <HAL_RCC_GetSysClockFreq+0x38>
 8009f4c:	e08e      	b.n	800a06c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f4e:	4b4c      	ldr	r3, [pc, #304]	; (800a080 <HAL_RCC_GetSysClockFreq+0x164>)
 8009f50:	60bb      	str	r3, [r7, #8]
       break;
 8009f52:	e08e      	b.n	800a072 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f54:	4b4b      	ldr	r3, [pc, #300]	; (800a084 <HAL_RCC_GetSysClockFreq+0x168>)
 8009f56:	60bb      	str	r3, [r7, #8]
      break;
 8009f58:	e08b      	b.n	800a072 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f5a:	4948      	ldr	r1, [pc, #288]	; (800a07c <HAL_RCC_GetSysClockFreq+0x160>)
 8009f5c:	6849      	ldr	r1, [r1, #4]
 8009f5e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009f62:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009f64:	4945      	ldr	r1, [pc, #276]	; (800a07c <HAL_RCC_GetSysClockFreq+0x160>)
 8009f66:	6849      	ldr	r1, [r1, #4]
 8009f68:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009f6c:	2900      	cmp	r1, #0
 8009f6e:	d024      	beq.n	8009fba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f70:	4942      	ldr	r1, [pc, #264]	; (800a07c <HAL_RCC_GetSysClockFreq+0x160>)
 8009f72:	6849      	ldr	r1, [r1, #4]
 8009f74:	0989      	lsrs	r1, r1, #6
 8009f76:	4608      	mov	r0, r1
 8009f78:	f04f 0100 	mov.w	r1, #0
 8009f7c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009f80:	f04f 0500 	mov.w	r5, #0
 8009f84:	ea00 0204 	and.w	r2, r0, r4
 8009f88:	ea01 0305 	and.w	r3, r1, r5
 8009f8c:	493d      	ldr	r1, [pc, #244]	; (800a084 <HAL_RCC_GetSysClockFreq+0x168>)
 8009f8e:	fb01 f003 	mul.w	r0, r1, r3
 8009f92:	2100      	movs	r1, #0
 8009f94:	fb01 f102 	mul.w	r1, r1, r2
 8009f98:	1844      	adds	r4, r0, r1
 8009f9a:	493a      	ldr	r1, [pc, #232]	; (800a084 <HAL_RCC_GetSysClockFreq+0x168>)
 8009f9c:	fba2 0101 	umull	r0, r1, r2, r1
 8009fa0:	1863      	adds	r3, r4, r1
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	f04f 0300 	mov.w	r3, #0
 8009fac:	f7f6 fe84 	bl	8000cb8 <__aeabi_uldivmod>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	60fb      	str	r3, [r7, #12]
 8009fb8:	e04a      	b.n	800a050 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fba:	4b30      	ldr	r3, [pc, #192]	; (800a07c <HAL_RCC_GetSysClockFreq+0x160>)
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	099b      	lsrs	r3, r3, #6
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	f04f 0300 	mov.w	r3, #0
 8009fc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009fca:	f04f 0100 	mov.w	r1, #0
 8009fce:	ea02 0400 	and.w	r4, r2, r0
 8009fd2:	ea03 0501 	and.w	r5, r3, r1
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	4629      	mov	r1, r5
 8009fda:	f04f 0200 	mov.w	r2, #0
 8009fde:	f04f 0300 	mov.w	r3, #0
 8009fe2:	014b      	lsls	r3, r1, #5
 8009fe4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009fe8:	0142      	lsls	r2, r0, #5
 8009fea:	4610      	mov	r0, r2
 8009fec:	4619      	mov	r1, r3
 8009fee:	1b00      	subs	r0, r0, r4
 8009ff0:	eb61 0105 	sbc.w	r1, r1, r5
 8009ff4:	f04f 0200 	mov.w	r2, #0
 8009ff8:	f04f 0300 	mov.w	r3, #0
 8009ffc:	018b      	lsls	r3, r1, #6
 8009ffe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a002:	0182      	lsls	r2, r0, #6
 800a004:	1a12      	subs	r2, r2, r0
 800a006:	eb63 0301 	sbc.w	r3, r3, r1
 800a00a:	f04f 0000 	mov.w	r0, #0
 800a00e:	f04f 0100 	mov.w	r1, #0
 800a012:	00d9      	lsls	r1, r3, #3
 800a014:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a018:	00d0      	lsls	r0, r2, #3
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	1912      	adds	r2, r2, r4
 800a020:	eb45 0303 	adc.w	r3, r5, r3
 800a024:	f04f 0000 	mov.w	r0, #0
 800a028:	f04f 0100 	mov.w	r1, #0
 800a02c:	0299      	lsls	r1, r3, #10
 800a02e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a032:	0290      	lsls	r0, r2, #10
 800a034:	4602      	mov	r2, r0
 800a036:	460b      	mov	r3, r1
 800a038:	4610      	mov	r0, r2
 800a03a:	4619      	mov	r1, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	461a      	mov	r2, r3
 800a040:	f04f 0300 	mov.w	r3, #0
 800a044:	f7f6 fe38 	bl	8000cb8 <__aeabi_uldivmod>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4613      	mov	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a050:	4b0a      	ldr	r3, [pc, #40]	; (800a07c <HAL_RCC_GetSysClockFreq+0x160>)
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	0c1b      	lsrs	r3, r3, #16
 800a056:	f003 0303 	and.w	r3, r3, #3
 800a05a:	3301      	adds	r3, #1
 800a05c:	005b      	lsls	r3, r3, #1
 800a05e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	fbb2 f3f3 	udiv	r3, r2, r3
 800a068:	60bb      	str	r3, [r7, #8]
      break;
 800a06a:	e002      	b.n	800a072 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a06c:	4b04      	ldr	r3, [pc, #16]	; (800a080 <HAL_RCC_GetSysClockFreq+0x164>)
 800a06e:	60bb      	str	r3, [r7, #8]
      break;
 800a070:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a072:	68bb      	ldr	r3, [r7, #8]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bdb0      	pop	{r4, r5, r7, pc}
 800a07c:	40023800 	.word	0x40023800
 800a080:	00f42400 	.word	0x00f42400
 800a084:	017d7840 	.word	0x017d7840

0800a088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a088:	b480      	push	{r7}
 800a08a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a08c:	4b03      	ldr	r3, [pc, #12]	; (800a09c <HAL_RCC_GetHCLKFreq+0x14>)
 800a08e:	681b      	ldr	r3, [r3, #0]
}
 800a090:	4618      	mov	r0, r3
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	20000034 	.word	0x20000034

0800a0a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a0a4:	f7ff fff0 	bl	800a088 <HAL_RCC_GetHCLKFreq>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	0a9b      	lsrs	r3, r3, #10
 800a0b0:	f003 0307 	and.w	r3, r3, #7
 800a0b4:	4903      	ldr	r1, [pc, #12]	; (800a0c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0b6:	5ccb      	ldrb	r3, [r1, r3]
 800a0b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	40023800 	.word	0x40023800
 800a0c4:	080240fc 	.word	0x080240fc

0800a0c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a0cc:	f7ff ffdc 	bl	800a088 <HAL_RCC_GetHCLKFreq>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	4b05      	ldr	r3, [pc, #20]	; (800a0e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	0b5b      	lsrs	r3, r3, #13
 800a0d8:	f003 0307 	and.w	r3, r3, #7
 800a0dc:	4903      	ldr	r1, [pc, #12]	; (800a0ec <HAL_RCC_GetPCLK2Freq+0x24>)
 800a0de:	5ccb      	ldrb	r3, [r1, r3]
 800a0e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	40023800 	.word	0x40023800
 800a0ec:	080240fc 	.word	0x080240fc

0800a0f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e07b      	b.n	800a1fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	2b00      	cmp	r3, #0
 800a108:	d108      	bne.n	800a11c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a112:	d009      	beq.n	800a128 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	61da      	str	r2, [r3, #28]
 800a11a:	e005      	b.n	800a128 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d106      	bne.n	800a148 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7fb f9bc 	bl	80054c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2202      	movs	r2, #2
 800a14c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a15e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a170:	431a      	orrs	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a17a:	431a      	orrs	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	f003 0302 	and.w	r3, r3, #2
 800a184:	431a      	orrs	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	431a      	orrs	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a198:	431a      	orrs	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ac:	ea42 0103 	orr.w	r1, r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	430a      	orrs	r2, r1
 800a1be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	0c1b      	lsrs	r3, r3, #16
 800a1c6:	f003 0104 	and.w	r1, r3, #4
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	f003 0210 	and.w	r2, r3, #16
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	69da      	ldr	r2, [r3, #28]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b08c      	sub	sp, #48	; 0x30
 800a206:	af00      	add	r7, sp, #0
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	607a      	str	r2, [r7, #4]
 800a20e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a210:	2301      	movs	r3, #1
 800a212:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a220:	2b01      	cmp	r3, #1
 800a222:	d101      	bne.n	800a228 <HAL_SPI_TransmitReceive+0x26>
 800a224:	2302      	movs	r3, #2
 800a226:	e18a      	b.n	800a53e <HAL_SPI_TransmitReceive+0x33c>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a230:	f7fb fee8 	bl	8006004 <HAL_GetTick>
 800a234:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a23c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a246:	887b      	ldrh	r3, [r7, #2]
 800a248:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a24a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d00f      	beq.n	800a272 <HAL_SPI_TransmitReceive+0x70>
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a258:	d107      	bne.n	800a26a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d103      	bne.n	800a26a <HAL_SPI_TransmitReceive+0x68>
 800a262:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a266:	2b04      	cmp	r3, #4
 800a268:	d003      	beq.n	800a272 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a26a:	2302      	movs	r3, #2
 800a26c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a270:	e15b      	b.n	800a52a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d005      	beq.n	800a284 <HAL_SPI_TransmitReceive+0x82>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d002      	beq.n	800a284 <HAL_SPI_TransmitReceive+0x82>
 800a27e:	887b      	ldrh	r3, [r7, #2]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d103      	bne.n	800a28c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a28a:	e14e      	b.n	800a52a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a292:	b2db      	uxtb	r3, r3
 800a294:	2b04      	cmp	r3, #4
 800a296:	d003      	beq.n	800a2a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2205      	movs	r2, #5
 800a29c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	887a      	ldrh	r2, [r7, #2]
 800a2b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	887a      	ldrh	r2, [r7, #2]
 800a2b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	887a      	ldrh	r2, [r7, #2]
 800a2c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	887a      	ldrh	r2, [r7, #2]
 800a2c8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e0:	2b40      	cmp	r3, #64	; 0x40
 800a2e2:	d007      	beq.n	800a2f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2fc:	d178      	bne.n	800a3f0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <HAL_SPI_TransmitReceive+0x10a>
 800a306:	8b7b      	ldrh	r3, [r7, #26]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d166      	bne.n	800a3da <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a310:	881a      	ldrh	r2, [r3, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31c:	1c9a      	adds	r2, r3, #2
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a326:	b29b      	uxth	r3, r3
 800a328:	3b01      	subs	r3, #1
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a330:	e053      	b.n	800a3da <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	f003 0302 	and.w	r3, r3, #2
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d11b      	bne.n	800a378 <HAL_SPI_TransmitReceive+0x176>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a344:	b29b      	uxth	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d016      	beq.n	800a378 <HAL_SPI_TransmitReceive+0x176>
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d113      	bne.n	800a378 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a354:	881a      	ldrh	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a360:	1c9a      	adds	r2, r3, #2
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	3b01      	subs	r3, #1
 800a36e:	b29a      	uxth	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a374:	2300      	movs	r3, #0
 800a376:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	f003 0301 	and.w	r3, r3, #1
 800a382:	2b01      	cmp	r3, #1
 800a384:	d119      	bne.n	800a3ba <HAL_SPI_TransmitReceive+0x1b8>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d014      	beq.n	800a3ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	68da      	ldr	r2, [r3, #12]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39a:	b292      	uxth	r2, r2
 800a39c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a2:	1c9a      	adds	r2, r3, #2
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a3ba:	f7fb fe23 	bl	8006004 <HAL_GetTick>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d807      	bhi.n	800a3da <HAL_SPI_TransmitReceive+0x1d8>
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d0:	d003      	beq.n	800a3da <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a3d8:	e0a7      	b.n	800a52a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1a6      	bne.n	800a332 <HAL_SPI_TransmitReceive+0x130>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1a1      	bne.n	800a332 <HAL_SPI_TransmitReceive+0x130>
 800a3ee:	e07c      	b.n	800a4ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <HAL_SPI_TransmitReceive+0x1fc>
 800a3f8:	8b7b      	ldrh	r3, [r7, #26]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d16b      	bne.n	800a4d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	330c      	adds	r3, #12
 800a408:	7812      	ldrb	r2, [r2, #0]
 800a40a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	3b01      	subs	r3, #1
 800a41e:	b29a      	uxth	r2, r3
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a424:	e057      	b.n	800a4d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	f003 0302 	and.w	r3, r3, #2
 800a430:	2b02      	cmp	r3, #2
 800a432:	d11c      	bne.n	800a46e <HAL_SPI_TransmitReceive+0x26c>
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a438:	b29b      	uxth	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d017      	beq.n	800a46e <HAL_SPI_TransmitReceive+0x26c>
 800a43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a440:	2b01      	cmp	r3, #1
 800a442:	d114      	bne.n	800a46e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	330c      	adds	r3, #12
 800a44e:	7812      	ldrb	r2, [r2, #0]
 800a450:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a460:	b29b      	uxth	r3, r3
 800a462:	3b01      	subs	r3, #1
 800a464:	b29a      	uxth	r2, r3
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a46a:	2300      	movs	r3, #0
 800a46c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	f003 0301 	and.w	r3, r3, #1
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d119      	bne.n	800a4b0 <HAL_SPI_TransmitReceive+0x2ae>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a480:	b29b      	uxth	r3, r3
 800a482:	2b00      	cmp	r3, #0
 800a484:	d014      	beq.n	800a4b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68da      	ldr	r2, [r3, #12]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a490:	b2d2      	uxtb	r2, r2
 800a492:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a498:	1c5a      	adds	r2, r3, #1
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a4b0:	f7fb fda8 	bl	8006004 <HAL_GetTick>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d803      	bhi.n	800a4c8 <HAL_SPI_TransmitReceive+0x2c6>
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c6:	d102      	bne.n	800a4ce <HAL_SPI_TransmitReceive+0x2cc>
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d103      	bne.n	800a4d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a4d4:	e029      	b.n	800a52a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d1a2      	bne.n	800a426 <HAL_SPI_TransmitReceive+0x224>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d19d      	bne.n	800a426 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a4ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f000 f9d0 	bl	800a894 <SPI_EndRxTxTransaction>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d006      	beq.n	800a508 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2220      	movs	r2, #32
 800a504:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a506:	e010      	b.n	800a52a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10b      	bne.n	800a528 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a510:	2300      	movs	r3, #0
 800a512:	617b      	str	r3, [r7, #20]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	617b      	str	r3, [r7, #20]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	617b      	str	r3, [r7, #20]
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	e000      	b.n	800a52a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a528:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a53a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3730      	adds	r7, #48	; 0x30
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b088      	sub	sp, #32
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	099b      	lsrs	r3, r3, #6
 800a564:	f003 0301 	and.w	r3, r3, #1
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10f      	bne.n	800a58c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00a      	beq.n	800a58c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	099b      	lsrs	r3, r3, #6
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d004      	beq.n	800a58c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	4798      	blx	r3
    return;
 800a58a:	e0d7      	b.n	800a73c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	085b      	lsrs	r3, r3, #1
 800a590:	f003 0301 	and.w	r3, r3, #1
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00a      	beq.n	800a5ae <HAL_SPI_IRQHandler+0x66>
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	09db      	lsrs	r3, r3, #7
 800a59c:	f003 0301 	and.w	r3, r3, #1
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d004      	beq.n	800a5ae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	4798      	blx	r3
    return;
 800a5ac:	e0c6      	b.n	800a73c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	095b      	lsrs	r3, r3, #5
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10c      	bne.n	800a5d4 <HAL_SPI_IRQHandler+0x8c>
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	099b      	lsrs	r3, r3, #6
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d106      	bne.n	800a5d4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	0a1b      	lsrs	r3, r3, #8
 800a5ca:	f003 0301 	and.w	r3, r3, #1
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 80b4 	beq.w	800a73c <HAL_SPI_IRQHandler+0x1f4>
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	095b      	lsrs	r3, r3, #5
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f000 80ad 	beq.w	800a73c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	099b      	lsrs	r3, r3, #6
 800a5e6:	f003 0301 	and.w	r3, r3, #1
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d023      	beq.n	800a636 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	d011      	beq.n	800a61e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5fe:	f043 0204 	orr.w	r2, r3, #4
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a606:	2300      	movs	r3, #0
 800a608:	617b      	str	r3, [r7, #20]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	617b      	str	r3, [r7, #20]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	617b      	str	r3, [r7, #20]
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	e00b      	b.n	800a636 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a61e:	2300      	movs	r3, #0
 800a620:	613b      	str	r3, [r7, #16]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	613b      	str	r3, [r7, #16]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	613b      	str	r3, [r7, #16]
 800a632:	693b      	ldr	r3, [r7, #16]
        return;
 800a634:	e082      	b.n	800a73c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	095b      	lsrs	r3, r3, #5
 800a63a:	f003 0301 	and.w	r3, r3, #1
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d014      	beq.n	800a66c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a646:	f043 0201 	orr.w	r2, r3, #1
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a64e:	2300      	movs	r3, #0
 800a650:	60fb      	str	r3, [r7, #12]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	0a1b      	lsrs	r3, r3, #8
 800a670:	f003 0301 	and.w	r3, r3, #1
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00c      	beq.n	800a692 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a67c:	f043 0208 	orr.w	r2, r3, #8
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a684:	2300      	movs	r3, #0
 800a686:	60bb      	str	r3, [r7, #8]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	60bb      	str	r3, [r7, #8]
 800a690:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a696:	2b00      	cmp	r3, #0
 800a698:	d04f      	beq.n	800a73a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a6a8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	f003 0302 	and.w	r3, r3, #2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d104      	bne.n	800a6c6 <HAL_SPI_IRQHandler+0x17e>
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	f003 0301 	and.w	r3, r3, #1
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d034      	beq.n	800a730 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	685a      	ldr	r2, [r3, #4]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f022 0203 	bic.w	r2, r2, #3
 800a6d4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d011      	beq.n	800a702 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6e2:	4a18      	ldr	r2, [pc, #96]	; (800a744 <HAL_SPI_IRQHandler+0x1fc>)
 800a6e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fb ffd0 	bl	8006690 <HAL_DMA_Abort_IT>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d005      	beq.n	800a702 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a706:	2b00      	cmp	r3, #0
 800a708:	d016      	beq.n	800a738 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a70e:	4a0d      	ldr	r2, [pc, #52]	; (800a744 <HAL_SPI_IRQHandler+0x1fc>)
 800a710:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a716:	4618      	mov	r0, r3
 800a718:	f7fb ffba 	bl	8006690 <HAL_DMA_Abort_IT>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00a      	beq.n	800a738 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a726:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a72e:	e003      	b.n	800a738 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f809 	bl	800a748 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a736:	e000      	b.n	800a73a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a738:	bf00      	nop
    return;
 800a73a:	bf00      	nop
  }
}
 800a73c:	3720      	adds	r7, #32
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	0800a75d 	.word	0x0800a75d

0800a748 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a768:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7ff ffe6 	bl	800a748 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a77c:	bf00      	nop
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	603b      	str	r3, [r7, #0]
 800a790:	4613      	mov	r3, r2
 800a792:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a794:	f7fb fc36 	bl	8006004 <HAL_GetTick>
 800a798:	4602      	mov	r2, r0
 800a79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79c:	1a9b      	subs	r3, r3, r2
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a7a4:	f7fb fc2e 	bl	8006004 <HAL_GetTick>
 800a7a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a7aa:	4b39      	ldr	r3, [pc, #228]	; (800a890 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	015b      	lsls	r3, r3, #5
 800a7b0:	0d1b      	lsrs	r3, r3, #20
 800a7b2:	69fa      	ldr	r2, [r7, #28]
 800a7b4:	fb02 f303 	mul.w	r3, r2, r3
 800a7b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a7ba:	e054      	b.n	800a866 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c2:	d050      	beq.n	800a866 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a7c4:	f7fb fc1e 	bl	8006004 <HAL_GetTick>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	69fa      	ldr	r2, [r7, #28]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d902      	bls.n	800a7da <SPI_WaitFlagStateUntilTimeout+0x56>
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d13d      	bne.n	800a856 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a7e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7f2:	d111      	bne.n	800a818 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7fc:	d004      	beq.n	800a808 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a806:	d107      	bne.n	800a818 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a816:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a81c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a820:	d10f      	bne.n	800a842 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a830:	601a      	str	r2, [r3, #0]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a840:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a852:	2303      	movs	r3, #3
 800a854:	e017      	b.n	800a886 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a85c:	2300      	movs	r3, #0
 800a85e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	3b01      	subs	r3, #1
 800a864:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	689a      	ldr	r2, [r3, #8]
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	4013      	ands	r3, r2
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	429a      	cmp	r2, r3
 800a874:	bf0c      	ite	eq
 800a876:	2301      	moveq	r3, #1
 800a878:	2300      	movne	r3, #0
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	461a      	mov	r2, r3
 800a87e:	79fb      	ldrb	r3, [r7, #7]
 800a880:	429a      	cmp	r2, r3
 800a882:	d19b      	bne.n	800a7bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3720      	adds	r7, #32
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	20000034 	.word	0x20000034

0800a894 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b088      	sub	sp, #32
 800a898:	af02      	add	r7, sp, #8
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a8a0:	4b1b      	ldr	r3, [pc, #108]	; (800a910 <SPI_EndRxTxTransaction+0x7c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a1b      	ldr	r2, [pc, #108]	; (800a914 <SPI_EndRxTxTransaction+0x80>)
 800a8a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8aa:	0d5b      	lsrs	r3, r3, #21
 800a8ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a8b0:	fb02 f303 	mul.w	r3, r2, r3
 800a8b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8be:	d112      	bne.n	800a8e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2180      	movs	r1, #128	; 0x80
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f7ff ff5a 	bl	800a784 <SPI_WaitFlagStateUntilTimeout>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d016      	beq.n	800a904 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8da:	f043 0220 	orr.w	r2, r3, #32
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e00f      	b.n	800a906 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00a      	beq.n	800a902 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8fc:	2b80      	cmp	r3, #128	; 0x80
 800a8fe:	d0f2      	beq.n	800a8e6 <SPI_EndRxTxTransaction+0x52>
 800a900:	e000      	b.n	800a904 <SPI_EndRxTxTransaction+0x70>
        break;
 800a902:	bf00      	nop
  }

  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	20000034 	.word	0x20000034
 800a914:	165e9f81 	.word	0x165e9f81

0800a918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e041      	b.n	800a9ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b00      	cmp	r3, #0
 800a934:	d106      	bne.n	800a944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7fb f814 	bl	800596c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2202      	movs	r2, #2
 800a948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	3304      	adds	r3, #4
 800a954:	4619      	mov	r1, r3
 800a956:	4610      	mov	r0, r2
 800a958:	f000 f9f0 	bl	800ad3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d001      	beq.n	800a9d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e044      	b.n	800aa5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2202      	movs	r2, #2
 800a9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68da      	ldr	r2, [r3, #12]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f042 0201 	orr.w	r2, r2, #1
 800a9e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a1e      	ldr	r2, [pc, #120]	; (800aa68 <HAL_TIM_Base_Start_IT+0xb0>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d018      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x6c>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9fa:	d013      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x6c>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a1a      	ldr	r2, [pc, #104]	; (800aa6c <HAL_TIM_Base_Start_IT+0xb4>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d00e      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x6c>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a19      	ldr	r2, [pc, #100]	; (800aa70 <HAL_TIM_Base_Start_IT+0xb8>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d009      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x6c>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a17      	ldr	r2, [pc, #92]	; (800aa74 <HAL_TIM_Base_Start_IT+0xbc>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d004      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x6c>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a16      	ldr	r2, [pc, #88]	; (800aa78 <HAL_TIM_Base_Start_IT+0xc0>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d111      	bne.n	800aa48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	f003 0307 	and.w	r3, r3, #7
 800aa2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2b06      	cmp	r3, #6
 800aa34:	d010      	beq.n	800aa58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f042 0201 	orr.w	r2, r2, #1
 800aa44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa46:	e007      	b.n	800aa58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f042 0201 	orr.w	r2, r2, #1
 800aa56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	40010000 	.word	0x40010000
 800aa6c:	40000400 	.word	0x40000400
 800aa70:	40000800 	.word	0x40000800
 800aa74:	40000c00 	.word	0x40000c00
 800aa78:	40014000 	.word	0x40014000

0800aa7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68da      	ldr	r2, [r3, #12]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f022 0201 	bic.w	r2, r2, #1
 800aa92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6a1a      	ldr	r2, [r3, #32]
 800aa9a:	f241 1311 	movw	r3, #4369	; 0x1111
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10f      	bne.n	800aac4 <HAL_TIM_Base_Stop_IT+0x48>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6a1a      	ldr	r2, [r3, #32]
 800aaaa:	f240 4344 	movw	r3, #1092	; 0x444
 800aaae:	4013      	ands	r3, r2
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d107      	bne.n	800aac4 <HAL_TIM_Base_Stop_IT+0x48>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f022 0201 	bic.w	r2, r2, #1
 800aac2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	370c      	adds	r7, #12
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b082      	sub	sp, #8
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	f003 0302 	and.w	r3, r3, #2
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d122      	bne.n	800ab36 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	f003 0302 	and.w	r3, r3, #2
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d11b      	bne.n	800ab36 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f06f 0202 	mvn.w	r2, #2
 800ab06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	699b      	ldr	r3, [r3, #24]
 800ab14:	f003 0303 	and.w	r3, r3, #3
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d003      	beq.n	800ab24 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 f8ee 	bl	800acfe <HAL_TIM_IC_CaptureCallback>
 800ab22:	e005      	b.n	800ab30 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 f8e0 	bl	800acea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f8f1 	bl	800ad12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	2b04      	cmp	r3, #4
 800ab42:	d122      	bne.n	800ab8a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	f003 0304 	and.w	r3, r3, #4
 800ab4e:	2b04      	cmp	r3, #4
 800ab50:	d11b      	bne.n	800ab8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f06f 0204 	mvn.w	r2, #4
 800ab5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2202      	movs	r2, #2
 800ab60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d003      	beq.n	800ab78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 f8c4 	bl	800acfe <HAL_TIM_IC_CaptureCallback>
 800ab76:	e005      	b.n	800ab84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f8b6 	bl	800acea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f8c7 	bl	800ad12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	f003 0308 	and.w	r3, r3, #8
 800ab94:	2b08      	cmp	r3, #8
 800ab96:	d122      	bne.n	800abde <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	f003 0308 	and.w	r3, r3, #8
 800aba2:	2b08      	cmp	r3, #8
 800aba4:	d11b      	bne.n	800abde <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f06f 0208 	mvn.w	r2, #8
 800abae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2204      	movs	r2, #4
 800abb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	69db      	ldr	r3, [r3, #28]
 800abbc:	f003 0303 	and.w	r3, r3, #3
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d003      	beq.n	800abcc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f89a 	bl	800acfe <HAL_TIM_IC_CaptureCallback>
 800abca:	e005      	b.n	800abd8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f88c 	bl	800acea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f89d 	bl	800ad12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	f003 0310 	and.w	r3, r3, #16
 800abe8:	2b10      	cmp	r3, #16
 800abea:	d122      	bne.n	800ac32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	f003 0310 	and.w	r3, r3, #16
 800abf6:	2b10      	cmp	r3, #16
 800abf8:	d11b      	bne.n	800ac32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f06f 0210 	mvn.w	r2, #16
 800ac02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2208      	movs	r2, #8
 800ac08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	69db      	ldr	r3, [r3, #28]
 800ac10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f870 	bl	800acfe <HAL_TIM_IC_CaptureCallback>
 800ac1e:	e005      	b.n	800ac2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 f862 	bl	800acea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f873 	bl	800ad12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	f003 0301 	and.w	r3, r3, #1
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d10e      	bne.n	800ac5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	f003 0301 	and.w	r3, r3, #1
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d107      	bne.n	800ac5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f06f 0201 	mvn.w	r2, #1
 800ac56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7f9 f971 	bl	8003f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac68:	2b80      	cmp	r3, #128	; 0x80
 800ac6a:	d10e      	bne.n	800ac8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac76:	2b80      	cmp	r3, #128	; 0x80
 800ac78:	d107      	bne.n	800ac8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 f8e3 	bl	800ae50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac94:	2b40      	cmp	r3, #64	; 0x40
 800ac96:	d10e      	bne.n	800acb6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca2:	2b40      	cmp	r3, #64	; 0x40
 800aca4:	d107      	bne.n	800acb6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800acae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f838 	bl	800ad26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	f003 0320 	and.w	r3, r3, #32
 800acc0:	2b20      	cmp	r3, #32
 800acc2:	d10e      	bne.n	800ace2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	f003 0320 	and.w	r3, r3, #32
 800acce:	2b20      	cmp	r3, #32
 800acd0:	d107      	bne.n	800ace2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f06f 0220 	mvn.w	r2, #32
 800acda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 f8ad 	bl	800ae3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ace2:	bf00      	nop
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acea:	b480      	push	{r7}
 800acec:	b083      	sub	sp, #12
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acf2:	bf00      	nop
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b083      	sub	sp, #12
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad06:	bf00      	nop
 800ad08:	370c      	adds	r7, #12
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b083      	sub	sp, #12
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad1a:	bf00      	nop
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b083      	sub	sp, #12
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad2e:	bf00      	nop
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
	...

0800ad3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a34      	ldr	r2, [pc, #208]	; (800ae20 <TIM_Base_SetConfig+0xe4>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d00f      	beq.n	800ad74 <TIM_Base_SetConfig+0x38>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad5a:	d00b      	beq.n	800ad74 <TIM_Base_SetConfig+0x38>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a31      	ldr	r2, [pc, #196]	; (800ae24 <TIM_Base_SetConfig+0xe8>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d007      	beq.n	800ad74 <TIM_Base_SetConfig+0x38>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a30      	ldr	r2, [pc, #192]	; (800ae28 <TIM_Base_SetConfig+0xec>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d003      	beq.n	800ad74 <TIM_Base_SetConfig+0x38>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4a2f      	ldr	r2, [pc, #188]	; (800ae2c <TIM_Base_SetConfig+0xf0>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d108      	bne.n	800ad86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a25      	ldr	r2, [pc, #148]	; (800ae20 <TIM_Base_SetConfig+0xe4>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d01b      	beq.n	800adc6 <TIM_Base_SetConfig+0x8a>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad94:	d017      	beq.n	800adc6 <TIM_Base_SetConfig+0x8a>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a22      	ldr	r2, [pc, #136]	; (800ae24 <TIM_Base_SetConfig+0xe8>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d013      	beq.n	800adc6 <TIM_Base_SetConfig+0x8a>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a21      	ldr	r2, [pc, #132]	; (800ae28 <TIM_Base_SetConfig+0xec>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d00f      	beq.n	800adc6 <TIM_Base_SetConfig+0x8a>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a20      	ldr	r2, [pc, #128]	; (800ae2c <TIM_Base_SetConfig+0xf0>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d00b      	beq.n	800adc6 <TIM_Base_SetConfig+0x8a>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4a1f      	ldr	r2, [pc, #124]	; (800ae30 <TIM_Base_SetConfig+0xf4>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d007      	beq.n	800adc6 <TIM_Base_SetConfig+0x8a>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	4a1e      	ldr	r2, [pc, #120]	; (800ae34 <TIM_Base_SetConfig+0xf8>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d003      	beq.n	800adc6 <TIM_Base_SetConfig+0x8a>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4a1d      	ldr	r2, [pc, #116]	; (800ae38 <TIM_Base_SetConfig+0xfc>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d108      	bne.n	800add8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	4313      	orrs	r3, r2
 800add6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	695b      	ldr	r3, [r3, #20]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	689a      	ldr	r2, [r3, #8]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a08      	ldr	r2, [pc, #32]	; (800ae20 <TIM_Base_SetConfig+0xe4>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d103      	bne.n	800ae0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	691a      	ldr	r2, [r3, #16]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	615a      	str	r2, [r3, #20]
}
 800ae12:	bf00      	nop
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	40010000 	.word	0x40010000
 800ae24:	40000400 	.word	0x40000400
 800ae28:	40000800 	.word	0x40000800
 800ae2c:	40000c00 	.word	0x40000c00
 800ae30:	40014000 	.word	0x40014000
 800ae34:	40014400 	.word	0x40014400
 800ae38:	40014800 	.word	0x40014800

0800ae3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae44:	bf00      	nop
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e03f      	b.n	800aef6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d106      	bne.n	800ae90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7fa ff7e 	bl	8005d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2224      	movs	r2, #36	; 0x24
 800ae94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68da      	ldr	r2, [r3, #12]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 ff53 	bl	800bd54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	691a      	ldr	r2, [r3, #16]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	695a      	ldr	r2, [r3, #20]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68da      	ldr	r2, [r3, #12]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aedc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2220      	movs	r2, #32
 800aee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2220      	movs	r2, #32
 800aef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
	...

0800af00 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b08c      	sub	sp, #48	; 0x30
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	4613      	mov	r3, r2
 800af0c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af14:	b2db      	uxtb	r3, r3
 800af16:	2b20      	cmp	r3, #32
 800af18:	d165      	bne.n	800afe6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <HAL_UART_Transmit_DMA+0x26>
 800af20:	88fb      	ldrh	r3, [r7, #6]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d101      	bne.n	800af2a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	e05e      	b.n	800afe8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af30:	2b01      	cmp	r3, #1
 800af32:	d101      	bne.n	800af38 <HAL_UART_Transmit_DMA+0x38>
 800af34:	2302      	movs	r3, #2
 800af36:	e057      	b.n	800afe8 <HAL_UART_Transmit_DMA+0xe8>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800af40:	68ba      	ldr	r2, [r7, #8]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	88fa      	ldrh	r2, [r7, #6]
 800af4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	88fa      	ldrh	r2, [r7, #6]
 800af50:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2200      	movs	r2, #0
 800af56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2221      	movs	r2, #33	; 0x21
 800af5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af64:	4a22      	ldr	r2, [pc, #136]	; (800aff0 <HAL_UART_Transmit_DMA+0xf0>)
 800af66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6c:	4a21      	ldr	r2, [pc, #132]	; (800aff4 <HAL_UART_Transmit_DMA+0xf4>)
 800af6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af74:	4a20      	ldr	r2, [pc, #128]	; (800aff8 <HAL_UART_Transmit_DMA+0xf8>)
 800af76:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7c:	2200      	movs	r2, #0
 800af7e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800af80:	f107 0308 	add.w	r3, r7, #8
 800af84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800af8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8c:	6819      	ldr	r1, [r3, #0]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3304      	adds	r3, #4
 800af94:	461a      	mov	r2, r3
 800af96:	88fb      	ldrh	r3, [r7, #6]
 800af98:	f7fb fab2 	bl	8006500 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800afa4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3314      	adds	r3, #20
 800afb4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	e853 3f00 	ldrex	r3, [r3]
 800afbc:	617b      	str	r3, [r7, #20]
   return(result);
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc4:	62bb      	str	r3, [r7, #40]	; 0x28
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3314      	adds	r3, #20
 800afcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afce:	627a      	str	r2, [r7, #36]	; 0x24
 800afd0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd2:	6a39      	ldr	r1, [r7, #32]
 800afd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd6:	e841 2300 	strex	r3, r2, [r1]
 800afda:	61fb      	str	r3, [r7, #28]
   return(result);
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1e5      	bne.n	800afae <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	e000      	b.n	800afe8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800afe6:	2302      	movs	r3, #2
  }
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3730      	adds	r7, #48	; 0x30
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	0800b5f5 	.word	0x0800b5f5
 800aff4:	0800b68f 	.word	0x0800b68f
 800aff8:	0800b807 	.word	0x0800b807

0800affc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	4613      	mov	r3, r2
 800b008:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b010:	b2db      	uxtb	r3, r3
 800b012:	2b20      	cmp	r3, #32
 800b014:	d11d      	bne.n	800b052 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <HAL_UART_Receive_DMA+0x26>
 800b01c:	88fb      	ldrh	r3, [r7, #6]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e016      	b.n	800b054 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d101      	bne.n	800b034 <HAL_UART_Receive_DMA+0x38>
 800b030:	2302      	movs	r3, #2
 800b032:	e00f      	b.n	800b054 <HAL_UART_Receive_DMA+0x58>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b042:	88fb      	ldrh	r3, [r7, #6]
 800b044:	461a      	mov	r2, r3
 800b046:	68b9      	ldr	r1, [r7, #8]
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f000 fc27 	bl	800b89c <UART_Start_Receive_DMA>
 800b04e:	4603      	mov	r3, r0
 800b050:	e000      	b.n	800b054 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b052:	2302      	movs	r3, #2
  }
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b0ba      	sub	sp, #232	; 0xe8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b082:	2300      	movs	r3, #0
 800b084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b088:	2300      	movs	r3, #0
 800b08a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b08e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b092:	f003 030f 	and.w	r3, r3, #15
 800b096:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b09a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d10f      	bne.n	800b0c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0a6:	f003 0320 	and.w	r3, r3, #32
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d009      	beq.n	800b0c2 <HAL_UART_IRQHandler+0x66>
 800b0ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0b2:	f003 0320 	and.w	r3, r3, #32
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d003      	beq.n	800b0c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fd8f 	bl	800bbde <UART_Receive_IT>
      return;
 800b0c0:	e256      	b.n	800b570 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b0c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f000 80de 	beq.w	800b288 <HAL_UART_IRQHandler+0x22c>
 800b0cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0d0:	f003 0301 	and.w	r3, r3, #1
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d106      	bne.n	800b0e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b0d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 80d1 	beq.w	800b288 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b0e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00b      	beq.n	800b10a <HAL_UART_IRQHandler+0xae>
 800b0f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d005      	beq.n	800b10a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b102:	f043 0201 	orr.w	r2, r3, #1
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b10e:	f003 0304 	and.w	r3, r3, #4
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00b      	beq.n	800b12e <HAL_UART_IRQHandler+0xd2>
 800b116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b11a:	f003 0301 	and.w	r3, r3, #1
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d005      	beq.n	800b12e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b126:	f043 0202 	orr.w	r2, r3, #2
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b132:	f003 0302 	and.w	r3, r3, #2
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00b      	beq.n	800b152 <HAL_UART_IRQHandler+0xf6>
 800b13a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b13e:	f003 0301 	and.w	r3, r3, #1
 800b142:	2b00      	cmp	r3, #0
 800b144:	d005      	beq.n	800b152 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14a:	f043 0204 	orr.w	r2, r3, #4
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b156:	f003 0308 	and.w	r3, r3, #8
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d011      	beq.n	800b182 <HAL_UART_IRQHandler+0x126>
 800b15e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b162:	f003 0320 	and.w	r3, r3, #32
 800b166:	2b00      	cmp	r3, #0
 800b168:	d105      	bne.n	800b176 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b16a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b16e:	f003 0301 	and.w	r3, r3, #1
 800b172:	2b00      	cmp	r3, #0
 800b174:	d005      	beq.n	800b182 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17a:	f043 0208 	orr.w	r2, r3, #8
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 81ed 	beq.w	800b566 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b190:	f003 0320 	and.w	r3, r3, #32
 800b194:	2b00      	cmp	r3, #0
 800b196:	d008      	beq.n	800b1aa <HAL_UART_IRQHandler+0x14e>
 800b198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b19c:	f003 0320 	and.w	r3, r3, #32
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fd1a 	bl	800bbde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	695b      	ldr	r3, [r3, #20]
 800b1b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1b4:	2b40      	cmp	r3, #64	; 0x40
 800b1b6:	bf0c      	ite	eq
 800b1b8:	2301      	moveq	r3, #1
 800b1ba:	2300      	movne	r3, #0
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c6:	f003 0308 	and.w	r3, r3, #8
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d103      	bne.n	800b1d6 <HAL_UART_IRQHandler+0x17a>
 800b1ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d04f      	beq.n	800b276 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fc22 	bl	800ba20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e6:	2b40      	cmp	r3, #64	; 0x40
 800b1e8:	d141      	bne.n	800b26e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	3314      	adds	r3, #20
 800b1f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1f8:	e853 3f00 	ldrex	r3, [r3]
 800b1fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b200:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	3314      	adds	r3, #20
 800b212:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b216:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b21a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b222:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b226:	e841 2300 	strex	r3, r2, [r1]
 800b22a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b22e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1d9      	bne.n	800b1ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d013      	beq.n	800b266 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b242:	4a7d      	ldr	r2, [pc, #500]	; (800b438 <HAL_UART_IRQHandler+0x3dc>)
 800b244:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7fb fa20 	bl	8006690 <HAL_DMA_Abort_IT>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d016      	beq.n	800b284 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b25a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b260:	4610      	mov	r0, r2
 800b262:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b264:	e00e      	b.n	800b284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f9ae 	bl	800b5c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b26c:	e00a      	b.n	800b284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f9aa 	bl	800b5c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b274:	e006      	b.n	800b284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f9a6 	bl	800b5c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b282:	e170      	b.n	800b566 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b284:	bf00      	nop
    return;
 800b286:	e16e      	b.n	800b566 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	f040 814a 	bne.w	800b526 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b296:	f003 0310 	and.w	r3, r3, #16
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 8143 	beq.w	800b526 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2a4:	f003 0310 	and.w	r3, r3, #16
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f000 813c 	beq.w	800b526 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	60bb      	str	r3, [r7, #8]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	60bb      	str	r3, [r7, #8]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	60bb      	str	r3, [r7, #8]
 800b2c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ce:	2b40      	cmp	r3, #64	; 0x40
 800b2d0:	f040 80b4 	bne.w	800b43c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b2e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 8140 	beq.w	800b56a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b2ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	f080 8139 	bcs.w	800b56a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b30a:	f000 8088 	beq.w	800b41e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	330c      	adds	r3, #12
 800b314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b31c:	e853 3f00 	ldrex	r3, [r3]
 800b320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b324:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b32c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	330c      	adds	r3, #12
 800b336:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b33a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b33e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b342:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b346:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b34a:	e841 2300 	strex	r3, r2, [r1]
 800b34e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1d9      	bne.n	800b30e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	3314      	adds	r3, #20
 800b360:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b364:	e853 3f00 	ldrex	r3, [r3]
 800b368:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b36a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b36c:	f023 0301 	bic.w	r3, r3, #1
 800b370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	3314      	adds	r3, #20
 800b37a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b37e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b382:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b384:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b386:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b38a:	e841 2300 	strex	r3, r2, [r1]
 800b38e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1e1      	bne.n	800b35a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	3314      	adds	r3, #20
 800b39c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3a0:	e853 3f00 	ldrex	r3, [r3]
 800b3a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b3a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3314      	adds	r3, #20
 800b3b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b3ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b3bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b3c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b3c2:	e841 2300 	strex	r3, r2, [r1]
 800b3c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b3c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1e3      	bne.n	800b396 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2220      	movs	r2, #32
 800b3d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	330c      	adds	r3, #12
 800b3e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3e6:	e853 3f00 	ldrex	r3, [r3]
 800b3ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b3ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3ee:	f023 0310 	bic.w	r3, r3, #16
 800b3f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	330c      	adds	r3, #12
 800b3fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b400:	65ba      	str	r2, [r7, #88]	; 0x58
 800b402:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b404:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b406:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b408:	e841 2300 	strex	r3, r2, [r1]
 800b40c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b40e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1e3      	bne.n	800b3dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fb f8c9 	bl	80065b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b426:	b29b      	uxth	r3, r3
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	4619      	mov	r1, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f8d4 	bl	800b5dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b434:	e099      	b.n	800b56a <HAL_UART_IRQHandler+0x50e>
 800b436:	bf00      	nop
 800b438:	0800bae7 	.word	0x0800bae7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b444:	b29b      	uxth	r3, r3
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b450:	b29b      	uxth	r3, r3
 800b452:	2b00      	cmp	r3, #0
 800b454:	f000 808b 	beq.w	800b56e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f000 8086 	beq.w	800b56e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	330c      	adds	r3, #12
 800b468:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46c:	e853 3f00 	ldrex	r3, [r3]
 800b470:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b474:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b478:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	330c      	adds	r3, #12
 800b482:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b486:	647a      	str	r2, [r7, #68]	; 0x44
 800b488:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b48c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b48e:	e841 2300 	strex	r3, r2, [r1]
 800b492:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b496:	2b00      	cmp	r3, #0
 800b498:	d1e3      	bne.n	800b462 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	3314      	adds	r3, #20
 800b4a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a4:	e853 3f00 	ldrex	r3, [r3]
 800b4a8:	623b      	str	r3, [r7, #32]
   return(result);
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	f023 0301 	bic.w	r3, r3, #1
 800b4b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3314      	adds	r3, #20
 800b4ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b4be:	633a      	str	r2, [r7, #48]	; 0x30
 800b4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c6:	e841 2300 	strex	r3, r2, [r1]
 800b4ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1e3      	bne.n	800b49a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2220      	movs	r2, #32
 800b4d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	330c      	adds	r3, #12
 800b4e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	e853 3f00 	ldrex	r3, [r3]
 800b4ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f023 0310 	bic.w	r3, r3, #16
 800b4f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	330c      	adds	r3, #12
 800b500:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b504:	61fa      	str	r2, [r7, #28]
 800b506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b508:	69b9      	ldr	r1, [r7, #24]
 800b50a:	69fa      	ldr	r2, [r7, #28]
 800b50c:	e841 2300 	strex	r3, r2, [r1]
 800b510:	617b      	str	r3, [r7, #20]
   return(result);
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1e3      	bne.n	800b4e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b518:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f85c 	bl	800b5dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b524:	e023      	b.n	800b56e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b52a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d009      	beq.n	800b546 <HAL_UART_IRQHandler+0x4ea>
 800b532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d003      	beq.n	800b546 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 fae5 	bl	800bb0e <UART_Transmit_IT>
    return;
 800b544:	e014      	b.n	800b570 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b54a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00e      	beq.n	800b570 <HAL_UART_IRQHandler+0x514>
 800b552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d008      	beq.n	800b570 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 fb25 	bl	800bbae <UART_EndTransmit_IT>
    return;
 800b564:	e004      	b.n	800b570 <HAL_UART_IRQHandler+0x514>
    return;
 800b566:	bf00      	nop
 800b568:	e002      	b.n	800b570 <HAL_UART_IRQHandler+0x514>
      return;
 800b56a:	bf00      	nop
 800b56c:	e000      	b.n	800b570 <HAL_UART_IRQHandler+0x514>
      return;
 800b56e:	bf00      	nop
  }
}
 800b570:	37e8      	adds	r7, #232	; 0xe8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop

0800b578 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b580:	bf00      	nop
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b594:	bf00      	nop
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b090      	sub	sp, #64	; 0x40
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b600:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d137      	bne.n	800b680 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b612:	2200      	movs	r2, #0
 800b614:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3314      	adds	r3, #20
 800b61c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b620:	e853 3f00 	ldrex	r3, [r3]
 800b624:	623b      	str	r3, [r7, #32]
   return(result);
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b62c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3314      	adds	r3, #20
 800b634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b636:	633a      	str	r2, [r7, #48]	; 0x30
 800b638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b63c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b63e:	e841 2300 	strex	r3, r2, [r1]
 800b642:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1e5      	bne.n	800b616 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	330c      	adds	r3, #12
 800b650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	e853 3f00 	ldrex	r3, [r3]
 800b658:	60fb      	str	r3, [r7, #12]
   return(result);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b660:	637b      	str	r3, [r7, #52]	; 0x34
 800b662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	330c      	adds	r3, #12
 800b668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b66a:	61fa      	str	r2, [r7, #28]
 800b66c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66e:	69b9      	ldr	r1, [r7, #24]
 800b670:	69fa      	ldr	r2, [r7, #28]
 800b672:	e841 2300 	strex	r3, r2, [r1]
 800b676:	617b      	str	r3, [r7, #20]
   return(result);
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1e5      	bne.n	800b64a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b67e:	e002      	b.n	800b686 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b680:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b682:	f7ff ff79 	bl	800b578 <HAL_UART_TxCpltCallback>
}
 800b686:	bf00      	nop
 800b688:	3740      	adds	r7, #64	; 0x40
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f7ff ff75 	bl	800b58c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6a2:	bf00      	nop
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b09c      	sub	sp, #112	; 0x70
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d172      	bne.n	800b7ac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b6c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	330c      	adds	r3, #12
 800b6d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d6:	e853 3f00 	ldrex	r3, [r3]
 800b6da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b6dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	330c      	adds	r3, #12
 800b6ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b6ec:	65ba      	str	r2, [r7, #88]	; 0x58
 800b6ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6f4:	e841 2300 	strex	r3, r2, [r1]
 800b6f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b6fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1e5      	bne.n	800b6cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	3314      	adds	r3, #20
 800b706:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70a:	e853 3f00 	ldrex	r3, [r3]
 800b70e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b712:	f023 0301 	bic.w	r3, r3, #1
 800b716:	667b      	str	r3, [r7, #100]	; 0x64
 800b718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	3314      	adds	r3, #20
 800b71e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b720:	647a      	str	r2, [r7, #68]	; 0x44
 800b722:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b724:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b728:	e841 2300 	strex	r3, r2, [r1]
 800b72c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b730:	2b00      	cmp	r3, #0
 800b732:	d1e5      	bne.n	800b700 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	3314      	adds	r3, #20
 800b73a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73e:	e853 3f00 	ldrex	r3, [r3]
 800b742:	623b      	str	r3, [r7, #32]
   return(result);
 800b744:	6a3b      	ldr	r3, [r7, #32]
 800b746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b74a:	663b      	str	r3, [r7, #96]	; 0x60
 800b74c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	3314      	adds	r3, #20
 800b752:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b754:	633a      	str	r2, [r7, #48]	; 0x30
 800b756:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b758:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b75a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b75c:	e841 2300 	strex	r3, r2, [r1]
 800b760:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1e5      	bne.n	800b734 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b76a:	2220      	movs	r2, #32
 800b76c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b774:	2b01      	cmp	r3, #1
 800b776:	d119      	bne.n	800b7ac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	330c      	adds	r3, #12
 800b77e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	e853 3f00 	ldrex	r3, [r3]
 800b786:	60fb      	str	r3, [r7, #12]
   return(result);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f023 0310 	bic.w	r3, r3, #16
 800b78e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	330c      	adds	r3, #12
 800b796:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b798:	61fa      	str	r2, [r7, #28]
 800b79a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79c:	69b9      	ldr	r1, [r7, #24]
 800b79e:	69fa      	ldr	r2, [r7, #28]
 800b7a0:	e841 2300 	strex	r3, r2, [r1]
 800b7a4:	617b      	str	r3, [r7, #20]
   return(result);
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1e5      	bne.n	800b778 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d106      	bne.n	800b7c2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b7bc:	f7ff ff0e 	bl	800b5dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b7c0:	e002      	b.n	800b7c8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b7c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b7c4:	f7ff feec 	bl	800b5a0 <HAL_UART_RxCpltCallback>
}
 800b7c8:	bf00      	nop
 800b7ca:	3770      	adds	r7, #112	; 0x70
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7dc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d108      	bne.n	800b7f8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b7ea:	085b      	lsrs	r3, r3, #1
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f7ff fef3 	bl	800b5dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b7f6:	e002      	b.n	800b7fe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f7ff fedb 	bl	800b5b4 <HAL_UART_RxHalfCpltCallback>
}
 800b7fe:	bf00      	nop
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b80e:	2300      	movs	r3, #0
 800b810:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b816:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	695b      	ldr	r3, [r3, #20]
 800b81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b822:	2b80      	cmp	r3, #128	; 0x80
 800b824:	bf0c      	ite	eq
 800b826:	2301      	moveq	r3, #1
 800b828:	2300      	movne	r3, #0
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b834:	b2db      	uxtb	r3, r3
 800b836:	2b21      	cmp	r3, #33	; 0x21
 800b838:	d108      	bne.n	800b84c <UART_DMAError+0x46>
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d005      	beq.n	800b84c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2200      	movs	r2, #0
 800b844:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b846:	68b8      	ldr	r0, [r7, #8]
 800b848:	f000 f8c2 	bl	800b9d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b856:	2b40      	cmp	r3, #64	; 0x40
 800b858:	bf0c      	ite	eq
 800b85a:	2301      	moveq	r3, #1
 800b85c:	2300      	movne	r3, #0
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	2b22      	cmp	r3, #34	; 0x22
 800b86c:	d108      	bne.n	800b880 <UART_DMAError+0x7a>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d005      	beq.n	800b880 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	2200      	movs	r2, #0
 800b878:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b87a:	68b8      	ldr	r0, [r7, #8]
 800b87c:	f000 f8d0 	bl	800ba20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b884:	f043 0210 	orr.w	r2, r3, #16
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b88c:	68b8      	ldr	r0, [r7, #8]
 800b88e:	f7ff fe9b 	bl	800b5c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b892:	bf00      	nop
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
	...

0800b89c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b098      	sub	sp, #96	; 0x60
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	88fa      	ldrh	r2, [r7, #6]
 800b8b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2222      	movs	r2, #34	; 0x22
 800b8c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c8:	4a3e      	ldr	r2, [pc, #248]	; (800b9c4 <UART_Start_Receive_DMA+0x128>)
 800b8ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d0:	4a3d      	ldr	r2, [pc, #244]	; (800b9c8 <UART_Start_Receive_DMA+0x12c>)
 800b8d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d8:	4a3c      	ldr	r2, [pc, #240]	; (800b9cc <UART_Start_Receive_DMA+0x130>)
 800b8da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b8e4:	f107 0308 	add.w	r3, r7, #8
 800b8e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	88fb      	ldrh	r3, [r7, #6]
 800b8fc:	f7fa fe00 	bl	8006500 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b900:	2300      	movs	r3, #0
 800b902:	613b      	str	r3, [r7, #16]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	613b      	str	r3, [r7, #16]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	613b      	str	r3, [r7, #16]
 800b914:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2200      	movs	r2, #0
 800b91a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	330c      	adds	r3, #12
 800b924:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b928:	e853 3f00 	ldrex	r3, [r3]
 800b92c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b92e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b934:	65bb      	str	r3, [r7, #88]	; 0x58
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	330c      	adds	r3, #12
 800b93c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b93e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b940:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b942:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b944:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b946:	e841 2300 	strex	r3, r2, [r1]
 800b94a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1e5      	bne.n	800b91e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	3314      	adds	r3, #20
 800b958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95c:	e853 3f00 	ldrex	r3, [r3]
 800b960:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	f043 0301 	orr.w	r3, r3, #1
 800b968:	657b      	str	r3, [r7, #84]	; 0x54
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3314      	adds	r3, #20
 800b970:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b972:	63ba      	str	r2, [r7, #56]	; 0x38
 800b974:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b976:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b97a:	e841 2300 	strex	r3, r2, [r1]
 800b97e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1e5      	bne.n	800b952 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	3314      	adds	r3, #20
 800b98c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	e853 3f00 	ldrex	r3, [r3]
 800b994:	617b      	str	r3, [r7, #20]
   return(result);
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b99c:	653b      	str	r3, [r7, #80]	; 0x50
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3314      	adds	r3, #20
 800b9a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9a6:	627a      	str	r2, [r7, #36]	; 0x24
 800b9a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9aa:	6a39      	ldr	r1, [r7, #32]
 800b9ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ae:	e841 2300 	strex	r3, r2, [r1]
 800b9b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1e5      	bne.n	800b986 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3760      	adds	r7, #96	; 0x60
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	0800b6ab 	.word	0x0800b6ab
 800b9c8:	0800b7d1 	.word	0x0800b7d1
 800b9cc:	0800b807 	.word	0x0800b807

0800b9d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b089      	sub	sp, #36	; 0x24
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	330c      	adds	r3, #12
 800b9de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	e853 3f00 	ldrex	r3, [r3]
 800b9e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b9ee:	61fb      	str	r3, [r7, #28]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	330c      	adds	r3, #12
 800b9f6:	69fa      	ldr	r2, [r7, #28]
 800b9f8:	61ba      	str	r2, [r7, #24]
 800b9fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9fc:	6979      	ldr	r1, [r7, #20]
 800b9fe:	69ba      	ldr	r2, [r7, #24]
 800ba00:	e841 2300 	strex	r3, r2, [r1]
 800ba04:	613b      	str	r3, [r7, #16]
   return(result);
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d1e5      	bne.n	800b9d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2220      	movs	r2, #32
 800ba10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ba14:	bf00      	nop
 800ba16:	3724      	adds	r7, #36	; 0x24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b095      	sub	sp, #84	; 0x54
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	330c      	adds	r3, #12
 800ba2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba32:	e853 3f00 	ldrex	r3, [r3]
 800ba36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ba38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	330c      	adds	r3, #12
 800ba46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba48:	643a      	str	r2, [r7, #64]	; 0x40
 800ba4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba50:	e841 2300 	strex	r3, r2, [r1]
 800ba54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1e5      	bne.n	800ba28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	3314      	adds	r3, #20
 800ba62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	e853 3f00 	ldrex	r3, [r3]
 800ba6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	f023 0301 	bic.w	r3, r3, #1
 800ba72:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	3314      	adds	r3, #20
 800ba7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba84:	e841 2300 	strex	r3, r2, [r1]
 800ba88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d1e5      	bne.n	800ba5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d119      	bne.n	800bacc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	330c      	adds	r3, #12
 800ba9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	e853 3f00 	ldrex	r3, [r3]
 800baa6:	60bb      	str	r3, [r7, #8]
   return(result);
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f023 0310 	bic.w	r3, r3, #16
 800baae:	647b      	str	r3, [r7, #68]	; 0x44
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	330c      	adds	r3, #12
 800bab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bab8:	61ba      	str	r2, [r7, #24]
 800baba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800babc:	6979      	ldr	r1, [r7, #20]
 800babe:	69ba      	ldr	r2, [r7, #24]
 800bac0:	e841 2300 	strex	r3, r2, [r1]
 800bac4:	613b      	str	r3, [r7, #16]
   return(result);
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1e5      	bne.n	800ba98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2220      	movs	r2, #32
 800bad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bada:	bf00      	nop
 800badc:	3754      	adds	r7, #84	; 0x54
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr

0800bae6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b084      	sub	sp, #16
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2200      	movs	r2, #0
 800baf8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2200      	movs	r2, #0
 800bafe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	f7ff fd61 	bl	800b5c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb06:	bf00      	nop
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b085      	sub	sp, #20
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b21      	cmp	r3, #33	; 0x21
 800bb20:	d13e      	bne.n	800bba0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb2a:	d114      	bne.n	800bb56 <UART_Transmit_IT+0x48>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d110      	bne.n	800bb56 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a1b      	ldr	r3, [r3, #32]
 800bb38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	881b      	ldrh	r3, [r3, #0]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	1c9a      	adds	r2, r3, #2
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	621a      	str	r2, [r3, #32]
 800bb54:	e008      	b.n	800bb68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	1c59      	adds	r1, r3, #1
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	6211      	str	r1, [r2, #32]
 800bb60:	781a      	ldrb	r2, [r3, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	4619      	mov	r1, r3
 800bb76:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d10f      	bne.n	800bb9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68da      	ldr	r2, [r3, #12]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68da      	ldr	r2, [r3, #12]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	e000      	b.n	800bba2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bba0:	2302      	movs	r3, #2
  }
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b082      	sub	sp, #8
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68da      	ldr	r2, [r3, #12]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2220      	movs	r2, #32
 800bbca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f7ff fcd2 	bl	800b578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b08c      	sub	sp, #48	; 0x30
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	2b22      	cmp	r3, #34	; 0x22
 800bbf0:	f040 80ab 	bne.w	800bd4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbfc:	d117      	bne.n	800bc2e <UART_Receive_IT+0x50>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d113      	bne.n	800bc2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bc06:	2300      	movs	r3, #0
 800bc08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc1c:	b29a      	uxth	r2, r3
 800bc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc26:	1c9a      	adds	r2, r3, #2
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	629a      	str	r2, [r3, #40]	; 0x28
 800bc2c:	e026      	b.n	800bc7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bc34:	2300      	movs	r3, #0
 800bc36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc40:	d007      	beq.n	800bc52 <UART_Receive_IT+0x74>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10a      	bne.n	800bc60 <UART_Receive_IT+0x82>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	691b      	ldr	r3, [r3, #16]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d106      	bne.n	800bc60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	b2da      	uxtb	r2, r3
 800bc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5c:	701a      	strb	r2, [r3, #0]
 800bc5e:	e008      	b.n	800bc72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc6c:	b2da      	uxtb	r2, r3
 800bc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc76:	1c5a      	adds	r2, r3, #1
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	3b01      	subs	r3, #1
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d15a      	bne.n	800bd46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	68da      	ldr	r2, [r3, #12]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f022 0220 	bic.w	r2, r2, #32
 800bc9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68da      	ldr	r2, [r3, #12]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bcae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	695a      	ldr	r2, [r3, #20]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f022 0201 	bic.w	r2, r2, #1
 800bcbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2220      	movs	r2, #32
 800bcc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d135      	bne.n	800bd3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	330c      	adds	r3, #12
 800bcdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	e853 3f00 	ldrex	r3, [r3]
 800bce4:	613b      	str	r3, [r7, #16]
   return(result);
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	f023 0310 	bic.w	r3, r3, #16
 800bcec:	627b      	str	r3, [r7, #36]	; 0x24
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	330c      	adds	r3, #12
 800bcf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcf6:	623a      	str	r2, [r7, #32]
 800bcf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfa:	69f9      	ldr	r1, [r7, #28]
 800bcfc:	6a3a      	ldr	r2, [r7, #32]
 800bcfe:	e841 2300 	strex	r3, r2, [r1]
 800bd02:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1e5      	bne.n	800bcd6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 0310 	and.w	r3, r3, #16
 800bd14:	2b10      	cmp	r3, #16
 800bd16:	d10a      	bne.n	800bd2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bd18:	2300      	movs	r3, #0
 800bd1a:	60fb      	str	r3, [r7, #12]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	60fb      	str	r3, [r7, #12]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	60fb      	str	r3, [r7, #12]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bd32:	4619      	mov	r1, r3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7ff fc51 	bl	800b5dc <HAL_UARTEx_RxEventCallback>
 800bd3a:	e002      	b.n	800bd42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7ff fc2f 	bl	800b5a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bd42:	2300      	movs	r3, #0
 800bd44:	e002      	b.n	800bd4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	e000      	b.n	800bd4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bd4a:	2302      	movs	r3, #2
  }
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3730      	adds	r7, #48	; 0x30
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd58:	b09f      	sub	sp, #124	; 0x7c
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bd68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd6a:	68d9      	ldr	r1, [r3, #12]
 800bd6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	ea40 0301 	orr.w	r3, r0, r1
 800bd74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bd76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd78:	689a      	ldr	r2, [r3, #8]
 800bd7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd7c:	691b      	ldr	r3, [r3, #16]
 800bd7e:	431a      	orrs	r2, r3
 800bd80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd82:	695b      	ldr	r3, [r3, #20]
 800bd84:	431a      	orrs	r2, r3
 800bd86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd88:	69db      	ldr	r3, [r3, #28]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800bd8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bd98:	f021 010c 	bic.w	r1, r1, #12
 800bd9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bda2:	430b      	orrs	r3, r1
 800bda4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bda6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	695b      	ldr	r3, [r3, #20]
 800bdac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bdb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdb2:	6999      	ldr	r1, [r3, #24]
 800bdb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	ea40 0301 	orr.w	r3, r0, r1
 800bdbc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bdbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	4bc5      	ldr	r3, [pc, #788]	; (800c0d8 <UART_SetConfig+0x384>)
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d004      	beq.n	800bdd2 <UART_SetConfig+0x7e>
 800bdc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	4bc3      	ldr	r3, [pc, #780]	; (800c0dc <UART_SetConfig+0x388>)
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d103      	bne.n	800bdda <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bdd2:	f7fe f979 	bl	800a0c8 <HAL_RCC_GetPCLK2Freq>
 800bdd6:	6778      	str	r0, [r7, #116]	; 0x74
 800bdd8:	e002      	b.n	800bde0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bdda:	f7fe f961 	bl	800a0a0 <HAL_RCC_GetPCLK1Freq>
 800bdde:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bde0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bde2:	69db      	ldr	r3, [r3, #28]
 800bde4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bde8:	f040 80b6 	bne.w	800bf58 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bdec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdee:	461c      	mov	r4, r3
 800bdf0:	f04f 0500 	mov.w	r5, #0
 800bdf4:	4622      	mov	r2, r4
 800bdf6:	462b      	mov	r3, r5
 800bdf8:	1891      	adds	r1, r2, r2
 800bdfa:	6439      	str	r1, [r7, #64]	; 0x40
 800bdfc:	415b      	adcs	r3, r3
 800bdfe:	647b      	str	r3, [r7, #68]	; 0x44
 800be00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800be04:	1912      	adds	r2, r2, r4
 800be06:	eb45 0303 	adc.w	r3, r5, r3
 800be0a:	f04f 0000 	mov.w	r0, #0
 800be0e:	f04f 0100 	mov.w	r1, #0
 800be12:	00d9      	lsls	r1, r3, #3
 800be14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800be18:	00d0      	lsls	r0, r2, #3
 800be1a:	4602      	mov	r2, r0
 800be1c:	460b      	mov	r3, r1
 800be1e:	1911      	adds	r1, r2, r4
 800be20:	6639      	str	r1, [r7, #96]	; 0x60
 800be22:	416b      	adcs	r3, r5
 800be24:	667b      	str	r3, [r7, #100]	; 0x64
 800be26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	461a      	mov	r2, r3
 800be2c:	f04f 0300 	mov.w	r3, #0
 800be30:	1891      	adds	r1, r2, r2
 800be32:	63b9      	str	r1, [r7, #56]	; 0x38
 800be34:	415b      	adcs	r3, r3
 800be36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800be3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800be40:	f7f4 ff3a 	bl	8000cb8 <__aeabi_uldivmod>
 800be44:	4602      	mov	r2, r0
 800be46:	460b      	mov	r3, r1
 800be48:	4ba5      	ldr	r3, [pc, #660]	; (800c0e0 <UART_SetConfig+0x38c>)
 800be4a:	fba3 2302 	umull	r2, r3, r3, r2
 800be4e:	095b      	lsrs	r3, r3, #5
 800be50:	011e      	lsls	r6, r3, #4
 800be52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be54:	461c      	mov	r4, r3
 800be56:	f04f 0500 	mov.w	r5, #0
 800be5a:	4622      	mov	r2, r4
 800be5c:	462b      	mov	r3, r5
 800be5e:	1891      	adds	r1, r2, r2
 800be60:	6339      	str	r1, [r7, #48]	; 0x30
 800be62:	415b      	adcs	r3, r3
 800be64:	637b      	str	r3, [r7, #52]	; 0x34
 800be66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800be6a:	1912      	adds	r2, r2, r4
 800be6c:	eb45 0303 	adc.w	r3, r5, r3
 800be70:	f04f 0000 	mov.w	r0, #0
 800be74:	f04f 0100 	mov.w	r1, #0
 800be78:	00d9      	lsls	r1, r3, #3
 800be7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800be7e:	00d0      	lsls	r0, r2, #3
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	1911      	adds	r1, r2, r4
 800be86:	65b9      	str	r1, [r7, #88]	; 0x58
 800be88:	416b      	adcs	r3, r5
 800be8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	461a      	mov	r2, r3
 800be92:	f04f 0300 	mov.w	r3, #0
 800be96:	1891      	adds	r1, r2, r2
 800be98:	62b9      	str	r1, [r7, #40]	; 0x28
 800be9a:	415b      	adcs	r3, r3
 800be9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bea2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800bea6:	f7f4 ff07 	bl	8000cb8 <__aeabi_uldivmod>
 800beaa:	4602      	mov	r2, r0
 800beac:	460b      	mov	r3, r1
 800beae:	4b8c      	ldr	r3, [pc, #560]	; (800c0e0 <UART_SetConfig+0x38c>)
 800beb0:	fba3 1302 	umull	r1, r3, r3, r2
 800beb4:	095b      	lsrs	r3, r3, #5
 800beb6:	2164      	movs	r1, #100	; 0x64
 800beb8:	fb01 f303 	mul.w	r3, r1, r3
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	00db      	lsls	r3, r3, #3
 800bec0:	3332      	adds	r3, #50	; 0x32
 800bec2:	4a87      	ldr	r2, [pc, #540]	; (800c0e0 <UART_SetConfig+0x38c>)
 800bec4:	fba2 2303 	umull	r2, r3, r2, r3
 800bec8:	095b      	lsrs	r3, r3, #5
 800beca:	005b      	lsls	r3, r3, #1
 800becc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bed0:	441e      	add	r6, r3
 800bed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bed4:	4618      	mov	r0, r3
 800bed6:	f04f 0100 	mov.w	r1, #0
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	1894      	adds	r4, r2, r2
 800bee0:	623c      	str	r4, [r7, #32]
 800bee2:	415b      	adcs	r3, r3
 800bee4:	627b      	str	r3, [r7, #36]	; 0x24
 800bee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800beea:	1812      	adds	r2, r2, r0
 800beec:	eb41 0303 	adc.w	r3, r1, r3
 800bef0:	f04f 0400 	mov.w	r4, #0
 800bef4:	f04f 0500 	mov.w	r5, #0
 800bef8:	00dd      	lsls	r5, r3, #3
 800befa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800befe:	00d4      	lsls	r4, r2, #3
 800bf00:	4622      	mov	r2, r4
 800bf02:	462b      	mov	r3, r5
 800bf04:	1814      	adds	r4, r2, r0
 800bf06:	653c      	str	r4, [r7, #80]	; 0x50
 800bf08:	414b      	adcs	r3, r1
 800bf0a:	657b      	str	r3, [r7, #84]	; 0x54
 800bf0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	461a      	mov	r2, r3
 800bf12:	f04f 0300 	mov.w	r3, #0
 800bf16:	1891      	adds	r1, r2, r2
 800bf18:	61b9      	str	r1, [r7, #24]
 800bf1a:	415b      	adcs	r3, r3
 800bf1c:	61fb      	str	r3, [r7, #28]
 800bf1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bf22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800bf26:	f7f4 fec7 	bl	8000cb8 <__aeabi_uldivmod>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4b6c      	ldr	r3, [pc, #432]	; (800c0e0 <UART_SetConfig+0x38c>)
 800bf30:	fba3 1302 	umull	r1, r3, r3, r2
 800bf34:	095b      	lsrs	r3, r3, #5
 800bf36:	2164      	movs	r1, #100	; 0x64
 800bf38:	fb01 f303 	mul.w	r3, r1, r3
 800bf3c:	1ad3      	subs	r3, r2, r3
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	3332      	adds	r3, #50	; 0x32
 800bf42:	4a67      	ldr	r2, [pc, #412]	; (800c0e0 <UART_SetConfig+0x38c>)
 800bf44:	fba2 2303 	umull	r2, r3, r2, r3
 800bf48:	095b      	lsrs	r3, r3, #5
 800bf4a:	f003 0207 	and.w	r2, r3, #7
 800bf4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4432      	add	r2, r6
 800bf54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bf56:	e0b9      	b.n	800c0cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf5a:	461c      	mov	r4, r3
 800bf5c:	f04f 0500 	mov.w	r5, #0
 800bf60:	4622      	mov	r2, r4
 800bf62:	462b      	mov	r3, r5
 800bf64:	1891      	adds	r1, r2, r2
 800bf66:	6139      	str	r1, [r7, #16]
 800bf68:	415b      	adcs	r3, r3
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bf70:	1912      	adds	r2, r2, r4
 800bf72:	eb45 0303 	adc.w	r3, r5, r3
 800bf76:	f04f 0000 	mov.w	r0, #0
 800bf7a:	f04f 0100 	mov.w	r1, #0
 800bf7e:	00d9      	lsls	r1, r3, #3
 800bf80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bf84:	00d0      	lsls	r0, r2, #3
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	eb12 0804 	adds.w	r8, r2, r4
 800bf8e:	eb43 0905 	adc.w	r9, r3, r5
 800bf92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f04f 0100 	mov.w	r1, #0
 800bf9c:	f04f 0200 	mov.w	r2, #0
 800bfa0:	f04f 0300 	mov.w	r3, #0
 800bfa4:	008b      	lsls	r3, r1, #2
 800bfa6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bfaa:	0082      	lsls	r2, r0, #2
 800bfac:	4640      	mov	r0, r8
 800bfae:	4649      	mov	r1, r9
 800bfb0:	f7f4 fe82 	bl	8000cb8 <__aeabi_uldivmod>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	4b49      	ldr	r3, [pc, #292]	; (800c0e0 <UART_SetConfig+0x38c>)
 800bfba:	fba3 2302 	umull	r2, r3, r3, r2
 800bfbe:	095b      	lsrs	r3, r3, #5
 800bfc0:	011e      	lsls	r6, r3, #4
 800bfc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f04f 0100 	mov.w	r1, #0
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	1894      	adds	r4, r2, r2
 800bfd0:	60bc      	str	r4, [r7, #8]
 800bfd2:	415b      	adcs	r3, r3
 800bfd4:	60fb      	str	r3, [r7, #12]
 800bfd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bfda:	1812      	adds	r2, r2, r0
 800bfdc:	eb41 0303 	adc.w	r3, r1, r3
 800bfe0:	f04f 0400 	mov.w	r4, #0
 800bfe4:	f04f 0500 	mov.w	r5, #0
 800bfe8:	00dd      	lsls	r5, r3, #3
 800bfea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bfee:	00d4      	lsls	r4, r2, #3
 800bff0:	4622      	mov	r2, r4
 800bff2:	462b      	mov	r3, r5
 800bff4:	1814      	adds	r4, r2, r0
 800bff6:	64bc      	str	r4, [r7, #72]	; 0x48
 800bff8:	414b      	adcs	r3, r1
 800bffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	4618      	mov	r0, r3
 800c002:	f04f 0100 	mov.w	r1, #0
 800c006:	f04f 0200 	mov.w	r2, #0
 800c00a:	f04f 0300 	mov.w	r3, #0
 800c00e:	008b      	lsls	r3, r1, #2
 800c010:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c014:	0082      	lsls	r2, r0, #2
 800c016:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c01a:	f7f4 fe4d 	bl	8000cb8 <__aeabi_uldivmod>
 800c01e:	4602      	mov	r2, r0
 800c020:	460b      	mov	r3, r1
 800c022:	4b2f      	ldr	r3, [pc, #188]	; (800c0e0 <UART_SetConfig+0x38c>)
 800c024:	fba3 1302 	umull	r1, r3, r3, r2
 800c028:	095b      	lsrs	r3, r3, #5
 800c02a:	2164      	movs	r1, #100	; 0x64
 800c02c:	fb01 f303 	mul.w	r3, r1, r3
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	011b      	lsls	r3, r3, #4
 800c034:	3332      	adds	r3, #50	; 0x32
 800c036:	4a2a      	ldr	r2, [pc, #168]	; (800c0e0 <UART_SetConfig+0x38c>)
 800c038:	fba2 2303 	umull	r2, r3, r2, r3
 800c03c:	095b      	lsrs	r3, r3, #5
 800c03e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c042:	441e      	add	r6, r3
 800c044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c046:	4618      	mov	r0, r3
 800c048:	f04f 0100 	mov.w	r1, #0
 800c04c:	4602      	mov	r2, r0
 800c04e:	460b      	mov	r3, r1
 800c050:	1894      	adds	r4, r2, r2
 800c052:	603c      	str	r4, [r7, #0]
 800c054:	415b      	adcs	r3, r3
 800c056:	607b      	str	r3, [r7, #4]
 800c058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c05c:	1812      	adds	r2, r2, r0
 800c05e:	eb41 0303 	adc.w	r3, r1, r3
 800c062:	f04f 0400 	mov.w	r4, #0
 800c066:	f04f 0500 	mov.w	r5, #0
 800c06a:	00dd      	lsls	r5, r3, #3
 800c06c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c070:	00d4      	lsls	r4, r2, #3
 800c072:	4622      	mov	r2, r4
 800c074:	462b      	mov	r3, r5
 800c076:	eb12 0a00 	adds.w	sl, r2, r0
 800c07a:	eb43 0b01 	adc.w	fp, r3, r1
 800c07e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	4618      	mov	r0, r3
 800c084:	f04f 0100 	mov.w	r1, #0
 800c088:	f04f 0200 	mov.w	r2, #0
 800c08c:	f04f 0300 	mov.w	r3, #0
 800c090:	008b      	lsls	r3, r1, #2
 800c092:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c096:	0082      	lsls	r2, r0, #2
 800c098:	4650      	mov	r0, sl
 800c09a:	4659      	mov	r1, fp
 800c09c:	f7f4 fe0c 	bl	8000cb8 <__aeabi_uldivmod>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	4b0e      	ldr	r3, [pc, #56]	; (800c0e0 <UART_SetConfig+0x38c>)
 800c0a6:	fba3 1302 	umull	r1, r3, r3, r2
 800c0aa:	095b      	lsrs	r3, r3, #5
 800c0ac:	2164      	movs	r1, #100	; 0x64
 800c0ae:	fb01 f303 	mul.w	r3, r1, r3
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	011b      	lsls	r3, r3, #4
 800c0b6:	3332      	adds	r3, #50	; 0x32
 800c0b8:	4a09      	ldr	r2, [pc, #36]	; (800c0e0 <UART_SetConfig+0x38c>)
 800c0ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c0be:	095b      	lsrs	r3, r3, #5
 800c0c0:	f003 020f 	and.w	r2, r3, #15
 800c0c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4432      	add	r2, r6
 800c0ca:	609a      	str	r2, [r3, #8]
}
 800c0cc:	bf00      	nop
 800c0ce:	377c      	adds	r7, #124	; 0x7c
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d6:	bf00      	nop
 800c0d8:	40011000 	.word	0x40011000
 800c0dc:	40011400 	.word	0x40011400
 800c0e0:	51eb851f 	.word	0x51eb851f

0800c0e4 <atof>:
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	f001 bd03 	b.w	800daf0 <strtod>

0800c0ea <atoi>:
 800c0ea:	220a      	movs	r2, #10
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	f001 bded 	b.w	800dccc <strtol>
	...

0800c0f4 <__errno>:
 800c0f4:	4b01      	ldr	r3, [pc, #4]	; (800c0fc <__errno+0x8>)
 800c0f6:	6818      	ldr	r0, [r3, #0]
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	20000040 	.word	0x20000040

0800c100 <__libc_init_array>:
 800c100:	b570      	push	{r4, r5, r6, lr}
 800c102:	4d0d      	ldr	r5, [pc, #52]	; (800c138 <__libc_init_array+0x38>)
 800c104:	4c0d      	ldr	r4, [pc, #52]	; (800c13c <__libc_init_array+0x3c>)
 800c106:	1b64      	subs	r4, r4, r5
 800c108:	10a4      	asrs	r4, r4, #2
 800c10a:	2600      	movs	r6, #0
 800c10c:	42a6      	cmp	r6, r4
 800c10e:	d109      	bne.n	800c124 <__libc_init_array+0x24>
 800c110:	4d0b      	ldr	r5, [pc, #44]	; (800c140 <__libc_init_array+0x40>)
 800c112:	4c0c      	ldr	r4, [pc, #48]	; (800c144 <__libc_init_array+0x44>)
 800c114:	f004 fcb6 	bl	8010a84 <_init>
 800c118:	1b64      	subs	r4, r4, r5
 800c11a:	10a4      	asrs	r4, r4, #2
 800c11c:	2600      	movs	r6, #0
 800c11e:	42a6      	cmp	r6, r4
 800c120:	d105      	bne.n	800c12e <__libc_init_array+0x2e>
 800c122:	bd70      	pop	{r4, r5, r6, pc}
 800c124:	f855 3b04 	ldr.w	r3, [r5], #4
 800c128:	4798      	blx	r3
 800c12a:	3601      	adds	r6, #1
 800c12c:	e7ee      	b.n	800c10c <__libc_init_array+0xc>
 800c12e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c132:	4798      	blx	r3
 800c134:	3601      	adds	r6, #1
 800c136:	e7f2      	b.n	800c11e <__libc_init_array+0x1e>
 800c138:	08024628 	.word	0x08024628
 800c13c:	08024628 	.word	0x08024628
 800c140:	08024628 	.word	0x08024628
 800c144:	0802462c 	.word	0x0802462c

0800c148 <memset>:
 800c148:	4402      	add	r2, r0
 800c14a:	4603      	mov	r3, r0
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d100      	bne.n	800c152 <memset+0xa>
 800c150:	4770      	bx	lr
 800c152:	f803 1b01 	strb.w	r1, [r3], #1
 800c156:	e7f9      	b.n	800c14c <memset+0x4>

0800c158 <__cvt>:
 800c158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c15c:	ec55 4b10 	vmov	r4, r5, d0
 800c160:	2d00      	cmp	r5, #0
 800c162:	460e      	mov	r6, r1
 800c164:	4619      	mov	r1, r3
 800c166:	462b      	mov	r3, r5
 800c168:	bfbb      	ittet	lt
 800c16a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c16e:	461d      	movlt	r5, r3
 800c170:	2300      	movge	r3, #0
 800c172:	232d      	movlt	r3, #45	; 0x2d
 800c174:	700b      	strb	r3, [r1, #0]
 800c176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c178:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c17c:	4691      	mov	r9, r2
 800c17e:	f023 0820 	bic.w	r8, r3, #32
 800c182:	bfbc      	itt	lt
 800c184:	4622      	movlt	r2, r4
 800c186:	4614      	movlt	r4, r2
 800c188:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c18c:	d005      	beq.n	800c19a <__cvt+0x42>
 800c18e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c192:	d100      	bne.n	800c196 <__cvt+0x3e>
 800c194:	3601      	adds	r6, #1
 800c196:	2102      	movs	r1, #2
 800c198:	e000      	b.n	800c19c <__cvt+0x44>
 800c19a:	2103      	movs	r1, #3
 800c19c:	ab03      	add	r3, sp, #12
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	ab02      	add	r3, sp, #8
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	ec45 4b10 	vmov	d0, r4, r5
 800c1a8:	4653      	mov	r3, sl
 800c1aa:	4632      	mov	r2, r6
 800c1ac:	f001 fe44 	bl	800de38 <_dtoa_r>
 800c1b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c1b4:	4607      	mov	r7, r0
 800c1b6:	d102      	bne.n	800c1be <__cvt+0x66>
 800c1b8:	f019 0f01 	tst.w	r9, #1
 800c1bc:	d022      	beq.n	800c204 <__cvt+0xac>
 800c1be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c1c2:	eb07 0906 	add.w	r9, r7, r6
 800c1c6:	d110      	bne.n	800c1ea <__cvt+0x92>
 800c1c8:	783b      	ldrb	r3, [r7, #0]
 800c1ca:	2b30      	cmp	r3, #48	; 0x30
 800c1cc:	d10a      	bne.n	800c1e4 <__cvt+0x8c>
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	f7f4 fc8f 	bl	8000af8 <__aeabi_dcmpeq>
 800c1da:	b918      	cbnz	r0, 800c1e4 <__cvt+0x8c>
 800c1dc:	f1c6 0601 	rsb	r6, r6, #1
 800c1e0:	f8ca 6000 	str.w	r6, [sl]
 800c1e4:	f8da 3000 	ldr.w	r3, [sl]
 800c1e8:	4499      	add	r9, r3
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	f7f4 fc81 	bl	8000af8 <__aeabi_dcmpeq>
 800c1f6:	b108      	cbz	r0, 800c1fc <__cvt+0xa4>
 800c1f8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c1fc:	2230      	movs	r2, #48	; 0x30
 800c1fe:	9b03      	ldr	r3, [sp, #12]
 800c200:	454b      	cmp	r3, r9
 800c202:	d307      	bcc.n	800c214 <__cvt+0xbc>
 800c204:	9b03      	ldr	r3, [sp, #12]
 800c206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c208:	1bdb      	subs	r3, r3, r7
 800c20a:	4638      	mov	r0, r7
 800c20c:	6013      	str	r3, [r2, #0]
 800c20e:	b004      	add	sp, #16
 800c210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c214:	1c59      	adds	r1, r3, #1
 800c216:	9103      	str	r1, [sp, #12]
 800c218:	701a      	strb	r2, [r3, #0]
 800c21a:	e7f0      	b.n	800c1fe <__cvt+0xa6>

0800c21c <__exponent>:
 800c21c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c21e:	4603      	mov	r3, r0
 800c220:	2900      	cmp	r1, #0
 800c222:	bfb8      	it	lt
 800c224:	4249      	neglt	r1, r1
 800c226:	f803 2b02 	strb.w	r2, [r3], #2
 800c22a:	bfb4      	ite	lt
 800c22c:	222d      	movlt	r2, #45	; 0x2d
 800c22e:	222b      	movge	r2, #43	; 0x2b
 800c230:	2909      	cmp	r1, #9
 800c232:	7042      	strb	r2, [r0, #1]
 800c234:	dd2a      	ble.n	800c28c <__exponent+0x70>
 800c236:	f10d 0407 	add.w	r4, sp, #7
 800c23a:	46a4      	mov	ip, r4
 800c23c:	270a      	movs	r7, #10
 800c23e:	46a6      	mov	lr, r4
 800c240:	460a      	mov	r2, r1
 800c242:	fb91 f6f7 	sdiv	r6, r1, r7
 800c246:	fb07 1516 	mls	r5, r7, r6, r1
 800c24a:	3530      	adds	r5, #48	; 0x30
 800c24c:	2a63      	cmp	r2, #99	; 0x63
 800c24e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c252:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c256:	4631      	mov	r1, r6
 800c258:	dcf1      	bgt.n	800c23e <__exponent+0x22>
 800c25a:	3130      	adds	r1, #48	; 0x30
 800c25c:	f1ae 0502 	sub.w	r5, lr, #2
 800c260:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c264:	1c44      	adds	r4, r0, #1
 800c266:	4629      	mov	r1, r5
 800c268:	4561      	cmp	r1, ip
 800c26a:	d30a      	bcc.n	800c282 <__exponent+0x66>
 800c26c:	f10d 0209 	add.w	r2, sp, #9
 800c270:	eba2 020e 	sub.w	r2, r2, lr
 800c274:	4565      	cmp	r5, ip
 800c276:	bf88      	it	hi
 800c278:	2200      	movhi	r2, #0
 800c27a:	4413      	add	r3, r2
 800c27c:	1a18      	subs	r0, r3, r0
 800c27e:	b003      	add	sp, #12
 800c280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c282:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c286:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c28a:	e7ed      	b.n	800c268 <__exponent+0x4c>
 800c28c:	2330      	movs	r3, #48	; 0x30
 800c28e:	3130      	adds	r1, #48	; 0x30
 800c290:	7083      	strb	r3, [r0, #2]
 800c292:	70c1      	strb	r1, [r0, #3]
 800c294:	1d03      	adds	r3, r0, #4
 800c296:	e7f1      	b.n	800c27c <__exponent+0x60>

0800c298 <_printf_float>:
 800c298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c29c:	ed2d 8b02 	vpush	{d8}
 800c2a0:	b08d      	sub	sp, #52	; 0x34
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c2a8:	4616      	mov	r6, r2
 800c2aa:	461f      	mov	r7, r3
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	f002 ff31 	bl	800f114 <_localeconv_r>
 800c2b2:	f8d0 a000 	ldr.w	sl, [r0]
 800c2b6:	4650      	mov	r0, sl
 800c2b8:	f7f3 ff9c 	bl	80001f4 <strlen>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	930a      	str	r3, [sp, #40]	; 0x28
 800c2c0:	6823      	ldr	r3, [r4, #0]
 800c2c2:	9305      	str	r3, [sp, #20]
 800c2c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c2c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c2cc:	3307      	adds	r3, #7
 800c2ce:	f023 0307 	bic.w	r3, r3, #7
 800c2d2:	f103 0208 	add.w	r2, r3, #8
 800c2d6:	f8c8 2000 	str.w	r2, [r8]
 800c2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c2e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c2e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c2ea:	9307      	str	r3, [sp, #28]
 800c2ec:	f8cd 8018 	str.w	r8, [sp, #24]
 800c2f0:	ee08 0a10 	vmov	s16, r0
 800c2f4:	4b9f      	ldr	r3, [pc, #636]	; (800c574 <_printf_float+0x2dc>)
 800c2f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c2fe:	f7f4 fc2d 	bl	8000b5c <__aeabi_dcmpun>
 800c302:	bb88      	cbnz	r0, 800c368 <_printf_float+0xd0>
 800c304:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c308:	4b9a      	ldr	r3, [pc, #616]	; (800c574 <_printf_float+0x2dc>)
 800c30a:	f04f 32ff 	mov.w	r2, #4294967295
 800c30e:	f7f4 fc07 	bl	8000b20 <__aeabi_dcmple>
 800c312:	bb48      	cbnz	r0, 800c368 <_printf_float+0xd0>
 800c314:	2200      	movs	r2, #0
 800c316:	2300      	movs	r3, #0
 800c318:	4640      	mov	r0, r8
 800c31a:	4649      	mov	r1, r9
 800c31c:	f7f4 fbf6 	bl	8000b0c <__aeabi_dcmplt>
 800c320:	b110      	cbz	r0, 800c328 <_printf_float+0x90>
 800c322:	232d      	movs	r3, #45	; 0x2d
 800c324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c328:	4b93      	ldr	r3, [pc, #588]	; (800c578 <_printf_float+0x2e0>)
 800c32a:	4894      	ldr	r0, [pc, #592]	; (800c57c <_printf_float+0x2e4>)
 800c32c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c330:	bf94      	ite	ls
 800c332:	4698      	movls	r8, r3
 800c334:	4680      	movhi	r8, r0
 800c336:	2303      	movs	r3, #3
 800c338:	6123      	str	r3, [r4, #16]
 800c33a:	9b05      	ldr	r3, [sp, #20]
 800c33c:	f023 0204 	bic.w	r2, r3, #4
 800c340:	6022      	str	r2, [r4, #0]
 800c342:	f04f 0900 	mov.w	r9, #0
 800c346:	9700      	str	r7, [sp, #0]
 800c348:	4633      	mov	r3, r6
 800c34a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c34c:	4621      	mov	r1, r4
 800c34e:	4628      	mov	r0, r5
 800c350:	f000 f9d8 	bl	800c704 <_printf_common>
 800c354:	3001      	adds	r0, #1
 800c356:	f040 8090 	bne.w	800c47a <_printf_float+0x1e2>
 800c35a:	f04f 30ff 	mov.w	r0, #4294967295
 800c35e:	b00d      	add	sp, #52	; 0x34
 800c360:	ecbd 8b02 	vpop	{d8}
 800c364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c368:	4642      	mov	r2, r8
 800c36a:	464b      	mov	r3, r9
 800c36c:	4640      	mov	r0, r8
 800c36e:	4649      	mov	r1, r9
 800c370:	f7f4 fbf4 	bl	8000b5c <__aeabi_dcmpun>
 800c374:	b140      	cbz	r0, 800c388 <_printf_float+0xf0>
 800c376:	464b      	mov	r3, r9
 800c378:	2b00      	cmp	r3, #0
 800c37a:	bfbc      	itt	lt
 800c37c:	232d      	movlt	r3, #45	; 0x2d
 800c37e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c382:	487f      	ldr	r0, [pc, #508]	; (800c580 <_printf_float+0x2e8>)
 800c384:	4b7f      	ldr	r3, [pc, #508]	; (800c584 <_printf_float+0x2ec>)
 800c386:	e7d1      	b.n	800c32c <_printf_float+0x94>
 800c388:	6863      	ldr	r3, [r4, #4]
 800c38a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c38e:	9206      	str	r2, [sp, #24]
 800c390:	1c5a      	adds	r2, r3, #1
 800c392:	d13f      	bne.n	800c414 <_printf_float+0x17c>
 800c394:	2306      	movs	r3, #6
 800c396:	6063      	str	r3, [r4, #4]
 800c398:	9b05      	ldr	r3, [sp, #20]
 800c39a:	6861      	ldr	r1, [r4, #4]
 800c39c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	9303      	str	r3, [sp, #12]
 800c3a4:	ab0a      	add	r3, sp, #40	; 0x28
 800c3a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c3aa:	ab09      	add	r3, sp, #36	; 0x24
 800c3ac:	ec49 8b10 	vmov	d0, r8, r9
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	6022      	str	r2, [r4, #0]
 800c3b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	f7ff fecd 	bl	800c158 <__cvt>
 800c3be:	9b06      	ldr	r3, [sp, #24]
 800c3c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3c2:	2b47      	cmp	r3, #71	; 0x47
 800c3c4:	4680      	mov	r8, r0
 800c3c6:	d108      	bne.n	800c3da <_printf_float+0x142>
 800c3c8:	1cc8      	adds	r0, r1, #3
 800c3ca:	db02      	blt.n	800c3d2 <_printf_float+0x13a>
 800c3cc:	6863      	ldr	r3, [r4, #4]
 800c3ce:	4299      	cmp	r1, r3
 800c3d0:	dd41      	ble.n	800c456 <_printf_float+0x1be>
 800c3d2:	f1ab 0b02 	sub.w	fp, fp, #2
 800c3d6:	fa5f fb8b 	uxtb.w	fp, fp
 800c3da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c3de:	d820      	bhi.n	800c422 <_printf_float+0x18a>
 800c3e0:	3901      	subs	r1, #1
 800c3e2:	465a      	mov	r2, fp
 800c3e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c3e8:	9109      	str	r1, [sp, #36]	; 0x24
 800c3ea:	f7ff ff17 	bl	800c21c <__exponent>
 800c3ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3f0:	1813      	adds	r3, r2, r0
 800c3f2:	2a01      	cmp	r2, #1
 800c3f4:	4681      	mov	r9, r0
 800c3f6:	6123      	str	r3, [r4, #16]
 800c3f8:	dc02      	bgt.n	800c400 <_printf_float+0x168>
 800c3fa:	6822      	ldr	r2, [r4, #0]
 800c3fc:	07d2      	lsls	r2, r2, #31
 800c3fe:	d501      	bpl.n	800c404 <_printf_float+0x16c>
 800c400:	3301      	adds	r3, #1
 800c402:	6123      	str	r3, [r4, #16]
 800c404:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d09c      	beq.n	800c346 <_printf_float+0xae>
 800c40c:	232d      	movs	r3, #45	; 0x2d
 800c40e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c412:	e798      	b.n	800c346 <_printf_float+0xae>
 800c414:	9a06      	ldr	r2, [sp, #24]
 800c416:	2a47      	cmp	r2, #71	; 0x47
 800c418:	d1be      	bne.n	800c398 <_printf_float+0x100>
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1bc      	bne.n	800c398 <_printf_float+0x100>
 800c41e:	2301      	movs	r3, #1
 800c420:	e7b9      	b.n	800c396 <_printf_float+0xfe>
 800c422:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c426:	d118      	bne.n	800c45a <_printf_float+0x1c2>
 800c428:	2900      	cmp	r1, #0
 800c42a:	6863      	ldr	r3, [r4, #4]
 800c42c:	dd0b      	ble.n	800c446 <_printf_float+0x1ae>
 800c42e:	6121      	str	r1, [r4, #16]
 800c430:	b913      	cbnz	r3, 800c438 <_printf_float+0x1a0>
 800c432:	6822      	ldr	r2, [r4, #0]
 800c434:	07d0      	lsls	r0, r2, #31
 800c436:	d502      	bpl.n	800c43e <_printf_float+0x1a6>
 800c438:	3301      	adds	r3, #1
 800c43a:	440b      	add	r3, r1
 800c43c:	6123      	str	r3, [r4, #16]
 800c43e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c440:	f04f 0900 	mov.w	r9, #0
 800c444:	e7de      	b.n	800c404 <_printf_float+0x16c>
 800c446:	b913      	cbnz	r3, 800c44e <_printf_float+0x1b6>
 800c448:	6822      	ldr	r2, [r4, #0]
 800c44a:	07d2      	lsls	r2, r2, #31
 800c44c:	d501      	bpl.n	800c452 <_printf_float+0x1ba>
 800c44e:	3302      	adds	r3, #2
 800c450:	e7f4      	b.n	800c43c <_printf_float+0x1a4>
 800c452:	2301      	movs	r3, #1
 800c454:	e7f2      	b.n	800c43c <_printf_float+0x1a4>
 800c456:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c45a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c45c:	4299      	cmp	r1, r3
 800c45e:	db05      	blt.n	800c46c <_printf_float+0x1d4>
 800c460:	6823      	ldr	r3, [r4, #0]
 800c462:	6121      	str	r1, [r4, #16]
 800c464:	07d8      	lsls	r0, r3, #31
 800c466:	d5ea      	bpl.n	800c43e <_printf_float+0x1a6>
 800c468:	1c4b      	adds	r3, r1, #1
 800c46a:	e7e7      	b.n	800c43c <_printf_float+0x1a4>
 800c46c:	2900      	cmp	r1, #0
 800c46e:	bfd4      	ite	le
 800c470:	f1c1 0202 	rsble	r2, r1, #2
 800c474:	2201      	movgt	r2, #1
 800c476:	4413      	add	r3, r2
 800c478:	e7e0      	b.n	800c43c <_printf_float+0x1a4>
 800c47a:	6823      	ldr	r3, [r4, #0]
 800c47c:	055a      	lsls	r2, r3, #21
 800c47e:	d407      	bmi.n	800c490 <_printf_float+0x1f8>
 800c480:	6923      	ldr	r3, [r4, #16]
 800c482:	4642      	mov	r2, r8
 800c484:	4631      	mov	r1, r6
 800c486:	4628      	mov	r0, r5
 800c488:	47b8      	blx	r7
 800c48a:	3001      	adds	r0, #1
 800c48c:	d12c      	bne.n	800c4e8 <_printf_float+0x250>
 800c48e:	e764      	b.n	800c35a <_printf_float+0xc2>
 800c490:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c494:	f240 80e0 	bls.w	800c658 <_printf_float+0x3c0>
 800c498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c49c:	2200      	movs	r2, #0
 800c49e:	2300      	movs	r3, #0
 800c4a0:	f7f4 fb2a 	bl	8000af8 <__aeabi_dcmpeq>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d034      	beq.n	800c512 <_printf_float+0x27a>
 800c4a8:	4a37      	ldr	r2, [pc, #220]	; (800c588 <_printf_float+0x2f0>)
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	4631      	mov	r1, r6
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	47b8      	blx	r7
 800c4b2:	3001      	adds	r0, #1
 800c4b4:	f43f af51 	beq.w	800c35a <_printf_float+0xc2>
 800c4b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	db02      	blt.n	800c4c6 <_printf_float+0x22e>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	07d8      	lsls	r0, r3, #31
 800c4c4:	d510      	bpl.n	800c4e8 <_printf_float+0x250>
 800c4c6:	ee18 3a10 	vmov	r3, s16
 800c4ca:	4652      	mov	r2, sl
 800c4cc:	4631      	mov	r1, r6
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	47b8      	blx	r7
 800c4d2:	3001      	adds	r0, #1
 800c4d4:	f43f af41 	beq.w	800c35a <_printf_float+0xc2>
 800c4d8:	f04f 0800 	mov.w	r8, #0
 800c4dc:	f104 091a 	add.w	r9, r4, #26
 800c4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	4543      	cmp	r3, r8
 800c4e6:	dc09      	bgt.n	800c4fc <_printf_float+0x264>
 800c4e8:	6823      	ldr	r3, [r4, #0]
 800c4ea:	079b      	lsls	r3, r3, #30
 800c4ec:	f100 8105 	bmi.w	800c6fa <_printf_float+0x462>
 800c4f0:	68e0      	ldr	r0, [r4, #12]
 800c4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4f4:	4298      	cmp	r0, r3
 800c4f6:	bfb8      	it	lt
 800c4f8:	4618      	movlt	r0, r3
 800c4fa:	e730      	b.n	800c35e <_printf_float+0xc6>
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	464a      	mov	r2, r9
 800c500:	4631      	mov	r1, r6
 800c502:	4628      	mov	r0, r5
 800c504:	47b8      	blx	r7
 800c506:	3001      	adds	r0, #1
 800c508:	f43f af27 	beq.w	800c35a <_printf_float+0xc2>
 800c50c:	f108 0801 	add.w	r8, r8, #1
 800c510:	e7e6      	b.n	800c4e0 <_printf_float+0x248>
 800c512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c514:	2b00      	cmp	r3, #0
 800c516:	dc39      	bgt.n	800c58c <_printf_float+0x2f4>
 800c518:	4a1b      	ldr	r2, [pc, #108]	; (800c588 <_printf_float+0x2f0>)
 800c51a:	2301      	movs	r3, #1
 800c51c:	4631      	mov	r1, r6
 800c51e:	4628      	mov	r0, r5
 800c520:	47b8      	blx	r7
 800c522:	3001      	adds	r0, #1
 800c524:	f43f af19 	beq.w	800c35a <_printf_float+0xc2>
 800c528:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c52c:	4313      	orrs	r3, r2
 800c52e:	d102      	bne.n	800c536 <_printf_float+0x29e>
 800c530:	6823      	ldr	r3, [r4, #0]
 800c532:	07d9      	lsls	r1, r3, #31
 800c534:	d5d8      	bpl.n	800c4e8 <_printf_float+0x250>
 800c536:	ee18 3a10 	vmov	r3, s16
 800c53a:	4652      	mov	r2, sl
 800c53c:	4631      	mov	r1, r6
 800c53e:	4628      	mov	r0, r5
 800c540:	47b8      	blx	r7
 800c542:	3001      	adds	r0, #1
 800c544:	f43f af09 	beq.w	800c35a <_printf_float+0xc2>
 800c548:	f04f 0900 	mov.w	r9, #0
 800c54c:	f104 0a1a 	add.w	sl, r4, #26
 800c550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c552:	425b      	negs	r3, r3
 800c554:	454b      	cmp	r3, r9
 800c556:	dc01      	bgt.n	800c55c <_printf_float+0x2c4>
 800c558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c55a:	e792      	b.n	800c482 <_printf_float+0x1ea>
 800c55c:	2301      	movs	r3, #1
 800c55e:	4652      	mov	r2, sl
 800c560:	4631      	mov	r1, r6
 800c562:	4628      	mov	r0, r5
 800c564:	47b8      	blx	r7
 800c566:	3001      	adds	r0, #1
 800c568:	f43f aef7 	beq.w	800c35a <_printf_float+0xc2>
 800c56c:	f109 0901 	add.w	r9, r9, #1
 800c570:	e7ee      	b.n	800c550 <_printf_float+0x2b8>
 800c572:	bf00      	nop
 800c574:	7fefffff 	.word	0x7fefffff
 800c578:	08024110 	.word	0x08024110
 800c57c:	08024114 	.word	0x08024114
 800c580:	0802411c 	.word	0x0802411c
 800c584:	08024118 	.word	0x08024118
 800c588:	08024120 	.word	0x08024120
 800c58c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c58e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c590:	429a      	cmp	r2, r3
 800c592:	bfa8      	it	ge
 800c594:	461a      	movge	r2, r3
 800c596:	2a00      	cmp	r2, #0
 800c598:	4691      	mov	r9, r2
 800c59a:	dc37      	bgt.n	800c60c <_printf_float+0x374>
 800c59c:	f04f 0b00 	mov.w	fp, #0
 800c5a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5a4:	f104 021a 	add.w	r2, r4, #26
 800c5a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c5aa:	9305      	str	r3, [sp, #20]
 800c5ac:	eba3 0309 	sub.w	r3, r3, r9
 800c5b0:	455b      	cmp	r3, fp
 800c5b2:	dc33      	bgt.n	800c61c <_printf_float+0x384>
 800c5b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	db3b      	blt.n	800c634 <_printf_float+0x39c>
 800c5bc:	6823      	ldr	r3, [r4, #0]
 800c5be:	07da      	lsls	r2, r3, #31
 800c5c0:	d438      	bmi.n	800c634 <_printf_float+0x39c>
 800c5c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5c4:	9b05      	ldr	r3, [sp, #20]
 800c5c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	eba2 0901 	sub.w	r9, r2, r1
 800c5ce:	4599      	cmp	r9, r3
 800c5d0:	bfa8      	it	ge
 800c5d2:	4699      	movge	r9, r3
 800c5d4:	f1b9 0f00 	cmp.w	r9, #0
 800c5d8:	dc35      	bgt.n	800c646 <_printf_float+0x3ae>
 800c5da:	f04f 0800 	mov.w	r8, #0
 800c5de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5e2:	f104 0a1a 	add.w	sl, r4, #26
 800c5e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5ea:	1a9b      	subs	r3, r3, r2
 800c5ec:	eba3 0309 	sub.w	r3, r3, r9
 800c5f0:	4543      	cmp	r3, r8
 800c5f2:	f77f af79 	ble.w	800c4e8 <_printf_float+0x250>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	4652      	mov	r2, sl
 800c5fa:	4631      	mov	r1, r6
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	47b8      	blx	r7
 800c600:	3001      	adds	r0, #1
 800c602:	f43f aeaa 	beq.w	800c35a <_printf_float+0xc2>
 800c606:	f108 0801 	add.w	r8, r8, #1
 800c60a:	e7ec      	b.n	800c5e6 <_printf_float+0x34e>
 800c60c:	4613      	mov	r3, r2
 800c60e:	4631      	mov	r1, r6
 800c610:	4642      	mov	r2, r8
 800c612:	4628      	mov	r0, r5
 800c614:	47b8      	blx	r7
 800c616:	3001      	adds	r0, #1
 800c618:	d1c0      	bne.n	800c59c <_printf_float+0x304>
 800c61a:	e69e      	b.n	800c35a <_printf_float+0xc2>
 800c61c:	2301      	movs	r3, #1
 800c61e:	4631      	mov	r1, r6
 800c620:	4628      	mov	r0, r5
 800c622:	9205      	str	r2, [sp, #20]
 800c624:	47b8      	blx	r7
 800c626:	3001      	adds	r0, #1
 800c628:	f43f ae97 	beq.w	800c35a <_printf_float+0xc2>
 800c62c:	9a05      	ldr	r2, [sp, #20]
 800c62e:	f10b 0b01 	add.w	fp, fp, #1
 800c632:	e7b9      	b.n	800c5a8 <_printf_float+0x310>
 800c634:	ee18 3a10 	vmov	r3, s16
 800c638:	4652      	mov	r2, sl
 800c63a:	4631      	mov	r1, r6
 800c63c:	4628      	mov	r0, r5
 800c63e:	47b8      	blx	r7
 800c640:	3001      	adds	r0, #1
 800c642:	d1be      	bne.n	800c5c2 <_printf_float+0x32a>
 800c644:	e689      	b.n	800c35a <_printf_float+0xc2>
 800c646:	9a05      	ldr	r2, [sp, #20]
 800c648:	464b      	mov	r3, r9
 800c64a:	4442      	add	r2, r8
 800c64c:	4631      	mov	r1, r6
 800c64e:	4628      	mov	r0, r5
 800c650:	47b8      	blx	r7
 800c652:	3001      	adds	r0, #1
 800c654:	d1c1      	bne.n	800c5da <_printf_float+0x342>
 800c656:	e680      	b.n	800c35a <_printf_float+0xc2>
 800c658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c65a:	2a01      	cmp	r2, #1
 800c65c:	dc01      	bgt.n	800c662 <_printf_float+0x3ca>
 800c65e:	07db      	lsls	r3, r3, #31
 800c660:	d538      	bpl.n	800c6d4 <_printf_float+0x43c>
 800c662:	2301      	movs	r3, #1
 800c664:	4642      	mov	r2, r8
 800c666:	4631      	mov	r1, r6
 800c668:	4628      	mov	r0, r5
 800c66a:	47b8      	blx	r7
 800c66c:	3001      	adds	r0, #1
 800c66e:	f43f ae74 	beq.w	800c35a <_printf_float+0xc2>
 800c672:	ee18 3a10 	vmov	r3, s16
 800c676:	4652      	mov	r2, sl
 800c678:	4631      	mov	r1, r6
 800c67a:	4628      	mov	r0, r5
 800c67c:	47b8      	blx	r7
 800c67e:	3001      	adds	r0, #1
 800c680:	f43f ae6b 	beq.w	800c35a <_printf_float+0xc2>
 800c684:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c688:	2200      	movs	r2, #0
 800c68a:	2300      	movs	r3, #0
 800c68c:	f7f4 fa34 	bl	8000af8 <__aeabi_dcmpeq>
 800c690:	b9d8      	cbnz	r0, 800c6ca <_printf_float+0x432>
 800c692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c694:	f108 0201 	add.w	r2, r8, #1
 800c698:	3b01      	subs	r3, #1
 800c69a:	4631      	mov	r1, r6
 800c69c:	4628      	mov	r0, r5
 800c69e:	47b8      	blx	r7
 800c6a0:	3001      	adds	r0, #1
 800c6a2:	d10e      	bne.n	800c6c2 <_printf_float+0x42a>
 800c6a4:	e659      	b.n	800c35a <_printf_float+0xc2>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	4652      	mov	r2, sl
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	47b8      	blx	r7
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	f43f ae52 	beq.w	800c35a <_printf_float+0xc2>
 800c6b6:	f108 0801 	add.w	r8, r8, #1
 800c6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6bc:	3b01      	subs	r3, #1
 800c6be:	4543      	cmp	r3, r8
 800c6c0:	dcf1      	bgt.n	800c6a6 <_printf_float+0x40e>
 800c6c2:	464b      	mov	r3, r9
 800c6c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c6c8:	e6dc      	b.n	800c484 <_printf_float+0x1ec>
 800c6ca:	f04f 0800 	mov.w	r8, #0
 800c6ce:	f104 0a1a 	add.w	sl, r4, #26
 800c6d2:	e7f2      	b.n	800c6ba <_printf_float+0x422>
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	4642      	mov	r2, r8
 800c6d8:	e7df      	b.n	800c69a <_printf_float+0x402>
 800c6da:	2301      	movs	r3, #1
 800c6dc:	464a      	mov	r2, r9
 800c6de:	4631      	mov	r1, r6
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	47b8      	blx	r7
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	f43f ae38 	beq.w	800c35a <_printf_float+0xc2>
 800c6ea:	f108 0801 	add.w	r8, r8, #1
 800c6ee:	68e3      	ldr	r3, [r4, #12]
 800c6f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c6f2:	1a5b      	subs	r3, r3, r1
 800c6f4:	4543      	cmp	r3, r8
 800c6f6:	dcf0      	bgt.n	800c6da <_printf_float+0x442>
 800c6f8:	e6fa      	b.n	800c4f0 <_printf_float+0x258>
 800c6fa:	f04f 0800 	mov.w	r8, #0
 800c6fe:	f104 0919 	add.w	r9, r4, #25
 800c702:	e7f4      	b.n	800c6ee <_printf_float+0x456>

0800c704 <_printf_common>:
 800c704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c708:	4616      	mov	r6, r2
 800c70a:	4699      	mov	r9, r3
 800c70c:	688a      	ldr	r2, [r1, #8]
 800c70e:	690b      	ldr	r3, [r1, #16]
 800c710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c714:	4293      	cmp	r3, r2
 800c716:	bfb8      	it	lt
 800c718:	4613      	movlt	r3, r2
 800c71a:	6033      	str	r3, [r6, #0]
 800c71c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c720:	4607      	mov	r7, r0
 800c722:	460c      	mov	r4, r1
 800c724:	b10a      	cbz	r2, 800c72a <_printf_common+0x26>
 800c726:	3301      	adds	r3, #1
 800c728:	6033      	str	r3, [r6, #0]
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	0699      	lsls	r1, r3, #26
 800c72e:	bf42      	ittt	mi
 800c730:	6833      	ldrmi	r3, [r6, #0]
 800c732:	3302      	addmi	r3, #2
 800c734:	6033      	strmi	r3, [r6, #0]
 800c736:	6825      	ldr	r5, [r4, #0]
 800c738:	f015 0506 	ands.w	r5, r5, #6
 800c73c:	d106      	bne.n	800c74c <_printf_common+0x48>
 800c73e:	f104 0a19 	add.w	sl, r4, #25
 800c742:	68e3      	ldr	r3, [r4, #12]
 800c744:	6832      	ldr	r2, [r6, #0]
 800c746:	1a9b      	subs	r3, r3, r2
 800c748:	42ab      	cmp	r3, r5
 800c74a:	dc26      	bgt.n	800c79a <_printf_common+0x96>
 800c74c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c750:	1e13      	subs	r3, r2, #0
 800c752:	6822      	ldr	r2, [r4, #0]
 800c754:	bf18      	it	ne
 800c756:	2301      	movne	r3, #1
 800c758:	0692      	lsls	r2, r2, #26
 800c75a:	d42b      	bmi.n	800c7b4 <_printf_common+0xb0>
 800c75c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c760:	4649      	mov	r1, r9
 800c762:	4638      	mov	r0, r7
 800c764:	47c0      	blx	r8
 800c766:	3001      	adds	r0, #1
 800c768:	d01e      	beq.n	800c7a8 <_printf_common+0xa4>
 800c76a:	6823      	ldr	r3, [r4, #0]
 800c76c:	68e5      	ldr	r5, [r4, #12]
 800c76e:	6832      	ldr	r2, [r6, #0]
 800c770:	f003 0306 	and.w	r3, r3, #6
 800c774:	2b04      	cmp	r3, #4
 800c776:	bf08      	it	eq
 800c778:	1aad      	subeq	r5, r5, r2
 800c77a:	68a3      	ldr	r3, [r4, #8]
 800c77c:	6922      	ldr	r2, [r4, #16]
 800c77e:	bf0c      	ite	eq
 800c780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c784:	2500      	movne	r5, #0
 800c786:	4293      	cmp	r3, r2
 800c788:	bfc4      	itt	gt
 800c78a:	1a9b      	subgt	r3, r3, r2
 800c78c:	18ed      	addgt	r5, r5, r3
 800c78e:	2600      	movs	r6, #0
 800c790:	341a      	adds	r4, #26
 800c792:	42b5      	cmp	r5, r6
 800c794:	d11a      	bne.n	800c7cc <_printf_common+0xc8>
 800c796:	2000      	movs	r0, #0
 800c798:	e008      	b.n	800c7ac <_printf_common+0xa8>
 800c79a:	2301      	movs	r3, #1
 800c79c:	4652      	mov	r2, sl
 800c79e:	4649      	mov	r1, r9
 800c7a0:	4638      	mov	r0, r7
 800c7a2:	47c0      	blx	r8
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	d103      	bne.n	800c7b0 <_printf_common+0xac>
 800c7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b0:	3501      	adds	r5, #1
 800c7b2:	e7c6      	b.n	800c742 <_printf_common+0x3e>
 800c7b4:	18e1      	adds	r1, r4, r3
 800c7b6:	1c5a      	adds	r2, r3, #1
 800c7b8:	2030      	movs	r0, #48	; 0x30
 800c7ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7be:	4422      	add	r2, r4
 800c7c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c7c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c7c8:	3302      	adds	r3, #2
 800c7ca:	e7c7      	b.n	800c75c <_printf_common+0x58>
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	4622      	mov	r2, r4
 800c7d0:	4649      	mov	r1, r9
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	47c0      	blx	r8
 800c7d6:	3001      	adds	r0, #1
 800c7d8:	d0e6      	beq.n	800c7a8 <_printf_common+0xa4>
 800c7da:	3601      	adds	r6, #1
 800c7dc:	e7d9      	b.n	800c792 <_printf_common+0x8e>
	...

0800c7e0 <_printf_i>:
 800c7e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e4:	460c      	mov	r4, r1
 800c7e6:	4691      	mov	r9, r2
 800c7e8:	7e27      	ldrb	r7, [r4, #24]
 800c7ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c7ec:	2f78      	cmp	r7, #120	; 0x78
 800c7ee:	4680      	mov	r8, r0
 800c7f0:	469a      	mov	sl, r3
 800c7f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7f6:	d807      	bhi.n	800c808 <_printf_i+0x28>
 800c7f8:	2f62      	cmp	r7, #98	; 0x62
 800c7fa:	d80a      	bhi.n	800c812 <_printf_i+0x32>
 800c7fc:	2f00      	cmp	r7, #0
 800c7fe:	f000 80d8 	beq.w	800c9b2 <_printf_i+0x1d2>
 800c802:	2f58      	cmp	r7, #88	; 0x58
 800c804:	f000 80a3 	beq.w	800c94e <_printf_i+0x16e>
 800c808:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c80c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c810:	e03a      	b.n	800c888 <_printf_i+0xa8>
 800c812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c816:	2b15      	cmp	r3, #21
 800c818:	d8f6      	bhi.n	800c808 <_printf_i+0x28>
 800c81a:	a001      	add	r0, pc, #4	; (adr r0, 800c820 <_printf_i+0x40>)
 800c81c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c820:	0800c879 	.word	0x0800c879
 800c824:	0800c88d 	.word	0x0800c88d
 800c828:	0800c809 	.word	0x0800c809
 800c82c:	0800c809 	.word	0x0800c809
 800c830:	0800c809 	.word	0x0800c809
 800c834:	0800c809 	.word	0x0800c809
 800c838:	0800c88d 	.word	0x0800c88d
 800c83c:	0800c809 	.word	0x0800c809
 800c840:	0800c809 	.word	0x0800c809
 800c844:	0800c809 	.word	0x0800c809
 800c848:	0800c809 	.word	0x0800c809
 800c84c:	0800c999 	.word	0x0800c999
 800c850:	0800c8bd 	.word	0x0800c8bd
 800c854:	0800c97b 	.word	0x0800c97b
 800c858:	0800c809 	.word	0x0800c809
 800c85c:	0800c809 	.word	0x0800c809
 800c860:	0800c9bb 	.word	0x0800c9bb
 800c864:	0800c809 	.word	0x0800c809
 800c868:	0800c8bd 	.word	0x0800c8bd
 800c86c:	0800c809 	.word	0x0800c809
 800c870:	0800c809 	.word	0x0800c809
 800c874:	0800c983 	.word	0x0800c983
 800c878:	680b      	ldr	r3, [r1, #0]
 800c87a:	1d1a      	adds	r2, r3, #4
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	600a      	str	r2, [r1, #0]
 800c880:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c888:	2301      	movs	r3, #1
 800c88a:	e0a3      	b.n	800c9d4 <_printf_i+0x1f4>
 800c88c:	6825      	ldr	r5, [r4, #0]
 800c88e:	6808      	ldr	r0, [r1, #0]
 800c890:	062e      	lsls	r6, r5, #24
 800c892:	f100 0304 	add.w	r3, r0, #4
 800c896:	d50a      	bpl.n	800c8ae <_printf_i+0xce>
 800c898:	6805      	ldr	r5, [r0, #0]
 800c89a:	600b      	str	r3, [r1, #0]
 800c89c:	2d00      	cmp	r5, #0
 800c89e:	da03      	bge.n	800c8a8 <_printf_i+0xc8>
 800c8a0:	232d      	movs	r3, #45	; 0x2d
 800c8a2:	426d      	negs	r5, r5
 800c8a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8a8:	485e      	ldr	r0, [pc, #376]	; (800ca24 <_printf_i+0x244>)
 800c8aa:	230a      	movs	r3, #10
 800c8ac:	e019      	b.n	800c8e2 <_printf_i+0x102>
 800c8ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c8b2:	6805      	ldr	r5, [r0, #0]
 800c8b4:	600b      	str	r3, [r1, #0]
 800c8b6:	bf18      	it	ne
 800c8b8:	b22d      	sxthne	r5, r5
 800c8ba:	e7ef      	b.n	800c89c <_printf_i+0xbc>
 800c8bc:	680b      	ldr	r3, [r1, #0]
 800c8be:	6825      	ldr	r5, [r4, #0]
 800c8c0:	1d18      	adds	r0, r3, #4
 800c8c2:	6008      	str	r0, [r1, #0]
 800c8c4:	0628      	lsls	r0, r5, #24
 800c8c6:	d501      	bpl.n	800c8cc <_printf_i+0xec>
 800c8c8:	681d      	ldr	r5, [r3, #0]
 800c8ca:	e002      	b.n	800c8d2 <_printf_i+0xf2>
 800c8cc:	0669      	lsls	r1, r5, #25
 800c8ce:	d5fb      	bpl.n	800c8c8 <_printf_i+0xe8>
 800c8d0:	881d      	ldrh	r5, [r3, #0]
 800c8d2:	4854      	ldr	r0, [pc, #336]	; (800ca24 <_printf_i+0x244>)
 800c8d4:	2f6f      	cmp	r7, #111	; 0x6f
 800c8d6:	bf0c      	ite	eq
 800c8d8:	2308      	moveq	r3, #8
 800c8da:	230a      	movne	r3, #10
 800c8dc:	2100      	movs	r1, #0
 800c8de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8e2:	6866      	ldr	r6, [r4, #4]
 800c8e4:	60a6      	str	r6, [r4, #8]
 800c8e6:	2e00      	cmp	r6, #0
 800c8e8:	bfa2      	ittt	ge
 800c8ea:	6821      	ldrge	r1, [r4, #0]
 800c8ec:	f021 0104 	bicge.w	r1, r1, #4
 800c8f0:	6021      	strge	r1, [r4, #0]
 800c8f2:	b90d      	cbnz	r5, 800c8f8 <_printf_i+0x118>
 800c8f4:	2e00      	cmp	r6, #0
 800c8f6:	d04d      	beq.n	800c994 <_printf_i+0x1b4>
 800c8f8:	4616      	mov	r6, r2
 800c8fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8fe:	fb03 5711 	mls	r7, r3, r1, r5
 800c902:	5dc7      	ldrb	r7, [r0, r7]
 800c904:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c908:	462f      	mov	r7, r5
 800c90a:	42bb      	cmp	r3, r7
 800c90c:	460d      	mov	r5, r1
 800c90e:	d9f4      	bls.n	800c8fa <_printf_i+0x11a>
 800c910:	2b08      	cmp	r3, #8
 800c912:	d10b      	bne.n	800c92c <_printf_i+0x14c>
 800c914:	6823      	ldr	r3, [r4, #0]
 800c916:	07df      	lsls	r7, r3, #31
 800c918:	d508      	bpl.n	800c92c <_printf_i+0x14c>
 800c91a:	6923      	ldr	r3, [r4, #16]
 800c91c:	6861      	ldr	r1, [r4, #4]
 800c91e:	4299      	cmp	r1, r3
 800c920:	bfde      	ittt	le
 800c922:	2330      	movle	r3, #48	; 0x30
 800c924:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c928:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c92c:	1b92      	subs	r2, r2, r6
 800c92e:	6122      	str	r2, [r4, #16]
 800c930:	f8cd a000 	str.w	sl, [sp]
 800c934:	464b      	mov	r3, r9
 800c936:	aa03      	add	r2, sp, #12
 800c938:	4621      	mov	r1, r4
 800c93a:	4640      	mov	r0, r8
 800c93c:	f7ff fee2 	bl	800c704 <_printf_common>
 800c940:	3001      	adds	r0, #1
 800c942:	d14c      	bne.n	800c9de <_printf_i+0x1fe>
 800c944:	f04f 30ff 	mov.w	r0, #4294967295
 800c948:	b004      	add	sp, #16
 800c94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c94e:	4835      	ldr	r0, [pc, #212]	; (800ca24 <_printf_i+0x244>)
 800c950:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c954:	6823      	ldr	r3, [r4, #0]
 800c956:	680e      	ldr	r6, [r1, #0]
 800c958:	061f      	lsls	r7, r3, #24
 800c95a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c95e:	600e      	str	r6, [r1, #0]
 800c960:	d514      	bpl.n	800c98c <_printf_i+0x1ac>
 800c962:	07d9      	lsls	r1, r3, #31
 800c964:	bf44      	itt	mi
 800c966:	f043 0320 	orrmi.w	r3, r3, #32
 800c96a:	6023      	strmi	r3, [r4, #0]
 800c96c:	b91d      	cbnz	r5, 800c976 <_printf_i+0x196>
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	f023 0320 	bic.w	r3, r3, #32
 800c974:	6023      	str	r3, [r4, #0]
 800c976:	2310      	movs	r3, #16
 800c978:	e7b0      	b.n	800c8dc <_printf_i+0xfc>
 800c97a:	6823      	ldr	r3, [r4, #0]
 800c97c:	f043 0320 	orr.w	r3, r3, #32
 800c980:	6023      	str	r3, [r4, #0]
 800c982:	2378      	movs	r3, #120	; 0x78
 800c984:	4828      	ldr	r0, [pc, #160]	; (800ca28 <_printf_i+0x248>)
 800c986:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c98a:	e7e3      	b.n	800c954 <_printf_i+0x174>
 800c98c:	065e      	lsls	r6, r3, #25
 800c98e:	bf48      	it	mi
 800c990:	b2ad      	uxthmi	r5, r5
 800c992:	e7e6      	b.n	800c962 <_printf_i+0x182>
 800c994:	4616      	mov	r6, r2
 800c996:	e7bb      	b.n	800c910 <_printf_i+0x130>
 800c998:	680b      	ldr	r3, [r1, #0]
 800c99a:	6826      	ldr	r6, [r4, #0]
 800c99c:	6960      	ldr	r0, [r4, #20]
 800c99e:	1d1d      	adds	r5, r3, #4
 800c9a0:	600d      	str	r5, [r1, #0]
 800c9a2:	0635      	lsls	r5, r6, #24
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	d501      	bpl.n	800c9ac <_printf_i+0x1cc>
 800c9a8:	6018      	str	r0, [r3, #0]
 800c9aa:	e002      	b.n	800c9b2 <_printf_i+0x1d2>
 800c9ac:	0671      	lsls	r1, r6, #25
 800c9ae:	d5fb      	bpl.n	800c9a8 <_printf_i+0x1c8>
 800c9b0:	8018      	strh	r0, [r3, #0]
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	6123      	str	r3, [r4, #16]
 800c9b6:	4616      	mov	r6, r2
 800c9b8:	e7ba      	b.n	800c930 <_printf_i+0x150>
 800c9ba:	680b      	ldr	r3, [r1, #0]
 800c9bc:	1d1a      	adds	r2, r3, #4
 800c9be:	600a      	str	r2, [r1, #0]
 800c9c0:	681e      	ldr	r6, [r3, #0]
 800c9c2:	6862      	ldr	r2, [r4, #4]
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	f7f3 fc22 	bl	8000210 <memchr>
 800c9cc:	b108      	cbz	r0, 800c9d2 <_printf_i+0x1f2>
 800c9ce:	1b80      	subs	r0, r0, r6
 800c9d0:	6060      	str	r0, [r4, #4]
 800c9d2:	6863      	ldr	r3, [r4, #4]
 800c9d4:	6123      	str	r3, [r4, #16]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9dc:	e7a8      	b.n	800c930 <_printf_i+0x150>
 800c9de:	6923      	ldr	r3, [r4, #16]
 800c9e0:	4632      	mov	r2, r6
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	4640      	mov	r0, r8
 800c9e6:	47d0      	blx	sl
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	d0ab      	beq.n	800c944 <_printf_i+0x164>
 800c9ec:	6823      	ldr	r3, [r4, #0]
 800c9ee:	079b      	lsls	r3, r3, #30
 800c9f0:	d413      	bmi.n	800ca1a <_printf_i+0x23a>
 800c9f2:	68e0      	ldr	r0, [r4, #12]
 800c9f4:	9b03      	ldr	r3, [sp, #12]
 800c9f6:	4298      	cmp	r0, r3
 800c9f8:	bfb8      	it	lt
 800c9fa:	4618      	movlt	r0, r3
 800c9fc:	e7a4      	b.n	800c948 <_printf_i+0x168>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	4632      	mov	r2, r6
 800ca02:	4649      	mov	r1, r9
 800ca04:	4640      	mov	r0, r8
 800ca06:	47d0      	blx	sl
 800ca08:	3001      	adds	r0, #1
 800ca0a:	d09b      	beq.n	800c944 <_printf_i+0x164>
 800ca0c:	3501      	adds	r5, #1
 800ca0e:	68e3      	ldr	r3, [r4, #12]
 800ca10:	9903      	ldr	r1, [sp, #12]
 800ca12:	1a5b      	subs	r3, r3, r1
 800ca14:	42ab      	cmp	r3, r5
 800ca16:	dcf2      	bgt.n	800c9fe <_printf_i+0x21e>
 800ca18:	e7eb      	b.n	800c9f2 <_printf_i+0x212>
 800ca1a:	2500      	movs	r5, #0
 800ca1c:	f104 0619 	add.w	r6, r4, #25
 800ca20:	e7f5      	b.n	800ca0e <_printf_i+0x22e>
 800ca22:	bf00      	nop
 800ca24:	08024122 	.word	0x08024122
 800ca28:	08024133 	.word	0x08024133

0800ca2c <_scanf_float>:
 800ca2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca30:	b087      	sub	sp, #28
 800ca32:	4617      	mov	r7, r2
 800ca34:	9303      	str	r3, [sp, #12]
 800ca36:	688b      	ldr	r3, [r1, #8]
 800ca38:	1e5a      	subs	r2, r3, #1
 800ca3a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ca3e:	bf83      	ittte	hi
 800ca40:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ca44:	195b      	addhi	r3, r3, r5
 800ca46:	9302      	strhi	r3, [sp, #8]
 800ca48:	2300      	movls	r3, #0
 800ca4a:	bf86      	itte	hi
 800ca4c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ca50:	608b      	strhi	r3, [r1, #8]
 800ca52:	9302      	strls	r3, [sp, #8]
 800ca54:	680b      	ldr	r3, [r1, #0]
 800ca56:	468b      	mov	fp, r1
 800ca58:	2500      	movs	r5, #0
 800ca5a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ca5e:	f84b 3b1c 	str.w	r3, [fp], #28
 800ca62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ca66:	4680      	mov	r8, r0
 800ca68:	460c      	mov	r4, r1
 800ca6a:	465e      	mov	r6, fp
 800ca6c:	46aa      	mov	sl, r5
 800ca6e:	46a9      	mov	r9, r5
 800ca70:	9501      	str	r5, [sp, #4]
 800ca72:	68a2      	ldr	r2, [r4, #8]
 800ca74:	b152      	cbz	r2, 800ca8c <_scanf_float+0x60>
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	2b4e      	cmp	r3, #78	; 0x4e
 800ca7c:	d864      	bhi.n	800cb48 <_scanf_float+0x11c>
 800ca7e:	2b40      	cmp	r3, #64	; 0x40
 800ca80:	d83c      	bhi.n	800cafc <_scanf_float+0xd0>
 800ca82:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ca86:	b2c8      	uxtb	r0, r1
 800ca88:	280e      	cmp	r0, #14
 800ca8a:	d93a      	bls.n	800cb02 <_scanf_float+0xd6>
 800ca8c:	f1b9 0f00 	cmp.w	r9, #0
 800ca90:	d003      	beq.n	800ca9a <_scanf_float+0x6e>
 800ca92:	6823      	ldr	r3, [r4, #0]
 800ca94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca98:	6023      	str	r3, [r4, #0]
 800ca9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca9e:	f1ba 0f01 	cmp.w	sl, #1
 800caa2:	f200 8113 	bhi.w	800cccc <_scanf_float+0x2a0>
 800caa6:	455e      	cmp	r6, fp
 800caa8:	f200 8105 	bhi.w	800ccb6 <_scanf_float+0x28a>
 800caac:	2501      	movs	r5, #1
 800caae:	4628      	mov	r0, r5
 800cab0:	b007      	add	sp, #28
 800cab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800caba:	2a0d      	cmp	r2, #13
 800cabc:	d8e6      	bhi.n	800ca8c <_scanf_float+0x60>
 800cabe:	a101      	add	r1, pc, #4	; (adr r1, 800cac4 <_scanf_float+0x98>)
 800cac0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cac4:	0800cc03 	.word	0x0800cc03
 800cac8:	0800ca8d 	.word	0x0800ca8d
 800cacc:	0800ca8d 	.word	0x0800ca8d
 800cad0:	0800ca8d 	.word	0x0800ca8d
 800cad4:	0800cc63 	.word	0x0800cc63
 800cad8:	0800cc3b 	.word	0x0800cc3b
 800cadc:	0800ca8d 	.word	0x0800ca8d
 800cae0:	0800ca8d 	.word	0x0800ca8d
 800cae4:	0800cc11 	.word	0x0800cc11
 800cae8:	0800ca8d 	.word	0x0800ca8d
 800caec:	0800ca8d 	.word	0x0800ca8d
 800caf0:	0800ca8d 	.word	0x0800ca8d
 800caf4:	0800ca8d 	.word	0x0800ca8d
 800caf8:	0800cbc9 	.word	0x0800cbc9
 800cafc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cb00:	e7db      	b.n	800caba <_scanf_float+0x8e>
 800cb02:	290e      	cmp	r1, #14
 800cb04:	d8c2      	bhi.n	800ca8c <_scanf_float+0x60>
 800cb06:	a001      	add	r0, pc, #4	; (adr r0, 800cb0c <_scanf_float+0xe0>)
 800cb08:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cb0c:	0800cbbb 	.word	0x0800cbbb
 800cb10:	0800ca8d 	.word	0x0800ca8d
 800cb14:	0800cbbb 	.word	0x0800cbbb
 800cb18:	0800cc4f 	.word	0x0800cc4f
 800cb1c:	0800ca8d 	.word	0x0800ca8d
 800cb20:	0800cb69 	.word	0x0800cb69
 800cb24:	0800cba5 	.word	0x0800cba5
 800cb28:	0800cba5 	.word	0x0800cba5
 800cb2c:	0800cba5 	.word	0x0800cba5
 800cb30:	0800cba5 	.word	0x0800cba5
 800cb34:	0800cba5 	.word	0x0800cba5
 800cb38:	0800cba5 	.word	0x0800cba5
 800cb3c:	0800cba5 	.word	0x0800cba5
 800cb40:	0800cba5 	.word	0x0800cba5
 800cb44:	0800cba5 	.word	0x0800cba5
 800cb48:	2b6e      	cmp	r3, #110	; 0x6e
 800cb4a:	d809      	bhi.n	800cb60 <_scanf_float+0x134>
 800cb4c:	2b60      	cmp	r3, #96	; 0x60
 800cb4e:	d8b2      	bhi.n	800cab6 <_scanf_float+0x8a>
 800cb50:	2b54      	cmp	r3, #84	; 0x54
 800cb52:	d077      	beq.n	800cc44 <_scanf_float+0x218>
 800cb54:	2b59      	cmp	r3, #89	; 0x59
 800cb56:	d199      	bne.n	800ca8c <_scanf_float+0x60>
 800cb58:	2d07      	cmp	r5, #7
 800cb5a:	d197      	bne.n	800ca8c <_scanf_float+0x60>
 800cb5c:	2508      	movs	r5, #8
 800cb5e:	e029      	b.n	800cbb4 <_scanf_float+0x188>
 800cb60:	2b74      	cmp	r3, #116	; 0x74
 800cb62:	d06f      	beq.n	800cc44 <_scanf_float+0x218>
 800cb64:	2b79      	cmp	r3, #121	; 0x79
 800cb66:	e7f6      	b.n	800cb56 <_scanf_float+0x12a>
 800cb68:	6821      	ldr	r1, [r4, #0]
 800cb6a:	05c8      	lsls	r0, r1, #23
 800cb6c:	d51a      	bpl.n	800cba4 <_scanf_float+0x178>
 800cb6e:	9b02      	ldr	r3, [sp, #8]
 800cb70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cb74:	6021      	str	r1, [r4, #0]
 800cb76:	f109 0901 	add.w	r9, r9, #1
 800cb7a:	b11b      	cbz	r3, 800cb84 <_scanf_float+0x158>
 800cb7c:	3b01      	subs	r3, #1
 800cb7e:	3201      	adds	r2, #1
 800cb80:	9302      	str	r3, [sp, #8]
 800cb82:	60a2      	str	r2, [r4, #8]
 800cb84:	68a3      	ldr	r3, [r4, #8]
 800cb86:	3b01      	subs	r3, #1
 800cb88:	60a3      	str	r3, [r4, #8]
 800cb8a:	6923      	ldr	r3, [r4, #16]
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	6123      	str	r3, [r4, #16]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	3b01      	subs	r3, #1
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	607b      	str	r3, [r7, #4]
 800cb98:	f340 8084 	ble.w	800cca4 <_scanf_float+0x278>
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	603b      	str	r3, [r7, #0]
 800cba2:	e766      	b.n	800ca72 <_scanf_float+0x46>
 800cba4:	eb1a 0f05 	cmn.w	sl, r5
 800cba8:	f47f af70 	bne.w	800ca8c <_scanf_float+0x60>
 800cbac:	6822      	ldr	r2, [r4, #0]
 800cbae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cbb2:	6022      	str	r2, [r4, #0]
 800cbb4:	f806 3b01 	strb.w	r3, [r6], #1
 800cbb8:	e7e4      	b.n	800cb84 <_scanf_float+0x158>
 800cbba:	6822      	ldr	r2, [r4, #0]
 800cbbc:	0610      	lsls	r0, r2, #24
 800cbbe:	f57f af65 	bpl.w	800ca8c <_scanf_float+0x60>
 800cbc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cbc6:	e7f4      	b.n	800cbb2 <_scanf_float+0x186>
 800cbc8:	f1ba 0f00 	cmp.w	sl, #0
 800cbcc:	d10e      	bne.n	800cbec <_scanf_float+0x1c0>
 800cbce:	f1b9 0f00 	cmp.w	r9, #0
 800cbd2:	d10e      	bne.n	800cbf2 <_scanf_float+0x1c6>
 800cbd4:	6822      	ldr	r2, [r4, #0]
 800cbd6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cbda:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cbde:	d108      	bne.n	800cbf2 <_scanf_float+0x1c6>
 800cbe0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cbe4:	6022      	str	r2, [r4, #0]
 800cbe6:	f04f 0a01 	mov.w	sl, #1
 800cbea:	e7e3      	b.n	800cbb4 <_scanf_float+0x188>
 800cbec:	f1ba 0f02 	cmp.w	sl, #2
 800cbf0:	d055      	beq.n	800cc9e <_scanf_float+0x272>
 800cbf2:	2d01      	cmp	r5, #1
 800cbf4:	d002      	beq.n	800cbfc <_scanf_float+0x1d0>
 800cbf6:	2d04      	cmp	r5, #4
 800cbf8:	f47f af48 	bne.w	800ca8c <_scanf_float+0x60>
 800cbfc:	3501      	adds	r5, #1
 800cbfe:	b2ed      	uxtb	r5, r5
 800cc00:	e7d8      	b.n	800cbb4 <_scanf_float+0x188>
 800cc02:	f1ba 0f01 	cmp.w	sl, #1
 800cc06:	f47f af41 	bne.w	800ca8c <_scanf_float+0x60>
 800cc0a:	f04f 0a02 	mov.w	sl, #2
 800cc0e:	e7d1      	b.n	800cbb4 <_scanf_float+0x188>
 800cc10:	b97d      	cbnz	r5, 800cc32 <_scanf_float+0x206>
 800cc12:	f1b9 0f00 	cmp.w	r9, #0
 800cc16:	f47f af3c 	bne.w	800ca92 <_scanf_float+0x66>
 800cc1a:	6822      	ldr	r2, [r4, #0]
 800cc1c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cc20:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cc24:	f47f af39 	bne.w	800ca9a <_scanf_float+0x6e>
 800cc28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cc2c:	6022      	str	r2, [r4, #0]
 800cc2e:	2501      	movs	r5, #1
 800cc30:	e7c0      	b.n	800cbb4 <_scanf_float+0x188>
 800cc32:	2d03      	cmp	r5, #3
 800cc34:	d0e2      	beq.n	800cbfc <_scanf_float+0x1d0>
 800cc36:	2d05      	cmp	r5, #5
 800cc38:	e7de      	b.n	800cbf8 <_scanf_float+0x1cc>
 800cc3a:	2d02      	cmp	r5, #2
 800cc3c:	f47f af26 	bne.w	800ca8c <_scanf_float+0x60>
 800cc40:	2503      	movs	r5, #3
 800cc42:	e7b7      	b.n	800cbb4 <_scanf_float+0x188>
 800cc44:	2d06      	cmp	r5, #6
 800cc46:	f47f af21 	bne.w	800ca8c <_scanf_float+0x60>
 800cc4a:	2507      	movs	r5, #7
 800cc4c:	e7b2      	b.n	800cbb4 <_scanf_float+0x188>
 800cc4e:	6822      	ldr	r2, [r4, #0]
 800cc50:	0591      	lsls	r1, r2, #22
 800cc52:	f57f af1b 	bpl.w	800ca8c <_scanf_float+0x60>
 800cc56:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cc5a:	6022      	str	r2, [r4, #0]
 800cc5c:	f8cd 9004 	str.w	r9, [sp, #4]
 800cc60:	e7a8      	b.n	800cbb4 <_scanf_float+0x188>
 800cc62:	6822      	ldr	r2, [r4, #0]
 800cc64:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cc68:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cc6c:	d006      	beq.n	800cc7c <_scanf_float+0x250>
 800cc6e:	0550      	lsls	r0, r2, #21
 800cc70:	f57f af0c 	bpl.w	800ca8c <_scanf_float+0x60>
 800cc74:	f1b9 0f00 	cmp.w	r9, #0
 800cc78:	f43f af0f 	beq.w	800ca9a <_scanf_float+0x6e>
 800cc7c:	0591      	lsls	r1, r2, #22
 800cc7e:	bf58      	it	pl
 800cc80:	9901      	ldrpl	r1, [sp, #4]
 800cc82:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cc86:	bf58      	it	pl
 800cc88:	eba9 0101 	subpl.w	r1, r9, r1
 800cc8c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cc90:	bf58      	it	pl
 800cc92:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cc96:	6022      	str	r2, [r4, #0]
 800cc98:	f04f 0900 	mov.w	r9, #0
 800cc9c:	e78a      	b.n	800cbb4 <_scanf_float+0x188>
 800cc9e:	f04f 0a03 	mov.w	sl, #3
 800cca2:	e787      	b.n	800cbb4 <_scanf_float+0x188>
 800cca4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cca8:	4639      	mov	r1, r7
 800ccaa:	4640      	mov	r0, r8
 800ccac:	4798      	blx	r3
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	f43f aedf 	beq.w	800ca72 <_scanf_float+0x46>
 800ccb4:	e6ea      	b.n	800ca8c <_scanf_float+0x60>
 800ccb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ccba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccbe:	463a      	mov	r2, r7
 800ccc0:	4640      	mov	r0, r8
 800ccc2:	4798      	blx	r3
 800ccc4:	6923      	ldr	r3, [r4, #16]
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	6123      	str	r3, [r4, #16]
 800ccca:	e6ec      	b.n	800caa6 <_scanf_float+0x7a>
 800cccc:	1e6b      	subs	r3, r5, #1
 800ccce:	2b06      	cmp	r3, #6
 800ccd0:	d825      	bhi.n	800cd1e <_scanf_float+0x2f2>
 800ccd2:	2d02      	cmp	r5, #2
 800ccd4:	d836      	bhi.n	800cd44 <_scanf_float+0x318>
 800ccd6:	455e      	cmp	r6, fp
 800ccd8:	f67f aee8 	bls.w	800caac <_scanf_float+0x80>
 800ccdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cce0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cce4:	463a      	mov	r2, r7
 800cce6:	4640      	mov	r0, r8
 800cce8:	4798      	blx	r3
 800ccea:	6923      	ldr	r3, [r4, #16]
 800ccec:	3b01      	subs	r3, #1
 800ccee:	6123      	str	r3, [r4, #16]
 800ccf0:	e7f1      	b.n	800ccd6 <_scanf_float+0x2aa>
 800ccf2:	9802      	ldr	r0, [sp, #8]
 800ccf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ccf8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ccfc:	9002      	str	r0, [sp, #8]
 800ccfe:	463a      	mov	r2, r7
 800cd00:	4640      	mov	r0, r8
 800cd02:	4798      	blx	r3
 800cd04:	6923      	ldr	r3, [r4, #16]
 800cd06:	3b01      	subs	r3, #1
 800cd08:	6123      	str	r3, [r4, #16]
 800cd0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd0e:	fa5f fa8a 	uxtb.w	sl, sl
 800cd12:	f1ba 0f02 	cmp.w	sl, #2
 800cd16:	d1ec      	bne.n	800ccf2 <_scanf_float+0x2c6>
 800cd18:	3d03      	subs	r5, #3
 800cd1a:	b2ed      	uxtb	r5, r5
 800cd1c:	1b76      	subs	r6, r6, r5
 800cd1e:	6823      	ldr	r3, [r4, #0]
 800cd20:	05da      	lsls	r2, r3, #23
 800cd22:	d52f      	bpl.n	800cd84 <_scanf_float+0x358>
 800cd24:	055b      	lsls	r3, r3, #21
 800cd26:	d510      	bpl.n	800cd4a <_scanf_float+0x31e>
 800cd28:	455e      	cmp	r6, fp
 800cd2a:	f67f aebf 	bls.w	800caac <_scanf_float+0x80>
 800cd2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd36:	463a      	mov	r2, r7
 800cd38:	4640      	mov	r0, r8
 800cd3a:	4798      	blx	r3
 800cd3c:	6923      	ldr	r3, [r4, #16]
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	6123      	str	r3, [r4, #16]
 800cd42:	e7f1      	b.n	800cd28 <_scanf_float+0x2fc>
 800cd44:	46aa      	mov	sl, r5
 800cd46:	9602      	str	r6, [sp, #8]
 800cd48:	e7df      	b.n	800cd0a <_scanf_float+0x2de>
 800cd4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cd4e:	6923      	ldr	r3, [r4, #16]
 800cd50:	2965      	cmp	r1, #101	; 0x65
 800cd52:	f103 33ff 	add.w	r3, r3, #4294967295
 800cd56:	f106 35ff 	add.w	r5, r6, #4294967295
 800cd5a:	6123      	str	r3, [r4, #16]
 800cd5c:	d00c      	beq.n	800cd78 <_scanf_float+0x34c>
 800cd5e:	2945      	cmp	r1, #69	; 0x45
 800cd60:	d00a      	beq.n	800cd78 <_scanf_float+0x34c>
 800cd62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd66:	463a      	mov	r2, r7
 800cd68:	4640      	mov	r0, r8
 800cd6a:	4798      	blx	r3
 800cd6c:	6923      	ldr	r3, [r4, #16]
 800cd6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cd72:	3b01      	subs	r3, #1
 800cd74:	1eb5      	subs	r5, r6, #2
 800cd76:	6123      	str	r3, [r4, #16]
 800cd78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd7c:	463a      	mov	r2, r7
 800cd7e:	4640      	mov	r0, r8
 800cd80:	4798      	blx	r3
 800cd82:	462e      	mov	r6, r5
 800cd84:	6825      	ldr	r5, [r4, #0]
 800cd86:	f015 0510 	ands.w	r5, r5, #16
 800cd8a:	d158      	bne.n	800ce3e <_scanf_float+0x412>
 800cd8c:	7035      	strb	r5, [r6, #0]
 800cd8e:	6823      	ldr	r3, [r4, #0]
 800cd90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cd94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd98:	d11c      	bne.n	800cdd4 <_scanf_float+0x3a8>
 800cd9a:	9b01      	ldr	r3, [sp, #4]
 800cd9c:	454b      	cmp	r3, r9
 800cd9e:	eba3 0209 	sub.w	r2, r3, r9
 800cda2:	d124      	bne.n	800cdee <_scanf_float+0x3c2>
 800cda4:	2200      	movs	r2, #0
 800cda6:	4659      	mov	r1, fp
 800cda8:	4640      	mov	r0, r8
 800cdaa:	f000 fe9b 	bl	800dae4 <_strtod_r>
 800cdae:	9b03      	ldr	r3, [sp, #12]
 800cdb0:	6821      	ldr	r1, [r4, #0]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f011 0f02 	tst.w	r1, #2
 800cdb8:	ec57 6b10 	vmov	r6, r7, d0
 800cdbc:	f103 0204 	add.w	r2, r3, #4
 800cdc0:	d020      	beq.n	800ce04 <_scanf_float+0x3d8>
 800cdc2:	9903      	ldr	r1, [sp, #12]
 800cdc4:	600a      	str	r2, [r1, #0]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	e9c3 6700 	strd	r6, r7, [r3]
 800cdcc:	68e3      	ldr	r3, [r4, #12]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	60e3      	str	r3, [r4, #12]
 800cdd2:	e66c      	b.n	800caae <_scanf_float+0x82>
 800cdd4:	9b04      	ldr	r3, [sp, #16]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d0e4      	beq.n	800cda4 <_scanf_float+0x378>
 800cdda:	9905      	ldr	r1, [sp, #20]
 800cddc:	230a      	movs	r3, #10
 800cdde:	462a      	mov	r2, r5
 800cde0:	3101      	adds	r1, #1
 800cde2:	4640      	mov	r0, r8
 800cde4:	f000 ff70 	bl	800dcc8 <_strtol_r>
 800cde8:	9b04      	ldr	r3, [sp, #16]
 800cdea:	9e05      	ldr	r6, [sp, #20]
 800cdec:	1ac2      	subs	r2, r0, r3
 800cdee:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cdf2:	429e      	cmp	r6, r3
 800cdf4:	bf28      	it	cs
 800cdf6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cdfa:	4912      	ldr	r1, [pc, #72]	; (800ce44 <_scanf_float+0x418>)
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	f000 f82b 	bl	800ce58 <siprintf>
 800ce02:	e7cf      	b.n	800cda4 <_scanf_float+0x378>
 800ce04:	f011 0f04 	tst.w	r1, #4
 800ce08:	9903      	ldr	r1, [sp, #12]
 800ce0a:	600a      	str	r2, [r1, #0]
 800ce0c:	d1db      	bne.n	800cdc6 <_scanf_float+0x39a>
 800ce0e:	f8d3 8000 	ldr.w	r8, [r3]
 800ce12:	ee10 2a10 	vmov	r2, s0
 800ce16:	ee10 0a10 	vmov	r0, s0
 800ce1a:	463b      	mov	r3, r7
 800ce1c:	4639      	mov	r1, r7
 800ce1e:	f7f3 fe9d 	bl	8000b5c <__aeabi_dcmpun>
 800ce22:	b128      	cbz	r0, 800ce30 <_scanf_float+0x404>
 800ce24:	4808      	ldr	r0, [pc, #32]	; (800ce48 <_scanf_float+0x41c>)
 800ce26:	f000 f811 	bl	800ce4c <nanf>
 800ce2a:	ed88 0a00 	vstr	s0, [r8]
 800ce2e:	e7cd      	b.n	800cdcc <_scanf_float+0x3a0>
 800ce30:	4630      	mov	r0, r6
 800ce32:	4639      	mov	r1, r7
 800ce34:	f7f3 fef0 	bl	8000c18 <__aeabi_d2f>
 800ce38:	f8c8 0000 	str.w	r0, [r8]
 800ce3c:	e7c6      	b.n	800cdcc <_scanf_float+0x3a0>
 800ce3e:	2500      	movs	r5, #0
 800ce40:	e635      	b.n	800caae <_scanf_float+0x82>
 800ce42:	bf00      	nop
 800ce44:	08024144 	.word	0x08024144
 800ce48:	08024253 	.word	0x08024253

0800ce4c <nanf>:
 800ce4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ce54 <nanf+0x8>
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	7fc00000 	.word	0x7fc00000

0800ce58 <siprintf>:
 800ce58:	b40e      	push	{r1, r2, r3}
 800ce5a:	b500      	push	{lr}
 800ce5c:	b09c      	sub	sp, #112	; 0x70
 800ce5e:	ab1d      	add	r3, sp, #116	; 0x74
 800ce60:	9002      	str	r0, [sp, #8]
 800ce62:	9006      	str	r0, [sp, #24]
 800ce64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce68:	4809      	ldr	r0, [pc, #36]	; (800ce90 <siprintf+0x38>)
 800ce6a:	9107      	str	r1, [sp, #28]
 800ce6c:	9104      	str	r1, [sp, #16]
 800ce6e:	4909      	ldr	r1, [pc, #36]	; (800ce94 <siprintf+0x3c>)
 800ce70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce74:	9105      	str	r1, [sp, #20]
 800ce76:	6800      	ldr	r0, [r0, #0]
 800ce78:	9301      	str	r3, [sp, #4]
 800ce7a:	a902      	add	r1, sp, #8
 800ce7c:	f002 ff46 	bl	800fd0c <_svfiprintf_r>
 800ce80:	9b02      	ldr	r3, [sp, #8]
 800ce82:	2200      	movs	r2, #0
 800ce84:	701a      	strb	r2, [r3, #0]
 800ce86:	b01c      	add	sp, #112	; 0x70
 800ce88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce8c:	b003      	add	sp, #12
 800ce8e:	4770      	bx	lr
 800ce90:	20000040 	.word	0x20000040
 800ce94:	ffff0208 	.word	0xffff0208

0800ce98 <sulp>:
 800ce98:	b570      	push	{r4, r5, r6, lr}
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	460d      	mov	r5, r1
 800ce9e:	ec45 4b10 	vmov	d0, r4, r5
 800cea2:	4616      	mov	r6, r2
 800cea4:	f002 fcce 	bl	800f844 <__ulp>
 800cea8:	ec51 0b10 	vmov	r0, r1, d0
 800ceac:	b17e      	cbz	r6, 800cece <sulp+0x36>
 800ceae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ceb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	dd09      	ble.n	800cece <sulp+0x36>
 800ceba:	051b      	lsls	r3, r3, #20
 800cebc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cec0:	2400      	movs	r4, #0
 800cec2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cec6:	4622      	mov	r2, r4
 800cec8:	462b      	mov	r3, r5
 800ceca:	f7f3 fbad 	bl	8000628 <__aeabi_dmul>
 800cece:	bd70      	pop	{r4, r5, r6, pc}

0800ced0 <_strtod_l>:
 800ced0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced4:	b0a3      	sub	sp, #140	; 0x8c
 800ced6:	461f      	mov	r7, r3
 800ced8:	2300      	movs	r3, #0
 800ceda:	931e      	str	r3, [sp, #120]	; 0x78
 800cedc:	4ba4      	ldr	r3, [pc, #656]	; (800d170 <_strtod_l+0x2a0>)
 800cede:	9219      	str	r2, [sp, #100]	; 0x64
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	9307      	str	r3, [sp, #28]
 800cee4:	4604      	mov	r4, r0
 800cee6:	4618      	mov	r0, r3
 800cee8:	4688      	mov	r8, r1
 800ceea:	f7f3 f983 	bl	80001f4 <strlen>
 800ceee:	f04f 0a00 	mov.w	sl, #0
 800cef2:	4605      	mov	r5, r0
 800cef4:	f04f 0b00 	mov.w	fp, #0
 800cef8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cefc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cefe:	781a      	ldrb	r2, [r3, #0]
 800cf00:	2a2b      	cmp	r2, #43	; 0x2b
 800cf02:	d04c      	beq.n	800cf9e <_strtod_l+0xce>
 800cf04:	d839      	bhi.n	800cf7a <_strtod_l+0xaa>
 800cf06:	2a0d      	cmp	r2, #13
 800cf08:	d832      	bhi.n	800cf70 <_strtod_l+0xa0>
 800cf0a:	2a08      	cmp	r2, #8
 800cf0c:	d832      	bhi.n	800cf74 <_strtod_l+0xa4>
 800cf0e:	2a00      	cmp	r2, #0
 800cf10:	d03c      	beq.n	800cf8c <_strtod_l+0xbc>
 800cf12:	2300      	movs	r3, #0
 800cf14:	930e      	str	r3, [sp, #56]	; 0x38
 800cf16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800cf18:	7833      	ldrb	r3, [r6, #0]
 800cf1a:	2b30      	cmp	r3, #48	; 0x30
 800cf1c:	f040 80b4 	bne.w	800d088 <_strtod_l+0x1b8>
 800cf20:	7873      	ldrb	r3, [r6, #1]
 800cf22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cf26:	2b58      	cmp	r3, #88	; 0x58
 800cf28:	d16c      	bne.n	800d004 <_strtod_l+0x134>
 800cf2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf2c:	9301      	str	r3, [sp, #4]
 800cf2e:	ab1e      	add	r3, sp, #120	; 0x78
 800cf30:	9702      	str	r7, [sp, #8]
 800cf32:	9300      	str	r3, [sp, #0]
 800cf34:	4a8f      	ldr	r2, [pc, #572]	; (800d174 <_strtod_l+0x2a4>)
 800cf36:	ab1f      	add	r3, sp, #124	; 0x7c
 800cf38:	a91d      	add	r1, sp, #116	; 0x74
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	f001 fde2 	bl	800eb04 <__gethex>
 800cf40:	f010 0707 	ands.w	r7, r0, #7
 800cf44:	4605      	mov	r5, r0
 800cf46:	d005      	beq.n	800cf54 <_strtod_l+0x84>
 800cf48:	2f06      	cmp	r7, #6
 800cf4a:	d12a      	bne.n	800cfa2 <_strtod_l+0xd2>
 800cf4c:	3601      	adds	r6, #1
 800cf4e:	2300      	movs	r3, #0
 800cf50:	961d      	str	r6, [sp, #116]	; 0x74
 800cf52:	930e      	str	r3, [sp, #56]	; 0x38
 800cf54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f040 8596 	bne.w	800da88 <_strtod_l+0xbb8>
 800cf5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf5e:	b1db      	cbz	r3, 800cf98 <_strtod_l+0xc8>
 800cf60:	4652      	mov	r2, sl
 800cf62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cf66:	ec43 2b10 	vmov	d0, r2, r3
 800cf6a:	b023      	add	sp, #140	; 0x8c
 800cf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf70:	2a20      	cmp	r2, #32
 800cf72:	d1ce      	bne.n	800cf12 <_strtod_l+0x42>
 800cf74:	3301      	adds	r3, #1
 800cf76:	931d      	str	r3, [sp, #116]	; 0x74
 800cf78:	e7c0      	b.n	800cefc <_strtod_l+0x2c>
 800cf7a:	2a2d      	cmp	r2, #45	; 0x2d
 800cf7c:	d1c9      	bne.n	800cf12 <_strtod_l+0x42>
 800cf7e:	2201      	movs	r2, #1
 800cf80:	920e      	str	r2, [sp, #56]	; 0x38
 800cf82:	1c5a      	adds	r2, r3, #1
 800cf84:	921d      	str	r2, [sp, #116]	; 0x74
 800cf86:	785b      	ldrb	r3, [r3, #1]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d1c4      	bne.n	800cf16 <_strtod_l+0x46>
 800cf8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf8e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f040 8576 	bne.w	800da84 <_strtod_l+0xbb4>
 800cf98:	4652      	mov	r2, sl
 800cf9a:	465b      	mov	r3, fp
 800cf9c:	e7e3      	b.n	800cf66 <_strtod_l+0x96>
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	e7ee      	b.n	800cf80 <_strtod_l+0xb0>
 800cfa2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cfa4:	b13a      	cbz	r2, 800cfb6 <_strtod_l+0xe6>
 800cfa6:	2135      	movs	r1, #53	; 0x35
 800cfa8:	a820      	add	r0, sp, #128	; 0x80
 800cfaa:	f002 fd56 	bl	800fa5a <__copybits>
 800cfae:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f002 f91b 	bl	800f1ec <_Bfree>
 800cfb6:	3f01      	subs	r7, #1
 800cfb8:	2f05      	cmp	r7, #5
 800cfba:	d807      	bhi.n	800cfcc <_strtod_l+0xfc>
 800cfbc:	e8df f007 	tbb	[pc, r7]
 800cfc0:	1d180b0e 	.word	0x1d180b0e
 800cfc4:	030e      	.short	0x030e
 800cfc6:	f04f 0b00 	mov.w	fp, #0
 800cfca:	46da      	mov	sl, fp
 800cfcc:	0728      	lsls	r0, r5, #28
 800cfce:	d5c1      	bpl.n	800cf54 <_strtod_l+0x84>
 800cfd0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cfd4:	e7be      	b.n	800cf54 <_strtod_l+0x84>
 800cfd6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800cfda:	e7f7      	b.n	800cfcc <_strtod_l+0xfc>
 800cfdc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800cfe0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cfe2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cfe6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cfea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cfee:	e7ed      	b.n	800cfcc <_strtod_l+0xfc>
 800cff0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800d178 <_strtod_l+0x2a8>
 800cff4:	f04f 0a00 	mov.w	sl, #0
 800cff8:	e7e8      	b.n	800cfcc <_strtod_l+0xfc>
 800cffa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cffe:	f04f 3aff 	mov.w	sl, #4294967295
 800d002:	e7e3      	b.n	800cfcc <_strtod_l+0xfc>
 800d004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d006:	1c5a      	adds	r2, r3, #1
 800d008:	921d      	str	r2, [sp, #116]	; 0x74
 800d00a:	785b      	ldrb	r3, [r3, #1]
 800d00c:	2b30      	cmp	r3, #48	; 0x30
 800d00e:	d0f9      	beq.n	800d004 <_strtod_l+0x134>
 800d010:	2b00      	cmp	r3, #0
 800d012:	d09f      	beq.n	800cf54 <_strtod_l+0x84>
 800d014:	2301      	movs	r3, #1
 800d016:	f04f 0900 	mov.w	r9, #0
 800d01a:	9304      	str	r3, [sp, #16]
 800d01c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d01e:	930a      	str	r3, [sp, #40]	; 0x28
 800d020:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d024:	464f      	mov	r7, r9
 800d026:	220a      	movs	r2, #10
 800d028:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d02a:	7806      	ldrb	r6, [r0, #0]
 800d02c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d030:	b2d9      	uxtb	r1, r3
 800d032:	2909      	cmp	r1, #9
 800d034:	d92a      	bls.n	800d08c <_strtod_l+0x1bc>
 800d036:	9907      	ldr	r1, [sp, #28]
 800d038:	462a      	mov	r2, r5
 800d03a:	f003 f8d9 	bl	80101f0 <strncmp>
 800d03e:	b398      	cbz	r0, 800d0a8 <_strtod_l+0x1d8>
 800d040:	2000      	movs	r0, #0
 800d042:	4633      	mov	r3, r6
 800d044:	463d      	mov	r5, r7
 800d046:	9007      	str	r0, [sp, #28]
 800d048:	4602      	mov	r2, r0
 800d04a:	2b65      	cmp	r3, #101	; 0x65
 800d04c:	d001      	beq.n	800d052 <_strtod_l+0x182>
 800d04e:	2b45      	cmp	r3, #69	; 0x45
 800d050:	d118      	bne.n	800d084 <_strtod_l+0x1b4>
 800d052:	b91d      	cbnz	r5, 800d05c <_strtod_l+0x18c>
 800d054:	9b04      	ldr	r3, [sp, #16]
 800d056:	4303      	orrs	r3, r0
 800d058:	d098      	beq.n	800cf8c <_strtod_l+0xbc>
 800d05a:	2500      	movs	r5, #0
 800d05c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d060:	f108 0301 	add.w	r3, r8, #1
 800d064:	931d      	str	r3, [sp, #116]	; 0x74
 800d066:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d06a:	2b2b      	cmp	r3, #43	; 0x2b
 800d06c:	d075      	beq.n	800d15a <_strtod_l+0x28a>
 800d06e:	2b2d      	cmp	r3, #45	; 0x2d
 800d070:	d07b      	beq.n	800d16a <_strtod_l+0x29a>
 800d072:	f04f 0c00 	mov.w	ip, #0
 800d076:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d07a:	2909      	cmp	r1, #9
 800d07c:	f240 8082 	bls.w	800d184 <_strtod_l+0x2b4>
 800d080:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d084:	2600      	movs	r6, #0
 800d086:	e09d      	b.n	800d1c4 <_strtod_l+0x2f4>
 800d088:	2300      	movs	r3, #0
 800d08a:	e7c4      	b.n	800d016 <_strtod_l+0x146>
 800d08c:	2f08      	cmp	r7, #8
 800d08e:	bfd8      	it	le
 800d090:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d092:	f100 0001 	add.w	r0, r0, #1
 800d096:	bfda      	itte	le
 800d098:	fb02 3301 	mlale	r3, r2, r1, r3
 800d09c:	9309      	strle	r3, [sp, #36]	; 0x24
 800d09e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d0a2:	3701      	adds	r7, #1
 800d0a4:	901d      	str	r0, [sp, #116]	; 0x74
 800d0a6:	e7bf      	b.n	800d028 <_strtod_l+0x158>
 800d0a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0aa:	195a      	adds	r2, r3, r5
 800d0ac:	921d      	str	r2, [sp, #116]	; 0x74
 800d0ae:	5d5b      	ldrb	r3, [r3, r5]
 800d0b0:	2f00      	cmp	r7, #0
 800d0b2:	d037      	beq.n	800d124 <_strtod_l+0x254>
 800d0b4:	9007      	str	r0, [sp, #28]
 800d0b6:	463d      	mov	r5, r7
 800d0b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d0bc:	2a09      	cmp	r2, #9
 800d0be:	d912      	bls.n	800d0e6 <_strtod_l+0x216>
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	e7c2      	b.n	800d04a <_strtod_l+0x17a>
 800d0c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0c6:	1c5a      	adds	r2, r3, #1
 800d0c8:	921d      	str	r2, [sp, #116]	; 0x74
 800d0ca:	785b      	ldrb	r3, [r3, #1]
 800d0cc:	3001      	adds	r0, #1
 800d0ce:	2b30      	cmp	r3, #48	; 0x30
 800d0d0:	d0f8      	beq.n	800d0c4 <_strtod_l+0x1f4>
 800d0d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d0d6:	2a08      	cmp	r2, #8
 800d0d8:	f200 84db 	bhi.w	800da92 <_strtod_l+0xbc2>
 800d0dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d0de:	9007      	str	r0, [sp, #28]
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	920a      	str	r2, [sp, #40]	; 0x28
 800d0e4:	4605      	mov	r5, r0
 800d0e6:	3b30      	subs	r3, #48	; 0x30
 800d0e8:	f100 0201 	add.w	r2, r0, #1
 800d0ec:	d014      	beq.n	800d118 <_strtod_l+0x248>
 800d0ee:	9907      	ldr	r1, [sp, #28]
 800d0f0:	4411      	add	r1, r2
 800d0f2:	9107      	str	r1, [sp, #28]
 800d0f4:	462a      	mov	r2, r5
 800d0f6:	eb00 0e05 	add.w	lr, r0, r5
 800d0fa:	210a      	movs	r1, #10
 800d0fc:	4572      	cmp	r2, lr
 800d0fe:	d113      	bne.n	800d128 <_strtod_l+0x258>
 800d100:	182a      	adds	r2, r5, r0
 800d102:	2a08      	cmp	r2, #8
 800d104:	f105 0501 	add.w	r5, r5, #1
 800d108:	4405      	add	r5, r0
 800d10a:	dc1c      	bgt.n	800d146 <_strtod_l+0x276>
 800d10c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d10e:	220a      	movs	r2, #10
 800d110:	fb02 3301 	mla	r3, r2, r1, r3
 800d114:	9309      	str	r3, [sp, #36]	; 0x24
 800d116:	2200      	movs	r2, #0
 800d118:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d11a:	1c59      	adds	r1, r3, #1
 800d11c:	911d      	str	r1, [sp, #116]	; 0x74
 800d11e:	785b      	ldrb	r3, [r3, #1]
 800d120:	4610      	mov	r0, r2
 800d122:	e7c9      	b.n	800d0b8 <_strtod_l+0x1e8>
 800d124:	4638      	mov	r0, r7
 800d126:	e7d2      	b.n	800d0ce <_strtod_l+0x1fe>
 800d128:	2a08      	cmp	r2, #8
 800d12a:	dc04      	bgt.n	800d136 <_strtod_l+0x266>
 800d12c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d12e:	434e      	muls	r6, r1
 800d130:	9609      	str	r6, [sp, #36]	; 0x24
 800d132:	3201      	adds	r2, #1
 800d134:	e7e2      	b.n	800d0fc <_strtod_l+0x22c>
 800d136:	f102 0c01 	add.w	ip, r2, #1
 800d13a:	f1bc 0f10 	cmp.w	ip, #16
 800d13e:	bfd8      	it	le
 800d140:	fb01 f909 	mulle.w	r9, r1, r9
 800d144:	e7f5      	b.n	800d132 <_strtod_l+0x262>
 800d146:	2d10      	cmp	r5, #16
 800d148:	bfdc      	itt	le
 800d14a:	220a      	movle	r2, #10
 800d14c:	fb02 3909 	mlale	r9, r2, r9, r3
 800d150:	e7e1      	b.n	800d116 <_strtod_l+0x246>
 800d152:	2300      	movs	r3, #0
 800d154:	9307      	str	r3, [sp, #28]
 800d156:	2201      	movs	r2, #1
 800d158:	e77c      	b.n	800d054 <_strtod_l+0x184>
 800d15a:	f04f 0c00 	mov.w	ip, #0
 800d15e:	f108 0302 	add.w	r3, r8, #2
 800d162:	931d      	str	r3, [sp, #116]	; 0x74
 800d164:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d168:	e785      	b.n	800d076 <_strtod_l+0x1a6>
 800d16a:	f04f 0c01 	mov.w	ip, #1
 800d16e:	e7f6      	b.n	800d15e <_strtod_l+0x28e>
 800d170:	0802443c 	.word	0x0802443c
 800d174:	0802414c 	.word	0x0802414c
 800d178:	7ff00000 	.word	0x7ff00000
 800d17c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d17e:	1c59      	adds	r1, r3, #1
 800d180:	911d      	str	r1, [sp, #116]	; 0x74
 800d182:	785b      	ldrb	r3, [r3, #1]
 800d184:	2b30      	cmp	r3, #48	; 0x30
 800d186:	d0f9      	beq.n	800d17c <_strtod_l+0x2ac>
 800d188:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d18c:	2908      	cmp	r1, #8
 800d18e:	f63f af79 	bhi.w	800d084 <_strtod_l+0x1b4>
 800d192:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d196:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d198:	9308      	str	r3, [sp, #32]
 800d19a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d19c:	1c59      	adds	r1, r3, #1
 800d19e:	911d      	str	r1, [sp, #116]	; 0x74
 800d1a0:	785b      	ldrb	r3, [r3, #1]
 800d1a2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800d1a6:	2e09      	cmp	r6, #9
 800d1a8:	d937      	bls.n	800d21a <_strtod_l+0x34a>
 800d1aa:	9e08      	ldr	r6, [sp, #32]
 800d1ac:	1b89      	subs	r1, r1, r6
 800d1ae:	2908      	cmp	r1, #8
 800d1b0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d1b4:	dc02      	bgt.n	800d1bc <_strtod_l+0x2ec>
 800d1b6:	4576      	cmp	r6, lr
 800d1b8:	bfa8      	it	ge
 800d1ba:	4676      	movge	r6, lr
 800d1bc:	f1bc 0f00 	cmp.w	ip, #0
 800d1c0:	d000      	beq.n	800d1c4 <_strtod_l+0x2f4>
 800d1c2:	4276      	negs	r6, r6
 800d1c4:	2d00      	cmp	r5, #0
 800d1c6:	d14f      	bne.n	800d268 <_strtod_l+0x398>
 800d1c8:	9904      	ldr	r1, [sp, #16]
 800d1ca:	4301      	orrs	r1, r0
 800d1cc:	f47f aec2 	bne.w	800cf54 <_strtod_l+0x84>
 800d1d0:	2a00      	cmp	r2, #0
 800d1d2:	f47f aedb 	bne.w	800cf8c <_strtod_l+0xbc>
 800d1d6:	2b69      	cmp	r3, #105	; 0x69
 800d1d8:	d027      	beq.n	800d22a <_strtod_l+0x35a>
 800d1da:	dc24      	bgt.n	800d226 <_strtod_l+0x356>
 800d1dc:	2b49      	cmp	r3, #73	; 0x49
 800d1de:	d024      	beq.n	800d22a <_strtod_l+0x35a>
 800d1e0:	2b4e      	cmp	r3, #78	; 0x4e
 800d1e2:	f47f aed3 	bne.w	800cf8c <_strtod_l+0xbc>
 800d1e6:	499e      	ldr	r1, [pc, #632]	; (800d460 <_strtod_l+0x590>)
 800d1e8:	a81d      	add	r0, sp, #116	; 0x74
 800d1ea:	f001 fee3 	bl	800efb4 <__match>
 800d1ee:	2800      	cmp	r0, #0
 800d1f0:	f43f aecc 	beq.w	800cf8c <_strtod_l+0xbc>
 800d1f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	2b28      	cmp	r3, #40	; 0x28
 800d1fa:	d12d      	bne.n	800d258 <_strtod_l+0x388>
 800d1fc:	4999      	ldr	r1, [pc, #612]	; (800d464 <_strtod_l+0x594>)
 800d1fe:	aa20      	add	r2, sp, #128	; 0x80
 800d200:	a81d      	add	r0, sp, #116	; 0x74
 800d202:	f001 feeb 	bl	800efdc <__hexnan>
 800d206:	2805      	cmp	r0, #5
 800d208:	d126      	bne.n	800d258 <_strtod_l+0x388>
 800d20a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d20c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d210:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d214:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d218:	e69c      	b.n	800cf54 <_strtod_l+0x84>
 800d21a:	210a      	movs	r1, #10
 800d21c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d220:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d224:	e7b9      	b.n	800d19a <_strtod_l+0x2ca>
 800d226:	2b6e      	cmp	r3, #110	; 0x6e
 800d228:	e7db      	b.n	800d1e2 <_strtod_l+0x312>
 800d22a:	498f      	ldr	r1, [pc, #572]	; (800d468 <_strtod_l+0x598>)
 800d22c:	a81d      	add	r0, sp, #116	; 0x74
 800d22e:	f001 fec1 	bl	800efb4 <__match>
 800d232:	2800      	cmp	r0, #0
 800d234:	f43f aeaa 	beq.w	800cf8c <_strtod_l+0xbc>
 800d238:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d23a:	498c      	ldr	r1, [pc, #560]	; (800d46c <_strtod_l+0x59c>)
 800d23c:	3b01      	subs	r3, #1
 800d23e:	a81d      	add	r0, sp, #116	; 0x74
 800d240:	931d      	str	r3, [sp, #116]	; 0x74
 800d242:	f001 feb7 	bl	800efb4 <__match>
 800d246:	b910      	cbnz	r0, 800d24e <_strtod_l+0x37e>
 800d248:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d24a:	3301      	adds	r3, #1
 800d24c:	931d      	str	r3, [sp, #116]	; 0x74
 800d24e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800d47c <_strtod_l+0x5ac>
 800d252:	f04f 0a00 	mov.w	sl, #0
 800d256:	e67d      	b.n	800cf54 <_strtod_l+0x84>
 800d258:	4885      	ldr	r0, [pc, #532]	; (800d470 <_strtod_l+0x5a0>)
 800d25a:	f002 ffb1 	bl	80101c0 <nan>
 800d25e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d262:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d266:	e675      	b.n	800cf54 <_strtod_l+0x84>
 800d268:	9b07      	ldr	r3, [sp, #28]
 800d26a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d26c:	1af3      	subs	r3, r6, r3
 800d26e:	2f00      	cmp	r7, #0
 800d270:	bf08      	it	eq
 800d272:	462f      	moveq	r7, r5
 800d274:	2d10      	cmp	r5, #16
 800d276:	9308      	str	r3, [sp, #32]
 800d278:	46a8      	mov	r8, r5
 800d27a:	bfa8      	it	ge
 800d27c:	f04f 0810 	movge.w	r8, #16
 800d280:	f7f3 f958 	bl	8000534 <__aeabi_ui2d>
 800d284:	2d09      	cmp	r5, #9
 800d286:	4682      	mov	sl, r0
 800d288:	468b      	mov	fp, r1
 800d28a:	dd13      	ble.n	800d2b4 <_strtod_l+0x3e4>
 800d28c:	4b79      	ldr	r3, [pc, #484]	; (800d474 <_strtod_l+0x5a4>)
 800d28e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d292:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d296:	f7f3 f9c7 	bl	8000628 <__aeabi_dmul>
 800d29a:	4682      	mov	sl, r0
 800d29c:	4648      	mov	r0, r9
 800d29e:	468b      	mov	fp, r1
 800d2a0:	f7f3 f948 	bl	8000534 <__aeabi_ui2d>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	4650      	mov	r0, sl
 800d2aa:	4659      	mov	r1, fp
 800d2ac:	f7f3 f806 	bl	80002bc <__adddf3>
 800d2b0:	4682      	mov	sl, r0
 800d2b2:	468b      	mov	fp, r1
 800d2b4:	2d0f      	cmp	r5, #15
 800d2b6:	dc38      	bgt.n	800d32a <_strtod_l+0x45a>
 800d2b8:	9b08      	ldr	r3, [sp, #32]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f43f ae4a 	beq.w	800cf54 <_strtod_l+0x84>
 800d2c0:	dd24      	ble.n	800d30c <_strtod_l+0x43c>
 800d2c2:	2b16      	cmp	r3, #22
 800d2c4:	dc0b      	bgt.n	800d2de <_strtod_l+0x40e>
 800d2c6:	4d6b      	ldr	r5, [pc, #428]	; (800d474 <_strtod_l+0x5a4>)
 800d2c8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d2cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d2d0:	4652      	mov	r2, sl
 800d2d2:	465b      	mov	r3, fp
 800d2d4:	f7f3 f9a8 	bl	8000628 <__aeabi_dmul>
 800d2d8:	4682      	mov	sl, r0
 800d2da:	468b      	mov	fp, r1
 800d2dc:	e63a      	b.n	800cf54 <_strtod_l+0x84>
 800d2de:	9a08      	ldr	r2, [sp, #32]
 800d2e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	db20      	blt.n	800d32a <_strtod_l+0x45a>
 800d2e8:	4c62      	ldr	r4, [pc, #392]	; (800d474 <_strtod_l+0x5a4>)
 800d2ea:	f1c5 050f 	rsb	r5, r5, #15
 800d2ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d2f2:	4652      	mov	r2, sl
 800d2f4:	465b      	mov	r3, fp
 800d2f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2fa:	f7f3 f995 	bl	8000628 <__aeabi_dmul>
 800d2fe:	9b08      	ldr	r3, [sp, #32]
 800d300:	1b5d      	subs	r5, r3, r5
 800d302:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d306:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d30a:	e7e3      	b.n	800d2d4 <_strtod_l+0x404>
 800d30c:	9b08      	ldr	r3, [sp, #32]
 800d30e:	3316      	adds	r3, #22
 800d310:	db0b      	blt.n	800d32a <_strtod_l+0x45a>
 800d312:	9b07      	ldr	r3, [sp, #28]
 800d314:	4a57      	ldr	r2, [pc, #348]	; (800d474 <_strtod_l+0x5a4>)
 800d316:	1b9e      	subs	r6, r3, r6
 800d318:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d31c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d320:	4650      	mov	r0, sl
 800d322:	4659      	mov	r1, fp
 800d324:	f7f3 faaa 	bl	800087c <__aeabi_ddiv>
 800d328:	e7d6      	b.n	800d2d8 <_strtod_l+0x408>
 800d32a:	9b08      	ldr	r3, [sp, #32]
 800d32c:	eba5 0808 	sub.w	r8, r5, r8
 800d330:	4498      	add	r8, r3
 800d332:	f1b8 0f00 	cmp.w	r8, #0
 800d336:	dd71      	ble.n	800d41c <_strtod_l+0x54c>
 800d338:	f018 030f 	ands.w	r3, r8, #15
 800d33c:	d00a      	beq.n	800d354 <_strtod_l+0x484>
 800d33e:	494d      	ldr	r1, [pc, #308]	; (800d474 <_strtod_l+0x5a4>)
 800d340:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d344:	4652      	mov	r2, sl
 800d346:	465b      	mov	r3, fp
 800d348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d34c:	f7f3 f96c 	bl	8000628 <__aeabi_dmul>
 800d350:	4682      	mov	sl, r0
 800d352:	468b      	mov	fp, r1
 800d354:	f038 080f 	bics.w	r8, r8, #15
 800d358:	d04d      	beq.n	800d3f6 <_strtod_l+0x526>
 800d35a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d35e:	dd22      	ble.n	800d3a6 <_strtod_l+0x4d6>
 800d360:	2500      	movs	r5, #0
 800d362:	462e      	mov	r6, r5
 800d364:	9509      	str	r5, [sp, #36]	; 0x24
 800d366:	9507      	str	r5, [sp, #28]
 800d368:	2322      	movs	r3, #34	; 0x22
 800d36a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800d47c <_strtod_l+0x5ac>
 800d36e:	6023      	str	r3, [r4, #0]
 800d370:	f04f 0a00 	mov.w	sl, #0
 800d374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d376:	2b00      	cmp	r3, #0
 800d378:	f43f adec 	beq.w	800cf54 <_strtod_l+0x84>
 800d37c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d37e:	4620      	mov	r0, r4
 800d380:	f001 ff34 	bl	800f1ec <_Bfree>
 800d384:	9907      	ldr	r1, [sp, #28]
 800d386:	4620      	mov	r0, r4
 800d388:	f001 ff30 	bl	800f1ec <_Bfree>
 800d38c:	4631      	mov	r1, r6
 800d38e:	4620      	mov	r0, r4
 800d390:	f001 ff2c 	bl	800f1ec <_Bfree>
 800d394:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d396:	4620      	mov	r0, r4
 800d398:	f001 ff28 	bl	800f1ec <_Bfree>
 800d39c:	4629      	mov	r1, r5
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f001 ff24 	bl	800f1ec <_Bfree>
 800d3a4:	e5d6      	b.n	800cf54 <_strtod_l+0x84>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d3ac:	4650      	mov	r0, sl
 800d3ae:	4659      	mov	r1, fp
 800d3b0:	4699      	mov	r9, r3
 800d3b2:	f1b8 0f01 	cmp.w	r8, #1
 800d3b6:	dc21      	bgt.n	800d3fc <_strtod_l+0x52c>
 800d3b8:	b10b      	cbz	r3, 800d3be <_strtod_l+0x4ee>
 800d3ba:	4682      	mov	sl, r0
 800d3bc:	468b      	mov	fp, r1
 800d3be:	4b2e      	ldr	r3, [pc, #184]	; (800d478 <_strtod_l+0x5a8>)
 800d3c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d3c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d3c8:	4652      	mov	r2, sl
 800d3ca:	465b      	mov	r3, fp
 800d3cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d3d0:	f7f3 f92a 	bl	8000628 <__aeabi_dmul>
 800d3d4:	4b29      	ldr	r3, [pc, #164]	; (800d47c <_strtod_l+0x5ac>)
 800d3d6:	460a      	mov	r2, r1
 800d3d8:	400b      	ands	r3, r1
 800d3da:	4929      	ldr	r1, [pc, #164]	; (800d480 <_strtod_l+0x5b0>)
 800d3dc:	428b      	cmp	r3, r1
 800d3de:	4682      	mov	sl, r0
 800d3e0:	d8be      	bhi.n	800d360 <_strtod_l+0x490>
 800d3e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d3e6:	428b      	cmp	r3, r1
 800d3e8:	bf86      	itte	hi
 800d3ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d484 <_strtod_l+0x5b4>
 800d3ee:	f04f 3aff 	movhi.w	sl, #4294967295
 800d3f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	9304      	str	r3, [sp, #16]
 800d3fa:	e081      	b.n	800d500 <_strtod_l+0x630>
 800d3fc:	f018 0f01 	tst.w	r8, #1
 800d400:	d007      	beq.n	800d412 <_strtod_l+0x542>
 800d402:	4b1d      	ldr	r3, [pc, #116]	; (800d478 <_strtod_l+0x5a8>)
 800d404:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40c:	f7f3 f90c 	bl	8000628 <__aeabi_dmul>
 800d410:	2301      	movs	r3, #1
 800d412:	f109 0901 	add.w	r9, r9, #1
 800d416:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d41a:	e7ca      	b.n	800d3b2 <_strtod_l+0x4e2>
 800d41c:	d0eb      	beq.n	800d3f6 <_strtod_l+0x526>
 800d41e:	f1c8 0800 	rsb	r8, r8, #0
 800d422:	f018 020f 	ands.w	r2, r8, #15
 800d426:	d00a      	beq.n	800d43e <_strtod_l+0x56e>
 800d428:	4b12      	ldr	r3, [pc, #72]	; (800d474 <_strtod_l+0x5a4>)
 800d42a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d42e:	4650      	mov	r0, sl
 800d430:	4659      	mov	r1, fp
 800d432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d436:	f7f3 fa21 	bl	800087c <__aeabi_ddiv>
 800d43a:	4682      	mov	sl, r0
 800d43c:	468b      	mov	fp, r1
 800d43e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d442:	d0d8      	beq.n	800d3f6 <_strtod_l+0x526>
 800d444:	f1b8 0f1f 	cmp.w	r8, #31
 800d448:	dd1e      	ble.n	800d488 <_strtod_l+0x5b8>
 800d44a:	2500      	movs	r5, #0
 800d44c:	462e      	mov	r6, r5
 800d44e:	9509      	str	r5, [sp, #36]	; 0x24
 800d450:	9507      	str	r5, [sp, #28]
 800d452:	2322      	movs	r3, #34	; 0x22
 800d454:	f04f 0a00 	mov.w	sl, #0
 800d458:	f04f 0b00 	mov.w	fp, #0
 800d45c:	6023      	str	r3, [r4, #0]
 800d45e:	e789      	b.n	800d374 <_strtod_l+0x4a4>
 800d460:	0802411d 	.word	0x0802411d
 800d464:	08024160 	.word	0x08024160
 800d468:	08024115 	.word	0x08024115
 800d46c:	08024358 	.word	0x08024358
 800d470:	08024253 	.word	0x08024253
 800d474:	080244d8 	.word	0x080244d8
 800d478:	080244b0 	.word	0x080244b0
 800d47c:	7ff00000 	.word	0x7ff00000
 800d480:	7ca00000 	.word	0x7ca00000
 800d484:	7fefffff 	.word	0x7fefffff
 800d488:	f018 0310 	ands.w	r3, r8, #16
 800d48c:	bf18      	it	ne
 800d48e:	236a      	movne	r3, #106	; 0x6a
 800d490:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d848 <_strtod_l+0x978>
 800d494:	9304      	str	r3, [sp, #16]
 800d496:	4650      	mov	r0, sl
 800d498:	4659      	mov	r1, fp
 800d49a:	2300      	movs	r3, #0
 800d49c:	f018 0f01 	tst.w	r8, #1
 800d4a0:	d004      	beq.n	800d4ac <_strtod_l+0x5dc>
 800d4a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d4a6:	f7f3 f8bf 	bl	8000628 <__aeabi_dmul>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d4b0:	f109 0908 	add.w	r9, r9, #8
 800d4b4:	d1f2      	bne.n	800d49c <_strtod_l+0x5cc>
 800d4b6:	b10b      	cbz	r3, 800d4bc <_strtod_l+0x5ec>
 800d4b8:	4682      	mov	sl, r0
 800d4ba:	468b      	mov	fp, r1
 800d4bc:	9b04      	ldr	r3, [sp, #16]
 800d4be:	b1bb      	cbz	r3, 800d4f0 <_strtod_l+0x620>
 800d4c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d4c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	4659      	mov	r1, fp
 800d4cc:	dd10      	ble.n	800d4f0 <_strtod_l+0x620>
 800d4ce:	2b1f      	cmp	r3, #31
 800d4d0:	f340 8128 	ble.w	800d724 <_strtod_l+0x854>
 800d4d4:	2b34      	cmp	r3, #52	; 0x34
 800d4d6:	bfde      	ittt	le
 800d4d8:	3b20      	suble	r3, #32
 800d4da:	f04f 32ff 	movle.w	r2, #4294967295
 800d4de:	fa02 f303 	lslle.w	r3, r2, r3
 800d4e2:	f04f 0a00 	mov.w	sl, #0
 800d4e6:	bfcc      	ite	gt
 800d4e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d4ec:	ea03 0b01 	andle.w	fp, r3, r1
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	4650      	mov	r0, sl
 800d4f6:	4659      	mov	r1, fp
 800d4f8:	f7f3 fafe 	bl	8000af8 <__aeabi_dcmpeq>
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	d1a4      	bne.n	800d44a <_strtod_l+0x57a>
 800d500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d506:	462b      	mov	r3, r5
 800d508:	463a      	mov	r2, r7
 800d50a:	4620      	mov	r0, r4
 800d50c:	f001 feda 	bl	800f2c4 <__s2b>
 800d510:	9009      	str	r0, [sp, #36]	; 0x24
 800d512:	2800      	cmp	r0, #0
 800d514:	f43f af24 	beq.w	800d360 <_strtod_l+0x490>
 800d518:	9b07      	ldr	r3, [sp, #28]
 800d51a:	1b9e      	subs	r6, r3, r6
 800d51c:	9b08      	ldr	r3, [sp, #32]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	bfb4      	ite	lt
 800d522:	4633      	movlt	r3, r6
 800d524:	2300      	movge	r3, #0
 800d526:	9310      	str	r3, [sp, #64]	; 0x40
 800d528:	9b08      	ldr	r3, [sp, #32]
 800d52a:	2500      	movs	r5, #0
 800d52c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d530:	9318      	str	r3, [sp, #96]	; 0x60
 800d532:	462e      	mov	r6, r5
 800d534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d536:	4620      	mov	r0, r4
 800d538:	6859      	ldr	r1, [r3, #4]
 800d53a:	f001 fe17 	bl	800f16c <_Balloc>
 800d53e:	9007      	str	r0, [sp, #28]
 800d540:	2800      	cmp	r0, #0
 800d542:	f43f af11 	beq.w	800d368 <_strtod_l+0x498>
 800d546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d548:	691a      	ldr	r2, [r3, #16]
 800d54a:	3202      	adds	r2, #2
 800d54c:	f103 010c 	add.w	r1, r3, #12
 800d550:	0092      	lsls	r2, r2, #2
 800d552:	300c      	adds	r0, #12
 800d554:	f001 fdfc 	bl	800f150 <memcpy>
 800d558:	ec4b ab10 	vmov	d0, sl, fp
 800d55c:	aa20      	add	r2, sp, #128	; 0x80
 800d55e:	a91f      	add	r1, sp, #124	; 0x7c
 800d560:	4620      	mov	r0, r4
 800d562:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d566:	f002 f9e9 	bl	800f93c <__d2b>
 800d56a:	901e      	str	r0, [sp, #120]	; 0x78
 800d56c:	2800      	cmp	r0, #0
 800d56e:	f43f aefb 	beq.w	800d368 <_strtod_l+0x498>
 800d572:	2101      	movs	r1, #1
 800d574:	4620      	mov	r0, r4
 800d576:	f001 ff3f 	bl	800f3f8 <__i2b>
 800d57a:	4606      	mov	r6, r0
 800d57c:	2800      	cmp	r0, #0
 800d57e:	f43f aef3 	beq.w	800d368 <_strtod_l+0x498>
 800d582:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d584:	9904      	ldr	r1, [sp, #16]
 800d586:	2b00      	cmp	r3, #0
 800d588:	bfab      	itete	ge
 800d58a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800d58c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800d58e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800d590:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800d594:	bfac      	ite	ge
 800d596:	eb03 0902 	addge.w	r9, r3, r2
 800d59a:	1ad7      	sublt	r7, r2, r3
 800d59c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d59e:	eba3 0801 	sub.w	r8, r3, r1
 800d5a2:	4490      	add	r8, r2
 800d5a4:	4ba3      	ldr	r3, [pc, #652]	; (800d834 <_strtod_l+0x964>)
 800d5a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800d5aa:	4598      	cmp	r8, r3
 800d5ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d5b0:	f280 80cc 	bge.w	800d74c <_strtod_l+0x87c>
 800d5b4:	eba3 0308 	sub.w	r3, r3, r8
 800d5b8:	2b1f      	cmp	r3, #31
 800d5ba:	eba2 0203 	sub.w	r2, r2, r3
 800d5be:	f04f 0101 	mov.w	r1, #1
 800d5c2:	f300 80b6 	bgt.w	800d732 <_strtod_l+0x862>
 800d5c6:	fa01 f303 	lsl.w	r3, r1, r3
 800d5ca:	9311      	str	r3, [sp, #68]	; 0x44
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	930c      	str	r3, [sp, #48]	; 0x30
 800d5d0:	eb09 0802 	add.w	r8, r9, r2
 800d5d4:	9b04      	ldr	r3, [sp, #16]
 800d5d6:	45c1      	cmp	r9, r8
 800d5d8:	4417      	add	r7, r2
 800d5da:	441f      	add	r7, r3
 800d5dc:	464b      	mov	r3, r9
 800d5de:	bfa8      	it	ge
 800d5e0:	4643      	movge	r3, r8
 800d5e2:	42bb      	cmp	r3, r7
 800d5e4:	bfa8      	it	ge
 800d5e6:	463b      	movge	r3, r7
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	bfc2      	ittt	gt
 800d5ec:	eba8 0803 	subgt.w	r8, r8, r3
 800d5f0:	1aff      	subgt	r7, r7, r3
 800d5f2:	eba9 0903 	subgt.w	r9, r9, r3
 800d5f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	dd17      	ble.n	800d62c <_strtod_l+0x75c>
 800d5fc:	4631      	mov	r1, r6
 800d5fe:	461a      	mov	r2, r3
 800d600:	4620      	mov	r0, r4
 800d602:	f001 ffb5 	bl	800f570 <__pow5mult>
 800d606:	4606      	mov	r6, r0
 800d608:	2800      	cmp	r0, #0
 800d60a:	f43f aead 	beq.w	800d368 <_strtod_l+0x498>
 800d60e:	4601      	mov	r1, r0
 800d610:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d612:	4620      	mov	r0, r4
 800d614:	f001 ff06 	bl	800f424 <__multiply>
 800d618:	900f      	str	r0, [sp, #60]	; 0x3c
 800d61a:	2800      	cmp	r0, #0
 800d61c:	f43f aea4 	beq.w	800d368 <_strtod_l+0x498>
 800d620:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d622:	4620      	mov	r0, r4
 800d624:	f001 fde2 	bl	800f1ec <_Bfree>
 800d628:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d62a:	931e      	str	r3, [sp, #120]	; 0x78
 800d62c:	f1b8 0f00 	cmp.w	r8, #0
 800d630:	f300 8091 	bgt.w	800d756 <_strtod_l+0x886>
 800d634:	9b08      	ldr	r3, [sp, #32]
 800d636:	2b00      	cmp	r3, #0
 800d638:	dd08      	ble.n	800d64c <_strtod_l+0x77c>
 800d63a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d63c:	9907      	ldr	r1, [sp, #28]
 800d63e:	4620      	mov	r0, r4
 800d640:	f001 ff96 	bl	800f570 <__pow5mult>
 800d644:	9007      	str	r0, [sp, #28]
 800d646:	2800      	cmp	r0, #0
 800d648:	f43f ae8e 	beq.w	800d368 <_strtod_l+0x498>
 800d64c:	2f00      	cmp	r7, #0
 800d64e:	dd08      	ble.n	800d662 <_strtod_l+0x792>
 800d650:	9907      	ldr	r1, [sp, #28]
 800d652:	463a      	mov	r2, r7
 800d654:	4620      	mov	r0, r4
 800d656:	f001 ffe5 	bl	800f624 <__lshift>
 800d65a:	9007      	str	r0, [sp, #28]
 800d65c:	2800      	cmp	r0, #0
 800d65e:	f43f ae83 	beq.w	800d368 <_strtod_l+0x498>
 800d662:	f1b9 0f00 	cmp.w	r9, #0
 800d666:	dd08      	ble.n	800d67a <_strtod_l+0x7aa>
 800d668:	4631      	mov	r1, r6
 800d66a:	464a      	mov	r2, r9
 800d66c:	4620      	mov	r0, r4
 800d66e:	f001 ffd9 	bl	800f624 <__lshift>
 800d672:	4606      	mov	r6, r0
 800d674:	2800      	cmp	r0, #0
 800d676:	f43f ae77 	beq.w	800d368 <_strtod_l+0x498>
 800d67a:	9a07      	ldr	r2, [sp, #28]
 800d67c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d67e:	4620      	mov	r0, r4
 800d680:	f002 f858 	bl	800f734 <__mdiff>
 800d684:	4605      	mov	r5, r0
 800d686:	2800      	cmp	r0, #0
 800d688:	f43f ae6e 	beq.w	800d368 <_strtod_l+0x498>
 800d68c:	68c3      	ldr	r3, [r0, #12]
 800d68e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d690:	2300      	movs	r3, #0
 800d692:	60c3      	str	r3, [r0, #12]
 800d694:	4631      	mov	r1, r6
 800d696:	f002 f831 	bl	800f6fc <__mcmp>
 800d69a:	2800      	cmp	r0, #0
 800d69c:	da65      	bge.n	800d76a <_strtod_l+0x89a>
 800d69e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6a0:	ea53 030a 	orrs.w	r3, r3, sl
 800d6a4:	f040 8087 	bne.w	800d7b6 <_strtod_l+0x8e6>
 800d6a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f040 8082 	bne.w	800d7b6 <_strtod_l+0x8e6>
 800d6b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d6b6:	0d1b      	lsrs	r3, r3, #20
 800d6b8:	051b      	lsls	r3, r3, #20
 800d6ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d6be:	d97a      	bls.n	800d7b6 <_strtod_l+0x8e6>
 800d6c0:	696b      	ldr	r3, [r5, #20]
 800d6c2:	b913      	cbnz	r3, 800d6ca <_strtod_l+0x7fa>
 800d6c4:	692b      	ldr	r3, [r5, #16]
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	dd75      	ble.n	800d7b6 <_strtod_l+0x8e6>
 800d6ca:	4629      	mov	r1, r5
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	f001 ffa8 	bl	800f624 <__lshift>
 800d6d4:	4631      	mov	r1, r6
 800d6d6:	4605      	mov	r5, r0
 800d6d8:	f002 f810 	bl	800f6fc <__mcmp>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	dd6a      	ble.n	800d7b6 <_strtod_l+0x8e6>
 800d6e0:	9904      	ldr	r1, [sp, #16]
 800d6e2:	4a55      	ldr	r2, [pc, #340]	; (800d838 <_strtod_l+0x968>)
 800d6e4:	465b      	mov	r3, fp
 800d6e6:	2900      	cmp	r1, #0
 800d6e8:	f000 8085 	beq.w	800d7f6 <_strtod_l+0x926>
 800d6ec:	ea02 010b 	and.w	r1, r2, fp
 800d6f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d6f4:	dc7f      	bgt.n	800d7f6 <_strtod_l+0x926>
 800d6f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d6fa:	f77f aeaa 	ble.w	800d452 <_strtod_l+0x582>
 800d6fe:	4a4f      	ldr	r2, [pc, #316]	; (800d83c <_strtod_l+0x96c>)
 800d700:	2300      	movs	r3, #0
 800d702:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800d706:	4650      	mov	r0, sl
 800d708:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800d70c:	4659      	mov	r1, fp
 800d70e:	f7f2 ff8b 	bl	8000628 <__aeabi_dmul>
 800d712:	460b      	mov	r3, r1
 800d714:	4303      	orrs	r3, r0
 800d716:	bf08      	it	eq
 800d718:	2322      	moveq	r3, #34	; 0x22
 800d71a:	4682      	mov	sl, r0
 800d71c:	468b      	mov	fp, r1
 800d71e:	bf08      	it	eq
 800d720:	6023      	streq	r3, [r4, #0]
 800d722:	e62b      	b.n	800d37c <_strtod_l+0x4ac>
 800d724:	f04f 32ff 	mov.w	r2, #4294967295
 800d728:	fa02 f303 	lsl.w	r3, r2, r3
 800d72c:	ea03 0a0a 	and.w	sl, r3, sl
 800d730:	e6de      	b.n	800d4f0 <_strtod_l+0x620>
 800d732:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d736:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d73a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d73e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d742:	fa01 f308 	lsl.w	r3, r1, r8
 800d746:	930c      	str	r3, [sp, #48]	; 0x30
 800d748:	9111      	str	r1, [sp, #68]	; 0x44
 800d74a:	e741      	b.n	800d5d0 <_strtod_l+0x700>
 800d74c:	2300      	movs	r3, #0
 800d74e:	930c      	str	r3, [sp, #48]	; 0x30
 800d750:	2301      	movs	r3, #1
 800d752:	9311      	str	r3, [sp, #68]	; 0x44
 800d754:	e73c      	b.n	800d5d0 <_strtod_l+0x700>
 800d756:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d758:	4642      	mov	r2, r8
 800d75a:	4620      	mov	r0, r4
 800d75c:	f001 ff62 	bl	800f624 <__lshift>
 800d760:	901e      	str	r0, [sp, #120]	; 0x78
 800d762:	2800      	cmp	r0, #0
 800d764:	f47f af66 	bne.w	800d634 <_strtod_l+0x764>
 800d768:	e5fe      	b.n	800d368 <_strtod_l+0x498>
 800d76a:	465f      	mov	r7, fp
 800d76c:	d16e      	bne.n	800d84c <_strtod_l+0x97c>
 800d76e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d770:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d774:	b342      	cbz	r2, 800d7c8 <_strtod_l+0x8f8>
 800d776:	4a32      	ldr	r2, [pc, #200]	; (800d840 <_strtod_l+0x970>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d128      	bne.n	800d7ce <_strtod_l+0x8fe>
 800d77c:	9b04      	ldr	r3, [sp, #16]
 800d77e:	4650      	mov	r0, sl
 800d780:	b1eb      	cbz	r3, 800d7be <_strtod_l+0x8ee>
 800d782:	4a2d      	ldr	r2, [pc, #180]	; (800d838 <_strtod_l+0x968>)
 800d784:	403a      	ands	r2, r7
 800d786:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d78a:	f04f 31ff 	mov.w	r1, #4294967295
 800d78e:	d819      	bhi.n	800d7c4 <_strtod_l+0x8f4>
 800d790:	0d12      	lsrs	r2, r2, #20
 800d792:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d796:	fa01 f303 	lsl.w	r3, r1, r3
 800d79a:	4298      	cmp	r0, r3
 800d79c:	d117      	bne.n	800d7ce <_strtod_l+0x8fe>
 800d79e:	4b29      	ldr	r3, [pc, #164]	; (800d844 <_strtod_l+0x974>)
 800d7a0:	429f      	cmp	r7, r3
 800d7a2:	d102      	bne.n	800d7aa <_strtod_l+0x8da>
 800d7a4:	3001      	adds	r0, #1
 800d7a6:	f43f addf 	beq.w	800d368 <_strtod_l+0x498>
 800d7aa:	4b23      	ldr	r3, [pc, #140]	; (800d838 <_strtod_l+0x968>)
 800d7ac:	403b      	ands	r3, r7
 800d7ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d7b2:	f04f 0a00 	mov.w	sl, #0
 800d7b6:	9b04      	ldr	r3, [sp, #16]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1a0      	bne.n	800d6fe <_strtod_l+0x82e>
 800d7bc:	e5de      	b.n	800d37c <_strtod_l+0x4ac>
 800d7be:	f04f 33ff 	mov.w	r3, #4294967295
 800d7c2:	e7ea      	b.n	800d79a <_strtod_l+0x8ca>
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	e7e8      	b.n	800d79a <_strtod_l+0x8ca>
 800d7c8:	ea53 030a 	orrs.w	r3, r3, sl
 800d7cc:	d088      	beq.n	800d6e0 <_strtod_l+0x810>
 800d7ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7d0:	b1db      	cbz	r3, 800d80a <_strtod_l+0x93a>
 800d7d2:	423b      	tst	r3, r7
 800d7d4:	d0ef      	beq.n	800d7b6 <_strtod_l+0x8e6>
 800d7d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7d8:	9a04      	ldr	r2, [sp, #16]
 800d7da:	4650      	mov	r0, sl
 800d7dc:	4659      	mov	r1, fp
 800d7de:	b1c3      	cbz	r3, 800d812 <_strtod_l+0x942>
 800d7e0:	f7ff fb5a 	bl	800ce98 <sulp>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d7ec:	f7f2 fd66 	bl	80002bc <__adddf3>
 800d7f0:	4682      	mov	sl, r0
 800d7f2:	468b      	mov	fp, r1
 800d7f4:	e7df      	b.n	800d7b6 <_strtod_l+0x8e6>
 800d7f6:	4013      	ands	r3, r2
 800d7f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d7fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d800:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d804:	f04f 3aff 	mov.w	sl, #4294967295
 800d808:	e7d5      	b.n	800d7b6 <_strtod_l+0x8e6>
 800d80a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d80c:	ea13 0f0a 	tst.w	r3, sl
 800d810:	e7e0      	b.n	800d7d4 <_strtod_l+0x904>
 800d812:	f7ff fb41 	bl	800ce98 <sulp>
 800d816:	4602      	mov	r2, r0
 800d818:	460b      	mov	r3, r1
 800d81a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d81e:	f7f2 fd4b 	bl	80002b8 <__aeabi_dsub>
 800d822:	2200      	movs	r2, #0
 800d824:	2300      	movs	r3, #0
 800d826:	4682      	mov	sl, r0
 800d828:	468b      	mov	fp, r1
 800d82a:	f7f3 f965 	bl	8000af8 <__aeabi_dcmpeq>
 800d82e:	2800      	cmp	r0, #0
 800d830:	d0c1      	beq.n	800d7b6 <_strtod_l+0x8e6>
 800d832:	e60e      	b.n	800d452 <_strtod_l+0x582>
 800d834:	fffffc02 	.word	0xfffffc02
 800d838:	7ff00000 	.word	0x7ff00000
 800d83c:	39500000 	.word	0x39500000
 800d840:	000fffff 	.word	0x000fffff
 800d844:	7fefffff 	.word	0x7fefffff
 800d848:	08024178 	.word	0x08024178
 800d84c:	4631      	mov	r1, r6
 800d84e:	4628      	mov	r0, r5
 800d850:	f002 f8d0 	bl	800f9f4 <__ratio>
 800d854:	ec59 8b10 	vmov	r8, r9, d0
 800d858:	ee10 0a10 	vmov	r0, s0
 800d85c:	2200      	movs	r2, #0
 800d85e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d862:	4649      	mov	r1, r9
 800d864:	f7f3 f95c 	bl	8000b20 <__aeabi_dcmple>
 800d868:	2800      	cmp	r0, #0
 800d86a:	d07c      	beq.n	800d966 <_strtod_l+0xa96>
 800d86c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d04c      	beq.n	800d90c <_strtod_l+0xa3c>
 800d872:	4b95      	ldr	r3, [pc, #596]	; (800dac8 <_strtod_l+0xbf8>)
 800d874:	2200      	movs	r2, #0
 800d876:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d87a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dac8 <_strtod_l+0xbf8>
 800d87e:	f04f 0800 	mov.w	r8, #0
 800d882:	4b92      	ldr	r3, [pc, #584]	; (800dacc <_strtod_l+0xbfc>)
 800d884:	403b      	ands	r3, r7
 800d886:	9311      	str	r3, [sp, #68]	; 0x44
 800d888:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d88a:	4b91      	ldr	r3, [pc, #580]	; (800dad0 <_strtod_l+0xc00>)
 800d88c:	429a      	cmp	r2, r3
 800d88e:	f040 80b2 	bne.w	800d9f6 <_strtod_l+0xb26>
 800d892:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d89a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d89e:	ec4b ab10 	vmov	d0, sl, fp
 800d8a2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d8a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d8aa:	f001 ffcb 	bl	800f844 <__ulp>
 800d8ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d8b2:	ec53 2b10 	vmov	r2, r3, d0
 800d8b6:	f7f2 feb7 	bl	8000628 <__aeabi_dmul>
 800d8ba:	4652      	mov	r2, sl
 800d8bc:	465b      	mov	r3, fp
 800d8be:	f7f2 fcfd 	bl	80002bc <__adddf3>
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	4981      	ldr	r1, [pc, #516]	; (800dacc <_strtod_l+0xbfc>)
 800d8c6:	4a83      	ldr	r2, [pc, #524]	; (800dad4 <_strtod_l+0xc04>)
 800d8c8:	4019      	ands	r1, r3
 800d8ca:	4291      	cmp	r1, r2
 800d8cc:	4682      	mov	sl, r0
 800d8ce:	d95e      	bls.n	800d98e <_strtod_l+0xabe>
 800d8d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d103      	bne.n	800d8e2 <_strtod_l+0xa12>
 800d8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8dc:	3301      	adds	r3, #1
 800d8de:	f43f ad43 	beq.w	800d368 <_strtod_l+0x498>
 800d8e2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800dae0 <_strtod_l+0xc10>
 800d8e6:	f04f 3aff 	mov.w	sl, #4294967295
 800d8ea:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	f001 fc7d 	bl	800f1ec <_Bfree>
 800d8f2:	9907      	ldr	r1, [sp, #28]
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f001 fc79 	bl	800f1ec <_Bfree>
 800d8fa:	4631      	mov	r1, r6
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	f001 fc75 	bl	800f1ec <_Bfree>
 800d902:	4629      	mov	r1, r5
 800d904:	4620      	mov	r0, r4
 800d906:	f001 fc71 	bl	800f1ec <_Bfree>
 800d90a:	e613      	b.n	800d534 <_strtod_l+0x664>
 800d90c:	f1ba 0f00 	cmp.w	sl, #0
 800d910:	d11b      	bne.n	800d94a <_strtod_l+0xa7a>
 800d912:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d916:	b9f3      	cbnz	r3, 800d956 <_strtod_l+0xa86>
 800d918:	4b6b      	ldr	r3, [pc, #428]	; (800dac8 <_strtod_l+0xbf8>)
 800d91a:	2200      	movs	r2, #0
 800d91c:	4640      	mov	r0, r8
 800d91e:	4649      	mov	r1, r9
 800d920:	f7f3 f8f4 	bl	8000b0c <__aeabi_dcmplt>
 800d924:	b9d0      	cbnz	r0, 800d95c <_strtod_l+0xa8c>
 800d926:	4640      	mov	r0, r8
 800d928:	4649      	mov	r1, r9
 800d92a:	4b6b      	ldr	r3, [pc, #428]	; (800dad8 <_strtod_l+0xc08>)
 800d92c:	2200      	movs	r2, #0
 800d92e:	f7f2 fe7b 	bl	8000628 <__aeabi_dmul>
 800d932:	4680      	mov	r8, r0
 800d934:	4689      	mov	r9, r1
 800d936:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d93a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d93e:	931b      	str	r3, [sp, #108]	; 0x6c
 800d940:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800d944:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d948:	e79b      	b.n	800d882 <_strtod_l+0x9b2>
 800d94a:	f1ba 0f01 	cmp.w	sl, #1
 800d94e:	d102      	bne.n	800d956 <_strtod_l+0xa86>
 800d950:	2f00      	cmp	r7, #0
 800d952:	f43f ad7e 	beq.w	800d452 <_strtod_l+0x582>
 800d956:	4b61      	ldr	r3, [pc, #388]	; (800dadc <_strtod_l+0xc0c>)
 800d958:	2200      	movs	r2, #0
 800d95a:	e78c      	b.n	800d876 <_strtod_l+0x9a6>
 800d95c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dad8 <_strtod_l+0xc08>
 800d960:	f04f 0800 	mov.w	r8, #0
 800d964:	e7e7      	b.n	800d936 <_strtod_l+0xa66>
 800d966:	4b5c      	ldr	r3, [pc, #368]	; (800dad8 <_strtod_l+0xc08>)
 800d968:	4640      	mov	r0, r8
 800d96a:	4649      	mov	r1, r9
 800d96c:	2200      	movs	r2, #0
 800d96e:	f7f2 fe5b 	bl	8000628 <__aeabi_dmul>
 800d972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d974:	4680      	mov	r8, r0
 800d976:	4689      	mov	r9, r1
 800d978:	b933      	cbnz	r3, 800d988 <_strtod_l+0xab8>
 800d97a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d97e:	9012      	str	r0, [sp, #72]	; 0x48
 800d980:	9313      	str	r3, [sp, #76]	; 0x4c
 800d982:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d986:	e7dd      	b.n	800d944 <_strtod_l+0xa74>
 800d988:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800d98c:	e7f9      	b.n	800d982 <_strtod_l+0xab2>
 800d98e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d992:	9b04      	ldr	r3, [sp, #16]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1a8      	bne.n	800d8ea <_strtod_l+0xa1a>
 800d998:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d99c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d99e:	0d1b      	lsrs	r3, r3, #20
 800d9a0:	051b      	lsls	r3, r3, #20
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d1a1      	bne.n	800d8ea <_strtod_l+0xa1a>
 800d9a6:	4640      	mov	r0, r8
 800d9a8:	4649      	mov	r1, r9
 800d9aa:	f7f3 f99d 	bl	8000ce8 <__aeabi_d2lz>
 800d9ae:	f7f2 fe0d 	bl	80005cc <__aeabi_l2d>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	4640      	mov	r0, r8
 800d9b8:	4649      	mov	r1, r9
 800d9ba:	f7f2 fc7d 	bl	80002b8 <__aeabi_dsub>
 800d9be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d9c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9c4:	ea43 030a 	orr.w	r3, r3, sl
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	4680      	mov	r8, r0
 800d9cc:	4689      	mov	r9, r1
 800d9ce:	d053      	beq.n	800da78 <_strtod_l+0xba8>
 800d9d0:	a335      	add	r3, pc, #212	; (adr r3, 800daa8 <_strtod_l+0xbd8>)
 800d9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d6:	f7f3 f899 	bl	8000b0c <__aeabi_dcmplt>
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	f47f acce 	bne.w	800d37c <_strtod_l+0x4ac>
 800d9e0:	a333      	add	r3, pc, #204	; (adr r3, 800dab0 <_strtod_l+0xbe0>)
 800d9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	4649      	mov	r1, r9
 800d9ea:	f7f3 f8ad 	bl	8000b48 <__aeabi_dcmpgt>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	f43f af7b 	beq.w	800d8ea <_strtod_l+0xa1a>
 800d9f4:	e4c2      	b.n	800d37c <_strtod_l+0x4ac>
 800d9f6:	9b04      	ldr	r3, [sp, #16]
 800d9f8:	b333      	cbz	r3, 800da48 <_strtod_l+0xb78>
 800d9fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d9fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800da00:	d822      	bhi.n	800da48 <_strtod_l+0xb78>
 800da02:	a32d      	add	r3, pc, #180	; (adr r3, 800dab8 <_strtod_l+0xbe8>)
 800da04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da08:	4640      	mov	r0, r8
 800da0a:	4649      	mov	r1, r9
 800da0c:	f7f3 f888 	bl	8000b20 <__aeabi_dcmple>
 800da10:	b1a0      	cbz	r0, 800da3c <_strtod_l+0xb6c>
 800da12:	4649      	mov	r1, r9
 800da14:	4640      	mov	r0, r8
 800da16:	f7f3 f8df 	bl	8000bd8 <__aeabi_d2uiz>
 800da1a:	2801      	cmp	r0, #1
 800da1c:	bf38      	it	cc
 800da1e:	2001      	movcc	r0, #1
 800da20:	f7f2 fd88 	bl	8000534 <__aeabi_ui2d>
 800da24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da26:	4680      	mov	r8, r0
 800da28:	4689      	mov	r9, r1
 800da2a:	bb13      	cbnz	r3, 800da72 <_strtod_l+0xba2>
 800da2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da30:	9014      	str	r0, [sp, #80]	; 0x50
 800da32:	9315      	str	r3, [sp, #84]	; 0x54
 800da34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800da38:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800da3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800da40:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800da44:	1a9b      	subs	r3, r3, r2
 800da46:	930d      	str	r3, [sp, #52]	; 0x34
 800da48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800da4c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800da50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800da54:	f001 fef6 	bl	800f844 <__ulp>
 800da58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800da5c:	ec53 2b10 	vmov	r2, r3, d0
 800da60:	f7f2 fde2 	bl	8000628 <__aeabi_dmul>
 800da64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800da68:	f7f2 fc28 	bl	80002bc <__adddf3>
 800da6c:	4682      	mov	sl, r0
 800da6e:	468b      	mov	fp, r1
 800da70:	e78f      	b.n	800d992 <_strtod_l+0xac2>
 800da72:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800da76:	e7dd      	b.n	800da34 <_strtod_l+0xb64>
 800da78:	a311      	add	r3, pc, #68	; (adr r3, 800dac0 <_strtod_l+0xbf0>)
 800da7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7e:	f7f3 f845 	bl	8000b0c <__aeabi_dcmplt>
 800da82:	e7b4      	b.n	800d9ee <_strtod_l+0xb1e>
 800da84:	2300      	movs	r3, #0
 800da86:	930e      	str	r3, [sp, #56]	; 0x38
 800da88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800da8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da8c:	6013      	str	r3, [r2, #0]
 800da8e:	f7ff ba65 	b.w	800cf5c <_strtod_l+0x8c>
 800da92:	2b65      	cmp	r3, #101	; 0x65
 800da94:	f43f ab5d 	beq.w	800d152 <_strtod_l+0x282>
 800da98:	2b45      	cmp	r3, #69	; 0x45
 800da9a:	f43f ab5a 	beq.w	800d152 <_strtod_l+0x282>
 800da9e:	2201      	movs	r2, #1
 800daa0:	f7ff bb92 	b.w	800d1c8 <_strtod_l+0x2f8>
 800daa4:	f3af 8000 	nop.w
 800daa8:	94a03595 	.word	0x94a03595
 800daac:	3fdfffff 	.word	0x3fdfffff
 800dab0:	35afe535 	.word	0x35afe535
 800dab4:	3fe00000 	.word	0x3fe00000
 800dab8:	ffc00000 	.word	0xffc00000
 800dabc:	41dfffff 	.word	0x41dfffff
 800dac0:	94a03595 	.word	0x94a03595
 800dac4:	3fcfffff 	.word	0x3fcfffff
 800dac8:	3ff00000 	.word	0x3ff00000
 800dacc:	7ff00000 	.word	0x7ff00000
 800dad0:	7fe00000 	.word	0x7fe00000
 800dad4:	7c9fffff 	.word	0x7c9fffff
 800dad8:	3fe00000 	.word	0x3fe00000
 800dadc:	bff00000 	.word	0xbff00000
 800dae0:	7fefffff 	.word	0x7fefffff

0800dae4 <_strtod_r>:
 800dae4:	4b01      	ldr	r3, [pc, #4]	; (800daec <_strtod_r+0x8>)
 800dae6:	f7ff b9f3 	b.w	800ced0 <_strtod_l>
 800daea:	bf00      	nop
 800daec:	200000a8 	.word	0x200000a8

0800daf0 <strtod>:
 800daf0:	460a      	mov	r2, r1
 800daf2:	4601      	mov	r1, r0
 800daf4:	4802      	ldr	r0, [pc, #8]	; (800db00 <strtod+0x10>)
 800daf6:	4b03      	ldr	r3, [pc, #12]	; (800db04 <strtod+0x14>)
 800daf8:	6800      	ldr	r0, [r0, #0]
 800dafa:	f7ff b9e9 	b.w	800ced0 <_strtod_l>
 800dafe:	bf00      	nop
 800db00:	20000040 	.word	0x20000040
 800db04:	200000a8 	.word	0x200000a8

0800db08 <strtok>:
 800db08:	4b16      	ldr	r3, [pc, #88]	; (800db64 <strtok+0x5c>)
 800db0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db0c:	681e      	ldr	r6, [r3, #0]
 800db0e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800db10:	4605      	mov	r5, r0
 800db12:	b9fc      	cbnz	r4, 800db54 <strtok+0x4c>
 800db14:	2050      	movs	r0, #80	; 0x50
 800db16:	9101      	str	r1, [sp, #4]
 800db18:	f001 fb00 	bl	800f11c <malloc>
 800db1c:	9901      	ldr	r1, [sp, #4]
 800db1e:	65b0      	str	r0, [r6, #88]	; 0x58
 800db20:	4602      	mov	r2, r0
 800db22:	b920      	cbnz	r0, 800db2e <strtok+0x26>
 800db24:	4b10      	ldr	r3, [pc, #64]	; (800db68 <strtok+0x60>)
 800db26:	4811      	ldr	r0, [pc, #68]	; (800db6c <strtok+0x64>)
 800db28:	2157      	movs	r1, #87	; 0x57
 800db2a:	f000 f8d9 	bl	800dce0 <__assert_func>
 800db2e:	e9c0 4400 	strd	r4, r4, [r0]
 800db32:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800db36:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800db3a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800db3e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800db42:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800db46:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800db4a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800db4e:	6184      	str	r4, [r0, #24]
 800db50:	7704      	strb	r4, [r0, #28]
 800db52:	6244      	str	r4, [r0, #36]	; 0x24
 800db54:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800db56:	2301      	movs	r3, #1
 800db58:	4628      	mov	r0, r5
 800db5a:	b002      	add	sp, #8
 800db5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db60:	f000 b806 	b.w	800db70 <__strtok_r>
 800db64:	20000040 	.word	0x20000040
 800db68:	080241a0 	.word	0x080241a0
 800db6c:	080241b7 	.word	0x080241b7

0800db70 <__strtok_r>:
 800db70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db72:	b908      	cbnz	r0, 800db78 <__strtok_r+0x8>
 800db74:	6810      	ldr	r0, [r2, #0]
 800db76:	b188      	cbz	r0, 800db9c <__strtok_r+0x2c>
 800db78:	4604      	mov	r4, r0
 800db7a:	4620      	mov	r0, r4
 800db7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800db80:	460f      	mov	r7, r1
 800db82:	f817 6b01 	ldrb.w	r6, [r7], #1
 800db86:	b91e      	cbnz	r6, 800db90 <__strtok_r+0x20>
 800db88:	b965      	cbnz	r5, 800dba4 <__strtok_r+0x34>
 800db8a:	6015      	str	r5, [r2, #0]
 800db8c:	4628      	mov	r0, r5
 800db8e:	e005      	b.n	800db9c <__strtok_r+0x2c>
 800db90:	42b5      	cmp	r5, r6
 800db92:	d1f6      	bne.n	800db82 <__strtok_r+0x12>
 800db94:	2b00      	cmp	r3, #0
 800db96:	d1f0      	bne.n	800db7a <__strtok_r+0xa>
 800db98:	6014      	str	r4, [r2, #0]
 800db9a:	7003      	strb	r3, [r0, #0]
 800db9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db9e:	461c      	mov	r4, r3
 800dba0:	e00c      	b.n	800dbbc <__strtok_r+0x4c>
 800dba2:	b915      	cbnz	r5, 800dbaa <__strtok_r+0x3a>
 800dba4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dba8:	460e      	mov	r6, r1
 800dbaa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800dbae:	42ab      	cmp	r3, r5
 800dbb0:	d1f7      	bne.n	800dba2 <__strtok_r+0x32>
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d0f3      	beq.n	800db9e <__strtok_r+0x2e>
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800dbbc:	6014      	str	r4, [r2, #0]
 800dbbe:	e7ed      	b.n	800db9c <__strtok_r+0x2c>

0800dbc0 <_strtol_l.isra.0>:
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc6:	d001      	beq.n	800dbcc <_strtol_l.isra.0+0xc>
 800dbc8:	2b24      	cmp	r3, #36	; 0x24
 800dbca:	d906      	bls.n	800dbda <_strtol_l.isra.0+0x1a>
 800dbcc:	f7fe fa92 	bl	800c0f4 <__errno>
 800dbd0:	2316      	movs	r3, #22
 800dbd2:	6003      	str	r3, [r0, #0]
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbda:	4f3a      	ldr	r7, [pc, #232]	; (800dcc4 <_strtol_l.isra.0+0x104>)
 800dbdc:	468e      	mov	lr, r1
 800dbde:	4676      	mov	r6, lr
 800dbe0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800dbe4:	5de5      	ldrb	r5, [r4, r7]
 800dbe6:	f015 0508 	ands.w	r5, r5, #8
 800dbea:	d1f8      	bne.n	800dbde <_strtol_l.isra.0+0x1e>
 800dbec:	2c2d      	cmp	r4, #45	; 0x2d
 800dbee:	d134      	bne.n	800dc5a <_strtol_l.isra.0+0x9a>
 800dbf0:	f89e 4000 	ldrb.w	r4, [lr]
 800dbf4:	f04f 0801 	mov.w	r8, #1
 800dbf8:	f106 0e02 	add.w	lr, r6, #2
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d05c      	beq.n	800dcba <_strtol_l.isra.0+0xfa>
 800dc00:	2b10      	cmp	r3, #16
 800dc02:	d10c      	bne.n	800dc1e <_strtol_l.isra.0+0x5e>
 800dc04:	2c30      	cmp	r4, #48	; 0x30
 800dc06:	d10a      	bne.n	800dc1e <_strtol_l.isra.0+0x5e>
 800dc08:	f89e 4000 	ldrb.w	r4, [lr]
 800dc0c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dc10:	2c58      	cmp	r4, #88	; 0x58
 800dc12:	d14d      	bne.n	800dcb0 <_strtol_l.isra.0+0xf0>
 800dc14:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800dc18:	2310      	movs	r3, #16
 800dc1a:	f10e 0e02 	add.w	lr, lr, #2
 800dc1e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800dc22:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dc26:	2600      	movs	r6, #0
 800dc28:	fbbc f9f3 	udiv	r9, ip, r3
 800dc2c:	4635      	mov	r5, r6
 800dc2e:	fb03 ca19 	mls	sl, r3, r9, ip
 800dc32:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800dc36:	2f09      	cmp	r7, #9
 800dc38:	d818      	bhi.n	800dc6c <_strtol_l.isra.0+0xac>
 800dc3a:	463c      	mov	r4, r7
 800dc3c:	42a3      	cmp	r3, r4
 800dc3e:	dd24      	ble.n	800dc8a <_strtol_l.isra.0+0xca>
 800dc40:	2e00      	cmp	r6, #0
 800dc42:	db1f      	blt.n	800dc84 <_strtol_l.isra.0+0xc4>
 800dc44:	45a9      	cmp	r9, r5
 800dc46:	d31d      	bcc.n	800dc84 <_strtol_l.isra.0+0xc4>
 800dc48:	d101      	bne.n	800dc4e <_strtol_l.isra.0+0x8e>
 800dc4a:	45a2      	cmp	sl, r4
 800dc4c:	db1a      	blt.n	800dc84 <_strtol_l.isra.0+0xc4>
 800dc4e:	fb05 4503 	mla	r5, r5, r3, r4
 800dc52:	2601      	movs	r6, #1
 800dc54:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800dc58:	e7eb      	b.n	800dc32 <_strtol_l.isra.0+0x72>
 800dc5a:	2c2b      	cmp	r4, #43	; 0x2b
 800dc5c:	bf08      	it	eq
 800dc5e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800dc62:	46a8      	mov	r8, r5
 800dc64:	bf08      	it	eq
 800dc66:	f106 0e02 	addeq.w	lr, r6, #2
 800dc6a:	e7c7      	b.n	800dbfc <_strtol_l.isra.0+0x3c>
 800dc6c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800dc70:	2f19      	cmp	r7, #25
 800dc72:	d801      	bhi.n	800dc78 <_strtol_l.isra.0+0xb8>
 800dc74:	3c37      	subs	r4, #55	; 0x37
 800dc76:	e7e1      	b.n	800dc3c <_strtol_l.isra.0+0x7c>
 800dc78:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800dc7c:	2f19      	cmp	r7, #25
 800dc7e:	d804      	bhi.n	800dc8a <_strtol_l.isra.0+0xca>
 800dc80:	3c57      	subs	r4, #87	; 0x57
 800dc82:	e7db      	b.n	800dc3c <_strtol_l.isra.0+0x7c>
 800dc84:	f04f 36ff 	mov.w	r6, #4294967295
 800dc88:	e7e4      	b.n	800dc54 <_strtol_l.isra.0+0x94>
 800dc8a:	2e00      	cmp	r6, #0
 800dc8c:	da05      	bge.n	800dc9a <_strtol_l.isra.0+0xda>
 800dc8e:	2322      	movs	r3, #34	; 0x22
 800dc90:	6003      	str	r3, [r0, #0]
 800dc92:	4665      	mov	r5, ip
 800dc94:	b942      	cbnz	r2, 800dca8 <_strtol_l.isra.0+0xe8>
 800dc96:	4628      	mov	r0, r5
 800dc98:	e79d      	b.n	800dbd6 <_strtol_l.isra.0+0x16>
 800dc9a:	f1b8 0f00 	cmp.w	r8, #0
 800dc9e:	d000      	beq.n	800dca2 <_strtol_l.isra.0+0xe2>
 800dca0:	426d      	negs	r5, r5
 800dca2:	2a00      	cmp	r2, #0
 800dca4:	d0f7      	beq.n	800dc96 <_strtol_l.isra.0+0xd6>
 800dca6:	b10e      	cbz	r6, 800dcac <_strtol_l.isra.0+0xec>
 800dca8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800dcac:	6011      	str	r1, [r2, #0]
 800dcae:	e7f2      	b.n	800dc96 <_strtol_l.isra.0+0xd6>
 800dcb0:	2430      	movs	r4, #48	; 0x30
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1b3      	bne.n	800dc1e <_strtol_l.isra.0+0x5e>
 800dcb6:	2308      	movs	r3, #8
 800dcb8:	e7b1      	b.n	800dc1e <_strtol_l.isra.0+0x5e>
 800dcba:	2c30      	cmp	r4, #48	; 0x30
 800dcbc:	d0a4      	beq.n	800dc08 <_strtol_l.isra.0+0x48>
 800dcbe:	230a      	movs	r3, #10
 800dcc0:	e7ad      	b.n	800dc1e <_strtol_l.isra.0+0x5e>
 800dcc2:	bf00      	nop
 800dcc4:	08024255 	.word	0x08024255

0800dcc8 <_strtol_r>:
 800dcc8:	f7ff bf7a 	b.w	800dbc0 <_strtol_l.isra.0>

0800dccc <strtol>:
 800dccc:	4613      	mov	r3, r2
 800dcce:	460a      	mov	r2, r1
 800dcd0:	4601      	mov	r1, r0
 800dcd2:	4802      	ldr	r0, [pc, #8]	; (800dcdc <strtol+0x10>)
 800dcd4:	6800      	ldr	r0, [r0, #0]
 800dcd6:	f7ff bf73 	b.w	800dbc0 <_strtol_l.isra.0>
 800dcda:	bf00      	nop
 800dcdc:	20000040 	.word	0x20000040

0800dce0 <__assert_func>:
 800dce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dce2:	4614      	mov	r4, r2
 800dce4:	461a      	mov	r2, r3
 800dce6:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <__assert_func+0x2c>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4605      	mov	r5, r0
 800dcec:	68d8      	ldr	r0, [r3, #12]
 800dcee:	b14c      	cbz	r4, 800dd04 <__assert_func+0x24>
 800dcf0:	4b07      	ldr	r3, [pc, #28]	; (800dd10 <__assert_func+0x30>)
 800dcf2:	9100      	str	r1, [sp, #0]
 800dcf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dcf8:	4906      	ldr	r1, [pc, #24]	; (800dd14 <__assert_func+0x34>)
 800dcfa:	462b      	mov	r3, r5
 800dcfc:	f000 fe88 	bl	800ea10 <fiprintf>
 800dd00:	f002 fb56 	bl	80103b0 <abort>
 800dd04:	4b04      	ldr	r3, [pc, #16]	; (800dd18 <__assert_func+0x38>)
 800dd06:	461c      	mov	r4, r3
 800dd08:	e7f3      	b.n	800dcf2 <__assert_func+0x12>
 800dd0a:	bf00      	nop
 800dd0c:	20000040 	.word	0x20000040
 800dd10:	08024218 	.word	0x08024218
 800dd14:	08024225 	.word	0x08024225
 800dd18:	08024253 	.word	0x08024253

0800dd1c <quorem>:
 800dd1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd20:	6903      	ldr	r3, [r0, #16]
 800dd22:	690c      	ldr	r4, [r1, #16]
 800dd24:	42a3      	cmp	r3, r4
 800dd26:	4607      	mov	r7, r0
 800dd28:	f2c0 8081 	blt.w	800de2e <quorem+0x112>
 800dd2c:	3c01      	subs	r4, #1
 800dd2e:	f101 0814 	add.w	r8, r1, #20
 800dd32:	f100 0514 	add.w	r5, r0, #20
 800dd36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd3a:	9301      	str	r3, [sp, #4]
 800dd3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd44:	3301      	adds	r3, #1
 800dd46:	429a      	cmp	r2, r3
 800dd48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dd4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dd50:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd54:	d331      	bcc.n	800ddba <quorem+0x9e>
 800dd56:	f04f 0e00 	mov.w	lr, #0
 800dd5a:	4640      	mov	r0, r8
 800dd5c:	46ac      	mov	ip, r5
 800dd5e:	46f2      	mov	sl, lr
 800dd60:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd64:	b293      	uxth	r3, r2
 800dd66:	fb06 e303 	mla	r3, r6, r3, lr
 800dd6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	ebaa 0303 	sub.w	r3, sl, r3
 800dd74:	0c12      	lsrs	r2, r2, #16
 800dd76:	f8dc a000 	ldr.w	sl, [ip]
 800dd7a:	fb06 e202 	mla	r2, r6, r2, lr
 800dd7e:	fa13 f38a 	uxtah	r3, r3, sl
 800dd82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd86:	fa1f fa82 	uxth.w	sl, r2
 800dd8a:	f8dc 2000 	ldr.w	r2, [ip]
 800dd8e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800dd92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd9c:	4581      	cmp	r9, r0
 800dd9e:	f84c 3b04 	str.w	r3, [ip], #4
 800dda2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dda6:	d2db      	bcs.n	800dd60 <quorem+0x44>
 800dda8:	f855 300b 	ldr.w	r3, [r5, fp]
 800ddac:	b92b      	cbnz	r3, 800ddba <quorem+0x9e>
 800ddae:	9b01      	ldr	r3, [sp, #4]
 800ddb0:	3b04      	subs	r3, #4
 800ddb2:	429d      	cmp	r5, r3
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	d32e      	bcc.n	800de16 <quorem+0xfa>
 800ddb8:	613c      	str	r4, [r7, #16]
 800ddba:	4638      	mov	r0, r7
 800ddbc:	f001 fc9e 	bl	800f6fc <__mcmp>
 800ddc0:	2800      	cmp	r0, #0
 800ddc2:	db24      	blt.n	800de0e <quorem+0xf2>
 800ddc4:	3601      	adds	r6, #1
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	f04f 0c00 	mov.w	ip, #0
 800ddcc:	f858 2b04 	ldr.w	r2, [r8], #4
 800ddd0:	f8d0 e000 	ldr.w	lr, [r0]
 800ddd4:	b293      	uxth	r3, r2
 800ddd6:	ebac 0303 	sub.w	r3, ip, r3
 800ddda:	0c12      	lsrs	r2, r2, #16
 800dddc:	fa13 f38e 	uxtah	r3, r3, lr
 800dde0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dde4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ddee:	45c1      	cmp	r9, r8
 800ddf0:	f840 3b04 	str.w	r3, [r0], #4
 800ddf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ddf8:	d2e8      	bcs.n	800ddcc <quorem+0xb0>
 800ddfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de02:	b922      	cbnz	r2, 800de0e <quorem+0xf2>
 800de04:	3b04      	subs	r3, #4
 800de06:	429d      	cmp	r5, r3
 800de08:	461a      	mov	r2, r3
 800de0a:	d30a      	bcc.n	800de22 <quorem+0x106>
 800de0c:	613c      	str	r4, [r7, #16]
 800de0e:	4630      	mov	r0, r6
 800de10:	b003      	add	sp, #12
 800de12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de16:	6812      	ldr	r2, [r2, #0]
 800de18:	3b04      	subs	r3, #4
 800de1a:	2a00      	cmp	r2, #0
 800de1c:	d1cc      	bne.n	800ddb8 <quorem+0x9c>
 800de1e:	3c01      	subs	r4, #1
 800de20:	e7c7      	b.n	800ddb2 <quorem+0x96>
 800de22:	6812      	ldr	r2, [r2, #0]
 800de24:	3b04      	subs	r3, #4
 800de26:	2a00      	cmp	r2, #0
 800de28:	d1f0      	bne.n	800de0c <quorem+0xf0>
 800de2a:	3c01      	subs	r4, #1
 800de2c:	e7eb      	b.n	800de06 <quorem+0xea>
 800de2e:	2000      	movs	r0, #0
 800de30:	e7ee      	b.n	800de10 <quorem+0xf4>
 800de32:	0000      	movs	r0, r0
 800de34:	0000      	movs	r0, r0
	...

0800de38 <_dtoa_r>:
 800de38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3c:	ed2d 8b02 	vpush	{d8}
 800de40:	ec57 6b10 	vmov	r6, r7, d0
 800de44:	b095      	sub	sp, #84	; 0x54
 800de46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800de48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800de4c:	9105      	str	r1, [sp, #20]
 800de4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800de52:	4604      	mov	r4, r0
 800de54:	9209      	str	r2, [sp, #36]	; 0x24
 800de56:	930f      	str	r3, [sp, #60]	; 0x3c
 800de58:	b975      	cbnz	r5, 800de78 <_dtoa_r+0x40>
 800de5a:	2010      	movs	r0, #16
 800de5c:	f001 f95e 	bl	800f11c <malloc>
 800de60:	4602      	mov	r2, r0
 800de62:	6260      	str	r0, [r4, #36]	; 0x24
 800de64:	b920      	cbnz	r0, 800de70 <_dtoa_r+0x38>
 800de66:	4bb2      	ldr	r3, [pc, #712]	; (800e130 <_dtoa_r+0x2f8>)
 800de68:	21ea      	movs	r1, #234	; 0xea
 800de6a:	48b2      	ldr	r0, [pc, #712]	; (800e134 <_dtoa_r+0x2fc>)
 800de6c:	f7ff ff38 	bl	800dce0 <__assert_func>
 800de70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de74:	6005      	str	r5, [r0, #0]
 800de76:	60c5      	str	r5, [r0, #12]
 800de78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de7a:	6819      	ldr	r1, [r3, #0]
 800de7c:	b151      	cbz	r1, 800de94 <_dtoa_r+0x5c>
 800de7e:	685a      	ldr	r2, [r3, #4]
 800de80:	604a      	str	r2, [r1, #4]
 800de82:	2301      	movs	r3, #1
 800de84:	4093      	lsls	r3, r2
 800de86:	608b      	str	r3, [r1, #8]
 800de88:	4620      	mov	r0, r4
 800de8a:	f001 f9af 	bl	800f1ec <_Bfree>
 800de8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de90:	2200      	movs	r2, #0
 800de92:	601a      	str	r2, [r3, #0]
 800de94:	1e3b      	subs	r3, r7, #0
 800de96:	bfb9      	ittee	lt
 800de98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800de9c:	9303      	strlt	r3, [sp, #12]
 800de9e:	2300      	movge	r3, #0
 800dea0:	f8c8 3000 	strge.w	r3, [r8]
 800dea4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800dea8:	4ba3      	ldr	r3, [pc, #652]	; (800e138 <_dtoa_r+0x300>)
 800deaa:	bfbc      	itt	lt
 800deac:	2201      	movlt	r2, #1
 800deae:	f8c8 2000 	strlt.w	r2, [r8]
 800deb2:	ea33 0309 	bics.w	r3, r3, r9
 800deb6:	d11b      	bne.n	800def0 <_dtoa_r+0xb8>
 800deb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800deba:	f242 730f 	movw	r3, #9999	; 0x270f
 800debe:	6013      	str	r3, [r2, #0]
 800dec0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dec4:	4333      	orrs	r3, r6
 800dec6:	f000 857a 	beq.w	800e9be <_dtoa_r+0xb86>
 800deca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800decc:	b963      	cbnz	r3, 800dee8 <_dtoa_r+0xb0>
 800dece:	4b9b      	ldr	r3, [pc, #620]	; (800e13c <_dtoa_r+0x304>)
 800ded0:	e024      	b.n	800df1c <_dtoa_r+0xe4>
 800ded2:	4b9b      	ldr	r3, [pc, #620]	; (800e140 <_dtoa_r+0x308>)
 800ded4:	9300      	str	r3, [sp, #0]
 800ded6:	3308      	adds	r3, #8
 800ded8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800deda:	6013      	str	r3, [r2, #0]
 800dedc:	9800      	ldr	r0, [sp, #0]
 800dede:	b015      	add	sp, #84	; 0x54
 800dee0:	ecbd 8b02 	vpop	{d8}
 800dee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dee8:	4b94      	ldr	r3, [pc, #592]	; (800e13c <_dtoa_r+0x304>)
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	3303      	adds	r3, #3
 800deee:	e7f3      	b.n	800ded8 <_dtoa_r+0xa0>
 800def0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800def4:	2200      	movs	r2, #0
 800def6:	ec51 0b17 	vmov	r0, r1, d7
 800defa:	2300      	movs	r3, #0
 800defc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800df00:	f7f2 fdfa 	bl	8000af8 <__aeabi_dcmpeq>
 800df04:	4680      	mov	r8, r0
 800df06:	b158      	cbz	r0, 800df20 <_dtoa_r+0xe8>
 800df08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df0a:	2301      	movs	r3, #1
 800df0c:	6013      	str	r3, [r2, #0]
 800df0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df10:	2b00      	cmp	r3, #0
 800df12:	f000 8551 	beq.w	800e9b8 <_dtoa_r+0xb80>
 800df16:	488b      	ldr	r0, [pc, #556]	; (800e144 <_dtoa_r+0x30c>)
 800df18:	6018      	str	r0, [r3, #0]
 800df1a:	1e43      	subs	r3, r0, #1
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	e7dd      	b.n	800dedc <_dtoa_r+0xa4>
 800df20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800df24:	aa12      	add	r2, sp, #72	; 0x48
 800df26:	a913      	add	r1, sp, #76	; 0x4c
 800df28:	4620      	mov	r0, r4
 800df2a:	f001 fd07 	bl	800f93c <__d2b>
 800df2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800df32:	4683      	mov	fp, r0
 800df34:	2d00      	cmp	r5, #0
 800df36:	d07c      	beq.n	800e032 <_dtoa_r+0x1fa>
 800df38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800df3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800df46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800df4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800df4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800df52:	4b7d      	ldr	r3, [pc, #500]	; (800e148 <_dtoa_r+0x310>)
 800df54:	2200      	movs	r2, #0
 800df56:	4630      	mov	r0, r6
 800df58:	4639      	mov	r1, r7
 800df5a:	f7f2 f9ad 	bl	80002b8 <__aeabi_dsub>
 800df5e:	a36e      	add	r3, pc, #440	; (adr r3, 800e118 <_dtoa_r+0x2e0>)
 800df60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df64:	f7f2 fb60 	bl	8000628 <__aeabi_dmul>
 800df68:	a36d      	add	r3, pc, #436	; (adr r3, 800e120 <_dtoa_r+0x2e8>)
 800df6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6e:	f7f2 f9a5 	bl	80002bc <__adddf3>
 800df72:	4606      	mov	r6, r0
 800df74:	4628      	mov	r0, r5
 800df76:	460f      	mov	r7, r1
 800df78:	f7f2 faec 	bl	8000554 <__aeabi_i2d>
 800df7c:	a36a      	add	r3, pc, #424	; (adr r3, 800e128 <_dtoa_r+0x2f0>)
 800df7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df82:	f7f2 fb51 	bl	8000628 <__aeabi_dmul>
 800df86:	4602      	mov	r2, r0
 800df88:	460b      	mov	r3, r1
 800df8a:	4630      	mov	r0, r6
 800df8c:	4639      	mov	r1, r7
 800df8e:	f7f2 f995 	bl	80002bc <__adddf3>
 800df92:	4606      	mov	r6, r0
 800df94:	460f      	mov	r7, r1
 800df96:	f7f2 fdf7 	bl	8000b88 <__aeabi_d2iz>
 800df9a:	2200      	movs	r2, #0
 800df9c:	4682      	mov	sl, r0
 800df9e:	2300      	movs	r3, #0
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	4639      	mov	r1, r7
 800dfa4:	f7f2 fdb2 	bl	8000b0c <__aeabi_dcmplt>
 800dfa8:	b148      	cbz	r0, 800dfbe <_dtoa_r+0x186>
 800dfaa:	4650      	mov	r0, sl
 800dfac:	f7f2 fad2 	bl	8000554 <__aeabi_i2d>
 800dfb0:	4632      	mov	r2, r6
 800dfb2:	463b      	mov	r3, r7
 800dfb4:	f7f2 fda0 	bl	8000af8 <__aeabi_dcmpeq>
 800dfb8:	b908      	cbnz	r0, 800dfbe <_dtoa_r+0x186>
 800dfba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dfbe:	f1ba 0f16 	cmp.w	sl, #22
 800dfc2:	d854      	bhi.n	800e06e <_dtoa_r+0x236>
 800dfc4:	4b61      	ldr	r3, [pc, #388]	; (800e14c <_dtoa_r+0x314>)
 800dfc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dfd2:	f7f2 fd9b 	bl	8000b0c <__aeabi_dcmplt>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d04b      	beq.n	800e072 <_dtoa_r+0x23a>
 800dfda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dfde:	2300      	movs	r3, #0
 800dfe0:	930e      	str	r3, [sp, #56]	; 0x38
 800dfe2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dfe4:	1b5d      	subs	r5, r3, r5
 800dfe6:	1e6b      	subs	r3, r5, #1
 800dfe8:	9304      	str	r3, [sp, #16]
 800dfea:	bf43      	ittte	mi
 800dfec:	2300      	movmi	r3, #0
 800dfee:	f1c5 0801 	rsbmi	r8, r5, #1
 800dff2:	9304      	strmi	r3, [sp, #16]
 800dff4:	f04f 0800 	movpl.w	r8, #0
 800dff8:	f1ba 0f00 	cmp.w	sl, #0
 800dffc:	db3b      	blt.n	800e076 <_dtoa_r+0x23e>
 800dffe:	9b04      	ldr	r3, [sp, #16]
 800e000:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e004:	4453      	add	r3, sl
 800e006:	9304      	str	r3, [sp, #16]
 800e008:	2300      	movs	r3, #0
 800e00a:	9306      	str	r3, [sp, #24]
 800e00c:	9b05      	ldr	r3, [sp, #20]
 800e00e:	2b09      	cmp	r3, #9
 800e010:	d869      	bhi.n	800e0e6 <_dtoa_r+0x2ae>
 800e012:	2b05      	cmp	r3, #5
 800e014:	bfc4      	itt	gt
 800e016:	3b04      	subgt	r3, #4
 800e018:	9305      	strgt	r3, [sp, #20]
 800e01a:	9b05      	ldr	r3, [sp, #20]
 800e01c:	f1a3 0302 	sub.w	r3, r3, #2
 800e020:	bfcc      	ite	gt
 800e022:	2500      	movgt	r5, #0
 800e024:	2501      	movle	r5, #1
 800e026:	2b03      	cmp	r3, #3
 800e028:	d869      	bhi.n	800e0fe <_dtoa_r+0x2c6>
 800e02a:	e8df f003 	tbb	[pc, r3]
 800e02e:	4e2c      	.short	0x4e2c
 800e030:	5a4c      	.short	0x5a4c
 800e032:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e036:	441d      	add	r5, r3
 800e038:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e03c:	2b20      	cmp	r3, #32
 800e03e:	bfc1      	itttt	gt
 800e040:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e044:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e048:	fa09 f303 	lslgt.w	r3, r9, r3
 800e04c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e050:	bfda      	itte	le
 800e052:	f1c3 0320 	rsble	r3, r3, #32
 800e056:	fa06 f003 	lslle.w	r0, r6, r3
 800e05a:	4318      	orrgt	r0, r3
 800e05c:	f7f2 fa6a 	bl	8000534 <__aeabi_ui2d>
 800e060:	2301      	movs	r3, #1
 800e062:	4606      	mov	r6, r0
 800e064:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e068:	3d01      	subs	r5, #1
 800e06a:	9310      	str	r3, [sp, #64]	; 0x40
 800e06c:	e771      	b.n	800df52 <_dtoa_r+0x11a>
 800e06e:	2301      	movs	r3, #1
 800e070:	e7b6      	b.n	800dfe0 <_dtoa_r+0x1a8>
 800e072:	900e      	str	r0, [sp, #56]	; 0x38
 800e074:	e7b5      	b.n	800dfe2 <_dtoa_r+0x1aa>
 800e076:	f1ca 0300 	rsb	r3, sl, #0
 800e07a:	9306      	str	r3, [sp, #24]
 800e07c:	2300      	movs	r3, #0
 800e07e:	eba8 080a 	sub.w	r8, r8, sl
 800e082:	930d      	str	r3, [sp, #52]	; 0x34
 800e084:	e7c2      	b.n	800e00c <_dtoa_r+0x1d4>
 800e086:	2300      	movs	r3, #0
 800e088:	9308      	str	r3, [sp, #32]
 800e08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	dc39      	bgt.n	800e104 <_dtoa_r+0x2cc>
 800e090:	f04f 0901 	mov.w	r9, #1
 800e094:	f8cd 9004 	str.w	r9, [sp, #4]
 800e098:	464b      	mov	r3, r9
 800e09a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e09e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	6042      	str	r2, [r0, #4]
 800e0a4:	2204      	movs	r2, #4
 800e0a6:	f102 0614 	add.w	r6, r2, #20
 800e0aa:	429e      	cmp	r6, r3
 800e0ac:	6841      	ldr	r1, [r0, #4]
 800e0ae:	d92f      	bls.n	800e110 <_dtoa_r+0x2d8>
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f001 f85b 	bl	800f16c <_Balloc>
 800e0b6:	9000      	str	r0, [sp, #0]
 800e0b8:	2800      	cmp	r0, #0
 800e0ba:	d14b      	bne.n	800e154 <_dtoa_r+0x31c>
 800e0bc:	4b24      	ldr	r3, [pc, #144]	; (800e150 <_dtoa_r+0x318>)
 800e0be:	4602      	mov	r2, r0
 800e0c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e0c4:	e6d1      	b.n	800de6a <_dtoa_r+0x32>
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	e7de      	b.n	800e088 <_dtoa_r+0x250>
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	9308      	str	r3, [sp, #32]
 800e0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0d0:	eb0a 0903 	add.w	r9, sl, r3
 800e0d4:	f109 0301 	add.w	r3, r9, #1
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	9301      	str	r3, [sp, #4]
 800e0dc:	bfb8      	it	lt
 800e0de:	2301      	movlt	r3, #1
 800e0e0:	e7dd      	b.n	800e09e <_dtoa_r+0x266>
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e7f2      	b.n	800e0cc <_dtoa_r+0x294>
 800e0e6:	2501      	movs	r5, #1
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	9305      	str	r3, [sp, #20]
 800e0ec:	9508      	str	r5, [sp, #32]
 800e0ee:	f04f 39ff 	mov.w	r9, #4294967295
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e0f8:	2312      	movs	r3, #18
 800e0fa:	9209      	str	r2, [sp, #36]	; 0x24
 800e0fc:	e7cf      	b.n	800e09e <_dtoa_r+0x266>
 800e0fe:	2301      	movs	r3, #1
 800e100:	9308      	str	r3, [sp, #32]
 800e102:	e7f4      	b.n	800e0ee <_dtoa_r+0x2b6>
 800e104:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e108:	f8cd 9004 	str.w	r9, [sp, #4]
 800e10c:	464b      	mov	r3, r9
 800e10e:	e7c6      	b.n	800e09e <_dtoa_r+0x266>
 800e110:	3101      	adds	r1, #1
 800e112:	6041      	str	r1, [r0, #4]
 800e114:	0052      	lsls	r2, r2, #1
 800e116:	e7c6      	b.n	800e0a6 <_dtoa_r+0x26e>
 800e118:	636f4361 	.word	0x636f4361
 800e11c:	3fd287a7 	.word	0x3fd287a7
 800e120:	8b60c8b3 	.word	0x8b60c8b3
 800e124:	3fc68a28 	.word	0x3fc68a28
 800e128:	509f79fb 	.word	0x509f79fb
 800e12c:	3fd34413 	.word	0x3fd34413
 800e130:	080241a0 	.word	0x080241a0
 800e134:	08024362 	.word	0x08024362
 800e138:	7ff00000 	.word	0x7ff00000
 800e13c:	0802435e 	.word	0x0802435e
 800e140:	08024355 	.word	0x08024355
 800e144:	08024121 	.word	0x08024121
 800e148:	3ff80000 	.word	0x3ff80000
 800e14c:	080244d8 	.word	0x080244d8
 800e150:	080243c1 	.word	0x080243c1
 800e154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e156:	9a00      	ldr	r2, [sp, #0]
 800e158:	601a      	str	r2, [r3, #0]
 800e15a:	9b01      	ldr	r3, [sp, #4]
 800e15c:	2b0e      	cmp	r3, #14
 800e15e:	f200 80ad 	bhi.w	800e2bc <_dtoa_r+0x484>
 800e162:	2d00      	cmp	r5, #0
 800e164:	f000 80aa 	beq.w	800e2bc <_dtoa_r+0x484>
 800e168:	f1ba 0f00 	cmp.w	sl, #0
 800e16c:	dd36      	ble.n	800e1dc <_dtoa_r+0x3a4>
 800e16e:	4ac3      	ldr	r2, [pc, #780]	; (800e47c <_dtoa_r+0x644>)
 800e170:	f00a 030f 	and.w	r3, sl, #15
 800e174:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e178:	ed93 7b00 	vldr	d7, [r3]
 800e17c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e180:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e184:	eeb0 8a47 	vmov.f32	s16, s14
 800e188:	eef0 8a67 	vmov.f32	s17, s15
 800e18c:	d016      	beq.n	800e1bc <_dtoa_r+0x384>
 800e18e:	4bbc      	ldr	r3, [pc, #752]	; (800e480 <_dtoa_r+0x648>)
 800e190:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e198:	f7f2 fb70 	bl	800087c <__aeabi_ddiv>
 800e19c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1a0:	f007 070f 	and.w	r7, r7, #15
 800e1a4:	2503      	movs	r5, #3
 800e1a6:	4eb6      	ldr	r6, [pc, #728]	; (800e480 <_dtoa_r+0x648>)
 800e1a8:	b957      	cbnz	r7, 800e1c0 <_dtoa_r+0x388>
 800e1aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1ae:	ec53 2b18 	vmov	r2, r3, d8
 800e1b2:	f7f2 fb63 	bl	800087c <__aeabi_ddiv>
 800e1b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1ba:	e029      	b.n	800e210 <_dtoa_r+0x3d8>
 800e1bc:	2502      	movs	r5, #2
 800e1be:	e7f2      	b.n	800e1a6 <_dtoa_r+0x36e>
 800e1c0:	07f9      	lsls	r1, r7, #31
 800e1c2:	d508      	bpl.n	800e1d6 <_dtoa_r+0x39e>
 800e1c4:	ec51 0b18 	vmov	r0, r1, d8
 800e1c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e1cc:	f7f2 fa2c 	bl	8000628 <__aeabi_dmul>
 800e1d0:	ec41 0b18 	vmov	d8, r0, r1
 800e1d4:	3501      	adds	r5, #1
 800e1d6:	107f      	asrs	r7, r7, #1
 800e1d8:	3608      	adds	r6, #8
 800e1da:	e7e5      	b.n	800e1a8 <_dtoa_r+0x370>
 800e1dc:	f000 80a6 	beq.w	800e32c <_dtoa_r+0x4f4>
 800e1e0:	f1ca 0600 	rsb	r6, sl, #0
 800e1e4:	4ba5      	ldr	r3, [pc, #660]	; (800e47c <_dtoa_r+0x644>)
 800e1e6:	4fa6      	ldr	r7, [pc, #664]	; (800e480 <_dtoa_r+0x648>)
 800e1e8:	f006 020f 	and.w	r2, r6, #15
 800e1ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e1f8:	f7f2 fa16 	bl	8000628 <__aeabi_dmul>
 800e1fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e200:	1136      	asrs	r6, r6, #4
 800e202:	2300      	movs	r3, #0
 800e204:	2502      	movs	r5, #2
 800e206:	2e00      	cmp	r6, #0
 800e208:	f040 8085 	bne.w	800e316 <_dtoa_r+0x4de>
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d1d2      	bne.n	800e1b6 <_dtoa_r+0x37e>
 800e210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e212:	2b00      	cmp	r3, #0
 800e214:	f000 808c 	beq.w	800e330 <_dtoa_r+0x4f8>
 800e218:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e21c:	4b99      	ldr	r3, [pc, #612]	; (800e484 <_dtoa_r+0x64c>)
 800e21e:	2200      	movs	r2, #0
 800e220:	4630      	mov	r0, r6
 800e222:	4639      	mov	r1, r7
 800e224:	f7f2 fc72 	bl	8000b0c <__aeabi_dcmplt>
 800e228:	2800      	cmp	r0, #0
 800e22a:	f000 8081 	beq.w	800e330 <_dtoa_r+0x4f8>
 800e22e:	9b01      	ldr	r3, [sp, #4]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d07d      	beq.n	800e330 <_dtoa_r+0x4f8>
 800e234:	f1b9 0f00 	cmp.w	r9, #0
 800e238:	dd3c      	ble.n	800e2b4 <_dtoa_r+0x47c>
 800e23a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e23e:	9307      	str	r3, [sp, #28]
 800e240:	2200      	movs	r2, #0
 800e242:	4b91      	ldr	r3, [pc, #580]	; (800e488 <_dtoa_r+0x650>)
 800e244:	4630      	mov	r0, r6
 800e246:	4639      	mov	r1, r7
 800e248:	f7f2 f9ee 	bl	8000628 <__aeabi_dmul>
 800e24c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e250:	3501      	adds	r5, #1
 800e252:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e256:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e25a:	4628      	mov	r0, r5
 800e25c:	f7f2 f97a 	bl	8000554 <__aeabi_i2d>
 800e260:	4632      	mov	r2, r6
 800e262:	463b      	mov	r3, r7
 800e264:	f7f2 f9e0 	bl	8000628 <__aeabi_dmul>
 800e268:	4b88      	ldr	r3, [pc, #544]	; (800e48c <_dtoa_r+0x654>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	f7f2 f826 	bl	80002bc <__adddf3>
 800e270:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e278:	9303      	str	r3, [sp, #12]
 800e27a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d15c      	bne.n	800e33a <_dtoa_r+0x502>
 800e280:	4b83      	ldr	r3, [pc, #524]	; (800e490 <_dtoa_r+0x658>)
 800e282:	2200      	movs	r2, #0
 800e284:	4630      	mov	r0, r6
 800e286:	4639      	mov	r1, r7
 800e288:	f7f2 f816 	bl	80002b8 <__aeabi_dsub>
 800e28c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e290:	4606      	mov	r6, r0
 800e292:	460f      	mov	r7, r1
 800e294:	f7f2 fc58 	bl	8000b48 <__aeabi_dcmpgt>
 800e298:	2800      	cmp	r0, #0
 800e29a:	f040 8296 	bne.w	800e7ca <_dtoa_r+0x992>
 800e29e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2a8:	4639      	mov	r1, r7
 800e2aa:	f7f2 fc2f 	bl	8000b0c <__aeabi_dcmplt>
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	f040 8288 	bne.w	800e7c4 <_dtoa_r+0x98c>
 800e2b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e2b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	f2c0 8158 	blt.w	800e574 <_dtoa_r+0x73c>
 800e2c4:	f1ba 0f0e 	cmp.w	sl, #14
 800e2c8:	f300 8154 	bgt.w	800e574 <_dtoa_r+0x73c>
 800e2cc:	4b6b      	ldr	r3, [pc, #428]	; (800e47c <_dtoa_r+0x644>)
 800e2ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e2d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	f280 80e3 	bge.w	800e4a4 <_dtoa_r+0x66c>
 800e2de:	9b01      	ldr	r3, [sp, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f300 80df 	bgt.w	800e4a4 <_dtoa_r+0x66c>
 800e2e6:	f040 826d 	bne.w	800e7c4 <_dtoa_r+0x98c>
 800e2ea:	4b69      	ldr	r3, [pc, #420]	; (800e490 <_dtoa_r+0x658>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	4640      	mov	r0, r8
 800e2f0:	4649      	mov	r1, r9
 800e2f2:	f7f2 f999 	bl	8000628 <__aeabi_dmul>
 800e2f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2fa:	f7f2 fc1b 	bl	8000b34 <__aeabi_dcmpge>
 800e2fe:	9e01      	ldr	r6, [sp, #4]
 800e300:	4637      	mov	r7, r6
 800e302:	2800      	cmp	r0, #0
 800e304:	f040 8243 	bne.w	800e78e <_dtoa_r+0x956>
 800e308:	9d00      	ldr	r5, [sp, #0]
 800e30a:	2331      	movs	r3, #49	; 0x31
 800e30c:	f805 3b01 	strb.w	r3, [r5], #1
 800e310:	f10a 0a01 	add.w	sl, sl, #1
 800e314:	e23f      	b.n	800e796 <_dtoa_r+0x95e>
 800e316:	07f2      	lsls	r2, r6, #31
 800e318:	d505      	bpl.n	800e326 <_dtoa_r+0x4ee>
 800e31a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e31e:	f7f2 f983 	bl	8000628 <__aeabi_dmul>
 800e322:	3501      	adds	r5, #1
 800e324:	2301      	movs	r3, #1
 800e326:	1076      	asrs	r6, r6, #1
 800e328:	3708      	adds	r7, #8
 800e32a:	e76c      	b.n	800e206 <_dtoa_r+0x3ce>
 800e32c:	2502      	movs	r5, #2
 800e32e:	e76f      	b.n	800e210 <_dtoa_r+0x3d8>
 800e330:	9b01      	ldr	r3, [sp, #4]
 800e332:	f8cd a01c 	str.w	sl, [sp, #28]
 800e336:	930c      	str	r3, [sp, #48]	; 0x30
 800e338:	e78d      	b.n	800e256 <_dtoa_r+0x41e>
 800e33a:	9900      	ldr	r1, [sp, #0]
 800e33c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e33e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e340:	4b4e      	ldr	r3, [pc, #312]	; (800e47c <_dtoa_r+0x644>)
 800e342:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e346:	4401      	add	r1, r0
 800e348:	9102      	str	r1, [sp, #8]
 800e34a:	9908      	ldr	r1, [sp, #32]
 800e34c:	eeb0 8a47 	vmov.f32	s16, s14
 800e350:	eef0 8a67 	vmov.f32	s17, s15
 800e354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e358:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e35c:	2900      	cmp	r1, #0
 800e35e:	d045      	beq.n	800e3ec <_dtoa_r+0x5b4>
 800e360:	494c      	ldr	r1, [pc, #304]	; (800e494 <_dtoa_r+0x65c>)
 800e362:	2000      	movs	r0, #0
 800e364:	f7f2 fa8a 	bl	800087c <__aeabi_ddiv>
 800e368:	ec53 2b18 	vmov	r2, r3, d8
 800e36c:	f7f1 ffa4 	bl	80002b8 <__aeabi_dsub>
 800e370:	9d00      	ldr	r5, [sp, #0]
 800e372:	ec41 0b18 	vmov	d8, r0, r1
 800e376:	4639      	mov	r1, r7
 800e378:	4630      	mov	r0, r6
 800e37a:	f7f2 fc05 	bl	8000b88 <__aeabi_d2iz>
 800e37e:	900c      	str	r0, [sp, #48]	; 0x30
 800e380:	f7f2 f8e8 	bl	8000554 <__aeabi_i2d>
 800e384:	4602      	mov	r2, r0
 800e386:	460b      	mov	r3, r1
 800e388:	4630      	mov	r0, r6
 800e38a:	4639      	mov	r1, r7
 800e38c:	f7f1 ff94 	bl	80002b8 <__aeabi_dsub>
 800e390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e392:	3330      	adds	r3, #48	; 0x30
 800e394:	f805 3b01 	strb.w	r3, [r5], #1
 800e398:	ec53 2b18 	vmov	r2, r3, d8
 800e39c:	4606      	mov	r6, r0
 800e39e:	460f      	mov	r7, r1
 800e3a0:	f7f2 fbb4 	bl	8000b0c <__aeabi_dcmplt>
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	d165      	bne.n	800e474 <_dtoa_r+0x63c>
 800e3a8:	4632      	mov	r2, r6
 800e3aa:	463b      	mov	r3, r7
 800e3ac:	4935      	ldr	r1, [pc, #212]	; (800e484 <_dtoa_r+0x64c>)
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	f7f1 ff82 	bl	80002b8 <__aeabi_dsub>
 800e3b4:	ec53 2b18 	vmov	r2, r3, d8
 800e3b8:	f7f2 fba8 	bl	8000b0c <__aeabi_dcmplt>
 800e3bc:	2800      	cmp	r0, #0
 800e3be:	f040 80b9 	bne.w	800e534 <_dtoa_r+0x6fc>
 800e3c2:	9b02      	ldr	r3, [sp, #8]
 800e3c4:	429d      	cmp	r5, r3
 800e3c6:	f43f af75 	beq.w	800e2b4 <_dtoa_r+0x47c>
 800e3ca:	4b2f      	ldr	r3, [pc, #188]	; (800e488 <_dtoa_r+0x650>)
 800e3cc:	ec51 0b18 	vmov	r0, r1, d8
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	f7f2 f929 	bl	8000628 <__aeabi_dmul>
 800e3d6:	4b2c      	ldr	r3, [pc, #176]	; (800e488 <_dtoa_r+0x650>)
 800e3d8:	ec41 0b18 	vmov	d8, r0, r1
 800e3dc:	2200      	movs	r2, #0
 800e3de:	4630      	mov	r0, r6
 800e3e0:	4639      	mov	r1, r7
 800e3e2:	f7f2 f921 	bl	8000628 <__aeabi_dmul>
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	460f      	mov	r7, r1
 800e3ea:	e7c4      	b.n	800e376 <_dtoa_r+0x53e>
 800e3ec:	ec51 0b17 	vmov	r0, r1, d7
 800e3f0:	f7f2 f91a 	bl	8000628 <__aeabi_dmul>
 800e3f4:	9b02      	ldr	r3, [sp, #8]
 800e3f6:	9d00      	ldr	r5, [sp, #0]
 800e3f8:	930c      	str	r3, [sp, #48]	; 0x30
 800e3fa:	ec41 0b18 	vmov	d8, r0, r1
 800e3fe:	4639      	mov	r1, r7
 800e400:	4630      	mov	r0, r6
 800e402:	f7f2 fbc1 	bl	8000b88 <__aeabi_d2iz>
 800e406:	9011      	str	r0, [sp, #68]	; 0x44
 800e408:	f7f2 f8a4 	bl	8000554 <__aeabi_i2d>
 800e40c:	4602      	mov	r2, r0
 800e40e:	460b      	mov	r3, r1
 800e410:	4630      	mov	r0, r6
 800e412:	4639      	mov	r1, r7
 800e414:	f7f1 ff50 	bl	80002b8 <__aeabi_dsub>
 800e418:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e41a:	3330      	adds	r3, #48	; 0x30
 800e41c:	f805 3b01 	strb.w	r3, [r5], #1
 800e420:	9b02      	ldr	r3, [sp, #8]
 800e422:	429d      	cmp	r5, r3
 800e424:	4606      	mov	r6, r0
 800e426:	460f      	mov	r7, r1
 800e428:	f04f 0200 	mov.w	r2, #0
 800e42c:	d134      	bne.n	800e498 <_dtoa_r+0x660>
 800e42e:	4b19      	ldr	r3, [pc, #100]	; (800e494 <_dtoa_r+0x65c>)
 800e430:	ec51 0b18 	vmov	r0, r1, d8
 800e434:	f7f1 ff42 	bl	80002bc <__adddf3>
 800e438:	4602      	mov	r2, r0
 800e43a:	460b      	mov	r3, r1
 800e43c:	4630      	mov	r0, r6
 800e43e:	4639      	mov	r1, r7
 800e440:	f7f2 fb82 	bl	8000b48 <__aeabi_dcmpgt>
 800e444:	2800      	cmp	r0, #0
 800e446:	d175      	bne.n	800e534 <_dtoa_r+0x6fc>
 800e448:	ec53 2b18 	vmov	r2, r3, d8
 800e44c:	4911      	ldr	r1, [pc, #68]	; (800e494 <_dtoa_r+0x65c>)
 800e44e:	2000      	movs	r0, #0
 800e450:	f7f1 ff32 	bl	80002b8 <__aeabi_dsub>
 800e454:	4602      	mov	r2, r0
 800e456:	460b      	mov	r3, r1
 800e458:	4630      	mov	r0, r6
 800e45a:	4639      	mov	r1, r7
 800e45c:	f7f2 fb56 	bl	8000b0c <__aeabi_dcmplt>
 800e460:	2800      	cmp	r0, #0
 800e462:	f43f af27 	beq.w	800e2b4 <_dtoa_r+0x47c>
 800e466:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e468:	1e6b      	subs	r3, r5, #1
 800e46a:	930c      	str	r3, [sp, #48]	; 0x30
 800e46c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e470:	2b30      	cmp	r3, #48	; 0x30
 800e472:	d0f8      	beq.n	800e466 <_dtoa_r+0x62e>
 800e474:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e478:	e04a      	b.n	800e510 <_dtoa_r+0x6d8>
 800e47a:	bf00      	nop
 800e47c:	080244d8 	.word	0x080244d8
 800e480:	080244b0 	.word	0x080244b0
 800e484:	3ff00000 	.word	0x3ff00000
 800e488:	40240000 	.word	0x40240000
 800e48c:	401c0000 	.word	0x401c0000
 800e490:	40140000 	.word	0x40140000
 800e494:	3fe00000 	.word	0x3fe00000
 800e498:	4baf      	ldr	r3, [pc, #700]	; (800e758 <_dtoa_r+0x920>)
 800e49a:	f7f2 f8c5 	bl	8000628 <__aeabi_dmul>
 800e49e:	4606      	mov	r6, r0
 800e4a0:	460f      	mov	r7, r1
 800e4a2:	e7ac      	b.n	800e3fe <_dtoa_r+0x5c6>
 800e4a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e4a8:	9d00      	ldr	r5, [sp, #0]
 800e4aa:	4642      	mov	r2, r8
 800e4ac:	464b      	mov	r3, r9
 800e4ae:	4630      	mov	r0, r6
 800e4b0:	4639      	mov	r1, r7
 800e4b2:	f7f2 f9e3 	bl	800087c <__aeabi_ddiv>
 800e4b6:	f7f2 fb67 	bl	8000b88 <__aeabi_d2iz>
 800e4ba:	9002      	str	r0, [sp, #8]
 800e4bc:	f7f2 f84a 	bl	8000554 <__aeabi_i2d>
 800e4c0:	4642      	mov	r2, r8
 800e4c2:	464b      	mov	r3, r9
 800e4c4:	f7f2 f8b0 	bl	8000628 <__aeabi_dmul>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	4630      	mov	r0, r6
 800e4ce:	4639      	mov	r1, r7
 800e4d0:	f7f1 fef2 	bl	80002b8 <__aeabi_dsub>
 800e4d4:	9e02      	ldr	r6, [sp, #8]
 800e4d6:	9f01      	ldr	r7, [sp, #4]
 800e4d8:	3630      	adds	r6, #48	; 0x30
 800e4da:	f805 6b01 	strb.w	r6, [r5], #1
 800e4de:	9e00      	ldr	r6, [sp, #0]
 800e4e0:	1bae      	subs	r6, r5, r6
 800e4e2:	42b7      	cmp	r7, r6
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	d137      	bne.n	800e55a <_dtoa_r+0x722>
 800e4ea:	f7f1 fee7 	bl	80002bc <__adddf3>
 800e4ee:	4642      	mov	r2, r8
 800e4f0:	464b      	mov	r3, r9
 800e4f2:	4606      	mov	r6, r0
 800e4f4:	460f      	mov	r7, r1
 800e4f6:	f7f2 fb27 	bl	8000b48 <__aeabi_dcmpgt>
 800e4fa:	b9c8      	cbnz	r0, 800e530 <_dtoa_r+0x6f8>
 800e4fc:	4642      	mov	r2, r8
 800e4fe:	464b      	mov	r3, r9
 800e500:	4630      	mov	r0, r6
 800e502:	4639      	mov	r1, r7
 800e504:	f7f2 faf8 	bl	8000af8 <__aeabi_dcmpeq>
 800e508:	b110      	cbz	r0, 800e510 <_dtoa_r+0x6d8>
 800e50a:	9b02      	ldr	r3, [sp, #8]
 800e50c:	07d9      	lsls	r1, r3, #31
 800e50e:	d40f      	bmi.n	800e530 <_dtoa_r+0x6f8>
 800e510:	4620      	mov	r0, r4
 800e512:	4659      	mov	r1, fp
 800e514:	f000 fe6a 	bl	800f1ec <_Bfree>
 800e518:	2300      	movs	r3, #0
 800e51a:	702b      	strb	r3, [r5, #0]
 800e51c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e51e:	f10a 0001 	add.w	r0, sl, #1
 800e522:	6018      	str	r0, [r3, #0]
 800e524:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e526:	2b00      	cmp	r3, #0
 800e528:	f43f acd8 	beq.w	800dedc <_dtoa_r+0xa4>
 800e52c:	601d      	str	r5, [r3, #0]
 800e52e:	e4d5      	b.n	800dedc <_dtoa_r+0xa4>
 800e530:	f8cd a01c 	str.w	sl, [sp, #28]
 800e534:	462b      	mov	r3, r5
 800e536:	461d      	mov	r5, r3
 800e538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e53c:	2a39      	cmp	r2, #57	; 0x39
 800e53e:	d108      	bne.n	800e552 <_dtoa_r+0x71a>
 800e540:	9a00      	ldr	r2, [sp, #0]
 800e542:	429a      	cmp	r2, r3
 800e544:	d1f7      	bne.n	800e536 <_dtoa_r+0x6fe>
 800e546:	9a07      	ldr	r2, [sp, #28]
 800e548:	9900      	ldr	r1, [sp, #0]
 800e54a:	3201      	adds	r2, #1
 800e54c:	9207      	str	r2, [sp, #28]
 800e54e:	2230      	movs	r2, #48	; 0x30
 800e550:	700a      	strb	r2, [r1, #0]
 800e552:	781a      	ldrb	r2, [r3, #0]
 800e554:	3201      	adds	r2, #1
 800e556:	701a      	strb	r2, [r3, #0]
 800e558:	e78c      	b.n	800e474 <_dtoa_r+0x63c>
 800e55a:	4b7f      	ldr	r3, [pc, #508]	; (800e758 <_dtoa_r+0x920>)
 800e55c:	2200      	movs	r2, #0
 800e55e:	f7f2 f863 	bl	8000628 <__aeabi_dmul>
 800e562:	2200      	movs	r2, #0
 800e564:	2300      	movs	r3, #0
 800e566:	4606      	mov	r6, r0
 800e568:	460f      	mov	r7, r1
 800e56a:	f7f2 fac5 	bl	8000af8 <__aeabi_dcmpeq>
 800e56e:	2800      	cmp	r0, #0
 800e570:	d09b      	beq.n	800e4aa <_dtoa_r+0x672>
 800e572:	e7cd      	b.n	800e510 <_dtoa_r+0x6d8>
 800e574:	9a08      	ldr	r2, [sp, #32]
 800e576:	2a00      	cmp	r2, #0
 800e578:	f000 80c4 	beq.w	800e704 <_dtoa_r+0x8cc>
 800e57c:	9a05      	ldr	r2, [sp, #20]
 800e57e:	2a01      	cmp	r2, #1
 800e580:	f300 80a8 	bgt.w	800e6d4 <_dtoa_r+0x89c>
 800e584:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e586:	2a00      	cmp	r2, #0
 800e588:	f000 80a0 	beq.w	800e6cc <_dtoa_r+0x894>
 800e58c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e590:	9e06      	ldr	r6, [sp, #24]
 800e592:	4645      	mov	r5, r8
 800e594:	9a04      	ldr	r2, [sp, #16]
 800e596:	2101      	movs	r1, #1
 800e598:	441a      	add	r2, r3
 800e59a:	4620      	mov	r0, r4
 800e59c:	4498      	add	r8, r3
 800e59e:	9204      	str	r2, [sp, #16]
 800e5a0:	f000 ff2a 	bl	800f3f8 <__i2b>
 800e5a4:	4607      	mov	r7, r0
 800e5a6:	2d00      	cmp	r5, #0
 800e5a8:	dd0b      	ble.n	800e5c2 <_dtoa_r+0x78a>
 800e5aa:	9b04      	ldr	r3, [sp, #16]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	dd08      	ble.n	800e5c2 <_dtoa_r+0x78a>
 800e5b0:	42ab      	cmp	r3, r5
 800e5b2:	9a04      	ldr	r2, [sp, #16]
 800e5b4:	bfa8      	it	ge
 800e5b6:	462b      	movge	r3, r5
 800e5b8:	eba8 0803 	sub.w	r8, r8, r3
 800e5bc:	1aed      	subs	r5, r5, r3
 800e5be:	1ad3      	subs	r3, r2, r3
 800e5c0:	9304      	str	r3, [sp, #16]
 800e5c2:	9b06      	ldr	r3, [sp, #24]
 800e5c4:	b1fb      	cbz	r3, 800e606 <_dtoa_r+0x7ce>
 800e5c6:	9b08      	ldr	r3, [sp, #32]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	f000 809f 	beq.w	800e70c <_dtoa_r+0x8d4>
 800e5ce:	2e00      	cmp	r6, #0
 800e5d0:	dd11      	ble.n	800e5f6 <_dtoa_r+0x7be>
 800e5d2:	4639      	mov	r1, r7
 800e5d4:	4632      	mov	r2, r6
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	f000 ffca 	bl	800f570 <__pow5mult>
 800e5dc:	465a      	mov	r2, fp
 800e5de:	4601      	mov	r1, r0
 800e5e0:	4607      	mov	r7, r0
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	f000 ff1e 	bl	800f424 <__multiply>
 800e5e8:	4659      	mov	r1, fp
 800e5ea:	9007      	str	r0, [sp, #28]
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	f000 fdfd 	bl	800f1ec <_Bfree>
 800e5f2:	9b07      	ldr	r3, [sp, #28]
 800e5f4:	469b      	mov	fp, r3
 800e5f6:	9b06      	ldr	r3, [sp, #24]
 800e5f8:	1b9a      	subs	r2, r3, r6
 800e5fa:	d004      	beq.n	800e606 <_dtoa_r+0x7ce>
 800e5fc:	4659      	mov	r1, fp
 800e5fe:	4620      	mov	r0, r4
 800e600:	f000 ffb6 	bl	800f570 <__pow5mult>
 800e604:	4683      	mov	fp, r0
 800e606:	2101      	movs	r1, #1
 800e608:	4620      	mov	r0, r4
 800e60a:	f000 fef5 	bl	800f3f8 <__i2b>
 800e60e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e610:	2b00      	cmp	r3, #0
 800e612:	4606      	mov	r6, r0
 800e614:	dd7c      	ble.n	800e710 <_dtoa_r+0x8d8>
 800e616:	461a      	mov	r2, r3
 800e618:	4601      	mov	r1, r0
 800e61a:	4620      	mov	r0, r4
 800e61c:	f000 ffa8 	bl	800f570 <__pow5mult>
 800e620:	9b05      	ldr	r3, [sp, #20]
 800e622:	2b01      	cmp	r3, #1
 800e624:	4606      	mov	r6, r0
 800e626:	dd76      	ble.n	800e716 <_dtoa_r+0x8de>
 800e628:	2300      	movs	r3, #0
 800e62a:	9306      	str	r3, [sp, #24]
 800e62c:	6933      	ldr	r3, [r6, #16]
 800e62e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e632:	6918      	ldr	r0, [r3, #16]
 800e634:	f000 fe90 	bl	800f358 <__hi0bits>
 800e638:	f1c0 0020 	rsb	r0, r0, #32
 800e63c:	9b04      	ldr	r3, [sp, #16]
 800e63e:	4418      	add	r0, r3
 800e640:	f010 001f 	ands.w	r0, r0, #31
 800e644:	f000 8086 	beq.w	800e754 <_dtoa_r+0x91c>
 800e648:	f1c0 0320 	rsb	r3, r0, #32
 800e64c:	2b04      	cmp	r3, #4
 800e64e:	dd7f      	ble.n	800e750 <_dtoa_r+0x918>
 800e650:	f1c0 001c 	rsb	r0, r0, #28
 800e654:	9b04      	ldr	r3, [sp, #16]
 800e656:	4403      	add	r3, r0
 800e658:	4480      	add	r8, r0
 800e65a:	4405      	add	r5, r0
 800e65c:	9304      	str	r3, [sp, #16]
 800e65e:	f1b8 0f00 	cmp.w	r8, #0
 800e662:	dd05      	ble.n	800e670 <_dtoa_r+0x838>
 800e664:	4659      	mov	r1, fp
 800e666:	4642      	mov	r2, r8
 800e668:	4620      	mov	r0, r4
 800e66a:	f000 ffdb 	bl	800f624 <__lshift>
 800e66e:	4683      	mov	fp, r0
 800e670:	9b04      	ldr	r3, [sp, #16]
 800e672:	2b00      	cmp	r3, #0
 800e674:	dd05      	ble.n	800e682 <_dtoa_r+0x84a>
 800e676:	4631      	mov	r1, r6
 800e678:	461a      	mov	r2, r3
 800e67a:	4620      	mov	r0, r4
 800e67c:	f000 ffd2 	bl	800f624 <__lshift>
 800e680:	4606      	mov	r6, r0
 800e682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e684:	2b00      	cmp	r3, #0
 800e686:	d069      	beq.n	800e75c <_dtoa_r+0x924>
 800e688:	4631      	mov	r1, r6
 800e68a:	4658      	mov	r0, fp
 800e68c:	f001 f836 	bl	800f6fc <__mcmp>
 800e690:	2800      	cmp	r0, #0
 800e692:	da63      	bge.n	800e75c <_dtoa_r+0x924>
 800e694:	2300      	movs	r3, #0
 800e696:	4659      	mov	r1, fp
 800e698:	220a      	movs	r2, #10
 800e69a:	4620      	mov	r0, r4
 800e69c:	f000 fdc8 	bl	800f230 <__multadd>
 800e6a0:	9b08      	ldr	r3, [sp, #32]
 800e6a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6a6:	4683      	mov	fp, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	f000 818f 	beq.w	800e9cc <_dtoa_r+0xb94>
 800e6ae:	4639      	mov	r1, r7
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	220a      	movs	r2, #10
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	f000 fdbb 	bl	800f230 <__multadd>
 800e6ba:	f1b9 0f00 	cmp.w	r9, #0
 800e6be:	4607      	mov	r7, r0
 800e6c0:	f300 808e 	bgt.w	800e7e0 <_dtoa_r+0x9a8>
 800e6c4:	9b05      	ldr	r3, [sp, #20]
 800e6c6:	2b02      	cmp	r3, #2
 800e6c8:	dc50      	bgt.n	800e76c <_dtoa_r+0x934>
 800e6ca:	e089      	b.n	800e7e0 <_dtoa_r+0x9a8>
 800e6cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e6ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e6d2:	e75d      	b.n	800e590 <_dtoa_r+0x758>
 800e6d4:	9b01      	ldr	r3, [sp, #4]
 800e6d6:	1e5e      	subs	r6, r3, #1
 800e6d8:	9b06      	ldr	r3, [sp, #24]
 800e6da:	42b3      	cmp	r3, r6
 800e6dc:	bfbf      	itttt	lt
 800e6de:	9b06      	ldrlt	r3, [sp, #24]
 800e6e0:	9606      	strlt	r6, [sp, #24]
 800e6e2:	1af2      	sublt	r2, r6, r3
 800e6e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e6e6:	bfb6      	itet	lt
 800e6e8:	189b      	addlt	r3, r3, r2
 800e6ea:	1b9e      	subge	r6, r3, r6
 800e6ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e6ee:	9b01      	ldr	r3, [sp, #4]
 800e6f0:	bfb8      	it	lt
 800e6f2:	2600      	movlt	r6, #0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	bfb5      	itete	lt
 800e6f8:	eba8 0503 	sublt.w	r5, r8, r3
 800e6fc:	9b01      	ldrge	r3, [sp, #4]
 800e6fe:	2300      	movlt	r3, #0
 800e700:	4645      	movge	r5, r8
 800e702:	e747      	b.n	800e594 <_dtoa_r+0x75c>
 800e704:	9e06      	ldr	r6, [sp, #24]
 800e706:	9f08      	ldr	r7, [sp, #32]
 800e708:	4645      	mov	r5, r8
 800e70a:	e74c      	b.n	800e5a6 <_dtoa_r+0x76e>
 800e70c:	9a06      	ldr	r2, [sp, #24]
 800e70e:	e775      	b.n	800e5fc <_dtoa_r+0x7c4>
 800e710:	9b05      	ldr	r3, [sp, #20]
 800e712:	2b01      	cmp	r3, #1
 800e714:	dc18      	bgt.n	800e748 <_dtoa_r+0x910>
 800e716:	9b02      	ldr	r3, [sp, #8]
 800e718:	b9b3      	cbnz	r3, 800e748 <_dtoa_r+0x910>
 800e71a:	9b03      	ldr	r3, [sp, #12]
 800e71c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e720:	b9a3      	cbnz	r3, 800e74c <_dtoa_r+0x914>
 800e722:	9b03      	ldr	r3, [sp, #12]
 800e724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e728:	0d1b      	lsrs	r3, r3, #20
 800e72a:	051b      	lsls	r3, r3, #20
 800e72c:	b12b      	cbz	r3, 800e73a <_dtoa_r+0x902>
 800e72e:	9b04      	ldr	r3, [sp, #16]
 800e730:	3301      	adds	r3, #1
 800e732:	9304      	str	r3, [sp, #16]
 800e734:	f108 0801 	add.w	r8, r8, #1
 800e738:	2301      	movs	r3, #1
 800e73a:	9306      	str	r3, [sp, #24]
 800e73c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e73e:	2b00      	cmp	r3, #0
 800e740:	f47f af74 	bne.w	800e62c <_dtoa_r+0x7f4>
 800e744:	2001      	movs	r0, #1
 800e746:	e779      	b.n	800e63c <_dtoa_r+0x804>
 800e748:	2300      	movs	r3, #0
 800e74a:	e7f6      	b.n	800e73a <_dtoa_r+0x902>
 800e74c:	9b02      	ldr	r3, [sp, #8]
 800e74e:	e7f4      	b.n	800e73a <_dtoa_r+0x902>
 800e750:	d085      	beq.n	800e65e <_dtoa_r+0x826>
 800e752:	4618      	mov	r0, r3
 800e754:	301c      	adds	r0, #28
 800e756:	e77d      	b.n	800e654 <_dtoa_r+0x81c>
 800e758:	40240000 	.word	0x40240000
 800e75c:	9b01      	ldr	r3, [sp, #4]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	dc38      	bgt.n	800e7d4 <_dtoa_r+0x99c>
 800e762:	9b05      	ldr	r3, [sp, #20]
 800e764:	2b02      	cmp	r3, #2
 800e766:	dd35      	ble.n	800e7d4 <_dtoa_r+0x99c>
 800e768:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e76c:	f1b9 0f00 	cmp.w	r9, #0
 800e770:	d10d      	bne.n	800e78e <_dtoa_r+0x956>
 800e772:	4631      	mov	r1, r6
 800e774:	464b      	mov	r3, r9
 800e776:	2205      	movs	r2, #5
 800e778:	4620      	mov	r0, r4
 800e77a:	f000 fd59 	bl	800f230 <__multadd>
 800e77e:	4601      	mov	r1, r0
 800e780:	4606      	mov	r6, r0
 800e782:	4658      	mov	r0, fp
 800e784:	f000 ffba 	bl	800f6fc <__mcmp>
 800e788:	2800      	cmp	r0, #0
 800e78a:	f73f adbd 	bgt.w	800e308 <_dtoa_r+0x4d0>
 800e78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e790:	9d00      	ldr	r5, [sp, #0]
 800e792:	ea6f 0a03 	mvn.w	sl, r3
 800e796:	f04f 0800 	mov.w	r8, #0
 800e79a:	4631      	mov	r1, r6
 800e79c:	4620      	mov	r0, r4
 800e79e:	f000 fd25 	bl	800f1ec <_Bfree>
 800e7a2:	2f00      	cmp	r7, #0
 800e7a4:	f43f aeb4 	beq.w	800e510 <_dtoa_r+0x6d8>
 800e7a8:	f1b8 0f00 	cmp.w	r8, #0
 800e7ac:	d005      	beq.n	800e7ba <_dtoa_r+0x982>
 800e7ae:	45b8      	cmp	r8, r7
 800e7b0:	d003      	beq.n	800e7ba <_dtoa_r+0x982>
 800e7b2:	4641      	mov	r1, r8
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	f000 fd19 	bl	800f1ec <_Bfree>
 800e7ba:	4639      	mov	r1, r7
 800e7bc:	4620      	mov	r0, r4
 800e7be:	f000 fd15 	bl	800f1ec <_Bfree>
 800e7c2:	e6a5      	b.n	800e510 <_dtoa_r+0x6d8>
 800e7c4:	2600      	movs	r6, #0
 800e7c6:	4637      	mov	r7, r6
 800e7c8:	e7e1      	b.n	800e78e <_dtoa_r+0x956>
 800e7ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e7cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e7d0:	4637      	mov	r7, r6
 800e7d2:	e599      	b.n	800e308 <_dtoa_r+0x4d0>
 800e7d4:	9b08      	ldr	r3, [sp, #32]
 800e7d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f000 80fd 	beq.w	800e9da <_dtoa_r+0xba2>
 800e7e0:	2d00      	cmp	r5, #0
 800e7e2:	dd05      	ble.n	800e7f0 <_dtoa_r+0x9b8>
 800e7e4:	4639      	mov	r1, r7
 800e7e6:	462a      	mov	r2, r5
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	f000 ff1b 	bl	800f624 <__lshift>
 800e7ee:	4607      	mov	r7, r0
 800e7f0:	9b06      	ldr	r3, [sp, #24]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d05c      	beq.n	800e8b0 <_dtoa_r+0xa78>
 800e7f6:	6879      	ldr	r1, [r7, #4]
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f000 fcb7 	bl	800f16c <_Balloc>
 800e7fe:	4605      	mov	r5, r0
 800e800:	b928      	cbnz	r0, 800e80e <_dtoa_r+0x9d6>
 800e802:	4b80      	ldr	r3, [pc, #512]	; (800ea04 <_dtoa_r+0xbcc>)
 800e804:	4602      	mov	r2, r0
 800e806:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e80a:	f7ff bb2e 	b.w	800de6a <_dtoa_r+0x32>
 800e80e:	693a      	ldr	r2, [r7, #16]
 800e810:	3202      	adds	r2, #2
 800e812:	0092      	lsls	r2, r2, #2
 800e814:	f107 010c 	add.w	r1, r7, #12
 800e818:	300c      	adds	r0, #12
 800e81a:	f000 fc99 	bl	800f150 <memcpy>
 800e81e:	2201      	movs	r2, #1
 800e820:	4629      	mov	r1, r5
 800e822:	4620      	mov	r0, r4
 800e824:	f000 fefe 	bl	800f624 <__lshift>
 800e828:	9b00      	ldr	r3, [sp, #0]
 800e82a:	3301      	adds	r3, #1
 800e82c:	9301      	str	r3, [sp, #4]
 800e82e:	9b00      	ldr	r3, [sp, #0]
 800e830:	444b      	add	r3, r9
 800e832:	9307      	str	r3, [sp, #28]
 800e834:	9b02      	ldr	r3, [sp, #8]
 800e836:	f003 0301 	and.w	r3, r3, #1
 800e83a:	46b8      	mov	r8, r7
 800e83c:	9306      	str	r3, [sp, #24]
 800e83e:	4607      	mov	r7, r0
 800e840:	9b01      	ldr	r3, [sp, #4]
 800e842:	4631      	mov	r1, r6
 800e844:	3b01      	subs	r3, #1
 800e846:	4658      	mov	r0, fp
 800e848:	9302      	str	r3, [sp, #8]
 800e84a:	f7ff fa67 	bl	800dd1c <quorem>
 800e84e:	4603      	mov	r3, r0
 800e850:	3330      	adds	r3, #48	; 0x30
 800e852:	9004      	str	r0, [sp, #16]
 800e854:	4641      	mov	r1, r8
 800e856:	4658      	mov	r0, fp
 800e858:	9308      	str	r3, [sp, #32]
 800e85a:	f000 ff4f 	bl	800f6fc <__mcmp>
 800e85e:	463a      	mov	r2, r7
 800e860:	4681      	mov	r9, r0
 800e862:	4631      	mov	r1, r6
 800e864:	4620      	mov	r0, r4
 800e866:	f000 ff65 	bl	800f734 <__mdiff>
 800e86a:	68c2      	ldr	r2, [r0, #12]
 800e86c:	9b08      	ldr	r3, [sp, #32]
 800e86e:	4605      	mov	r5, r0
 800e870:	bb02      	cbnz	r2, 800e8b4 <_dtoa_r+0xa7c>
 800e872:	4601      	mov	r1, r0
 800e874:	4658      	mov	r0, fp
 800e876:	f000 ff41 	bl	800f6fc <__mcmp>
 800e87a:	9b08      	ldr	r3, [sp, #32]
 800e87c:	4602      	mov	r2, r0
 800e87e:	4629      	mov	r1, r5
 800e880:	4620      	mov	r0, r4
 800e882:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e886:	f000 fcb1 	bl	800f1ec <_Bfree>
 800e88a:	9b05      	ldr	r3, [sp, #20]
 800e88c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e88e:	9d01      	ldr	r5, [sp, #4]
 800e890:	ea43 0102 	orr.w	r1, r3, r2
 800e894:	9b06      	ldr	r3, [sp, #24]
 800e896:	430b      	orrs	r3, r1
 800e898:	9b08      	ldr	r3, [sp, #32]
 800e89a:	d10d      	bne.n	800e8b8 <_dtoa_r+0xa80>
 800e89c:	2b39      	cmp	r3, #57	; 0x39
 800e89e:	d029      	beq.n	800e8f4 <_dtoa_r+0xabc>
 800e8a0:	f1b9 0f00 	cmp.w	r9, #0
 800e8a4:	dd01      	ble.n	800e8aa <_dtoa_r+0xa72>
 800e8a6:	9b04      	ldr	r3, [sp, #16]
 800e8a8:	3331      	adds	r3, #49	; 0x31
 800e8aa:	9a02      	ldr	r2, [sp, #8]
 800e8ac:	7013      	strb	r3, [r2, #0]
 800e8ae:	e774      	b.n	800e79a <_dtoa_r+0x962>
 800e8b0:	4638      	mov	r0, r7
 800e8b2:	e7b9      	b.n	800e828 <_dtoa_r+0x9f0>
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	e7e2      	b.n	800e87e <_dtoa_r+0xa46>
 800e8b8:	f1b9 0f00 	cmp.w	r9, #0
 800e8bc:	db06      	blt.n	800e8cc <_dtoa_r+0xa94>
 800e8be:	9905      	ldr	r1, [sp, #20]
 800e8c0:	ea41 0909 	orr.w	r9, r1, r9
 800e8c4:	9906      	ldr	r1, [sp, #24]
 800e8c6:	ea59 0101 	orrs.w	r1, r9, r1
 800e8ca:	d120      	bne.n	800e90e <_dtoa_r+0xad6>
 800e8cc:	2a00      	cmp	r2, #0
 800e8ce:	ddec      	ble.n	800e8aa <_dtoa_r+0xa72>
 800e8d0:	4659      	mov	r1, fp
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	9301      	str	r3, [sp, #4]
 800e8d8:	f000 fea4 	bl	800f624 <__lshift>
 800e8dc:	4631      	mov	r1, r6
 800e8de:	4683      	mov	fp, r0
 800e8e0:	f000 ff0c 	bl	800f6fc <__mcmp>
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	9b01      	ldr	r3, [sp, #4]
 800e8e8:	dc02      	bgt.n	800e8f0 <_dtoa_r+0xab8>
 800e8ea:	d1de      	bne.n	800e8aa <_dtoa_r+0xa72>
 800e8ec:	07da      	lsls	r2, r3, #31
 800e8ee:	d5dc      	bpl.n	800e8aa <_dtoa_r+0xa72>
 800e8f0:	2b39      	cmp	r3, #57	; 0x39
 800e8f2:	d1d8      	bne.n	800e8a6 <_dtoa_r+0xa6e>
 800e8f4:	9a02      	ldr	r2, [sp, #8]
 800e8f6:	2339      	movs	r3, #57	; 0x39
 800e8f8:	7013      	strb	r3, [r2, #0]
 800e8fa:	462b      	mov	r3, r5
 800e8fc:	461d      	mov	r5, r3
 800e8fe:	3b01      	subs	r3, #1
 800e900:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e904:	2a39      	cmp	r2, #57	; 0x39
 800e906:	d050      	beq.n	800e9aa <_dtoa_r+0xb72>
 800e908:	3201      	adds	r2, #1
 800e90a:	701a      	strb	r2, [r3, #0]
 800e90c:	e745      	b.n	800e79a <_dtoa_r+0x962>
 800e90e:	2a00      	cmp	r2, #0
 800e910:	dd03      	ble.n	800e91a <_dtoa_r+0xae2>
 800e912:	2b39      	cmp	r3, #57	; 0x39
 800e914:	d0ee      	beq.n	800e8f4 <_dtoa_r+0xabc>
 800e916:	3301      	adds	r3, #1
 800e918:	e7c7      	b.n	800e8aa <_dtoa_r+0xa72>
 800e91a:	9a01      	ldr	r2, [sp, #4]
 800e91c:	9907      	ldr	r1, [sp, #28]
 800e91e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e922:	428a      	cmp	r2, r1
 800e924:	d02a      	beq.n	800e97c <_dtoa_r+0xb44>
 800e926:	4659      	mov	r1, fp
 800e928:	2300      	movs	r3, #0
 800e92a:	220a      	movs	r2, #10
 800e92c:	4620      	mov	r0, r4
 800e92e:	f000 fc7f 	bl	800f230 <__multadd>
 800e932:	45b8      	cmp	r8, r7
 800e934:	4683      	mov	fp, r0
 800e936:	f04f 0300 	mov.w	r3, #0
 800e93a:	f04f 020a 	mov.w	r2, #10
 800e93e:	4641      	mov	r1, r8
 800e940:	4620      	mov	r0, r4
 800e942:	d107      	bne.n	800e954 <_dtoa_r+0xb1c>
 800e944:	f000 fc74 	bl	800f230 <__multadd>
 800e948:	4680      	mov	r8, r0
 800e94a:	4607      	mov	r7, r0
 800e94c:	9b01      	ldr	r3, [sp, #4]
 800e94e:	3301      	adds	r3, #1
 800e950:	9301      	str	r3, [sp, #4]
 800e952:	e775      	b.n	800e840 <_dtoa_r+0xa08>
 800e954:	f000 fc6c 	bl	800f230 <__multadd>
 800e958:	4639      	mov	r1, r7
 800e95a:	4680      	mov	r8, r0
 800e95c:	2300      	movs	r3, #0
 800e95e:	220a      	movs	r2, #10
 800e960:	4620      	mov	r0, r4
 800e962:	f000 fc65 	bl	800f230 <__multadd>
 800e966:	4607      	mov	r7, r0
 800e968:	e7f0      	b.n	800e94c <_dtoa_r+0xb14>
 800e96a:	f1b9 0f00 	cmp.w	r9, #0
 800e96e:	9a00      	ldr	r2, [sp, #0]
 800e970:	bfcc      	ite	gt
 800e972:	464d      	movgt	r5, r9
 800e974:	2501      	movle	r5, #1
 800e976:	4415      	add	r5, r2
 800e978:	f04f 0800 	mov.w	r8, #0
 800e97c:	4659      	mov	r1, fp
 800e97e:	2201      	movs	r2, #1
 800e980:	4620      	mov	r0, r4
 800e982:	9301      	str	r3, [sp, #4]
 800e984:	f000 fe4e 	bl	800f624 <__lshift>
 800e988:	4631      	mov	r1, r6
 800e98a:	4683      	mov	fp, r0
 800e98c:	f000 feb6 	bl	800f6fc <__mcmp>
 800e990:	2800      	cmp	r0, #0
 800e992:	dcb2      	bgt.n	800e8fa <_dtoa_r+0xac2>
 800e994:	d102      	bne.n	800e99c <_dtoa_r+0xb64>
 800e996:	9b01      	ldr	r3, [sp, #4]
 800e998:	07db      	lsls	r3, r3, #31
 800e99a:	d4ae      	bmi.n	800e8fa <_dtoa_r+0xac2>
 800e99c:	462b      	mov	r3, r5
 800e99e:	461d      	mov	r5, r3
 800e9a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9a4:	2a30      	cmp	r2, #48	; 0x30
 800e9a6:	d0fa      	beq.n	800e99e <_dtoa_r+0xb66>
 800e9a8:	e6f7      	b.n	800e79a <_dtoa_r+0x962>
 800e9aa:	9a00      	ldr	r2, [sp, #0]
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d1a5      	bne.n	800e8fc <_dtoa_r+0xac4>
 800e9b0:	f10a 0a01 	add.w	sl, sl, #1
 800e9b4:	2331      	movs	r3, #49	; 0x31
 800e9b6:	e779      	b.n	800e8ac <_dtoa_r+0xa74>
 800e9b8:	4b13      	ldr	r3, [pc, #76]	; (800ea08 <_dtoa_r+0xbd0>)
 800e9ba:	f7ff baaf 	b.w	800df1c <_dtoa_r+0xe4>
 800e9be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	f47f aa86 	bne.w	800ded2 <_dtoa_r+0x9a>
 800e9c6:	4b11      	ldr	r3, [pc, #68]	; (800ea0c <_dtoa_r+0xbd4>)
 800e9c8:	f7ff baa8 	b.w	800df1c <_dtoa_r+0xe4>
 800e9cc:	f1b9 0f00 	cmp.w	r9, #0
 800e9d0:	dc03      	bgt.n	800e9da <_dtoa_r+0xba2>
 800e9d2:	9b05      	ldr	r3, [sp, #20]
 800e9d4:	2b02      	cmp	r3, #2
 800e9d6:	f73f aec9 	bgt.w	800e76c <_dtoa_r+0x934>
 800e9da:	9d00      	ldr	r5, [sp, #0]
 800e9dc:	4631      	mov	r1, r6
 800e9de:	4658      	mov	r0, fp
 800e9e0:	f7ff f99c 	bl	800dd1c <quorem>
 800e9e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e9e8:	f805 3b01 	strb.w	r3, [r5], #1
 800e9ec:	9a00      	ldr	r2, [sp, #0]
 800e9ee:	1aaa      	subs	r2, r5, r2
 800e9f0:	4591      	cmp	r9, r2
 800e9f2:	ddba      	ble.n	800e96a <_dtoa_r+0xb32>
 800e9f4:	4659      	mov	r1, fp
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	220a      	movs	r2, #10
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	f000 fc18 	bl	800f230 <__multadd>
 800ea00:	4683      	mov	fp, r0
 800ea02:	e7eb      	b.n	800e9dc <_dtoa_r+0xba4>
 800ea04:	080243c1 	.word	0x080243c1
 800ea08:	08024120 	.word	0x08024120
 800ea0c:	08024355 	.word	0x08024355

0800ea10 <fiprintf>:
 800ea10:	b40e      	push	{r1, r2, r3}
 800ea12:	b503      	push	{r0, r1, lr}
 800ea14:	4601      	mov	r1, r0
 800ea16:	ab03      	add	r3, sp, #12
 800ea18:	4805      	ldr	r0, [pc, #20]	; (800ea30 <fiprintf+0x20>)
 800ea1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea1e:	6800      	ldr	r0, [r0, #0]
 800ea20:	9301      	str	r3, [sp, #4]
 800ea22:	f001 fa9d 	bl	800ff60 <_vfiprintf_r>
 800ea26:	b002      	add	sp, #8
 800ea28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea2c:	b003      	add	sp, #12
 800ea2e:	4770      	bx	lr
 800ea30:	20000040 	.word	0x20000040

0800ea34 <rshift>:
 800ea34:	6903      	ldr	r3, [r0, #16]
 800ea36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ea3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ea42:	f100 0414 	add.w	r4, r0, #20
 800ea46:	dd45      	ble.n	800ead4 <rshift+0xa0>
 800ea48:	f011 011f 	ands.w	r1, r1, #31
 800ea4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ea50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ea54:	d10c      	bne.n	800ea70 <rshift+0x3c>
 800ea56:	f100 0710 	add.w	r7, r0, #16
 800ea5a:	4629      	mov	r1, r5
 800ea5c:	42b1      	cmp	r1, r6
 800ea5e:	d334      	bcc.n	800eaca <rshift+0x96>
 800ea60:	1a9b      	subs	r3, r3, r2
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	1eea      	subs	r2, r5, #3
 800ea66:	4296      	cmp	r6, r2
 800ea68:	bf38      	it	cc
 800ea6a:	2300      	movcc	r3, #0
 800ea6c:	4423      	add	r3, r4
 800ea6e:	e015      	b.n	800ea9c <rshift+0x68>
 800ea70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ea74:	f1c1 0820 	rsb	r8, r1, #32
 800ea78:	40cf      	lsrs	r7, r1
 800ea7a:	f105 0e04 	add.w	lr, r5, #4
 800ea7e:	46a1      	mov	r9, r4
 800ea80:	4576      	cmp	r6, lr
 800ea82:	46f4      	mov	ip, lr
 800ea84:	d815      	bhi.n	800eab2 <rshift+0x7e>
 800ea86:	1a9b      	subs	r3, r3, r2
 800ea88:	009a      	lsls	r2, r3, #2
 800ea8a:	3a04      	subs	r2, #4
 800ea8c:	3501      	adds	r5, #1
 800ea8e:	42ae      	cmp	r6, r5
 800ea90:	bf38      	it	cc
 800ea92:	2200      	movcc	r2, #0
 800ea94:	18a3      	adds	r3, r4, r2
 800ea96:	50a7      	str	r7, [r4, r2]
 800ea98:	b107      	cbz	r7, 800ea9c <rshift+0x68>
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	1b1a      	subs	r2, r3, r4
 800ea9e:	42a3      	cmp	r3, r4
 800eaa0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eaa4:	bf08      	it	eq
 800eaa6:	2300      	moveq	r3, #0
 800eaa8:	6102      	str	r2, [r0, #16]
 800eaaa:	bf08      	it	eq
 800eaac:	6143      	streq	r3, [r0, #20]
 800eaae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eab2:	f8dc c000 	ldr.w	ip, [ip]
 800eab6:	fa0c fc08 	lsl.w	ip, ip, r8
 800eaba:	ea4c 0707 	orr.w	r7, ip, r7
 800eabe:	f849 7b04 	str.w	r7, [r9], #4
 800eac2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eac6:	40cf      	lsrs	r7, r1
 800eac8:	e7da      	b.n	800ea80 <rshift+0x4c>
 800eaca:	f851 cb04 	ldr.w	ip, [r1], #4
 800eace:	f847 cf04 	str.w	ip, [r7, #4]!
 800ead2:	e7c3      	b.n	800ea5c <rshift+0x28>
 800ead4:	4623      	mov	r3, r4
 800ead6:	e7e1      	b.n	800ea9c <rshift+0x68>

0800ead8 <__hexdig_fun>:
 800ead8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800eadc:	2b09      	cmp	r3, #9
 800eade:	d802      	bhi.n	800eae6 <__hexdig_fun+0xe>
 800eae0:	3820      	subs	r0, #32
 800eae2:	b2c0      	uxtb	r0, r0
 800eae4:	4770      	bx	lr
 800eae6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800eaea:	2b05      	cmp	r3, #5
 800eaec:	d801      	bhi.n	800eaf2 <__hexdig_fun+0x1a>
 800eaee:	3847      	subs	r0, #71	; 0x47
 800eaf0:	e7f7      	b.n	800eae2 <__hexdig_fun+0xa>
 800eaf2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800eaf6:	2b05      	cmp	r3, #5
 800eaf8:	d801      	bhi.n	800eafe <__hexdig_fun+0x26>
 800eafa:	3827      	subs	r0, #39	; 0x27
 800eafc:	e7f1      	b.n	800eae2 <__hexdig_fun+0xa>
 800eafe:	2000      	movs	r0, #0
 800eb00:	4770      	bx	lr
	...

0800eb04 <__gethex>:
 800eb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb08:	ed2d 8b02 	vpush	{d8}
 800eb0c:	b089      	sub	sp, #36	; 0x24
 800eb0e:	ee08 0a10 	vmov	s16, r0
 800eb12:	9304      	str	r3, [sp, #16]
 800eb14:	4bbc      	ldr	r3, [pc, #752]	; (800ee08 <__gethex+0x304>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	9301      	str	r3, [sp, #4]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	468b      	mov	fp, r1
 800eb1e:	4690      	mov	r8, r2
 800eb20:	f7f1 fb68 	bl	80001f4 <strlen>
 800eb24:	9b01      	ldr	r3, [sp, #4]
 800eb26:	f8db 2000 	ldr.w	r2, [fp]
 800eb2a:	4403      	add	r3, r0
 800eb2c:	4682      	mov	sl, r0
 800eb2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800eb32:	9305      	str	r3, [sp, #20]
 800eb34:	1c93      	adds	r3, r2, #2
 800eb36:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800eb3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800eb3e:	32fe      	adds	r2, #254	; 0xfe
 800eb40:	18d1      	adds	r1, r2, r3
 800eb42:	461f      	mov	r7, r3
 800eb44:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eb48:	9100      	str	r1, [sp, #0]
 800eb4a:	2830      	cmp	r0, #48	; 0x30
 800eb4c:	d0f8      	beq.n	800eb40 <__gethex+0x3c>
 800eb4e:	f7ff ffc3 	bl	800ead8 <__hexdig_fun>
 800eb52:	4604      	mov	r4, r0
 800eb54:	2800      	cmp	r0, #0
 800eb56:	d13a      	bne.n	800ebce <__gethex+0xca>
 800eb58:	9901      	ldr	r1, [sp, #4]
 800eb5a:	4652      	mov	r2, sl
 800eb5c:	4638      	mov	r0, r7
 800eb5e:	f001 fb47 	bl	80101f0 <strncmp>
 800eb62:	4605      	mov	r5, r0
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d168      	bne.n	800ec3a <__gethex+0x136>
 800eb68:	f817 000a 	ldrb.w	r0, [r7, sl]
 800eb6c:	eb07 060a 	add.w	r6, r7, sl
 800eb70:	f7ff ffb2 	bl	800ead8 <__hexdig_fun>
 800eb74:	2800      	cmp	r0, #0
 800eb76:	d062      	beq.n	800ec3e <__gethex+0x13a>
 800eb78:	4633      	mov	r3, r6
 800eb7a:	7818      	ldrb	r0, [r3, #0]
 800eb7c:	2830      	cmp	r0, #48	; 0x30
 800eb7e:	461f      	mov	r7, r3
 800eb80:	f103 0301 	add.w	r3, r3, #1
 800eb84:	d0f9      	beq.n	800eb7a <__gethex+0x76>
 800eb86:	f7ff ffa7 	bl	800ead8 <__hexdig_fun>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	fab0 f480 	clz	r4, r0
 800eb90:	0964      	lsrs	r4, r4, #5
 800eb92:	4635      	mov	r5, r6
 800eb94:	9300      	str	r3, [sp, #0]
 800eb96:	463a      	mov	r2, r7
 800eb98:	4616      	mov	r6, r2
 800eb9a:	3201      	adds	r2, #1
 800eb9c:	7830      	ldrb	r0, [r6, #0]
 800eb9e:	f7ff ff9b 	bl	800ead8 <__hexdig_fun>
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d1f8      	bne.n	800eb98 <__gethex+0x94>
 800eba6:	9901      	ldr	r1, [sp, #4]
 800eba8:	4652      	mov	r2, sl
 800ebaa:	4630      	mov	r0, r6
 800ebac:	f001 fb20 	bl	80101f0 <strncmp>
 800ebb0:	b980      	cbnz	r0, 800ebd4 <__gethex+0xd0>
 800ebb2:	b94d      	cbnz	r5, 800ebc8 <__gethex+0xc4>
 800ebb4:	eb06 050a 	add.w	r5, r6, sl
 800ebb8:	462a      	mov	r2, r5
 800ebba:	4616      	mov	r6, r2
 800ebbc:	3201      	adds	r2, #1
 800ebbe:	7830      	ldrb	r0, [r6, #0]
 800ebc0:	f7ff ff8a 	bl	800ead8 <__hexdig_fun>
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	d1f8      	bne.n	800ebba <__gethex+0xb6>
 800ebc8:	1bad      	subs	r5, r5, r6
 800ebca:	00ad      	lsls	r5, r5, #2
 800ebcc:	e004      	b.n	800ebd8 <__gethex+0xd4>
 800ebce:	2400      	movs	r4, #0
 800ebd0:	4625      	mov	r5, r4
 800ebd2:	e7e0      	b.n	800eb96 <__gethex+0x92>
 800ebd4:	2d00      	cmp	r5, #0
 800ebd6:	d1f7      	bne.n	800ebc8 <__gethex+0xc4>
 800ebd8:	7833      	ldrb	r3, [r6, #0]
 800ebda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ebde:	2b50      	cmp	r3, #80	; 0x50
 800ebe0:	d13b      	bne.n	800ec5a <__gethex+0x156>
 800ebe2:	7873      	ldrb	r3, [r6, #1]
 800ebe4:	2b2b      	cmp	r3, #43	; 0x2b
 800ebe6:	d02c      	beq.n	800ec42 <__gethex+0x13e>
 800ebe8:	2b2d      	cmp	r3, #45	; 0x2d
 800ebea:	d02e      	beq.n	800ec4a <__gethex+0x146>
 800ebec:	1c71      	adds	r1, r6, #1
 800ebee:	f04f 0900 	mov.w	r9, #0
 800ebf2:	7808      	ldrb	r0, [r1, #0]
 800ebf4:	f7ff ff70 	bl	800ead8 <__hexdig_fun>
 800ebf8:	1e43      	subs	r3, r0, #1
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	2b18      	cmp	r3, #24
 800ebfe:	d82c      	bhi.n	800ec5a <__gethex+0x156>
 800ec00:	f1a0 0210 	sub.w	r2, r0, #16
 800ec04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ec08:	f7ff ff66 	bl	800ead8 <__hexdig_fun>
 800ec0c:	1e43      	subs	r3, r0, #1
 800ec0e:	b2db      	uxtb	r3, r3
 800ec10:	2b18      	cmp	r3, #24
 800ec12:	d91d      	bls.n	800ec50 <__gethex+0x14c>
 800ec14:	f1b9 0f00 	cmp.w	r9, #0
 800ec18:	d000      	beq.n	800ec1c <__gethex+0x118>
 800ec1a:	4252      	negs	r2, r2
 800ec1c:	4415      	add	r5, r2
 800ec1e:	f8cb 1000 	str.w	r1, [fp]
 800ec22:	b1e4      	cbz	r4, 800ec5e <__gethex+0x15a>
 800ec24:	9b00      	ldr	r3, [sp, #0]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	bf14      	ite	ne
 800ec2a:	2700      	movne	r7, #0
 800ec2c:	2706      	moveq	r7, #6
 800ec2e:	4638      	mov	r0, r7
 800ec30:	b009      	add	sp, #36	; 0x24
 800ec32:	ecbd 8b02 	vpop	{d8}
 800ec36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec3a:	463e      	mov	r6, r7
 800ec3c:	4625      	mov	r5, r4
 800ec3e:	2401      	movs	r4, #1
 800ec40:	e7ca      	b.n	800ebd8 <__gethex+0xd4>
 800ec42:	f04f 0900 	mov.w	r9, #0
 800ec46:	1cb1      	adds	r1, r6, #2
 800ec48:	e7d3      	b.n	800ebf2 <__gethex+0xee>
 800ec4a:	f04f 0901 	mov.w	r9, #1
 800ec4e:	e7fa      	b.n	800ec46 <__gethex+0x142>
 800ec50:	230a      	movs	r3, #10
 800ec52:	fb03 0202 	mla	r2, r3, r2, r0
 800ec56:	3a10      	subs	r2, #16
 800ec58:	e7d4      	b.n	800ec04 <__gethex+0x100>
 800ec5a:	4631      	mov	r1, r6
 800ec5c:	e7df      	b.n	800ec1e <__gethex+0x11a>
 800ec5e:	1bf3      	subs	r3, r6, r7
 800ec60:	3b01      	subs	r3, #1
 800ec62:	4621      	mov	r1, r4
 800ec64:	2b07      	cmp	r3, #7
 800ec66:	dc0b      	bgt.n	800ec80 <__gethex+0x17c>
 800ec68:	ee18 0a10 	vmov	r0, s16
 800ec6c:	f000 fa7e 	bl	800f16c <_Balloc>
 800ec70:	4604      	mov	r4, r0
 800ec72:	b940      	cbnz	r0, 800ec86 <__gethex+0x182>
 800ec74:	4b65      	ldr	r3, [pc, #404]	; (800ee0c <__gethex+0x308>)
 800ec76:	4602      	mov	r2, r0
 800ec78:	21de      	movs	r1, #222	; 0xde
 800ec7a:	4865      	ldr	r0, [pc, #404]	; (800ee10 <__gethex+0x30c>)
 800ec7c:	f7ff f830 	bl	800dce0 <__assert_func>
 800ec80:	3101      	adds	r1, #1
 800ec82:	105b      	asrs	r3, r3, #1
 800ec84:	e7ee      	b.n	800ec64 <__gethex+0x160>
 800ec86:	f100 0914 	add.w	r9, r0, #20
 800ec8a:	f04f 0b00 	mov.w	fp, #0
 800ec8e:	f1ca 0301 	rsb	r3, sl, #1
 800ec92:	f8cd 9008 	str.w	r9, [sp, #8]
 800ec96:	f8cd b000 	str.w	fp, [sp]
 800ec9a:	9306      	str	r3, [sp, #24]
 800ec9c:	42b7      	cmp	r7, r6
 800ec9e:	d340      	bcc.n	800ed22 <__gethex+0x21e>
 800eca0:	9802      	ldr	r0, [sp, #8]
 800eca2:	9b00      	ldr	r3, [sp, #0]
 800eca4:	f840 3b04 	str.w	r3, [r0], #4
 800eca8:	eba0 0009 	sub.w	r0, r0, r9
 800ecac:	1080      	asrs	r0, r0, #2
 800ecae:	0146      	lsls	r6, r0, #5
 800ecb0:	6120      	str	r0, [r4, #16]
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f000 fb50 	bl	800f358 <__hi0bits>
 800ecb8:	1a30      	subs	r0, r6, r0
 800ecba:	f8d8 6000 	ldr.w	r6, [r8]
 800ecbe:	42b0      	cmp	r0, r6
 800ecc0:	dd63      	ble.n	800ed8a <__gethex+0x286>
 800ecc2:	1b87      	subs	r7, r0, r6
 800ecc4:	4639      	mov	r1, r7
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f000 feea 	bl	800faa0 <__any_on>
 800eccc:	4682      	mov	sl, r0
 800ecce:	b1a8      	cbz	r0, 800ecfc <__gethex+0x1f8>
 800ecd0:	1e7b      	subs	r3, r7, #1
 800ecd2:	1159      	asrs	r1, r3, #5
 800ecd4:	f003 021f 	and.w	r2, r3, #31
 800ecd8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ecdc:	f04f 0a01 	mov.w	sl, #1
 800ece0:	fa0a f202 	lsl.w	r2, sl, r2
 800ece4:	420a      	tst	r2, r1
 800ece6:	d009      	beq.n	800ecfc <__gethex+0x1f8>
 800ece8:	4553      	cmp	r3, sl
 800ecea:	dd05      	ble.n	800ecf8 <__gethex+0x1f4>
 800ecec:	1eb9      	subs	r1, r7, #2
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f000 fed6 	bl	800faa0 <__any_on>
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	d145      	bne.n	800ed84 <__gethex+0x280>
 800ecf8:	f04f 0a02 	mov.w	sl, #2
 800ecfc:	4639      	mov	r1, r7
 800ecfe:	4620      	mov	r0, r4
 800ed00:	f7ff fe98 	bl	800ea34 <rshift>
 800ed04:	443d      	add	r5, r7
 800ed06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed0a:	42ab      	cmp	r3, r5
 800ed0c:	da4c      	bge.n	800eda8 <__gethex+0x2a4>
 800ed0e:	ee18 0a10 	vmov	r0, s16
 800ed12:	4621      	mov	r1, r4
 800ed14:	f000 fa6a 	bl	800f1ec <_Bfree>
 800ed18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	6013      	str	r3, [r2, #0]
 800ed1e:	27a3      	movs	r7, #163	; 0xa3
 800ed20:	e785      	b.n	800ec2e <__gethex+0x12a>
 800ed22:	1e73      	subs	r3, r6, #1
 800ed24:	9a05      	ldr	r2, [sp, #20]
 800ed26:	9303      	str	r3, [sp, #12]
 800ed28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d019      	beq.n	800ed64 <__gethex+0x260>
 800ed30:	f1bb 0f20 	cmp.w	fp, #32
 800ed34:	d107      	bne.n	800ed46 <__gethex+0x242>
 800ed36:	9b02      	ldr	r3, [sp, #8]
 800ed38:	9a00      	ldr	r2, [sp, #0]
 800ed3a:	f843 2b04 	str.w	r2, [r3], #4
 800ed3e:	9302      	str	r3, [sp, #8]
 800ed40:	2300      	movs	r3, #0
 800ed42:	9300      	str	r3, [sp, #0]
 800ed44:	469b      	mov	fp, r3
 800ed46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ed4a:	f7ff fec5 	bl	800ead8 <__hexdig_fun>
 800ed4e:	9b00      	ldr	r3, [sp, #0]
 800ed50:	f000 000f 	and.w	r0, r0, #15
 800ed54:	fa00 f00b 	lsl.w	r0, r0, fp
 800ed58:	4303      	orrs	r3, r0
 800ed5a:	9300      	str	r3, [sp, #0]
 800ed5c:	f10b 0b04 	add.w	fp, fp, #4
 800ed60:	9b03      	ldr	r3, [sp, #12]
 800ed62:	e00d      	b.n	800ed80 <__gethex+0x27c>
 800ed64:	9b03      	ldr	r3, [sp, #12]
 800ed66:	9a06      	ldr	r2, [sp, #24]
 800ed68:	4413      	add	r3, r2
 800ed6a:	42bb      	cmp	r3, r7
 800ed6c:	d3e0      	bcc.n	800ed30 <__gethex+0x22c>
 800ed6e:	4618      	mov	r0, r3
 800ed70:	9901      	ldr	r1, [sp, #4]
 800ed72:	9307      	str	r3, [sp, #28]
 800ed74:	4652      	mov	r2, sl
 800ed76:	f001 fa3b 	bl	80101f0 <strncmp>
 800ed7a:	9b07      	ldr	r3, [sp, #28]
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	d1d7      	bne.n	800ed30 <__gethex+0x22c>
 800ed80:	461e      	mov	r6, r3
 800ed82:	e78b      	b.n	800ec9c <__gethex+0x198>
 800ed84:	f04f 0a03 	mov.w	sl, #3
 800ed88:	e7b8      	b.n	800ecfc <__gethex+0x1f8>
 800ed8a:	da0a      	bge.n	800eda2 <__gethex+0x29e>
 800ed8c:	1a37      	subs	r7, r6, r0
 800ed8e:	4621      	mov	r1, r4
 800ed90:	ee18 0a10 	vmov	r0, s16
 800ed94:	463a      	mov	r2, r7
 800ed96:	f000 fc45 	bl	800f624 <__lshift>
 800ed9a:	1bed      	subs	r5, r5, r7
 800ed9c:	4604      	mov	r4, r0
 800ed9e:	f100 0914 	add.w	r9, r0, #20
 800eda2:	f04f 0a00 	mov.w	sl, #0
 800eda6:	e7ae      	b.n	800ed06 <__gethex+0x202>
 800eda8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800edac:	42a8      	cmp	r0, r5
 800edae:	dd72      	ble.n	800ee96 <__gethex+0x392>
 800edb0:	1b45      	subs	r5, r0, r5
 800edb2:	42ae      	cmp	r6, r5
 800edb4:	dc36      	bgt.n	800ee24 <__gethex+0x320>
 800edb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800edba:	2b02      	cmp	r3, #2
 800edbc:	d02a      	beq.n	800ee14 <__gethex+0x310>
 800edbe:	2b03      	cmp	r3, #3
 800edc0:	d02c      	beq.n	800ee1c <__gethex+0x318>
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d115      	bne.n	800edf2 <__gethex+0x2ee>
 800edc6:	42ae      	cmp	r6, r5
 800edc8:	d113      	bne.n	800edf2 <__gethex+0x2ee>
 800edca:	2e01      	cmp	r6, #1
 800edcc:	d10b      	bne.n	800ede6 <__gethex+0x2e2>
 800edce:	9a04      	ldr	r2, [sp, #16]
 800edd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800edd4:	6013      	str	r3, [r2, #0]
 800edd6:	2301      	movs	r3, #1
 800edd8:	6123      	str	r3, [r4, #16]
 800edda:	f8c9 3000 	str.w	r3, [r9]
 800edde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ede0:	2762      	movs	r7, #98	; 0x62
 800ede2:	601c      	str	r4, [r3, #0]
 800ede4:	e723      	b.n	800ec2e <__gethex+0x12a>
 800ede6:	1e71      	subs	r1, r6, #1
 800ede8:	4620      	mov	r0, r4
 800edea:	f000 fe59 	bl	800faa0 <__any_on>
 800edee:	2800      	cmp	r0, #0
 800edf0:	d1ed      	bne.n	800edce <__gethex+0x2ca>
 800edf2:	ee18 0a10 	vmov	r0, s16
 800edf6:	4621      	mov	r1, r4
 800edf8:	f000 f9f8 	bl	800f1ec <_Bfree>
 800edfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800edfe:	2300      	movs	r3, #0
 800ee00:	6013      	str	r3, [r2, #0]
 800ee02:	2750      	movs	r7, #80	; 0x50
 800ee04:	e713      	b.n	800ec2e <__gethex+0x12a>
 800ee06:	bf00      	nop
 800ee08:	0802443c 	.word	0x0802443c
 800ee0c:	080243c1 	.word	0x080243c1
 800ee10:	080243d2 	.word	0x080243d2
 800ee14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1eb      	bne.n	800edf2 <__gethex+0x2ee>
 800ee1a:	e7d8      	b.n	800edce <__gethex+0x2ca>
 800ee1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d1d5      	bne.n	800edce <__gethex+0x2ca>
 800ee22:	e7e6      	b.n	800edf2 <__gethex+0x2ee>
 800ee24:	1e6f      	subs	r7, r5, #1
 800ee26:	f1ba 0f00 	cmp.w	sl, #0
 800ee2a:	d131      	bne.n	800ee90 <__gethex+0x38c>
 800ee2c:	b127      	cbz	r7, 800ee38 <__gethex+0x334>
 800ee2e:	4639      	mov	r1, r7
 800ee30:	4620      	mov	r0, r4
 800ee32:	f000 fe35 	bl	800faa0 <__any_on>
 800ee36:	4682      	mov	sl, r0
 800ee38:	117b      	asrs	r3, r7, #5
 800ee3a:	2101      	movs	r1, #1
 800ee3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ee40:	f007 071f 	and.w	r7, r7, #31
 800ee44:	fa01 f707 	lsl.w	r7, r1, r7
 800ee48:	421f      	tst	r7, r3
 800ee4a:	4629      	mov	r1, r5
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	bf18      	it	ne
 800ee50:	f04a 0a02 	orrne.w	sl, sl, #2
 800ee54:	1b76      	subs	r6, r6, r5
 800ee56:	f7ff fded 	bl	800ea34 <rshift>
 800ee5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ee5e:	2702      	movs	r7, #2
 800ee60:	f1ba 0f00 	cmp.w	sl, #0
 800ee64:	d048      	beq.n	800eef8 <__gethex+0x3f4>
 800ee66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee6a:	2b02      	cmp	r3, #2
 800ee6c:	d015      	beq.n	800ee9a <__gethex+0x396>
 800ee6e:	2b03      	cmp	r3, #3
 800ee70:	d017      	beq.n	800eea2 <__gethex+0x39e>
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d109      	bne.n	800ee8a <__gethex+0x386>
 800ee76:	f01a 0f02 	tst.w	sl, #2
 800ee7a:	d006      	beq.n	800ee8a <__gethex+0x386>
 800ee7c:	f8d9 0000 	ldr.w	r0, [r9]
 800ee80:	ea4a 0a00 	orr.w	sl, sl, r0
 800ee84:	f01a 0f01 	tst.w	sl, #1
 800ee88:	d10e      	bne.n	800eea8 <__gethex+0x3a4>
 800ee8a:	f047 0710 	orr.w	r7, r7, #16
 800ee8e:	e033      	b.n	800eef8 <__gethex+0x3f4>
 800ee90:	f04f 0a01 	mov.w	sl, #1
 800ee94:	e7d0      	b.n	800ee38 <__gethex+0x334>
 800ee96:	2701      	movs	r7, #1
 800ee98:	e7e2      	b.n	800ee60 <__gethex+0x35c>
 800ee9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee9c:	f1c3 0301 	rsb	r3, r3, #1
 800eea0:	9315      	str	r3, [sp, #84]	; 0x54
 800eea2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d0f0      	beq.n	800ee8a <__gethex+0x386>
 800eea8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eeac:	f104 0314 	add.w	r3, r4, #20
 800eeb0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eeb4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eeb8:	f04f 0c00 	mov.w	ip, #0
 800eebc:	4618      	mov	r0, r3
 800eebe:	f853 2b04 	ldr.w	r2, [r3], #4
 800eec2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eec6:	d01c      	beq.n	800ef02 <__gethex+0x3fe>
 800eec8:	3201      	adds	r2, #1
 800eeca:	6002      	str	r2, [r0, #0]
 800eecc:	2f02      	cmp	r7, #2
 800eece:	f104 0314 	add.w	r3, r4, #20
 800eed2:	d13f      	bne.n	800ef54 <__gethex+0x450>
 800eed4:	f8d8 2000 	ldr.w	r2, [r8]
 800eed8:	3a01      	subs	r2, #1
 800eeda:	42b2      	cmp	r2, r6
 800eedc:	d10a      	bne.n	800eef4 <__gethex+0x3f0>
 800eede:	1171      	asrs	r1, r6, #5
 800eee0:	2201      	movs	r2, #1
 800eee2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eee6:	f006 061f 	and.w	r6, r6, #31
 800eeea:	fa02 f606 	lsl.w	r6, r2, r6
 800eeee:	421e      	tst	r6, r3
 800eef0:	bf18      	it	ne
 800eef2:	4617      	movne	r7, r2
 800eef4:	f047 0720 	orr.w	r7, r7, #32
 800eef8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eefa:	601c      	str	r4, [r3, #0]
 800eefc:	9b04      	ldr	r3, [sp, #16]
 800eefe:	601d      	str	r5, [r3, #0]
 800ef00:	e695      	b.n	800ec2e <__gethex+0x12a>
 800ef02:	4299      	cmp	r1, r3
 800ef04:	f843 cc04 	str.w	ip, [r3, #-4]
 800ef08:	d8d8      	bhi.n	800eebc <__gethex+0x3b8>
 800ef0a:	68a3      	ldr	r3, [r4, #8]
 800ef0c:	459b      	cmp	fp, r3
 800ef0e:	db19      	blt.n	800ef44 <__gethex+0x440>
 800ef10:	6861      	ldr	r1, [r4, #4]
 800ef12:	ee18 0a10 	vmov	r0, s16
 800ef16:	3101      	adds	r1, #1
 800ef18:	f000 f928 	bl	800f16c <_Balloc>
 800ef1c:	4681      	mov	r9, r0
 800ef1e:	b918      	cbnz	r0, 800ef28 <__gethex+0x424>
 800ef20:	4b1a      	ldr	r3, [pc, #104]	; (800ef8c <__gethex+0x488>)
 800ef22:	4602      	mov	r2, r0
 800ef24:	2184      	movs	r1, #132	; 0x84
 800ef26:	e6a8      	b.n	800ec7a <__gethex+0x176>
 800ef28:	6922      	ldr	r2, [r4, #16]
 800ef2a:	3202      	adds	r2, #2
 800ef2c:	f104 010c 	add.w	r1, r4, #12
 800ef30:	0092      	lsls	r2, r2, #2
 800ef32:	300c      	adds	r0, #12
 800ef34:	f000 f90c 	bl	800f150 <memcpy>
 800ef38:	4621      	mov	r1, r4
 800ef3a:	ee18 0a10 	vmov	r0, s16
 800ef3e:	f000 f955 	bl	800f1ec <_Bfree>
 800ef42:	464c      	mov	r4, r9
 800ef44:	6923      	ldr	r3, [r4, #16]
 800ef46:	1c5a      	adds	r2, r3, #1
 800ef48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ef4c:	6122      	str	r2, [r4, #16]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	615a      	str	r2, [r3, #20]
 800ef52:	e7bb      	b.n	800eecc <__gethex+0x3c8>
 800ef54:	6922      	ldr	r2, [r4, #16]
 800ef56:	455a      	cmp	r2, fp
 800ef58:	dd0b      	ble.n	800ef72 <__gethex+0x46e>
 800ef5a:	2101      	movs	r1, #1
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	f7ff fd69 	bl	800ea34 <rshift>
 800ef62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef66:	3501      	adds	r5, #1
 800ef68:	42ab      	cmp	r3, r5
 800ef6a:	f6ff aed0 	blt.w	800ed0e <__gethex+0x20a>
 800ef6e:	2701      	movs	r7, #1
 800ef70:	e7c0      	b.n	800eef4 <__gethex+0x3f0>
 800ef72:	f016 061f 	ands.w	r6, r6, #31
 800ef76:	d0fa      	beq.n	800ef6e <__gethex+0x46a>
 800ef78:	449a      	add	sl, r3
 800ef7a:	f1c6 0620 	rsb	r6, r6, #32
 800ef7e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ef82:	f000 f9e9 	bl	800f358 <__hi0bits>
 800ef86:	42b0      	cmp	r0, r6
 800ef88:	dbe7      	blt.n	800ef5a <__gethex+0x456>
 800ef8a:	e7f0      	b.n	800ef6e <__gethex+0x46a>
 800ef8c:	080243c1 	.word	0x080243c1

0800ef90 <L_shift>:
 800ef90:	f1c2 0208 	rsb	r2, r2, #8
 800ef94:	0092      	lsls	r2, r2, #2
 800ef96:	b570      	push	{r4, r5, r6, lr}
 800ef98:	f1c2 0620 	rsb	r6, r2, #32
 800ef9c:	6843      	ldr	r3, [r0, #4]
 800ef9e:	6804      	ldr	r4, [r0, #0]
 800efa0:	fa03 f506 	lsl.w	r5, r3, r6
 800efa4:	432c      	orrs	r4, r5
 800efa6:	40d3      	lsrs	r3, r2
 800efa8:	6004      	str	r4, [r0, #0]
 800efaa:	f840 3f04 	str.w	r3, [r0, #4]!
 800efae:	4288      	cmp	r0, r1
 800efb0:	d3f4      	bcc.n	800ef9c <L_shift+0xc>
 800efb2:	bd70      	pop	{r4, r5, r6, pc}

0800efb4 <__match>:
 800efb4:	b530      	push	{r4, r5, lr}
 800efb6:	6803      	ldr	r3, [r0, #0]
 800efb8:	3301      	adds	r3, #1
 800efba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efbe:	b914      	cbnz	r4, 800efc6 <__match+0x12>
 800efc0:	6003      	str	r3, [r0, #0]
 800efc2:	2001      	movs	r0, #1
 800efc4:	bd30      	pop	{r4, r5, pc}
 800efc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800efce:	2d19      	cmp	r5, #25
 800efd0:	bf98      	it	ls
 800efd2:	3220      	addls	r2, #32
 800efd4:	42a2      	cmp	r2, r4
 800efd6:	d0f0      	beq.n	800efba <__match+0x6>
 800efd8:	2000      	movs	r0, #0
 800efda:	e7f3      	b.n	800efc4 <__match+0x10>

0800efdc <__hexnan>:
 800efdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe0:	680b      	ldr	r3, [r1, #0]
 800efe2:	6801      	ldr	r1, [r0, #0]
 800efe4:	115e      	asrs	r6, r3, #5
 800efe6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800efea:	f013 031f 	ands.w	r3, r3, #31
 800efee:	b087      	sub	sp, #28
 800eff0:	bf18      	it	ne
 800eff2:	3604      	addne	r6, #4
 800eff4:	2500      	movs	r5, #0
 800eff6:	1f37      	subs	r7, r6, #4
 800eff8:	4682      	mov	sl, r0
 800effa:	4690      	mov	r8, r2
 800effc:	9301      	str	r3, [sp, #4]
 800effe:	f846 5c04 	str.w	r5, [r6, #-4]
 800f002:	46b9      	mov	r9, r7
 800f004:	463c      	mov	r4, r7
 800f006:	9502      	str	r5, [sp, #8]
 800f008:	46ab      	mov	fp, r5
 800f00a:	784a      	ldrb	r2, [r1, #1]
 800f00c:	1c4b      	adds	r3, r1, #1
 800f00e:	9303      	str	r3, [sp, #12]
 800f010:	b342      	cbz	r2, 800f064 <__hexnan+0x88>
 800f012:	4610      	mov	r0, r2
 800f014:	9105      	str	r1, [sp, #20]
 800f016:	9204      	str	r2, [sp, #16]
 800f018:	f7ff fd5e 	bl	800ead8 <__hexdig_fun>
 800f01c:	2800      	cmp	r0, #0
 800f01e:	d14f      	bne.n	800f0c0 <__hexnan+0xe4>
 800f020:	9a04      	ldr	r2, [sp, #16]
 800f022:	9905      	ldr	r1, [sp, #20]
 800f024:	2a20      	cmp	r2, #32
 800f026:	d818      	bhi.n	800f05a <__hexnan+0x7e>
 800f028:	9b02      	ldr	r3, [sp, #8]
 800f02a:	459b      	cmp	fp, r3
 800f02c:	dd13      	ble.n	800f056 <__hexnan+0x7a>
 800f02e:	454c      	cmp	r4, r9
 800f030:	d206      	bcs.n	800f040 <__hexnan+0x64>
 800f032:	2d07      	cmp	r5, #7
 800f034:	dc04      	bgt.n	800f040 <__hexnan+0x64>
 800f036:	462a      	mov	r2, r5
 800f038:	4649      	mov	r1, r9
 800f03a:	4620      	mov	r0, r4
 800f03c:	f7ff ffa8 	bl	800ef90 <L_shift>
 800f040:	4544      	cmp	r4, r8
 800f042:	d950      	bls.n	800f0e6 <__hexnan+0x10a>
 800f044:	2300      	movs	r3, #0
 800f046:	f1a4 0904 	sub.w	r9, r4, #4
 800f04a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f04e:	f8cd b008 	str.w	fp, [sp, #8]
 800f052:	464c      	mov	r4, r9
 800f054:	461d      	mov	r5, r3
 800f056:	9903      	ldr	r1, [sp, #12]
 800f058:	e7d7      	b.n	800f00a <__hexnan+0x2e>
 800f05a:	2a29      	cmp	r2, #41	; 0x29
 800f05c:	d156      	bne.n	800f10c <__hexnan+0x130>
 800f05e:	3102      	adds	r1, #2
 800f060:	f8ca 1000 	str.w	r1, [sl]
 800f064:	f1bb 0f00 	cmp.w	fp, #0
 800f068:	d050      	beq.n	800f10c <__hexnan+0x130>
 800f06a:	454c      	cmp	r4, r9
 800f06c:	d206      	bcs.n	800f07c <__hexnan+0xa0>
 800f06e:	2d07      	cmp	r5, #7
 800f070:	dc04      	bgt.n	800f07c <__hexnan+0xa0>
 800f072:	462a      	mov	r2, r5
 800f074:	4649      	mov	r1, r9
 800f076:	4620      	mov	r0, r4
 800f078:	f7ff ff8a 	bl	800ef90 <L_shift>
 800f07c:	4544      	cmp	r4, r8
 800f07e:	d934      	bls.n	800f0ea <__hexnan+0x10e>
 800f080:	f1a8 0204 	sub.w	r2, r8, #4
 800f084:	4623      	mov	r3, r4
 800f086:	f853 1b04 	ldr.w	r1, [r3], #4
 800f08a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f08e:	429f      	cmp	r7, r3
 800f090:	d2f9      	bcs.n	800f086 <__hexnan+0xaa>
 800f092:	1b3b      	subs	r3, r7, r4
 800f094:	f023 0303 	bic.w	r3, r3, #3
 800f098:	3304      	adds	r3, #4
 800f09a:	3401      	adds	r4, #1
 800f09c:	3e03      	subs	r6, #3
 800f09e:	42b4      	cmp	r4, r6
 800f0a0:	bf88      	it	hi
 800f0a2:	2304      	movhi	r3, #4
 800f0a4:	4443      	add	r3, r8
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f843 2b04 	str.w	r2, [r3], #4
 800f0ac:	429f      	cmp	r7, r3
 800f0ae:	d2fb      	bcs.n	800f0a8 <__hexnan+0xcc>
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	b91b      	cbnz	r3, 800f0bc <__hexnan+0xe0>
 800f0b4:	4547      	cmp	r7, r8
 800f0b6:	d127      	bne.n	800f108 <__hexnan+0x12c>
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	603b      	str	r3, [r7, #0]
 800f0bc:	2005      	movs	r0, #5
 800f0be:	e026      	b.n	800f10e <__hexnan+0x132>
 800f0c0:	3501      	adds	r5, #1
 800f0c2:	2d08      	cmp	r5, #8
 800f0c4:	f10b 0b01 	add.w	fp, fp, #1
 800f0c8:	dd06      	ble.n	800f0d8 <__hexnan+0xfc>
 800f0ca:	4544      	cmp	r4, r8
 800f0cc:	d9c3      	bls.n	800f056 <__hexnan+0x7a>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f0d4:	2501      	movs	r5, #1
 800f0d6:	3c04      	subs	r4, #4
 800f0d8:	6822      	ldr	r2, [r4, #0]
 800f0da:	f000 000f 	and.w	r0, r0, #15
 800f0de:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f0e2:	6022      	str	r2, [r4, #0]
 800f0e4:	e7b7      	b.n	800f056 <__hexnan+0x7a>
 800f0e6:	2508      	movs	r5, #8
 800f0e8:	e7b5      	b.n	800f056 <__hexnan+0x7a>
 800f0ea:	9b01      	ldr	r3, [sp, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d0df      	beq.n	800f0b0 <__hexnan+0xd4>
 800f0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0f4:	f1c3 0320 	rsb	r3, r3, #32
 800f0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800f0fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f100:	401a      	ands	r2, r3
 800f102:	f846 2c04 	str.w	r2, [r6, #-4]
 800f106:	e7d3      	b.n	800f0b0 <__hexnan+0xd4>
 800f108:	3f04      	subs	r7, #4
 800f10a:	e7d1      	b.n	800f0b0 <__hexnan+0xd4>
 800f10c:	2004      	movs	r0, #4
 800f10e:	b007      	add	sp, #28
 800f110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f114 <_localeconv_r>:
 800f114:	4800      	ldr	r0, [pc, #0]	; (800f118 <_localeconv_r+0x4>)
 800f116:	4770      	bx	lr
 800f118:	20000198 	.word	0x20000198

0800f11c <malloc>:
 800f11c:	4b02      	ldr	r3, [pc, #8]	; (800f128 <malloc+0xc>)
 800f11e:	4601      	mov	r1, r0
 800f120:	6818      	ldr	r0, [r3, #0]
 800f122:	f000 bd3d 	b.w	800fba0 <_malloc_r>
 800f126:	bf00      	nop
 800f128:	20000040 	.word	0x20000040

0800f12c <__ascii_mbtowc>:
 800f12c:	b082      	sub	sp, #8
 800f12e:	b901      	cbnz	r1, 800f132 <__ascii_mbtowc+0x6>
 800f130:	a901      	add	r1, sp, #4
 800f132:	b142      	cbz	r2, 800f146 <__ascii_mbtowc+0x1a>
 800f134:	b14b      	cbz	r3, 800f14a <__ascii_mbtowc+0x1e>
 800f136:	7813      	ldrb	r3, [r2, #0]
 800f138:	600b      	str	r3, [r1, #0]
 800f13a:	7812      	ldrb	r2, [r2, #0]
 800f13c:	1e10      	subs	r0, r2, #0
 800f13e:	bf18      	it	ne
 800f140:	2001      	movne	r0, #1
 800f142:	b002      	add	sp, #8
 800f144:	4770      	bx	lr
 800f146:	4610      	mov	r0, r2
 800f148:	e7fb      	b.n	800f142 <__ascii_mbtowc+0x16>
 800f14a:	f06f 0001 	mvn.w	r0, #1
 800f14e:	e7f8      	b.n	800f142 <__ascii_mbtowc+0x16>

0800f150 <memcpy>:
 800f150:	440a      	add	r2, r1
 800f152:	4291      	cmp	r1, r2
 800f154:	f100 33ff 	add.w	r3, r0, #4294967295
 800f158:	d100      	bne.n	800f15c <memcpy+0xc>
 800f15a:	4770      	bx	lr
 800f15c:	b510      	push	{r4, lr}
 800f15e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f162:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f166:	4291      	cmp	r1, r2
 800f168:	d1f9      	bne.n	800f15e <memcpy+0xe>
 800f16a:	bd10      	pop	{r4, pc}

0800f16c <_Balloc>:
 800f16c:	b570      	push	{r4, r5, r6, lr}
 800f16e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f170:	4604      	mov	r4, r0
 800f172:	460d      	mov	r5, r1
 800f174:	b976      	cbnz	r6, 800f194 <_Balloc+0x28>
 800f176:	2010      	movs	r0, #16
 800f178:	f7ff ffd0 	bl	800f11c <malloc>
 800f17c:	4602      	mov	r2, r0
 800f17e:	6260      	str	r0, [r4, #36]	; 0x24
 800f180:	b920      	cbnz	r0, 800f18c <_Balloc+0x20>
 800f182:	4b18      	ldr	r3, [pc, #96]	; (800f1e4 <_Balloc+0x78>)
 800f184:	4818      	ldr	r0, [pc, #96]	; (800f1e8 <_Balloc+0x7c>)
 800f186:	2166      	movs	r1, #102	; 0x66
 800f188:	f7fe fdaa 	bl	800dce0 <__assert_func>
 800f18c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f190:	6006      	str	r6, [r0, #0]
 800f192:	60c6      	str	r6, [r0, #12]
 800f194:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f196:	68f3      	ldr	r3, [r6, #12]
 800f198:	b183      	cbz	r3, 800f1bc <_Balloc+0x50>
 800f19a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f1a2:	b9b8      	cbnz	r0, 800f1d4 <_Balloc+0x68>
 800f1a4:	2101      	movs	r1, #1
 800f1a6:	fa01 f605 	lsl.w	r6, r1, r5
 800f1aa:	1d72      	adds	r2, r6, #5
 800f1ac:	0092      	lsls	r2, r2, #2
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f000 fc97 	bl	800fae2 <_calloc_r>
 800f1b4:	b160      	cbz	r0, 800f1d0 <_Balloc+0x64>
 800f1b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f1ba:	e00e      	b.n	800f1da <_Balloc+0x6e>
 800f1bc:	2221      	movs	r2, #33	; 0x21
 800f1be:	2104      	movs	r1, #4
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f000 fc8e 	bl	800fae2 <_calloc_r>
 800f1c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1c8:	60f0      	str	r0, [r6, #12]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d1e4      	bne.n	800f19a <_Balloc+0x2e>
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	bd70      	pop	{r4, r5, r6, pc}
 800f1d4:	6802      	ldr	r2, [r0, #0]
 800f1d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f1da:	2300      	movs	r3, #0
 800f1dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f1e0:	e7f7      	b.n	800f1d2 <_Balloc+0x66>
 800f1e2:	bf00      	nop
 800f1e4:	080241a0 	.word	0x080241a0
 800f1e8:	08024450 	.word	0x08024450

0800f1ec <_Bfree>:
 800f1ec:	b570      	push	{r4, r5, r6, lr}
 800f1ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f1f0:	4605      	mov	r5, r0
 800f1f2:	460c      	mov	r4, r1
 800f1f4:	b976      	cbnz	r6, 800f214 <_Bfree+0x28>
 800f1f6:	2010      	movs	r0, #16
 800f1f8:	f7ff ff90 	bl	800f11c <malloc>
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	6268      	str	r0, [r5, #36]	; 0x24
 800f200:	b920      	cbnz	r0, 800f20c <_Bfree+0x20>
 800f202:	4b09      	ldr	r3, [pc, #36]	; (800f228 <_Bfree+0x3c>)
 800f204:	4809      	ldr	r0, [pc, #36]	; (800f22c <_Bfree+0x40>)
 800f206:	218a      	movs	r1, #138	; 0x8a
 800f208:	f7fe fd6a 	bl	800dce0 <__assert_func>
 800f20c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f210:	6006      	str	r6, [r0, #0]
 800f212:	60c6      	str	r6, [r0, #12]
 800f214:	b13c      	cbz	r4, 800f226 <_Bfree+0x3a>
 800f216:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f218:	6862      	ldr	r2, [r4, #4]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f220:	6021      	str	r1, [r4, #0]
 800f222:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f226:	bd70      	pop	{r4, r5, r6, pc}
 800f228:	080241a0 	.word	0x080241a0
 800f22c:	08024450 	.word	0x08024450

0800f230 <__multadd>:
 800f230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f234:	690e      	ldr	r6, [r1, #16]
 800f236:	4607      	mov	r7, r0
 800f238:	4698      	mov	r8, r3
 800f23a:	460c      	mov	r4, r1
 800f23c:	f101 0014 	add.w	r0, r1, #20
 800f240:	2300      	movs	r3, #0
 800f242:	6805      	ldr	r5, [r0, #0]
 800f244:	b2a9      	uxth	r1, r5
 800f246:	fb02 8101 	mla	r1, r2, r1, r8
 800f24a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f24e:	0c2d      	lsrs	r5, r5, #16
 800f250:	fb02 c505 	mla	r5, r2, r5, ip
 800f254:	b289      	uxth	r1, r1
 800f256:	3301      	adds	r3, #1
 800f258:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f25c:	429e      	cmp	r6, r3
 800f25e:	f840 1b04 	str.w	r1, [r0], #4
 800f262:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f266:	dcec      	bgt.n	800f242 <__multadd+0x12>
 800f268:	f1b8 0f00 	cmp.w	r8, #0
 800f26c:	d022      	beq.n	800f2b4 <__multadd+0x84>
 800f26e:	68a3      	ldr	r3, [r4, #8]
 800f270:	42b3      	cmp	r3, r6
 800f272:	dc19      	bgt.n	800f2a8 <__multadd+0x78>
 800f274:	6861      	ldr	r1, [r4, #4]
 800f276:	4638      	mov	r0, r7
 800f278:	3101      	adds	r1, #1
 800f27a:	f7ff ff77 	bl	800f16c <_Balloc>
 800f27e:	4605      	mov	r5, r0
 800f280:	b928      	cbnz	r0, 800f28e <__multadd+0x5e>
 800f282:	4602      	mov	r2, r0
 800f284:	4b0d      	ldr	r3, [pc, #52]	; (800f2bc <__multadd+0x8c>)
 800f286:	480e      	ldr	r0, [pc, #56]	; (800f2c0 <__multadd+0x90>)
 800f288:	21b5      	movs	r1, #181	; 0xb5
 800f28a:	f7fe fd29 	bl	800dce0 <__assert_func>
 800f28e:	6922      	ldr	r2, [r4, #16]
 800f290:	3202      	adds	r2, #2
 800f292:	f104 010c 	add.w	r1, r4, #12
 800f296:	0092      	lsls	r2, r2, #2
 800f298:	300c      	adds	r0, #12
 800f29a:	f7ff ff59 	bl	800f150 <memcpy>
 800f29e:	4621      	mov	r1, r4
 800f2a0:	4638      	mov	r0, r7
 800f2a2:	f7ff ffa3 	bl	800f1ec <_Bfree>
 800f2a6:	462c      	mov	r4, r5
 800f2a8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f2ac:	3601      	adds	r6, #1
 800f2ae:	f8c3 8014 	str.w	r8, [r3, #20]
 800f2b2:	6126      	str	r6, [r4, #16]
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2ba:	bf00      	nop
 800f2bc:	080243c1 	.word	0x080243c1
 800f2c0:	08024450 	.word	0x08024450

0800f2c4 <__s2b>:
 800f2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2c8:	460c      	mov	r4, r1
 800f2ca:	4615      	mov	r5, r2
 800f2cc:	461f      	mov	r7, r3
 800f2ce:	2209      	movs	r2, #9
 800f2d0:	3308      	adds	r3, #8
 800f2d2:	4606      	mov	r6, r0
 800f2d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2d8:	2100      	movs	r1, #0
 800f2da:	2201      	movs	r2, #1
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	db09      	blt.n	800f2f4 <__s2b+0x30>
 800f2e0:	4630      	mov	r0, r6
 800f2e2:	f7ff ff43 	bl	800f16c <_Balloc>
 800f2e6:	b940      	cbnz	r0, 800f2fa <__s2b+0x36>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	4b19      	ldr	r3, [pc, #100]	; (800f350 <__s2b+0x8c>)
 800f2ec:	4819      	ldr	r0, [pc, #100]	; (800f354 <__s2b+0x90>)
 800f2ee:	21ce      	movs	r1, #206	; 0xce
 800f2f0:	f7fe fcf6 	bl	800dce0 <__assert_func>
 800f2f4:	0052      	lsls	r2, r2, #1
 800f2f6:	3101      	adds	r1, #1
 800f2f8:	e7f0      	b.n	800f2dc <__s2b+0x18>
 800f2fa:	9b08      	ldr	r3, [sp, #32]
 800f2fc:	6143      	str	r3, [r0, #20]
 800f2fe:	2d09      	cmp	r5, #9
 800f300:	f04f 0301 	mov.w	r3, #1
 800f304:	6103      	str	r3, [r0, #16]
 800f306:	dd16      	ble.n	800f336 <__s2b+0x72>
 800f308:	f104 0909 	add.w	r9, r4, #9
 800f30c:	46c8      	mov	r8, r9
 800f30e:	442c      	add	r4, r5
 800f310:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f314:	4601      	mov	r1, r0
 800f316:	3b30      	subs	r3, #48	; 0x30
 800f318:	220a      	movs	r2, #10
 800f31a:	4630      	mov	r0, r6
 800f31c:	f7ff ff88 	bl	800f230 <__multadd>
 800f320:	45a0      	cmp	r8, r4
 800f322:	d1f5      	bne.n	800f310 <__s2b+0x4c>
 800f324:	f1a5 0408 	sub.w	r4, r5, #8
 800f328:	444c      	add	r4, r9
 800f32a:	1b2d      	subs	r5, r5, r4
 800f32c:	1963      	adds	r3, r4, r5
 800f32e:	42bb      	cmp	r3, r7
 800f330:	db04      	blt.n	800f33c <__s2b+0x78>
 800f332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f336:	340a      	adds	r4, #10
 800f338:	2509      	movs	r5, #9
 800f33a:	e7f6      	b.n	800f32a <__s2b+0x66>
 800f33c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f340:	4601      	mov	r1, r0
 800f342:	3b30      	subs	r3, #48	; 0x30
 800f344:	220a      	movs	r2, #10
 800f346:	4630      	mov	r0, r6
 800f348:	f7ff ff72 	bl	800f230 <__multadd>
 800f34c:	e7ee      	b.n	800f32c <__s2b+0x68>
 800f34e:	bf00      	nop
 800f350:	080243c1 	.word	0x080243c1
 800f354:	08024450 	.word	0x08024450

0800f358 <__hi0bits>:
 800f358:	0c03      	lsrs	r3, r0, #16
 800f35a:	041b      	lsls	r3, r3, #16
 800f35c:	b9d3      	cbnz	r3, 800f394 <__hi0bits+0x3c>
 800f35e:	0400      	lsls	r0, r0, #16
 800f360:	2310      	movs	r3, #16
 800f362:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f366:	bf04      	itt	eq
 800f368:	0200      	lsleq	r0, r0, #8
 800f36a:	3308      	addeq	r3, #8
 800f36c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f370:	bf04      	itt	eq
 800f372:	0100      	lsleq	r0, r0, #4
 800f374:	3304      	addeq	r3, #4
 800f376:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f37a:	bf04      	itt	eq
 800f37c:	0080      	lsleq	r0, r0, #2
 800f37e:	3302      	addeq	r3, #2
 800f380:	2800      	cmp	r0, #0
 800f382:	db05      	blt.n	800f390 <__hi0bits+0x38>
 800f384:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f388:	f103 0301 	add.w	r3, r3, #1
 800f38c:	bf08      	it	eq
 800f38e:	2320      	moveq	r3, #32
 800f390:	4618      	mov	r0, r3
 800f392:	4770      	bx	lr
 800f394:	2300      	movs	r3, #0
 800f396:	e7e4      	b.n	800f362 <__hi0bits+0xa>

0800f398 <__lo0bits>:
 800f398:	6803      	ldr	r3, [r0, #0]
 800f39a:	f013 0207 	ands.w	r2, r3, #7
 800f39e:	4601      	mov	r1, r0
 800f3a0:	d00b      	beq.n	800f3ba <__lo0bits+0x22>
 800f3a2:	07da      	lsls	r2, r3, #31
 800f3a4:	d424      	bmi.n	800f3f0 <__lo0bits+0x58>
 800f3a6:	0798      	lsls	r0, r3, #30
 800f3a8:	bf49      	itett	mi
 800f3aa:	085b      	lsrmi	r3, r3, #1
 800f3ac:	089b      	lsrpl	r3, r3, #2
 800f3ae:	2001      	movmi	r0, #1
 800f3b0:	600b      	strmi	r3, [r1, #0]
 800f3b2:	bf5c      	itt	pl
 800f3b4:	600b      	strpl	r3, [r1, #0]
 800f3b6:	2002      	movpl	r0, #2
 800f3b8:	4770      	bx	lr
 800f3ba:	b298      	uxth	r0, r3
 800f3bc:	b9b0      	cbnz	r0, 800f3ec <__lo0bits+0x54>
 800f3be:	0c1b      	lsrs	r3, r3, #16
 800f3c0:	2010      	movs	r0, #16
 800f3c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f3c6:	bf04      	itt	eq
 800f3c8:	0a1b      	lsreq	r3, r3, #8
 800f3ca:	3008      	addeq	r0, #8
 800f3cc:	071a      	lsls	r2, r3, #28
 800f3ce:	bf04      	itt	eq
 800f3d0:	091b      	lsreq	r3, r3, #4
 800f3d2:	3004      	addeq	r0, #4
 800f3d4:	079a      	lsls	r2, r3, #30
 800f3d6:	bf04      	itt	eq
 800f3d8:	089b      	lsreq	r3, r3, #2
 800f3da:	3002      	addeq	r0, #2
 800f3dc:	07da      	lsls	r2, r3, #31
 800f3de:	d403      	bmi.n	800f3e8 <__lo0bits+0x50>
 800f3e0:	085b      	lsrs	r3, r3, #1
 800f3e2:	f100 0001 	add.w	r0, r0, #1
 800f3e6:	d005      	beq.n	800f3f4 <__lo0bits+0x5c>
 800f3e8:	600b      	str	r3, [r1, #0]
 800f3ea:	4770      	bx	lr
 800f3ec:	4610      	mov	r0, r2
 800f3ee:	e7e8      	b.n	800f3c2 <__lo0bits+0x2a>
 800f3f0:	2000      	movs	r0, #0
 800f3f2:	4770      	bx	lr
 800f3f4:	2020      	movs	r0, #32
 800f3f6:	4770      	bx	lr

0800f3f8 <__i2b>:
 800f3f8:	b510      	push	{r4, lr}
 800f3fa:	460c      	mov	r4, r1
 800f3fc:	2101      	movs	r1, #1
 800f3fe:	f7ff feb5 	bl	800f16c <_Balloc>
 800f402:	4602      	mov	r2, r0
 800f404:	b928      	cbnz	r0, 800f412 <__i2b+0x1a>
 800f406:	4b05      	ldr	r3, [pc, #20]	; (800f41c <__i2b+0x24>)
 800f408:	4805      	ldr	r0, [pc, #20]	; (800f420 <__i2b+0x28>)
 800f40a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f40e:	f7fe fc67 	bl	800dce0 <__assert_func>
 800f412:	2301      	movs	r3, #1
 800f414:	6144      	str	r4, [r0, #20]
 800f416:	6103      	str	r3, [r0, #16]
 800f418:	bd10      	pop	{r4, pc}
 800f41a:	bf00      	nop
 800f41c:	080243c1 	.word	0x080243c1
 800f420:	08024450 	.word	0x08024450

0800f424 <__multiply>:
 800f424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f428:	4614      	mov	r4, r2
 800f42a:	690a      	ldr	r2, [r1, #16]
 800f42c:	6923      	ldr	r3, [r4, #16]
 800f42e:	429a      	cmp	r2, r3
 800f430:	bfb8      	it	lt
 800f432:	460b      	movlt	r3, r1
 800f434:	460d      	mov	r5, r1
 800f436:	bfbc      	itt	lt
 800f438:	4625      	movlt	r5, r4
 800f43a:	461c      	movlt	r4, r3
 800f43c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f440:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f444:	68ab      	ldr	r3, [r5, #8]
 800f446:	6869      	ldr	r1, [r5, #4]
 800f448:	eb0a 0709 	add.w	r7, sl, r9
 800f44c:	42bb      	cmp	r3, r7
 800f44e:	b085      	sub	sp, #20
 800f450:	bfb8      	it	lt
 800f452:	3101      	addlt	r1, #1
 800f454:	f7ff fe8a 	bl	800f16c <_Balloc>
 800f458:	b930      	cbnz	r0, 800f468 <__multiply+0x44>
 800f45a:	4602      	mov	r2, r0
 800f45c:	4b42      	ldr	r3, [pc, #264]	; (800f568 <__multiply+0x144>)
 800f45e:	4843      	ldr	r0, [pc, #268]	; (800f56c <__multiply+0x148>)
 800f460:	f240 115d 	movw	r1, #349	; 0x15d
 800f464:	f7fe fc3c 	bl	800dce0 <__assert_func>
 800f468:	f100 0614 	add.w	r6, r0, #20
 800f46c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f470:	4633      	mov	r3, r6
 800f472:	2200      	movs	r2, #0
 800f474:	4543      	cmp	r3, r8
 800f476:	d31e      	bcc.n	800f4b6 <__multiply+0x92>
 800f478:	f105 0c14 	add.w	ip, r5, #20
 800f47c:	f104 0314 	add.w	r3, r4, #20
 800f480:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f484:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f488:	9202      	str	r2, [sp, #8]
 800f48a:	ebac 0205 	sub.w	r2, ip, r5
 800f48e:	3a15      	subs	r2, #21
 800f490:	f022 0203 	bic.w	r2, r2, #3
 800f494:	3204      	adds	r2, #4
 800f496:	f105 0115 	add.w	r1, r5, #21
 800f49a:	458c      	cmp	ip, r1
 800f49c:	bf38      	it	cc
 800f49e:	2204      	movcc	r2, #4
 800f4a0:	9201      	str	r2, [sp, #4]
 800f4a2:	9a02      	ldr	r2, [sp, #8]
 800f4a4:	9303      	str	r3, [sp, #12]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d808      	bhi.n	800f4bc <__multiply+0x98>
 800f4aa:	2f00      	cmp	r7, #0
 800f4ac:	dc55      	bgt.n	800f55a <__multiply+0x136>
 800f4ae:	6107      	str	r7, [r0, #16]
 800f4b0:	b005      	add	sp, #20
 800f4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4b6:	f843 2b04 	str.w	r2, [r3], #4
 800f4ba:	e7db      	b.n	800f474 <__multiply+0x50>
 800f4bc:	f8b3 a000 	ldrh.w	sl, [r3]
 800f4c0:	f1ba 0f00 	cmp.w	sl, #0
 800f4c4:	d020      	beq.n	800f508 <__multiply+0xe4>
 800f4c6:	f105 0e14 	add.w	lr, r5, #20
 800f4ca:	46b1      	mov	r9, r6
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f4d2:	f8d9 b000 	ldr.w	fp, [r9]
 800f4d6:	b2a1      	uxth	r1, r4
 800f4d8:	fa1f fb8b 	uxth.w	fp, fp
 800f4dc:	fb0a b101 	mla	r1, sl, r1, fp
 800f4e0:	4411      	add	r1, r2
 800f4e2:	f8d9 2000 	ldr.w	r2, [r9]
 800f4e6:	0c24      	lsrs	r4, r4, #16
 800f4e8:	0c12      	lsrs	r2, r2, #16
 800f4ea:	fb0a 2404 	mla	r4, sl, r4, r2
 800f4ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f4f2:	b289      	uxth	r1, r1
 800f4f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f4f8:	45f4      	cmp	ip, lr
 800f4fa:	f849 1b04 	str.w	r1, [r9], #4
 800f4fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f502:	d8e4      	bhi.n	800f4ce <__multiply+0xaa>
 800f504:	9901      	ldr	r1, [sp, #4]
 800f506:	5072      	str	r2, [r6, r1]
 800f508:	9a03      	ldr	r2, [sp, #12]
 800f50a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f50e:	3304      	adds	r3, #4
 800f510:	f1b9 0f00 	cmp.w	r9, #0
 800f514:	d01f      	beq.n	800f556 <__multiply+0x132>
 800f516:	6834      	ldr	r4, [r6, #0]
 800f518:	f105 0114 	add.w	r1, r5, #20
 800f51c:	46b6      	mov	lr, r6
 800f51e:	f04f 0a00 	mov.w	sl, #0
 800f522:	880a      	ldrh	r2, [r1, #0]
 800f524:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f528:	fb09 b202 	mla	r2, r9, r2, fp
 800f52c:	4492      	add	sl, r2
 800f52e:	b2a4      	uxth	r4, r4
 800f530:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f534:	f84e 4b04 	str.w	r4, [lr], #4
 800f538:	f851 4b04 	ldr.w	r4, [r1], #4
 800f53c:	f8be 2000 	ldrh.w	r2, [lr]
 800f540:	0c24      	lsrs	r4, r4, #16
 800f542:	fb09 2404 	mla	r4, r9, r4, r2
 800f546:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f54a:	458c      	cmp	ip, r1
 800f54c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f550:	d8e7      	bhi.n	800f522 <__multiply+0xfe>
 800f552:	9a01      	ldr	r2, [sp, #4]
 800f554:	50b4      	str	r4, [r6, r2]
 800f556:	3604      	adds	r6, #4
 800f558:	e7a3      	b.n	800f4a2 <__multiply+0x7e>
 800f55a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d1a5      	bne.n	800f4ae <__multiply+0x8a>
 800f562:	3f01      	subs	r7, #1
 800f564:	e7a1      	b.n	800f4aa <__multiply+0x86>
 800f566:	bf00      	nop
 800f568:	080243c1 	.word	0x080243c1
 800f56c:	08024450 	.word	0x08024450

0800f570 <__pow5mult>:
 800f570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f574:	4615      	mov	r5, r2
 800f576:	f012 0203 	ands.w	r2, r2, #3
 800f57a:	4606      	mov	r6, r0
 800f57c:	460f      	mov	r7, r1
 800f57e:	d007      	beq.n	800f590 <__pow5mult+0x20>
 800f580:	4c25      	ldr	r4, [pc, #148]	; (800f618 <__pow5mult+0xa8>)
 800f582:	3a01      	subs	r2, #1
 800f584:	2300      	movs	r3, #0
 800f586:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f58a:	f7ff fe51 	bl	800f230 <__multadd>
 800f58e:	4607      	mov	r7, r0
 800f590:	10ad      	asrs	r5, r5, #2
 800f592:	d03d      	beq.n	800f610 <__pow5mult+0xa0>
 800f594:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f596:	b97c      	cbnz	r4, 800f5b8 <__pow5mult+0x48>
 800f598:	2010      	movs	r0, #16
 800f59a:	f7ff fdbf 	bl	800f11c <malloc>
 800f59e:	4602      	mov	r2, r0
 800f5a0:	6270      	str	r0, [r6, #36]	; 0x24
 800f5a2:	b928      	cbnz	r0, 800f5b0 <__pow5mult+0x40>
 800f5a4:	4b1d      	ldr	r3, [pc, #116]	; (800f61c <__pow5mult+0xac>)
 800f5a6:	481e      	ldr	r0, [pc, #120]	; (800f620 <__pow5mult+0xb0>)
 800f5a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f5ac:	f7fe fb98 	bl	800dce0 <__assert_func>
 800f5b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5b4:	6004      	str	r4, [r0, #0]
 800f5b6:	60c4      	str	r4, [r0, #12]
 800f5b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f5bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f5c0:	b94c      	cbnz	r4, 800f5d6 <__pow5mult+0x66>
 800f5c2:	f240 2171 	movw	r1, #625	; 0x271
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f7ff ff16 	bl	800f3f8 <__i2b>
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	6003      	str	r3, [r0, #0]
 800f5d6:	f04f 0900 	mov.w	r9, #0
 800f5da:	07eb      	lsls	r3, r5, #31
 800f5dc:	d50a      	bpl.n	800f5f4 <__pow5mult+0x84>
 800f5de:	4639      	mov	r1, r7
 800f5e0:	4622      	mov	r2, r4
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	f7ff ff1e 	bl	800f424 <__multiply>
 800f5e8:	4639      	mov	r1, r7
 800f5ea:	4680      	mov	r8, r0
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	f7ff fdfd 	bl	800f1ec <_Bfree>
 800f5f2:	4647      	mov	r7, r8
 800f5f4:	106d      	asrs	r5, r5, #1
 800f5f6:	d00b      	beq.n	800f610 <__pow5mult+0xa0>
 800f5f8:	6820      	ldr	r0, [r4, #0]
 800f5fa:	b938      	cbnz	r0, 800f60c <__pow5mult+0x9c>
 800f5fc:	4622      	mov	r2, r4
 800f5fe:	4621      	mov	r1, r4
 800f600:	4630      	mov	r0, r6
 800f602:	f7ff ff0f 	bl	800f424 <__multiply>
 800f606:	6020      	str	r0, [r4, #0]
 800f608:	f8c0 9000 	str.w	r9, [r0]
 800f60c:	4604      	mov	r4, r0
 800f60e:	e7e4      	b.n	800f5da <__pow5mult+0x6a>
 800f610:	4638      	mov	r0, r7
 800f612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f616:	bf00      	nop
 800f618:	080245a0 	.word	0x080245a0
 800f61c:	080241a0 	.word	0x080241a0
 800f620:	08024450 	.word	0x08024450

0800f624 <__lshift>:
 800f624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f628:	460c      	mov	r4, r1
 800f62a:	6849      	ldr	r1, [r1, #4]
 800f62c:	6923      	ldr	r3, [r4, #16]
 800f62e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f632:	68a3      	ldr	r3, [r4, #8]
 800f634:	4607      	mov	r7, r0
 800f636:	4691      	mov	r9, r2
 800f638:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f63c:	f108 0601 	add.w	r6, r8, #1
 800f640:	42b3      	cmp	r3, r6
 800f642:	db0b      	blt.n	800f65c <__lshift+0x38>
 800f644:	4638      	mov	r0, r7
 800f646:	f7ff fd91 	bl	800f16c <_Balloc>
 800f64a:	4605      	mov	r5, r0
 800f64c:	b948      	cbnz	r0, 800f662 <__lshift+0x3e>
 800f64e:	4602      	mov	r2, r0
 800f650:	4b28      	ldr	r3, [pc, #160]	; (800f6f4 <__lshift+0xd0>)
 800f652:	4829      	ldr	r0, [pc, #164]	; (800f6f8 <__lshift+0xd4>)
 800f654:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f658:	f7fe fb42 	bl	800dce0 <__assert_func>
 800f65c:	3101      	adds	r1, #1
 800f65e:	005b      	lsls	r3, r3, #1
 800f660:	e7ee      	b.n	800f640 <__lshift+0x1c>
 800f662:	2300      	movs	r3, #0
 800f664:	f100 0114 	add.w	r1, r0, #20
 800f668:	f100 0210 	add.w	r2, r0, #16
 800f66c:	4618      	mov	r0, r3
 800f66e:	4553      	cmp	r3, sl
 800f670:	db33      	blt.n	800f6da <__lshift+0xb6>
 800f672:	6920      	ldr	r0, [r4, #16]
 800f674:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f678:	f104 0314 	add.w	r3, r4, #20
 800f67c:	f019 091f 	ands.w	r9, r9, #31
 800f680:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f684:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f688:	d02b      	beq.n	800f6e2 <__lshift+0xbe>
 800f68a:	f1c9 0e20 	rsb	lr, r9, #32
 800f68e:	468a      	mov	sl, r1
 800f690:	2200      	movs	r2, #0
 800f692:	6818      	ldr	r0, [r3, #0]
 800f694:	fa00 f009 	lsl.w	r0, r0, r9
 800f698:	4302      	orrs	r2, r0
 800f69a:	f84a 2b04 	str.w	r2, [sl], #4
 800f69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6a2:	459c      	cmp	ip, r3
 800f6a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f6a8:	d8f3      	bhi.n	800f692 <__lshift+0x6e>
 800f6aa:	ebac 0304 	sub.w	r3, ip, r4
 800f6ae:	3b15      	subs	r3, #21
 800f6b0:	f023 0303 	bic.w	r3, r3, #3
 800f6b4:	3304      	adds	r3, #4
 800f6b6:	f104 0015 	add.w	r0, r4, #21
 800f6ba:	4584      	cmp	ip, r0
 800f6bc:	bf38      	it	cc
 800f6be:	2304      	movcc	r3, #4
 800f6c0:	50ca      	str	r2, [r1, r3]
 800f6c2:	b10a      	cbz	r2, 800f6c8 <__lshift+0xa4>
 800f6c4:	f108 0602 	add.w	r6, r8, #2
 800f6c8:	3e01      	subs	r6, #1
 800f6ca:	4638      	mov	r0, r7
 800f6cc:	612e      	str	r6, [r5, #16]
 800f6ce:	4621      	mov	r1, r4
 800f6d0:	f7ff fd8c 	bl	800f1ec <_Bfree>
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6da:	f842 0f04 	str.w	r0, [r2, #4]!
 800f6de:	3301      	adds	r3, #1
 800f6e0:	e7c5      	b.n	800f66e <__lshift+0x4a>
 800f6e2:	3904      	subs	r1, #4
 800f6e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f6ec:	459c      	cmp	ip, r3
 800f6ee:	d8f9      	bhi.n	800f6e4 <__lshift+0xc0>
 800f6f0:	e7ea      	b.n	800f6c8 <__lshift+0xa4>
 800f6f2:	bf00      	nop
 800f6f4:	080243c1 	.word	0x080243c1
 800f6f8:	08024450 	.word	0x08024450

0800f6fc <__mcmp>:
 800f6fc:	b530      	push	{r4, r5, lr}
 800f6fe:	6902      	ldr	r2, [r0, #16]
 800f700:	690c      	ldr	r4, [r1, #16]
 800f702:	1b12      	subs	r2, r2, r4
 800f704:	d10e      	bne.n	800f724 <__mcmp+0x28>
 800f706:	f100 0314 	add.w	r3, r0, #20
 800f70a:	3114      	adds	r1, #20
 800f70c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f710:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f714:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f718:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f71c:	42a5      	cmp	r5, r4
 800f71e:	d003      	beq.n	800f728 <__mcmp+0x2c>
 800f720:	d305      	bcc.n	800f72e <__mcmp+0x32>
 800f722:	2201      	movs	r2, #1
 800f724:	4610      	mov	r0, r2
 800f726:	bd30      	pop	{r4, r5, pc}
 800f728:	4283      	cmp	r3, r0
 800f72a:	d3f3      	bcc.n	800f714 <__mcmp+0x18>
 800f72c:	e7fa      	b.n	800f724 <__mcmp+0x28>
 800f72e:	f04f 32ff 	mov.w	r2, #4294967295
 800f732:	e7f7      	b.n	800f724 <__mcmp+0x28>

0800f734 <__mdiff>:
 800f734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f738:	460c      	mov	r4, r1
 800f73a:	4606      	mov	r6, r0
 800f73c:	4611      	mov	r1, r2
 800f73e:	4620      	mov	r0, r4
 800f740:	4617      	mov	r7, r2
 800f742:	f7ff ffdb 	bl	800f6fc <__mcmp>
 800f746:	1e05      	subs	r5, r0, #0
 800f748:	d110      	bne.n	800f76c <__mdiff+0x38>
 800f74a:	4629      	mov	r1, r5
 800f74c:	4630      	mov	r0, r6
 800f74e:	f7ff fd0d 	bl	800f16c <_Balloc>
 800f752:	b930      	cbnz	r0, 800f762 <__mdiff+0x2e>
 800f754:	4b39      	ldr	r3, [pc, #228]	; (800f83c <__mdiff+0x108>)
 800f756:	4602      	mov	r2, r0
 800f758:	f240 2132 	movw	r1, #562	; 0x232
 800f75c:	4838      	ldr	r0, [pc, #224]	; (800f840 <__mdiff+0x10c>)
 800f75e:	f7fe fabf 	bl	800dce0 <__assert_func>
 800f762:	2301      	movs	r3, #1
 800f764:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f76c:	bfa4      	itt	ge
 800f76e:	463b      	movge	r3, r7
 800f770:	4627      	movge	r7, r4
 800f772:	4630      	mov	r0, r6
 800f774:	6879      	ldr	r1, [r7, #4]
 800f776:	bfa6      	itte	ge
 800f778:	461c      	movge	r4, r3
 800f77a:	2500      	movge	r5, #0
 800f77c:	2501      	movlt	r5, #1
 800f77e:	f7ff fcf5 	bl	800f16c <_Balloc>
 800f782:	b920      	cbnz	r0, 800f78e <__mdiff+0x5a>
 800f784:	4b2d      	ldr	r3, [pc, #180]	; (800f83c <__mdiff+0x108>)
 800f786:	4602      	mov	r2, r0
 800f788:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f78c:	e7e6      	b.n	800f75c <__mdiff+0x28>
 800f78e:	693e      	ldr	r6, [r7, #16]
 800f790:	60c5      	str	r5, [r0, #12]
 800f792:	6925      	ldr	r5, [r4, #16]
 800f794:	f107 0114 	add.w	r1, r7, #20
 800f798:	f104 0914 	add.w	r9, r4, #20
 800f79c:	f100 0e14 	add.w	lr, r0, #20
 800f7a0:	f107 0210 	add.w	r2, r7, #16
 800f7a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f7a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f7ac:	46f2      	mov	sl, lr
 800f7ae:	2700      	movs	r7, #0
 800f7b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f7b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f7b8:	fa1f f883 	uxth.w	r8, r3
 800f7bc:	fa17 f78b 	uxtah	r7, r7, fp
 800f7c0:	0c1b      	lsrs	r3, r3, #16
 800f7c2:	eba7 0808 	sub.w	r8, r7, r8
 800f7c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f7ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f7ce:	fa1f f888 	uxth.w	r8, r8
 800f7d2:	141f      	asrs	r7, r3, #16
 800f7d4:	454d      	cmp	r5, r9
 800f7d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f7da:	f84a 3b04 	str.w	r3, [sl], #4
 800f7de:	d8e7      	bhi.n	800f7b0 <__mdiff+0x7c>
 800f7e0:	1b2b      	subs	r3, r5, r4
 800f7e2:	3b15      	subs	r3, #21
 800f7e4:	f023 0303 	bic.w	r3, r3, #3
 800f7e8:	3304      	adds	r3, #4
 800f7ea:	3415      	adds	r4, #21
 800f7ec:	42a5      	cmp	r5, r4
 800f7ee:	bf38      	it	cc
 800f7f0:	2304      	movcc	r3, #4
 800f7f2:	4419      	add	r1, r3
 800f7f4:	4473      	add	r3, lr
 800f7f6:	469e      	mov	lr, r3
 800f7f8:	460d      	mov	r5, r1
 800f7fa:	4565      	cmp	r5, ip
 800f7fc:	d30e      	bcc.n	800f81c <__mdiff+0xe8>
 800f7fe:	f10c 0203 	add.w	r2, ip, #3
 800f802:	1a52      	subs	r2, r2, r1
 800f804:	f022 0203 	bic.w	r2, r2, #3
 800f808:	3903      	subs	r1, #3
 800f80a:	458c      	cmp	ip, r1
 800f80c:	bf38      	it	cc
 800f80e:	2200      	movcc	r2, #0
 800f810:	441a      	add	r2, r3
 800f812:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f816:	b17b      	cbz	r3, 800f838 <__mdiff+0x104>
 800f818:	6106      	str	r6, [r0, #16]
 800f81a:	e7a5      	b.n	800f768 <__mdiff+0x34>
 800f81c:	f855 8b04 	ldr.w	r8, [r5], #4
 800f820:	fa17 f488 	uxtah	r4, r7, r8
 800f824:	1422      	asrs	r2, r4, #16
 800f826:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f82a:	b2a4      	uxth	r4, r4
 800f82c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f830:	f84e 4b04 	str.w	r4, [lr], #4
 800f834:	1417      	asrs	r7, r2, #16
 800f836:	e7e0      	b.n	800f7fa <__mdiff+0xc6>
 800f838:	3e01      	subs	r6, #1
 800f83a:	e7ea      	b.n	800f812 <__mdiff+0xde>
 800f83c:	080243c1 	.word	0x080243c1
 800f840:	08024450 	.word	0x08024450

0800f844 <__ulp>:
 800f844:	b082      	sub	sp, #8
 800f846:	ed8d 0b00 	vstr	d0, [sp]
 800f84a:	9b01      	ldr	r3, [sp, #4]
 800f84c:	4912      	ldr	r1, [pc, #72]	; (800f898 <__ulp+0x54>)
 800f84e:	4019      	ands	r1, r3
 800f850:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f854:	2900      	cmp	r1, #0
 800f856:	dd05      	ble.n	800f864 <__ulp+0x20>
 800f858:	2200      	movs	r2, #0
 800f85a:	460b      	mov	r3, r1
 800f85c:	ec43 2b10 	vmov	d0, r2, r3
 800f860:	b002      	add	sp, #8
 800f862:	4770      	bx	lr
 800f864:	4249      	negs	r1, r1
 800f866:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f86a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f86e:	f04f 0200 	mov.w	r2, #0
 800f872:	f04f 0300 	mov.w	r3, #0
 800f876:	da04      	bge.n	800f882 <__ulp+0x3e>
 800f878:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f87c:	fa41 f300 	asr.w	r3, r1, r0
 800f880:	e7ec      	b.n	800f85c <__ulp+0x18>
 800f882:	f1a0 0114 	sub.w	r1, r0, #20
 800f886:	291e      	cmp	r1, #30
 800f888:	bfda      	itte	le
 800f88a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f88e:	fa20 f101 	lsrle.w	r1, r0, r1
 800f892:	2101      	movgt	r1, #1
 800f894:	460a      	mov	r2, r1
 800f896:	e7e1      	b.n	800f85c <__ulp+0x18>
 800f898:	7ff00000 	.word	0x7ff00000

0800f89c <__b2d>:
 800f89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f89e:	6905      	ldr	r5, [r0, #16]
 800f8a0:	f100 0714 	add.w	r7, r0, #20
 800f8a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f8a8:	1f2e      	subs	r6, r5, #4
 800f8aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	f7ff fd52 	bl	800f358 <__hi0bits>
 800f8b4:	f1c0 0320 	rsb	r3, r0, #32
 800f8b8:	280a      	cmp	r0, #10
 800f8ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f938 <__b2d+0x9c>
 800f8be:	600b      	str	r3, [r1, #0]
 800f8c0:	dc14      	bgt.n	800f8ec <__b2d+0x50>
 800f8c2:	f1c0 0e0b 	rsb	lr, r0, #11
 800f8c6:	fa24 f10e 	lsr.w	r1, r4, lr
 800f8ca:	42b7      	cmp	r7, r6
 800f8cc:	ea41 030c 	orr.w	r3, r1, ip
 800f8d0:	bf34      	ite	cc
 800f8d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f8d6:	2100      	movcs	r1, #0
 800f8d8:	3015      	adds	r0, #21
 800f8da:	fa04 f000 	lsl.w	r0, r4, r0
 800f8de:	fa21 f10e 	lsr.w	r1, r1, lr
 800f8e2:	ea40 0201 	orr.w	r2, r0, r1
 800f8e6:	ec43 2b10 	vmov	d0, r2, r3
 800f8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8ec:	42b7      	cmp	r7, r6
 800f8ee:	bf3a      	itte	cc
 800f8f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f8f4:	f1a5 0608 	subcc.w	r6, r5, #8
 800f8f8:	2100      	movcs	r1, #0
 800f8fa:	380b      	subs	r0, #11
 800f8fc:	d017      	beq.n	800f92e <__b2d+0x92>
 800f8fe:	f1c0 0c20 	rsb	ip, r0, #32
 800f902:	fa04 f500 	lsl.w	r5, r4, r0
 800f906:	42be      	cmp	r6, r7
 800f908:	fa21 f40c 	lsr.w	r4, r1, ip
 800f90c:	ea45 0504 	orr.w	r5, r5, r4
 800f910:	bf8c      	ite	hi
 800f912:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f916:	2400      	movls	r4, #0
 800f918:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f91c:	fa01 f000 	lsl.w	r0, r1, r0
 800f920:	fa24 f40c 	lsr.w	r4, r4, ip
 800f924:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f928:	ea40 0204 	orr.w	r2, r0, r4
 800f92c:	e7db      	b.n	800f8e6 <__b2d+0x4a>
 800f92e:	ea44 030c 	orr.w	r3, r4, ip
 800f932:	460a      	mov	r2, r1
 800f934:	e7d7      	b.n	800f8e6 <__b2d+0x4a>
 800f936:	bf00      	nop
 800f938:	3ff00000 	.word	0x3ff00000

0800f93c <__d2b>:
 800f93c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f940:	4689      	mov	r9, r1
 800f942:	2101      	movs	r1, #1
 800f944:	ec57 6b10 	vmov	r6, r7, d0
 800f948:	4690      	mov	r8, r2
 800f94a:	f7ff fc0f 	bl	800f16c <_Balloc>
 800f94e:	4604      	mov	r4, r0
 800f950:	b930      	cbnz	r0, 800f960 <__d2b+0x24>
 800f952:	4602      	mov	r2, r0
 800f954:	4b25      	ldr	r3, [pc, #148]	; (800f9ec <__d2b+0xb0>)
 800f956:	4826      	ldr	r0, [pc, #152]	; (800f9f0 <__d2b+0xb4>)
 800f958:	f240 310a 	movw	r1, #778	; 0x30a
 800f95c:	f7fe f9c0 	bl	800dce0 <__assert_func>
 800f960:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f964:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f968:	bb35      	cbnz	r5, 800f9b8 <__d2b+0x7c>
 800f96a:	2e00      	cmp	r6, #0
 800f96c:	9301      	str	r3, [sp, #4]
 800f96e:	d028      	beq.n	800f9c2 <__d2b+0x86>
 800f970:	4668      	mov	r0, sp
 800f972:	9600      	str	r6, [sp, #0]
 800f974:	f7ff fd10 	bl	800f398 <__lo0bits>
 800f978:	9900      	ldr	r1, [sp, #0]
 800f97a:	b300      	cbz	r0, 800f9be <__d2b+0x82>
 800f97c:	9a01      	ldr	r2, [sp, #4]
 800f97e:	f1c0 0320 	rsb	r3, r0, #32
 800f982:	fa02 f303 	lsl.w	r3, r2, r3
 800f986:	430b      	orrs	r3, r1
 800f988:	40c2      	lsrs	r2, r0
 800f98a:	6163      	str	r3, [r4, #20]
 800f98c:	9201      	str	r2, [sp, #4]
 800f98e:	9b01      	ldr	r3, [sp, #4]
 800f990:	61a3      	str	r3, [r4, #24]
 800f992:	2b00      	cmp	r3, #0
 800f994:	bf14      	ite	ne
 800f996:	2202      	movne	r2, #2
 800f998:	2201      	moveq	r2, #1
 800f99a:	6122      	str	r2, [r4, #16]
 800f99c:	b1d5      	cbz	r5, 800f9d4 <__d2b+0x98>
 800f99e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f9a2:	4405      	add	r5, r0
 800f9a4:	f8c9 5000 	str.w	r5, [r9]
 800f9a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f9ac:	f8c8 0000 	str.w	r0, [r8]
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	b003      	add	sp, #12
 800f9b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f9bc:	e7d5      	b.n	800f96a <__d2b+0x2e>
 800f9be:	6161      	str	r1, [r4, #20]
 800f9c0:	e7e5      	b.n	800f98e <__d2b+0x52>
 800f9c2:	a801      	add	r0, sp, #4
 800f9c4:	f7ff fce8 	bl	800f398 <__lo0bits>
 800f9c8:	9b01      	ldr	r3, [sp, #4]
 800f9ca:	6163      	str	r3, [r4, #20]
 800f9cc:	2201      	movs	r2, #1
 800f9ce:	6122      	str	r2, [r4, #16]
 800f9d0:	3020      	adds	r0, #32
 800f9d2:	e7e3      	b.n	800f99c <__d2b+0x60>
 800f9d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f9d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f9dc:	f8c9 0000 	str.w	r0, [r9]
 800f9e0:	6918      	ldr	r0, [r3, #16]
 800f9e2:	f7ff fcb9 	bl	800f358 <__hi0bits>
 800f9e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f9ea:	e7df      	b.n	800f9ac <__d2b+0x70>
 800f9ec:	080243c1 	.word	0x080243c1
 800f9f0:	08024450 	.word	0x08024450

0800f9f4 <__ratio>:
 800f9f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f8:	4688      	mov	r8, r1
 800f9fa:	4669      	mov	r1, sp
 800f9fc:	4681      	mov	r9, r0
 800f9fe:	f7ff ff4d 	bl	800f89c <__b2d>
 800fa02:	a901      	add	r1, sp, #4
 800fa04:	4640      	mov	r0, r8
 800fa06:	ec55 4b10 	vmov	r4, r5, d0
 800fa0a:	f7ff ff47 	bl	800f89c <__b2d>
 800fa0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa12:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fa16:	eba3 0c02 	sub.w	ip, r3, r2
 800fa1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fa1e:	1a9b      	subs	r3, r3, r2
 800fa20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fa24:	ec51 0b10 	vmov	r0, r1, d0
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	bfd6      	itet	le
 800fa2c:	460a      	movle	r2, r1
 800fa2e:	462a      	movgt	r2, r5
 800fa30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fa34:	468b      	mov	fp, r1
 800fa36:	462f      	mov	r7, r5
 800fa38:	bfd4      	ite	le
 800fa3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fa3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fa42:	4620      	mov	r0, r4
 800fa44:	ee10 2a10 	vmov	r2, s0
 800fa48:	465b      	mov	r3, fp
 800fa4a:	4639      	mov	r1, r7
 800fa4c:	f7f0 ff16 	bl	800087c <__aeabi_ddiv>
 800fa50:	ec41 0b10 	vmov	d0, r0, r1
 800fa54:	b003      	add	sp, #12
 800fa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa5a <__copybits>:
 800fa5a:	3901      	subs	r1, #1
 800fa5c:	b570      	push	{r4, r5, r6, lr}
 800fa5e:	1149      	asrs	r1, r1, #5
 800fa60:	6914      	ldr	r4, [r2, #16]
 800fa62:	3101      	adds	r1, #1
 800fa64:	f102 0314 	add.w	r3, r2, #20
 800fa68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fa6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fa70:	1f05      	subs	r5, r0, #4
 800fa72:	42a3      	cmp	r3, r4
 800fa74:	d30c      	bcc.n	800fa90 <__copybits+0x36>
 800fa76:	1aa3      	subs	r3, r4, r2
 800fa78:	3b11      	subs	r3, #17
 800fa7a:	f023 0303 	bic.w	r3, r3, #3
 800fa7e:	3211      	adds	r2, #17
 800fa80:	42a2      	cmp	r2, r4
 800fa82:	bf88      	it	hi
 800fa84:	2300      	movhi	r3, #0
 800fa86:	4418      	add	r0, r3
 800fa88:	2300      	movs	r3, #0
 800fa8a:	4288      	cmp	r0, r1
 800fa8c:	d305      	bcc.n	800fa9a <__copybits+0x40>
 800fa8e:	bd70      	pop	{r4, r5, r6, pc}
 800fa90:	f853 6b04 	ldr.w	r6, [r3], #4
 800fa94:	f845 6f04 	str.w	r6, [r5, #4]!
 800fa98:	e7eb      	b.n	800fa72 <__copybits+0x18>
 800fa9a:	f840 3b04 	str.w	r3, [r0], #4
 800fa9e:	e7f4      	b.n	800fa8a <__copybits+0x30>

0800faa0 <__any_on>:
 800faa0:	f100 0214 	add.w	r2, r0, #20
 800faa4:	6900      	ldr	r0, [r0, #16]
 800faa6:	114b      	asrs	r3, r1, #5
 800faa8:	4298      	cmp	r0, r3
 800faaa:	b510      	push	{r4, lr}
 800faac:	db11      	blt.n	800fad2 <__any_on+0x32>
 800faae:	dd0a      	ble.n	800fac6 <__any_on+0x26>
 800fab0:	f011 011f 	ands.w	r1, r1, #31
 800fab4:	d007      	beq.n	800fac6 <__any_on+0x26>
 800fab6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800faba:	fa24 f001 	lsr.w	r0, r4, r1
 800fabe:	fa00 f101 	lsl.w	r1, r0, r1
 800fac2:	428c      	cmp	r4, r1
 800fac4:	d10b      	bne.n	800fade <__any_on+0x3e>
 800fac6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800faca:	4293      	cmp	r3, r2
 800facc:	d803      	bhi.n	800fad6 <__any_on+0x36>
 800face:	2000      	movs	r0, #0
 800fad0:	bd10      	pop	{r4, pc}
 800fad2:	4603      	mov	r3, r0
 800fad4:	e7f7      	b.n	800fac6 <__any_on+0x26>
 800fad6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fada:	2900      	cmp	r1, #0
 800fadc:	d0f5      	beq.n	800faca <__any_on+0x2a>
 800fade:	2001      	movs	r0, #1
 800fae0:	e7f6      	b.n	800fad0 <__any_on+0x30>

0800fae2 <_calloc_r>:
 800fae2:	b513      	push	{r0, r1, r4, lr}
 800fae4:	434a      	muls	r2, r1
 800fae6:	4611      	mov	r1, r2
 800fae8:	9201      	str	r2, [sp, #4]
 800faea:	f000 f859 	bl	800fba0 <_malloc_r>
 800faee:	4604      	mov	r4, r0
 800faf0:	b118      	cbz	r0, 800fafa <_calloc_r+0x18>
 800faf2:	9a01      	ldr	r2, [sp, #4]
 800faf4:	2100      	movs	r1, #0
 800faf6:	f7fc fb27 	bl	800c148 <memset>
 800fafa:	4620      	mov	r0, r4
 800fafc:	b002      	add	sp, #8
 800fafe:	bd10      	pop	{r4, pc}

0800fb00 <_free_r>:
 800fb00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb02:	2900      	cmp	r1, #0
 800fb04:	d048      	beq.n	800fb98 <_free_r+0x98>
 800fb06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb0a:	9001      	str	r0, [sp, #4]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f1a1 0404 	sub.w	r4, r1, #4
 800fb12:	bfb8      	it	lt
 800fb14:	18e4      	addlt	r4, r4, r3
 800fb16:	f000 fe8b 	bl	8010830 <__malloc_lock>
 800fb1a:	4a20      	ldr	r2, [pc, #128]	; (800fb9c <_free_r+0x9c>)
 800fb1c:	9801      	ldr	r0, [sp, #4]
 800fb1e:	6813      	ldr	r3, [r2, #0]
 800fb20:	4615      	mov	r5, r2
 800fb22:	b933      	cbnz	r3, 800fb32 <_free_r+0x32>
 800fb24:	6063      	str	r3, [r4, #4]
 800fb26:	6014      	str	r4, [r2, #0]
 800fb28:	b003      	add	sp, #12
 800fb2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb2e:	f000 be85 	b.w	801083c <__malloc_unlock>
 800fb32:	42a3      	cmp	r3, r4
 800fb34:	d90b      	bls.n	800fb4e <_free_r+0x4e>
 800fb36:	6821      	ldr	r1, [r4, #0]
 800fb38:	1862      	adds	r2, r4, r1
 800fb3a:	4293      	cmp	r3, r2
 800fb3c:	bf04      	itt	eq
 800fb3e:	681a      	ldreq	r2, [r3, #0]
 800fb40:	685b      	ldreq	r3, [r3, #4]
 800fb42:	6063      	str	r3, [r4, #4]
 800fb44:	bf04      	itt	eq
 800fb46:	1852      	addeq	r2, r2, r1
 800fb48:	6022      	streq	r2, [r4, #0]
 800fb4a:	602c      	str	r4, [r5, #0]
 800fb4c:	e7ec      	b.n	800fb28 <_free_r+0x28>
 800fb4e:	461a      	mov	r2, r3
 800fb50:	685b      	ldr	r3, [r3, #4]
 800fb52:	b10b      	cbz	r3, 800fb58 <_free_r+0x58>
 800fb54:	42a3      	cmp	r3, r4
 800fb56:	d9fa      	bls.n	800fb4e <_free_r+0x4e>
 800fb58:	6811      	ldr	r1, [r2, #0]
 800fb5a:	1855      	adds	r5, r2, r1
 800fb5c:	42a5      	cmp	r5, r4
 800fb5e:	d10b      	bne.n	800fb78 <_free_r+0x78>
 800fb60:	6824      	ldr	r4, [r4, #0]
 800fb62:	4421      	add	r1, r4
 800fb64:	1854      	adds	r4, r2, r1
 800fb66:	42a3      	cmp	r3, r4
 800fb68:	6011      	str	r1, [r2, #0]
 800fb6a:	d1dd      	bne.n	800fb28 <_free_r+0x28>
 800fb6c:	681c      	ldr	r4, [r3, #0]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	6053      	str	r3, [r2, #4]
 800fb72:	4421      	add	r1, r4
 800fb74:	6011      	str	r1, [r2, #0]
 800fb76:	e7d7      	b.n	800fb28 <_free_r+0x28>
 800fb78:	d902      	bls.n	800fb80 <_free_r+0x80>
 800fb7a:	230c      	movs	r3, #12
 800fb7c:	6003      	str	r3, [r0, #0]
 800fb7e:	e7d3      	b.n	800fb28 <_free_r+0x28>
 800fb80:	6825      	ldr	r5, [r4, #0]
 800fb82:	1961      	adds	r1, r4, r5
 800fb84:	428b      	cmp	r3, r1
 800fb86:	bf04      	itt	eq
 800fb88:	6819      	ldreq	r1, [r3, #0]
 800fb8a:	685b      	ldreq	r3, [r3, #4]
 800fb8c:	6063      	str	r3, [r4, #4]
 800fb8e:	bf04      	itt	eq
 800fb90:	1949      	addeq	r1, r1, r5
 800fb92:	6021      	streq	r1, [r4, #0]
 800fb94:	6054      	str	r4, [r2, #4]
 800fb96:	e7c7      	b.n	800fb28 <_free_r+0x28>
 800fb98:	b003      	add	sp, #12
 800fb9a:	bd30      	pop	{r4, r5, pc}
 800fb9c:	20000274 	.word	0x20000274

0800fba0 <_malloc_r>:
 800fba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fba2:	1ccd      	adds	r5, r1, #3
 800fba4:	f025 0503 	bic.w	r5, r5, #3
 800fba8:	3508      	adds	r5, #8
 800fbaa:	2d0c      	cmp	r5, #12
 800fbac:	bf38      	it	cc
 800fbae:	250c      	movcc	r5, #12
 800fbb0:	2d00      	cmp	r5, #0
 800fbb2:	4606      	mov	r6, r0
 800fbb4:	db01      	blt.n	800fbba <_malloc_r+0x1a>
 800fbb6:	42a9      	cmp	r1, r5
 800fbb8:	d903      	bls.n	800fbc2 <_malloc_r+0x22>
 800fbba:	230c      	movs	r3, #12
 800fbbc:	6033      	str	r3, [r6, #0]
 800fbbe:	2000      	movs	r0, #0
 800fbc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbc2:	f000 fe35 	bl	8010830 <__malloc_lock>
 800fbc6:	4921      	ldr	r1, [pc, #132]	; (800fc4c <_malloc_r+0xac>)
 800fbc8:	680a      	ldr	r2, [r1, #0]
 800fbca:	4614      	mov	r4, r2
 800fbcc:	b99c      	cbnz	r4, 800fbf6 <_malloc_r+0x56>
 800fbce:	4f20      	ldr	r7, [pc, #128]	; (800fc50 <_malloc_r+0xb0>)
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	b923      	cbnz	r3, 800fbde <_malloc_r+0x3e>
 800fbd4:	4621      	mov	r1, r4
 800fbd6:	4630      	mov	r0, r6
 800fbd8:	f000 fafa 	bl	80101d0 <_sbrk_r>
 800fbdc:	6038      	str	r0, [r7, #0]
 800fbde:	4629      	mov	r1, r5
 800fbe0:	4630      	mov	r0, r6
 800fbe2:	f000 faf5 	bl	80101d0 <_sbrk_r>
 800fbe6:	1c43      	adds	r3, r0, #1
 800fbe8:	d123      	bne.n	800fc32 <_malloc_r+0x92>
 800fbea:	230c      	movs	r3, #12
 800fbec:	6033      	str	r3, [r6, #0]
 800fbee:	4630      	mov	r0, r6
 800fbf0:	f000 fe24 	bl	801083c <__malloc_unlock>
 800fbf4:	e7e3      	b.n	800fbbe <_malloc_r+0x1e>
 800fbf6:	6823      	ldr	r3, [r4, #0]
 800fbf8:	1b5b      	subs	r3, r3, r5
 800fbfa:	d417      	bmi.n	800fc2c <_malloc_r+0x8c>
 800fbfc:	2b0b      	cmp	r3, #11
 800fbfe:	d903      	bls.n	800fc08 <_malloc_r+0x68>
 800fc00:	6023      	str	r3, [r4, #0]
 800fc02:	441c      	add	r4, r3
 800fc04:	6025      	str	r5, [r4, #0]
 800fc06:	e004      	b.n	800fc12 <_malloc_r+0x72>
 800fc08:	6863      	ldr	r3, [r4, #4]
 800fc0a:	42a2      	cmp	r2, r4
 800fc0c:	bf0c      	ite	eq
 800fc0e:	600b      	streq	r3, [r1, #0]
 800fc10:	6053      	strne	r3, [r2, #4]
 800fc12:	4630      	mov	r0, r6
 800fc14:	f000 fe12 	bl	801083c <__malloc_unlock>
 800fc18:	f104 000b 	add.w	r0, r4, #11
 800fc1c:	1d23      	adds	r3, r4, #4
 800fc1e:	f020 0007 	bic.w	r0, r0, #7
 800fc22:	1ac2      	subs	r2, r0, r3
 800fc24:	d0cc      	beq.n	800fbc0 <_malloc_r+0x20>
 800fc26:	1a1b      	subs	r3, r3, r0
 800fc28:	50a3      	str	r3, [r4, r2]
 800fc2a:	e7c9      	b.n	800fbc0 <_malloc_r+0x20>
 800fc2c:	4622      	mov	r2, r4
 800fc2e:	6864      	ldr	r4, [r4, #4]
 800fc30:	e7cc      	b.n	800fbcc <_malloc_r+0x2c>
 800fc32:	1cc4      	adds	r4, r0, #3
 800fc34:	f024 0403 	bic.w	r4, r4, #3
 800fc38:	42a0      	cmp	r0, r4
 800fc3a:	d0e3      	beq.n	800fc04 <_malloc_r+0x64>
 800fc3c:	1a21      	subs	r1, r4, r0
 800fc3e:	4630      	mov	r0, r6
 800fc40:	f000 fac6 	bl	80101d0 <_sbrk_r>
 800fc44:	3001      	adds	r0, #1
 800fc46:	d1dd      	bne.n	800fc04 <_malloc_r+0x64>
 800fc48:	e7cf      	b.n	800fbea <_malloc_r+0x4a>
 800fc4a:	bf00      	nop
 800fc4c:	20000274 	.word	0x20000274
 800fc50:	20000278 	.word	0x20000278

0800fc54 <__ssputs_r>:
 800fc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc58:	688e      	ldr	r6, [r1, #8]
 800fc5a:	429e      	cmp	r6, r3
 800fc5c:	4682      	mov	sl, r0
 800fc5e:	460c      	mov	r4, r1
 800fc60:	4690      	mov	r8, r2
 800fc62:	461f      	mov	r7, r3
 800fc64:	d838      	bhi.n	800fcd8 <__ssputs_r+0x84>
 800fc66:	898a      	ldrh	r2, [r1, #12]
 800fc68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc6c:	d032      	beq.n	800fcd4 <__ssputs_r+0x80>
 800fc6e:	6825      	ldr	r5, [r4, #0]
 800fc70:	6909      	ldr	r1, [r1, #16]
 800fc72:	eba5 0901 	sub.w	r9, r5, r1
 800fc76:	6965      	ldr	r5, [r4, #20]
 800fc78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc80:	3301      	adds	r3, #1
 800fc82:	444b      	add	r3, r9
 800fc84:	106d      	asrs	r5, r5, #1
 800fc86:	429d      	cmp	r5, r3
 800fc88:	bf38      	it	cc
 800fc8a:	461d      	movcc	r5, r3
 800fc8c:	0553      	lsls	r3, r2, #21
 800fc8e:	d531      	bpl.n	800fcf4 <__ssputs_r+0xa0>
 800fc90:	4629      	mov	r1, r5
 800fc92:	f7ff ff85 	bl	800fba0 <_malloc_r>
 800fc96:	4606      	mov	r6, r0
 800fc98:	b950      	cbnz	r0, 800fcb0 <__ssputs_r+0x5c>
 800fc9a:	230c      	movs	r3, #12
 800fc9c:	f8ca 3000 	str.w	r3, [sl]
 800fca0:	89a3      	ldrh	r3, [r4, #12]
 800fca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fca6:	81a3      	strh	r3, [r4, #12]
 800fca8:	f04f 30ff 	mov.w	r0, #4294967295
 800fcac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcb0:	6921      	ldr	r1, [r4, #16]
 800fcb2:	464a      	mov	r2, r9
 800fcb4:	f7ff fa4c 	bl	800f150 <memcpy>
 800fcb8:	89a3      	ldrh	r3, [r4, #12]
 800fcba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fcbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcc2:	81a3      	strh	r3, [r4, #12]
 800fcc4:	6126      	str	r6, [r4, #16]
 800fcc6:	6165      	str	r5, [r4, #20]
 800fcc8:	444e      	add	r6, r9
 800fcca:	eba5 0509 	sub.w	r5, r5, r9
 800fcce:	6026      	str	r6, [r4, #0]
 800fcd0:	60a5      	str	r5, [r4, #8]
 800fcd2:	463e      	mov	r6, r7
 800fcd4:	42be      	cmp	r6, r7
 800fcd6:	d900      	bls.n	800fcda <__ssputs_r+0x86>
 800fcd8:	463e      	mov	r6, r7
 800fcda:	4632      	mov	r2, r6
 800fcdc:	6820      	ldr	r0, [r4, #0]
 800fcde:	4641      	mov	r1, r8
 800fce0:	f000 fd8c 	bl	80107fc <memmove>
 800fce4:	68a3      	ldr	r3, [r4, #8]
 800fce6:	6822      	ldr	r2, [r4, #0]
 800fce8:	1b9b      	subs	r3, r3, r6
 800fcea:	4432      	add	r2, r6
 800fcec:	60a3      	str	r3, [r4, #8]
 800fcee:	6022      	str	r2, [r4, #0]
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	e7db      	b.n	800fcac <__ssputs_r+0x58>
 800fcf4:	462a      	mov	r2, r5
 800fcf6:	f000 fda7 	bl	8010848 <_realloc_r>
 800fcfa:	4606      	mov	r6, r0
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	d1e1      	bne.n	800fcc4 <__ssputs_r+0x70>
 800fd00:	6921      	ldr	r1, [r4, #16]
 800fd02:	4650      	mov	r0, sl
 800fd04:	f7ff fefc 	bl	800fb00 <_free_r>
 800fd08:	e7c7      	b.n	800fc9a <__ssputs_r+0x46>
	...

0800fd0c <_svfiprintf_r>:
 800fd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd10:	4698      	mov	r8, r3
 800fd12:	898b      	ldrh	r3, [r1, #12]
 800fd14:	061b      	lsls	r3, r3, #24
 800fd16:	b09d      	sub	sp, #116	; 0x74
 800fd18:	4607      	mov	r7, r0
 800fd1a:	460d      	mov	r5, r1
 800fd1c:	4614      	mov	r4, r2
 800fd1e:	d50e      	bpl.n	800fd3e <_svfiprintf_r+0x32>
 800fd20:	690b      	ldr	r3, [r1, #16]
 800fd22:	b963      	cbnz	r3, 800fd3e <_svfiprintf_r+0x32>
 800fd24:	2140      	movs	r1, #64	; 0x40
 800fd26:	f7ff ff3b 	bl	800fba0 <_malloc_r>
 800fd2a:	6028      	str	r0, [r5, #0]
 800fd2c:	6128      	str	r0, [r5, #16]
 800fd2e:	b920      	cbnz	r0, 800fd3a <_svfiprintf_r+0x2e>
 800fd30:	230c      	movs	r3, #12
 800fd32:	603b      	str	r3, [r7, #0]
 800fd34:	f04f 30ff 	mov.w	r0, #4294967295
 800fd38:	e0d1      	b.n	800fede <_svfiprintf_r+0x1d2>
 800fd3a:	2340      	movs	r3, #64	; 0x40
 800fd3c:	616b      	str	r3, [r5, #20]
 800fd3e:	2300      	movs	r3, #0
 800fd40:	9309      	str	r3, [sp, #36]	; 0x24
 800fd42:	2320      	movs	r3, #32
 800fd44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd48:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd4c:	2330      	movs	r3, #48	; 0x30
 800fd4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fef8 <_svfiprintf_r+0x1ec>
 800fd52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd56:	f04f 0901 	mov.w	r9, #1
 800fd5a:	4623      	mov	r3, r4
 800fd5c:	469a      	mov	sl, r3
 800fd5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd62:	b10a      	cbz	r2, 800fd68 <_svfiprintf_r+0x5c>
 800fd64:	2a25      	cmp	r2, #37	; 0x25
 800fd66:	d1f9      	bne.n	800fd5c <_svfiprintf_r+0x50>
 800fd68:	ebba 0b04 	subs.w	fp, sl, r4
 800fd6c:	d00b      	beq.n	800fd86 <_svfiprintf_r+0x7a>
 800fd6e:	465b      	mov	r3, fp
 800fd70:	4622      	mov	r2, r4
 800fd72:	4629      	mov	r1, r5
 800fd74:	4638      	mov	r0, r7
 800fd76:	f7ff ff6d 	bl	800fc54 <__ssputs_r>
 800fd7a:	3001      	adds	r0, #1
 800fd7c:	f000 80aa 	beq.w	800fed4 <_svfiprintf_r+0x1c8>
 800fd80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd82:	445a      	add	r2, fp
 800fd84:	9209      	str	r2, [sp, #36]	; 0x24
 800fd86:	f89a 3000 	ldrb.w	r3, [sl]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	f000 80a2 	beq.w	800fed4 <_svfiprintf_r+0x1c8>
 800fd90:	2300      	movs	r3, #0
 800fd92:	f04f 32ff 	mov.w	r2, #4294967295
 800fd96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd9a:	f10a 0a01 	add.w	sl, sl, #1
 800fd9e:	9304      	str	r3, [sp, #16]
 800fda0:	9307      	str	r3, [sp, #28]
 800fda2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fda6:	931a      	str	r3, [sp, #104]	; 0x68
 800fda8:	4654      	mov	r4, sl
 800fdaa:	2205      	movs	r2, #5
 800fdac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdb0:	4851      	ldr	r0, [pc, #324]	; (800fef8 <_svfiprintf_r+0x1ec>)
 800fdb2:	f7f0 fa2d 	bl	8000210 <memchr>
 800fdb6:	9a04      	ldr	r2, [sp, #16]
 800fdb8:	b9d8      	cbnz	r0, 800fdf2 <_svfiprintf_r+0xe6>
 800fdba:	06d0      	lsls	r0, r2, #27
 800fdbc:	bf44      	itt	mi
 800fdbe:	2320      	movmi	r3, #32
 800fdc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdc4:	0711      	lsls	r1, r2, #28
 800fdc6:	bf44      	itt	mi
 800fdc8:	232b      	movmi	r3, #43	; 0x2b
 800fdca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdce:	f89a 3000 	ldrb.w	r3, [sl]
 800fdd2:	2b2a      	cmp	r3, #42	; 0x2a
 800fdd4:	d015      	beq.n	800fe02 <_svfiprintf_r+0xf6>
 800fdd6:	9a07      	ldr	r2, [sp, #28]
 800fdd8:	4654      	mov	r4, sl
 800fdda:	2000      	movs	r0, #0
 800fddc:	f04f 0c0a 	mov.w	ip, #10
 800fde0:	4621      	mov	r1, r4
 800fde2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fde6:	3b30      	subs	r3, #48	; 0x30
 800fde8:	2b09      	cmp	r3, #9
 800fdea:	d94e      	bls.n	800fe8a <_svfiprintf_r+0x17e>
 800fdec:	b1b0      	cbz	r0, 800fe1c <_svfiprintf_r+0x110>
 800fdee:	9207      	str	r2, [sp, #28]
 800fdf0:	e014      	b.n	800fe1c <_svfiprintf_r+0x110>
 800fdf2:	eba0 0308 	sub.w	r3, r0, r8
 800fdf6:	fa09 f303 	lsl.w	r3, r9, r3
 800fdfa:	4313      	orrs	r3, r2
 800fdfc:	9304      	str	r3, [sp, #16]
 800fdfe:	46a2      	mov	sl, r4
 800fe00:	e7d2      	b.n	800fda8 <_svfiprintf_r+0x9c>
 800fe02:	9b03      	ldr	r3, [sp, #12]
 800fe04:	1d19      	adds	r1, r3, #4
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	9103      	str	r1, [sp, #12]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	bfbb      	ittet	lt
 800fe0e:	425b      	neglt	r3, r3
 800fe10:	f042 0202 	orrlt.w	r2, r2, #2
 800fe14:	9307      	strge	r3, [sp, #28]
 800fe16:	9307      	strlt	r3, [sp, #28]
 800fe18:	bfb8      	it	lt
 800fe1a:	9204      	strlt	r2, [sp, #16]
 800fe1c:	7823      	ldrb	r3, [r4, #0]
 800fe1e:	2b2e      	cmp	r3, #46	; 0x2e
 800fe20:	d10c      	bne.n	800fe3c <_svfiprintf_r+0x130>
 800fe22:	7863      	ldrb	r3, [r4, #1]
 800fe24:	2b2a      	cmp	r3, #42	; 0x2a
 800fe26:	d135      	bne.n	800fe94 <_svfiprintf_r+0x188>
 800fe28:	9b03      	ldr	r3, [sp, #12]
 800fe2a:	1d1a      	adds	r2, r3, #4
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	9203      	str	r2, [sp, #12]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	bfb8      	it	lt
 800fe34:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe38:	3402      	adds	r4, #2
 800fe3a:	9305      	str	r3, [sp, #20]
 800fe3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ff08 <_svfiprintf_r+0x1fc>
 800fe40:	7821      	ldrb	r1, [r4, #0]
 800fe42:	2203      	movs	r2, #3
 800fe44:	4650      	mov	r0, sl
 800fe46:	f7f0 f9e3 	bl	8000210 <memchr>
 800fe4a:	b140      	cbz	r0, 800fe5e <_svfiprintf_r+0x152>
 800fe4c:	2340      	movs	r3, #64	; 0x40
 800fe4e:	eba0 000a 	sub.w	r0, r0, sl
 800fe52:	fa03 f000 	lsl.w	r0, r3, r0
 800fe56:	9b04      	ldr	r3, [sp, #16]
 800fe58:	4303      	orrs	r3, r0
 800fe5a:	3401      	adds	r4, #1
 800fe5c:	9304      	str	r3, [sp, #16]
 800fe5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe62:	4826      	ldr	r0, [pc, #152]	; (800fefc <_svfiprintf_r+0x1f0>)
 800fe64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe68:	2206      	movs	r2, #6
 800fe6a:	f7f0 f9d1 	bl	8000210 <memchr>
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	d038      	beq.n	800fee4 <_svfiprintf_r+0x1d8>
 800fe72:	4b23      	ldr	r3, [pc, #140]	; (800ff00 <_svfiprintf_r+0x1f4>)
 800fe74:	bb1b      	cbnz	r3, 800febe <_svfiprintf_r+0x1b2>
 800fe76:	9b03      	ldr	r3, [sp, #12]
 800fe78:	3307      	adds	r3, #7
 800fe7a:	f023 0307 	bic.w	r3, r3, #7
 800fe7e:	3308      	adds	r3, #8
 800fe80:	9303      	str	r3, [sp, #12]
 800fe82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe84:	4433      	add	r3, r6
 800fe86:	9309      	str	r3, [sp, #36]	; 0x24
 800fe88:	e767      	b.n	800fd5a <_svfiprintf_r+0x4e>
 800fe8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe8e:	460c      	mov	r4, r1
 800fe90:	2001      	movs	r0, #1
 800fe92:	e7a5      	b.n	800fde0 <_svfiprintf_r+0xd4>
 800fe94:	2300      	movs	r3, #0
 800fe96:	3401      	adds	r4, #1
 800fe98:	9305      	str	r3, [sp, #20]
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	f04f 0c0a 	mov.w	ip, #10
 800fea0:	4620      	mov	r0, r4
 800fea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fea6:	3a30      	subs	r2, #48	; 0x30
 800fea8:	2a09      	cmp	r2, #9
 800feaa:	d903      	bls.n	800feb4 <_svfiprintf_r+0x1a8>
 800feac:	2b00      	cmp	r3, #0
 800feae:	d0c5      	beq.n	800fe3c <_svfiprintf_r+0x130>
 800feb0:	9105      	str	r1, [sp, #20]
 800feb2:	e7c3      	b.n	800fe3c <_svfiprintf_r+0x130>
 800feb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800feb8:	4604      	mov	r4, r0
 800feba:	2301      	movs	r3, #1
 800febc:	e7f0      	b.n	800fea0 <_svfiprintf_r+0x194>
 800febe:	ab03      	add	r3, sp, #12
 800fec0:	9300      	str	r3, [sp, #0]
 800fec2:	462a      	mov	r2, r5
 800fec4:	4b0f      	ldr	r3, [pc, #60]	; (800ff04 <_svfiprintf_r+0x1f8>)
 800fec6:	a904      	add	r1, sp, #16
 800fec8:	4638      	mov	r0, r7
 800feca:	f7fc f9e5 	bl	800c298 <_printf_float>
 800fece:	1c42      	adds	r2, r0, #1
 800fed0:	4606      	mov	r6, r0
 800fed2:	d1d6      	bne.n	800fe82 <_svfiprintf_r+0x176>
 800fed4:	89ab      	ldrh	r3, [r5, #12]
 800fed6:	065b      	lsls	r3, r3, #25
 800fed8:	f53f af2c 	bmi.w	800fd34 <_svfiprintf_r+0x28>
 800fedc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fede:	b01d      	add	sp, #116	; 0x74
 800fee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee4:	ab03      	add	r3, sp, #12
 800fee6:	9300      	str	r3, [sp, #0]
 800fee8:	462a      	mov	r2, r5
 800feea:	4b06      	ldr	r3, [pc, #24]	; (800ff04 <_svfiprintf_r+0x1f8>)
 800feec:	a904      	add	r1, sp, #16
 800feee:	4638      	mov	r0, r7
 800fef0:	f7fc fc76 	bl	800c7e0 <_printf_i>
 800fef4:	e7eb      	b.n	800fece <_svfiprintf_r+0x1c2>
 800fef6:	bf00      	nop
 800fef8:	080245ac 	.word	0x080245ac
 800fefc:	080245b6 	.word	0x080245b6
 800ff00:	0800c299 	.word	0x0800c299
 800ff04:	0800fc55 	.word	0x0800fc55
 800ff08:	080245b2 	.word	0x080245b2

0800ff0c <__sfputc_r>:
 800ff0c:	6893      	ldr	r3, [r2, #8]
 800ff0e:	3b01      	subs	r3, #1
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	b410      	push	{r4}
 800ff14:	6093      	str	r3, [r2, #8]
 800ff16:	da08      	bge.n	800ff2a <__sfputc_r+0x1e>
 800ff18:	6994      	ldr	r4, [r2, #24]
 800ff1a:	42a3      	cmp	r3, r4
 800ff1c:	db01      	blt.n	800ff22 <__sfputc_r+0x16>
 800ff1e:	290a      	cmp	r1, #10
 800ff20:	d103      	bne.n	800ff2a <__sfputc_r+0x1e>
 800ff22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff26:	f000 b975 	b.w	8010214 <__swbuf_r>
 800ff2a:	6813      	ldr	r3, [r2, #0]
 800ff2c:	1c58      	adds	r0, r3, #1
 800ff2e:	6010      	str	r0, [r2, #0]
 800ff30:	7019      	strb	r1, [r3, #0]
 800ff32:	4608      	mov	r0, r1
 800ff34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff38:	4770      	bx	lr

0800ff3a <__sfputs_r>:
 800ff3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff3c:	4606      	mov	r6, r0
 800ff3e:	460f      	mov	r7, r1
 800ff40:	4614      	mov	r4, r2
 800ff42:	18d5      	adds	r5, r2, r3
 800ff44:	42ac      	cmp	r4, r5
 800ff46:	d101      	bne.n	800ff4c <__sfputs_r+0x12>
 800ff48:	2000      	movs	r0, #0
 800ff4a:	e007      	b.n	800ff5c <__sfputs_r+0x22>
 800ff4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff50:	463a      	mov	r2, r7
 800ff52:	4630      	mov	r0, r6
 800ff54:	f7ff ffda 	bl	800ff0c <__sfputc_r>
 800ff58:	1c43      	adds	r3, r0, #1
 800ff5a:	d1f3      	bne.n	800ff44 <__sfputs_r+0xa>
 800ff5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff60 <_vfiprintf_r>:
 800ff60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff64:	460d      	mov	r5, r1
 800ff66:	b09d      	sub	sp, #116	; 0x74
 800ff68:	4614      	mov	r4, r2
 800ff6a:	4698      	mov	r8, r3
 800ff6c:	4606      	mov	r6, r0
 800ff6e:	b118      	cbz	r0, 800ff78 <_vfiprintf_r+0x18>
 800ff70:	6983      	ldr	r3, [r0, #24]
 800ff72:	b90b      	cbnz	r3, 800ff78 <_vfiprintf_r+0x18>
 800ff74:	f000 fb3e 	bl	80105f4 <__sinit>
 800ff78:	4b89      	ldr	r3, [pc, #548]	; (80101a0 <_vfiprintf_r+0x240>)
 800ff7a:	429d      	cmp	r5, r3
 800ff7c:	d11b      	bne.n	800ffb6 <_vfiprintf_r+0x56>
 800ff7e:	6875      	ldr	r5, [r6, #4]
 800ff80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff82:	07d9      	lsls	r1, r3, #31
 800ff84:	d405      	bmi.n	800ff92 <_vfiprintf_r+0x32>
 800ff86:	89ab      	ldrh	r3, [r5, #12]
 800ff88:	059a      	lsls	r2, r3, #22
 800ff8a:	d402      	bmi.n	800ff92 <_vfiprintf_r+0x32>
 800ff8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff8e:	f000 fbcf 	bl	8010730 <__retarget_lock_acquire_recursive>
 800ff92:	89ab      	ldrh	r3, [r5, #12]
 800ff94:	071b      	lsls	r3, r3, #28
 800ff96:	d501      	bpl.n	800ff9c <_vfiprintf_r+0x3c>
 800ff98:	692b      	ldr	r3, [r5, #16]
 800ff9a:	b9eb      	cbnz	r3, 800ffd8 <_vfiprintf_r+0x78>
 800ff9c:	4629      	mov	r1, r5
 800ff9e:	4630      	mov	r0, r6
 800ffa0:	f000 f998 	bl	80102d4 <__swsetup_r>
 800ffa4:	b1c0      	cbz	r0, 800ffd8 <_vfiprintf_r+0x78>
 800ffa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffa8:	07dc      	lsls	r4, r3, #31
 800ffaa:	d50e      	bpl.n	800ffca <_vfiprintf_r+0x6a>
 800ffac:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb0:	b01d      	add	sp, #116	; 0x74
 800ffb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb6:	4b7b      	ldr	r3, [pc, #492]	; (80101a4 <_vfiprintf_r+0x244>)
 800ffb8:	429d      	cmp	r5, r3
 800ffba:	d101      	bne.n	800ffc0 <_vfiprintf_r+0x60>
 800ffbc:	68b5      	ldr	r5, [r6, #8]
 800ffbe:	e7df      	b.n	800ff80 <_vfiprintf_r+0x20>
 800ffc0:	4b79      	ldr	r3, [pc, #484]	; (80101a8 <_vfiprintf_r+0x248>)
 800ffc2:	429d      	cmp	r5, r3
 800ffc4:	bf08      	it	eq
 800ffc6:	68f5      	ldreq	r5, [r6, #12]
 800ffc8:	e7da      	b.n	800ff80 <_vfiprintf_r+0x20>
 800ffca:	89ab      	ldrh	r3, [r5, #12]
 800ffcc:	0598      	lsls	r0, r3, #22
 800ffce:	d4ed      	bmi.n	800ffac <_vfiprintf_r+0x4c>
 800ffd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffd2:	f000 fbae 	bl	8010732 <__retarget_lock_release_recursive>
 800ffd6:	e7e9      	b.n	800ffac <_vfiprintf_r+0x4c>
 800ffd8:	2300      	movs	r3, #0
 800ffda:	9309      	str	r3, [sp, #36]	; 0x24
 800ffdc:	2320      	movs	r3, #32
 800ffde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffe6:	2330      	movs	r3, #48	; 0x30
 800ffe8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80101ac <_vfiprintf_r+0x24c>
 800ffec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fff0:	f04f 0901 	mov.w	r9, #1
 800fff4:	4623      	mov	r3, r4
 800fff6:	469a      	mov	sl, r3
 800fff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fffc:	b10a      	cbz	r2, 8010002 <_vfiprintf_r+0xa2>
 800fffe:	2a25      	cmp	r2, #37	; 0x25
 8010000:	d1f9      	bne.n	800fff6 <_vfiprintf_r+0x96>
 8010002:	ebba 0b04 	subs.w	fp, sl, r4
 8010006:	d00b      	beq.n	8010020 <_vfiprintf_r+0xc0>
 8010008:	465b      	mov	r3, fp
 801000a:	4622      	mov	r2, r4
 801000c:	4629      	mov	r1, r5
 801000e:	4630      	mov	r0, r6
 8010010:	f7ff ff93 	bl	800ff3a <__sfputs_r>
 8010014:	3001      	adds	r0, #1
 8010016:	f000 80aa 	beq.w	801016e <_vfiprintf_r+0x20e>
 801001a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801001c:	445a      	add	r2, fp
 801001e:	9209      	str	r2, [sp, #36]	; 0x24
 8010020:	f89a 3000 	ldrb.w	r3, [sl]
 8010024:	2b00      	cmp	r3, #0
 8010026:	f000 80a2 	beq.w	801016e <_vfiprintf_r+0x20e>
 801002a:	2300      	movs	r3, #0
 801002c:	f04f 32ff 	mov.w	r2, #4294967295
 8010030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010034:	f10a 0a01 	add.w	sl, sl, #1
 8010038:	9304      	str	r3, [sp, #16]
 801003a:	9307      	str	r3, [sp, #28]
 801003c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010040:	931a      	str	r3, [sp, #104]	; 0x68
 8010042:	4654      	mov	r4, sl
 8010044:	2205      	movs	r2, #5
 8010046:	f814 1b01 	ldrb.w	r1, [r4], #1
 801004a:	4858      	ldr	r0, [pc, #352]	; (80101ac <_vfiprintf_r+0x24c>)
 801004c:	f7f0 f8e0 	bl	8000210 <memchr>
 8010050:	9a04      	ldr	r2, [sp, #16]
 8010052:	b9d8      	cbnz	r0, 801008c <_vfiprintf_r+0x12c>
 8010054:	06d1      	lsls	r1, r2, #27
 8010056:	bf44      	itt	mi
 8010058:	2320      	movmi	r3, #32
 801005a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801005e:	0713      	lsls	r3, r2, #28
 8010060:	bf44      	itt	mi
 8010062:	232b      	movmi	r3, #43	; 0x2b
 8010064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010068:	f89a 3000 	ldrb.w	r3, [sl]
 801006c:	2b2a      	cmp	r3, #42	; 0x2a
 801006e:	d015      	beq.n	801009c <_vfiprintf_r+0x13c>
 8010070:	9a07      	ldr	r2, [sp, #28]
 8010072:	4654      	mov	r4, sl
 8010074:	2000      	movs	r0, #0
 8010076:	f04f 0c0a 	mov.w	ip, #10
 801007a:	4621      	mov	r1, r4
 801007c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010080:	3b30      	subs	r3, #48	; 0x30
 8010082:	2b09      	cmp	r3, #9
 8010084:	d94e      	bls.n	8010124 <_vfiprintf_r+0x1c4>
 8010086:	b1b0      	cbz	r0, 80100b6 <_vfiprintf_r+0x156>
 8010088:	9207      	str	r2, [sp, #28]
 801008a:	e014      	b.n	80100b6 <_vfiprintf_r+0x156>
 801008c:	eba0 0308 	sub.w	r3, r0, r8
 8010090:	fa09 f303 	lsl.w	r3, r9, r3
 8010094:	4313      	orrs	r3, r2
 8010096:	9304      	str	r3, [sp, #16]
 8010098:	46a2      	mov	sl, r4
 801009a:	e7d2      	b.n	8010042 <_vfiprintf_r+0xe2>
 801009c:	9b03      	ldr	r3, [sp, #12]
 801009e:	1d19      	adds	r1, r3, #4
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	9103      	str	r1, [sp, #12]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	bfbb      	ittet	lt
 80100a8:	425b      	neglt	r3, r3
 80100aa:	f042 0202 	orrlt.w	r2, r2, #2
 80100ae:	9307      	strge	r3, [sp, #28]
 80100b0:	9307      	strlt	r3, [sp, #28]
 80100b2:	bfb8      	it	lt
 80100b4:	9204      	strlt	r2, [sp, #16]
 80100b6:	7823      	ldrb	r3, [r4, #0]
 80100b8:	2b2e      	cmp	r3, #46	; 0x2e
 80100ba:	d10c      	bne.n	80100d6 <_vfiprintf_r+0x176>
 80100bc:	7863      	ldrb	r3, [r4, #1]
 80100be:	2b2a      	cmp	r3, #42	; 0x2a
 80100c0:	d135      	bne.n	801012e <_vfiprintf_r+0x1ce>
 80100c2:	9b03      	ldr	r3, [sp, #12]
 80100c4:	1d1a      	adds	r2, r3, #4
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	9203      	str	r2, [sp, #12]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	bfb8      	it	lt
 80100ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80100d2:	3402      	adds	r4, #2
 80100d4:	9305      	str	r3, [sp, #20]
 80100d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80101bc <_vfiprintf_r+0x25c>
 80100da:	7821      	ldrb	r1, [r4, #0]
 80100dc:	2203      	movs	r2, #3
 80100de:	4650      	mov	r0, sl
 80100e0:	f7f0 f896 	bl	8000210 <memchr>
 80100e4:	b140      	cbz	r0, 80100f8 <_vfiprintf_r+0x198>
 80100e6:	2340      	movs	r3, #64	; 0x40
 80100e8:	eba0 000a 	sub.w	r0, r0, sl
 80100ec:	fa03 f000 	lsl.w	r0, r3, r0
 80100f0:	9b04      	ldr	r3, [sp, #16]
 80100f2:	4303      	orrs	r3, r0
 80100f4:	3401      	adds	r4, #1
 80100f6:	9304      	str	r3, [sp, #16]
 80100f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100fc:	482c      	ldr	r0, [pc, #176]	; (80101b0 <_vfiprintf_r+0x250>)
 80100fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010102:	2206      	movs	r2, #6
 8010104:	f7f0 f884 	bl	8000210 <memchr>
 8010108:	2800      	cmp	r0, #0
 801010a:	d03f      	beq.n	801018c <_vfiprintf_r+0x22c>
 801010c:	4b29      	ldr	r3, [pc, #164]	; (80101b4 <_vfiprintf_r+0x254>)
 801010e:	bb1b      	cbnz	r3, 8010158 <_vfiprintf_r+0x1f8>
 8010110:	9b03      	ldr	r3, [sp, #12]
 8010112:	3307      	adds	r3, #7
 8010114:	f023 0307 	bic.w	r3, r3, #7
 8010118:	3308      	adds	r3, #8
 801011a:	9303      	str	r3, [sp, #12]
 801011c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801011e:	443b      	add	r3, r7
 8010120:	9309      	str	r3, [sp, #36]	; 0x24
 8010122:	e767      	b.n	800fff4 <_vfiprintf_r+0x94>
 8010124:	fb0c 3202 	mla	r2, ip, r2, r3
 8010128:	460c      	mov	r4, r1
 801012a:	2001      	movs	r0, #1
 801012c:	e7a5      	b.n	801007a <_vfiprintf_r+0x11a>
 801012e:	2300      	movs	r3, #0
 8010130:	3401      	adds	r4, #1
 8010132:	9305      	str	r3, [sp, #20]
 8010134:	4619      	mov	r1, r3
 8010136:	f04f 0c0a 	mov.w	ip, #10
 801013a:	4620      	mov	r0, r4
 801013c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010140:	3a30      	subs	r2, #48	; 0x30
 8010142:	2a09      	cmp	r2, #9
 8010144:	d903      	bls.n	801014e <_vfiprintf_r+0x1ee>
 8010146:	2b00      	cmp	r3, #0
 8010148:	d0c5      	beq.n	80100d6 <_vfiprintf_r+0x176>
 801014a:	9105      	str	r1, [sp, #20]
 801014c:	e7c3      	b.n	80100d6 <_vfiprintf_r+0x176>
 801014e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010152:	4604      	mov	r4, r0
 8010154:	2301      	movs	r3, #1
 8010156:	e7f0      	b.n	801013a <_vfiprintf_r+0x1da>
 8010158:	ab03      	add	r3, sp, #12
 801015a:	9300      	str	r3, [sp, #0]
 801015c:	462a      	mov	r2, r5
 801015e:	4b16      	ldr	r3, [pc, #88]	; (80101b8 <_vfiprintf_r+0x258>)
 8010160:	a904      	add	r1, sp, #16
 8010162:	4630      	mov	r0, r6
 8010164:	f7fc f898 	bl	800c298 <_printf_float>
 8010168:	4607      	mov	r7, r0
 801016a:	1c78      	adds	r0, r7, #1
 801016c:	d1d6      	bne.n	801011c <_vfiprintf_r+0x1bc>
 801016e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010170:	07d9      	lsls	r1, r3, #31
 8010172:	d405      	bmi.n	8010180 <_vfiprintf_r+0x220>
 8010174:	89ab      	ldrh	r3, [r5, #12]
 8010176:	059a      	lsls	r2, r3, #22
 8010178:	d402      	bmi.n	8010180 <_vfiprintf_r+0x220>
 801017a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801017c:	f000 fad9 	bl	8010732 <__retarget_lock_release_recursive>
 8010180:	89ab      	ldrh	r3, [r5, #12]
 8010182:	065b      	lsls	r3, r3, #25
 8010184:	f53f af12 	bmi.w	800ffac <_vfiprintf_r+0x4c>
 8010188:	9809      	ldr	r0, [sp, #36]	; 0x24
 801018a:	e711      	b.n	800ffb0 <_vfiprintf_r+0x50>
 801018c:	ab03      	add	r3, sp, #12
 801018e:	9300      	str	r3, [sp, #0]
 8010190:	462a      	mov	r2, r5
 8010192:	4b09      	ldr	r3, [pc, #36]	; (80101b8 <_vfiprintf_r+0x258>)
 8010194:	a904      	add	r1, sp, #16
 8010196:	4630      	mov	r0, r6
 8010198:	f7fc fb22 	bl	800c7e0 <_printf_i>
 801019c:	e7e4      	b.n	8010168 <_vfiprintf_r+0x208>
 801019e:	bf00      	nop
 80101a0:	080245e0 	.word	0x080245e0
 80101a4:	08024600 	.word	0x08024600
 80101a8:	080245c0 	.word	0x080245c0
 80101ac:	080245ac 	.word	0x080245ac
 80101b0:	080245b6 	.word	0x080245b6
 80101b4:	0800c299 	.word	0x0800c299
 80101b8:	0800ff3b 	.word	0x0800ff3b
 80101bc:	080245b2 	.word	0x080245b2

080101c0 <nan>:
 80101c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80101c8 <nan+0x8>
 80101c4:	4770      	bx	lr
 80101c6:	bf00      	nop
 80101c8:	00000000 	.word	0x00000000
 80101cc:	7ff80000 	.word	0x7ff80000

080101d0 <_sbrk_r>:
 80101d0:	b538      	push	{r3, r4, r5, lr}
 80101d2:	4d06      	ldr	r5, [pc, #24]	; (80101ec <_sbrk_r+0x1c>)
 80101d4:	2300      	movs	r3, #0
 80101d6:	4604      	mov	r4, r0
 80101d8:	4608      	mov	r0, r1
 80101da:	602b      	str	r3, [r5, #0]
 80101dc:	f7f5 fb34 	bl	8005848 <_sbrk>
 80101e0:	1c43      	adds	r3, r0, #1
 80101e2:	d102      	bne.n	80101ea <_sbrk_r+0x1a>
 80101e4:	682b      	ldr	r3, [r5, #0]
 80101e6:	b103      	cbz	r3, 80101ea <_sbrk_r+0x1a>
 80101e8:	6023      	str	r3, [r4, #0]
 80101ea:	bd38      	pop	{r3, r4, r5, pc}
 80101ec:	20000724 	.word	0x20000724

080101f0 <strncmp>:
 80101f0:	b510      	push	{r4, lr}
 80101f2:	b16a      	cbz	r2, 8010210 <strncmp+0x20>
 80101f4:	3901      	subs	r1, #1
 80101f6:	1884      	adds	r4, r0, r2
 80101f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010200:	4293      	cmp	r3, r2
 8010202:	d103      	bne.n	801020c <strncmp+0x1c>
 8010204:	42a0      	cmp	r0, r4
 8010206:	d001      	beq.n	801020c <strncmp+0x1c>
 8010208:	2b00      	cmp	r3, #0
 801020a:	d1f5      	bne.n	80101f8 <strncmp+0x8>
 801020c:	1a98      	subs	r0, r3, r2
 801020e:	bd10      	pop	{r4, pc}
 8010210:	4610      	mov	r0, r2
 8010212:	e7fc      	b.n	801020e <strncmp+0x1e>

08010214 <__swbuf_r>:
 8010214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010216:	460e      	mov	r6, r1
 8010218:	4614      	mov	r4, r2
 801021a:	4605      	mov	r5, r0
 801021c:	b118      	cbz	r0, 8010226 <__swbuf_r+0x12>
 801021e:	6983      	ldr	r3, [r0, #24]
 8010220:	b90b      	cbnz	r3, 8010226 <__swbuf_r+0x12>
 8010222:	f000 f9e7 	bl	80105f4 <__sinit>
 8010226:	4b21      	ldr	r3, [pc, #132]	; (80102ac <__swbuf_r+0x98>)
 8010228:	429c      	cmp	r4, r3
 801022a:	d12b      	bne.n	8010284 <__swbuf_r+0x70>
 801022c:	686c      	ldr	r4, [r5, #4]
 801022e:	69a3      	ldr	r3, [r4, #24]
 8010230:	60a3      	str	r3, [r4, #8]
 8010232:	89a3      	ldrh	r3, [r4, #12]
 8010234:	071a      	lsls	r2, r3, #28
 8010236:	d52f      	bpl.n	8010298 <__swbuf_r+0x84>
 8010238:	6923      	ldr	r3, [r4, #16]
 801023a:	b36b      	cbz	r3, 8010298 <__swbuf_r+0x84>
 801023c:	6923      	ldr	r3, [r4, #16]
 801023e:	6820      	ldr	r0, [r4, #0]
 8010240:	1ac0      	subs	r0, r0, r3
 8010242:	6963      	ldr	r3, [r4, #20]
 8010244:	b2f6      	uxtb	r6, r6
 8010246:	4283      	cmp	r3, r0
 8010248:	4637      	mov	r7, r6
 801024a:	dc04      	bgt.n	8010256 <__swbuf_r+0x42>
 801024c:	4621      	mov	r1, r4
 801024e:	4628      	mov	r0, r5
 8010250:	f000 f93c 	bl	80104cc <_fflush_r>
 8010254:	bb30      	cbnz	r0, 80102a4 <__swbuf_r+0x90>
 8010256:	68a3      	ldr	r3, [r4, #8]
 8010258:	3b01      	subs	r3, #1
 801025a:	60a3      	str	r3, [r4, #8]
 801025c:	6823      	ldr	r3, [r4, #0]
 801025e:	1c5a      	adds	r2, r3, #1
 8010260:	6022      	str	r2, [r4, #0]
 8010262:	701e      	strb	r6, [r3, #0]
 8010264:	6963      	ldr	r3, [r4, #20]
 8010266:	3001      	adds	r0, #1
 8010268:	4283      	cmp	r3, r0
 801026a:	d004      	beq.n	8010276 <__swbuf_r+0x62>
 801026c:	89a3      	ldrh	r3, [r4, #12]
 801026e:	07db      	lsls	r3, r3, #31
 8010270:	d506      	bpl.n	8010280 <__swbuf_r+0x6c>
 8010272:	2e0a      	cmp	r6, #10
 8010274:	d104      	bne.n	8010280 <__swbuf_r+0x6c>
 8010276:	4621      	mov	r1, r4
 8010278:	4628      	mov	r0, r5
 801027a:	f000 f927 	bl	80104cc <_fflush_r>
 801027e:	b988      	cbnz	r0, 80102a4 <__swbuf_r+0x90>
 8010280:	4638      	mov	r0, r7
 8010282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010284:	4b0a      	ldr	r3, [pc, #40]	; (80102b0 <__swbuf_r+0x9c>)
 8010286:	429c      	cmp	r4, r3
 8010288:	d101      	bne.n	801028e <__swbuf_r+0x7a>
 801028a:	68ac      	ldr	r4, [r5, #8]
 801028c:	e7cf      	b.n	801022e <__swbuf_r+0x1a>
 801028e:	4b09      	ldr	r3, [pc, #36]	; (80102b4 <__swbuf_r+0xa0>)
 8010290:	429c      	cmp	r4, r3
 8010292:	bf08      	it	eq
 8010294:	68ec      	ldreq	r4, [r5, #12]
 8010296:	e7ca      	b.n	801022e <__swbuf_r+0x1a>
 8010298:	4621      	mov	r1, r4
 801029a:	4628      	mov	r0, r5
 801029c:	f000 f81a 	bl	80102d4 <__swsetup_r>
 80102a0:	2800      	cmp	r0, #0
 80102a2:	d0cb      	beq.n	801023c <__swbuf_r+0x28>
 80102a4:	f04f 37ff 	mov.w	r7, #4294967295
 80102a8:	e7ea      	b.n	8010280 <__swbuf_r+0x6c>
 80102aa:	bf00      	nop
 80102ac:	080245e0 	.word	0x080245e0
 80102b0:	08024600 	.word	0x08024600
 80102b4:	080245c0 	.word	0x080245c0

080102b8 <__ascii_wctomb>:
 80102b8:	b149      	cbz	r1, 80102ce <__ascii_wctomb+0x16>
 80102ba:	2aff      	cmp	r2, #255	; 0xff
 80102bc:	bf85      	ittet	hi
 80102be:	238a      	movhi	r3, #138	; 0x8a
 80102c0:	6003      	strhi	r3, [r0, #0]
 80102c2:	700a      	strbls	r2, [r1, #0]
 80102c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80102c8:	bf98      	it	ls
 80102ca:	2001      	movls	r0, #1
 80102cc:	4770      	bx	lr
 80102ce:	4608      	mov	r0, r1
 80102d0:	4770      	bx	lr
	...

080102d4 <__swsetup_r>:
 80102d4:	4b32      	ldr	r3, [pc, #200]	; (80103a0 <__swsetup_r+0xcc>)
 80102d6:	b570      	push	{r4, r5, r6, lr}
 80102d8:	681d      	ldr	r5, [r3, #0]
 80102da:	4606      	mov	r6, r0
 80102dc:	460c      	mov	r4, r1
 80102de:	b125      	cbz	r5, 80102ea <__swsetup_r+0x16>
 80102e0:	69ab      	ldr	r3, [r5, #24]
 80102e2:	b913      	cbnz	r3, 80102ea <__swsetup_r+0x16>
 80102e4:	4628      	mov	r0, r5
 80102e6:	f000 f985 	bl	80105f4 <__sinit>
 80102ea:	4b2e      	ldr	r3, [pc, #184]	; (80103a4 <__swsetup_r+0xd0>)
 80102ec:	429c      	cmp	r4, r3
 80102ee:	d10f      	bne.n	8010310 <__swsetup_r+0x3c>
 80102f0:	686c      	ldr	r4, [r5, #4]
 80102f2:	89a3      	ldrh	r3, [r4, #12]
 80102f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102f8:	0719      	lsls	r1, r3, #28
 80102fa:	d42c      	bmi.n	8010356 <__swsetup_r+0x82>
 80102fc:	06dd      	lsls	r5, r3, #27
 80102fe:	d411      	bmi.n	8010324 <__swsetup_r+0x50>
 8010300:	2309      	movs	r3, #9
 8010302:	6033      	str	r3, [r6, #0]
 8010304:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010308:	81a3      	strh	r3, [r4, #12]
 801030a:	f04f 30ff 	mov.w	r0, #4294967295
 801030e:	e03e      	b.n	801038e <__swsetup_r+0xba>
 8010310:	4b25      	ldr	r3, [pc, #148]	; (80103a8 <__swsetup_r+0xd4>)
 8010312:	429c      	cmp	r4, r3
 8010314:	d101      	bne.n	801031a <__swsetup_r+0x46>
 8010316:	68ac      	ldr	r4, [r5, #8]
 8010318:	e7eb      	b.n	80102f2 <__swsetup_r+0x1e>
 801031a:	4b24      	ldr	r3, [pc, #144]	; (80103ac <__swsetup_r+0xd8>)
 801031c:	429c      	cmp	r4, r3
 801031e:	bf08      	it	eq
 8010320:	68ec      	ldreq	r4, [r5, #12]
 8010322:	e7e6      	b.n	80102f2 <__swsetup_r+0x1e>
 8010324:	0758      	lsls	r0, r3, #29
 8010326:	d512      	bpl.n	801034e <__swsetup_r+0x7a>
 8010328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801032a:	b141      	cbz	r1, 801033e <__swsetup_r+0x6a>
 801032c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010330:	4299      	cmp	r1, r3
 8010332:	d002      	beq.n	801033a <__swsetup_r+0x66>
 8010334:	4630      	mov	r0, r6
 8010336:	f7ff fbe3 	bl	800fb00 <_free_r>
 801033a:	2300      	movs	r3, #0
 801033c:	6363      	str	r3, [r4, #52]	; 0x34
 801033e:	89a3      	ldrh	r3, [r4, #12]
 8010340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010344:	81a3      	strh	r3, [r4, #12]
 8010346:	2300      	movs	r3, #0
 8010348:	6063      	str	r3, [r4, #4]
 801034a:	6923      	ldr	r3, [r4, #16]
 801034c:	6023      	str	r3, [r4, #0]
 801034e:	89a3      	ldrh	r3, [r4, #12]
 8010350:	f043 0308 	orr.w	r3, r3, #8
 8010354:	81a3      	strh	r3, [r4, #12]
 8010356:	6923      	ldr	r3, [r4, #16]
 8010358:	b94b      	cbnz	r3, 801036e <__swsetup_r+0x9a>
 801035a:	89a3      	ldrh	r3, [r4, #12]
 801035c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010364:	d003      	beq.n	801036e <__swsetup_r+0x9a>
 8010366:	4621      	mov	r1, r4
 8010368:	4630      	mov	r0, r6
 801036a:	f000 fa07 	bl	801077c <__smakebuf_r>
 801036e:	89a0      	ldrh	r0, [r4, #12]
 8010370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010374:	f010 0301 	ands.w	r3, r0, #1
 8010378:	d00a      	beq.n	8010390 <__swsetup_r+0xbc>
 801037a:	2300      	movs	r3, #0
 801037c:	60a3      	str	r3, [r4, #8]
 801037e:	6963      	ldr	r3, [r4, #20]
 8010380:	425b      	negs	r3, r3
 8010382:	61a3      	str	r3, [r4, #24]
 8010384:	6923      	ldr	r3, [r4, #16]
 8010386:	b943      	cbnz	r3, 801039a <__swsetup_r+0xc6>
 8010388:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801038c:	d1ba      	bne.n	8010304 <__swsetup_r+0x30>
 801038e:	bd70      	pop	{r4, r5, r6, pc}
 8010390:	0781      	lsls	r1, r0, #30
 8010392:	bf58      	it	pl
 8010394:	6963      	ldrpl	r3, [r4, #20]
 8010396:	60a3      	str	r3, [r4, #8]
 8010398:	e7f4      	b.n	8010384 <__swsetup_r+0xb0>
 801039a:	2000      	movs	r0, #0
 801039c:	e7f7      	b.n	801038e <__swsetup_r+0xba>
 801039e:	bf00      	nop
 80103a0:	20000040 	.word	0x20000040
 80103a4:	080245e0 	.word	0x080245e0
 80103a8:	08024600 	.word	0x08024600
 80103ac:	080245c0 	.word	0x080245c0

080103b0 <abort>:
 80103b0:	b508      	push	{r3, lr}
 80103b2:	2006      	movs	r0, #6
 80103b4:	f000 fa96 	bl	80108e4 <raise>
 80103b8:	2001      	movs	r0, #1
 80103ba:	f7f5 f9cd 	bl	8005758 <_exit>
	...

080103c0 <__sflush_r>:
 80103c0:	898a      	ldrh	r2, [r1, #12]
 80103c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103c6:	4605      	mov	r5, r0
 80103c8:	0710      	lsls	r0, r2, #28
 80103ca:	460c      	mov	r4, r1
 80103cc:	d458      	bmi.n	8010480 <__sflush_r+0xc0>
 80103ce:	684b      	ldr	r3, [r1, #4]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	dc05      	bgt.n	80103e0 <__sflush_r+0x20>
 80103d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	dc02      	bgt.n	80103e0 <__sflush_r+0x20>
 80103da:	2000      	movs	r0, #0
 80103dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80103e2:	2e00      	cmp	r6, #0
 80103e4:	d0f9      	beq.n	80103da <__sflush_r+0x1a>
 80103e6:	2300      	movs	r3, #0
 80103e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80103ec:	682f      	ldr	r7, [r5, #0]
 80103ee:	602b      	str	r3, [r5, #0]
 80103f0:	d032      	beq.n	8010458 <__sflush_r+0x98>
 80103f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80103f4:	89a3      	ldrh	r3, [r4, #12]
 80103f6:	075a      	lsls	r2, r3, #29
 80103f8:	d505      	bpl.n	8010406 <__sflush_r+0x46>
 80103fa:	6863      	ldr	r3, [r4, #4]
 80103fc:	1ac0      	subs	r0, r0, r3
 80103fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010400:	b10b      	cbz	r3, 8010406 <__sflush_r+0x46>
 8010402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010404:	1ac0      	subs	r0, r0, r3
 8010406:	2300      	movs	r3, #0
 8010408:	4602      	mov	r2, r0
 801040a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801040c:	6a21      	ldr	r1, [r4, #32]
 801040e:	4628      	mov	r0, r5
 8010410:	47b0      	blx	r6
 8010412:	1c43      	adds	r3, r0, #1
 8010414:	89a3      	ldrh	r3, [r4, #12]
 8010416:	d106      	bne.n	8010426 <__sflush_r+0x66>
 8010418:	6829      	ldr	r1, [r5, #0]
 801041a:	291d      	cmp	r1, #29
 801041c:	d82c      	bhi.n	8010478 <__sflush_r+0xb8>
 801041e:	4a2a      	ldr	r2, [pc, #168]	; (80104c8 <__sflush_r+0x108>)
 8010420:	40ca      	lsrs	r2, r1
 8010422:	07d6      	lsls	r6, r2, #31
 8010424:	d528      	bpl.n	8010478 <__sflush_r+0xb8>
 8010426:	2200      	movs	r2, #0
 8010428:	6062      	str	r2, [r4, #4]
 801042a:	04d9      	lsls	r1, r3, #19
 801042c:	6922      	ldr	r2, [r4, #16]
 801042e:	6022      	str	r2, [r4, #0]
 8010430:	d504      	bpl.n	801043c <__sflush_r+0x7c>
 8010432:	1c42      	adds	r2, r0, #1
 8010434:	d101      	bne.n	801043a <__sflush_r+0x7a>
 8010436:	682b      	ldr	r3, [r5, #0]
 8010438:	b903      	cbnz	r3, 801043c <__sflush_r+0x7c>
 801043a:	6560      	str	r0, [r4, #84]	; 0x54
 801043c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801043e:	602f      	str	r7, [r5, #0]
 8010440:	2900      	cmp	r1, #0
 8010442:	d0ca      	beq.n	80103da <__sflush_r+0x1a>
 8010444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010448:	4299      	cmp	r1, r3
 801044a:	d002      	beq.n	8010452 <__sflush_r+0x92>
 801044c:	4628      	mov	r0, r5
 801044e:	f7ff fb57 	bl	800fb00 <_free_r>
 8010452:	2000      	movs	r0, #0
 8010454:	6360      	str	r0, [r4, #52]	; 0x34
 8010456:	e7c1      	b.n	80103dc <__sflush_r+0x1c>
 8010458:	6a21      	ldr	r1, [r4, #32]
 801045a:	2301      	movs	r3, #1
 801045c:	4628      	mov	r0, r5
 801045e:	47b0      	blx	r6
 8010460:	1c41      	adds	r1, r0, #1
 8010462:	d1c7      	bne.n	80103f4 <__sflush_r+0x34>
 8010464:	682b      	ldr	r3, [r5, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d0c4      	beq.n	80103f4 <__sflush_r+0x34>
 801046a:	2b1d      	cmp	r3, #29
 801046c:	d001      	beq.n	8010472 <__sflush_r+0xb2>
 801046e:	2b16      	cmp	r3, #22
 8010470:	d101      	bne.n	8010476 <__sflush_r+0xb6>
 8010472:	602f      	str	r7, [r5, #0]
 8010474:	e7b1      	b.n	80103da <__sflush_r+0x1a>
 8010476:	89a3      	ldrh	r3, [r4, #12]
 8010478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801047c:	81a3      	strh	r3, [r4, #12]
 801047e:	e7ad      	b.n	80103dc <__sflush_r+0x1c>
 8010480:	690f      	ldr	r7, [r1, #16]
 8010482:	2f00      	cmp	r7, #0
 8010484:	d0a9      	beq.n	80103da <__sflush_r+0x1a>
 8010486:	0793      	lsls	r3, r2, #30
 8010488:	680e      	ldr	r6, [r1, #0]
 801048a:	bf08      	it	eq
 801048c:	694b      	ldreq	r3, [r1, #20]
 801048e:	600f      	str	r7, [r1, #0]
 8010490:	bf18      	it	ne
 8010492:	2300      	movne	r3, #0
 8010494:	eba6 0807 	sub.w	r8, r6, r7
 8010498:	608b      	str	r3, [r1, #8]
 801049a:	f1b8 0f00 	cmp.w	r8, #0
 801049e:	dd9c      	ble.n	80103da <__sflush_r+0x1a>
 80104a0:	6a21      	ldr	r1, [r4, #32]
 80104a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80104a4:	4643      	mov	r3, r8
 80104a6:	463a      	mov	r2, r7
 80104a8:	4628      	mov	r0, r5
 80104aa:	47b0      	blx	r6
 80104ac:	2800      	cmp	r0, #0
 80104ae:	dc06      	bgt.n	80104be <__sflush_r+0xfe>
 80104b0:	89a3      	ldrh	r3, [r4, #12]
 80104b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104b6:	81a3      	strh	r3, [r4, #12]
 80104b8:	f04f 30ff 	mov.w	r0, #4294967295
 80104bc:	e78e      	b.n	80103dc <__sflush_r+0x1c>
 80104be:	4407      	add	r7, r0
 80104c0:	eba8 0800 	sub.w	r8, r8, r0
 80104c4:	e7e9      	b.n	801049a <__sflush_r+0xda>
 80104c6:	bf00      	nop
 80104c8:	20400001 	.word	0x20400001

080104cc <_fflush_r>:
 80104cc:	b538      	push	{r3, r4, r5, lr}
 80104ce:	690b      	ldr	r3, [r1, #16]
 80104d0:	4605      	mov	r5, r0
 80104d2:	460c      	mov	r4, r1
 80104d4:	b913      	cbnz	r3, 80104dc <_fflush_r+0x10>
 80104d6:	2500      	movs	r5, #0
 80104d8:	4628      	mov	r0, r5
 80104da:	bd38      	pop	{r3, r4, r5, pc}
 80104dc:	b118      	cbz	r0, 80104e6 <_fflush_r+0x1a>
 80104de:	6983      	ldr	r3, [r0, #24]
 80104e0:	b90b      	cbnz	r3, 80104e6 <_fflush_r+0x1a>
 80104e2:	f000 f887 	bl	80105f4 <__sinit>
 80104e6:	4b14      	ldr	r3, [pc, #80]	; (8010538 <_fflush_r+0x6c>)
 80104e8:	429c      	cmp	r4, r3
 80104ea:	d11b      	bne.n	8010524 <_fflush_r+0x58>
 80104ec:	686c      	ldr	r4, [r5, #4]
 80104ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d0ef      	beq.n	80104d6 <_fflush_r+0xa>
 80104f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80104f8:	07d0      	lsls	r0, r2, #31
 80104fa:	d404      	bmi.n	8010506 <_fflush_r+0x3a>
 80104fc:	0599      	lsls	r1, r3, #22
 80104fe:	d402      	bmi.n	8010506 <_fflush_r+0x3a>
 8010500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010502:	f000 f915 	bl	8010730 <__retarget_lock_acquire_recursive>
 8010506:	4628      	mov	r0, r5
 8010508:	4621      	mov	r1, r4
 801050a:	f7ff ff59 	bl	80103c0 <__sflush_r>
 801050e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010510:	07da      	lsls	r2, r3, #31
 8010512:	4605      	mov	r5, r0
 8010514:	d4e0      	bmi.n	80104d8 <_fflush_r+0xc>
 8010516:	89a3      	ldrh	r3, [r4, #12]
 8010518:	059b      	lsls	r3, r3, #22
 801051a:	d4dd      	bmi.n	80104d8 <_fflush_r+0xc>
 801051c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801051e:	f000 f908 	bl	8010732 <__retarget_lock_release_recursive>
 8010522:	e7d9      	b.n	80104d8 <_fflush_r+0xc>
 8010524:	4b05      	ldr	r3, [pc, #20]	; (801053c <_fflush_r+0x70>)
 8010526:	429c      	cmp	r4, r3
 8010528:	d101      	bne.n	801052e <_fflush_r+0x62>
 801052a:	68ac      	ldr	r4, [r5, #8]
 801052c:	e7df      	b.n	80104ee <_fflush_r+0x22>
 801052e:	4b04      	ldr	r3, [pc, #16]	; (8010540 <_fflush_r+0x74>)
 8010530:	429c      	cmp	r4, r3
 8010532:	bf08      	it	eq
 8010534:	68ec      	ldreq	r4, [r5, #12]
 8010536:	e7da      	b.n	80104ee <_fflush_r+0x22>
 8010538:	080245e0 	.word	0x080245e0
 801053c:	08024600 	.word	0x08024600
 8010540:	080245c0 	.word	0x080245c0

08010544 <std>:
 8010544:	2300      	movs	r3, #0
 8010546:	b510      	push	{r4, lr}
 8010548:	4604      	mov	r4, r0
 801054a:	e9c0 3300 	strd	r3, r3, [r0]
 801054e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010552:	6083      	str	r3, [r0, #8]
 8010554:	8181      	strh	r1, [r0, #12]
 8010556:	6643      	str	r3, [r0, #100]	; 0x64
 8010558:	81c2      	strh	r2, [r0, #14]
 801055a:	6183      	str	r3, [r0, #24]
 801055c:	4619      	mov	r1, r3
 801055e:	2208      	movs	r2, #8
 8010560:	305c      	adds	r0, #92	; 0x5c
 8010562:	f7fb fdf1 	bl	800c148 <memset>
 8010566:	4b05      	ldr	r3, [pc, #20]	; (801057c <std+0x38>)
 8010568:	6263      	str	r3, [r4, #36]	; 0x24
 801056a:	4b05      	ldr	r3, [pc, #20]	; (8010580 <std+0x3c>)
 801056c:	62a3      	str	r3, [r4, #40]	; 0x28
 801056e:	4b05      	ldr	r3, [pc, #20]	; (8010584 <std+0x40>)
 8010570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010572:	4b05      	ldr	r3, [pc, #20]	; (8010588 <std+0x44>)
 8010574:	6224      	str	r4, [r4, #32]
 8010576:	6323      	str	r3, [r4, #48]	; 0x30
 8010578:	bd10      	pop	{r4, pc}
 801057a:	bf00      	nop
 801057c:	0801091d 	.word	0x0801091d
 8010580:	0801093f 	.word	0x0801093f
 8010584:	08010977 	.word	0x08010977
 8010588:	0801099b 	.word	0x0801099b

0801058c <_cleanup_r>:
 801058c:	4901      	ldr	r1, [pc, #4]	; (8010594 <_cleanup_r+0x8>)
 801058e:	f000 b8af 	b.w	80106f0 <_fwalk_reent>
 8010592:	bf00      	nop
 8010594:	080104cd 	.word	0x080104cd

08010598 <__sfmoreglue>:
 8010598:	b570      	push	{r4, r5, r6, lr}
 801059a:	1e4a      	subs	r2, r1, #1
 801059c:	2568      	movs	r5, #104	; 0x68
 801059e:	4355      	muls	r5, r2
 80105a0:	460e      	mov	r6, r1
 80105a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80105a6:	f7ff fafb 	bl	800fba0 <_malloc_r>
 80105aa:	4604      	mov	r4, r0
 80105ac:	b140      	cbz	r0, 80105c0 <__sfmoreglue+0x28>
 80105ae:	2100      	movs	r1, #0
 80105b0:	e9c0 1600 	strd	r1, r6, [r0]
 80105b4:	300c      	adds	r0, #12
 80105b6:	60a0      	str	r0, [r4, #8]
 80105b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80105bc:	f7fb fdc4 	bl	800c148 <memset>
 80105c0:	4620      	mov	r0, r4
 80105c2:	bd70      	pop	{r4, r5, r6, pc}

080105c4 <__sfp_lock_acquire>:
 80105c4:	4801      	ldr	r0, [pc, #4]	; (80105cc <__sfp_lock_acquire+0x8>)
 80105c6:	f000 b8b3 	b.w	8010730 <__retarget_lock_acquire_recursive>
 80105ca:	bf00      	nop
 80105cc:	20000720 	.word	0x20000720

080105d0 <__sfp_lock_release>:
 80105d0:	4801      	ldr	r0, [pc, #4]	; (80105d8 <__sfp_lock_release+0x8>)
 80105d2:	f000 b8ae 	b.w	8010732 <__retarget_lock_release_recursive>
 80105d6:	bf00      	nop
 80105d8:	20000720 	.word	0x20000720

080105dc <__sinit_lock_acquire>:
 80105dc:	4801      	ldr	r0, [pc, #4]	; (80105e4 <__sinit_lock_acquire+0x8>)
 80105de:	f000 b8a7 	b.w	8010730 <__retarget_lock_acquire_recursive>
 80105e2:	bf00      	nop
 80105e4:	2000071b 	.word	0x2000071b

080105e8 <__sinit_lock_release>:
 80105e8:	4801      	ldr	r0, [pc, #4]	; (80105f0 <__sinit_lock_release+0x8>)
 80105ea:	f000 b8a2 	b.w	8010732 <__retarget_lock_release_recursive>
 80105ee:	bf00      	nop
 80105f0:	2000071b 	.word	0x2000071b

080105f4 <__sinit>:
 80105f4:	b510      	push	{r4, lr}
 80105f6:	4604      	mov	r4, r0
 80105f8:	f7ff fff0 	bl	80105dc <__sinit_lock_acquire>
 80105fc:	69a3      	ldr	r3, [r4, #24]
 80105fe:	b11b      	cbz	r3, 8010608 <__sinit+0x14>
 8010600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010604:	f7ff bff0 	b.w	80105e8 <__sinit_lock_release>
 8010608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801060c:	6523      	str	r3, [r4, #80]	; 0x50
 801060e:	4b13      	ldr	r3, [pc, #76]	; (801065c <__sinit+0x68>)
 8010610:	4a13      	ldr	r2, [pc, #76]	; (8010660 <__sinit+0x6c>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	62a2      	str	r2, [r4, #40]	; 0x28
 8010616:	42a3      	cmp	r3, r4
 8010618:	bf04      	itt	eq
 801061a:	2301      	moveq	r3, #1
 801061c:	61a3      	streq	r3, [r4, #24]
 801061e:	4620      	mov	r0, r4
 8010620:	f000 f820 	bl	8010664 <__sfp>
 8010624:	6060      	str	r0, [r4, #4]
 8010626:	4620      	mov	r0, r4
 8010628:	f000 f81c 	bl	8010664 <__sfp>
 801062c:	60a0      	str	r0, [r4, #8]
 801062e:	4620      	mov	r0, r4
 8010630:	f000 f818 	bl	8010664 <__sfp>
 8010634:	2200      	movs	r2, #0
 8010636:	60e0      	str	r0, [r4, #12]
 8010638:	2104      	movs	r1, #4
 801063a:	6860      	ldr	r0, [r4, #4]
 801063c:	f7ff ff82 	bl	8010544 <std>
 8010640:	68a0      	ldr	r0, [r4, #8]
 8010642:	2201      	movs	r2, #1
 8010644:	2109      	movs	r1, #9
 8010646:	f7ff ff7d 	bl	8010544 <std>
 801064a:	68e0      	ldr	r0, [r4, #12]
 801064c:	2202      	movs	r2, #2
 801064e:	2112      	movs	r1, #18
 8010650:	f7ff ff78 	bl	8010544 <std>
 8010654:	2301      	movs	r3, #1
 8010656:	61a3      	str	r3, [r4, #24]
 8010658:	e7d2      	b.n	8010600 <__sinit+0xc>
 801065a:	bf00      	nop
 801065c:	0802410c 	.word	0x0802410c
 8010660:	0801058d 	.word	0x0801058d

08010664 <__sfp>:
 8010664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010666:	4607      	mov	r7, r0
 8010668:	f7ff ffac 	bl	80105c4 <__sfp_lock_acquire>
 801066c:	4b1e      	ldr	r3, [pc, #120]	; (80106e8 <__sfp+0x84>)
 801066e:	681e      	ldr	r6, [r3, #0]
 8010670:	69b3      	ldr	r3, [r6, #24]
 8010672:	b913      	cbnz	r3, 801067a <__sfp+0x16>
 8010674:	4630      	mov	r0, r6
 8010676:	f7ff ffbd 	bl	80105f4 <__sinit>
 801067a:	3648      	adds	r6, #72	; 0x48
 801067c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010680:	3b01      	subs	r3, #1
 8010682:	d503      	bpl.n	801068c <__sfp+0x28>
 8010684:	6833      	ldr	r3, [r6, #0]
 8010686:	b30b      	cbz	r3, 80106cc <__sfp+0x68>
 8010688:	6836      	ldr	r6, [r6, #0]
 801068a:	e7f7      	b.n	801067c <__sfp+0x18>
 801068c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010690:	b9d5      	cbnz	r5, 80106c8 <__sfp+0x64>
 8010692:	4b16      	ldr	r3, [pc, #88]	; (80106ec <__sfp+0x88>)
 8010694:	60e3      	str	r3, [r4, #12]
 8010696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801069a:	6665      	str	r5, [r4, #100]	; 0x64
 801069c:	f000 f847 	bl	801072e <__retarget_lock_init_recursive>
 80106a0:	f7ff ff96 	bl	80105d0 <__sfp_lock_release>
 80106a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80106a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80106ac:	6025      	str	r5, [r4, #0]
 80106ae:	61a5      	str	r5, [r4, #24]
 80106b0:	2208      	movs	r2, #8
 80106b2:	4629      	mov	r1, r5
 80106b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80106b8:	f7fb fd46 	bl	800c148 <memset>
 80106bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80106c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80106c4:	4620      	mov	r0, r4
 80106c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106c8:	3468      	adds	r4, #104	; 0x68
 80106ca:	e7d9      	b.n	8010680 <__sfp+0x1c>
 80106cc:	2104      	movs	r1, #4
 80106ce:	4638      	mov	r0, r7
 80106d0:	f7ff ff62 	bl	8010598 <__sfmoreglue>
 80106d4:	4604      	mov	r4, r0
 80106d6:	6030      	str	r0, [r6, #0]
 80106d8:	2800      	cmp	r0, #0
 80106da:	d1d5      	bne.n	8010688 <__sfp+0x24>
 80106dc:	f7ff ff78 	bl	80105d0 <__sfp_lock_release>
 80106e0:	230c      	movs	r3, #12
 80106e2:	603b      	str	r3, [r7, #0]
 80106e4:	e7ee      	b.n	80106c4 <__sfp+0x60>
 80106e6:	bf00      	nop
 80106e8:	0802410c 	.word	0x0802410c
 80106ec:	ffff0001 	.word	0xffff0001

080106f0 <_fwalk_reent>:
 80106f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106f4:	4606      	mov	r6, r0
 80106f6:	4688      	mov	r8, r1
 80106f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80106fc:	2700      	movs	r7, #0
 80106fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010702:	f1b9 0901 	subs.w	r9, r9, #1
 8010706:	d505      	bpl.n	8010714 <_fwalk_reent+0x24>
 8010708:	6824      	ldr	r4, [r4, #0]
 801070a:	2c00      	cmp	r4, #0
 801070c:	d1f7      	bne.n	80106fe <_fwalk_reent+0xe>
 801070e:	4638      	mov	r0, r7
 8010710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010714:	89ab      	ldrh	r3, [r5, #12]
 8010716:	2b01      	cmp	r3, #1
 8010718:	d907      	bls.n	801072a <_fwalk_reent+0x3a>
 801071a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801071e:	3301      	adds	r3, #1
 8010720:	d003      	beq.n	801072a <_fwalk_reent+0x3a>
 8010722:	4629      	mov	r1, r5
 8010724:	4630      	mov	r0, r6
 8010726:	47c0      	blx	r8
 8010728:	4307      	orrs	r7, r0
 801072a:	3568      	adds	r5, #104	; 0x68
 801072c:	e7e9      	b.n	8010702 <_fwalk_reent+0x12>

0801072e <__retarget_lock_init_recursive>:
 801072e:	4770      	bx	lr

08010730 <__retarget_lock_acquire_recursive>:
 8010730:	4770      	bx	lr

08010732 <__retarget_lock_release_recursive>:
 8010732:	4770      	bx	lr

08010734 <__swhatbuf_r>:
 8010734:	b570      	push	{r4, r5, r6, lr}
 8010736:	460e      	mov	r6, r1
 8010738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801073c:	2900      	cmp	r1, #0
 801073e:	b096      	sub	sp, #88	; 0x58
 8010740:	4614      	mov	r4, r2
 8010742:	461d      	mov	r5, r3
 8010744:	da07      	bge.n	8010756 <__swhatbuf_r+0x22>
 8010746:	2300      	movs	r3, #0
 8010748:	602b      	str	r3, [r5, #0]
 801074a:	89b3      	ldrh	r3, [r6, #12]
 801074c:	061a      	lsls	r2, r3, #24
 801074e:	d410      	bmi.n	8010772 <__swhatbuf_r+0x3e>
 8010750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010754:	e00e      	b.n	8010774 <__swhatbuf_r+0x40>
 8010756:	466a      	mov	r2, sp
 8010758:	f000 f946 	bl	80109e8 <_fstat_r>
 801075c:	2800      	cmp	r0, #0
 801075e:	dbf2      	blt.n	8010746 <__swhatbuf_r+0x12>
 8010760:	9a01      	ldr	r2, [sp, #4]
 8010762:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010766:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801076a:	425a      	negs	r2, r3
 801076c:	415a      	adcs	r2, r3
 801076e:	602a      	str	r2, [r5, #0]
 8010770:	e7ee      	b.n	8010750 <__swhatbuf_r+0x1c>
 8010772:	2340      	movs	r3, #64	; 0x40
 8010774:	2000      	movs	r0, #0
 8010776:	6023      	str	r3, [r4, #0]
 8010778:	b016      	add	sp, #88	; 0x58
 801077a:	bd70      	pop	{r4, r5, r6, pc}

0801077c <__smakebuf_r>:
 801077c:	898b      	ldrh	r3, [r1, #12]
 801077e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010780:	079d      	lsls	r5, r3, #30
 8010782:	4606      	mov	r6, r0
 8010784:	460c      	mov	r4, r1
 8010786:	d507      	bpl.n	8010798 <__smakebuf_r+0x1c>
 8010788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801078c:	6023      	str	r3, [r4, #0]
 801078e:	6123      	str	r3, [r4, #16]
 8010790:	2301      	movs	r3, #1
 8010792:	6163      	str	r3, [r4, #20]
 8010794:	b002      	add	sp, #8
 8010796:	bd70      	pop	{r4, r5, r6, pc}
 8010798:	ab01      	add	r3, sp, #4
 801079a:	466a      	mov	r2, sp
 801079c:	f7ff ffca 	bl	8010734 <__swhatbuf_r>
 80107a0:	9900      	ldr	r1, [sp, #0]
 80107a2:	4605      	mov	r5, r0
 80107a4:	4630      	mov	r0, r6
 80107a6:	f7ff f9fb 	bl	800fba0 <_malloc_r>
 80107aa:	b948      	cbnz	r0, 80107c0 <__smakebuf_r+0x44>
 80107ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107b0:	059a      	lsls	r2, r3, #22
 80107b2:	d4ef      	bmi.n	8010794 <__smakebuf_r+0x18>
 80107b4:	f023 0303 	bic.w	r3, r3, #3
 80107b8:	f043 0302 	orr.w	r3, r3, #2
 80107bc:	81a3      	strh	r3, [r4, #12]
 80107be:	e7e3      	b.n	8010788 <__smakebuf_r+0xc>
 80107c0:	4b0d      	ldr	r3, [pc, #52]	; (80107f8 <__smakebuf_r+0x7c>)
 80107c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80107c4:	89a3      	ldrh	r3, [r4, #12]
 80107c6:	6020      	str	r0, [r4, #0]
 80107c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107cc:	81a3      	strh	r3, [r4, #12]
 80107ce:	9b00      	ldr	r3, [sp, #0]
 80107d0:	6163      	str	r3, [r4, #20]
 80107d2:	9b01      	ldr	r3, [sp, #4]
 80107d4:	6120      	str	r0, [r4, #16]
 80107d6:	b15b      	cbz	r3, 80107f0 <__smakebuf_r+0x74>
 80107d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107dc:	4630      	mov	r0, r6
 80107de:	f000 f915 	bl	8010a0c <_isatty_r>
 80107e2:	b128      	cbz	r0, 80107f0 <__smakebuf_r+0x74>
 80107e4:	89a3      	ldrh	r3, [r4, #12]
 80107e6:	f023 0303 	bic.w	r3, r3, #3
 80107ea:	f043 0301 	orr.w	r3, r3, #1
 80107ee:	81a3      	strh	r3, [r4, #12]
 80107f0:	89a0      	ldrh	r0, [r4, #12]
 80107f2:	4305      	orrs	r5, r0
 80107f4:	81a5      	strh	r5, [r4, #12]
 80107f6:	e7cd      	b.n	8010794 <__smakebuf_r+0x18>
 80107f8:	0801058d 	.word	0x0801058d

080107fc <memmove>:
 80107fc:	4288      	cmp	r0, r1
 80107fe:	b510      	push	{r4, lr}
 8010800:	eb01 0402 	add.w	r4, r1, r2
 8010804:	d902      	bls.n	801080c <memmove+0x10>
 8010806:	4284      	cmp	r4, r0
 8010808:	4623      	mov	r3, r4
 801080a:	d807      	bhi.n	801081c <memmove+0x20>
 801080c:	1e43      	subs	r3, r0, #1
 801080e:	42a1      	cmp	r1, r4
 8010810:	d008      	beq.n	8010824 <memmove+0x28>
 8010812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010816:	f803 2f01 	strb.w	r2, [r3, #1]!
 801081a:	e7f8      	b.n	801080e <memmove+0x12>
 801081c:	4402      	add	r2, r0
 801081e:	4601      	mov	r1, r0
 8010820:	428a      	cmp	r2, r1
 8010822:	d100      	bne.n	8010826 <memmove+0x2a>
 8010824:	bd10      	pop	{r4, pc}
 8010826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801082a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801082e:	e7f7      	b.n	8010820 <memmove+0x24>

08010830 <__malloc_lock>:
 8010830:	4801      	ldr	r0, [pc, #4]	; (8010838 <__malloc_lock+0x8>)
 8010832:	f7ff bf7d 	b.w	8010730 <__retarget_lock_acquire_recursive>
 8010836:	bf00      	nop
 8010838:	2000071c 	.word	0x2000071c

0801083c <__malloc_unlock>:
 801083c:	4801      	ldr	r0, [pc, #4]	; (8010844 <__malloc_unlock+0x8>)
 801083e:	f7ff bf78 	b.w	8010732 <__retarget_lock_release_recursive>
 8010842:	bf00      	nop
 8010844:	2000071c 	.word	0x2000071c

08010848 <_realloc_r>:
 8010848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801084a:	4607      	mov	r7, r0
 801084c:	4614      	mov	r4, r2
 801084e:	460e      	mov	r6, r1
 8010850:	b921      	cbnz	r1, 801085c <_realloc_r+0x14>
 8010852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010856:	4611      	mov	r1, r2
 8010858:	f7ff b9a2 	b.w	800fba0 <_malloc_r>
 801085c:	b922      	cbnz	r2, 8010868 <_realloc_r+0x20>
 801085e:	f7ff f94f 	bl	800fb00 <_free_r>
 8010862:	4625      	mov	r5, r4
 8010864:	4628      	mov	r0, r5
 8010866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010868:	f000 f8f2 	bl	8010a50 <_malloc_usable_size_r>
 801086c:	42a0      	cmp	r0, r4
 801086e:	d20f      	bcs.n	8010890 <_realloc_r+0x48>
 8010870:	4621      	mov	r1, r4
 8010872:	4638      	mov	r0, r7
 8010874:	f7ff f994 	bl	800fba0 <_malloc_r>
 8010878:	4605      	mov	r5, r0
 801087a:	2800      	cmp	r0, #0
 801087c:	d0f2      	beq.n	8010864 <_realloc_r+0x1c>
 801087e:	4631      	mov	r1, r6
 8010880:	4622      	mov	r2, r4
 8010882:	f7fe fc65 	bl	800f150 <memcpy>
 8010886:	4631      	mov	r1, r6
 8010888:	4638      	mov	r0, r7
 801088a:	f7ff f939 	bl	800fb00 <_free_r>
 801088e:	e7e9      	b.n	8010864 <_realloc_r+0x1c>
 8010890:	4635      	mov	r5, r6
 8010892:	e7e7      	b.n	8010864 <_realloc_r+0x1c>

08010894 <_raise_r>:
 8010894:	291f      	cmp	r1, #31
 8010896:	b538      	push	{r3, r4, r5, lr}
 8010898:	4604      	mov	r4, r0
 801089a:	460d      	mov	r5, r1
 801089c:	d904      	bls.n	80108a8 <_raise_r+0x14>
 801089e:	2316      	movs	r3, #22
 80108a0:	6003      	str	r3, [r0, #0]
 80108a2:	f04f 30ff 	mov.w	r0, #4294967295
 80108a6:	bd38      	pop	{r3, r4, r5, pc}
 80108a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80108aa:	b112      	cbz	r2, 80108b2 <_raise_r+0x1e>
 80108ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80108b0:	b94b      	cbnz	r3, 80108c6 <_raise_r+0x32>
 80108b2:	4620      	mov	r0, r4
 80108b4:	f000 f830 	bl	8010918 <_getpid_r>
 80108b8:	462a      	mov	r2, r5
 80108ba:	4601      	mov	r1, r0
 80108bc:	4620      	mov	r0, r4
 80108be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108c2:	f000 b817 	b.w	80108f4 <_kill_r>
 80108c6:	2b01      	cmp	r3, #1
 80108c8:	d00a      	beq.n	80108e0 <_raise_r+0x4c>
 80108ca:	1c59      	adds	r1, r3, #1
 80108cc:	d103      	bne.n	80108d6 <_raise_r+0x42>
 80108ce:	2316      	movs	r3, #22
 80108d0:	6003      	str	r3, [r0, #0]
 80108d2:	2001      	movs	r0, #1
 80108d4:	e7e7      	b.n	80108a6 <_raise_r+0x12>
 80108d6:	2400      	movs	r4, #0
 80108d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80108dc:	4628      	mov	r0, r5
 80108de:	4798      	blx	r3
 80108e0:	2000      	movs	r0, #0
 80108e2:	e7e0      	b.n	80108a6 <_raise_r+0x12>

080108e4 <raise>:
 80108e4:	4b02      	ldr	r3, [pc, #8]	; (80108f0 <raise+0xc>)
 80108e6:	4601      	mov	r1, r0
 80108e8:	6818      	ldr	r0, [r3, #0]
 80108ea:	f7ff bfd3 	b.w	8010894 <_raise_r>
 80108ee:	bf00      	nop
 80108f0:	20000040 	.word	0x20000040

080108f4 <_kill_r>:
 80108f4:	b538      	push	{r3, r4, r5, lr}
 80108f6:	4d07      	ldr	r5, [pc, #28]	; (8010914 <_kill_r+0x20>)
 80108f8:	2300      	movs	r3, #0
 80108fa:	4604      	mov	r4, r0
 80108fc:	4608      	mov	r0, r1
 80108fe:	4611      	mov	r1, r2
 8010900:	602b      	str	r3, [r5, #0]
 8010902:	f7f4 ff19 	bl	8005738 <_kill>
 8010906:	1c43      	adds	r3, r0, #1
 8010908:	d102      	bne.n	8010910 <_kill_r+0x1c>
 801090a:	682b      	ldr	r3, [r5, #0]
 801090c:	b103      	cbz	r3, 8010910 <_kill_r+0x1c>
 801090e:	6023      	str	r3, [r4, #0]
 8010910:	bd38      	pop	{r3, r4, r5, pc}
 8010912:	bf00      	nop
 8010914:	20000724 	.word	0x20000724

08010918 <_getpid_r>:
 8010918:	f7f4 bf06 	b.w	8005728 <_getpid>

0801091c <__sread>:
 801091c:	b510      	push	{r4, lr}
 801091e:	460c      	mov	r4, r1
 8010920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010924:	f000 f89c 	bl	8010a60 <_read_r>
 8010928:	2800      	cmp	r0, #0
 801092a:	bfab      	itete	ge
 801092c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801092e:	89a3      	ldrhlt	r3, [r4, #12]
 8010930:	181b      	addge	r3, r3, r0
 8010932:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010936:	bfac      	ite	ge
 8010938:	6563      	strge	r3, [r4, #84]	; 0x54
 801093a:	81a3      	strhlt	r3, [r4, #12]
 801093c:	bd10      	pop	{r4, pc}

0801093e <__swrite>:
 801093e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010942:	461f      	mov	r7, r3
 8010944:	898b      	ldrh	r3, [r1, #12]
 8010946:	05db      	lsls	r3, r3, #23
 8010948:	4605      	mov	r5, r0
 801094a:	460c      	mov	r4, r1
 801094c:	4616      	mov	r6, r2
 801094e:	d505      	bpl.n	801095c <__swrite+0x1e>
 8010950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010954:	2302      	movs	r3, #2
 8010956:	2200      	movs	r2, #0
 8010958:	f000 f868 	bl	8010a2c <_lseek_r>
 801095c:	89a3      	ldrh	r3, [r4, #12]
 801095e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010966:	81a3      	strh	r3, [r4, #12]
 8010968:	4632      	mov	r2, r6
 801096a:	463b      	mov	r3, r7
 801096c:	4628      	mov	r0, r5
 801096e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010972:	f000 b817 	b.w	80109a4 <_write_r>

08010976 <__sseek>:
 8010976:	b510      	push	{r4, lr}
 8010978:	460c      	mov	r4, r1
 801097a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801097e:	f000 f855 	bl	8010a2c <_lseek_r>
 8010982:	1c43      	adds	r3, r0, #1
 8010984:	89a3      	ldrh	r3, [r4, #12]
 8010986:	bf15      	itete	ne
 8010988:	6560      	strne	r0, [r4, #84]	; 0x54
 801098a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801098e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010992:	81a3      	strheq	r3, [r4, #12]
 8010994:	bf18      	it	ne
 8010996:	81a3      	strhne	r3, [r4, #12]
 8010998:	bd10      	pop	{r4, pc}

0801099a <__sclose>:
 801099a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801099e:	f000 b813 	b.w	80109c8 <_close_r>
	...

080109a4 <_write_r>:
 80109a4:	b538      	push	{r3, r4, r5, lr}
 80109a6:	4d07      	ldr	r5, [pc, #28]	; (80109c4 <_write_r+0x20>)
 80109a8:	4604      	mov	r4, r0
 80109aa:	4608      	mov	r0, r1
 80109ac:	4611      	mov	r1, r2
 80109ae:	2200      	movs	r2, #0
 80109b0:	602a      	str	r2, [r5, #0]
 80109b2:	461a      	mov	r2, r3
 80109b4:	f7f4 fef7 	bl	80057a6 <_write>
 80109b8:	1c43      	adds	r3, r0, #1
 80109ba:	d102      	bne.n	80109c2 <_write_r+0x1e>
 80109bc:	682b      	ldr	r3, [r5, #0]
 80109be:	b103      	cbz	r3, 80109c2 <_write_r+0x1e>
 80109c0:	6023      	str	r3, [r4, #0]
 80109c2:	bd38      	pop	{r3, r4, r5, pc}
 80109c4:	20000724 	.word	0x20000724

080109c8 <_close_r>:
 80109c8:	b538      	push	{r3, r4, r5, lr}
 80109ca:	4d06      	ldr	r5, [pc, #24]	; (80109e4 <_close_r+0x1c>)
 80109cc:	2300      	movs	r3, #0
 80109ce:	4604      	mov	r4, r0
 80109d0:	4608      	mov	r0, r1
 80109d2:	602b      	str	r3, [r5, #0]
 80109d4:	f7f4 ff03 	bl	80057de <_close>
 80109d8:	1c43      	adds	r3, r0, #1
 80109da:	d102      	bne.n	80109e2 <_close_r+0x1a>
 80109dc:	682b      	ldr	r3, [r5, #0]
 80109de:	b103      	cbz	r3, 80109e2 <_close_r+0x1a>
 80109e0:	6023      	str	r3, [r4, #0]
 80109e2:	bd38      	pop	{r3, r4, r5, pc}
 80109e4:	20000724 	.word	0x20000724

080109e8 <_fstat_r>:
 80109e8:	b538      	push	{r3, r4, r5, lr}
 80109ea:	4d07      	ldr	r5, [pc, #28]	; (8010a08 <_fstat_r+0x20>)
 80109ec:	2300      	movs	r3, #0
 80109ee:	4604      	mov	r4, r0
 80109f0:	4608      	mov	r0, r1
 80109f2:	4611      	mov	r1, r2
 80109f4:	602b      	str	r3, [r5, #0]
 80109f6:	f7f4 fefe 	bl	80057f6 <_fstat>
 80109fa:	1c43      	adds	r3, r0, #1
 80109fc:	d102      	bne.n	8010a04 <_fstat_r+0x1c>
 80109fe:	682b      	ldr	r3, [r5, #0]
 8010a00:	b103      	cbz	r3, 8010a04 <_fstat_r+0x1c>
 8010a02:	6023      	str	r3, [r4, #0]
 8010a04:	bd38      	pop	{r3, r4, r5, pc}
 8010a06:	bf00      	nop
 8010a08:	20000724 	.word	0x20000724

08010a0c <_isatty_r>:
 8010a0c:	b538      	push	{r3, r4, r5, lr}
 8010a0e:	4d06      	ldr	r5, [pc, #24]	; (8010a28 <_isatty_r+0x1c>)
 8010a10:	2300      	movs	r3, #0
 8010a12:	4604      	mov	r4, r0
 8010a14:	4608      	mov	r0, r1
 8010a16:	602b      	str	r3, [r5, #0]
 8010a18:	f7f4 fefd 	bl	8005816 <_isatty>
 8010a1c:	1c43      	adds	r3, r0, #1
 8010a1e:	d102      	bne.n	8010a26 <_isatty_r+0x1a>
 8010a20:	682b      	ldr	r3, [r5, #0]
 8010a22:	b103      	cbz	r3, 8010a26 <_isatty_r+0x1a>
 8010a24:	6023      	str	r3, [r4, #0]
 8010a26:	bd38      	pop	{r3, r4, r5, pc}
 8010a28:	20000724 	.word	0x20000724

08010a2c <_lseek_r>:
 8010a2c:	b538      	push	{r3, r4, r5, lr}
 8010a2e:	4d07      	ldr	r5, [pc, #28]	; (8010a4c <_lseek_r+0x20>)
 8010a30:	4604      	mov	r4, r0
 8010a32:	4608      	mov	r0, r1
 8010a34:	4611      	mov	r1, r2
 8010a36:	2200      	movs	r2, #0
 8010a38:	602a      	str	r2, [r5, #0]
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	f7f4 fef6 	bl	800582c <_lseek>
 8010a40:	1c43      	adds	r3, r0, #1
 8010a42:	d102      	bne.n	8010a4a <_lseek_r+0x1e>
 8010a44:	682b      	ldr	r3, [r5, #0]
 8010a46:	b103      	cbz	r3, 8010a4a <_lseek_r+0x1e>
 8010a48:	6023      	str	r3, [r4, #0]
 8010a4a:	bd38      	pop	{r3, r4, r5, pc}
 8010a4c:	20000724 	.word	0x20000724

08010a50 <_malloc_usable_size_r>:
 8010a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a54:	1f18      	subs	r0, r3, #4
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	bfbc      	itt	lt
 8010a5a:	580b      	ldrlt	r3, [r1, r0]
 8010a5c:	18c0      	addlt	r0, r0, r3
 8010a5e:	4770      	bx	lr

08010a60 <_read_r>:
 8010a60:	b538      	push	{r3, r4, r5, lr}
 8010a62:	4d07      	ldr	r5, [pc, #28]	; (8010a80 <_read_r+0x20>)
 8010a64:	4604      	mov	r4, r0
 8010a66:	4608      	mov	r0, r1
 8010a68:	4611      	mov	r1, r2
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	602a      	str	r2, [r5, #0]
 8010a6e:	461a      	mov	r2, r3
 8010a70:	f7f4 fe7c 	bl	800576c <_read>
 8010a74:	1c43      	adds	r3, r0, #1
 8010a76:	d102      	bne.n	8010a7e <_read_r+0x1e>
 8010a78:	682b      	ldr	r3, [r5, #0]
 8010a7a:	b103      	cbz	r3, 8010a7e <_read_r+0x1e>
 8010a7c:	6023      	str	r3, [r4, #0]
 8010a7e:	bd38      	pop	{r3, r4, r5, pc}
 8010a80:	20000724 	.word	0x20000724

08010a84 <_init>:
 8010a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a86:	bf00      	nop
 8010a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a8a:	bc08      	pop	{r3}
 8010a8c:	469e      	mov	lr, r3
 8010a8e:	4770      	bx	lr

08010a90 <_fini>:
 8010a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a92:	bf00      	nop
 8010a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a96:	bc08      	pop	{r3}
 8010a98:	469e      	mov	lr, r3
 8010a9a:	4770      	bx	lr
